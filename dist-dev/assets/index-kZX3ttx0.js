var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var _a, _b;
function _mergeNamespaces(n2, m2) {
  for (var i = 0; i < m2.length; i++) {
    const e = m2[i];
    if (typeof e !== "string" && !Array.isArray(e)) {
      for (const k2 in e) {
        if (k2 !== "default" && !(k2 in n2)) {
          const d2 = Object.getOwnPropertyDescriptor(e, k2);
          if (d2) {
            Object.defineProperty(n2, k2, d2.get ? d2 : {
              enumerable: true,
              get: () => e[k2]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }));
}
(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
function getAugmentedNamespace(n2) {
  if (n2.__esModule) return n2;
  var f2 = n2.default;
  if (typeof f2 == "function") {
    var a = function a2() {
      if (this instanceof a2) {
        return Reflect.construct(f2, arguments, this.constructor);
      }
      return f2.apply(this, arguments);
    };
    a.prototype = f2.prototype;
  } else a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n2).forEach(function(k2) {
    var d2 = Object.getOwnPropertyDescriptor(n2, k2);
    Object.defineProperty(a, k2, d2.get ? d2 : {
      enumerable: true,
      get: function() {
        return n2[k2];
      }
    });
  });
  return a;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
var react = { exports: {} };
var react_production_min = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var l$1 = Symbol.for("react.element"), n$1 = Symbol.for("react.portal"), p$3 = Symbol.for("react.fragment"), q$2 = Symbol.for("react.strict_mode"), r$1 = Symbol.for("react.profiler"), t = Symbol.for("react.provider"), u$1 = Symbol.for("react.context"), v$2 = Symbol.for("react.forward_ref"), w$1 = Symbol.for("react.suspense"), x$1 = Symbol.for("react.memo"), y$1 = Symbol.for("react.lazy"), z$2 = Symbol.iterator;
function A$2(a) {
  if (null === a || "object" !== typeof a) return null;
  a = z$2 && a[z$2] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var B$2 = { isMounted: function() {
  return false;
}, enqueueForceUpdate: function() {
}, enqueueReplaceState: function() {
}, enqueueSetState: function() {
} }, C$2 = Object.assign, D$2 = {};
function E$2(a, b2, e) {
  this.props = a;
  this.context = b2;
  this.refs = D$2;
  this.updater = e || B$2;
}
E$2.prototype.isReactComponent = {};
E$2.prototype.setState = function(a, b2) {
  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
  this.updater.enqueueSetState(this, a, b2, "setState");
};
E$2.prototype.forceUpdate = function(a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function F() {
}
F.prototype = E$2.prototype;
function G$1(a, b2, e) {
  this.props = a;
  this.context = b2;
  this.refs = D$2;
  this.updater = e || B$2;
}
var H$2 = G$1.prototype = new F();
H$2.constructor = G$1;
C$2(H$2, E$2.prototype);
H$2.isPureReactComponent = true;
var I$2 = Array.isArray, J = Object.prototype.hasOwnProperty, K$1 = { current: null }, L$2 = { key: true, ref: true, __self: true, __source: true };
function M$2(a, b2, e) {
  var d2, c2 = {}, k2 = null, h3 = null;
  if (null != b2) for (d2 in void 0 !== b2.ref && (h3 = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2) J.call(b2, d2) && !L$2.hasOwnProperty(d2) && (c2[d2] = b2[d2]);
  var g2 = arguments.length - 2;
  if (1 === g2) c2.children = e;
  else if (1 < g2) {
    for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++) f2[m2] = arguments[m2 + 2];
    c2.children = f2;
  }
  if (a && a.defaultProps) for (d2 in g2 = a.defaultProps, g2) void 0 === c2[d2] && (c2[d2] = g2[d2]);
  return { $$typeof: l$1, type: a, key: k2, ref: h3, props: c2, _owner: K$1.current };
}
function N$2(a, b2) {
  return { $$typeof: l$1, type: a.type, key: b2, ref: a.ref, props: a.props, _owner: a._owner };
}
function O$2(a) {
  return "object" === typeof a && null !== a && a.$$typeof === l$1;
}
function escape(a) {
  var b2 = { "=": "=0", ":": "=2" };
  return "$" + a.replace(/[=:]/g, function(a2) {
    return b2[a2];
  });
}
var P$2 = /\/+/g;
function Q$2(a, b2) {
  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b2.toString(36);
}
function R$2(a, b2, e, d2, c2) {
  var k2 = typeof a;
  if ("undefined" === k2 || "boolean" === k2) a = null;
  var h3 = false;
  if (null === a) h3 = true;
  else switch (k2) {
    case "string":
    case "number":
      h3 = true;
      break;
    case "object":
      switch (a.$$typeof) {
        case l$1:
        case n$1:
          h3 = true;
      }
  }
  if (h3) return h3 = a, c2 = c2(h3), a = "" === d2 ? "." + Q$2(h3, 0) : d2, I$2(c2) ? (e = "", null != a && (e = a.replace(P$2, "$&/") + "/"), R$2(c2, b2, e, "", function(a2) {
    return a2;
  })) : null != c2 && (O$2(c2) && (c2 = N$2(c2, e + (!c2.key || h3 && h3.key === c2.key ? "" : ("" + c2.key).replace(P$2, "$&/") + "/") + a)), b2.push(c2)), 1;
  h3 = 0;
  d2 = "" === d2 ? "." : d2 + ":";
  if (I$2(a)) for (var g2 = 0; g2 < a.length; g2++) {
    k2 = a[g2];
    var f2 = d2 + Q$2(k2, g2);
    h3 += R$2(k2, b2, e, f2, c2);
  }
  else if (f2 = A$2(a), "function" === typeof f2) for (a = f2.call(a), g2 = 0; !(k2 = a.next()).done; ) k2 = k2.value, f2 = d2 + Q$2(k2, g2++), h3 += R$2(k2, b2, e, f2, c2);
  else if ("object" === k2) throw b2 = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b2 ? "object with keys {" + Object.keys(a).join(", ") + "}" : b2) + "). If you meant to render a collection of children, use an array instead.");
  return h3;
}
function S$2(a, b2, e) {
  if (null == a) return a;
  var d2 = [], c2 = 0;
  R$2(a, d2, "", "", function(a2) {
    return b2.call(e, a2, c2++);
  });
  return d2;
}
function T$2(a) {
  if (-1 === a._status) {
    var b2 = a._result;
    b2 = b2();
    b2.then(function(b3) {
      if (0 === a._status || -1 === a._status) a._status = 1, a._result = b3;
    }, function(b3) {
      if (0 === a._status || -1 === a._status) a._status = 2, a._result = b3;
    });
    -1 === a._status && (a._status = 0, a._result = b2);
  }
  if (1 === a._status) return a._result.default;
  throw a._result;
}
var U$1 = { current: null }, V$1 = { transition: null }, W$1 = { ReactCurrentDispatcher: U$1, ReactCurrentBatchConfig: V$1, ReactCurrentOwner: K$1 };
function X$2() {
  throw Error("act(...) is not supported in production builds of React.");
}
react_production_min.Children = { map: S$2, forEach: function(a, b2, e) {
  S$2(a, function() {
    b2.apply(this, arguments);
  }, e);
}, count: function(a) {
  var b2 = 0;
  S$2(a, function() {
    b2++;
  });
  return b2;
}, toArray: function(a) {
  return S$2(a, function(a2) {
    return a2;
  }) || [];
}, only: function(a) {
  if (!O$2(a)) throw Error("React.Children.only expected to receive a single React element child.");
  return a;
} };
react_production_min.Component = E$2;
react_production_min.Fragment = p$3;
react_production_min.Profiler = r$1;
react_production_min.PureComponent = G$1;
react_production_min.StrictMode = q$2;
react_production_min.Suspense = w$1;
react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$1;
react_production_min.act = X$2;
react_production_min.cloneElement = function(a, b2, e) {
  if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
  var d2 = C$2({}, a.props), c2 = a.key, k2 = a.ref, h3 = a._owner;
  if (null != b2) {
    void 0 !== b2.ref && (k2 = b2.ref, h3 = K$1.current);
    void 0 !== b2.key && (c2 = "" + b2.key);
    if (a.type && a.type.defaultProps) var g2 = a.type.defaultProps;
    for (f2 in b2) J.call(b2, f2) && !L$2.hasOwnProperty(f2) && (d2[f2] = void 0 === b2[f2] && void 0 !== g2 ? g2[f2] : b2[f2]);
  }
  var f2 = arguments.length - 2;
  if (1 === f2) d2.children = e;
  else if (1 < f2) {
    g2 = Array(f2);
    for (var m2 = 0; m2 < f2; m2++) g2[m2] = arguments[m2 + 2];
    d2.children = g2;
  }
  return { $$typeof: l$1, type: a.type, key: c2, ref: k2, props: d2, _owner: h3 };
};
react_production_min.createContext = function(a) {
  a = { $$typeof: u$1, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
  a.Provider = { $$typeof: t, _context: a };
  return a.Consumer = a;
};
react_production_min.createElement = M$2;
react_production_min.createFactory = function(a) {
  var b2 = M$2.bind(null, a);
  b2.type = a;
  return b2;
};
react_production_min.createRef = function() {
  return { current: null };
};
react_production_min.forwardRef = function(a) {
  return { $$typeof: v$2, render: a };
};
react_production_min.isValidElement = O$2;
react_production_min.lazy = function(a) {
  return { $$typeof: y$1, _payload: { _status: -1, _result: a }, _init: T$2 };
};
react_production_min.memo = function(a, b2) {
  return { $$typeof: x$1, type: a, compare: void 0 === b2 ? null : b2 };
};
react_production_min.startTransition = function(a) {
  var b2 = V$1.transition;
  V$1.transition = {};
  try {
    a();
  } finally {
    V$1.transition = b2;
  }
};
react_production_min.unstable_act = X$2;
react_production_min.useCallback = function(a, b2) {
  return U$1.current.useCallback(a, b2);
};
react_production_min.useContext = function(a) {
  return U$1.current.useContext(a);
};
react_production_min.useDebugValue = function() {
};
react_production_min.useDeferredValue = function(a) {
  return U$1.current.useDeferredValue(a);
};
react_production_min.useEffect = function(a, b2) {
  return U$1.current.useEffect(a, b2);
};
react_production_min.useId = function() {
  return U$1.current.useId();
};
react_production_min.useImperativeHandle = function(a, b2, e) {
  return U$1.current.useImperativeHandle(a, b2, e);
};
react_production_min.useInsertionEffect = function(a, b2) {
  return U$1.current.useInsertionEffect(a, b2);
};
react_production_min.useLayoutEffect = function(a, b2) {
  return U$1.current.useLayoutEffect(a, b2);
};
react_production_min.useMemo = function(a, b2) {
  return U$1.current.useMemo(a, b2);
};
react_production_min.useReducer = function(a, b2, e) {
  return U$1.current.useReducer(a, b2, e);
};
react_production_min.useRef = function(a) {
  return U$1.current.useRef(a);
};
react_production_min.useState = function(a) {
  return U$1.current.useState(a);
};
react_production_min.useSyncExternalStore = function(a, b2, e) {
  return U$1.current.useSyncExternalStore(a, b2, e);
};
react_production_min.useTransition = function() {
  return U$1.current.useTransition();
};
react_production_min.version = "18.3.1";
{
  react.exports = react_production_min;
}
var reactExports = react.exports;
const React$2 = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
const React$3 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: React$2
}, [reactExports]);
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f$1 = reactExports, k$1 = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m$2 = Object.prototype.hasOwnProperty, n = f$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p$2 = { key: true, ref: true, __self: true, __source: true };
function q$1(c2, a, g2) {
  var b2, d2 = {}, e = null, h3 = null;
  void 0 !== g2 && (e = "" + g2);
  void 0 !== a.key && (e = "" + a.key);
  void 0 !== a.ref && (h3 = a.ref);
  for (b2 in a) m$2.call(a, b2) && !p$2.hasOwnProperty(b2) && (d2[b2] = a[b2]);
  if (c2 && c2.defaultProps) for (b2 in a = c2.defaultProps, a) void 0 === d2[b2] && (d2[b2] = a[b2]);
  return { $$typeof: k$1, type: c2, key: e, ref: h3, props: d2, _owner: n.current };
}
reactJsxRuntime_production_min.Fragment = l;
reactJsxRuntime_production_min.jsx = q$1;
reactJsxRuntime_production_min.jsxs = q$1;
{
  jsxRuntime.exports = reactJsxRuntime_production_min;
}
var jsxRuntimeExports = jsxRuntime.exports;
var reactDom = { exports: {} };
var reactDom_production_min = {};
var scheduler = { exports: {} };
var scheduler_production_min = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(exports) {
  function f2(a, b2) {
    var c2 = a.length;
    a.push(b2);
    a: for (; 0 < c2; ) {
      var d2 = c2 - 1 >>> 1, e = a[d2];
      if (0 < g2(e, b2)) a[d2] = b2, a[c2] = e, c2 = d2;
      else break a;
    }
  }
  function h3(a) {
    return 0 === a.length ? null : a[0];
  }
  function k2(a) {
    if (0 === a.length) return null;
    var b2 = a[0], c2 = a.pop();
    if (c2 !== b2) {
      a[0] = c2;
      a: for (var d2 = 0, e = a.length, w2 = e >>> 1; d2 < w2; ) {
        var m2 = 2 * (d2 + 1) - 1, C2 = a[m2], n2 = m2 + 1, x2 = a[n2];
        if (0 > g2(C2, c2)) n2 < e && 0 > g2(x2, C2) ? (a[d2] = x2, a[n2] = c2, d2 = n2) : (a[d2] = C2, a[m2] = c2, d2 = m2);
        else if (n2 < e && 0 > g2(x2, c2)) a[d2] = x2, a[n2] = c2, d2 = n2;
        else break a;
      }
    }
    return b2;
  }
  function g2(a, b2) {
    var c2 = a.sortIndex - b2.sortIndex;
    return 0 !== c2 ? c2 : a.id - b2.id;
  }
  if ("object" === typeof performance && "function" === typeof performance.now) {
    var l2 = performance;
    exports.unstable_now = function() {
      return l2.now();
    };
  } else {
    var p2 = Date, q2 = p2.now();
    exports.unstable_now = function() {
      return p2.now() - q2;
    };
  }
  var r2 = [], t2 = [], u2 = 1, v2 = null, y2 = 3, z2 = false, A2 = false, B2 = false, D2 = "function" === typeof setTimeout ? setTimeout : null, E2 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
  "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
  function G2(a) {
    for (var b2 = h3(t2); null !== b2; ) {
      if (null === b2.callback) k2(t2);
      else if (b2.startTime <= a) k2(t2), b2.sortIndex = b2.expirationTime, f2(r2, b2);
      else break;
      b2 = h3(t2);
    }
  }
  function H2(a) {
    B2 = false;
    G2(a);
    if (!A2) if (null !== h3(r2)) A2 = true, I2(J2);
    else {
      var b2 = h3(t2);
      null !== b2 && K2(H2, b2.startTime - a);
    }
  }
  function J2(a, b2) {
    A2 = false;
    B2 && (B2 = false, E2(L2), L2 = -1);
    z2 = true;
    var c2 = y2;
    try {
      G2(b2);
      for (v2 = h3(r2); null !== v2 && (!(v2.expirationTime > b2) || a && !M2()); ) {
        var d2 = v2.callback;
        if ("function" === typeof d2) {
          v2.callback = null;
          y2 = v2.priorityLevel;
          var e = d2(v2.expirationTime <= b2);
          b2 = exports.unstable_now();
          "function" === typeof e ? v2.callback = e : v2 === h3(r2) && k2(r2);
          G2(b2);
        } else k2(r2);
        v2 = h3(r2);
      }
      if (null !== v2) var w2 = true;
      else {
        var m2 = h3(t2);
        null !== m2 && K2(H2, m2.startTime - b2);
        w2 = false;
      }
      return w2;
    } finally {
      v2 = null, y2 = c2, z2 = false;
    }
  }
  var N2 = false, O2 = null, L2 = -1, P2 = 5, Q2 = -1;
  function M2() {
    return exports.unstable_now() - Q2 < P2 ? false : true;
  }
  function R2() {
    if (null !== O2) {
      var a = exports.unstable_now();
      Q2 = a;
      var b2 = true;
      try {
        b2 = O2(true, a);
      } finally {
        b2 ? S2() : (N2 = false, O2 = null);
      }
    } else N2 = false;
  }
  var S2;
  if ("function" === typeof F2) S2 = function() {
    F2(R2);
  };
  else if ("undefined" !== typeof MessageChannel) {
    var T2 = new MessageChannel(), U2 = T2.port2;
    T2.port1.onmessage = R2;
    S2 = function() {
      U2.postMessage(null);
    };
  } else S2 = function() {
    D2(R2, 0);
  };
  function I2(a) {
    O2 = a;
    N2 || (N2 = true, S2());
  }
  function K2(a, b2) {
    L2 = D2(function() {
      a(exports.unstable_now());
    }, b2);
  }
  exports.unstable_IdlePriority = 5;
  exports.unstable_ImmediatePriority = 1;
  exports.unstable_LowPriority = 4;
  exports.unstable_NormalPriority = 3;
  exports.unstable_Profiling = null;
  exports.unstable_UserBlockingPriority = 2;
  exports.unstable_cancelCallback = function(a) {
    a.callback = null;
  };
  exports.unstable_continueExecution = function() {
    A2 || z2 || (A2 = true, I2(J2));
  };
  exports.unstable_forceFrameRate = function(a) {
    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a ? Math.floor(1e3 / a) : 5;
  };
  exports.unstable_getCurrentPriorityLevel = function() {
    return y2;
  };
  exports.unstable_getFirstCallbackNode = function() {
    return h3(r2);
  };
  exports.unstable_next = function(a) {
    switch (y2) {
      case 1:
      case 2:
      case 3:
        var b2 = 3;
        break;
      default:
        b2 = y2;
    }
    var c2 = y2;
    y2 = b2;
    try {
      return a();
    } finally {
      y2 = c2;
    }
  };
  exports.unstable_pauseExecution = function() {
  };
  exports.unstable_requestPaint = function() {
  };
  exports.unstable_runWithPriority = function(a, b2) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a = 3;
    }
    var c2 = y2;
    y2 = a;
    try {
      return b2();
    } finally {
      y2 = c2;
    }
  };
  exports.unstable_scheduleCallback = function(a, b2, c2) {
    var d2 = exports.unstable_now();
    "object" === typeof c2 && null !== c2 ? (c2 = c2.delay, c2 = "number" === typeof c2 && 0 < c2 ? d2 + c2 : d2) : c2 = d2;
    switch (a) {
      case 1:
        var e = -1;
        break;
      case 2:
        e = 250;
        break;
      case 5:
        e = 1073741823;
        break;
      case 4:
        e = 1e4;
        break;
      default:
        e = 5e3;
    }
    e = c2 + e;
    a = { id: u2++, callback: b2, priorityLevel: a, startTime: c2, expirationTime: e, sortIndex: -1 };
    c2 > d2 ? (a.sortIndex = c2, f2(t2, a), null === h3(r2) && a === h3(t2) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K2(H2, c2 - d2))) : (a.sortIndex = e, f2(r2, a), A2 || z2 || (A2 = true, I2(J2)));
    return a;
  };
  exports.unstable_shouldYield = M2;
  exports.unstable_wrapCallback = function(a) {
    var b2 = y2;
    return function() {
      var c2 = y2;
      y2 = b2;
      try {
        return a.apply(this, arguments);
      } finally {
        y2 = c2;
      }
    };
  };
})(scheduler_production_min);
{
  scheduler.exports = scheduler_production_min;
}
var schedulerExports = scheduler.exports;
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aa = reactExports, ca = schedulerExports;
function p$1(a) {
  for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c2 = 1; c2 < arguments.length; c2++) b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
  return "Minified React error #" + a + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var da = /* @__PURE__ */ new Set(), ea = {};
function fa(a, b2) {
  ha(a, b2);
  ha(a + "Capture", b2);
}
function ha(a, b2) {
  ea[a] = b2;
  for (a = 0; a < b2.length; a++) da.add(b2[a]);
}
var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
function oa(a) {
  if (ja.call(ma, a)) return true;
  if (ja.call(la, a)) return false;
  if (ka.test(a)) return ma[a] = true;
  la[a] = true;
  return false;
}
function pa(a, b2, c2, d2) {
  if (null !== c2 && 0 === c2.type) return false;
  switch (typeof b2) {
    case "function":
    case "symbol":
      return true;
    case "boolean":
      if (d2) return false;
      if (null !== c2) return !c2.acceptsBooleans;
      a = a.toLowerCase().slice(0, 5);
      return "data-" !== a && "aria-" !== a;
    default:
      return false;
  }
}
function qa(a, b2, c2, d2) {
  if (null === b2 || "undefined" === typeof b2 || pa(a, b2, c2, d2)) return true;
  if (d2) return false;
  if (null !== c2) switch (c2.type) {
    case 3:
      return !b2;
    case 4:
      return false === b2;
    case 5:
      return isNaN(b2);
    case 6:
      return isNaN(b2) || 1 > b2;
  }
  return false;
}
function v$1(a, b2, c2, d2, e, f2, g2) {
  this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
  this.attributeName = d2;
  this.attributeNamespace = e;
  this.mustUseProperty = c2;
  this.propertyName = a;
  this.type = b2;
  this.sanitizeURL = f2;
  this.removeEmptyString = g2;
}
var z$1 = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
  z$1[a] = new v$1(a, 0, false, a, null, false, false);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
  var b2 = a[0];
  z$1[b2] = new v$1(b2, 1, false, a[1], null, false, false);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
  z$1[a] = new v$1(a, 2, false, a.toLowerCase(), null, false, false);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
  z$1[a] = new v$1(a, 2, false, a, null, false, false);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
  z$1[a] = new v$1(a, 3, false, a.toLowerCase(), null, false, false);
});
["checked", "multiple", "muted", "selected"].forEach(function(a) {
  z$1[a] = new v$1(a, 3, true, a, null, false, false);
});
["capture", "download"].forEach(function(a) {
  z$1[a] = new v$1(a, 4, false, a, null, false, false);
});
["cols", "rows", "size", "span"].forEach(function(a) {
  z$1[a] = new v$1(a, 6, false, a, null, false, false);
});
["rowSpan", "start"].forEach(function(a) {
  z$1[a] = new v$1(a, 5, false, a.toLowerCase(), null, false, false);
});
var ra = /[\-:]([a-z])/g;
function sa(a) {
  return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
  var b2 = a.replace(
    ra,
    sa
  );
  z$1[b2] = new v$1(b2, 1, false, a, null, false, false);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
  var b2 = a.replace(ra, sa);
  z$1[b2] = new v$1(b2, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
});
["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
  var b2 = a.replace(ra, sa);
  z$1[b2] = new v$1(b2, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
});
["tabIndex", "crossOrigin"].forEach(function(a) {
  z$1[a] = new v$1(a, 1, false, a.toLowerCase(), null, false, false);
});
z$1.xlinkHref = new v$1("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
["src", "href", "action", "formAction"].forEach(function(a) {
  z$1[a] = new v$1(a, 1, false, a.toLowerCase(), null, true, true);
});
function ta(a, b2, c2, d2) {
  var e = z$1.hasOwnProperty(b2) ? z$1[b2] : null;
  if (null !== e ? 0 !== e.type : d2 || !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1]) qa(b2, c2, e, d2) && (c2 = null), d2 || null === e ? oa(b2) && (null === c2 ? a.removeAttribute(b2) : a.setAttribute(b2, "" + c2)) : e.mustUseProperty ? a[e.propertyName] = null === c2 ? 3 === e.type ? false : "" : c2 : (b2 = e.attributeName, d2 = e.attributeNamespace, null === c2 ? a.removeAttribute(b2) : (e = e.type, c2 = 3 === e || 4 === e && true === c2 ? "" : "" + c2, d2 ? a.setAttributeNS(d2, b2, c2) : a.setAttribute(b2, c2)));
}
var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
var Ia = Symbol.for("react.offscreen");
var Ja = Symbol.iterator;
function Ka(a) {
  if (null === a || "object" !== typeof a) return null;
  a = Ja && a[Ja] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var A$1 = Object.assign, La;
function Ma(a) {
  if (void 0 === La) try {
    throw Error();
  } catch (c2) {
    var b2 = c2.stack.trim().match(/\n( *(at )?)/);
    La = b2 && b2[1] || "";
  }
  return "\n" + La + a;
}
var Na = false;
function Oa(a, b2) {
  if (!a || Na) return "";
  Na = true;
  var c2 = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (b2) if (b2 = function() {
      throw Error();
    }, Object.defineProperty(b2.prototype, "props", { set: function() {
      throw Error();
    } }), "object" === typeof Reflect && Reflect.construct) {
      try {
        Reflect.construct(b2, []);
      } catch (l2) {
        var d2 = l2;
      }
      Reflect.construct(a, [], b2);
    } else {
      try {
        b2.call();
      } catch (l2) {
        d2 = l2;
      }
      a.call(b2.prototype);
    }
    else {
      try {
        throw Error();
      } catch (l2) {
        d2 = l2;
      }
      a();
    }
  } catch (l2) {
    if (l2 && d2 && "string" === typeof l2.stack) {
      for (var e = l2.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e.length - 1, h3 = f2.length - 1; 1 <= g2 && 0 <= h3 && e[g2] !== f2[h3]; ) h3--;
      for (; 1 <= g2 && 0 <= h3; g2--, h3--) if (e[g2] !== f2[h3]) {
        if (1 !== g2 || 1 !== h3) {
          do
            if (g2--, h3--, 0 > h3 || e[g2] !== f2[h3]) {
              var k2 = "\n" + e[g2].replace(" at new ", " at ");
              a.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a.displayName));
              return k2;
            }
          while (1 <= g2 && 0 <= h3);
        }
        break;
      }
    }
  } finally {
    Na = false, Error.prepareStackTrace = c2;
  }
  return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
}
function Pa(a) {
  switch (a.tag) {
    case 5:
      return Ma(a.type);
    case 16:
      return Ma("Lazy");
    case 13:
      return Ma("Suspense");
    case 19:
      return Ma("SuspenseList");
    case 0:
    case 2:
    case 15:
      return a = Oa(a.type, false), a;
    case 11:
      return a = Oa(a.type.render, false), a;
    case 1:
      return a = Oa(a.type, true), a;
    default:
      return "";
  }
}
function Qa(a) {
  if (null == a) return null;
  if ("function" === typeof a) return a.displayName || a.name || null;
  if ("string" === typeof a) return a;
  switch (a) {
    case ya:
      return "Fragment";
    case wa:
      return "Portal";
    case Aa:
      return "Profiler";
    case za:
      return "StrictMode";
    case Ea:
      return "Suspense";
    case Fa:
      return "SuspenseList";
  }
  if ("object" === typeof a) switch (a.$$typeof) {
    case Ca:
      return (a.displayName || "Context") + ".Consumer";
    case Ba:
      return (a._context.displayName || "Context") + ".Provider";
    case Da:
      var b2 = a.render;
      a = a.displayName;
      a || (a = b2.displayName || b2.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
      return a;
    case Ga:
      return b2 = a.displayName || null, null !== b2 ? b2 : Qa(a.type) || "Memo";
    case Ha:
      b2 = a._payload;
      a = a._init;
      try {
        return Qa(a(b2));
      } catch (c2) {
      }
  }
  return null;
}
function Ra(a) {
  var b2 = a.type;
  switch (a.tag) {
    case 24:
      return "Cache";
    case 9:
      return (b2.displayName || "Context") + ".Consumer";
    case 10:
      return (b2._context.displayName || "Context") + ".Provider";
    case 18:
      return "DehydratedFragment";
    case 11:
      return a = b2.render, a = a.displayName || a.name || "", b2.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
    case 7:
      return "Fragment";
    case 5:
      return b2;
    case 4:
      return "Portal";
    case 3:
      return "Root";
    case 6:
      return "Text";
    case 16:
      return Qa(b2);
    case 8:
      return b2 === za ? "StrictMode" : "Mode";
    case 22:
      return "Offscreen";
    case 12:
      return "Profiler";
    case 21:
      return "Scope";
    case 13:
      return "Suspense";
    case 19:
      return "SuspenseList";
    case 25:
      return "TracingMarker";
    case 1:
    case 0:
    case 17:
    case 2:
    case 14:
    case 15:
      if ("function" === typeof b2) return b2.displayName || b2.name || null;
      if ("string" === typeof b2) return b2;
  }
  return null;
}
function Sa(a) {
  switch (typeof a) {
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return a;
    case "object":
      return a;
    default:
      return "";
  }
}
function Ta(a) {
  var b2 = a.type;
  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
}
function Ua(a) {
  var b2 = Ta(a) ? "checked" : "value", c2 = Object.getOwnPropertyDescriptor(a.constructor.prototype, b2), d2 = "" + a[b2];
  if (!a.hasOwnProperty(b2) && "undefined" !== typeof c2 && "function" === typeof c2.get && "function" === typeof c2.set) {
    var e = c2.get, f2 = c2.set;
    Object.defineProperty(a, b2, { configurable: true, get: function() {
      return e.call(this);
    }, set: function(a2) {
      d2 = "" + a2;
      f2.call(this, a2);
    } });
    Object.defineProperty(a, b2, { enumerable: c2.enumerable });
    return { getValue: function() {
      return d2;
    }, setValue: function(a2) {
      d2 = "" + a2;
    }, stopTracking: function() {
      a._valueTracker = null;
      delete a[b2];
    } };
  }
}
function Va(a) {
  a._valueTracker || (a._valueTracker = Ua(a));
}
function Wa(a) {
  if (!a) return false;
  var b2 = a._valueTracker;
  if (!b2) return true;
  var c2 = b2.getValue();
  var d2 = "";
  a && (d2 = Ta(a) ? a.checked ? "true" : "false" : a.value);
  a = d2;
  return a !== c2 ? (b2.setValue(a), true) : false;
}
function Xa(a) {
  a = a || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a) return null;
  try {
    return a.activeElement || a.body;
  } catch (b2) {
    return a.body;
  }
}
function Ya(a, b2) {
  var c2 = b2.checked;
  return A$1({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c2 ? c2 : a._wrapperState.initialChecked });
}
function Za(a, b2) {
  var c2 = null == b2.defaultValue ? "" : b2.defaultValue, d2 = null != b2.checked ? b2.checked : b2.defaultChecked;
  c2 = Sa(null != b2.value ? b2.value : c2);
  a._wrapperState = { initialChecked: d2, initialValue: c2, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
}
function ab(a, b2) {
  b2 = b2.checked;
  null != b2 && ta(a, "checked", b2, false);
}
function bb(a, b2) {
  ab(a, b2);
  var c2 = Sa(b2.value), d2 = b2.type;
  if (null != c2) if ("number" === d2) {
    if (0 === c2 && "" === a.value || a.value != c2) a.value = "" + c2;
  } else a.value !== "" + c2 && (a.value = "" + c2);
  else if ("submit" === d2 || "reset" === d2) {
    a.removeAttribute("value");
    return;
  }
  b2.hasOwnProperty("value") ? cb(a, b2.type, c2) : b2.hasOwnProperty("defaultValue") && cb(a, b2.type, Sa(b2.defaultValue));
  null == b2.checked && null != b2.defaultChecked && (a.defaultChecked = !!b2.defaultChecked);
}
function db(a, b2, c2) {
  if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
    var d2 = b2.type;
    if (!("submit" !== d2 && "reset" !== d2 || void 0 !== b2.value && null !== b2.value)) return;
    b2 = "" + a._wrapperState.initialValue;
    c2 || b2 === a.value || (a.value = b2);
    a.defaultValue = b2;
  }
  c2 = a.name;
  "" !== c2 && (a.name = "");
  a.defaultChecked = !!a._wrapperState.initialChecked;
  "" !== c2 && (a.name = c2);
}
function cb(a, b2, c2) {
  if ("number" !== b2 || Xa(a.ownerDocument) !== a) null == c2 ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c2 && (a.defaultValue = "" + c2);
}
var eb = Array.isArray;
function fb(a, b2, c2, d2) {
  a = a.options;
  if (b2) {
    b2 = {};
    for (var e = 0; e < c2.length; e++) b2["$" + c2[e]] = true;
    for (c2 = 0; c2 < a.length; c2++) e = b2.hasOwnProperty("$" + a[c2].value), a[c2].selected !== e && (a[c2].selected = e), e && d2 && (a[c2].defaultSelected = true);
  } else {
    c2 = "" + Sa(c2);
    b2 = null;
    for (e = 0; e < a.length; e++) {
      if (a[e].value === c2) {
        a[e].selected = true;
        d2 && (a[e].defaultSelected = true);
        return;
      }
      null !== b2 || a[e].disabled || (b2 = a[e]);
    }
    null !== b2 && (b2.selected = true);
  }
}
function gb(a, b2) {
  if (null != b2.dangerouslySetInnerHTML) throw Error(p$1(91));
  return A$1({}, b2, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
}
function hb(a, b2) {
  var c2 = b2.value;
  if (null == c2) {
    c2 = b2.children;
    b2 = b2.defaultValue;
    if (null != c2) {
      if (null != b2) throw Error(p$1(92));
      if (eb(c2)) {
        if (1 < c2.length) throw Error(p$1(93));
        c2 = c2[0];
      }
      b2 = c2;
    }
    null == b2 && (b2 = "");
    c2 = b2;
  }
  a._wrapperState = { initialValue: Sa(c2) };
}
function ib(a, b2) {
  var c2 = Sa(b2.value), d2 = Sa(b2.defaultValue);
  null != c2 && (c2 = "" + c2, c2 !== a.value && (a.value = c2), null == b2.defaultValue && a.defaultValue !== c2 && (a.defaultValue = c2));
  null != d2 && (a.defaultValue = "" + d2);
}
function jb(a) {
  var b2 = a.textContent;
  b2 === a._wrapperState.initialValue && "" !== b2 && null !== b2 && (a.value = b2);
}
function kb(a) {
  switch (a) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function lb(a, b2) {
  return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b2) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a;
}
var mb, nb = function(a) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c2, d2, e) {
    MSApp.execUnsafeLocalFunction(function() {
      return a(b2, c2, d2, e);
    });
  } : a;
}(function(a, b2) {
  if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b2;
  else {
    mb = mb || document.createElement("div");
    mb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
    for (b2 = mb.firstChild; a.firstChild; ) a.removeChild(a.firstChild);
    for (; b2.firstChild; ) a.appendChild(b2.firstChild);
  }
});
function ob(a, b2) {
  if (b2) {
    var c2 = a.firstChild;
    if (c2 && c2 === a.lastChild && 3 === c2.nodeType) {
      c2.nodeValue = b2;
      return;
    }
  }
  a.textContent = b2;
}
var pb = {
  animationIterationCount: true,
  aspectRatio: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
}, qb = ["Webkit", "ms", "Moz", "O"];
Object.keys(pb).forEach(function(a) {
  qb.forEach(function(b2) {
    b2 = b2 + a.charAt(0).toUpperCase() + a.substring(1);
    pb[b2] = pb[a];
  });
});
function rb(a, b2, c2) {
  return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c2 || "number" !== typeof b2 || 0 === b2 || pb.hasOwnProperty(a) && pb[a] ? ("" + b2).trim() : b2 + "px";
}
function sb(a, b2) {
  a = a.style;
  for (var c2 in b2) if (b2.hasOwnProperty(c2)) {
    var d2 = 0 === c2.indexOf("--"), e = rb(c2, b2[c2], d2);
    "float" === c2 && (c2 = "cssFloat");
    d2 ? a.setProperty(c2, e) : a[c2] = e;
  }
}
var tb = A$1({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
function ub(a, b2) {
  if (b2) {
    if (tb[a] && (null != b2.children || null != b2.dangerouslySetInnerHTML)) throw Error(p$1(137, a));
    if (null != b2.dangerouslySetInnerHTML) {
      if (null != b2.children) throw Error(p$1(60));
      if ("object" !== typeof b2.dangerouslySetInnerHTML || !("__html" in b2.dangerouslySetInnerHTML)) throw Error(p$1(61));
    }
    if (null != b2.style && "object" !== typeof b2.style) throw Error(p$1(62));
  }
}
function vb(a, b2) {
  if (-1 === a.indexOf("-")) return "string" === typeof b2.is;
  switch (a) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return false;
    default:
      return true;
  }
}
var wb = null;
function xb(a) {
  a = a.target || a.srcElement || window;
  a.correspondingUseElement && (a = a.correspondingUseElement);
  return 3 === a.nodeType ? a.parentNode : a;
}
var yb = null, zb = null, Ab = null;
function Bb(a) {
  if (a = Cb(a)) {
    if ("function" !== typeof yb) throw Error(p$1(280));
    var b2 = a.stateNode;
    b2 && (b2 = Db(b2), yb(a.stateNode, a.type, b2));
  }
}
function Eb(a) {
  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
}
function Fb() {
  if (zb) {
    var a = zb, b2 = Ab;
    Ab = zb = null;
    Bb(a);
    if (b2) for (a = 0; a < b2.length; a++) Bb(b2[a]);
  }
}
function Gb(a, b2) {
  return a(b2);
}
function Hb() {
}
var Ib = false;
function Jb(a, b2, c2) {
  if (Ib) return a(b2, c2);
  Ib = true;
  try {
    return Gb(a, b2, c2);
  } finally {
    if (Ib = false, null !== zb || null !== Ab) Hb(), Fb();
  }
}
function Kb(a, b2) {
  var c2 = a.stateNode;
  if (null === c2) return null;
  var d2 = Db(c2);
  if (null === d2) return null;
  c2 = d2[b2];
  a: switch (b2) {
    case "onClick":
    case "onClickCapture":
    case "onDoubleClick":
    case "onDoubleClickCapture":
    case "onMouseDown":
    case "onMouseDownCapture":
    case "onMouseMove":
    case "onMouseMoveCapture":
    case "onMouseUp":
    case "onMouseUpCapture":
    case "onMouseEnter":
      (d2 = !d2.disabled) || (a = a.type, d2 = !("button" === a || "input" === a || "select" === a || "textarea" === a));
      a = !d2;
      break a;
    default:
      a = false;
  }
  if (a) return null;
  if (c2 && "function" !== typeof c2) throw Error(p$1(231, b2, typeof c2));
  return c2;
}
var Lb = false;
if (ia) try {
  var Mb = {};
  Object.defineProperty(Mb, "passive", { get: function() {
    Lb = true;
  } });
  window.addEventListener("test", Mb, Mb);
  window.removeEventListener("test", Mb, Mb);
} catch (a) {
  Lb = false;
}
function Nb(a, b2, c2, d2, e, f2, g2, h3, k2) {
  var l2 = Array.prototype.slice.call(arguments, 3);
  try {
    b2.apply(c2, l2);
  } catch (m2) {
    this.onError(m2);
  }
}
var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a) {
  Ob = true;
  Pb = a;
} };
function Tb(a, b2, c2, d2, e, f2, g2, h3, k2) {
  Ob = false;
  Pb = null;
  Nb.apply(Sb, arguments);
}
function Ub(a, b2, c2, d2, e, f2, g2, h3, k2) {
  Tb.apply(this, arguments);
  if (Ob) {
    if (Ob) {
      var l2 = Pb;
      Ob = false;
      Pb = null;
    } else throw Error(p$1(198));
    Qb || (Qb = true, Rb = l2);
  }
}
function Vb(a) {
  var b2 = a, c2 = a;
  if (a.alternate) for (; b2.return; ) b2 = b2.return;
  else {
    a = b2;
    do
      b2 = a, 0 !== (b2.flags & 4098) && (c2 = b2.return), a = b2.return;
    while (a);
  }
  return 3 === b2.tag ? c2 : null;
}
function Wb(a) {
  if (13 === a.tag) {
    var b2 = a.memoizedState;
    null === b2 && (a = a.alternate, null !== a && (b2 = a.memoizedState));
    if (null !== b2) return b2.dehydrated;
  }
  return null;
}
function Xb(a) {
  if (Vb(a) !== a) throw Error(p$1(188));
}
function Yb(a) {
  var b2 = a.alternate;
  if (!b2) {
    b2 = Vb(a);
    if (null === b2) throw Error(p$1(188));
    return b2 !== a ? null : a;
  }
  for (var c2 = a, d2 = b2; ; ) {
    var e = c2.return;
    if (null === e) break;
    var f2 = e.alternate;
    if (null === f2) {
      d2 = e.return;
      if (null !== d2) {
        c2 = d2;
        continue;
      }
      break;
    }
    if (e.child === f2.child) {
      for (f2 = e.child; f2; ) {
        if (f2 === c2) return Xb(e), a;
        if (f2 === d2) return Xb(e), b2;
        f2 = f2.sibling;
      }
      throw Error(p$1(188));
    }
    if (c2.return !== d2.return) c2 = e, d2 = f2;
    else {
      for (var g2 = false, h3 = e.child; h3; ) {
        if (h3 === c2) {
          g2 = true;
          c2 = e;
          d2 = f2;
          break;
        }
        if (h3 === d2) {
          g2 = true;
          d2 = e;
          c2 = f2;
          break;
        }
        h3 = h3.sibling;
      }
      if (!g2) {
        for (h3 = f2.child; h3; ) {
          if (h3 === c2) {
            g2 = true;
            c2 = f2;
            d2 = e;
            break;
          }
          if (h3 === d2) {
            g2 = true;
            d2 = f2;
            c2 = e;
            break;
          }
          h3 = h3.sibling;
        }
        if (!g2) throw Error(p$1(189));
      }
    }
    if (c2.alternate !== d2) throw Error(p$1(190));
  }
  if (3 !== c2.tag) throw Error(p$1(188));
  return c2.stateNode.current === c2 ? a : b2;
}
function Zb(a) {
  a = Yb(a);
  return null !== a ? $b(a) : null;
}
function $b(a) {
  if (5 === a.tag || 6 === a.tag) return a;
  for (a = a.child; null !== a; ) {
    var b2 = $b(a);
    if (null !== b2) return b2;
    a = a.sibling;
  }
  return null;
}
var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B$1 = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
function mc(a) {
  if (lc && "function" === typeof lc.onCommitFiberRoot) try {
    lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
  } catch (b2) {
  }
}
var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
function nc(a) {
  a >>>= 0;
  return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
}
var rc = 64, sc = 4194304;
function tc(a) {
  switch (a & -a) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return a & 4194240;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return a & 130023424;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 1073741824;
    default:
      return a;
  }
}
function uc(a, b2) {
  var c2 = a.pendingLanes;
  if (0 === c2) return 0;
  var d2 = 0, e = a.suspendedLanes, f2 = a.pingedLanes, g2 = c2 & 268435455;
  if (0 !== g2) {
    var h3 = g2 & ~e;
    0 !== h3 ? d2 = tc(h3) : (f2 &= g2, 0 !== f2 && (d2 = tc(f2)));
  } else g2 = c2 & ~e, 0 !== g2 ? d2 = tc(g2) : 0 !== f2 && (d2 = tc(f2));
  if (0 === d2) return 0;
  if (0 !== b2 && b2 !== d2 && 0 === (b2 & e) && (e = d2 & -d2, f2 = b2 & -b2, e >= f2 || 16 === e && 0 !== (f2 & 4194240))) return b2;
  0 !== (d2 & 4) && (d2 |= c2 & 16);
  b2 = a.entangledLanes;
  if (0 !== b2) for (a = a.entanglements, b2 &= d2; 0 < b2; ) c2 = 31 - oc(b2), e = 1 << c2, d2 |= a[c2], b2 &= ~e;
  return d2;
}
function vc(a, b2) {
  switch (a) {
    case 1:
    case 2:
    case 4:
      return b2 + 250;
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return b2 + 5e3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return -1;
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function wc(a, b2) {
  for (var c2 = a.suspendedLanes, d2 = a.pingedLanes, e = a.expirationTimes, f2 = a.pendingLanes; 0 < f2; ) {
    var g2 = 31 - oc(f2), h3 = 1 << g2, k2 = e[g2];
    if (-1 === k2) {
      if (0 === (h3 & c2) || 0 !== (h3 & d2)) e[g2] = vc(h3, b2);
    } else k2 <= b2 && (a.expiredLanes |= h3);
    f2 &= ~h3;
  }
}
function xc(a) {
  a = a.pendingLanes & -1073741825;
  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
}
function yc() {
  var a = rc;
  rc <<= 1;
  0 === (rc & 4194240) && (rc = 64);
  return a;
}
function zc(a) {
  for (var b2 = [], c2 = 0; 31 > c2; c2++) b2.push(a);
  return b2;
}
function Ac(a, b2, c2) {
  a.pendingLanes |= b2;
  536870912 !== b2 && (a.suspendedLanes = 0, a.pingedLanes = 0);
  a = a.eventTimes;
  b2 = 31 - oc(b2);
  a[b2] = c2;
}
function Bc(a, b2) {
  var c2 = a.pendingLanes & ~b2;
  a.pendingLanes = b2;
  a.suspendedLanes = 0;
  a.pingedLanes = 0;
  a.expiredLanes &= b2;
  a.mutableReadLanes &= b2;
  a.entangledLanes &= b2;
  b2 = a.entanglements;
  var d2 = a.eventTimes;
  for (a = a.expirationTimes; 0 < c2; ) {
    var e = 31 - oc(c2), f2 = 1 << e;
    b2[e] = 0;
    d2[e] = -1;
    a[e] = -1;
    c2 &= ~f2;
  }
}
function Cc(a, b2) {
  var c2 = a.entangledLanes |= b2;
  for (a = a.entanglements; c2; ) {
    var d2 = 31 - oc(c2), e = 1 << d2;
    e & b2 | a[d2] & b2 && (a[d2] |= b2);
    c2 &= ~e;
  }
}
var C$1 = 0;
function Dc(a) {
  a &= -a;
  return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
}
var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function Sc(a, b2) {
  switch (a) {
    case "focusin":
    case "focusout":
      Lc = null;
      break;
    case "dragenter":
    case "dragleave":
      Mc = null;
      break;
    case "mouseover":
    case "mouseout":
      Nc = null;
      break;
    case "pointerover":
    case "pointerout":
      Oc.delete(b2.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      Pc.delete(b2.pointerId);
  }
}
function Tc(a, b2, c2, d2, e, f2) {
  if (null === a || a.nativeEvent !== f2) return a = { blockedOn: b2, domEventName: c2, eventSystemFlags: d2, nativeEvent: f2, targetContainers: [e] }, null !== b2 && (b2 = Cb(b2), null !== b2 && Fc(b2)), a;
  a.eventSystemFlags |= d2;
  b2 = a.targetContainers;
  null !== e && -1 === b2.indexOf(e) && b2.push(e);
  return a;
}
function Uc(a, b2, c2, d2, e) {
  switch (b2) {
    case "focusin":
      return Lc = Tc(Lc, a, b2, c2, d2, e), true;
    case "dragenter":
      return Mc = Tc(Mc, a, b2, c2, d2, e), true;
    case "mouseover":
      return Nc = Tc(Nc, a, b2, c2, d2, e), true;
    case "pointerover":
      var f2 = e.pointerId;
      Oc.set(f2, Tc(Oc.get(f2) || null, a, b2, c2, d2, e));
      return true;
    case "gotpointercapture":
      return f2 = e.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a, b2, c2, d2, e)), true;
  }
  return false;
}
function Vc(a) {
  var b2 = Wc(a.target);
  if (null !== b2) {
    var c2 = Vb(b2);
    if (null !== c2) {
      if (b2 = c2.tag, 13 === b2) {
        if (b2 = Wb(c2), null !== b2) {
          a.blockedOn = b2;
          Ic(a.priority, function() {
            Gc(c2);
          });
          return;
        }
      } else if (3 === b2 && c2.stateNode.current.memoizedState.isDehydrated) {
        a.blockedOn = 3 === c2.tag ? c2.stateNode.containerInfo : null;
        return;
      }
    }
  }
  a.blockedOn = null;
}
function Xc(a) {
  if (null !== a.blockedOn) return false;
  for (var b2 = a.targetContainers; 0 < b2.length; ) {
    var c2 = Yc(a.domEventName, a.eventSystemFlags, b2[0], a.nativeEvent);
    if (null === c2) {
      c2 = a.nativeEvent;
      var d2 = new c2.constructor(c2.type, c2);
      wb = d2;
      c2.target.dispatchEvent(d2);
      wb = null;
    } else return b2 = Cb(c2), null !== b2 && Fc(b2), a.blockedOn = c2, false;
    b2.shift();
  }
  return true;
}
function Zc(a, b2, c2) {
  Xc(a) && c2.delete(b2);
}
function $c() {
  Jc = false;
  null !== Lc && Xc(Lc) && (Lc = null);
  null !== Mc && Xc(Mc) && (Mc = null);
  null !== Nc && Xc(Nc) && (Nc = null);
  Oc.forEach(Zc);
  Pc.forEach(Zc);
}
function ad(a, b2) {
  a.blockedOn === b2 && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
}
function bd(a) {
  function b2(b3) {
    return ad(b3, a);
  }
  if (0 < Kc.length) {
    ad(Kc[0], a);
    for (var c2 = 1; c2 < Kc.length; c2++) {
      var d2 = Kc[c2];
      d2.blockedOn === a && (d2.blockedOn = null);
    }
  }
  null !== Lc && ad(Lc, a);
  null !== Mc && ad(Mc, a);
  null !== Nc && ad(Nc, a);
  Oc.forEach(b2);
  Pc.forEach(b2);
  for (c2 = 0; c2 < Qc.length; c2++) d2 = Qc[c2], d2.blockedOn === a && (d2.blockedOn = null);
  for (; 0 < Qc.length && (c2 = Qc[0], null === c2.blockedOn); ) Vc(c2), null === c2.blockedOn && Qc.shift();
}
var cd = ua.ReactCurrentBatchConfig, dd = true;
function ed(a, b2, c2, d2) {
  var e = C$1, f2 = cd.transition;
  cd.transition = null;
  try {
    C$1 = 1, fd(a, b2, c2, d2);
  } finally {
    C$1 = e, cd.transition = f2;
  }
}
function gd(a, b2, c2, d2) {
  var e = C$1, f2 = cd.transition;
  cd.transition = null;
  try {
    C$1 = 4, fd(a, b2, c2, d2);
  } finally {
    C$1 = e, cd.transition = f2;
  }
}
function fd(a, b2, c2, d2) {
  if (dd) {
    var e = Yc(a, b2, c2, d2);
    if (null === e) hd(a, b2, d2, id$2, c2), Sc(a, d2);
    else if (Uc(e, a, b2, c2, d2)) d2.stopPropagation();
    else if (Sc(a, d2), b2 & 4 && -1 < Rc.indexOf(a)) {
      for (; null !== e; ) {
        var f2 = Cb(e);
        null !== f2 && Ec(f2);
        f2 = Yc(a, b2, c2, d2);
        null === f2 && hd(a, b2, d2, id$2, c2);
        if (f2 === e) break;
        e = f2;
      }
      null !== e && d2.stopPropagation();
    } else hd(a, b2, d2, null, c2);
  }
}
var id$2 = null;
function Yc(a, b2, c2, d2) {
  id$2 = null;
  a = xb(d2);
  a = Wc(a);
  if (null !== a) if (b2 = Vb(a), null === b2) a = null;
  else if (c2 = b2.tag, 13 === c2) {
    a = Wb(b2);
    if (null !== a) return a;
    a = null;
  } else if (3 === c2) {
    if (b2.stateNode.current.memoizedState.isDehydrated) return 3 === b2.tag ? b2.stateNode.containerInfo : null;
    a = null;
  } else b2 !== a && (a = null);
  id$2 = a;
  return null;
}
function jd(a) {
  switch (a) {
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 1;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "toggle":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 4;
    case "message":
      switch (ec()) {
        case fc:
          return 1;
        case gc:
          return 4;
        case hc:
        case ic:
          return 16;
        case jc:
          return 536870912;
        default:
          return 16;
      }
    default:
      return 16;
  }
}
var kd = null, ld = null, md = null;
function nd() {
  if (md) return md;
  var a, b2 = ld, c2 = b2.length, d2, e = "value" in kd ? kd.value : kd.textContent, f2 = e.length;
  for (a = 0; a < c2 && b2[a] === e[a]; a++) ;
  var g2 = c2 - a;
  for (d2 = 1; d2 <= g2 && b2[c2 - d2] === e[f2 - d2]; d2++) ;
  return md = e.slice(a, 1 < d2 ? 1 - d2 : void 0);
}
function od(a) {
  var b2 = a.keyCode;
  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b2 && (a = 13)) : a = b2;
  10 === a && (a = 13);
  return 32 <= a || 13 === a ? a : 0;
}
function pd() {
  return true;
}
function qd() {
  return false;
}
function rd(a) {
  function b2(b3, d2, e, f2, g2) {
    this._reactName = b3;
    this._targetInst = e;
    this.type = d2;
    this.nativeEvent = f2;
    this.target = g2;
    this.currentTarget = null;
    for (var c2 in a) a.hasOwnProperty(c2) && (b3 = a[c2], this[c2] = b3 ? b3(f2) : f2[c2]);
    this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }
  A$1(b2.prototype, { preventDefault: function() {
    this.defaultPrevented = true;
    var a2 = this.nativeEvent;
    a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
  }, stopPropagation: function() {
    var a2 = this.nativeEvent;
    a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
  }, persist: function() {
  }, isPersistent: pd });
  return b2;
}
var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
  return a.timeStamp || Date.now();
}, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A$1({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A$1({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
  return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
}, movementX: function(a) {
  if ("movementX" in a) return a.movementX;
  a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
  return wd;
}, movementY: function(a) {
  return "movementY" in a ? a.movementY : xd;
} }), Bd = rd(Ad), Cd = A$1({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A$1({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A$1({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A$1({}, sd, { clipboardData: function(a) {
  return "clipboardData" in a ? a.clipboardData : window.clipboardData;
} }), Jd = rd(Id), Kd = A$1({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
}, Nd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
}, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
function Pd(a) {
  var b2 = this.nativeEvent;
  return b2.getModifierState ? b2.getModifierState(a) : (a = Od[a]) ? !!b2[a] : false;
}
function zd() {
  return Pd;
}
var Qd = A$1({}, ud, { key: function(a) {
  if (a.key) {
    var b2 = Md[a.key] || a.key;
    if ("Unidentified" !== b2) return b2;
  }
  return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
}, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
  return "keypress" === a.type ? od(a) : 0;
}, keyCode: function(a) {
  return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
}, which: function(a) {
  return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
} }), Rd = rd(Qd), Sd = A$1({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A$1({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A$1({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A$1({}, Ad, {
  deltaX: function(a) {
    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
  },
  deltaY: function(a) {
    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = ia && "CompositionEvent" in window, be = null;
ia && "documentMode" in document && (be = document.documentMode);
var ce = ia && "TextEvent" in window && !be, de = ia && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
function ge(a, b2) {
  switch (a) {
    case "keyup":
      return -1 !== $d.indexOf(b2.keyCode);
    case "keydown":
      return 229 !== b2.keyCode;
    case "keypress":
    case "mousedown":
    case "focusout":
      return true;
    default:
      return false;
  }
}
function he(a) {
  a = a.detail;
  return "object" === typeof a && "data" in a ? a.data : null;
}
var ie = false;
function je(a, b2) {
  switch (a) {
    case "compositionend":
      return he(b2);
    case "keypress":
      if (32 !== b2.which) return null;
      fe = true;
      return ee;
    case "textInput":
      return a = b2.data, a === ee && fe ? null : a;
    default:
      return null;
  }
}
function ke(a, b2) {
  if (ie) return "compositionend" === a || !ae && ge(a, b2) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
  switch (a) {
    case "paste":
      return null;
    case "keypress":
      if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
        if (b2.char && 1 < b2.char.length) return b2.char;
        if (b2.which) return String.fromCharCode(b2.which);
      }
      return null;
    case "compositionend":
      return de && "ko" !== b2.locale ? null : b2.data;
    default:
      return null;
  }
}
var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
function me(a) {
  var b2 = a && a.nodeName && a.nodeName.toLowerCase();
  return "input" === b2 ? !!le[a.type] : "textarea" === b2 ? true : false;
}
function ne(a, b2, c2, d2) {
  Eb(d2);
  b2 = oe(b2, "onChange");
  0 < b2.length && (c2 = new td("onChange", "change", null, c2, d2), a.push({ event: c2, listeners: b2 }));
}
var pe = null, qe = null;
function re(a) {
  se(a, 0);
}
function te(a) {
  var b2 = ue(a);
  if (Wa(b2)) return a;
}
function ve(a, b2) {
  if ("change" === a) return b2;
}
var we = false;
if (ia) {
  var xe;
  if (ia) {
    var ye = "oninput" in document;
    if (!ye) {
      var ze = document.createElement("div");
      ze.setAttribute("oninput", "return;");
      ye = "function" === typeof ze.oninput;
    }
    xe = ye;
  } else xe = false;
  we = xe && (!document.documentMode || 9 < document.documentMode);
}
function Ae() {
  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
}
function Be(a) {
  if ("value" === a.propertyName && te(qe)) {
    var b2 = [];
    ne(b2, qe, a, xb(a));
    Jb(re, b2);
  }
}
function Ce(a, b2, c2) {
  "focusin" === a ? (Ae(), pe = b2, qe = c2, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
}
function De(a) {
  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
}
function Ee(a, b2) {
  if ("click" === a) return te(b2);
}
function Fe(a, b2) {
  if ("input" === a || "change" === a) return te(b2);
}
function Ge(a, b2) {
  return a === b2 && (0 !== a || 1 / a === 1 / b2) || a !== a && b2 !== b2;
}
var He = "function" === typeof Object.is ? Object.is : Ge;
function Ie(a, b2) {
  if (He(a, b2)) return true;
  if ("object" !== typeof a || null === a || "object" !== typeof b2 || null === b2) return false;
  var c2 = Object.keys(a), d2 = Object.keys(b2);
  if (c2.length !== d2.length) return false;
  for (d2 = 0; d2 < c2.length; d2++) {
    var e = c2[d2];
    if (!ja.call(b2, e) || !He(a[e], b2[e])) return false;
  }
  return true;
}
function Je(a) {
  for (; a && a.firstChild; ) a = a.firstChild;
  return a;
}
function Ke(a, b2) {
  var c2 = Je(a);
  a = 0;
  for (var d2; c2; ) {
    if (3 === c2.nodeType) {
      d2 = a + c2.textContent.length;
      if (a <= b2 && d2 >= b2) return { node: c2, offset: b2 - a };
      a = d2;
    }
    a: {
      for (; c2; ) {
        if (c2.nextSibling) {
          c2 = c2.nextSibling;
          break a;
        }
        c2 = c2.parentNode;
      }
      c2 = void 0;
    }
    c2 = Je(c2);
  }
}
function Le(a, b2) {
  return a && b2 ? a === b2 ? true : a && 3 === a.nodeType ? false : b2 && 3 === b2.nodeType ? Le(a, b2.parentNode) : "contains" in a ? a.contains(b2) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b2) & 16) : false : false;
}
function Me() {
  for (var a = window, b2 = Xa(); b2 instanceof a.HTMLIFrameElement; ) {
    try {
      var c2 = "string" === typeof b2.contentWindow.location.href;
    } catch (d2) {
      c2 = false;
    }
    if (c2) a = b2.contentWindow;
    else break;
    b2 = Xa(a.document);
  }
  return b2;
}
function Ne(a) {
  var b2 = a && a.nodeName && a.nodeName.toLowerCase();
  return b2 && ("input" === b2 && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b2 || "true" === a.contentEditable);
}
function Oe(a) {
  var b2 = Me(), c2 = a.focusedElem, d2 = a.selectionRange;
  if (b2 !== c2 && c2 && c2.ownerDocument && Le(c2.ownerDocument.documentElement, c2)) {
    if (null !== d2 && Ne(c2)) {
      if (b2 = d2.start, a = d2.end, void 0 === a && (a = b2), "selectionStart" in c2) c2.selectionStart = b2, c2.selectionEnd = Math.min(a, c2.value.length);
      else if (a = (b2 = c2.ownerDocument || document) && b2.defaultView || window, a.getSelection) {
        a = a.getSelection();
        var e = c2.textContent.length, f2 = Math.min(d2.start, e);
        d2 = void 0 === d2.end ? f2 : Math.min(d2.end, e);
        !a.extend && f2 > d2 && (e = d2, d2 = f2, f2 = e);
        e = Ke(c2, f2);
        var g2 = Ke(
          c2,
          d2
        );
        e && g2 && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g2.node || a.focusOffset !== g2.offset) && (b2 = b2.createRange(), b2.setStart(e.node, e.offset), a.removeAllRanges(), f2 > d2 ? (a.addRange(b2), a.extend(g2.node, g2.offset)) : (b2.setEnd(g2.node, g2.offset), a.addRange(b2)));
      }
    }
    b2 = [];
    for (a = c2; a = a.parentNode; ) 1 === a.nodeType && b2.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
    "function" === typeof c2.focus && c2.focus();
    for (c2 = 0; c2 < b2.length; c2++) a = b2[c2], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
  }
}
var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
function Ue(a, b2, c2) {
  var d2 = c2.window === c2 ? c2.document : 9 === c2.nodeType ? c2 : c2.ownerDocument;
  Te || null == Qe || Qe !== Xa(d2) || (d2 = Qe, "selectionStart" in d2 && Ne(d2) ? d2 = { start: d2.selectionStart, end: d2.selectionEnd } : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = { anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset }), Se && Ie(Se, d2) || (Se = d2, d2 = oe(Re, "onSelect"), 0 < d2.length && (b2 = new td("onSelect", "select", null, b2, c2), a.push({ event: b2, listeners: d2 }), b2.target = Qe)));
}
function Ve(a, b2) {
  var c2 = {};
  c2[a.toLowerCase()] = b2.toLowerCase();
  c2["Webkit" + a] = "webkit" + b2;
  c2["Moz" + a] = "moz" + b2;
  return c2;
}
var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") }, Xe = {}, Ye = {};
ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
function Ze(a) {
  if (Xe[a]) return Xe[a];
  if (!We[a]) return a;
  var b2 = We[a], c2;
  for (c2 in b2) if (b2.hasOwnProperty(c2) && c2 in Ye) return Xe[a] = b2[c2];
  return a;
}
var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function ff(a, b2) {
  df.set(a, b2);
  fa(b2, [a]);
}
for (var gf = 0; gf < ef.length; gf++) {
  var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
  ff(jf, "on" + kf);
}
ff($e, "onAnimationEnd");
ff(af, "onAnimationIteration");
ff(bf, "onAnimationStart");
ff("dblclick", "onDoubleClick");
ff("focusin", "onFocus");
ff("focusout", "onBlur");
ff(cf, "onTransitionEnd");
ha("onMouseEnter", ["mouseout", "mouseover"]);
ha("onMouseLeave", ["mouseout", "mouseover"]);
ha("onPointerEnter", ["pointerout", "pointerover"]);
ha("onPointerLeave", ["pointerout", "pointerover"]);
fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
function nf(a, b2, c2) {
  var d2 = a.type || "unknown-event";
  a.currentTarget = c2;
  Ub(d2, b2, void 0, a);
  a.currentTarget = null;
}
function se(a, b2) {
  b2 = 0 !== (b2 & 4);
  for (var c2 = 0; c2 < a.length; c2++) {
    var d2 = a[c2], e = d2.event;
    d2 = d2.listeners;
    a: {
      var f2 = void 0;
      if (b2) for (var g2 = d2.length - 1; 0 <= g2; g2--) {
        var h3 = d2[g2], k2 = h3.instance, l2 = h3.currentTarget;
        h3 = h3.listener;
        if (k2 !== f2 && e.isPropagationStopped()) break a;
        nf(e, h3, l2);
        f2 = k2;
      }
      else for (g2 = 0; g2 < d2.length; g2++) {
        h3 = d2[g2];
        k2 = h3.instance;
        l2 = h3.currentTarget;
        h3 = h3.listener;
        if (k2 !== f2 && e.isPropagationStopped()) break a;
        nf(e, h3, l2);
        f2 = k2;
      }
    }
  }
  if (Qb) throw a = Rb, Qb = false, Rb = null, a;
}
function D$1(a, b2) {
  var c2 = b2[of];
  void 0 === c2 && (c2 = b2[of] = /* @__PURE__ */ new Set());
  var d2 = a + "__bubble";
  c2.has(d2) || (pf(b2, a, 2, false), c2.add(d2));
}
function qf(a, b2, c2) {
  var d2 = 0;
  b2 && (d2 |= 4);
  pf(c2, a, d2, b2);
}
var rf = "_reactListening" + Math.random().toString(36).slice(2);
function sf(a) {
  if (!a[rf]) {
    a[rf] = true;
    da.forEach(function(b3) {
      "selectionchange" !== b3 && (mf.has(b3) || qf(b3, false, a), qf(b3, true, a));
    });
    var b2 = 9 === a.nodeType ? a : a.ownerDocument;
    null === b2 || b2[rf] || (b2[rf] = true, qf("selectionchange", false, b2));
  }
}
function pf(a, b2, c2, d2) {
  switch (jd(b2)) {
    case 1:
      var e = ed;
      break;
    case 4:
      e = gd;
      break;
    default:
      e = fd;
  }
  c2 = e.bind(null, b2, c2, a);
  e = void 0;
  !Lb || "touchstart" !== b2 && "touchmove" !== b2 && "wheel" !== b2 || (e = true);
  d2 ? void 0 !== e ? a.addEventListener(b2, c2, { capture: true, passive: e }) : a.addEventListener(b2, c2, true) : void 0 !== e ? a.addEventListener(b2, c2, { passive: e }) : a.addEventListener(b2, c2, false);
}
function hd(a, b2, c2, d2, e) {
  var f2 = d2;
  if (0 === (b2 & 1) && 0 === (b2 & 2) && null !== d2) a: for (; ; ) {
    if (null === d2) return;
    var g2 = d2.tag;
    if (3 === g2 || 4 === g2) {
      var h3 = d2.stateNode.containerInfo;
      if (h3 === e || 8 === h3.nodeType && h3.parentNode === e) break;
      if (4 === g2) for (g2 = d2.return; null !== g2; ) {
        var k2 = g2.tag;
        if (3 === k2 || 4 === k2) {
          if (k2 = g2.stateNode.containerInfo, k2 === e || 8 === k2.nodeType && k2.parentNode === e) return;
        }
        g2 = g2.return;
      }
      for (; null !== h3; ) {
        g2 = Wc(h3);
        if (null === g2) return;
        k2 = g2.tag;
        if (5 === k2 || 6 === k2) {
          d2 = f2 = g2;
          continue a;
        }
        h3 = h3.parentNode;
      }
    }
    d2 = d2.return;
  }
  Jb(function() {
    var d3 = f2, e2 = xb(c2), g3 = [];
    a: {
      var h4 = df.get(a);
      if (void 0 !== h4) {
        var k3 = td, n2 = a;
        switch (a) {
          case "keypress":
            if (0 === od(c2)) break a;
          case "keydown":
          case "keyup":
            k3 = Rd;
            break;
          case "focusin":
            n2 = "focus";
            k3 = Fd;
            break;
          case "focusout":
            n2 = "blur";
            k3 = Fd;
            break;
          case "beforeblur":
          case "afterblur":
            k3 = Fd;
            break;
          case "click":
            if (2 === c2.button) break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k3 = Bd;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k3 = Dd;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k3 = Vd;
            break;
          case $e:
          case af:
          case bf:
            k3 = Hd;
            break;
          case cf:
            k3 = Xd;
            break;
          case "scroll":
            k3 = vd;
            break;
          case "wheel":
            k3 = Zd;
            break;
          case "copy":
          case "cut":
          case "paste":
            k3 = Jd;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k3 = Td;
        }
        var t2 = 0 !== (b2 & 4), J2 = !t2 && "scroll" === a, x2 = t2 ? null !== h4 ? h4 + "Capture" : null : h4;
        t2 = [];
        for (var w2 = d3, u2; null !== w2; ) {
          u2 = w2;
          var F2 = u2.stateNode;
          5 === u2.tag && null !== F2 && (u2 = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t2.push(tf(w2, F2, u2))));
          if (J2) break;
          w2 = w2.return;
        }
        0 < t2.length && (h4 = new k3(h4, n2, null, c2, e2), g3.push({ event: h4, listeners: t2 }));
      }
    }
    if (0 === (b2 & 7)) {
      a: {
        h4 = "mouseover" === a || "pointerover" === a;
        k3 = "mouseout" === a || "pointerout" === a;
        if (h4 && c2 !== wb && (n2 = c2.relatedTarget || c2.fromElement) && (Wc(n2) || n2[uf])) break a;
        if (k3 || h4) {
          h4 = e2.window === e2 ? e2 : (h4 = e2.ownerDocument) ? h4.defaultView || h4.parentWindow : window;
          if (k3) {
            if (n2 = c2.relatedTarget || c2.toElement, k3 = d3, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag)) n2 = null;
          } else k3 = null, n2 = d3;
          if (k3 !== n2) {
            t2 = Bd;
            F2 = "onMouseLeave";
            x2 = "onMouseEnter";
            w2 = "mouse";
            if ("pointerout" === a || "pointerover" === a) t2 = Td, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
            J2 = null == k3 ? h4 : ue(k3);
            u2 = null == n2 ? h4 : ue(n2);
            h4 = new t2(F2, w2 + "leave", k3, c2, e2);
            h4.target = J2;
            h4.relatedTarget = u2;
            F2 = null;
            Wc(e2) === d3 && (t2 = new t2(x2, w2 + "enter", n2, c2, e2), t2.target = u2, t2.relatedTarget = J2, F2 = t2);
            J2 = F2;
            if (k3 && n2) b: {
              t2 = k3;
              x2 = n2;
              w2 = 0;
              for (u2 = t2; u2; u2 = vf(u2)) w2++;
              u2 = 0;
              for (F2 = x2; F2; F2 = vf(F2)) u2++;
              for (; 0 < w2 - u2; ) t2 = vf(t2), w2--;
              for (; 0 < u2 - w2; ) x2 = vf(x2), u2--;
              for (; w2--; ) {
                if (t2 === x2 || null !== x2 && t2 === x2.alternate) break b;
                t2 = vf(t2);
                x2 = vf(x2);
              }
              t2 = null;
            }
            else t2 = null;
            null !== k3 && wf(g3, h4, k3, t2, false);
            null !== n2 && null !== J2 && wf(g3, J2, n2, t2, true);
          }
        }
      }
      a: {
        h4 = d3 ? ue(d3) : window;
        k3 = h4.nodeName && h4.nodeName.toLowerCase();
        if ("select" === k3 || "input" === k3 && "file" === h4.type) var na = ve;
        else if (me(h4)) if (we) na = Fe;
        else {
          na = De;
          var xa = Ce;
        }
        else (k3 = h4.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h4.type || "radio" === h4.type) && (na = Ee);
        if (na && (na = na(a, d3))) {
          ne(g3, na, c2, e2);
          break a;
        }
        xa && xa(a, h4, d3);
        "focusout" === a && (xa = h4._wrapperState) && xa.controlled && "number" === h4.type && cb(h4, "number", h4.value);
      }
      xa = d3 ? ue(d3) : window;
      switch (a) {
        case "focusin":
          if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d3, Se = null;
          break;
        case "focusout":
          Se = Re = Qe = null;
          break;
        case "mousedown":
          Te = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te = false;
          Ue(g3, c2, e2);
          break;
        case "selectionchange":
          if (Pe) break;
        case "keydown":
        case "keyup":
          Ue(g3, c2, e2);
      }
      var $a;
      if (ae) b: {
        switch (a) {
          case "compositionstart":
            var ba = "onCompositionStart";
            break b;
          case "compositionend":
            ba = "onCompositionEnd";
            break b;
          case "compositionupdate":
            ba = "onCompositionUpdate";
            break b;
        }
        ba = void 0;
      }
      else ie ? ge(a, c2) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c2.keyCode && (ba = "onCompositionStart");
      ba && (de && "ko" !== c2.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d3, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c2, e2), g3.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c2), null !== $a && (ba.data = $a))));
      if ($a = ce ? je(a, c2) : ke(a, c2)) d3 = oe(d3, "onBeforeInput"), 0 < d3.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c2, e2), g3.push({ event: e2, listeners: d3 }), e2.data = $a);
    }
    se(g3, b2);
  });
}
function tf(a, b2, c2) {
  return { instance: a, listener: b2, currentTarget: c2 };
}
function oe(a, b2) {
  for (var c2 = b2 + "Capture", d2 = []; null !== a; ) {
    var e = a, f2 = e.stateNode;
    5 === e.tag && null !== f2 && (e = f2, f2 = Kb(a, c2), null != f2 && d2.unshift(tf(a, f2, e)), f2 = Kb(a, b2), null != f2 && d2.push(tf(a, f2, e)));
    a = a.return;
  }
  return d2;
}
function vf(a) {
  if (null === a) return null;
  do
    a = a.return;
  while (a && 5 !== a.tag);
  return a ? a : null;
}
function wf(a, b2, c2, d2, e) {
  for (var f2 = b2._reactName, g2 = []; null !== c2 && c2 !== d2; ) {
    var h3 = c2, k2 = h3.alternate, l2 = h3.stateNode;
    if (null !== k2 && k2 === d2) break;
    5 === h3.tag && null !== l2 && (h3 = l2, e ? (k2 = Kb(c2, f2), null != k2 && g2.unshift(tf(c2, k2, h3))) : e || (k2 = Kb(c2, f2), null != k2 && g2.push(tf(c2, k2, h3))));
    c2 = c2.return;
  }
  0 !== g2.length && a.push({ event: b2, listeners: g2 });
}
var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
function zf(a) {
  return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
}
function Af(a, b2, c2) {
  b2 = zf(b2);
  if (zf(a) !== b2 && c2) throw Error(p$1(425));
}
function Bf() {
}
var Cf = null, Df = null;
function Ef(a, b2) {
  return "textarea" === a || "noscript" === a || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
}
var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a) {
  return Hf.resolve(null).then(a).catch(If);
} : Ff;
function If(a) {
  setTimeout(function() {
    throw a;
  });
}
function Kf(a, b2) {
  var c2 = b2, d2 = 0;
  do {
    var e = c2.nextSibling;
    a.removeChild(c2);
    if (e && 8 === e.nodeType) if (c2 = e.data, "/$" === c2) {
      if (0 === d2) {
        a.removeChild(e);
        bd(b2);
        return;
      }
      d2--;
    } else "$" !== c2 && "$?" !== c2 && "$!" !== c2 || d2++;
    c2 = e;
  } while (c2);
  bd(b2);
}
function Lf(a) {
  for (; null != a; a = a.nextSibling) {
    var b2 = a.nodeType;
    if (1 === b2 || 3 === b2) break;
    if (8 === b2) {
      b2 = a.data;
      if ("$" === b2 || "$!" === b2 || "$?" === b2) break;
      if ("/$" === b2) return null;
    }
  }
  return a;
}
function Mf(a) {
  a = a.previousSibling;
  for (var b2 = 0; a; ) {
    if (8 === a.nodeType) {
      var c2 = a.data;
      if ("$" === c2 || "$!" === c2 || "$?" === c2) {
        if (0 === b2) return a;
        b2--;
      } else "/$" === c2 && b2++;
    }
    a = a.previousSibling;
  }
  return null;
}
var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
function Wc(a) {
  var b2 = a[Of];
  if (b2) return b2;
  for (var c2 = a.parentNode; c2; ) {
    if (b2 = c2[uf] || c2[Of]) {
      c2 = b2.alternate;
      if (null !== b2.child || null !== c2 && null !== c2.child) for (a = Mf(a); null !== a; ) {
        if (c2 = a[Of]) return c2;
        a = Mf(a);
      }
      return b2;
    }
    a = c2;
    c2 = a.parentNode;
  }
  return null;
}
function Cb(a) {
  a = a[Of] || a[uf];
  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
}
function ue(a) {
  if (5 === a.tag || 6 === a.tag) return a.stateNode;
  throw Error(p$1(33));
}
function Db(a) {
  return a[Pf] || null;
}
var Sf = [], Tf = -1;
function Uf(a) {
  return { current: a };
}
function E$1(a) {
  0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
}
function G(a, b2) {
  Tf++;
  Sf[Tf] = a.current;
  a.current = b2;
}
var Vf = {}, H$1 = Uf(Vf), Wf = Uf(false), Xf = Vf;
function Yf(a, b2) {
  var c2 = a.type.contextTypes;
  if (!c2) return Vf;
  var d2 = a.stateNode;
  if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2) return d2.__reactInternalMemoizedMaskedChildContext;
  var e = {}, f2;
  for (f2 in c2) e[f2] = b2[f2];
  d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b2, a.__reactInternalMemoizedMaskedChildContext = e);
  return e;
}
function Zf(a) {
  a = a.childContextTypes;
  return null !== a && void 0 !== a;
}
function $f() {
  E$1(Wf);
  E$1(H$1);
}
function ag(a, b2, c2) {
  if (H$1.current !== Vf) throw Error(p$1(168));
  G(H$1, b2);
  G(Wf, c2);
}
function bg(a, b2, c2) {
  var d2 = a.stateNode;
  b2 = b2.childContextTypes;
  if ("function" !== typeof d2.getChildContext) return c2;
  d2 = d2.getChildContext();
  for (var e in d2) if (!(e in b2)) throw Error(p$1(108, Ra(a) || "Unknown", e));
  return A$1({}, c2, d2);
}
function cg(a) {
  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
  Xf = H$1.current;
  G(H$1, a);
  G(Wf, Wf.current);
  return true;
}
function dg(a, b2, c2) {
  var d2 = a.stateNode;
  if (!d2) throw Error(p$1(169));
  c2 ? (a = bg(a, b2, Xf), d2.__reactInternalMemoizedMergedChildContext = a, E$1(Wf), E$1(H$1), G(H$1, a)) : E$1(Wf);
  G(Wf, c2);
}
var eg = null, fg = false, gg = false;
function hg(a) {
  null === eg ? eg = [a] : eg.push(a);
}
function ig(a) {
  fg = true;
  hg(a);
}
function jg() {
  if (!gg && null !== eg) {
    gg = true;
    var a = 0, b2 = C$1;
    try {
      var c2 = eg;
      for (C$1 = 1; a < c2.length; a++) {
        var d2 = c2[a];
        do
          d2 = d2(true);
        while (null !== d2);
      }
      eg = null;
      fg = false;
    } catch (e) {
      throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
    } finally {
      C$1 = b2, gg = false;
    }
  }
  return null;
}
var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
function tg(a, b2) {
  kg[lg++] = ng;
  kg[lg++] = mg;
  mg = a;
  ng = b2;
}
function ug(a, b2, c2) {
  og[pg++] = rg;
  og[pg++] = sg;
  og[pg++] = qg;
  qg = a;
  var d2 = rg;
  a = sg;
  var e = 32 - oc(d2) - 1;
  d2 &= ~(1 << e);
  c2 += 1;
  var f2 = 32 - oc(b2) + e;
  if (30 < f2) {
    var g2 = e - e % 5;
    f2 = (d2 & (1 << g2) - 1).toString(32);
    d2 >>= g2;
    e -= g2;
    rg = 1 << 32 - oc(b2) + e | c2 << e | d2;
    sg = f2 + a;
  } else rg = 1 << f2 | c2 << e | d2, sg = a;
}
function vg(a) {
  null !== a.return && (tg(a, 1), ug(a, 1, 0));
}
function wg(a) {
  for (; a === mg; ) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
  for (; a === qg; ) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
}
var xg = null, yg = null, I$1 = false, zg = null;
function Ag(a, b2) {
  var c2 = Bg(5, null, null, 0);
  c2.elementType = "DELETED";
  c2.stateNode = b2;
  c2.return = a;
  b2 = a.deletions;
  null === b2 ? (a.deletions = [c2], a.flags |= 16) : b2.push(c2);
}
function Cg(a, b2) {
  switch (a.tag) {
    case 5:
      var c2 = a.type;
      b2 = 1 !== b2.nodeType || c2.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
      return null !== b2 ? (a.stateNode = b2, xg = a, yg = Lf(b2.firstChild), true) : false;
    case 6:
      return b2 = "" === a.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a.stateNode = b2, xg = a, yg = null, true) : false;
    case 13:
      return b2 = 8 !== b2.nodeType ? null : b2, null !== b2 ? (c2 = null !== qg ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b2, treeContext: c2, retryLane: 1073741824 }, c2 = Bg(18, null, null, 0), c2.stateNode = b2, c2.return = a, a.child = c2, xg = a, yg = null, true) : false;
    default:
      return false;
  }
}
function Dg(a) {
  return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
}
function Eg(a) {
  if (I$1) {
    var b2 = yg;
    if (b2) {
      var c2 = b2;
      if (!Cg(a, b2)) {
        if (Dg(a)) throw Error(p$1(418));
        b2 = Lf(c2.nextSibling);
        var d2 = xg;
        b2 && Cg(a, b2) ? Ag(d2, c2) : (a.flags = a.flags & -4097 | 2, I$1 = false, xg = a);
      }
    } else {
      if (Dg(a)) throw Error(p$1(418));
      a.flags = a.flags & -4097 | 2;
      I$1 = false;
      xg = a;
    }
  }
}
function Fg(a) {
  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; ) a = a.return;
  xg = a;
}
function Gg(a) {
  if (a !== xg) return false;
  if (!I$1) return Fg(a), I$1 = true, false;
  var b2;
  (b2 = 3 !== a.tag) && !(b2 = 5 !== a.tag) && (b2 = a.type, b2 = "head" !== b2 && "body" !== b2 && !Ef(a.type, a.memoizedProps));
  if (b2 && (b2 = yg)) {
    if (Dg(a)) throw Hg(), Error(p$1(418));
    for (; b2; ) Ag(a, b2), b2 = Lf(b2.nextSibling);
  }
  Fg(a);
  if (13 === a.tag) {
    a = a.memoizedState;
    a = null !== a ? a.dehydrated : null;
    if (!a) throw Error(p$1(317));
    a: {
      a = a.nextSibling;
      for (b2 = 0; a; ) {
        if (8 === a.nodeType) {
          var c2 = a.data;
          if ("/$" === c2) {
            if (0 === b2) {
              yg = Lf(a.nextSibling);
              break a;
            }
            b2--;
          } else "$" !== c2 && "$!" !== c2 && "$?" !== c2 || b2++;
        }
        a = a.nextSibling;
      }
      yg = null;
    }
  } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
  return true;
}
function Hg() {
  for (var a = yg; a; ) a = Lf(a.nextSibling);
}
function Ig() {
  yg = xg = null;
  I$1 = false;
}
function Jg(a) {
  null === zg ? zg = [a] : zg.push(a);
}
var Kg = ua.ReactCurrentBatchConfig;
function Lg(a, b2, c2) {
  a = c2.ref;
  if (null !== a && "function" !== typeof a && "object" !== typeof a) {
    if (c2._owner) {
      c2 = c2._owner;
      if (c2) {
        if (1 !== c2.tag) throw Error(p$1(309));
        var d2 = c2.stateNode;
      }
      if (!d2) throw Error(p$1(147, a));
      var e = d2, f2 = "" + a;
      if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === f2) return b2.ref;
      b2 = function(a2) {
        var b3 = e.refs;
        null === a2 ? delete b3[f2] : b3[f2] = a2;
      };
      b2._stringRef = f2;
      return b2;
    }
    if ("string" !== typeof a) throw Error(p$1(284));
    if (!c2._owner) throw Error(p$1(290, a));
  }
  return a;
}
function Mg(a, b2) {
  a = Object.prototype.toString.call(b2);
  throw Error(p$1(31, "[object Object]" === a ? "object with keys {" + Object.keys(b2).join(", ") + "}" : a));
}
function Ng(a) {
  var b2 = a._init;
  return b2(a._payload);
}
function Og(a) {
  function b2(b3, c3) {
    if (a) {
      var d3 = b3.deletions;
      null === d3 ? (b3.deletions = [c3], b3.flags |= 16) : d3.push(c3);
    }
  }
  function c2(c3, d3) {
    if (!a) return null;
    for (; null !== d3; ) b2(c3, d3), d3 = d3.sibling;
    return null;
  }
  function d2(a2, b3) {
    for (a2 = /* @__PURE__ */ new Map(); null !== b3; ) null !== b3.key ? a2.set(b3.key, b3) : a2.set(b3.index, b3), b3 = b3.sibling;
    return a2;
  }
  function e(a2, b3) {
    a2 = Pg(a2, b3);
    a2.index = 0;
    a2.sibling = null;
    return a2;
  }
  function f2(b3, c3, d3) {
    b3.index = d3;
    if (!a) return b3.flags |= 1048576, c3;
    d3 = b3.alternate;
    if (null !== d3) return d3 = d3.index, d3 < c3 ? (b3.flags |= 2, c3) : d3;
    b3.flags |= 2;
    return c3;
  }
  function g2(b3) {
    a && null === b3.alternate && (b3.flags |= 2);
    return b3;
  }
  function h3(a2, b3, c3, d3) {
    if (null === b3 || 6 !== b3.tag) return b3 = Qg(c3, a2.mode, d3), b3.return = a2, b3;
    b3 = e(b3, c3);
    b3.return = a2;
    return b3;
  }
  function k2(a2, b3, c3, d3) {
    var f3 = c3.type;
    if (f3 === ya) return m2(a2, b3, c3.props.children, d3, c3.key);
    if (null !== b3 && (b3.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && Ng(f3) === b3.type)) return d3 = e(b3, c3.props), d3.ref = Lg(a2, b3, c3), d3.return = a2, d3;
    d3 = Rg(c3.type, c3.key, c3.props, null, a2.mode, d3);
    d3.ref = Lg(a2, b3, c3);
    d3.return = a2;
    return d3;
  }
  function l2(a2, b3, c3, d3) {
    if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c3.containerInfo || b3.stateNode.implementation !== c3.implementation) return b3 = Sg(c3, a2.mode, d3), b3.return = a2, b3;
    b3 = e(b3, c3.children || []);
    b3.return = a2;
    return b3;
  }
  function m2(a2, b3, c3, d3, f3) {
    if (null === b3 || 7 !== b3.tag) return b3 = Tg(c3, a2.mode, d3, f3), b3.return = a2, b3;
    b3 = e(b3, c3);
    b3.return = a2;
    return b3;
  }
  function q2(a2, b3, c3) {
    if ("string" === typeof b3 && "" !== b3 || "number" === typeof b3) return b3 = Qg("" + b3, a2.mode, c3), b3.return = a2, b3;
    if ("object" === typeof b3 && null !== b3) {
      switch (b3.$$typeof) {
        case va:
          return c3 = Rg(b3.type, b3.key, b3.props, null, a2.mode, c3), c3.ref = Lg(a2, null, b3), c3.return = a2, c3;
        case wa:
          return b3 = Sg(b3, a2.mode, c3), b3.return = a2, b3;
        case Ha:
          var d3 = b3._init;
          return q2(a2, d3(b3._payload), c3);
      }
      if (eb(b3) || Ka(b3)) return b3 = Tg(b3, a2.mode, c3, null), b3.return = a2, b3;
      Mg(a2, b3);
    }
    return null;
  }
  function r2(a2, b3, c3, d3) {
    var e2 = null !== b3 ? b3.key : null;
    if ("string" === typeof c3 && "" !== c3 || "number" === typeof c3) return null !== e2 ? null : h3(a2, b3, "" + c3, d3);
    if ("object" === typeof c3 && null !== c3) {
      switch (c3.$$typeof) {
        case va:
          return c3.key === e2 ? k2(a2, b3, c3, d3) : null;
        case wa:
          return c3.key === e2 ? l2(a2, b3, c3, d3) : null;
        case Ha:
          return e2 = c3._init, r2(
            a2,
            b3,
            e2(c3._payload),
            d3
          );
      }
      if (eb(c3) || Ka(c3)) return null !== e2 ? null : m2(a2, b3, c3, d3, null);
      Mg(a2, c3);
    }
    return null;
  }
  function y2(a2, b3, c3, d3, e2) {
    if ("string" === typeof d3 && "" !== d3 || "number" === typeof d3) return a2 = a2.get(c3) || null, h3(b3, a2, "" + d3, e2);
    if ("object" === typeof d3 && null !== d3) {
      switch (d3.$$typeof) {
        case va:
          return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, k2(b3, a2, d3, e2);
        case wa:
          return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, l2(b3, a2, d3, e2);
        case Ha:
          var f3 = d3._init;
          return y2(a2, b3, c3, f3(d3._payload), e2);
      }
      if (eb(d3) || Ka(d3)) return a2 = a2.get(c3) || null, m2(b3, a2, d3, e2, null);
      Mg(b3, d3);
    }
    return null;
  }
  function n2(e2, g3, h4, k3) {
    for (var l3 = null, m3 = null, u2 = g3, w2 = g3 = 0, x2 = null; null !== u2 && w2 < h4.length; w2++) {
      u2.index > w2 ? (x2 = u2, u2 = null) : x2 = u2.sibling;
      var n3 = r2(e2, u2, h4[w2], k3);
      if (null === n3) {
        null === u2 && (u2 = x2);
        break;
      }
      a && u2 && null === n3.alternate && b2(e2, u2);
      g3 = f2(n3, g3, w2);
      null === m3 ? l3 = n3 : m3.sibling = n3;
      m3 = n3;
      u2 = x2;
    }
    if (w2 === h4.length) return c2(e2, u2), I$1 && tg(e2, w2), l3;
    if (null === u2) {
      for (; w2 < h4.length; w2++) u2 = q2(e2, h4[w2], k3), null !== u2 && (g3 = f2(u2, g3, w2), null === m3 ? l3 = u2 : m3.sibling = u2, m3 = u2);
      I$1 && tg(e2, w2);
      return l3;
    }
    for (u2 = d2(e2, u2); w2 < h4.length; w2++) x2 = y2(u2, e2, w2, h4[w2], k3), null !== x2 && (a && null !== x2.alternate && u2.delete(null === x2.key ? w2 : x2.key), g3 = f2(x2, g3, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
    a && u2.forEach(function(a2) {
      return b2(e2, a2);
    });
    I$1 && tg(e2, w2);
    return l3;
  }
  function t2(e2, g3, h4, k3) {
    var l3 = Ka(h4);
    if ("function" !== typeof l3) throw Error(p$1(150));
    h4 = l3.call(h4);
    if (null == h4) throw Error(p$1(151));
    for (var u2 = l3 = null, m3 = g3, w2 = g3 = 0, x2 = null, n3 = h4.next(); null !== m3 && !n3.done; w2++, n3 = h4.next()) {
      m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
      var t3 = r2(e2, m3, n3.value, k3);
      if (null === t3) {
        null === m3 && (m3 = x2);
        break;
      }
      a && m3 && null === t3.alternate && b2(e2, m3);
      g3 = f2(t3, g3, w2);
      null === u2 ? l3 = t3 : u2.sibling = t3;
      u2 = t3;
      m3 = x2;
    }
    if (n3.done) return c2(
      e2,
      m3
    ), I$1 && tg(e2, w2), l3;
    if (null === m3) {
      for (; !n3.done; w2++, n3 = h4.next()) n3 = q2(e2, n3.value, k3), null !== n3 && (g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
      I$1 && tg(e2, w2);
      return l3;
    }
    for (m3 = d2(e2, m3); !n3.done; w2++, n3 = h4.next()) n3 = y2(m3, e2, w2, n3.value, k3), null !== n3 && (a && null !== n3.alternate && m3.delete(null === n3.key ? w2 : n3.key), g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
    a && m3.forEach(function(a2) {
      return b2(e2, a2);
    });
    I$1 && tg(e2, w2);
    return l3;
  }
  function J2(a2, d3, f3, h4) {
    "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
    if ("object" === typeof f3 && null !== f3) {
      switch (f3.$$typeof) {
        case va:
          a: {
            for (var k3 = f3.key, l3 = d3; null !== l3; ) {
              if (l3.key === k3) {
                k3 = f3.type;
                if (k3 === ya) {
                  if (7 === l3.tag) {
                    c2(a2, l3.sibling);
                    d3 = e(l3, f3.props.children);
                    d3.return = a2;
                    a2 = d3;
                    break a;
                  }
                } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && Ng(k3) === l3.type) {
                  c2(a2, l3.sibling);
                  d3 = e(l3, f3.props);
                  d3.ref = Lg(a2, l3, f3);
                  d3.return = a2;
                  a2 = d3;
                  break a;
                }
                c2(a2, l3);
                break;
              } else b2(a2, l3);
              l3 = l3.sibling;
            }
            f3.type === ya ? (d3 = Tg(f3.props.children, a2.mode, h4, f3.key), d3.return = a2, a2 = d3) : (h4 = Rg(f3.type, f3.key, f3.props, null, a2.mode, h4), h4.ref = Lg(a2, d3, f3), h4.return = a2, a2 = h4);
          }
          return g2(a2);
        case wa:
          a: {
            for (l3 = f3.key; null !== d3; ) {
              if (d3.key === l3) if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                c2(a2, d3.sibling);
                d3 = e(d3, f3.children || []);
                d3.return = a2;
                a2 = d3;
                break a;
              } else {
                c2(a2, d3);
                break;
              }
              else b2(a2, d3);
              d3 = d3.sibling;
            }
            d3 = Sg(f3, a2.mode, h4);
            d3.return = a2;
            a2 = d3;
          }
          return g2(a2);
        case Ha:
          return l3 = f3._init, J2(a2, d3, l3(f3._payload), h4);
      }
      if (eb(f3)) return n2(a2, d3, f3, h4);
      if (Ka(f3)) return t2(a2, d3, f3, h4);
      Mg(a2, f3);
    }
    return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c2(a2, d3.sibling), d3 = e(d3, f3), d3.return = a2, a2 = d3) : (c2(a2, d3), d3 = Qg(f3, a2.mode, h4), d3.return = a2, a2 = d3), g2(a2)) : c2(a2, d3);
  }
  return J2;
}
var Ug = Og(true), Vg = Og(false), Wg = Uf(null), Xg = null, Yg = null, Zg = null;
function $g() {
  Zg = Yg = Xg = null;
}
function ah(a) {
  var b2 = Wg.current;
  E$1(Wg);
  a._currentValue = b2;
}
function bh(a, b2, c2) {
  for (; null !== a; ) {
    var d2 = a.alternate;
    (a.childLanes & b2) !== b2 ? (a.childLanes |= b2, null !== d2 && (d2.childLanes |= b2)) : null !== d2 && (d2.childLanes & b2) !== b2 && (d2.childLanes |= b2);
    if (a === c2) break;
    a = a.return;
  }
}
function ch(a, b2) {
  Xg = a;
  Zg = Yg = null;
  a = a.dependencies;
  null !== a && null !== a.firstContext && (0 !== (a.lanes & b2) && (dh = true), a.firstContext = null);
}
function eh(a) {
  var b2 = a._currentValue;
  if (Zg !== a) if (a = { context: a, memoizedValue: b2, next: null }, null === Yg) {
    if (null === Xg) throw Error(p$1(308));
    Yg = a;
    Xg.dependencies = { lanes: 0, firstContext: a };
  } else Yg = Yg.next = a;
  return b2;
}
var fh = null;
function gh(a) {
  null === fh ? fh = [a] : fh.push(a);
}
function hh(a, b2, c2, d2) {
  var e = b2.interleaved;
  null === e ? (c2.next = c2, gh(b2)) : (c2.next = e.next, e.next = c2);
  b2.interleaved = c2;
  return ih(a, d2);
}
function ih(a, b2) {
  a.lanes |= b2;
  var c2 = a.alternate;
  null !== c2 && (c2.lanes |= b2);
  c2 = a;
  for (a = a.return; null !== a; ) a.childLanes |= b2, c2 = a.alternate, null !== c2 && (c2.childLanes |= b2), c2 = a, a = a.return;
  return 3 === c2.tag ? c2.stateNode : null;
}
var jh = false;
function kh(a) {
  a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
}
function lh(a, b2) {
  a = a.updateQueue;
  b2.updateQueue === a && (b2.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
}
function mh(a, b2) {
  return { eventTime: a, lane: b2, tag: 0, payload: null, callback: null, next: null };
}
function nh(a, b2, c2) {
  var d2 = a.updateQueue;
  if (null === d2) return null;
  d2 = d2.shared;
  if (0 !== (K & 2)) {
    var e = d2.pending;
    null === e ? b2.next = b2 : (b2.next = e.next, e.next = b2);
    d2.pending = b2;
    return ih(a, c2);
  }
  e = d2.interleaved;
  null === e ? (b2.next = b2, gh(d2)) : (b2.next = e.next, e.next = b2);
  d2.interleaved = b2;
  return ih(a, c2);
}
function oh(a, b2, c2) {
  b2 = b2.updateQueue;
  if (null !== b2 && (b2 = b2.shared, 0 !== (c2 & 4194240))) {
    var d2 = b2.lanes;
    d2 &= a.pendingLanes;
    c2 |= d2;
    b2.lanes = c2;
    Cc(a, c2);
  }
}
function ph(a, b2) {
  var c2 = a.updateQueue, d2 = a.alternate;
  if (null !== d2 && (d2 = d2.updateQueue, c2 === d2)) {
    var e = null, f2 = null;
    c2 = c2.firstBaseUpdate;
    if (null !== c2) {
      do {
        var g2 = { eventTime: c2.eventTime, lane: c2.lane, tag: c2.tag, payload: c2.payload, callback: c2.callback, next: null };
        null === f2 ? e = f2 = g2 : f2 = f2.next = g2;
        c2 = c2.next;
      } while (null !== c2);
      null === f2 ? e = f2 = b2 : f2 = f2.next = b2;
    } else e = f2 = b2;
    c2 = { baseState: d2.baseState, firstBaseUpdate: e, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
    a.updateQueue = c2;
    return;
  }
  a = c2.lastBaseUpdate;
  null === a ? c2.firstBaseUpdate = b2 : a.next = b2;
  c2.lastBaseUpdate = b2;
}
function qh(a, b2, c2, d2) {
  var e = a.updateQueue;
  jh = false;
  var f2 = e.firstBaseUpdate, g2 = e.lastBaseUpdate, h3 = e.shared.pending;
  if (null !== h3) {
    e.shared.pending = null;
    var k2 = h3, l2 = k2.next;
    k2.next = null;
    null === g2 ? f2 = l2 : g2.next = l2;
    g2 = k2;
    var m2 = a.alternate;
    null !== m2 && (m2 = m2.updateQueue, h3 = m2.lastBaseUpdate, h3 !== g2 && (null === h3 ? m2.firstBaseUpdate = l2 : h3.next = l2, m2.lastBaseUpdate = k2));
  }
  if (null !== f2) {
    var q2 = e.baseState;
    g2 = 0;
    m2 = l2 = k2 = null;
    h3 = f2;
    do {
      var r2 = h3.lane, y2 = h3.eventTime;
      if ((d2 & r2) === r2) {
        null !== m2 && (m2 = m2.next = {
          eventTime: y2,
          lane: 0,
          tag: h3.tag,
          payload: h3.payload,
          callback: h3.callback,
          next: null
        });
        a: {
          var n2 = a, t2 = h3;
          r2 = b2;
          y2 = c2;
          switch (t2.tag) {
            case 1:
              n2 = t2.payload;
              if ("function" === typeof n2) {
                q2 = n2.call(y2, q2, r2);
                break a;
              }
              q2 = n2;
              break a;
            case 3:
              n2.flags = n2.flags & -65537 | 128;
            case 0:
              n2 = t2.payload;
              r2 = "function" === typeof n2 ? n2.call(y2, q2, r2) : n2;
              if (null === r2 || void 0 === r2) break a;
              q2 = A$1({}, q2, r2);
              break a;
            case 2:
              jh = true;
          }
        }
        null !== h3.callback && 0 !== h3.lane && (a.flags |= 64, r2 = e.effects, null === r2 ? e.effects = [h3] : r2.push(h3));
      } else y2 = { eventTime: y2, lane: r2, tag: h3.tag, payload: h3.payload, callback: h3.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q2) : m2 = m2.next = y2, g2 |= r2;
      h3 = h3.next;
      if (null === h3) if (h3 = e.shared.pending, null === h3) break;
      else r2 = h3, h3 = r2.next, r2.next = null, e.lastBaseUpdate = r2, e.shared.pending = null;
    } while (1);
    null === m2 && (k2 = q2);
    e.baseState = k2;
    e.firstBaseUpdate = l2;
    e.lastBaseUpdate = m2;
    b2 = e.shared.interleaved;
    if (null !== b2) {
      e = b2;
      do
        g2 |= e.lane, e = e.next;
      while (e !== b2);
    } else null === f2 && (e.shared.lanes = 0);
    rh |= g2;
    a.lanes = g2;
    a.memoizedState = q2;
  }
}
function sh(a, b2, c2) {
  a = b2.effects;
  b2.effects = null;
  if (null !== a) for (b2 = 0; b2 < a.length; b2++) {
    var d2 = a[b2], e = d2.callback;
    if (null !== e) {
      d2.callback = null;
      d2 = c2;
      if ("function" !== typeof e) throw Error(p$1(191, e));
      e.call(d2);
    }
  }
}
var th = {}, uh = Uf(th), vh$1 = Uf(th), wh = Uf(th);
function xh(a) {
  if (a === th) throw Error(p$1(174));
  return a;
}
function yh(a, b2) {
  G(wh, b2);
  G(vh$1, a);
  G(uh, th);
  a = b2.nodeType;
  switch (a) {
    case 9:
    case 11:
      b2 = (b2 = b2.documentElement) ? b2.namespaceURI : lb(null, "");
      break;
    default:
      a = 8 === a ? b2.parentNode : b2, b2 = a.namespaceURI || null, a = a.tagName, b2 = lb(b2, a);
  }
  E$1(uh);
  G(uh, b2);
}
function zh() {
  E$1(uh);
  E$1(vh$1);
  E$1(wh);
}
function Ah(a) {
  xh(wh.current);
  var b2 = xh(uh.current);
  var c2 = lb(b2, a.type);
  b2 !== c2 && (G(vh$1, a), G(uh, c2));
}
function Bh(a) {
  vh$1.current === a && (E$1(uh), E$1(vh$1));
}
var L$1 = Uf(0);
function Ch(a) {
  for (var b2 = a; null !== b2; ) {
    if (13 === b2.tag) {
      var c2 = b2.memoizedState;
      if (null !== c2 && (c2 = c2.dehydrated, null === c2 || "$?" === c2.data || "$!" === c2.data)) return b2;
    } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
      if (0 !== (b2.flags & 128)) return b2;
    } else if (null !== b2.child) {
      b2.child.return = b2;
      b2 = b2.child;
      continue;
    }
    if (b2 === a) break;
    for (; null === b2.sibling; ) {
      if (null === b2.return || b2.return === a) return null;
      b2 = b2.return;
    }
    b2.sibling.return = b2.return;
    b2 = b2.sibling;
  }
  return null;
}
var Dh = [];
function Eh() {
  for (var a = 0; a < Dh.length; a++) Dh[a]._workInProgressVersionPrimary = null;
  Dh.length = 0;
}
var Fh = ua.ReactCurrentDispatcher, Gh = ua.ReactCurrentBatchConfig, Hh = 0, M$1 = null, N$1 = null, O$1 = null, Ih = false, Jh = false, Kh = 0, Lh = 0;
function P$1() {
  throw Error(p$1(321));
}
function Mh(a, b2) {
  if (null === b2) return false;
  for (var c2 = 0; c2 < b2.length && c2 < a.length; c2++) if (!He(a[c2], b2[c2])) return false;
  return true;
}
function Nh(a, b2, c2, d2, e, f2) {
  Hh = f2;
  M$1 = b2;
  b2.memoizedState = null;
  b2.updateQueue = null;
  b2.lanes = 0;
  Fh.current = null === a || null === a.memoizedState ? Oh : Ph;
  a = c2(d2, e);
  if (Jh) {
    f2 = 0;
    do {
      Jh = false;
      Kh = 0;
      if (25 <= f2) throw Error(p$1(301));
      f2 += 1;
      O$1 = N$1 = null;
      b2.updateQueue = null;
      Fh.current = Qh;
      a = c2(d2, e);
    } while (Jh);
  }
  Fh.current = Rh;
  b2 = null !== N$1 && null !== N$1.next;
  Hh = 0;
  O$1 = N$1 = M$1 = null;
  Ih = false;
  if (b2) throw Error(p$1(300));
  return a;
}
function Sh() {
  var a = 0 !== Kh;
  Kh = 0;
  return a;
}
function Th() {
  var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
  null === O$1 ? M$1.memoizedState = O$1 = a : O$1 = O$1.next = a;
  return O$1;
}
function Uh() {
  if (null === N$1) {
    var a = M$1.alternate;
    a = null !== a ? a.memoizedState : null;
  } else a = N$1.next;
  var b2 = null === O$1 ? M$1.memoizedState : O$1.next;
  if (null !== b2) O$1 = b2, N$1 = a;
  else {
    if (null === a) throw Error(p$1(310));
    N$1 = a;
    a = { memoizedState: N$1.memoizedState, baseState: N$1.baseState, baseQueue: N$1.baseQueue, queue: N$1.queue, next: null };
    null === O$1 ? M$1.memoizedState = O$1 = a : O$1 = O$1.next = a;
  }
  return O$1;
}
function Vh(a, b2) {
  return "function" === typeof b2 ? b2(a) : b2;
}
function Wh(a) {
  var b2 = Uh(), c2 = b2.queue;
  if (null === c2) throw Error(p$1(311));
  c2.lastRenderedReducer = a;
  var d2 = N$1, e = d2.baseQueue, f2 = c2.pending;
  if (null !== f2) {
    if (null !== e) {
      var g2 = e.next;
      e.next = f2.next;
      f2.next = g2;
    }
    d2.baseQueue = e = f2;
    c2.pending = null;
  }
  if (null !== e) {
    f2 = e.next;
    d2 = d2.baseState;
    var h3 = g2 = null, k2 = null, l2 = f2;
    do {
      var m2 = l2.lane;
      if ((Hh & m2) === m2) null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d2 = l2.hasEagerState ? l2.eagerState : a(d2, l2.action);
      else {
        var q2 = {
          lane: m2,
          action: l2.action,
          hasEagerState: l2.hasEagerState,
          eagerState: l2.eagerState,
          next: null
        };
        null === k2 ? (h3 = k2 = q2, g2 = d2) : k2 = k2.next = q2;
        M$1.lanes |= m2;
        rh |= m2;
      }
      l2 = l2.next;
    } while (null !== l2 && l2 !== f2);
    null === k2 ? g2 = d2 : k2.next = h3;
    He(d2, b2.memoizedState) || (dh = true);
    b2.memoizedState = d2;
    b2.baseState = g2;
    b2.baseQueue = k2;
    c2.lastRenderedState = d2;
  }
  a = c2.interleaved;
  if (null !== a) {
    e = a;
    do
      f2 = e.lane, M$1.lanes |= f2, rh |= f2, e = e.next;
    while (e !== a);
  } else null === e && (c2.lanes = 0);
  return [b2.memoizedState, c2.dispatch];
}
function Xh(a) {
  var b2 = Uh(), c2 = b2.queue;
  if (null === c2) throw Error(p$1(311));
  c2.lastRenderedReducer = a;
  var d2 = c2.dispatch, e = c2.pending, f2 = b2.memoizedState;
  if (null !== e) {
    c2.pending = null;
    var g2 = e = e.next;
    do
      f2 = a(f2, g2.action), g2 = g2.next;
    while (g2 !== e);
    He(f2, b2.memoizedState) || (dh = true);
    b2.memoizedState = f2;
    null === b2.baseQueue && (b2.baseState = f2);
    c2.lastRenderedState = f2;
  }
  return [f2, d2];
}
function Yh() {
}
function Zh(a, b2) {
  var c2 = M$1, d2 = Uh(), e = b2(), f2 = !He(d2.memoizedState, e);
  f2 && (d2.memoizedState = e, dh = true);
  d2 = d2.queue;
  $h(ai.bind(null, c2, d2, a), [a]);
  if (d2.getSnapshot !== b2 || f2 || null !== O$1 && O$1.memoizedState.tag & 1) {
    c2.flags |= 2048;
    bi(9, ci.bind(null, c2, d2, e, b2), void 0, null);
    if (null === Q$1) throw Error(p$1(349));
    0 !== (Hh & 30) || di(c2, b2, e);
  }
  return e;
}
function di(a, b2, c2) {
  a.flags |= 16384;
  a = { getSnapshot: b2, value: c2 };
  b2 = M$1.updateQueue;
  null === b2 ? (b2 = { lastEffect: null, stores: null }, M$1.updateQueue = b2, b2.stores = [a]) : (c2 = b2.stores, null === c2 ? b2.stores = [a] : c2.push(a));
}
function ci(a, b2, c2, d2) {
  b2.value = c2;
  b2.getSnapshot = d2;
  ei(b2) && fi(a);
}
function ai(a, b2, c2) {
  return c2(function() {
    ei(b2) && fi(a);
  });
}
function ei(a) {
  var b2 = a.getSnapshot;
  a = a.value;
  try {
    var c2 = b2();
    return !He(a, c2);
  } catch (d2) {
    return true;
  }
}
function fi(a) {
  var b2 = ih(a, 1);
  null !== b2 && gi(b2, a, 1, -1);
}
function hi(a) {
  var b2 = Th();
  "function" === typeof a && (a = a());
  b2.memoizedState = b2.baseState = a;
  a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Vh, lastRenderedState: a };
  b2.queue = a;
  a = a.dispatch = ii.bind(null, M$1, a);
  return [b2.memoizedState, a];
}
function bi(a, b2, c2, d2) {
  a = { tag: a, create: b2, destroy: c2, deps: d2, next: null };
  b2 = M$1.updateQueue;
  null === b2 ? (b2 = { lastEffect: null, stores: null }, M$1.updateQueue = b2, b2.lastEffect = a.next = a) : (c2 = b2.lastEffect, null === c2 ? b2.lastEffect = a.next = a : (d2 = c2.next, c2.next = a, a.next = d2, b2.lastEffect = a));
  return a;
}
function ji() {
  return Uh().memoizedState;
}
function ki(a, b2, c2, d2) {
  var e = Th();
  M$1.flags |= a;
  e.memoizedState = bi(1 | b2, c2, void 0, void 0 === d2 ? null : d2);
}
function li(a, b2, c2, d2) {
  var e = Uh();
  d2 = void 0 === d2 ? null : d2;
  var f2 = void 0;
  if (null !== N$1) {
    var g2 = N$1.memoizedState;
    f2 = g2.destroy;
    if (null !== d2 && Mh(d2, g2.deps)) {
      e.memoizedState = bi(b2, c2, f2, d2);
      return;
    }
  }
  M$1.flags |= a;
  e.memoizedState = bi(1 | b2, c2, f2, d2);
}
function mi(a, b2) {
  return ki(8390656, 8, a, b2);
}
function $h(a, b2) {
  return li(2048, 8, a, b2);
}
function ni(a, b2) {
  return li(4, 2, a, b2);
}
function oi(a, b2) {
  return li(4, 4, a, b2);
}
function pi(a, b2) {
  if ("function" === typeof b2) return a = a(), b2(a), function() {
    b2(null);
  };
  if (null !== b2 && void 0 !== b2) return a = a(), b2.current = a, function() {
    b2.current = null;
  };
}
function qi(a, b2, c2) {
  c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
  return li(4, 4, pi.bind(null, b2, a), c2);
}
function ri() {
}
function si(a, b2) {
  var c2 = Uh();
  b2 = void 0 === b2 ? null : b2;
  var d2 = c2.memoizedState;
  if (null !== d2 && null !== b2 && Mh(b2, d2[1])) return d2[0];
  c2.memoizedState = [a, b2];
  return a;
}
function ti(a, b2) {
  var c2 = Uh();
  b2 = void 0 === b2 ? null : b2;
  var d2 = c2.memoizedState;
  if (null !== d2 && null !== b2 && Mh(b2, d2[1])) return d2[0];
  a = a();
  c2.memoizedState = [a, b2];
  return a;
}
function ui(a, b2, c2) {
  if (0 === (Hh & 21)) return a.baseState && (a.baseState = false, dh = true), a.memoizedState = c2;
  He(c2, b2) || (c2 = yc(), M$1.lanes |= c2, rh |= c2, a.baseState = true);
  return b2;
}
function vi(a, b2) {
  var c2 = C$1;
  C$1 = 0 !== c2 && 4 > c2 ? c2 : 4;
  a(true);
  var d2 = Gh.transition;
  Gh.transition = {};
  try {
    a(false), b2();
  } finally {
    C$1 = c2, Gh.transition = d2;
  }
}
function wi() {
  return Uh().memoizedState;
}
function xi(a, b2, c2) {
  var d2 = yi(a);
  c2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
  if (zi(a)) Ai(b2, c2);
  else if (c2 = hh(a, b2, c2, d2), null !== c2) {
    var e = R$1();
    gi(c2, a, d2, e);
    Bi(c2, b2, d2);
  }
}
function ii(a, b2, c2) {
  var d2 = yi(a), e = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
  if (zi(a)) Ai(b2, e);
  else {
    var f2 = a.alternate;
    if (0 === a.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b2.lastRenderedReducer, null !== f2)) try {
      var g2 = b2.lastRenderedState, h3 = f2(g2, c2);
      e.hasEagerState = true;
      e.eagerState = h3;
      if (He(h3, g2)) {
        var k2 = b2.interleaved;
        null === k2 ? (e.next = e, gh(b2)) : (e.next = k2.next, k2.next = e);
        b2.interleaved = e;
        return;
      }
    } catch (l2) {
    } finally {
    }
    c2 = hh(a, b2, e, d2);
    null !== c2 && (e = R$1(), gi(c2, a, d2, e), Bi(c2, b2, d2));
  }
}
function zi(a) {
  var b2 = a.alternate;
  return a === M$1 || null !== b2 && b2 === M$1;
}
function Ai(a, b2) {
  Jh = Ih = true;
  var c2 = a.pending;
  null === c2 ? b2.next = b2 : (b2.next = c2.next, c2.next = b2);
  a.pending = b2;
}
function Bi(a, b2, c2) {
  if (0 !== (c2 & 4194240)) {
    var d2 = b2.lanes;
    d2 &= a.pendingLanes;
    c2 |= d2;
    b2.lanes = c2;
    Cc(a, c2);
  }
}
var Rh = { readContext: eh, useCallback: P$1, useContext: P$1, useEffect: P$1, useImperativeHandle: P$1, useInsertionEffect: P$1, useLayoutEffect: P$1, useMemo: P$1, useReducer: P$1, useRef: P$1, useState: P$1, useDebugValue: P$1, useDeferredValue: P$1, useTransition: P$1, useMutableSource: P$1, useSyncExternalStore: P$1, useId: P$1, unstable_isNewReconciler: false }, Oh = { readContext: eh, useCallback: function(a, b2) {
  Th().memoizedState = [a, void 0 === b2 ? null : b2];
  return a;
}, useContext: eh, useEffect: mi, useImperativeHandle: function(a, b2, c2) {
  c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
  return ki(
    4194308,
    4,
    pi.bind(null, b2, a),
    c2
  );
}, useLayoutEffect: function(a, b2) {
  return ki(4194308, 4, a, b2);
}, useInsertionEffect: function(a, b2) {
  return ki(4, 2, a, b2);
}, useMemo: function(a, b2) {
  var c2 = Th();
  b2 = void 0 === b2 ? null : b2;
  a = a();
  c2.memoizedState = [a, b2];
  return a;
}, useReducer: function(a, b2, c2) {
  var d2 = Th();
  b2 = void 0 !== c2 ? c2(b2) : b2;
  d2.memoizedState = d2.baseState = b2;
  a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b2 };
  d2.queue = a;
  a = a.dispatch = xi.bind(null, M$1, a);
  return [d2.memoizedState, a];
}, useRef: function(a) {
  var b2 = Th();
  a = { current: a };
  return b2.memoizedState = a;
}, useState: hi, useDebugValue: ri, useDeferredValue: function(a) {
  return Th().memoizedState = a;
}, useTransition: function() {
  var a = hi(false), b2 = a[0];
  a = vi.bind(null, a[1]);
  Th().memoizedState = a;
  return [b2, a];
}, useMutableSource: function() {
}, useSyncExternalStore: function(a, b2, c2) {
  var d2 = M$1, e = Th();
  if (I$1) {
    if (void 0 === c2) throw Error(p$1(407));
    c2 = c2();
  } else {
    c2 = b2();
    if (null === Q$1) throw Error(p$1(349));
    0 !== (Hh & 30) || di(d2, b2, c2);
  }
  e.memoizedState = c2;
  var f2 = { value: c2, getSnapshot: b2 };
  e.queue = f2;
  mi(ai.bind(
    null,
    d2,
    f2,
    a
  ), [a]);
  d2.flags |= 2048;
  bi(9, ci.bind(null, d2, f2, c2, b2), void 0, null);
  return c2;
}, useId: function() {
  var a = Th(), b2 = Q$1.identifierPrefix;
  if (I$1) {
    var c2 = sg;
    var d2 = rg;
    c2 = (d2 & ~(1 << 32 - oc(d2) - 1)).toString(32) + c2;
    b2 = ":" + b2 + "R" + c2;
    c2 = Kh++;
    0 < c2 && (b2 += "H" + c2.toString(32));
    b2 += ":";
  } else c2 = Lh++, b2 = ":" + b2 + "r" + c2.toString(32) + ":";
  return a.memoizedState = b2;
}, unstable_isNewReconciler: false }, Ph = {
  readContext: eh,
  useCallback: si,
  useContext: eh,
  useEffect: $h,
  useImperativeHandle: qi,
  useInsertionEffect: ni,
  useLayoutEffect: oi,
  useMemo: ti,
  useReducer: Wh,
  useRef: ji,
  useState: function() {
    return Wh(Vh);
  },
  useDebugValue: ri,
  useDeferredValue: function(a) {
    var b2 = Uh();
    return ui(b2, N$1.memoizedState, a);
  },
  useTransition: function() {
    var a = Wh(Vh)[0], b2 = Uh().memoizedState;
    return [a, b2];
  },
  useMutableSource: Yh,
  useSyncExternalStore: Zh,
  useId: wi,
  unstable_isNewReconciler: false
}, Qh = { readContext: eh, useCallback: si, useContext: eh, useEffect: $h, useImperativeHandle: qi, useInsertionEffect: ni, useLayoutEffect: oi, useMemo: ti, useReducer: Xh, useRef: ji, useState: function() {
  return Xh(Vh);
}, useDebugValue: ri, useDeferredValue: function(a) {
  var b2 = Uh();
  return null === N$1 ? b2.memoizedState = a : ui(b2, N$1.memoizedState, a);
}, useTransition: function() {
  var a = Xh(Vh)[0], b2 = Uh().memoizedState;
  return [a, b2];
}, useMutableSource: Yh, useSyncExternalStore: Zh, useId: wi, unstable_isNewReconciler: false };
function Ci(a, b2) {
  if (a && a.defaultProps) {
    b2 = A$1({}, b2);
    a = a.defaultProps;
    for (var c2 in a) void 0 === b2[c2] && (b2[c2] = a[c2]);
    return b2;
  }
  return b2;
}
function Di(a, b2, c2, d2) {
  b2 = a.memoizedState;
  c2 = c2(d2, b2);
  c2 = null === c2 || void 0 === c2 ? b2 : A$1({}, b2, c2);
  a.memoizedState = c2;
  0 === a.lanes && (a.updateQueue.baseState = c2);
}
var Ei = { isMounted: function(a) {
  return (a = a._reactInternals) ? Vb(a) === a : false;
}, enqueueSetState: function(a, b2, c2) {
  a = a._reactInternals;
  var d2 = R$1(), e = yi(a), f2 = mh(d2, e);
  f2.payload = b2;
  void 0 !== c2 && null !== c2 && (f2.callback = c2);
  b2 = nh(a, f2, e);
  null !== b2 && (gi(b2, a, e, d2), oh(b2, a, e));
}, enqueueReplaceState: function(a, b2, c2) {
  a = a._reactInternals;
  var d2 = R$1(), e = yi(a), f2 = mh(d2, e);
  f2.tag = 1;
  f2.payload = b2;
  void 0 !== c2 && null !== c2 && (f2.callback = c2);
  b2 = nh(a, f2, e);
  null !== b2 && (gi(b2, a, e, d2), oh(b2, a, e));
}, enqueueForceUpdate: function(a, b2) {
  a = a._reactInternals;
  var c2 = R$1(), d2 = yi(a), e = mh(c2, d2);
  e.tag = 2;
  void 0 !== b2 && null !== b2 && (e.callback = b2);
  b2 = nh(a, e, d2);
  null !== b2 && (gi(b2, a, d2, c2), oh(b2, a, d2));
} };
function Fi(a, b2, c2, d2, e, f2, g2) {
  a = a.stateNode;
  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Ie(c2, d2) || !Ie(e, f2) : true;
}
function Gi(a, b2, c2) {
  var d2 = false, e = Vf;
  var f2 = b2.contextType;
  "object" === typeof f2 && null !== f2 ? f2 = eh(f2) : (e = Zf(b2) ? Xf : H$1.current, d2 = b2.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Yf(a, e) : Vf);
  b2 = new b2(c2, f2);
  a.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
  b2.updater = Ei;
  a.stateNode = b2;
  b2._reactInternals = a;
  d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f2);
  return b2;
}
function Hi(a, b2, c2, d2) {
  a = b2.state;
  "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c2, d2);
  "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c2, d2);
  b2.state !== a && Ei.enqueueReplaceState(b2, b2.state, null);
}
function Ii(a, b2, c2, d2) {
  var e = a.stateNode;
  e.props = c2;
  e.state = a.memoizedState;
  e.refs = {};
  kh(a);
  var f2 = b2.contextType;
  "object" === typeof f2 && null !== f2 ? e.context = eh(f2) : (f2 = Zf(b2) ? Xf : H$1.current, e.context = Yf(a, f2));
  e.state = a.memoizedState;
  f2 = b2.getDerivedStateFromProps;
  "function" === typeof f2 && (Di(a, b2, f2, c2), e.state = a.memoizedState);
  "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b2 = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b2 !== e.state && Ei.enqueueReplaceState(e, e.state, null), qh(a, c2, e, d2), e.state = a.memoizedState);
  "function" === typeof e.componentDidMount && (a.flags |= 4194308);
}
function Ji(a, b2) {
  try {
    var c2 = "", d2 = b2;
    do
      c2 += Pa(d2), d2 = d2.return;
    while (d2);
    var e = c2;
  } catch (f2) {
    e = "\nError generating stack: " + f2.message + "\n" + f2.stack;
  }
  return { value: a, source: b2, stack: e, digest: null };
}
function Ki(a, b2, c2) {
  return { value: a, source: null, stack: null != c2 ? c2 : null, digest: null != b2 ? b2 : null };
}
function Li(a, b2) {
  try {
    console.error(b2.value);
  } catch (c2) {
    setTimeout(function() {
      throw c2;
    });
  }
}
var Mi = "function" === typeof WeakMap ? WeakMap : Map;
function Ni(a, b2, c2) {
  c2 = mh(-1, c2);
  c2.tag = 3;
  c2.payload = { element: null };
  var d2 = b2.value;
  c2.callback = function() {
    Oi || (Oi = true, Pi = d2);
    Li(a, b2);
  };
  return c2;
}
function Qi(a, b2, c2) {
  c2 = mh(-1, c2);
  c2.tag = 3;
  var d2 = a.type.getDerivedStateFromError;
  if ("function" === typeof d2) {
    var e = b2.value;
    c2.payload = function() {
      return d2(e);
    };
    c2.callback = function() {
      Li(a, b2);
    };
  }
  var f2 = a.stateNode;
  null !== f2 && "function" === typeof f2.componentDidCatch && (c2.callback = function() {
    Li(a, b2);
    "function" !== typeof d2 && (null === Ri ? Ri = /* @__PURE__ */ new Set([this]) : Ri.add(this));
    var c3 = b2.stack;
    this.componentDidCatch(b2.value, { componentStack: null !== c3 ? c3 : "" });
  });
  return c2;
}
function Si(a, b2, c2) {
  var d2 = a.pingCache;
  if (null === d2) {
    d2 = a.pingCache = new Mi();
    var e = /* @__PURE__ */ new Set();
    d2.set(b2, e);
  } else e = d2.get(b2), void 0 === e && (e = /* @__PURE__ */ new Set(), d2.set(b2, e));
  e.has(c2) || (e.add(c2), a = Ti.bind(null, a, b2, c2), b2.then(a, a));
}
function Ui(a) {
  do {
    var b2;
    if (b2 = 13 === a.tag) b2 = a.memoizedState, b2 = null !== b2 ? null !== b2.dehydrated ? true : false : true;
    if (b2) return a;
    a = a.return;
  } while (null !== a);
  return null;
}
function Vi(a, b2, c2, d2, e) {
  if (0 === (a.mode & 1)) return a === b2 ? a.flags |= 65536 : (a.flags |= 128, c2.flags |= 131072, c2.flags &= -52805, 1 === c2.tag && (null === c2.alternate ? c2.tag = 17 : (b2 = mh(-1, 1), b2.tag = 2, nh(c2, b2, 1))), c2.lanes |= 1), a;
  a.flags |= 65536;
  a.lanes = e;
  return a;
}
var Wi = ua.ReactCurrentOwner, dh = false;
function Xi(a, b2, c2, d2) {
  b2.child = null === a ? Vg(b2, null, c2, d2) : Ug(b2, a.child, c2, d2);
}
function Yi(a, b2, c2, d2, e) {
  c2 = c2.render;
  var f2 = b2.ref;
  ch(b2, e);
  d2 = Nh(a, b2, c2, d2, f2, e);
  c2 = Sh();
  if (null !== a && !dh) return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e, Zi(a, b2, e);
  I$1 && c2 && vg(b2);
  b2.flags |= 1;
  Xi(a, b2, d2, e);
  return b2.child;
}
function $i(a, b2, c2, d2, e) {
  if (null === a) {
    var f2 = c2.type;
    if ("function" === typeof f2 && !aj(f2) && void 0 === f2.defaultProps && null === c2.compare && void 0 === c2.defaultProps) return b2.tag = 15, b2.type = f2, bj(a, b2, f2, d2, e);
    a = Rg(c2.type, null, d2, b2, b2.mode, e);
    a.ref = b2.ref;
    a.return = b2;
    return b2.child = a;
  }
  f2 = a.child;
  if (0 === (a.lanes & e)) {
    var g2 = f2.memoizedProps;
    c2 = c2.compare;
    c2 = null !== c2 ? c2 : Ie;
    if (c2(g2, d2) && a.ref === b2.ref) return Zi(a, b2, e);
  }
  b2.flags |= 1;
  a = Pg(f2, d2);
  a.ref = b2.ref;
  a.return = b2;
  return b2.child = a;
}
function bj(a, b2, c2, d2, e) {
  if (null !== a) {
    var f2 = a.memoizedProps;
    if (Ie(f2, d2) && a.ref === b2.ref) if (dh = false, b2.pendingProps = d2 = f2, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (dh = true);
    else return b2.lanes = a.lanes, Zi(a, b2, e);
  }
  return cj(a, b2, c2, d2, e);
}
function dj(a, b2, c2) {
  var d2 = b2.pendingProps, e = d2.children, f2 = null !== a ? a.memoizedState : null;
  if ("hidden" === d2.mode) if (0 === (b2.mode & 1)) b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(ej, fj), fj |= c2;
  else {
    if (0 === (c2 & 1073741824)) return a = null !== f2 ? f2.baseLanes | c2 : c2, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b2.updateQueue = null, G(ej, fj), fj |= a, null;
    b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
    d2 = null !== f2 ? f2.baseLanes : c2;
    G(ej, fj);
    fj |= d2;
  }
  else null !== f2 ? (d2 = f2.baseLanes | c2, b2.memoizedState = null) : d2 = c2, G(ej, fj), fj |= d2;
  Xi(a, b2, e, c2);
  return b2.child;
}
function gj(a, b2) {
  var c2 = b2.ref;
  if (null === a && null !== c2 || null !== a && a.ref !== c2) b2.flags |= 512, b2.flags |= 2097152;
}
function cj(a, b2, c2, d2, e) {
  var f2 = Zf(c2) ? Xf : H$1.current;
  f2 = Yf(b2, f2);
  ch(b2, e);
  c2 = Nh(a, b2, c2, d2, f2, e);
  d2 = Sh();
  if (null !== a && !dh) return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e, Zi(a, b2, e);
  I$1 && d2 && vg(b2);
  b2.flags |= 1;
  Xi(a, b2, c2, e);
  return b2.child;
}
function hj(a, b2, c2, d2, e) {
  if (Zf(c2)) {
    var f2 = true;
    cg(b2);
  } else f2 = false;
  ch(b2, e);
  if (null === b2.stateNode) ij(a, b2), Gi(b2, c2, d2), Ii(b2, c2, d2, e), d2 = true;
  else if (null === a) {
    var g2 = b2.stateNode, h3 = b2.memoizedProps;
    g2.props = h3;
    var k2 = g2.context, l2 = c2.contextType;
    "object" === typeof l2 && null !== l2 ? l2 = eh(l2) : (l2 = Zf(c2) ? Xf : H$1.current, l2 = Yf(b2, l2));
    var m2 = c2.getDerivedStateFromProps, q2 = "function" === typeof m2 || "function" === typeof g2.getSnapshotBeforeUpdate;
    q2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h3 !== d2 || k2 !== l2) && Hi(b2, g2, d2, l2);
    jh = false;
    var r2 = b2.memoizedState;
    g2.state = r2;
    qh(b2, d2, g2, e);
    k2 = b2.memoizedState;
    h3 !== d2 || r2 !== k2 || Wf.current || jh ? ("function" === typeof m2 && (Di(b2, c2, m2, d2), k2 = b2.memoizedState), (h3 = jh || Fi(b2, c2, h3, d2, r2, k2, l2)) ? (q2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.flags |= 4194308)) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h3) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), d2 = false);
  } else {
    g2 = b2.stateNode;
    lh(a, b2);
    h3 = b2.memoizedProps;
    l2 = b2.type === b2.elementType ? h3 : Ci(b2.type, h3);
    g2.props = l2;
    q2 = b2.pendingProps;
    r2 = g2.context;
    k2 = c2.contextType;
    "object" === typeof k2 && null !== k2 ? k2 = eh(k2) : (k2 = Zf(c2) ? Xf : H$1.current, k2 = Yf(b2, k2));
    var y2 = c2.getDerivedStateFromProps;
    (m2 = "function" === typeof y2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h3 !== q2 || r2 !== k2) && Hi(b2, g2, d2, k2);
    jh = false;
    r2 = b2.memoizedState;
    g2.state = r2;
    qh(b2, d2, g2, e);
    var n2 = b2.memoizedState;
    h3 !== q2 || r2 !== n2 || Wf.current || jh ? ("function" === typeof y2 && (Di(b2, c2, y2, d2), n2 = b2.memoizedState), (l2 = jh || Fi(b2, c2, l2, d2, r2, n2, k2) || false) ? (m2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d2, n2, k2), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, n2, k2)), "function" === typeof g2.componentDidUpdate && (b2.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.flags |= 1024)) : ("function" !== typeof g2.componentDidUpdate || h3 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h3 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 1024), b2.memoizedProps = d2, b2.memoizedState = n2), g2.props = d2, g2.state = n2, g2.context = k2, d2 = l2) : ("function" !== typeof g2.componentDidUpdate || h3 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h3 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 1024), d2 = false);
  }
  return jj(a, b2, c2, d2, f2, e);
}
function jj(a, b2, c2, d2, e, f2) {
  gj(a, b2);
  var g2 = 0 !== (b2.flags & 128);
  if (!d2 && !g2) return e && dg(b2, c2, false), Zi(a, b2, f2);
  d2 = b2.stateNode;
  Wi.current = b2;
  var h3 = g2 && "function" !== typeof c2.getDerivedStateFromError ? null : d2.render();
  b2.flags |= 1;
  null !== a && g2 ? (b2.child = Ug(b2, a.child, null, f2), b2.child = Ug(b2, null, h3, f2)) : Xi(a, b2, h3, f2);
  b2.memoizedState = d2.state;
  e && dg(b2, c2, true);
  return b2.child;
}
function kj(a) {
  var b2 = a.stateNode;
  b2.pendingContext ? ag(a, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && ag(a, b2.context, false);
  yh(a, b2.containerInfo);
}
function lj(a, b2, c2, d2, e) {
  Ig();
  Jg(e);
  b2.flags |= 256;
  Xi(a, b2, c2, d2);
  return b2.child;
}
var mj = { dehydrated: null, treeContext: null, retryLane: 0 };
function nj(a) {
  return { baseLanes: a, cachePool: null, transitions: null };
}
function oj(a, b2, c2) {
  var d2 = b2.pendingProps, e = L$1.current, f2 = false, g2 = 0 !== (b2.flags & 128), h3;
  (h3 = g2) || (h3 = null !== a && null === a.memoizedState ? false : 0 !== (e & 2));
  if (h3) f2 = true, b2.flags &= -129;
  else if (null === a || null !== a.memoizedState) e |= 1;
  G(L$1, e & 1);
  if (null === a) {
    Eg(b2);
    a = b2.memoizedState;
    if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b2.mode & 1) ? b2.lanes = 1 : "$!" === a.data ? b2.lanes = 8 : b2.lanes = 1073741824, null;
    g2 = d2.children;
    a = d2.fallback;
    return f2 ? (d2 = b2.mode, f2 = b2.child, g2 = { mode: "hidden", children: g2 }, 0 === (d2 & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g2) : f2 = pj(g2, d2, 0, null), a = Tg(a, d2, c2, null), f2.return = b2, a.return = b2, f2.sibling = a, b2.child = f2, b2.child.memoizedState = nj(c2), b2.memoizedState = mj, a) : qj(b2, g2);
  }
  e = a.memoizedState;
  if (null !== e && (h3 = e.dehydrated, null !== h3)) return rj(a, b2, g2, d2, h3, e, c2);
  if (f2) {
    f2 = d2.fallback;
    g2 = b2.mode;
    e = a.child;
    h3 = e.sibling;
    var k2 = { mode: "hidden", children: d2.children };
    0 === (g2 & 1) && b2.child !== e ? (d2 = b2.child, d2.childLanes = 0, d2.pendingProps = k2, b2.deletions = null) : (d2 = Pg(e, k2), d2.subtreeFlags = e.subtreeFlags & 14680064);
    null !== h3 ? f2 = Pg(h3, f2) : (f2 = Tg(f2, g2, c2, null), f2.flags |= 2);
    f2.return = b2;
    d2.return = b2;
    d2.sibling = f2;
    b2.child = d2;
    d2 = f2;
    f2 = b2.child;
    g2 = a.child.memoizedState;
    g2 = null === g2 ? nj(c2) : { baseLanes: g2.baseLanes | c2, cachePool: null, transitions: g2.transitions };
    f2.memoizedState = g2;
    f2.childLanes = a.childLanes & ~c2;
    b2.memoizedState = mj;
    return d2;
  }
  f2 = a.child;
  a = f2.sibling;
  d2 = Pg(f2, { mode: "visible", children: d2.children });
  0 === (b2.mode & 1) && (d2.lanes = c2);
  d2.return = b2;
  d2.sibling = null;
  null !== a && (c2 = b2.deletions, null === c2 ? (b2.deletions = [a], b2.flags |= 16) : c2.push(a));
  b2.child = d2;
  b2.memoizedState = null;
  return d2;
}
function qj(a, b2) {
  b2 = pj({ mode: "visible", children: b2 }, a.mode, 0, null);
  b2.return = a;
  return a.child = b2;
}
function sj(a, b2, c2, d2) {
  null !== d2 && Jg(d2);
  Ug(b2, a.child, null, c2);
  a = qj(b2, b2.pendingProps.children);
  a.flags |= 2;
  b2.memoizedState = null;
  return a;
}
function rj(a, b2, c2, d2, e, f2, g2) {
  if (c2) {
    if (b2.flags & 256) return b2.flags &= -257, d2 = Ki(Error(p$1(422))), sj(a, b2, g2, d2);
    if (null !== b2.memoizedState) return b2.child = a.child, b2.flags |= 128, null;
    f2 = d2.fallback;
    e = b2.mode;
    d2 = pj({ mode: "visible", children: d2.children }, e, 0, null);
    f2 = Tg(f2, e, g2, null);
    f2.flags |= 2;
    d2.return = b2;
    f2.return = b2;
    d2.sibling = f2;
    b2.child = d2;
    0 !== (b2.mode & 1) && Ug(b2, a.child, null, g2);
    b2.child.memoizedState = nj(g2);
    b2.memoizedState = mj;
    return f2;
  }
  if (0 === (b2.mode & 1)) return sj(a, b2, g2, null);
  if ("$!" === e.data) {
    d2 = e.nextSibling && e.nextSibling.dataset;
    if (d2) var h3 = d2.dgst;
    d2 = h3;
    f2 = Error(p$1(419));
    d2 = Ki(f2, d2, void 0);
    return sj(a, b2, g2, d2);
  }
  h3 = 0 !== (g2 & a.childLanes);
  if (dh || h3) {
    d2 = Q$1;
    if (null !== d2) {
      switch (g2 & -g2) {
        case 4:
          e = 2;
          break;
        case 16:
          e = 8;
          break;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          e = 32;
          break;
        case 536870912:
          e = 268435456;
          break;
        default:
          e = 0;
      }
      e = 0 !== (e & (d2.suspendedLanes | g2)) ? 0 : e;
      0 !== e && e !== f2.retryLane && (f2.retryLane = e, ih(a, e), gi(d2, a, e, -1));
    }
    tj();
    d2 = Ki(Error(p$1(421)));
    return sj(a, b2, g2, d2);
  }
  if ("$?" === e.data) return b2.flags |= 128, b2.child = a.child, b2 = uj.bind(null, a), e._reactRetry = b2, null;
  a = f2.treeContext;
  yg = Lf(e.nextSibling);
  xg = b2;
  I$1 = true;
  zg = null;
  null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b2);
  b2 = qj(b2, d2.children);
  b2.flags |= 4096;
  return b2;
}
function vj(a, b2, c2) {
  a.lanes |= b2;
  var d2 = a.alternate;
  null !== d2 && (d2.lanes |= b2);
  bh(a.return, b2, c2);
}
function wj(a, b2, c2, d2, e) {
  var f2 = a.memoizedState;
  null === f2 ? a.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c2, tailMode: e } : (f2.isBackwards = b2, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d2, f2.tail = c2, f2.tailMode = e);
}
function xj(a, b2, c2) {
  var d2 = b2.pendingProps, e = d2.revealOrder, f2 = d2.tail;
  Xi(a, b2, d2.children, c2);
  d2 = L$1.current;
  if (0 !== (d2 & 2)) d2 = d2 & 1 | 2, b2.flags |= 128;
  else {
    if (null !== a && 0 !== (a.flags & 128)) a: for (a = b2.child; null !== a; ) {
      if (13 === a.tag) null !== a.memoizedState && vj(a, c2, b2);
      else if (19 === a.tag) vj(a, c2, b2);
      else if (null !== a.child) {
        a.child.return = a;
        a = a.child;
        continue;
      }
      if (a === b2) break a;
      for (; null === a.sibling; ) {
        if (null === a.return || a.return === b2) break a;
        a = a.return;
      }
      a.sibling.return = a.return;
      a = a.sibling;
    }
    d2 &= 1;
  }
  G(L$1, d2);
  if (0 === (b2.mode & 1)) b2.memoizedState = null;
  else switch (e) {
    case "forwards":
      c2 = b2.child;
      for (e = null; null !== c2; ) a = c2.alternate, null !== a && null === Ch(a) && (e = c2), c2 = c2.sibling;
      c2 = e;
      null === c2 ? (e = b2.child, b2.child = null) : (e = c2.sibling, c2.sibling = null);
      wj(b2, false, e, c2, f2);
      break;
    case "backwards":
      c2 = null;
      e = b2.child;
      for (b2.child = null; null !== e; ) {
        a = e.alternate;
        if (null !== a && null === Ch(a)) {
          b2.child = e;
          break;
        }
        a = e.sibling;
        e.sibling = c2;
        c2 = e;
        e = a;
      }
      wj(b2, true, c2, null, f2);
      break;
    case "together":
      wj(b2, false, null, null, void 0);
      break;
    default:
      b2.memoizedState = null;
  }
  return b2.child;
}
function ij(a, b2) {
  0 === (b2.mode & 1) && null !== a && (a.alternate = null, b2.alternate = null, b2.flags |= 2);
}
function Zi(a, b2, c2) {
  null !== a && (b2.dependencies = a.dependencies);
  rh |= b2.lanes;
  if (0 === (c2 & b2.childLanes)) return null;
  if (null !== a && b2.child !== a.child) throw Error(p$1(153));
  if (null !== b2.child) {
    a = b2.child;
    c2 = Pg(a, a.pendingProps);
    b2.child = c2;
    for (c2.return = b2; null !== a.sibling; ) a = a.sibling, c2 = c2.sibling = Pg(a, a.pendingProps), c2.return = b2;
    c2.sibling = null;
  }
  return b2.child;
}
function yj(a, b2, c2) {
  switch (b2.tag) {
    case 3:
      kj(b2);
      Ig();
      break;
    case 5:
      Ah(b2);
      break;
    case 1:
      Zf(b2.type) && cg(b2);
      break;
    case 4:
      yh(b2, b2.stateNode.containerInfo);
      break;
    case 10:
      var d2 = b2.type._context, e = b2.memoizedProps.value;
      G(Wg, d2._currentValue);
      d2._currentValue = e;
      break;
    case 13:
      d2 = b2.memoizedState;
      if (null !== d2) {
        if (null !== d2.dehydrated) return G(L$1, L$1.current & 1), b2.flags |= 128, null;
        if (0 !== (c2 & b2.child.childLanes)) return oj(a, b2, c2);
        G(L$1, L$1.current & 1);
        a = Zi(a, b2, c2);
        return null !== a ? a.sibling : null;
      }
      G(L$1, L$1.current & 1);
      break;
    case 19:
      d2 = 0 !== (c2 & b2.childLanes);
      if (0 !== (a.flags & 128)) {
        if (d2) return xj(a, b2, c2);
        b2.flags |= 128;
      }
      e = b2.memoizedState;
      null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
      G(L$1, L$1.current);
      if (d2) break;
      else return null;
    case 22:
    case 23:
      return b2.lanes = 0, dj(a, b2, c2);
  }
  return Zi(a, b2, c2);
}
var zj, Aj, Bj, Cj;
zj = function(a, b2) {
  for (var c2 = b2.child; null !== c2; ) {
    if (5 === c2.tag || 6 === c2.tag) a.appendChild(c2.stateNode);
    else if (4 !== c2.tag && null !== c2.child) {
      c2.child.return = c2;
      c2 = c2.child;
      continue;
    }
    if (c2 === b2) break;
    for (; null === c2.sibling; ) {
      if (null === c2.return || c2.return === b2) return;
      c2 = c2.return;
    }
    c2.sibling.return = c2.return;
    c2 = c2.sibling;
  }
};
Aj = function() {
};
Bj = function(a, b2, c2, d2) {
  var e = a.memoizedProps;
  if (e !== d2) {
    a = b2.stateNode;
    xh(uh.current);
    var f2 = null;
    switch (c2) {
      case "input":
        e = Ya(a, e);
        d2 = Ya(a, d2);
        f2 = [];
        break;
      case "select":
        e = A$1({}, e, { value: void 0 });
        d2 = A$1({}, d2, { value: void 0 });
        f2 = [];
        break;
      case "textarea":
        e = gb(a, e);
        d2 = gb(a, d2);
        f2 = [];
        break;
      default:
        "function" !== typeof e.onClick && "function" === typeof d2.onClick && (a.onclick = Bf);
    }
    ub(c2, d2);
    var g2;
    c2 = null;
    for (l2 in e) if (!d2.hasOwnProperty(l2) && e.hasOwnProperty(l2) && null != e[l2]) if ("style" === l2) {
      var h3 = e[l2];
      for (g2 in h3) h3.hasOwnProperty(g2) && (c2 || (c2 = {}), c2[g2] = "");
    } else "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
    for (l2 in d2) {
      var k2 = d2[l2];
      h3 = null != e ? e[l2] : void 0;
      if (d2.hasOwnProperty(l2) && k2 !== h3 && (null != k2 || null != h3)) if ("style" === l2) if (h3) {
        for (g2 in h3) !h3.hasOwnProperty(g2) || k2 && k2.hasOwnProperty(g2) || (c2 || (c2 = {}), c2[g2] = "");
        for (g2 in k2) k2.hasOwnProperty(g2) && h3[g2] !== k2[g2] && (c2 || (c2 = {}), c2[g2] = k2[g2]);
      } else c2 || (f2 || (f2 = []), f2.push(
        l2,
        c2
      )), c2 = k2;
      else "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h3 = h3 ? h3.__html : void 0, null != k2 && h3 !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D$1("scroll", a), f2 || h3 === k2 || (f2 = [])) : (f2 = f2 || []).push(l2, k2));
    }
    c2 && (f2 = f2 || []).push("style", c2);
    var l2 = f2;
    if (b2.updateQueue = l2) b2.flags |= 4;
  }
};
Cj = function(a, b2, c2, d2) {
  c2 !== d2 && (b2.flags |= 4);
};
function Dj(a, b2) {
  if (!I$1) switch (a.tailMode) {
    case "hidden":
      b2 = a.tail;
      for (var c2 = null; null !== b2; ) null !== b2.alternate && (c2 = b2), b2 = b2.sibling;
      null === c2 ? a.tail = null : c2.sibling = null;
      break;
    case "collapsed":
      c2 = a.tail;
      for (var d2 = null; null !== c2; ) null !== c2.alternate && (d2 = c2), c2 = c2.sibling;
      null === d2 ? b2 || null === a.tail ? a.tail = null : a.tail.sibling = null : d2.sibling = null;
  }
}
function S$1(a) {
  var b2 = null !== a.alternate && a.alternate.child === a.child, c2 = 0, d2 = 0;
  if (b2) for (var e = a.child; null !== e; ) c2 |= e.lanes | e.childLanes, d2 |= e.subtreeFlags & 14680064, d2 |= e.flags & 14680064, e.return = a, e = e.sibling;
  else for (e = a.child; null !== e; ) c2 |= e.lanes | e.childLanes, d2 |= e.subtreeFlags, d2 |= e.flags, e.return = a, e = e.sibling;
  a.subtreeFlags |= d2;
  a.childLanes = c2;
  return b2;
}
function Ej(a, b2, c2) {
  var d2 = b2.pendingProps;
  wg(b2);
  switch (b2.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return S$1(b2), null;
    case 1:
      return Zf(b2.type) && $f(), S$1(b2), null;
    case 3:
      d2 = b2.stateNode;
      zh();
      E$1(Wf);
      E$1(H$1);
      Eh();
      d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
      if (null === a || null === a.child) Gg(b2) ? b2.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b2.flags & 256) || (b2.flags |= 1024, null !== zg && (Fj(zg), zg = null));
      Aj(a, b2);
      S$1(b2);
      return null;
    case 5:
      Bh(b2);
      var e = xh(wh.current);
      c2 = b2.type;
      if (null !== a && null != b2.stateNode) Bj(a, b2, c2, d2, e), a.ref !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
      else {
        if (!d2) {
          if (null === b2.stateNode) throw Error(p$1(166));
          S$1(b2);
          return null;
        }
        a = xh(uh.current);
        if (Gg(b2)) {
          d2 = b2.stateNode;
          c2 = b2.type;
          var f2 = b2.memoizedProps;
          d2[Of] = b2;
          d2[Pf] = f2;
          a = 0 !== (b2.mode & 1);
          switch (c2) {
            case "dialog":
              D$1("cancel", d2);
              D$1("close", d2);
              break;
            case "iframe":
            case "object":
            case "embed":
              D$1("load", d2);
              break;
            case "video":
            case "audio":
              for (e = 0; e < lf.length; e++) D$1(lf[e], d2);
              break;
            case "source":
              D$1("error", d2);
              break;
            case "img":
            case "image":
            case "link":
              D$1(
                "error",
                d2
              );
              D$1("load", d2);
              break;
            case "details":
              D$1("toggle", d2);
              break;
            case "input":
              Za(d2, f2);
              D$1("invalid", d2);
              break;
            case "select":
              d2._wrapperState = { wasMultiple: !!f2.multiple };
              D$1("invalid", d2);
              break;
            case "textarea":
              hb(d2, f2), D$1("invalid", d2);
          }
          ub(c2, f2);
          e = null;
          for (var g2 in f2) if (f2.hasOwnProperty(g2)) {
            var h3 = f2[g2];
            "children" === g2 ? "string" === typeof h3 ? d2.textContent !== h3 && (true !== f2.suppressHydrationWarning && Af(d2.textContent, h3, a), e = ["children", h3]) : "number" === typeof h3 && d2.textContent !== "" + h3 && (true !== f2.suppressHydrationWarning && Af(
              d2.textContent,
              h3,
              a
            ), e = ["children", "" + h3]) : ea.hasOwnProperty(g2) && null != h3 && "onScroll" === g2 && D$1("scroll", d2);
          }
          switch (c2) {
            case "input":
              Va(d2);
              db(d2, f2, true);
              break;
            case "textarea":
              Va(d2);
              jb(d2);
              break;
            case "select":
            case "option":
              break;
            default:
              "function" === typeof f2.onClick && (d2.onclick = Bf);
          }
          d2 = e;
          b2.updateQueue = d2;
          null !== d2 && (b2.flags |= 4);
        } else {
          g2 = 9 === e.nodeType ? e : e.ownerDocument;
          "http://www.w3.org/1999/xhtml" === a && (a = kb(c2));
          "http://www.w3.org/1999/xhtml" === a ? "script" === c2 ? (a = g2.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d2.is ? a = g2.createElement(c2, { is: d2.is }) : (a = g2.createElement(c2), "select" === c2 && (g2 = a, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a = g2.createElementNS(a, c2);
          a[Of] = b2;
          a[Pf] = d2;
          zj(a, b2, false, false);
          b2.stateNode = a;
          a: {
            g2 = vb(c2, d2);
            switch (c2) {
              case "dialog":
                D$1("cancel", a);
                D$1("close", a);
                e = d2;
                break;
              case "iframe":
              case "object":
              case "embed":
                D$1("load", a);
                e = d2;
                break;
              case "video":
              case "audio":
                for (e = 0; e < lf.length; e++) D$1(lf[e], a);
                e = d2;
                break;
              case "source":
                D$1("error", a);
                e = d2;
                break;
              case "img":
              case "image":
              case "link":
                D$1(
                  "error",
                  a
                );
                D$1("load", a);
                e = d2;
                break;
              case "details":
                D$1("toggle", a);
                e = d2;
                break;
              case "input":
                Za(a, d2);
                e = Ya(a, d2);
                D$1("invalid", a);
                break;
              case "option":
                e = d2;
                break;
              case "select":
                a._wrapperState = { wasMultiple: !!d2.multiple };
                e = A$1({}, d2, { value: void 0 });
                D$1("invalid", a);
                break;
              case "textarea":
                hb(a, d2);
                e = gb(a, d2);
                D$1("invalid", a);
                break;
              default:
                e = d2;
            }
            ub(c2, e);
            h3 = e;
            for (f2 in h3) if (h3.hasOwnProperty(f2)) {
              var k2 = h3[f2];
              "style" === f2 ? sb(a, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c2 || "" !== k2) && ob(a, k2) : "number" === typeof k2 && ob(a, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && D$1("scroll", a) : null != k2 && ta(a, f2, k2, g2));
            }
            switch (c2) {
              case "input":
                Va(a);
                db(a, d2, false);
                break;
              case "textarea":
                Va(a);
                jb(a);
                break;
              case "option":
                null != d2.value && a.setAttribute("value", "" + Sa(d2.value));
                break;
              case "select":
                a.multiple = !!d2.multiple;
                f2 = d2.value;
                null != f2 ? fb(a, !!d2.multiple, f2, false) : null != d2.defaultValue && fb(
                  a,
                  !!d2.multiple,
                  d2.defaultValue,
                  true
                );
                break;
              default:
                "function" === typeof e.onClick && (a.onclick = Bf);
            }
            switch (c2) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                d2 = !!d2.autoFocus;
                break a;
              case "img":
                d2 = true;
                break a;
              default:
                d2 = false;
            }
          }
          d2 && (b2.flags |= 4);
        }
        null !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
      }
      S$1(b2);
      return null;
    case 6:
      if (a && null != b2.stateNode) Cj(a, b2, a.memoizedProps, d2);
      else {
        if ("string" !== typeof d2 && null === b2.stateNode) throw Error(p$1(166));
        c2 = xh(wh.current);
        xh(uh.current);
        if (Gg(b2)) {
          d2 = b2.stateNode;
          c2 = b2.memoizedProps;
          d2[Of] = b2;
          if (f2 = d2.nodeValue !== c2) {
            if (a = xg, null !== a) switch (a.tag) {
              case 3:
                Af(d2.nodeValue, c2, 0 !== (a.mode & 1));
                break;
              case 5:
                true !== a.memoizedProps.suppressHydrationWarning && Af(d2.nodeValue, c2, 0 !== (a.mode & 1));
            }
          }
          f2 && (b2.flags |= 4);
        } else d2 = (9 === c2.nodeType ? c2 : c2.ownerDocument).createTextNode(d2), d2[Of] = b2, b2.stateNode = d2;
      }
      S$1(b2);
      return null;
    case 13:
      E$1(L$1);
      d2 = b2.memoizedState;
      if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
        if (I$1 && null !== yg && 0 !== (b2.mode & 1) && 0 === (b2.flags & 128)) Hg(), Ig(), b2.flags |= 98560, f2 = false;
        else if (f2 = Gg(b2), null !== d2 && null !== d2.dehydrated) {
          if (null === a) {
            if (!f2) throw Error(p$1(318));
            f2 = b2.memoizedState;
            f2 = null !== f2 ? f2.dehydrated : null;
            if (!f2) throw Error(p$1(317));
            f2[Of] = b2;
          } else Ig(), 0 === (b2.flags & 128) && (b2.memoizedState = null), b2.flags |= 4;
          S$1(b2);
          f2 = false;
        } else null !== zg && (Fj(zg), zg = null), f2 = true;
        if (!f2) return b2.flags & 65536 ? b2 : null;
      }
      if (0 !== (b2.flags & 128)) return b2.lanes = c2, b2;
      d2 = null !== d2;
      d2 !== (null !== a && null !== a.memoizedState) && d2 && (b2.child.flags |= 8192, 0 !== (b2.mode & 1) && (null === a || 0 !== (L$1.current & 1) ? 0 === T$1 && (T$1 = 3) : tj()));
      null !== b2.updateQueue && (b2.flags |= 4);
      S$1(b2);
      return null;
    case 4:
      return zh(), Aj(a, b2), null === a && sf(b2.stateNode.containerInfo), S$1(b2), null;
    case 10:
      return ah(b2.type._context), S$1(b2), null;
    case 17:
      return Zf(b2.type) && $f(), S$1(b2), null;
    case 19:
      E$1(L$1);
      f2 = b2.memoizedState;
      if (null === f2) return S$1(b2), null;
      d2 = 0 !== (b2.flags & 128);
      g2 = f2.rendering;
      if (null === g2) if (d2) Dj(f2, false);
      else {
        if (0 !== T$1 || null !== a && 0 !== (a.flags & 128)) for (a = b2.child; null !== a; ) {
          g2 = Ch(a);
          if (null !== g2) {
            b2.flags |= 128;
            Dj(f2, false);
            d2 = g2.updateQueue;
            null !== d2 && (b2.updateQueue = d2, b2.flags |= 4);
            b2.subtreeFlags = 0;
            d2 = c2;
            for (c2 = b2.child; null !== c2; ) f2 = c2, a = d2, f2.flags &= 14680066, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a = g2.dependencies, f2.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c2 = c2.sibling;
            G(L$1, L$1.current & 1 | 2);
            return b2.child;
          }
          a = a.sibling;
        }
        null !== f2.tail && B$1() > Gj && (b2.flags |= 128, d2 = true, Dj(f2, false), b2.lanes = 4194304);
      }
      else {
        if (!d2) if (a = Ch(g2), null !== a) {
          if (b2.flags |= 128, d2 = true, c2 = a.updateQueue, null !== c2 && (b2.updateQueue = c2, b2.flags |= 4), Dj(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g2.alternate && !I$1) return S$1(b2), null;
        } else 2 * B$1() - f2.renderingStartTime > Gj && 1073741824 !== c2 && (b2.flags |= 128, d2 = true, Dj(f2, false), b2.lanes = 4194304);
        f2.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c2 = f2.last, null !== c2 ? c2.sibling = g2 : b2.child = g2, f2.last = g2);
      }
      if (null !== f2.tail) return b2 = f2.tail, f2.rendering = b2, f2.tail = b2.sibling, f2.renderingStartTime = B$1(), b2.sibling = null, c2 = L$1.current, G(L$1, d2 ? c2 & 1 | 2 : c2 & 1), b2;
      S$1(b2);
      return null;
    case 22:
    case 23:
      return Hj(), d2 = null !== b2.memoizedState, null !== a && null !== a.memoizedState !== d2 && (b2.flags |= 8192), d2 && 0 !== (b2.mode & 1) ? 0 !== (fj & 1073741824) && (S$1(b2), b2.subtreeFlags & 6 && (b2.flags |= 8192)) : S$1(b2), null;
    case 24:
      return null;
    case 25:
      return null;
  }
  throw Error(p$1(156, b2.tag));
}
function Ij(a, b2) {
  wg(b2);
  switch (b2.tag) {
    case 1:
      return Zf(b2.type) && $f(), a = b2.flags, a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
    case 3:
      return zh(), E$1(Wf), E$1(H$1), Eh(), a = b2.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b2.flags = a & -65537 | 128, b2) : null;
    case 5:
      return Bh(b2), null;
    case 13:
      E$1(L$1);
      a = b2.memoizedState;
      if (null !== a && null !== a.dehydrated) {
        if (null === b2.alternate) throw Error(p$1(340));
        Ig();
      }
      a = b2.flags;
      return a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
    case 19:
      return E$1(L$1), null;
    case 4:
      return zh(), null;
    case 10:
      return ah(b2.type._context), null;
    case 22:
    case 23:
      return Hj(), null;
    case 24:
      return null;
    default:
      return null;
  }
}
var Jj = false, U = false, Kj = "function" === typeof WeakSet ? WeakSet : Set, V = null;
function Lj(a, b2) {
  var c2 = a.ref;
  if (null !== c2) if ("function" === typeof c2) try {
    c2(null);
  } catch (d2) {
    W(a, b2, d2);
  }
  else c2.current = null;
}
function Mj(a, b2, c2) {
  try {
    c2();
  } catch (d2) {
    W(a, b2, d2);
  }
}
var Nj = false;
function Oj(a, b2) {
  Cf = dd;
  a = Me();
  if (Ne(a)) {
    if ("selectionStart" in a) var c2 = { start: a.selectionStart, end: a.selectionEnd };
    else a: {
      c2 = (c2 = a.ownerDocument) && c2.defaultView || window;
      var d2 = c2.getSelection && c2.getSelection();
      if (d2 && 0 !== d2.rangeCount) {
        c2 = d2.anchorNode;
        var e = d2.anchorOffset, f2 = d2.focusNode;
        d2 = d2.focusOffset;
        try {
          c2.nodeType, f2.nodeType;
        } catch (F2) {
          c2 = null;
          break a;
        }
        var g2 = 0, h3 = -1, k2 = -1, l2 = 0, m2 = 0, q2 = a, r2 = null;
        b: for (; ; ) {
          for (var y2; ; ) {
            q2 !== c2 || 0 !== e && 3 !== q2.nodeType || (h3 = g2 + e);
            q2 !== f2 || 0 !== d2 && 3 !== q2.nodeType || (k2 = g2 + d2);
            3 === q2.nodeType && (g2 += q2.nodeValue.length);
            if (null === (y2 = q2.firstChild)) break;
            r2 = q2;
            q2 = y2;
          }
          for (; ; ) {
            if (q2 === a) break b;
            r2 === c2 && ++l2 === e && (h3 = g2);
            r2 === f2 && ++m2 === d2 && (k2 = g2);
            if (null !== (y2 = q2.nextSibling)) break;
            q2 = r2;
            r2 = q2.parentNode;
          }
          q2 = y2;
        }
        c2 = -1 === h3 || -1 === k2 ? null : { start: h3, end: k2 };
      } else c2 = null;
    }
    c2 = c2 || { start: 0, end: 0 };
  } else c2 = null;
  Df = { focusedElem: a, selectionRange: c2 };
  dd = false;
  for (V = b2; null !== V; ) if (b2 = V, a = b2.child, 0 !== (b2.subtreeFlags & 1028) && null !== a) a.return = b2, V = a;
  else for (; null !== V; ) {
    b2 = V;
    try {
      var n2 = b2.alternate;
      if (0 !== (b2.flags & 1024)) switch (b2.tag) {
        case 0:
        case 11:
        case 15:
          break;
        case 1:
          if (null !== n2) {
            var t2 = n2.memoizedProps, J2 = n2.memoizedState, x2 = b2.stateNode, w2 = x2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? t2 : Ci(b2.type, t2), J2);
            x2.__reactInternalSnapshotBeforeUpdate = w2;
          }
          break;
        case 3:
          var u2 = b2.stateNode.containerInfo;
          1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
          break;
        case 5:
        case 6:
        case 4:
        case 17:
          break;
        default:
          throw Error(p$1(163));
      }
    } catch (F2) {
      W(b2, b2.return, F2);
    }
    a = b2.sibling;
    if (null !== a) {
      a.return = b2.return;
      V = a;
      break;
    }
    V = b2.return;
  }
  n2 = Nj;
  Nj = false;
  return n2;
}
function Pj(a, b2, c2) {
  var d2 = b2.updateQueue;
  d2 = null !== d2 ? d2.lastEffect : null;
  if (null !== d2) {
    var e = d2 = d2.next;
    do {
      if ((e.tag & a) === a) {
        var f2 = e.destroy;
        e.destroy = void 0;
        void 0 !== f2 && Mj(b2, c2, f2);
      }
      e = e.next;
    } while (e !== d2);
  }
}
function Qj(a, b2) {
  b2 = b2.updateQueue;
  b2 = null !== b2 ? b2.lastEffect : null;
  if (null !== b2) {
    var c2 = b2 = b2.next;
    do {
      if ((c2.tag & a) === a) {
        var d2 = c2.create;
        c2.destroy = d2();
      }
      c2 = c2.next;
    } while (c2 !== b2);
  }
}
function Rj(a) {
  var b2 = a.ref;
  if (null !== b2) {
    var c2 = a.stateNode;
    switch (a.tag) {
      case 5:
        a = c2;
        break;
      default:
        a = c2;
    }
    "function" === typeof b2 ? b2(a) : b2.current = a;
  }
}
function Sj(a) {
  var b2 = a.alternate;
  null !== b2 && (a.alternate = null, Sj(b2));
  a.child = null;
  a.deletions = null;
  a.sibling = null;
  5 === a.tag && (b2 = a.stateNode, null !== b2 && (delete b2[Of], delete b2[Pf], delete b2[of], delete b2[Qf], delete b2[Rf]));
  a.stateNode = null;
  a.return = null;
  a.dependencies = null;
  a.memoizedProps = null;
  a.memoizedState = null;
  a.pendingProps = null;
  a.stateNode = null;
  a.updateQueue = null;
}
function Tj(a) {
  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}
function Uj(a) {
  a: for (; ; ) {
    for (; null === a.sibling; ) {
      if (null === a.return || Tj(a.return)) return null;
      a = a.return;
    }
    a.sibling.return = a.return;
    for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
      if (a.flags & 2) continue a;
      if (null === a.child || 4 === a.tag) continue a;
      else a.child.return = a, a = a.child;
    }
    if (!(a.flags & 2)) return a.stateNode;
  }
}
function Vj(a, b2, c2) {
  var d2 = a.tag;
  if (5 === d2 || 6 === d2) a = a.stateNode, b2 ? 8 === c2.nodeType ? c2.parentNode.insertBefore(a, b2) : c2.insertBefore(a, b2) : (8 === c2.nodeType ? (b2 = c2.parentNode, b2.insertBefore(a, c2)) : (b2 = c2, b2.appendChild(a)), c2 = c2._reactRootContainer, null !== c2 && void 0 !== c2 || null !== b2.onclick || (b2.onclick = Bf));
  else if (4 !== d2 && (a = a.child, null !== a)) for (Vj(a, b2, c2), a = a.sibling; null !== a; ) Vj(a, b2, c2), a = a.sibling;
}
function Wj(a, b2, c2) {
  var d2 = a.tag;
  if (5 === d2 || 6 === d2) a = a.stateNode, b2 ? c2.insertBefore(a, b2) : c2.appendChild(a);
  else if (4 !== d2 && (a = a.child, null !== a)) for (Wj(a, b2, c2), a = a.sibling; null !== a; ) Wj(a, b2, c2), a = a.sibling;
}
var X$1 = null, Xj = false;
function Yj(a, b2, c2) {
  for (c2 = c2.child; null !== c2; ) Zj(a, b2, c2), c2 = c2.sibling;
}
function Zj(a, b2, c2) {
  if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
    lc.onCommitFiberUnmount(kc, c2);
  } catch (h3) {
  }
  switch (c2.tag) {
    case 5:
      U || Lj(c2, b2);
    case 6:
      var d2 = X$1, e = Xj;
      X$1 = null;
      Yj(a, b2, c2);
      X$1 = d2;
      Xj = e;
      null !== X$1 && (Xj ? (a = X$1, c2 = c2.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c2) : a.removeChild(c2)) : X$1.removeChild(c2.stateNode));
      break;
    case 18:
      null !== X$1 && (Xj ? (a = X$1, c2 = c2.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c2) : 1 === a.nodeType && Kf(a, c2), bd(a)) : Kf(X$1, c2.stateNode));
      break;
    case 4:
      d2 = X$1;
      e = Xj;
      X$1 = c2.stateNode.containerInfo;
      Xj = true;
      Yj(a, b2, c2);
      X$1 = d2;
      Xj = e;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      if (!U && (d2 = c2.updateQueue, null !== d2 && (d2 = d2.lastEffect, null !== d2))) {
        e = d2 = d2.next;
        do {
          var f2 = e, g2 = f2.destroy;
          f2 = f2.tag;
          void 0 !== g2 && (0 !== (f2 & 2) ? Mj(c2, b2, g2) : 0 !== (f2 & 4) && Mj(c2, b2, g2));
          e = e.next;
        } while (e !== d2);
      }
      Yj(a, b2, c2);
      break;
    case 1:
      if (!U && (Lj(c2, b2), d2 = c2.stateNode, "function" === typeof d2.componentWillUnmount)) try {
        d2.props = c2.memoizedProps, d2.state = c2.memoizedState, d2.componentWillUnmount();
      } catch (h3) {
        W(c2, b2, h3);
      }
      Yj(a, b2, c2);
      break;
    case 21:
      Yj(a, b2, c2);
      break;
    case 22:
      c2.mode & 1 ? (U = (d2 = U) || null !== c2.memoizedState, Yj(a, b2, c2), U = d2) : Yj(a, b2, c2);
      break;
    default:
      Yj(a, b2, c2);
  }
}
function ak(a) {
  var b2 = a.updateQueue;
  if (null !== b2) {
    a.updateQueue = null;
    var c2 = a.stateNode;
    null === c2 && (c2 = a.stateNode = new Kj());
    b2.forEach(function(b3) {
      var d2 = bk.bind(null, a, b3);
      c2.has(b3) || (c2.add(b3), b3.then(d2, d2));
    });
  }
}
function ck(a, b2) {
  var c2 = b2.deletions;
  if (null !== c2) for (var d2 = 0; d2 < c2.length; d2++) {
    var e = c2[d2];
    try {
      var f2 = a, g2 = b2, h3 = g2;
      a: for (; null !== h3; ) {
        switch (h3.tag) {
          case 5:
            X$1 = h3.stateNode;
            Xj = false;
            break a;
          case 3:
            X$1 = h3.stateNode.containerInfo;
            Xj = true;
            break a;
          case 4:
            X$1 = h3.stateNode.containerInfo;
            Xj = true;
            break a;
        }
        h3 = h3.return;
      }
      if (null === X$1) throw Error(p$1(160));
      Zj(f2, g2, e);
      X$1 = null;
      Xj = false;
      var k2 = e.alternate;
      null !== k2 && (k2.return = null);
      e.return = null;
    } catch (l2) {
      W(e, b2, l2);
    }
  }
  if (b2.subtreeFlags & 12854) for (b2 = b2.child; null !== b2; ) dk(b2, a), b2 = b2.sibling;
}
function dk(a, b2) {
  var c2 = a.alternate, d2 = a.flags;
  switch (a.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      ck(b2, a);
      ek(a);
      if (d2 & 4) {
        try {
          Pj(3, a, a.return), Qj(3, a);
        } catch (t2) {
          W(a, a.return, t2);
        }
        try {
          Pj(5, a, a.return);
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      break;
    case 1:
      ck(b2, a);
      ek(a);
      d2 & 512 && null !== c2 && Lj(c2, c2.return);
      break;
    case 5:
      ck(b2, a);
      ek(a);
      d2 & 512 && null !== c2 && Lj(c2, c2.return);
      if (a.flags & 32) {
        var e = a.stateNode;
        try {
          ob(e, "");
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      if (d2 & 4 && (e = a.stateNode, null != e)) {
        var f2 = a.memoizedProps, g2 = null !== c2 ? c2.memoizedProps : f2, h3 = a.type, k2 = a.updateQueue;
        a.updateQueue = null;
        if (null !== k2) try {
          "input" === h3 && "radio" === f2.type && null != f2.name && ab(e, f2);
          vb(h3, g2);
          var l2 = vb(h3, f2);
          for (g2 = 0; g2 < k2.length; g2 += 2) {
            var m2 = k2[g2], q2 = k2[g2 + 1];
            "style" === m2 ? sb(e, q2) : "dangerouslySetInnerHTML" === m2 ? nb(e, q2) : "children" === m2 ? ob(e, q2) : ta(e, m2, q2, l2);
          }
          switch (h3) {
            case "input":
              bb(e, f2);
              break;
            case "textarea":
              ib(e, f2);
              break;
            case "select":
              var r2 = e._wrapperState.wasMultiple;
              e._wrapperState.wasMultiple = !!f2.multiple;
              var y2 = f2.value;
              null != y2 ? fb(e, !!f2.multiple, y2, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                e,
                !!f2.multiple,
                f2.defaultValue,
                true
              ) : fb(e, !!f2.multiple, f2.multiple ? [] : "", false));
          }
          e[Pf] = f2;
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      break;
    case 6:
      ck(b2, a);
      ek(a);
      if (d2 & 4) {
        if (null === a.stateNode) throw Error(p$1(162));
        e = a.stateNode;
        f2 = a.memoizedProps;
        try {
          e.nodeValue = f2;
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      break;
    case 3:
      ck(b2, a);
      ek(a);
      if (d2 & 4 && null !== c2 && c2.memoizedState.isDehydrated) try {
        bd(b2.containerInfo);
      } catch (t2) {
        W(a, a.return, t2);
      }
      break;
    case 4:
      ck(b2, a);
      ek(a);
      break;
    case 13:
      ck(b2, a);
      ek(a);
      e = a.child;
      e.flags & 8192 && (f2 = null !== e.memoizedState, e.stateNode.isHidden = f2, !f2 || null !== e.alternate && null !== e.alternate.memoizedState || (fk = B$1()));
      d2 & 4 && ak(a);
      break;
    case 22:
      m2 = null !== c2 && null !== c2.memoizedState;
      a.mode & 1 ? (U = (l2 = U) || m2, ck(b2, a), U = l2) : ck(b2, a);
      ek(a);
      if (d2 & 8192) {
        l2 = null !== a.memoizedState;
        if ((a.stateNode.isHidden = l2) && !m2 && 0 !== (a.mode & 1)) for (V = a, m2 = a.child; null !== m2; ) {
          for (q2 = V = m2; null !== V; ) {
            r2 = V;
            y2 = r2.child;
            switch (r2.tag) {
              case 0:
              case 11:
              case 14:
              case 15:
                Pj(4, r2, r2.return);
                break;
              case 1:
                Lj(r2, r2.return);
                var n2 = r2.stateNode;
                if ("function" === typeof n2.componentWillUnmount) {
                  d2 = r2;
                  c2 = r2.return;
                  try {
                    b2 = d2, n2.props = b2.memoizedProps, n2.state = b2.memoizedState, n2.componentWillUnmount();
                  } catch (t2) {
                    W(d2, c2, t2);
                  }
                }
                break;
              case 5:
                Lj(r2, r2.return);
                break;
              case 22:
                if (null !== r2.memoizedState) {
                  gk(q2);
                  continue;
                }
            }
            null !== y2 ? (y2.return = r2, V = y2) : gk(q2);
          }
          m2 = m2.sibling;
        }
        a: for (m2 = null, q2 = a; ; ) {
          if (5 === q2.tag) {
            if (null === m2) {
              m2 = q2;
              try {
                e = q2.stateNode, l2 ? (f2 = e.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h3 = q2.stateNode, k2 = q2.memoizedProps.style, g2 = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h3.style.display = rb("display", g2));
              } catch (t2) {
                W(a, a.return, t2);
              }
            }
          } else if (6 === q2.tag) {
            if (null === m2) try {
              q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
            } catch (t2) {
              W(a, a.return, t2);
            }
          } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a) && null !== q2.child) {
            q2.child.return = q2;
            q2 = q2.child;
            continue;
          }
          if (q2 === a) break a;
          for (; null === q2.sibling; ) {
            if (null === q2.return || q2.return === a) break a;
            m2 === q2 && (m2 = null);
            q2 = q2.return;
          }
          m2 === q2 && (m2 = null);
          q2.sibling.return = q2.return;
          q2 = q2.sibling;
        }
      }
      break;
    case 19:
      ck(b2, a);
      ek(a);
      d2 & 4 && ak(a);
      break;
    case 21:
      break;
    default:
      ck(
        b2,
        a
      ), ek(a);
  }
}
function ek(a) {
  var b2 = a.flags;
  if (b2 & 2) {
    try {
      a: {
        for (var c2 = a.return; null !== c2; ) {
          if (Tj(c2)) {
            var d2 = c2;
            break a;
          }
          c2 = c2.return;
        }
        throw Error(p$1(160));
      }
      switch (d2.tag) {
        case 5:
          var e = d2.stateNode;
          d2.flags & 32 && (ob(e, ""), d2.flags &= -33);
          var f2 = Uj(a);
          Wj(a, f2, e);
          break;
        case 3:
        case 4:
          var g2 = d2.stateNode.containerInfo, h3 = Uj(a);
          Vj(a, h3, g2);
          break;
        default:
          throw Error(p$1(161));
      }
    } catch (k2) {
      W(a, a.return, k2);
    }
    a.flags &= -3;
  }
  b2 & 4096 && (a.flags &= -4097);
}
function hk(a, b2, c2) {
  V = a;
  ik(a);
}
function ik(a, b2, c2) {
  for (var d2 = 0 !== (a.mode & 1); null !== V; ) {
    var e = V, f2 = e.child;
    if (22 === e.tag && d2) {
      var g2 = null !== e.memoizedState || Jj;
      if (!g2) {
        var h3 = e.alternate, k2 = null !== h3 && null !== h3.memoizedState || U;
        h3 = Jj;
        var l2 = U;
        Jj = g2;
        if ((U = k2) && !l2) for (V = e; null !== V; ) g2 = V, k2 = g2.child, 22 === g2.tag && null !== g2.memoizedState ? jk(e) : null !== k2 ? (k2.return = g2, V = k2) : jk(e);
        for (; null !== f2; ) V = f2, ik(f2), f2 = f2.sibling;
        V = e;
        Jj = h3;
        U = l2;
      }
      kk(a);
    } else 0 !== (e.subtreeFlags & 8772) && null !== f2 ? (f2.return = e, V = f2) : kk(a);
  }
}
function kk(a) {
  for (; null !== V; ) {
    var b2 = V;
    if (0 !== (b2.flags & 8772)) {
      var c2 = b2.alternate;
      try {
        if (0 !== (b2.flags & 8772)) switch (b2.tag) {
          case 0:
          case 11:
          case 15:
            U || Qj(5, b2);
            break;
          case 1:
            var d2 = b2.stateNode;
            if (b2.flags & 4 && !U) if (null === c2) d2.componentDidMount();
            else {
              var e = b2.elementType === b2.type ? c2.memoizedProps : Ci(b2.type, c2.memoizedProps);
              d2.componentDidUpdate(e, c2.memoizedState, d2.__reactInternalSnapshotBeforeUpdate);
            }
            var f2 = b2.updateQueue;
            null !== f2 && sh(b2, f2, d2);
            break;
          case 3:
            var g2 = b2.updateQueue;
            if (null !== g2) {
              c2 = null;
              if (null !== b2.child) switch (b2.child.tag) {
                case 5:
                  c2 = b2.child.stateNode;
                  break;
                case 1:
                  c2 = b2.child.stateNode;
              }
              sh(b2, g2, c2);
            }
            break;
          case 5:
            var h3 = b2.stateNode;
            if (null === c2 && b2.flags & 4) {
              c2 = h3;
              var k2 = b2.memoizedProps;
              switch (b2.type) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  k2.autoFocus && c2.focus();
                  break;
                case "img":
                  k2.src && (c2.src = k2.src);
              }
            }
            break;
          case 6:
            break;
          case 4:
            break;
          case 12:
            break;
          case 13:
            if (null === b2.memoizedState) {
              var l2 = b2.alternate;
              if (null !== l2) {
                var m2 = l2.memoizedState;
                if (null !== m2) {
                  var q2 = m2.dehydrated;
                  null !== q2 && bd(q2);
                }
              }
            }
            break;
          case 19:
          case 17:
          case 21:
          case 22:
          case 23:
          case 25:
            break;
          default:
            throw Error(p$1(163));
        }
        U || b2.flags & 512 && Rj(b2);
      } catch (r2) {
        W(b2, b2.return, r2);
      }
    }
    if (b2 === a) {
      V = null;
      break;
    }
    c2 = b2.sibling;
    if (null !== c2) {
      c2.return = b2.return;
      V = c2;
      break;
    }
    V = b2.return;
  }
}
function gk(a) {
  for (; null !== V; ) {
    var b2 = V;
    if (b2 === a) {
      V = null;
      break;
    }
    var c2 = b2.sibling;
    if (null !== c2) {
      c2.return = b2.return;
      V = c2;
      break;
    }
    V = b2.return;
  }
}
function jk(a) {
  for (; null !== V; ) {
    var b2 = V;
    try {
      switch (b2.tag) {
        case 0:
        case 11:
        case 15:
          var c2 = b2.return;
          try {
            Qj(4, b2);
          } catch (k2) {
            W(b2, c2, k2);
          }
          break;
        case 1:
          var d2 = b2.stateNode;
          if ("function" === typeof d2.componentDidMount) {
            var e = b2.return;
            try {
              d2.componentDidMount();
            } catch (k2) {
              W(b2, e, k2);
            }
          }
          var f2 = b2.return;
          try {
            Rj(b2);
          } catch (k2) {
            W(b2, f2, k2);
          }
          break;
        case 5:
          var g2 = b2.return;
          try {
            Rj(b2);
          } catch (k2) {
            W(b2, g2, k2);
          }
      }
    } catch (k2) {
      W(b2, b2.return, k2);
    }
    if (b2 === a) {
      V = null;
      break;
    }
    var h3 = b2.sibling;
    if (null !== h3) {
      h3.return = b2.return;
      V = h3;
      break;
    }
    V = b2.return;
  }
}
var lk = Math.ceil, mk = ua.ReactCurrentDispatcher, nk = ua.ReactCurrentOwner, ok = ua.ReactCurrentBatchConfig, K = 0, Q$1 = null, Y = null, Z = 0, fj = 0, ej = Uf(0), T$1 = 0, pk = null, rh = 0, qk = 0, rk = 0, sk = null, tk = null, fk = 0, Gj = Infinity, uk = null, Oi = false, Pi = null, Ri = null, vk = false, wk = null, xk = 0, yk = 0, zk = null, Ak = -1, Bk = 0;
function R$1() {
  return 0 !== (K & 6) ? B$1() : -1 !== Ak ? Ak : Ak = B$1();
}
function yi(a) {
  if (0 === (a.mode & 1)) return 1;
  if (0 !== (K & 2) && 0 !== Z) return Z & -Z;
  if (null !== Kg.transition) return 0 === Bk && (Bk = yc()), Bk;
  a = C$1;
  if (0 !== a) return a;
  a = window.event;
  a = void 0 === a ? 16 : jd(a.type);
  return a;
}
function gi(a, b2, c2, d2) {
  if (50 < yk) throw yk = 0, zk = null, Error(p$1(185));
  Ac(a, c2, d2);
  if (0 === (K & 2) || a !== Q$1) a === Q$1 && (0 === (K & 2) && (qk |= c2), 4 === T$1 && Ck(a, Z)), Dk(a, d2), 1 === c2 && 0 === K && 0 === (b2.mode & 1) && (Gj = B$1() + 500, fg && jg());
}
function Dk(a, b2) {
  var c2 = a.callbackNode;
  wc(a, b2);
  var d2 = uc(a, a === Q$1 ? Z : 0);
  if (0 === d2) null !== c2 && bc(c2), a.callbackNode = null, a.callbackPriority = 0;
  else if (b2 = d2 & -d2, a.callbackPriority !== b2) {
    null != c2 && bc(c2);
    if (1 === b2) 0 === a.tag ? ig(Ek.bind(null, a)) : hg(Ek.bind(null, a)), Jf(function() {
      0 === (K & 6) && jg();
    }), c2 = null;
    else {
      switch (Dc(d2)) {
        case 1:
          c2 = fc;
          break;
        case 4:
          c2 = gc;
          break;
        case 16:
          c2 = hc;
          break;
        case 536870912:
          c2 = jc;
          break;
        default:
          c2 = hc;
      }
      c2 = Fk(c2, Gk.bind(null, a));
    }
    a.callbackPriority = b2;
    a.callbackNode = c2;
  }
}
function Gk(a, b2) {
  Ak = -1;
  Bk = 0;
  if (0 !== (K & 6)) throw Error(p$1(327));
  var c2 = a.callbackNode;
  if (Hk() && a.callbackNode !== c2) return null;
  var d2 = uc(a, a === Q$1 ? Z : 0);
  if (0 === d2) return null;
  if (0 !== (d2 & 30) || 0 !== (d2 & a.expiredLanes) || b2) b2 = Ik(a, d2);
  else {
    b2 = d2;
    var e = K;
    K |= 2;
    var f2 = Jk();
    if (Q$1 !== a || Z !== b2) uk = null, Gj = B$1() + 500, Kk(a, b2);
    do
      try {
        Lk();
        break;
      } catch (h3) {
        Mk(a, h3);
      }
    while (1);
    $g();
    mk.current = f2;
    K = e;
    null !== Y ? b2 = 0 : (Q$1 = null, Z = 0, b2 = T$1);
  }
  if (0 !== b2) {
    2 === b2 && (e = xc(a), 0 !== e && (d2 = e, b2 = Nk(a, e)));
    if (1 === b2) throw c2 = pk, Kk(a, 0), Ck(a, d2), Dk(a, B$1()), c2;
    if (6 === b2) Ck(a, d2);
    else {
      e = a.current.alternate;
      if (0 === (d2 & 30) && !Ok(e) && (b2 = Ik(a, d2), 2 === b2 && (f2 = xc(a), 0 !== f2 && (d2 = f2, b2 = Nk(a, f2))), 1 === b2)) throw c2 = pk, Kk(a, 0), Ck(a, d2), Dk(a, B$1()), c2;
      a.finishedWork = e;
      a.finishedLanes = d2;
      switch (b2) {
        case 0:
        case 1:
          throw Error(p$1(345));
        case 2:
          Pk(a, tk, uk);
          break;
        case 3:
          Ck(a, d2);
          if ((d2 & 130023424) === d2 && (b2 = fk + 500 - B$1(), 10 < b2)) {
            if (0 !== uc(a, 0)) break;
            e = a.suspendedLanes;
            if ((e & d2) !== d2) {
              R$1();
              a.pingedLanes |= a.suspendedLanes & e;
              break;
            }
            a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), b2);
            break;
          }
          Pk(a, tk, uk);
          break;
        case 4:
          Ck(a, d2);
          if ((d2 & 4194240) === d2) break;
          b2 = a.eventTimes;
          for (e = -1; 0 < d2; ) {
            var g2 = 31 - oc(d2);
            f2 = 1 << g2;
            g2 = b2[g2];
            g2 > e && (e = g2);
            d2 &= ~f2;
          }
          d2 = e;
          d2 = B$1() - d2;
          d2 = (120 > d2 ? 120 : 480 > d2 ? 480 : 1080 > d2 ? 1080 : 1920 > d2 ? 1920 : 3e3 > d2 ? 3e3 : 4320 > d2 ? 4320 : 1960 * lk(d2 / 1960)) - d2;
          if (10 < d2) {
            a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), d2);
            break;
          }
          Pk(a, tk, uk);
          break;
        case 5:
          Pk(a, tk, uk);
          break;
        default:
          throw Error(p$1(329));
      }
    }
  }
  Dk(a, B$1());
  return a.callbackNode === c2 ? Gk.bind(null, a) : null;
}
function Nk(a, b2) {
  var c2 = sk;
  a.current.memoizedState.isDehydrated && (Kk(a, b2).flags |= 256);
  a = Ik(a, b2);
  2 !== a && (b2 = tk, tk = c2, null !== b2 && Fj(b2));
  return a;
}
function Fj(a) {
  null === tk ? tk = a : tk.push.apply(tk, a);
}
function Ok(a) {
  for (var b2 = a; ; ) {
    if (b2.flags & 16384) {
      var c2 = b2.updateQueue;
      if (null !== c2 && (c2 = c2.stores, null !== c2)) for (var d2 = 0; d2 < c2.length; d2++) {
        var e = c2[d2], f2 = e.getSnapshot;
        e = e.value;
        try {
          if (!He(f2(), e)) return false;
        } catch (g2) {
          return false;
        }
      }
    }
    c2 = b2.child;
    if (b2.subtreeFlags & 16384 && null !== c2) c2.return = b2, b2 = c2;
    else {
      if (b2 === a) break;
      for (; null === b2.sibling; ) {
        if (null === b2.return || b2.return === a) return true;
        b2 = b2.return;
      }
      b2.sibling.return = b2.return;
      b2 = b2.sibling;
    }
  }
  return true;
}
function Ck(a, b2) {
  b2 &= ~rk;
  b2 &= ~qk;
  a.suspendedLanes |= b2;
  a.pingedLanes &= ~b2;
  for (a = a.expirationTimes; 0 < b2; ) {
    var c2 = 31 - oc(b2), d2 = 1 << c2;
    a[c2] = -1;
    b2 &= ~d2;
  }
}
function Ek(a) {
  if (0 !== (K & 6)) throw Error(p$1(327));
  Hk();
  var b2 = uc(a, 0);
  if (0 === (b2 & 1)) return Dk(a, B$1()), null;
  var c2 = Ik(a, b2);
  if (0 !== a.tag && 2 === c2) {
    var d2 = xc(a);
    0 !== d2 && (b2 = d2, c2 = Nk(a, d2));
  }
  if (1 === c2) throw c2 = pk, Kk(a, 0), Ck(a, b2), Dk(a, B$1()), c2;
  if (6 === c2) throw Error(p$1(345));
  a.finishedWork = a.current.alternate;
  a.finishedLanes = b2;
  Pk(a, tk, uk);
  Dk(a, B$1());
  return null;
}
function Qk(a, b2) {
  var c2 = K;
  K |= 1;
  try {
    return a(b2);
  } finally {
    K = c2, 0 === K && (Gj = B$1() + 500, fg && jg());
  }
}
function Rk(a) {
  null !== wk && 0 === wk.tag && 0 === (K & 6) && Hk();
  var b2 = K;
  K |= 1;
  var c2 = ok.transition, d2 = C$1;
  try {
    if (ok.transition = null, C$1 = 1, a) return a();
  } finally {
    C$1 = d2, ok.transition = c2, K = b2, 0 === (K & 6) && jg();
  }
}
function Hj() {
  fj = ej.current;
  E$1(ej);
}
function Kk(a, b2) {
  a.finishedWork = null;
  a.finishedLanes = 0;
  var c2 = a.timeoutHandle;
  -1 !== c2 && (a.timeoutHandle = -1, Gf(c2));
  if (null !== Y) for (c2 = Y.return; null !== c2; ) {
    var d2 = c2;
    wg(d2);
    switch (d2.tag) {
      case 1:
        d2 = d2.type.childContextTypes;
        null !== d2 && void 0 !== d2 && $f();
        break;
      case 3:
        zh();
        E$1(Wf);
        E$1(H$1);
        Eh();
        break;
      case 5:
        Bh(d2);
        break;
      case 4:
        zh();
        break;
      case 13:
        E$1(L$1);
        break;
      case 19:
        E$1(L$1);
        break;
      case 10:
        ah(d2.type._context);
        break;
      case 22:
      case 23:
        Hj();
    }
    c2 = c2.return;
  }
  Q$1 = a;
  Y = a = Pg(a.current, null);
  Z = fj = b2;
  T$1 = 0;
  pk = null;
  rk = qk = rh = 0;
  tk = sk = null;
  if (null !== fh) {
    for (b2 = 0; b2 < fh.length; b2++) if (c2 = fh[b2], d2 = c2.interleaved, null !== d2) {
      c2.interleaved = null;
      var e = d2.next, f2 = c2.pending;
      if (null !== f2) {
        var g2 = f2.next;
        f2.next = e;
        d2.next = g2;
      }
      c2.pending = d2;
    }
    fh = null;
  }
  return a;
}
function Mk(a, b2) {
  do {
    var c2 = Y;
    try {
      $g();
      Fh.current = Rh;
      if (Ih) {
        for (var d2 = M$1.memoizedState; null !== d2; ) {
          var e = d2.queue;
          null !== e && (e.pending = null);
          d2 = d2.next;
        }
        Ih = false;
      }
      Hh = 0;
      O$1 = N$1 = M$1 = null;
      Jh = false;
      Kh = 0;
      nk.current = null;
      if (null === c2 || null === c2.return) {
        T$1 = 1;
        pk = b2;
        Y = null;
        break;
      }
      a: {
        var f2 = a, g2 = c2.return, h3 = c2, k2 = b2;
        b2 = Z;
        h3.flags |= 32768;
        if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
          var l2 = k2, m2 = h3, q2 = m2.tag;
          if (0 === (m2.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
            var r2 = m2.alternate;
            r2 ? (m2.updateQueue = r2.updateQueue, m2.memoizedState = r2.memoizedState, m2.lanes = r2.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
          }
          var y2 = Ui(g2);
          if (null !== y2) {
            y2.flags &= -257;
            Vi(y2, g2, h3, f2, b2);
            y2.mode & 1 && Si(f2, l2, b2);
            b2 = y2;
            k2 = l2;
            var n2 = b2.updateQueue;
            if (null === n2) {
              var t2 = /* @__PURE__ */ new Set();
              t2.add(k2);
              b2.updateQueue = t2;
            } else n2.add(k2);
            break a;
          } else {
            if (0 === (b2 & 1)) {
              Si(f2, l2, b2);
              tj();
              break a;
            }
            k2 = Error(p$1(426));
          }
        } else if (I$1 && h3.mode & 1) {
          var J2 = Ui(g2);
          if (null !== J2) {
            0 === (J2.flags & 65536) && (J2.flags |= 256);
            Vi(J2, g2, h3, f2, b2);
            Jg(Ji(k2, h3));
            break a;
          }
        }
        f2 = k2 = Ji(k2, h3);
        4 !== T$1 && (T$1 = 2);
        null === sk ? sk = [f2] : sk.push(f2);
        f2 = g2;
        do {
          switch (f2.tag) {
            case 3:
              f2.flags |= 65536;
              b2 &= -b2;
              f2.lanes |= b2;
              var x2 = Ni(f2, k2, b2);
              ph(f2, x2);
              break a;
            case 1:
              h3 = k2;
              var w2 = f2.type, u2 = f2.stateNode;
              if (0 === (f2.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Ri || !Ri.has(u2)))) {
                f2.flags |= 65536;
                b2 &= -b2;
                f2.lanes |= b2;
                var F2 = Qi(f2, h3, b2);
                ph(f2, F2);
                break a;
              }
          }
          f2 = f2.return;
        } while (null !== f2);
      }
      Sk(c2);
    } catch (na) {
      b2 = na;
      Y === c2 && null !== c2 && (Y = c2 = c2.return);
      continue;
    }
    break;
  } while (1);
}
function Jk() {
  var a = mk.current;
  mk.current = Rh;
  return null === a ? Rh : a;
}
function tj() {
  if (0 === T$1 || 3 === T$1 || 2 === T$1) T$1 = 4;
  null === Q$1 || 0 === (rh & 268435455) && 0 === (qk & 268435455) || Ck(Q$1, Z);
}
function Ik(a, b2) {
  var c2 = K;
  K |= 2;
  var d2 = Jk();
  if (Q$1 !== a || Z !== b2) uk = null, Kk(a, b2);
  do
    try {
      Tk();
      break;
    } catch (e) {
      Mk(a, e);
    }
  while (1);
  $g();
  K = c2;
  mk.current = d2;
  if (null !== Y) throw Error(p$1(261));
  Q$1 = null;
  Z = 0;
  return T$1;
}
function Tk() {
  for (; null !== Y; ) Uk(Y);
}
function Lk() {
  for (; null !== Y && !cc(); ) Uk(Y);
}
function Uk(a) {
  var b2 = Vk(a.alternate, a, fj);
  a.memoizedProps = a.pendingProps;
  null === b2 ? Sk(a) : Y = b2;
  nk.current = null;
}
function Sk(a) {
  var b2 = a;
  do {
    var c2 = b2.alternate;
    a = b2.return;
    if (0 === (b2.flags & 32768)) {
      if (c2 = Ej(c2, b2, fj), null !== c2) {
        Y = c2;
        return;
      }
    } else {
      c2 = Ij(c2, b2);
      if (null !== c2) {
        c2.flags &= 32767;
        Y = c2;
        return;
      }
      if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
      else {
        T$1 = 6;
        Y = null;
        return;
      }
    }
    b2 = b2.sibling;
    if (null !== b2) {
      Y = b2;
      return;
    }
    Y = b2 = a;
  } while (null !== b2);
  0 === T$1 && (T$1 = 5);
}
function Pk(a, b2, c2) {
  var d2 = C$1, e = ok.transition;
  try {
    ok.transition = null, C$1 = 1, Wk(a, b2, c2, d2);
  } finally {
    ok.transition = e, C$1 = d2;
  }
  return null;
}
function Wk(a, b2, c2, d2) {
  do
    Hk();
  while (null !== wk);
  if (0 !== (K & 6)) throw Error(p$1(327));
  c2 = a.finishedWork;
  var e = a.finishedLanes;
  if (null === c2) return null;
  a.finishedWork = null;
  a.finishedLanes = 0;
  if (c2 === a.current) throw Error(p$1(177));
  a.callbackNode = null;
  a.callbackPriority = 0;
  var f2 = c2.lanes | c2.childLanes;
  Bc(a, f2);
  a === Q$1 && (Y = Q$1 = null, Z = 0);
  0 === (c2.subtreeFlags & 2064) && 0 === (c2.flags & 2064) || vk || (vk = true, Fk(hc, function() {
    Hk();
    return null;
  }));
  f2 = 0 !== (c2.flags & 15990);
  if (0 !== (c2.subtreeFlags & 15990) || f2) {
    f2 = ok.transition;
    ok.transition = null;
    var g2 = C$1;
    C$1 = 1;
    var h3 = K;
    K |= 4;
    nk.current = null;
    Oj(a, c2);
    dk(c2, a);
    Oe(Df);
    dd = !!Cf;
    Df = Cf = null;
    a.current = c2;
    hk(c2);
    dc();
    K = h3;
    C$1 = g2;
    ok.transition = f2;
  } else a.current = c2;
  vk && (vk = false, wk = a, xk = e);
  f2 = a.pendingLanes;
  0 === f2 && (Ri = null);
  mc(c2.stateNode);
  Dk(a, B$1());
  if (null !== b2) for (d2 = a.onRecoverableError, c2 = 0; c2 < b2.length; c2++) e = b2[c2], d2(e.value, { componentStack: e.stack, digest: e.digest });
  if (Oi) throw Oi = false, a = Pi, Pi = null, a;
  0 !== (xk & 1) && 0 !== a.tag && Hk();
  f2 = a.pendingLanes;
  0 !== (f2 & 1) ? a === zk ? yk++ : (yk = 0, zk = a) : yk = 0;
  jg();
  return null;
}
function Hk() {
  if (null !== wk) {
    var a = Dc(xk), b2 = ok.transition, c2 = C$1;
    try {
      ok.transition = null;
      C$1 = 16 > a ? 16 : a;
      if (null === wk) var d2 = false;
      else {
        a = wk;
        wk = null;
        xk = 0;
        if (0 !== (K & 6)) throw Error(p$1(331));
        var e = K;
        K |= 4;
        for (V = a.current; null !== V; ) {
          var f2 = V, g2 = f2.child;
          if (0 !== (V.flags & 16)) {
            var h3 = f2.deletions;
            if (null !== h3) {
              for (var k2 = 0; k2 < h3.length; k2++) {
                var l2 = h3[k2];
                for (V = l2; null !== V; ) {
                  var m2 = V;
                  switch (m2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Pj(8, m2, f2);
                  }
                  var q2 = m2.child;
                  if (null !== q2) q2.return = m2, V = q2;
                  else for (; null !== V; ) {
                    m2 = V;
                    var r2 = m2.sibling, y2 = m2.return;
                    Sj(m2);
                    if (m2 === l2) {
                      V = null;
                      break;
                    }
                    if (null !== r2) {
                      r2.return = y2;
                      V = r2;
                      break;
                    }
                    V = y2;
                  }
                }
              }
              var n2 = f2.alternate;
              if (null !== n2) {
                var t2 = n2.child;
                if (null !== t2) {
                  n2.child = null;
                  do {
                    var J2 = t2.sibling;
                    t2.sibling = null;
                    t2 = J2;
                  } while (null !== t2);
                }
              }
              V = f2;
            }
          }
          if (0 !== (f2.subtreeFlags & 2064) && null !== g2) g2.return = f2, V = g2;
          else b: for (; null !== V; ) {
            f2 = V;
            if (0 !== (f2.flags & 2048)) switch (f2.tag) {
              case 0:
              case 11:
              case 15:
                Pj(9, f2, f2.return);
            }
            var x2 = f2.sibling;
            if (null !== x2) {
              x2.return = f2.return;
              V = x2;
              break b;
            }
            V = f2.return;
          }
        }
        var w2 = a.current;
        for (V = w2; null !== V; ) {
          g2 = V;
          var u2 = g2.child;
          if (0 !== (g2.subtreeFlags & 2064) && null !== u2) u2.return = g2, V = u2;
          else b: for (g2 = w2; null !== V; ) {
            h3 = V;
            if (0 !== (h3.flags & 2048)) try {
              switch (h3.tag) {
                case 0:
                case 11:
                case 15:
                  Qj(9, h3);
              }
            } catch (na) {
              W(h3, h3.return, na);
            }
            if (h3 === g2) {
              V = null;
              break b;
            }
            var F2 = h3.sibling;
            if (null !== F2) {
              F2.return = h3.return;
              V = F2;
              break b;
            }
            V = h3.return;
          }
        }
        K = e;
        jg();
        if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
          lc.onPostCommitFiberRoot(kc, a);
        } catch (na) {
        }
        d2 = true;
      }
      return d2;
    } finally {
      C$1 = c2, ok.transition = b2;
    }
  }
  return false;
}
function Xk(a, b2, c2) {
  b2 = Ji(c2, b2);
  b2 = Ni(a, b2, 1);
  a = nh(a, b2, 1);
  b2 = R$1();
  null !== a && (Ac(a, 1, b2), Dk(a, b2));
}
function W(a, b2, c2) {
  if (3 === a.tag) Xk(a, a, c2);
  else for (; null !== b2; ) {
    if (3 === b2.tag) {
      Xk(b2, a, c2);
      break;
    } else if (1 === b2.tag) {
      var d2 = b2.stateNode;
      if ("function" === typeof b2.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === Ri || !Ri.has(d2))) {
        a = Ji(c2, a);
        a = Qi(b2, a, 1);
        b2 = nh(b2, a, 1);
        a = R$1();
        null !== b2 && (Ac(b2, 1, a), Dk(b2, a));
        break;
      }
    }
    b2 = b2.return;
  }
}
function Ti(a, b2, c2) {
  var d2 = a.pingCache;
  null !== d2 && d2.delete(b2);
  b2 = R$1();
  a.pingedLanes |= a.suspendedLanes & c2;
  Q$1 === a && (Z & c2) === c2 && (4 === T$1 || 3 === T$1 && (Z & 130023424) === Z && 500 > B$1() - fk ? Kk(a, 0) : rk |= c2);
  Dk(a, b2);
}
function Yk(a, b2) {
  0 === b2 && (0 === (a.mode & 1) ? b2 = 1 : (b2 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
  var c2 = R$1();
  a = ih(a, b2);
  null !== a && (Ac(a, b2, c2), Dk(a, c2));
}
function uj(a) {
  var b2 = a.memoizedState, c2 = 0;
  null !== b2 && (c2 = b2.retryLane);
  Yk(a, c2);
}
function bk(a, b2) {
  var c2 = 0;
  switch (a.tag) {
    case 13:
      var d2 = a.stateNode;
      var e = a.memoizedState;
      null !== e && (c2 = e.retryLane);
      break;
    case 19:
      d2 = a.stateNode;
      break;
    default:
      throw Error(p$1(314));
  }
  null !== d2 && d2.delete(b2);
  Yk(a, c2);
}
var Vk;
Vk = function(a, b2, c2) {
  if (null !== a) if (a.memoizedProps !== b2.pendingProps || Wf.current) dh = true;
  else {
    if (0 === (a.lanes & c2) && 0 === (b2.flags & 128)) return dh = false, yj(a, b2, c2);
    dh = 0 !== (a.flags & 131072) ? true : false;
  }
  else dh = false, I$1 && 0 !== (b2.flags & 1048576) && ug(b2, ng, b2.index);
  b2.lanes = 0;
  switch (b2.tag) {
    case 2:
      var d2 = b2.type;
      ij(a, b2);
      a = b2.pendingProps;
      var e = Yf(b2, H$1.current);
      ch(b2, c2);
      e = Nh(null, b2, d2, a, e, c2);
      var f2 = Sh();
      b2.flags |= 1;
      "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b2.tag = 1, b2.memoizedState = null, b2.updateQueue = null, Zf(d2) ? (f2 = true, cg(b2)) : f2 = false, b2.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, kh(b2), e.updater = Ei, b2.stateNode = e, e._reactInternals = b2, Ii(b2, d2, a, c2), b2 = jj(null, b2, d2, true, f2, c2)) : (b2.tag = 0, I$1 && f2 && vg(b2), Xi(null, b2, e, c2), b2 = b2.child);
      return b2;
    case 16:
      d2 = b2.elementType;
      a: {
        ij(a, b2);
        a = b2.pendingProps;
        e = d2._init;
        d2 = e(d2._payload);
        b2.type = d2;
        e = b2.tag = Zk(d2);
        a = Ci(d2, a);
        switch (e) {
          case 0:
            b2 = cj(null, b2, d2, a, c2);
            break a;
          case 1:
            b2 = hj(null, b2, d2, a, c2);
            break a;
          case 11:
            b2 = Yi(null, b2, d2, a, c2);
            break a;
          case 14:
            b2 = $i(null, b2, d2, Ci(d2.type, a), c2);
            break a;
        }
        throw Error(p$1(
          306,
          d2,
          ""
        ));
      }
      return b2;
    case 0:
      return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Ci(d2, e), cj(a, b2, d2, e, c2);
    case 1:
      return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Ci(d2, e), hj(a, b2, d2, e, c2);
    case 3:
      a: {
        kj(b2);
        if (null === a) throw Error(p$1(387));
        d2 = b2.pendingProps;
        f2 = b2.memoizedState;
        e = f2.element;
        lh(a, b2);
        qh(b2, d2, null, c2);
        var g2 = b2.memoizedState;
        d2 = g2.element;
        if (f2.isDehydrated) if (f2 = { element: d2, isDehydrated: false, cache: g2.cache, pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries, transitions: g2.transitions }, b2.updateQueue.baseState = f2, b2.memoizedState = f2, b2.flags & 256) {
          e = Ji(Error(p$1(423)), b2);
          b2 = lj(a, b2, d2, c2, e);
          break a;
        } else if (d2 !== e) {
          e = Ji(Error(p$1(424)), b2);
          b2 = lj(a, b2, d2, c2, e);
          break a;
        } else for (yg = Lf(b2.stateNode.containerInfo.firstChild), xg = b2, I$1 = true, zg = null, c2 = Vg(b2, null, d2, c2), b2.child = c2; c2; ) c2.flags = c2.flags & -3 | 4096, c2 = c2.sibling;
        else {
          Ig();
          if (d2 === e) {
            b2 = Zi(a, b2, c2);
            break a;
          }
          Xi(a, b2, d2, c2);
        }
        b2 = b2.child;
      }
      return b2;
    case 5:
      return Ah(b2), null === a && Eg(b2), d2 = b2.type, e = b2.pendingProps, f2 = null !== a ? a.memoizedProps : null, g2 = e.children, Ef(d2, e) ? g2 = null : null !== f2 && Ef(d2, f2) && (b2.flags |= 32), gj(a, b2), Xi(a, b2, g2, c2), b2.child;
    case 6:
      return null === a && Eg(b2), null;
    case 13:
      return oj(a, b2, c2);
    case 4:
      return yh(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, null === a ? b2.child = Ug(b2, null, d2, c2) : Xi(a, b2, d2, c2), b2.child;
    case 11:
      return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Ci(d2, e), Yi(a, b2, d2, e, c2);
    case 7:
      return Xi(a, b2, b2.pendingProps, c2), b2.child;
    case 8:
      return Xi(a, b2, b2.pendingProps.children, c2), b2.child;
    case 12:
      return Xi(a, b2, b2.pendingProps.children, c2), b2.child;
    case 10:
      a: {
        d2 = b2.type._context;
        e = b2.pendingProps;
        f2 = b2.memoizedProps;
        g2 = e.value;
        G(Wg, d2._currentValue);
        d2._currentValue = g2;
        if (null !== f2) if (He(f2.value, g2)) {
          if (f2.children === e.children && !Wf.current) {
            b2 = Zi(a, b2, c2);
            break a;
          }
        } else for (f2 = b2.child, null !== f2 && (f2.return = b2); null !== f2; ) {
          var h3 = f2.dependencies;
          if (null !== h3) {
            g2 = f2.child;
            for (var k2 = h3.firstContext; null !== k2; ) {
              if (k2.context === d2) {
                if (1 === f2.tag) {
                  k2 = mh(-1, c2 & -c2);
                  k2.tag = 2;
                  var l2 = f2.updateQueue;
                  if (null !== l2) {
                    l2 = l2.shared;
                    var m2 = l2.pending;
                    null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                    l2.pending = k2;
                  }
                }
                f2.lanes |= c2;
                k2 = f2.alternate;
                null !== k2 && (k2.lanes |= c2);
                bh(
                  f2.return,
                  c2,
                  b2
                );
                h3.lanes |= c2;
                break;
              }
              k2 = k2.next;
            }
          } else if (10 === f2.tag) g2 = f2.type === b2.type ? null : f2.child;
          else if (18 === f2.tag) {
            g2 = f2.return;
            if (null === g2) throw Error(p$1(341));
            g2.lanes |= c2;
            h3 = g2.alternate;
            null !== h3 && (h3.lanes |= c2);
            bh(g2, c2, b2);
            g2 = f2.sibling;
          } else g2 = f2.child;
          if (null !== g2) g2.return = f2;
          else for (g2 = f2; null !== g2; ) {
            if (g2 === b2) {
              g2 = null;
              break;
            }
            f2 = g2.sibling;
            if (null !== f2) {
              f2.return = g2.return;
              g2 = f2;
              break;
            }
            g2 = g2.return;
          }
          f2 = g2;
        }
        Xi(a, b2, e.children, c2);
        b2 = b2.child;
      }
      return b2;
    case 9:
      return e = b2.type, d2 = b2.pendingProps.children, ch(b2, c2), e = eh(e), d2 = d2(e), b2.flags |= 1, Xi(a, b2, d2, c2), b2.child;
    case 14:
      return d2 = b2.type, e = Ci(d2, b2.pendingProps), e = Ci(d2.type, e), $i(a, b2, d2, e, c2);
    case 15:
      return bj(a, b2, b2.type, b2.pendingProps, c2);
    case 17:
      return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Ci(d2, e), ij(a, b2), b2.tag = 1, Zf(d2) ? (a = true, cg(b2)) : a = false, ch(b2, c2), Gi(b2, d2, e), Ii(b2, d2, e, c2), jj(null, b2, d2, true, a, c2);
    case 19:
      return xj(a, b2, c2);
    case 22:
      return dj(a, b2, c2);
  }
  throw Error(p$1(156, b2.tag));
};
function Fk(a, b2) {
  return ac(a, b2);
}
function $k(a, b2, c2, d2) {
  this.tag = a;
  this.key = c2;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b2;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d2;
  this.subtreeFlags = this.flags = 0;
  this.deletions = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function Bg(a, b2, c2, d2) {
  return new $k(a, b2, c2, d2);
}
function aj(a) {
  a = a.prototype;
  return !(!a || !a.isReactComponent);
}
function Zk(a) {
  if ("function" === typeof a) return aj(a) ? 1 : 0;
  if (void 0 !== a && null !== a) {
    a = a.$$typeof;
    if (a === Da) return 11;
    if (a === Ga) return 14;
  }
  return 2;
}
function Pg(a, b2) {
  var c2 = a.alternate;
  null === c2 ? (c2 = Bg(a.tag, b2, a.key, a.mode), c2.elementType = a.elementType, c2.type = a.type, c2.stateNode = a.stateNode, c2.alternate = a, a.alternate = c2) : (c2.pendingProps = b2, c2.type = a.type, c2.flags = 0, c2.subtreeFlags = 0, c2.deletions = null);
  c2.flags = a.flags & 14680064;
  c2.childLanes = a.childLanes;
  c2.lanes = a.lanes;
  c2.child = a.child;
  c2.memoizedProps = a.memoizedProps;
  c2.memoizedState = a.memoizedState;
  c2.updateQueue = a.updateQueue;
  b2 = a.dependencies;
  c2.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
  c2.sibling = a.sibling;
  c2.index = a.index;
  c2.ref = a.ref;
  return c2;
}
function Rg(a, b2, c2, d2, e, f2) {
  var g2 = 2;
  d2 = a;
  if ("function" === typeof a) aj(a) && (g2 = 1);
  else if ("string" === typeof a) g2 = 5;
  else a: switch (a) {
    case ya:
      return Tg(c2.children, e, f2, b2);
    case za:
      g2 = 8;
      e |= 8;
      break;
    case Aa:
      return a = Bg(12, c2, b2, e | 2), a.elementType = Aa, a.lanes = f2, a;
    case Ea:
      return a = Bg(13, c2, b2, e), a.elementType = Ea, a.lanes = f2, a;
    case Fa:
      return a = Bg(19, c2, b2, e), a.elementType = Fa, a.lanes = f2, a;
    case Ia:
      return pj(c2, e, f2, b2);
    default:
      if ("object" === typeof a && null !== a) switch (a.$$typeof) {
        case Ba:
          g2 = 10;
          break a;
        case Ca:
          g2 = 9;
          break a;
        case Da:
          g2 = 11;
          break a;
        case Ga:
          g2 = 14;
          break a;
        case Ha:
          g2 = 16;
          d2 = null;
          break a;
      }
      throw Error(p$1(130, null == a ? a : typeof a, ""));
  }
  b2 = Bg(g2, c2, b2, e);
  b2.elementType = a;
  b2.type = d2;
  b2.lanes = f2;
  return b2;
}
function Tg(a, b2, c2, d2) {
  a = Bg(7, a, d2, b2);
  a.lanes = c2;
  return a;
}
function pj(a, b2, c2, d2) {
  a = Bg(22, a, d2, b2);
  a.elementType = Ia;
  a.lanes = c2;
  a.stateNode = { isHidden: false };
  return a;
}
function Qg(a, b2, c2) {
  a = Bg(6, a, null, b2);
  a.lanes = c2;
  return a;
}
function Sg(a, b2, c2) {
  b2 = Bg(4, null !== a.children ? a.children : [], a.key, b2);
  b2.lanes = c2;
  b2.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
  return b2;
}
function al(a, b2, c2, d2, e) {
  this.tag = b2;
  this.containerInfo = a;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.callbackNode = this.pendingContext = this.context = null;
  this.callbackPriority = 0;
  this.eventTimes = zc(0);
  this.expirationTimes = zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = zc(0);
  this.identifierPrefix = d2;
  this.onRecoverableError = e;
  this.mutableSourceEagerHydrationData = null;
}
function bl(a, b2, c2, d2, e, f2, g2, h3, k2) {
  a = new al(a, b2, c2, h3, k2);
  1 === b2 ? (b2 = 1, true === f2 && (b2 |= 8)) : b2 = 0;
  f2 = Bg(3, null, null, b2);
  a.current = f2;
  f2.stateNode = a;
  f2.memoizedState = { element: d2, isDehydrated: c2, cache: null, transitions: null, pendingSuspenseBoundaries: null };
  kh(f2);
  return a;
}
function cl(a, b2, c2) {
  var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return { $$typeof: wa, key: null == d2 ? null : "" + d2, children: a, containerInfo: b2, implementation: c2 };
}
function dl(a) {
  if (!a) return Vf;
  a = a._reactInternals;
  a: {
    if (Vb(a) !== a || 1 !== a.tag) throw Error(p$1(170));
    var b2 = a;
    do {
      switch (b2.tag) {
        case 3:
          b2 = b2.stateNode.context;
          break a;
        case 1:
          if (Zf(b2.type)) {
            b2 = b2.stateNode.__reactInternalMemoizedMergedChildContext;
            break a;
          }
      }
      b2 = b2.return;
    } while (null !== b2);
    throw Error(p$1(171));
  }
  if (1 === a.tag) {
    var c2 = a.type;
    if (Zf(c2)) return bg(a, c2, b2);
  }
  return b2;
}
function el(a, b2, c2, d2, e, f2, g2, h3, k2) {
  a = bl(c2, d2, true, a, e, f2, g2, h3, k2);
  a.context = dl(null);
  c2 = a.current;
  d2 = R$1();
  e = yi(c2);
  f2 = mh(d2, e);
  f2.callback = void 0 !== b2 && null !== b2 ? b2 : null;
  nh(c2, f2, e);
  a.current.lanes = e;
  Ac(a, e, d2);
  Dk(a, d2);
  return a;
}
function fl(a, b2, c2, d2) {
  var e = b2.current, f2 = R$1(), g2 = yi(e);
  c2 = dl(c2);
  null === b2.context ? b2.context = c2 : b2.pendingContext = c2;
  b2 = mh(f2, g2);
  b2.payload = { element: a };
  d2 = void 0 === d2 ? null : d2;
  null !== d2 && (b2.callback = d2);
  a = nh(e, b2, g2);
  null !== a && (gi(a, e, g2, f2), oh(a, e, g2));
  return g2;
}
function gl(a) {
  a = a.current;
  if (!a.child) return null;
  switch (a.child.tag) {
    case 5:
      return a.child.stateNode;
    default:
      return a.child.stateNode;
  }
}
function hl(a, b2) {
  a = a.memoizedState;
  if (null !== a && null !== a.dehydrated) {
    var c2 = a.retryLane;
    a.retryLane = 0 !== c2 && c2 < b2 ? c2 : b2;
  }
}
function il(a, b2) {
  hl(a, b2);
  (a = a.alternate) && hl(a, b2);
}
function jl() {
  return null;
}
var kl = "function" === typeof reportError ? reportError : function(a) {
  console.error(a);
};
function ll(a) {
  this._internalRoot = a;
}
ml.prototype.render = ll.prototype.render = function(a) {
  var b2 = this._internalRoot;
  if (null === b2) throw Error(p$1(409));
  fl(a, b2, null, null);
};
ml.prototype.unmount = ll.prototype.unmount = function() {
  var a = this._internalRoot;
  if (null !== a) {
    this._internalRoot = null;
    var b2 = a.containerInfo;
    Rk(function() {
      fl(null, a, null, null);
    });
    b2[uf] = null;
  }
};
function ml(a) {
  this._internalRoot = a;
}
ml.prototype.unstable_scheduleHydration = function(a) {
  if (a) {
    var b2 = Hc();
    a = { blockedOn: null, target: a, priority: b2 };
    for (var c2 = 0; c2 < Qc.length && 0 !== b2 && b2 < Qc[c2].priority; c2++) ;
    Qc.splice(c2, 0, a);
    0 === c2 && Vc(a);
  }
};
function nl(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
}
function ol(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}
function pl() {
}
function ql(a, b2, c2, d2, e) {
  if (e) {
    if ("function" === typeof d2) {
      var f2 = d2;
      d2 = function() {
        var a2 = gl(g2);
        f2.call(a2);
      };
    }
    var g2 = el(b2, d2, a, 0, null, false, false, "", pl);
    a._reactRootContainer = g2;
    a[uf] = g2.current;
    sf(8 === a.nodeType ? a.parentNode : a);
    Rk();
    return g2;
  }
  for (; e = a.lastChild; ) a.removeChild(e);
  if ("function" === typeof d2) {
    var h3 = d2;
    d2 = function() {
      var a2 = gl(k2);
      h3.call(a2);
    };
  }
  var k2 = bl(a, 0, false, null, null, false, false, "", pl);
  a._reactRootContainer = k2;
  a[uf] = k2.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  Rk(function() {
    fl(b2, k2, c2, d2);
  });
  return k2;
}
function rl(a, b2, c2, d2, e) {
  var f2 = c2._reactRootContainer;
  if (f2) {
    var g2 = f2;
    if ("function" === typeof e) {
      var h3 = e;
      e = function() {
        var a2 = gl(g2);
        h3.call(a2);
      };
    }
    fl(b2, g2, a, e);
  } else g2 = ql(c2, b2, a, e, d2);
  return gl(g2);
}
Ec = function(a) {
  switch (a.tag) {
    case 3:
      var b2 = a.stateNode;
      if (b2.current.memoizedState.isDehydrated) {
        var c2 = tc(b2.pendingLanes);
        0 !== c2 && (Cc(b2, c2 | 1), Dk(b2, B$1()), 0 === (K & 6) && (Gj = B$1() + 500, jg()));
      }
      break;
    case 13:
      Rk(function() {
        var b3 = ih(a, 1);
        if (null !== b3) {
          var c3 = R$1();
          gi(b3, a, 1, c3);
        }
      }), il(a, 1);
  }
};
Fc = function(a) {
  if (13 === a.tag) {
    var b2 = ih(a, 134217728);
    if (null !== b2) {
      var c2 = R$1();
      gi(b2, a, 134217728, c2);
    }
    il(a, 134217728);
  }
};
Gc = function(a) {
  if (13 === a.tag) {
    var b2 = yi(a), c2 = ih(a, b2);
    if (null !== c2) {
      var d2 = R$1();
      gi(c2, a, b2, d2);
    }
    il(a, b2);
  }
};
Hc = function() {
  return C$1;
};
Ic = function(a, b2) {
  var c2 = C$1;
  try {
    return C$1 = a, b2();
  } finally {
    C$1 = c2;
  }
};
yb = function(a, b2, c2) {
  switch (b2) {
    case "input":
      bb(a, c2);
      b2 = c2.name;
      if ("radio" === c2.type && null != b2) {
        for (c2 = a; c2.parentNode; ) c2 = c2.parentNode;
        c2 = c2.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
        for (b2 = 0; b2 < c2.length; b2++) {
          var d2 = c2[b2];
          if (d2 !== a && d2.form === a.form) {
            var e = Db(d2);
            if (!e) throw Error(p$1(90));
            Wa(d2);
            bb(d2, e);
          }
        }
      }
      break;
    case "textarea":
      ib(a, c2);
      break;
    case "select":
      b2 = c2.value, null != b2 && fb(a, !!c2.multiple, b2, false);
  }
};
Gb = Qk;
Hb = Rk;
var sl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Qk] }, tl = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.3.1", rendererPackageName: "react-dom" };
var ul = { bundleType: tl.bundleType, version: tl.version, rendererPackageName: tl.rendererPackageName, rendererConfig: tl.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
  a = Zb(a);
  return null === a ? null : a.stateNode;
}, findFiberByHostInstance: tl.findFiberByHostInstance || jl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.3.1-next-f1338f8080-20240426" };
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!vl.isDisabled && vl.supportsFiber) try {
    kc = vl.inject(ul), lc = vl;
  } catch (a) {
  }
}
reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
reactDom_production_min.createPortal = function(a, b2) {
  var c2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!nl(b2)) throw Error(p$1(200));
  return cl(a, b2, null, c2);
};
reactDom_production_min.createRoot = function(a, b2) {
  if (!nl(a)) throw Error(p$1(299));
  var c2 = false, d2 = "", e = kl;
  null !== b2 && void 0 !== b2 && (true === b2.unstable_strictMode && (c2 = true), void 0 !== b2.identifierPrefix && (d2 = b2.identifierPrefix), void 0 !== b2.onRecoverableError && (e = b2.onRecoverableError));
  b2 = bl(a, 1, false, null, null, c2, false, d2, e);
  a[uf] = b2.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  return new ll(b2);
};
reactDom_production_min.findDOMNode = function(a) {
  if (null == a) return null;
  if (1 === a.nodeType) return a;
  var b2 = a._reactInternals;
  if (void 0 === b2) {
    if ("function" === typeof a.render) throw Error(p$1(188));
    a = Object.keys(a).join(",");
    throw Error(p$1(268, a));
  }
  a = Zb(b2);
  a = null === a ? null : a.stateNode;
  return a;
};
reactDom_production_min.flushSync = function(a) {
  return Rk(a);
};
reactDom_production_min.hydrate = function(a, b2, c2) {
  if (!ol(b2)) throw Error(p$1(200));
  return rl(null, a, b2, true, c2);
};
reactDom_production_min.hydrateRoot = function(a, b2, c2) {
  if (!nl(a)) throw Error(p$1(405));
  var d2 = null != c2 && c2.hydratedSources || null, e = false, f2 = "", g2 = kl;
  null !== c2 && void 0 !== c2 && (true === c2.unstable_strictMode && (e = true), void 0 !== c2.identifierPrefix && (f2 = c2.identifierPrefix), void 0 !== c2.onRecoverableError && (g2 = c2.onRecoverableError));
  b2 = el(b2, null, a, 1, null != c2 ? c2 : null, e, false, f2, g2);
  a[uf] = b2.current;
  sf(a);
  if (d2) for (a = 0; a < d2.length; a++) c2 = d2[a], e = c2._getVersion, e = e(c2._source), null == b2.mutableSourceEagerHydrationData ? b2.mutableSourceEagerHydrationData = [c2, e] : b2.mutableSourceEagerHydrationData.push(
    c2,
    e
  );
  return new ml(b2);
};
reactDom_production_min.render = function(a, b2, c2) {
  if (!ol(b2)) throw Error(p$1(200));
  return rl(null, a, b2, false, c2);
};
reactDom_production_min.unmountComponentAtNode = function(a) {
  if (!ol(a)) throw Error(p$1(40));
  return a._reactRootContainer ? (Rk(function() {
    rl(null, null, a, false, function() {
      a._reactRootContainer = null;
      a[uf] = null;
    });
  }), true) : false;
};
reactDom_production_min.unstable_batchedUpdates = Qk;
reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a, b2, c2, d2) {
  if (!ol(c2)) throw Error(p$1(200));
  if (null == a || void 0 === a._reactInternals) throw Error(p$1(38));
  return rl(a, b2, c2, false, d2);
};
reactDom_production_min.version = "18.3.1-next-f1338f8080-20240426";
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
    return;
  }
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
{
  checkDCE();
  reactDom.exports = reactDom_production_min;
}
var reactDomExports = reactDom.exports;
var createRoot;
var m$1 = reactDomExports;
{
  createRoot = m$1.createRoot;
  m$1.hydrateRoot;
}
/**
 * @remix-run/router v1.23.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$2() {
  _extends$2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$2.apply(this, arguments);
}
var Action;
(function(Action2) {
  Action2["Pop"] = "POP";
  Action2["Push"] = "PUSH";
  Action2["Replace"] = "REPLACE";
})(Action || (Action = {}));
const PopStateEventType = "popstate";
function createBrowserHistory(options) {
  if (options === void 0) {
    options = {};
  }
  function createBrowserLocation(window2, globalHistory) {
    let {
      pathname,
      search,
      hash
    } = window2.location;
    return createLocation(
      "",
      {
        pathname,
        search,
        hash
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createBrowserHref(window2, to2) {
    return typeof to2 === "string" ? to2 : createPath(to2);
  }
  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
}
function invariant$1(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
function warning(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined") console.warn(message);
    try {
      throw new Error(message);
    } catch (e) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location, index2) {
  return {
    usr: location.state,
    key: location.key,
    idx: index2
  };
}
function createLocation(current, to2, state, key) {
  if (state === void 0) {
    state = null;
  }
  let location = _extends$2({
    pathname: typeof current === "string" ? current : current.pathname,
    search: "",
    hash: ""
  }, typeof to2 === "string" ? parsePath(to2) : to2, {
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to2 && to2.key || key || createKey()
  });
  return location;
}
function createPath(_ref) {
  let {
    pathname = "/",
    search = "",
    hash = ""
  } = _ref;
  if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
  return pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substr(hashIndex);
      path = path.substr(0, hashIndex);
    }
    let searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substr(searchIndex);
      path = path.substr(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
  if (options === void 0) {
    options = {};
  }
  let {
    window: window2 = document.defaultView,
    v5Compat = false
  } = options;
  let globalHistory = window2.history;
  let action = Action.Pop;
  let listener = null;
  let index2 = getIndex();
  if (index2 == null) {
    index2 = 0;
    globalHistory.replaceState(_extends$2({}, globalHistory.state, {
      idx: index2
    }), "");
  }
  function getIndex() {
    let state = globalHistory.state || {
      idx: null
    };
    return state.idx;
  }
  function handlePop() {
    action = Action.Pop;
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index2;
    index2 = nextIndex;
    if (listener) {
      listener({
        action,
        location: history.location,
        delta
      });
    }
  }
  function push(to2, state) {
    action = Action.Push;
    let location = createLocation(history.location, to2, state);
    index2 = getIndex() + 1;
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      if (error instanceof DOMException && error.name === "DataCloneError") {
        throw error;
      }
      window2.location.assign(url);
    }
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 1
      });
    }
  }
  function replace(to2, state) {
    action = Action.Replace;
    let location = createLocation(history.location, to2, state);
    index2 = getIndex();
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 0
      });
    }
  }
  function createURL(to2) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
    let href = typeof to2 === "string" ? to2 : createPath(to2);
    href = href.replace(/ $/, "%20");
    invariant$1(base, "No window.location.(origin|href) available to create URL for href: " + href);
    return new URL(href, base);
  }
  let history = {
    get action() {
      return action;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to2) {
      return createHref(window2, to2);
    },
    createURL,
    encodeLocation(to2) {
      let url = createURL(to2);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace,
    go(n2) {
      return globalHistory.go(n2);
    }
  };
  return history;
}
var ResultType;
(function(ResultType2) {
  ResultType2["data"] = "data";
  ResultType2["deferred"] = "deferred";
  ResultType2["redirect"] = "redirect";
  ResultType2["error"] = "error";
})(ResultType || (ResultType = {}));
function matchRoutes(routes, locationArg, basename) {
  if (basename === void 0) {
    basename = "/";
  }
  return matchRoutesImpl(routes, locationArg, basename);
}
function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location.pathname || "/", basename);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i = 0; matches == null && i < branches.length; ++i) {
    let decoded = decodePath(pathname);
    matches = matchRouteBranch(branches[i], decoded);
  }
  return matches;
}
function flattenRoutes(routes, branches, parentsMeta, parentPath) {
  if (branches === void 0) {
    branches = [];
  }
  if (parentsMeta === void 0) {
    parentsMeta = [];
  }
  if (parentPath === void 0) {
    parentPath = "";
  }
  let flattenRoute = (route, index2, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index2,
      route
    };
    if (meta.relativePath.startsWith("/")) {
      invariant$1(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
      meta.relativePath = meta.relativePath.slice(parentPath.length);
    }
    let path = joinPaths([parentPath, meta.relativePath]);
    let routesMeta = parentsMeta.concat(meta);
    if (route.children && route.children.length > 0) {
      invariant$1(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
      );
      flattenRoutes(route.children, branches, routesMeta, path);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index2) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
      flattenRoute(route, index2);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index2, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0) return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a, b2) => a.score !== b2.score ? b2.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b2.routesMeta.map((meta) => meta.childrenIndex)));
}
const paramRe = /^:[\w-]+$/;
const dynamicSegmentValue = 3;
const indexRouteValue = 2;
const emptySegmentValue = 1;
const staticSegmentValue = 10;
const splatPenalty = -2;
const isSplat = (s) => s === "*";
function computeScore(path, index2) {
  let segments = path.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index2) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a, b2) {
  let siblings = a.length === b2.length && a.slice(0, -1).every((n2, i) => n2 === b2[i]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b2[b2.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname, allowPartial) {
  let {
    routesMeta
  } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i = 0; i < routesMeta.length; ++i) {
    let meta = routesMeta[i];
    let end = i === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match = matchPath({
      path: meta.relativePath,
      caseSensitive: meta.caseSensitive,
      end
    }, remainingPathname);
    let route = meta.route;
    if (!match) {
      return null;
    }
    Object.assign(matchedParams, match.params);
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
      route
    });
    if (match.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
    }
  }
  return matches;
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = {
      path: pattern,
      caseSensitive: false,
      end: true
    };
  }
  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
  let match = pathname.match(matcher);
  if (!match) return null;
  let matchedPathname = match[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match.slice(1);
  let params = compiledParams.reduce((memo2, _ref, index2) => {
    let {
      paramName,
      isOptional
    } = _ref;
    if (paramName === "*") {
      let splatValue = captureGroups[index2] || "";
      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
    }
    const value = captureGroups[index2];
    if (isOptional && !value) {
      memo2[paramName] = void 0;
    } else {
      memo2[paramName] = (value || "").replace(/%2F/g, "/");
    }
    return memo2;
  }, {});
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive, end) {
  if (caseSensitive === void 0) {
    caseSensitive = false;
  }
  if (end === void 0) {
    end = true;
  }
  warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
  let params = [];
  let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_2, paramName, isOptional) => {
    params.push({
      paramName,
      isOptional: isOptional != null
    });
    return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
  });
  if (path.endsWith("*")) {
    params.push({
      paramName: "*"
    });
    regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path !== "" && path !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else ;
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, params];
}
function decodePath(value) {
  try {
    return value.split("/").map((v2) => decodeURIComponent(v2).replace(/\//g, "%2F")).join("/");
  } catch (error) {
    warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
    return value;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/") return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
function resolvePath(to2, fromPathname) {
  if (fromPathname === void 0) {
    fromPathname = "/";
  }
  let {
    pathname: toPathname,
    search = "",
    hash = ""
  } = typeof to2 === "string" ? parsePath(to2) : to2;
  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
  return {
    pathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  let relativeSegments = relativePath.split("/");
  relativeSegments.forEach((segment) => {
    if (segment === "..") {
      if (segments.length > 1) segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char, field, dest, path) {
  return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
function getPathContributingMatches(matches) {
  return matches.filter((match, index2) => index2 === 0 || match.route.path && match.route.path.length > 0);
}
function getResolveToMatches(matches, v7_relativeSplatPath) {
  let pathMatches = getPathContributingMatches(matches);
  if (v7_relativeSplatPath) {
    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);
  }
  return pathMatches.map((match) => match.pathnameBase);
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
  if (isPathRelative === void 0) {
    isPathRelative = false;
  }
  let to2;
  if (typeof toArg === "string") {
    to2 = parsePath(toArg);
  } else {
    to2 = _extends$2({}, toArg);
    invariant$1(!to2.pathname || !to2.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to2));
    invariant$1(!to2.pathname || !to2.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to2));
    invariant$1(!to2.search || !to2.search.includes("#"), getInvalidPathError("#", "search", "hash", to2));
  }
  let isEmptyPath = toArg === "" || to2.pathname === "";
  let toPathname = isEmptyPath ? "/" : to2.pathname;
  let from2;
  if (toPathname == null) {
    from2 = locationPathname;
  } else {
    let routePathnameIndex = routePathnames.length - 1;
    if (!isPathRelative && toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      while (toSegments[0] === "..") {
        toSegments.shift();
        routePathnameIndex -= 1;
      }
      to2.pathname = toSegments.join("/");
    }
    from2 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path = resolvePath(to2, from2);
  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
    path.pathname += "/";
  }
  return path;
}
const joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
const normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
const normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
const normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
function isRouteErrorResponse(error) {
  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
const validMutationMethodsArr = ["post", "put", "patch", "delete"];
new Set(validMutationMethodsArr);
const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
new Set(validRequestMethodsArr);
/**
 * React Router v6.30.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$1() {
  _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
const DataRouterContext = /* @__PURE__ */ reactExports.createContext(null);
const DataRouterStateContext = /* @__PURE__ */ reactExports.createContext(null);
const NavigationContext = /* @__PURE__ */ reactExports.createContext(null);
const LocationContext = /* @__PURE__ */ reactExports.createContext(null);
const RouteContext = /* @__PURE__ */ reactExports.createContext({
  outlet: null,
  matches: [],
  isDataRoute: false
});
const RouteErrorContext = /* @__PURE__ */ reactExports.createContext(null);
function useHref(to2, _temp) {
  let {
    relative
  } = _temp === void 0 ? {} : _temp;
  !useInRouterContext() ? invariant$1(false) : void 0;
  let {
    basename,
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    hash,
    pathname,
    search
  } = useResolvedPath(to2, {
    relative
  });
  let joinedPathname = pathname;
  if (basename !== "/") {
    joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
  }
  return navigator2.createHref({
    pathname: joinedPathname,
    search,
    hash
  });
}
function useInRouterContext() {
  return reactExports.useContext(LocationContext) != null;
}
function useLocation() {
  !useInRouterContext() ? invariant$1(false) : void 0;
  return reactExports.useContext(LocationContext).location;
}
function useIsomorphicLayoutEffect$1(cb2) {
  let isStatic = reactExports.useContext(NavigationContext).static;
  if (!isStatic) {
    reactExports.useLayoutEffect(cb2);
  }
}
function useNavigate() {
  let {
    isDataRoute
  } = reactExports.useContext(RouteContext);
  return isDataRoute ? useNavigateStable() : useNavigateUnstable();
}
function useNavigateUnstable() {
  !useInRouterContext() ? invariant$1(false) : void 0;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  let {
    basename,
    future,
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
  let activeRef = reactExports.useRef(false);
  useIsomorphicLayoutEffect$1(() => {
    activeRef.current = true;
  });
  let navigate = reactExports.useCallback(function(to2, options) {
    if (options === void 0) {
      options = {};
    }
    if (!activeRef.current) return;
    if (typeof to2 === "number") {
      navigator2.go(to2);
      return;
    }
    let path = resolveTo(to2, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
    if (dataRouterContext == null && basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
  }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
  return navigate;
}
const OutletContext = /* @__PURE__ */ reactExports.createContext(null);
function useOutlet(context) {
  let outlet = reactExports.useContext(RouteContext).outlet;
  if (outlet) {
    return /* @__PURE__ */ reactExports.createElement(OutletContext.Provider, {
      value: context
    }, outlet);
  }
  return outlet;
}
function useParams() {
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let routeMatch = matches[matches.length - 1];
  return routeMatch ? routeMatch.params : {};
}
function useResolvedPath(to2, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2;
  let {
    future
  } = reactExports.useContext(NavigationContext);
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
  return reactExports.useMemo(() => resolveTo(to2, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to2, routePathnamesJson, locationPathname, relative]);
}
function useRoutes(routes, locationArg) {
  return useRoutesImpl(routes, locationArg);
}
function useRoutesImpl(routes, locationArg, dataRouterState, future) {
  !useInRouterContext() ? invariant$1(false) : void 0;
  let {
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    matches: parentMatches
  } = reactExports.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  routeMatch && routeMatch.route;
  let locationFromContext = useLocation();
  let location;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant$1(false) : void 0;
    location = parsedLocationArg;
  } else {
    location = locationFromContext;
  }
  let pathname = location.pathname || "/";
  let remainingPathname = pathname;
  if (parentPathnameBase !== "/") {
    let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
    let segments = pathname.replace(/^\//, "").split("/");
    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
  }
  let matches = matchRoutes(routes, {
    pathname: remainingPathname
  });
  let renderedMatches = _renderMatches(matches && matches.map((match) => Object.assign({}, match, {
    params: Object.assign({}, parentParams, match.params),
    pathname: joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
    ]),
    pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
    ])
  })), parentMatches, dataRouterState, future);
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
      value: {
        location: _extends$1({
          pathname: "/",
          search: "",
          hash: "",
          state: null,
          key: "default"
        }, location),
        navigationType: Action.Pop
      }
    }, renderedMatches);
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error = useRouteError();
  let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
  let stack = error instanceof Error ? error.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  };
  let devInfo = null;
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ reactExports.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message), stack ? /* @__PURE__ */ reactExports.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
const defaultErrorElement = /* @__PURE__ */ reactExports.createElement(DefaultErrorComponent, null);
class RenderErrorBoundary extends reactExports.Component {
  constructor(props) {
    super(props);
    this.state = {
      location: props.location,
      revalidation: props.revalidation,
      error: props.error
    };
  }
  static getDerivedStateFromError(error) {
    return {
      error
    };
  }
  static getDerivedStateFromProps(props, state) {
    if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
      return {
        error: props.error,
        location: props.location,
        revalidation: props.revalidation
      };
    }
    return {
      error: props.error !== void 0 ? props.error : state.error,
      location: state.location,
      revalidation: props.revalidation || state.revalidation
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error("React Router caught the following error during render", error, errorInfo);
  }
  render() {
    return this.state.error !== void 0 ? /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
      value: this.props.routeContext
    }, /* @__PURE__ */ reactExports.createElement(RouteErrorContext.Provider, {
      value: this.state.error,
      children: this.props.component
    })) : this.props.children;
  }
}
function RenderedRoute(_ref) {
  let {
    routeContext,
    match,
    children
  } = _ref;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
  }
  return /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
    value: routeContext
  }, children);
}
function _renderMatches(matches, parentMatches, dataRouterState, future) {
  var _dataRouterState;
  if (parentMatches === void 0) {
    parentMatches = [];
  }
  if (dataRouterState === void 0) {
    dataRouterState = null;
  }
  if (future === void 0) {
    future = null;
  }
  if (matches == null) {
    var _future;
    if (!dataRouterState) {
      return null;
    }
    if (dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex((m2) => m2.route.id && (errors == null ? void 0 : errors[m2.route.id]) !== void 0);
    !(errorIndex >= 0) ? invariant$1(false) : void 0;
    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  let renderFallback = false;
  let fallbackIndex = -1;
  if (dataRouterState && future && future.v7_partialHydration) {
    for (let i = 0; i < renderedMatches.length; i++) {
      let match = renderedMatches[i];
      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
        fallbackIndex = i;
      }
      if (match.route.id) {
        let {
          loaderData,
          errors: errors2
        } = dataRouterState;
        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === void 0 && (!errors2 || errors2[match.route.id] === void 0);
        if (match.route.lazy || needsToRunLoader) {
          renderFallback = true;
          if (fallbackIndex >= 0) {
            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
          } else {
            renderedMatches = [renderedMatches[0]];
          }
          break;
        }
      }
    }
  }
  return renderedMatches.reduceRight((outlet, match, index2) => {
    let error;
    let shouldRenderHydrateFallback = false;
    let errorElement = null;
    let hydrateFallbackElement = null;
    if (dataRouterState) {
      error = errors && match.route.id ? errors[match.route.id] : void 0;
      errorElement = match.route.errorElement || defaultErrorElement;
      if (renderFallback) {
        if (fallbackIndex < 0 && index2 === 0) {
          warningOnce("route-fallback");
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = null;
        } else if (fallbackIndex === index2) {
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = match.route.hydrateFallbackElement || null;
        }
      }
    }
    let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
    let getChildren = () => {
      let children;
      if (error) {
        children = errorElement;
      } else if (shouldRenderHydrateFallback) {
        children = hydrateFallbackElement;
      } else if (match.route.Component) {
        children = /* @__PURE__ */ reactExports.createElement(match.route.Component, null);
      } else if (match.route.element) {
        children = match.route.element;
      } else {
        children = outlet;
      }
      return /* @__PURE__ */ reactExports.createElement(RenderedRoute, {
        match,
        routeContext: {
          outlet,
          matches: matches2,
          isDataRoute: dataRouterState != null
        },
        children
      });
    };
    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index2 === 0) ? /* @__PURE__ */ reactExports.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      revalidation: dataRouterState.revalidation,
      component: errorElement,
      error,
      children: getChildren(),
      routeContext: {
        outlet: null,
        matches: matches2,
        isDataRoute: true
      }
    }) : getChildren();
  }, null);
}
var DataRouterHook$1 = /* @__PURE__ */ function(DataRouterHook2) {
  DataRouterHook2["UseBlocker"] = "useBlocker";
  DataRouterHook2["UseRevalidator"] = "useRevalidator";
  DataRouterHook2["UseNavigateStable"] = "useNavigate";
  return DataRouterHook2;
}(DataRouterHook$1 || {});
var DataRouterStateHook$1 = /* @__PURE__ */ function(DataRouterStateHook2) {
  DataRouterStateHook2["UseBlocker"] = "useBlocker";
  DataRouterStateHook2["UseLoaderData"] = "useLoaderData";
  DataRouterStateHook2["UseActionData"] = "useActionData";
  DataRouterStateHook2["UseRouteError"] = "useRouteError";
  DataRouterStateHook2["UseNavigation"] = "useNavigation";
  DataRouterStateHook2["UseRouteLoaderData"] = "useRouteLoaderData";
  DataRouterStateHook2["UseMatches"] = "useMatches";
  DataRouterStateHook2["UseRevalidator"] = "useRevalidator";
  DataRouterStateHook2["UseNavigateStable"] = "useNavigate";
  DataRouterStateHook2["UseRouteId"] = "useRouteId";
  return DataRouterStateHook2;
}(DataRouterStateHook$1 || {});
function useDataRouterContext$1(hookName) {
  let ctx = reactExports.useContext(DataRouterContext);
  !ctx ? invariant$1(false) : void 0;
  return ctx;
}
function useDataRouterState(hookName) {
  let state = reactExports.useContext(DataRouterStateContext);
  !state ? invariant$1(false) : void 0;
  return state;
}
function useRouteContext(hookName) {
  let route = reactExports.useContext(RouteContext);
  !route ? invariant$1(false) : void 0;
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext();
  let thisRoute = route.matches[route.matches.length - 1];
  !thisRoute.route.id ? invariant$1(false) : void 0;
  return thisRoute.route.id;
}
function useRouteError() {
  var _state$errors;
  let error = reactExports.useContext(RouteErrorContext);
  let state = useDataRouterState();
  let routeId = useCurrentRouteId();
  if (error !== void 0) {
    return error;
  }
  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
}
function useNavigateStable() {
  let {
    router
  } = useDataRouterContext$1(DataRouterHook$1.UseNavigateStable);
  let id2 = useCurrentRouteId(DataRouterStateHook$1.UseNavigateStable);
  let activeRef = reactExports.useRef(false);
  useIsomorphicLayoutEffect$1(() => {
    activeRef.current = true;
  });
  let navigate = reactExports.useCallback(function(to2, options) {
    if (options === void 0) {
      options = {};
    }
    if (!activeRef.current) return;
    if (typeof to2 === "number") {
      router.navigate(to2);
    } else {
      router.navigate(to2, _extends$1({
        fromRouteId: id2
      }, options));
    }
  }, [router, id2]);
  return navigate;
}
const alreadyWarned$1 = {};
function warningOnce(key, cond, message) {
  if (!alreadyWarned$1[key]) {
    alreadyWarned$1[key] = true;
  }
}
function logV6DeprecationWarnings(renderFuture, routerFuture) {
  if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === void 0) ;
  if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === void 0 && true) ;
}
function Navigate(_ref4) {
  let {
    to: to2,
    replace: replace2,
    state,
    relative
  } = _ref4;
  !useInRouterContext() ? invariant$1(false) : void 0;
  let {
    future,
    static: isStatic
  } = reactExports.useContext(NavigationContext);
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let navigate = useNavigate();
  let path = resolveTo(to2, getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === "path");
  let jsonPath = JSON.stringify(path);
  reactExports.useEffect(() => navigate(JSON.parse(jsonPath), {
    replace: replace2,
    state,
    relative
  }), [navigate, jsonPath, relative, replace2, state]);
  return null;
}
function Outlet(props) {
  return useOutlet(props.context);
}
function Route(_props) {
  invariant$1(false);
}
function Router(_ref5) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = false,
    future
  } = _ref5;
  !!useInRouterContext() ? invariant$1(false) : void 0;
  let basename = basenameProp.replace(/^\/*/, "/");
  let navigationContext = reactExports.useMemo(() => ({
    basename,
    navigator: navigator2,
    static: staticProp,
    future: _extends$1({
      v7_relativeSplatPath: false
    }, future)
  }), [basename, future, navigator2, staticProp]);
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search = "",
    hash = "",
    state = null,
    key = "default"
  } = locationProp;
  let locationContext = reactExports.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search,
        hash,
        state,
        key
      },
      navigationType
    };
  }, [basename, pathname, search, hash, state, key, navigationType]);
  if (locationContext == null) {
    return null;
  }
  return /* @__PURE__ */ reactExports.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
    children,
    value: locationContext
  }));
}
function Routes(_ref6) {
  let {
    children,
    location
  } = _ref6;
  return useRoutes(createRoutesFromChildren(children), location);
}
new Promise(() => {
});
function createRoutesFromChildren(children, parentPath) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  let routes = [];
  reactExports.Children.forEach(children, (element, index2) => {
    if (!/* @__PURE__ */ reactExports.isValidElement(element)) {
      return;
    }
    let treePath = [...parentPath, index2];
    if (element.type === reactExports.Fragment) {
      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
      return;
    }
    !(element.type === Route) ? invariant$1(false) : void 0;
    !(!element.props.index || !element.props.children) ? invariant$1(false) : void 0;
    let route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      Component: element.props.Component,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      errorElement: element.props.errorElement,
      ErrorBoundary: element.props.ErrorBoundary,
      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle,
      lazy: element.props.lazy
    };
    if (element.props.children) {
      route.children = createRoutesFromChildren(element.props.children, treePath);
    }
    routes.push(route);
  });
  return routes;
}
/**
 * React Router DOM v6.30.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function shouldProcessLinkClick(event, target) {
  return event.button === 0 && // Ignore everything but left clicks
  (!target || target === "_self") && // Let browser handle "target=_blank" etc.
  !isModifiedEvent(event);
}
const _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "viewTransition"], _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "viewTransition", "children"];
const REACT_ROUTER_VERSION = "6";
try {
  window.__reactRouterVersion = REACT_ROUTER_VERSION;
} catch (e) {
}
const ViewTransitionContext = /* @__PURE__ */ reactExports.createContext({
  isTransitioning: false
});
const START_TRANSITION = "startTransition";
const startTransitionImpl = React$3[START_TRANSITION];
function BrowserRouter(_ref4) {
  let {
    basename,
    children,
    future,
    window: window2
  } = _ref4;
  let historyRef = reactExports.useRef();
  if (historyRef.current == null) {
    historyRef.current = createBrowserHistory({
      window: window2,
      v5Compat: true
    });
  }
  let history = historyRef.current;
  let [state, setStateImpl] = reactExports.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = reactExports.useCallback((newState) => {
    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  reactExports.useLayoutEffect(() => history.listen(setState), [history, setState]);
  reactExports.useEffect(() => logV6DeprecationWarnings(future), [future]);
  return /* @__PURE__ */ reactExports.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future
  });
}
const isBrowser$2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
const ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
const Link = /* @__PURE__ */ reactExports.forwardRef(function LinkWithRef(_ref7, ref) {
  let {
    onClick,
    relative,
    reloadDocument,
    replace: replace2,
    state,
    target,
    to: to2,
    preventScrollReset,
    viewTransition
  } = _ref7, rest = _objectWithoutPropertiesLoose(_ref7, _excluded);
  let {
    basename
  } = reactExports.useContext(NavigationContext);
  let absoluteHref;
  let isExternal = false;
  if (typeof to2 === "string" && ABSOLUTE_URL_REGEX.test(to2)) {
    absoluteHref = to2;
    if (isBrowser$2) {
      try {
        let currentUrl = new URL(window.location.href);
        let targetUrl = to2.startsWith("//") ? new URL(currentUrl.protocol + to2) : new URL(to2);
        let path = stripBasename(targetUrl.pathname, basename);
        if (targetUrl.origin === currentUrl.origin && path != null) {
          to2 = path + targetUrl.search + targetUrl.hash;
        } else {
          isExternal = true;
        }
      } catch (e) {
      }
    }
  }
  let href = useHref(to2, {
    relative
  });
  let internalOnClick = useLinkClickHandler(to2, {
    replace: replace2,
    state,
    target,
    preventScrollReset,
    relative,
    viewTransition
  });
  function handleClick(event) {
    if (onClick) onClick(event);
    if (!event.defaultPrevented) {
      internalOnClick(event);
    }
  }
  return (
    // eslint-disable-next-line jsx-a11y/anchor-has-content
    /* @__PURE__ */ reactExports.createElement("a", _extends({}, rest, {
      href: absoluteHref || href,
      onClick: isExternal || reloadDocument ? onClick : handleClick,
      ref,
      target
    }))
  );
});
const NavLink = /* @__PURE__ */ reactExports.forwardRef(function NavLinkWithRef(_ref8, ref) {
  let {
    "aria-current": ariaCurrentProp = "page",
    caseSensitive = false,
    className: classNameProp = "",
    end = false,
    style: styleProp,
    to: to2,
    viewTransition,
    children
  } = _ref8, rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);
  let path = useResolvedPath(to2, {
    relative: rest.relative
  });
  let location = useLocation();
  let routerState = reactExports.useContext(DataRouterStateContext);
  let {
    navigator: navigator2,
    basename
  } = reactExports.useContext(NavigationContext);
  let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
  // eslint-disable-next-line react-hooks/rules-of-hooks
  useViewTransitionState(path) && viewTransition === true;
  let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
  let locationPathname = location.pathname;
  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
  if (!caseSensitive) {
    locationPathname = locationPathname.toLowerCase();
    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
    toPathname = toPathname.toLowerCase();
  }
  if (nextLocationPathname && basename) {
    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
  }
  const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
  let renderProps = {
    isActive,
    isPending,
    isTransitioning
  };
  let ariaCurrent = isActive ? ariaCurrentProp : void 0;
  let className;
  if (typeof classNameProp === "function") {
    className = classNameProp(renderProps);
  } else {
    className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");
  }
  let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
  return /* @__PURE__ */ reactExports.createElement(Link, _extends({}, rest, {
    "aria-current": ariaCurrent,
    className,
    ref,
    style,
    to: to2,
    viewTransition
  }), typeof children === "function" ? children(renderProps) : children);
});
var DataRouterHook;
(function(DataRouterHook2) {
  DataRouterHook2["UseScrollRestoration"] = "useScrollRestoration";
  DataRouterHook2["UseSubmit"] = "useSubmit";
  DataRouterHook2["UseSubmitFetcher"] = "useSubmitFetcher";
  DataRouterHook2["UseFetcher"] = "useFetcher";
  DataRouterHook2["useViewTransitionState"] = "useViewTransitionState";
})(DataRouterHook || (DataRouterHook = {}));
var DataRouterStateHook;
(function(DataRouterStateHook2) {
  DataRouterStateHook2["UseFetcher"] = "useFetcher";
  DataRouterStateHook2["UseFetchers"] = "useFetchers";
  DataRouterStateHook2["UseScrollRestoration"] = "useScrollRestoration";
})(DataRouterStateHook || (DataRouterStateHook = {}));
function useDataRouterContext(hookName) {
  let ctx = reactExports.useContext(DataRouterContext);
  !ctx ? invariant$1(false) : void 0;
  return ctx;
}
function useLinkClickHandler(to2, _temp) {
  let {
    target,
    replace: replaceProp,
    state,
    preventScrollReset,
    relative,
    viewTransition
  } = _temp === void 0 ? {} : _temp;
  let navigate = useNavigate();
  let location = useLocation();
  let path = useResolvedPath(to2, {
    relative
  });
  return reactExports.useCallback((event) => {
    if (shouldProcessLinkClick(event, target)) {
      event.preventDefault();
      let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
      navigate(to2, {
        replace: replace2,
        state,
        preventScrollReset,
        relative,
        viewTransition
      });
    }
  }, [location, navigate, path, replaceProp, state, target, to2, preventScrollReset, relative, viewTransition]);
}
function useViewTransitionState(to2, opts) {
  if (opts === void 0) {
    opts = {};
  }
  let vtContext = reactExports.useContext(ViewTransitionContext);
  !(vtContext != null) ? invariant$1(false) : void 0;
  let {
    basename
  } = useDataRouterContext(DataRouterHook.useViewTransitionState);
  let path = useResolvedPath(to2, {
    relative: opts.relative
  });
  if (!vtContext.isTransitioning) {
    return false;
  }
  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
}
function r(e) {
  var t2, f2, n2 = "";
  if ("string" == typeof e || "number" == typeof e) n2 += e;
  else if ("object" == typeof e) if (Array.isArray(e)) {
    var o = e.length;
    for (t2 = 0; t2 < o; t2++) e[t2] && (f2 = r(e[t2])) && (n2 && (n2 += " "), n2 += f2);
  } else for (f2 in e) e[f2] && (n2 && (n2 += " "), n2 += f2);
  return n2;
}
function clsx() {
  for (var e, t2, f2 = 0, n2 = "", o = arguments.length; f2 < o; f2++) (e = arguments[f2]) && (t2 = r(e)) && (n2 && (n2 += " "), n2 += t2);
  return n2;
}
const c = (e) => "number" == typeof e && !isNaN(e), d = (e) => "string" == typeof e, u = (e) => "function" == typeof e, p = (e) => d(e) || u(e) ? e : null, m = (e) => reactExports.isValidElement(e) || d(e) || u(e) || c(e);
function f(e, t2, n2) {
  void 0 === n2 && (n2 = 300);
  const { scrollHeight: o, style: s } = e;
  requestAnimationFrame(() => {
    s.minHeight = "initial", s.height = o + "px", s.transition = `all ${n2}ms`, requestAnimationFrame(() => {
      s.height = "0", s.padding = "0", s.margin = "0", setTimeout(t2, n2);
    });
  });
}
function g(t2) {
  let { enter: a, exit: r2, appendPosition: i = false, collapse: l2 = true, collapseDuration: c2 = 300 } = t2;
  return function(t3) {
    let { children: d2, position: u2, preventExitTransition: p2, done: m2, nodeRef: g2, isIn: y2, playToast: v2 } = t3;
    const h3 = i ? `${a}--${u2}` : a, T2 = i ? `${r2}--${u2}` : r2, E2 = reactExports.useRef(0);
    return reactExports.useLayoutEffect(() => {
      const e = g2.current, t4 = h3.split(" "), n2 = (o) => {
        o.target === g2.current && (v2(), e.removeEventListener("animationend", n2), e.removeEventListener("animationcancel", n2), 0 === E2.current && "animationcancel" !== o.type && e.classList.remove(...t4));
      };
      e.classList.add(...t4), e.addEventListener("animationend", n2), e.addEventListener("animationcancel", n2);
    }, []), reactExports.useEffect(() => {
      const e = g2.current, t4 = () => {
        e.removeEventListener("animationend", t4), l2 ? f(e, m2, c2) : m2();
      };
      y2 || (p2 ? t4() : (E2.current = 1, e.className += ` ${T2}`, e.addEventListener("animationend", t4)));
    }, [y2]), React$2.createElement(React$2.Fragment, null, d2);
  };
}
function y(e, t2) {
  return null != e ? { content: e.content, containerId: e.props.containerId, id: e.props.toastId, theme: e.props.theme, type: e.props.type, data: e.props.data || {}, isLoading: e.props.isLoading, icon: e.props.icon, status: t2 } : {};
}
const v = /* @__PURE__ */ new Map();
let h = [];
const T = /* @__PURE__ */ new Set(), E = (e) => T.forEach((t2) => t2(e)), b = () => v.size > 0;
function I(e, t2) {
  var n2;
  if (t2) return !(null == (n2 = v.get(t2)) || !n2.isToastActive(e));
  let o = false;
  return v.forEach((t3) => {
    t3.isToastActive(e) && (o = true);
  }), o;
}
function _(e, t2) {
  m(e) && (b() || h.push({ content: e, options: t2 }), v.forEach((n2) => {
    n2.buildToast(e, t2);
  }));
}
function C(e, t2) {
  v.forEach((n2) => {
    null != t2 && null != t2 && t2.containerId ? (null == t2 ? void 0 : t2.containerId) === n2.id && n2.toggle(e, null == t2 ? void 0 : t2.id) : n2.toggle(e, null == t2 ? void 0 : t2.id);
  });
}
function L(e) {
  const { subscribe: o, getSnapshot: s, setProps: i } = reactExports.useRef(function(e2) {
    const n2 = e2.containerId || 1;
    return { subscribe(o2) {
      const s2 = /* @__PURE__ */ function(e3, n3, o3) {
        let s3 = 1, r3 = 0, i2 = [], l3 = [], f2 = [], g2 = n3;
        const v2 = /* @__PURE__ */ new Map(), h3 = /* @__PURE__ */ new Set(), T2 = () => {
          f2 = Array.from(v2.values()), h3.forEach((e4) => e4());
        }, E2 = (e4) => {
          l3 = null == e4 ? [] : l3.filter((t2) => t2 !== e4), T2();
        }, b2 = (e4) => {
          const { toastId: n4, onOpen: s4, updateId: a, children: r4 } = e4.props, i3 = null == a;
          e4.staleId && v2.delete(e4.staleId), v2.set(n4, e4), l3 = [...l3, e4.props.toastId].filter((t2) => t2 !== e4.staleId), T2(), o3(y(e4, i3 ? "added" : "updated")), i3 && u(s4) && s4(reactExports.isValidElement(r4) && r4.props);
        };
        return { id: e3, props: g2, observe: (e4) => (h3.add(e4), () => h3.delete(e4)), toggle: (e4, t2) => {
          v2.forEach((n4) => {
            null != t2 && t2 !== n4.props.toastId || u(n4.toggle) && n4.toggle(e4);
          });
        }, removeToast: E2, toasts: v2, clearQueue: () => {
          r3 -= i2.length, i2 = [];
        }, buildToast: (n4, l4) => {
          if (((t2) => {
            let { containerId: n5, toastId: o4, updateId: s4 } = t2;
            const a = n5 ? n5 !== e3 : 1 !== e3, r4 = v2.has(o4) && null == s4;
            return a || r4;
          })(l4)) return;
          const { toastId: f3, updateId: h4, data: I2, staleId: _2, delay: C2 } = l4, L2 = () => {
            E2(f3);
          }, N2 = null == h4;
          N2 && r3++;
          const $2 = { ...g2, style: g2.toastStyle, key: s3++, ...Object.fromEntries(Object.entries(l4).filter((e4) => {
            let [t2, n5] = e4;
            return null != n5;
          })), toastId: f3, updateId: h4, data: I2, closeToast: L2, isIn: false, className: p(l4.className || g2.toastClassName), bodyClassName: p(l4.bodyClassName || g2.bodyClassName), progressClassName: p(l4.progressClassName || g2.progressClassName), autoClose: !l4.isLoading && (w2 = l4.autoClose, k2 = g2.autoClose, false === w2 || c(w2) && w2 > 0 ? w2 : k2), deleteToast() {
            const e4 = v2.get(f3), { onClose: n5, children: s4 } = e4.props;
            u(n5) && n5(reactExports.isValidElement(s4) && s4.props), o3(y(e4, "removed")), v2.delete(f3), r3--, r3 < 0 && (r3 = 0), i2.length > 0 ? b2(i2.shift()) : T2();
          } };
          var w2, k2;
          $2.closeButton = g2.closeButton, false === l4.closeButton || m(l4.closeButton) ? $2.closeButton = l4.closeButton : true === l4.closeButton && ($2.closeButton = !m(g2.closeButton) || g2.closeButton);
          let P2 = n4;
          reactExports.isValidElement(n4) && !d(n4.type) ? P2 = reactExports.cloneElement(n4, { closeToast: L2, toastProps: $2, data: I2 }) : u(n4) && (P2 = n4({ closeToast: L2, toastProps: $2, data: I2 }));
          const M2 = { content: P2, props: $2, staleId: _2 };
          g2.limit && g2.limit > 0 && r3 > g2.limit && N2 ? i2.push(M2) : c(C2) ? setTimeout(() => {
            b2(M2);
          }, C2) : b2(M2);
        }, setProps(e4) {
          g2 = e4;
        }, setToggle: (e4, t2) => {
          v2.get(e4).toggle = t2;
        }, isToastActive: (e4) => l3.some((t2) => t2 === e4), getSnapshot: () => f2 };
      }(n2, e2, E);
      v.set(n2, s2);
      const r2 = s2.observe(o2);
      return h.forEach((e3) => _(e3.content, e3.options)), h = [], () => {
        r2(), v.delete(n2);
      };
    }, setProps(e3) {
      var t2;
      null == (t2 = v.get(n2)) || t2.setProps(e3);
    }, getSnapshot() {
      var e3;
      return null == (e3 = v.get(n2)) ? void 0 : e3.getSnapshot();
    } };
  }(e)).current;
  i(e);
  const l2 = reactExports.useSyncExternalStore(o, s, s);
  return { getToastToRender: function(t2) {
    if (!l2) return [];
    const n2 = /* @__PURE__ */ new Map();
    return e.newestOnTop && l2.reverse(), l2.forEach((e2) => {
      const { position: t3 } = e2.props;
      n2.has(t3) || n2.set(t3, []), n2.get(t3).push(e2);
    }), Array.from(n2, (e2) => t2(e2[0], e2[1]));
  }, isToastActive: I, count: null == l2 ? void 0 : l2.length };
}
function N(e) {
  const [t2, o] = reactExports.useState(false), [a, r2] = reactExports.useState(false), l2 = reactExports.useRef(null), c2 = reactExports.useRef({ start: 0, delta: 0, removalDistance: 0, canCloseOnClick: true, canDrag: false, didMove: false }).current, { autoClose: d2, pauseOnHover: u2, closeToast: p2, onClick: m2, closeOnClick: f2 } = e;
  var g2, y2;
  function h3() {
    o(true);
  }
  function T2() {
    o(false);
  }
  function E2(n2) {
    const o2 = l2.current;
    c2.canDrag && o2 && (c2.didMove = true, t2 && T2(), c2.delta = "x" === e.draggableDirection ? n2.clientX - c2.start : n2.clientY - c2.start, c2.start !== n2.clientX && (c2.canCloseOnClick = false), o2.style.transform = `translate3d(${"x" === e.draggableDirection ? `${c2.delta}px, var(--y)` : `0, calc(${c2.delta}px + var(--y))`},0)`, o2.style.opacity = "" + (1 - Math.abs(c2.delta / c2.removalDistance)));
  }
  function b2() {
    document.removeEventListener("pointermove", E2), document.removeEventListener("pointerup", b2);
    const t3 = l2.current;
    if (c2.canDrag && c2.didMove && t3) {
      if (c2.canDrag = false, Math.abs(c2.delta) > c2.removalDistance) return r2(true), e.closeToast(), void e.collapseAll();
      t3.style.transition = "transform 0.2s, opacity 0.2s", t3.style.removeProperty("transform"), t3.style.removeProperty("opacity");
    }
  }
  null == (y2 = v.get((g2 = { id: e.toastId, containerId: e.containerId, fn: o }).containerId || 1)) || y2.setToggle(g2.id, g2.fn), reactExports.useEffect(() => {
    if (e.pauseOnFocusLoss) return document.hasFocus() || T2(), window.addEventListener("focus", h3), window.addEventListener("blur", T2), () => {
      window.removeEventListener("focus", h3), window.removeEventListener("blur", T2);
    };
  }, [e.pauseOnFocusLoss]);
  const I2 = { onPointerDown: function(t3) {
    if (true === e.draggable || e.draggable === t3.pointerType) {
      c2.didMove = false, document.addEventListener("pointermove", E2), document.addEventListener("pointerup", b2);
      const n2 = l2.current;
      c2.canCloseOnClick = true, c2.canDrag = true, n2.style.transition = "none", "x" === e.draggableDirection ? (c2.start = t3.clientX, c2.removalDistance = n2.offsetWidth * (e.draggablePercent / 100)) : (c2.start = t3.clientY, c2.removalDistance = n2.offsetHeight * (80 === e.draggablePercent ? 1.5 * e.draggablePercent : e.draggablePercent) / 100);
    }
  }, onPointerUp: function(t3) {
    const { top: n2, bottom: o2, left: s, right: a2 } = l2.current.getBoundingClientRect();
    "touchend" !== t3.nativeEvent.type && e.pauseOnHover && t3.clientX >= s && t3.clientX <= a2 && t3.clientY >= n2 && t3.clientY <= o2 ? T2() : h3();
  } };
  return d2 && u2 && (I2.onMouseEnter = T2, e.stacked || (I2.onMouseLeave = h3)), f2 && (I2.onClick = (e2) => {
    m2 && m2(e2), c2.canCloseOnClick && p2();
  }), { playToast: h3, pauseToast: T2, isRunning: t2, preventExitTransition: a, toastRef: l2, eventHandlers: I2 };
}
function $(t2) {
  let { delay: n2, isRunning: o, closeToast: s, type: a = "default", hide: r2, className: i, style: c2, controlledProgress: d2, progress: p2, rtl: m2, isIn: f2, theme: g2 } = t2;
  const y2 = r2 || d2 && 0 === p2, v2 = { ...c2, animationDuration: `${n2}ms`, animationPlayState: o ? "running" : "paused" };
  d2 && (v2.transform = `scaleX(${p2})`);
  const h3 = clsx("Toastify__progress-bar", d2 ? "Toastify__progress-bar--controlled" : "Toastify__progress-bar--animated", `Toastify__progress-bar-theme--${g2}`, `Toastify__progress-bar--${a}`, { "Toastify__progress-bar--rtl": m2 }), T2 = u(i) ? i({ rtl: m2, type: a, defaultClassName: h3 }) : clsx(h3, i), E2 = { [d2 && p2 >= 1 ? "onTransitionEnd" : "onAnimationEnd"]: d2 && p2 < 1 ? null : () => {
    f2 && s();
  } };
  return React$2.createElement("div", { className: "Toastify__progress-bar--wrp", "data-hidden": y2 }, React$2.createElement("div", { className: `Toastify__progress-bar--bg Toastify__progress-bar-theme--${g2} Toastify__progress-bar--${a}` }), React$2.createElement("div", { role: "progressbar", "aria-hidden": y2 ? "true" : "false", "aria-label": "notification timer", className: T2, style: v2, ...E2 }));
}
let w = 1;
const k = () => "" + w++;
function P(e) {
  return e && (d(e.toastId) || c(e.toastId)) ? e.toastId : k();
}
function M(e, t2) {
  return _(e, t2), t2.toastId;
}
function x(e, t2) {
  return { ...t2, type: t2 && t2.type || e, toastId: P(t2) };
}
function A(e) {
  return (t2, n2) => M(t2, x(e, n2));
}
function B(e, t2) {
  return M(e, x("default", t2));
}
B.loading = (e, t2) => M(e, x("default", { isLoading: true, autoClose: false, closeOnClick: false, closeButton: false, draggable: false, ...t2 })), B.promise = function(e, t2, n2) {
  let o, { pending: s, error: a, success: r2 } = t2;
  s && (o = d(s) ? B.loading(s, n2) : B.loading(s.render, { ...n2, ...s }));
  const i = { isLoading: null, autoClose: null, closeOnClick: null, closeButton: null, draggable: null }, l2 = (e2, t3, s2) => {
    if (null == t3) return void B.dismiss(o);
    const a2 = { type: e2, ...i, ...n2, data: s2 }, r3 = d(t3) ? { render: t3 } : t3;
    return o ? B.update(o, { ...a2, ...r3 }) : B(r3.render, { ...a2, ...r3 }), s2;
  }, c2 = u(e) ? e() : e;
  return c2.then((e2) => l2("success", r2, e2)).catch((e2) => l2("error", a, e2)), c2;
}, B.success = A("success"), B.info = A("info"), B.error = A("error"), B.warning = A("warning"), B.warn = B.warning, B.dark = (e, t2) => M(e, x("default", { theme: "dark", ...t2 })), B.dismiss = function(e) {
  !function(e2) {
    var t2;
    if (b()) {
      if (null == e2 || d(t2 = e2) || c(t2)) v.forEach((t3) => {
        t3.removeToast(e2);
      });
      else if (e2 && ("containerId" in e2 || "id" in e2)) {
        const t3 = v.get(e2.containerId);
        t3 ? t3.removeToast(e2.id) : v.forEach((t4) => {
          t4.removeToast(e2.id);
        });
      }
    } else h = h.filter((t3) => null != e2 && t3.options.toastId !== e2);
  }(e);
}, B.clearWaitingQueue = function(e) {
  void 0 === e && (e = {}), v.forEach((t2) => {
    !t2.props.limit || e.containerId && t2.id !== e.containerId || t2.clearQueue();
  });
}, B.isActive = I, B.update = function(e, t2) {
  void 0 === t2 && (t2 = {});
  const n2 = ((e2, t3) => {
    var n3;
    let { containerId: o } = t3;
    return null == (n3 = v.get(o || 1)) ? void 0 : n3.toasts.get(e2);
  })(e, t2);
  if (n2) {
    const { props: o, content: s } = n2, a = { delay: 100, ...o, ...t2, toastId: t2.toastId || e, updateId: k() };
    a.toastId !== e && (a.staleId = e);
    const r2 = a.render || s;
    delete a.render, M(r2, a);
  }
}, B.done = (e) => {
  B.update(e, { progress: 1 });
}, B.onChange = function(e) {
  return T.add(e), () => {
    T.delete(e);
  };
}, B.play = (e) => C(true, e), B.pause = (e) => C(false, e);
const O = "undefined" != typeof window ? reactExports.useLayoutEffect : reactExports.useEffect, D = (t2) => {
  let { theme: n2, type: o, isLoading: s, ...a } = t2;
  return React$2.createElement("svg", { viewBox: "0 0 24 24", width: "100%", height: "100%", fill: "colored" === n2 ? "currentColor" : `var(--toastify-icon-color-${o})`, ...a });
}, z = { info: function(t2) {
  return React$2.createElement(D, { ...t2 }, React$2.createElement("path", { d: "M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z" }));
}, warning: function(t2) {
  return React$2.createElement(D, { ...t2 }, React$2.createElement("path", { d: "M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z" }));
}, success: function(t2) {
  return React$2.createElement(D, { ...t2 }, React$2.createElement("path", { d: "M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z" }));
}, error: function(t2) {
  return React$2.createElement(D, { ...t2 }, React$2.createElement("path", { d: "M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z" }));
}, spinner: function() {
  return React$2.createElement("div", { className: "Toastify__spinner" });
} }, R = (n2) => {
  const { isRunning: o, preventExitTransition: s, toastRef: r2, eventHandlers: i, playToast: c2 } = N(n2), { closeButton: d2, children: p2, autoClose: m2, onClick: f2, type: g2, hideProgressBar: y2, closeToast: v2, transition: h3, position: T2, className: E2, style: b2, bodyClassName: I2, bodyStyle: _2, progressClassName: C2, progressStyle: L2, updateId: w2, role: k2, progress: P2, rtl: M2, toastId: x2, deleteToast: A2, isIn: B2, isLoading: O2, closeOnClick: D2, theme: R2 } = n2, S2 = clsx("Toastify__toast", `Toastify__toast-theme--${R2}`, `Toastify__toast--${g2}`, { "Toastify__toast--rtl": M2 }, { "Toastify__toast--close-on-click": D2 }), H2 = u(E2) ? E2({ rtl: M2, position: T2, type: g2, defaultClassName: S2 }) : clsx(S2, E2), F2 = function(e) {
    let { theme: n3, type: o2, isLoading: s2, icon: r3 } = e, i2 = null;
    const l2 = { theme: n3, type: o2 };
    return false === r3 || (u(r3) ? i2 = r3({ ...l2, isLoading: s2 }) : reactExports.isValidElement(r3) ? i2 = reactExports.cloneElement(r3, l2) : s2 ? i2 = z.spinner() : ((e2) => e2 in z)(o2) && (i2 = z[o2](l2))), i2;
  }(n2), X2 = !!P2 || !m2, Y2 = { closeToast: v2, type: g2, theme: R2 };
  let q2 = null;
  return false === d2 || (q2 = u(d2) ? d2(Y2) : reactExports.isValidElement(d2) ? reactExports.cloneElement(d2, Y2) : function(t2) {
    let { closeToast: n3, theme: o2, ariaLabel: s2 = "close" } = t2;
    return React$2.createElement("button", { className: `Toastify__close-button Toastify__close-button--${o2}`, type: "button", onClick: (e) => {
      e.stopPropagation(), n3(e);
    }, "aria-label": s2 }, React$2.createElement("svg", { "aria-hidden": "true", viewBox: "0 0 14 16" }, React$2.createElement("path", { fillRule: "evenodd", d: "M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z" })));
  }(Y2)), React$2.createElement(h3, { isIn: B2, done: A2, position: T2, preventExitTransition: s, nodeRef: r2, playToast: c2 }, React$2.createElement("div", { id: x2, onClick: f2, "data-in": B2, className: H2, ...i, style: b2, ref: r2 }, React$2.createElement("div", { ...B2 && { role: k2 }, className: u(I2) ? I2({ type: g2 }) : clsx("Toastify__toast-body", I2), style: _2 }, null != F2 && React$2.createElement("div", { className: clsx("Toastify__toast-icon", { "Toastify--animate-icon Toastify__zoom-enter": !O2 }) }, F2), React$2.createElement("div", null, p2)), q2, React$2.createElement($, { ...w2 && !X2 ? { key: `pb-${w2}` } : {}, rtl: M2, theme: R2, delay: m2, isRunning: o, isIn: B2, closeToast: v2, hide: y2, type: g2, style: L2, className: C2, controlledProgress: X2, progress: P2 || 0 })));
}, S = function(e, t2) {
  return void 0 === t2 && (t2 = false), { enter: `Toastify--animate Toastify__${e}-enter`, exit: `Toastify--animate Toastify__${e}-exit`, appendPosition: t2 };
}, H = g(S("bounce", true));
g(S("slide", true));
g(S("zoom"));
g(S("flip"));
const q = { position: "top-right", transition: H, autoClose: 5e3, closeButton: true, pauseOnHover: true, pauseOnFocusLoss: true, draggable: "touch", draggablePercent: 80, draggableDirection: "x", role: "alert", theme: "light" };
function Q(t2) {
  let o = { ...q, ...t2 };
  const s = t2.stacked, [a, r2] = reactExports.useState(true), c2 = reactExports.useRef(null), { getToastToRender: d2, isToastActive: m2, count: f2 } = L(o), { className: g2, style: y2, rtl: v2, containerId: h3 } = o;
  function T2(e) {
    const t3 = clsx("Toastify__toast-container", `Toastify__toast-container--${e}`, { "Toastify__toast-container--rtl": v2 });
    return u(g2) ? g2({ position: e, rtl: v2, defaultClassName: t3 }) : clsx(t3, p(g2));
  }
  function E2() {
    s && (r2(true), B.play());
  }
  return O(() => {
    if (s) {
      var e;
      const t3 = c2.current.querySelectorAll('[data-in="true"]'), n2 = 12, s2 = null == (e = o.position) ? void 0 : e.includes("top");
      let r3 = 0, i = 0;
      Array.from(t3).reverse().forEach((e2, t4) => {
        const o2 = e2;
        o2.classList.add("Toastify__toast--stacked"), t4 > 0 && (o2.dataset.collapsed = `${a}`), o2.dataset.pos || (o2.dataset.pos = s2 ? "top" : "bot");
        const l2 = r3 * (a ? 0.2 : 1) + (a ? 0 : n2 * t4);
        o2.style.setProperty("--y", `${s2 ? l2 : -1 * l2}px`), o2.style.setProperty("--g", `${n2}`), o2.style.setProperty("--s", "" + (1 - (a ? i : 0))), r3 += o2.offsetHeight, i += 0.025;
      });
    }
  }, [a, f2, s]), React$2.createElement("div", { ref: c2, className: "Toastify", id: h3, onMouseEnter: () => {
    s && (r2(false), B.pause());
  }, onMouseLeave: E2 }, d2((t3, n2) => {
    const o2 = n2.length ? { ...y2 } : { ...y2, pointerEvents: "none" };
    return React$2.createElement("div", { className: T2(t3), style: o2, key: `container-${t3}` }, n2.map((t4) => {
      let { content: n3, props: o3 } = t4;
      return React$2.createElement(R, { ...o3, stacked: s, collapseAll: E2, isIn: m2(o3.toastId, o3.containerId), style: o3.style, key: `toast-${o3.key}` }, n3);
    }));
  }));
}
class ErrorBoundary extends reactExports.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }
  componentDidCatch(error, errorInfo) {
    console.error("ErrorBoundary caught an error:", error, errorInfo);
    this.setState({ error, errorInfo });
  }
  render() {
    if (this.state.hasError) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "min-h-screen flex items-center justify-center p-4 bg-white", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "max-w-2xl w-full text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl font-bold text-red-600 mb-4", children: "Oops! Algo deu errado" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-600 mb-6", children: "Ocorreu um erro inesperado. Por favor, recarregue a página ou tente novamente mais tarde." }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => window.location.reload(),
            className: "bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg mr-4",
            children: "Recarregar Página"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => window.history.back(),
            className: "bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg",
            children: "Voltar"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("details", { className: "mt-8 text-left", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("summary", { className: "cursor-pointer text-sm text-gray-500 hover:text-gray-700", children: "Informações técnicas (para desenvolvedores)" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-4 p-4 bg-gray-100 rounded-lg text-xs overflow-auto", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "URL:" }),
              " ",
              window.location.href
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "User Agent:" }),
              " ",
              navigator.userAgent
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Timestamp:" }),
              " ",
              (/* @__PURE__ */ new Date()).toISOString()
            ] }),
            this.state.error && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Error:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { className: "mt-2 whitespace-pre-wrap", children: this.state.error.toString() })
            ] }),
            this.state.errorInfo && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Stack Trace:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { className: "mt-2 whitespace-pre-wrap", children: this.state.errorInfo.componentStack })
            ] })
          ] })
        ] })
      ] }) });
    }
    return this.props.children;
  }
}
const Logo = ({ size = "md" }) => {
  const sizeClasses = {
    sm: "text-xl",
    md: "text-3xl",
    lg: "text-5xl"
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `font-logo ${sizeClasses[size]} text-white`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "logo-highlight", children: "n" }),
    "exo"
  ] });
};
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
var defaultAttributes = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round"
};
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase().trim();
const createLucideIcon = (iconName, iconNode) => {
  const Component = reactExports.forwardRef(
    ({
      color: color2 = "currentColor",
      size = 24,
      strokeWidth = 2,
      absoluteStrokeWidth,
      className = "",
      children,
      ...rest
    }, ref) => {
      return reactExports.createElement(
        "svg",
        {
          ref,
          ...defaultAttributes,
          width: size,
          height: size,
          stroke: color2,
          strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,
          className: ["lucide", `lucide-${toKebabCase(iconName)}`, className].join(" "),
          ...rest
        },
        [
          ...iconNode.map(([tag, attrs]) => reactExports.createElement(tag, attrs)),
          ...Array.isArray(children) ? children : [children]
        ]
      );
    }
  );
  Component.displayName = `${iconName}`;
  return Component;
};
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const AlertCircle = createLucideIcon("AlertCircle", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["line", { x1: "12", x2: "12", y1: "8", y2: "12", key: "1pkeuh" }],
  ["line", { x1: "12", x2: "12.01", y1: "16", y2: "16", key: "4dfq90" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const AlertTriangle = createLucideIcon("AlertTriangle", [
  [
    "path",
    {
      d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z",
      key: "c3ski4"
    }
  ],
  ["path", { d: "M12 9v4", key: "juzpu7" }],
  ["path", { d: "M12 17h.01", key: "p32p05" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ArrowDownRight = createLucideIcon("ArrowDownRight", [
  ["path", { d: "m7 7 10 10", key: "1fmybs" }],
  ["path", { d: "M17 7v10H7", key: "6fjiku" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ArrowLeft = createLucideIcon("ArrowLeft", [
  ["path", { d: "m12 19-7-7 7-7", key: "1l729n" }],
  ["path", { d: "M19 12H5", key: "x3x0zl" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ArrowUpDown = createLucideIcon("ArrowUpDown", [
  ["path", { d: "m21 16-4 4-4-4", key: "f6ql7i" }],
  ["path", { d: "M17 20V4", key: "1ejh1v" }],
  ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
  ["path", { d: "M7 4v16", key: "1glfcx" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ArrowUpRight = createLucideIcon("ArrowUpRight", [
  ["path", { d: "M7 7h10v10", key: "1tivn9" }],
  ["path", { d: "M7 17 17 7", key: "1vkiza" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Ban = createLucideIcon("Ban", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "m4.9 4.9 14.2 14.2", key: "1m5liu" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Bike = createLucideIcon("Bike", [
  ["circle", { cx: "18.5", cy: "17.5", r: "3.5", key: "15x4ox" }],
  ["circle", { cx: "5.5", cy: "17.5", r: "3.5", key: "1noe27" }],
  ["circle", { cx: "15", cy: "5", r: "1", key: "19l28e" }],
  ["path", { d: "M12 17.5V14l-3-3 4-3 2 3h2", key: "1npguv" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const BookOpen = createLucideIcon("BookOpen", [
  ["path", { d: "M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z", key: "vv98re" }],
  ["path", { d: "M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z", key: "1cyq3y" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Bug = createLucideIcon("Bug", [
  ["path", { d: "m8 2 1.88 1.88", key: "fmnt4t" }],
  ["path", { d: "M14.12 3.88 16 2", key: "qol33r" }],
  ["path", { d: "M9 7.13v-1a3.003 3.003 0 1 1 6 0v1", key: "d7y7pr" }],
  [
    "path",
    {
      d: "M12 20c-3.3 0-6-2.7-6-6v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v3c0 3.3-2.7 6-6 6",
      key: "xs1cw7"
    }
  ],
  ["path", { d: "M12 20v-9", key: "1qisl0" }],
  ["path", { d: "M6.53 9C4.6 8.8 3 7.1 3 5", key: "32zzws" }],
  ["path", { d: "M6 13H2", key: "82j7cp" }],
  ["path", { d: "M3 21c0-2.1 1.7-3.9 3.8-4", key: "4p0ekp" }],
  ["path", { d: "M20.97 5c0 2.1-1.6 3.8-3.5 4", key: "18gb23" }],
  ["path", { d: "M22 13h-4", key: "1jl80f" }],
  ["path", { d: "M17.2 17c2.1.1 3.8 1.9 3.8 4", key: "k3fwyw" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Building = createLucideIcon("Building", [
  ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", ry: "2", key: "76otgf" }],
  ["path", { d: "M9 22v-4h6v4", key: "r93iot" }],
  ["path", { d: "M8 6h.01", key: "1dz90k" }],
  ["path", { d: "M16 6h.01", key: "1x0f13" }],
  ["path", { d: "M12 6h.01", key: "1vi96p" }],
  ["path", { d: "M12 10h.01", key: "1nrarc" }],
  ["path", { d: "M12 14h.01", key: "1etili" }],
  ["path", { d: "M16 10h.01", key: "1m94wz" }],
  ["path", { d: "M16 14h.01", key: "1gbofw" }],
  ["path", { d: "M8 10h.01", key: "19clt8" }],
  ["path", { d: "M8 14h.01", key: "6423bh" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Calculator = createLucideIcon("Calculator", [
  ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
  ["line", { x1: "8", x2: "16", y1: "6", y2: "6", key: "x4nwl0" }],
  ["line", { x1: "16", x2: "16", y1: "14", y2: "18", key: "wjye3r" }],
  ["path", { d: "M16 10h.01", key: "1m94wz" }],
  ["path", { d: "M12 10h.01", key: "1nrarc" }],
  ["path", { d: "M8 10h.01", key: "19clt8" }],
  ["path", { d: "M12 14h.01", key: "1etili" }],
  ["path", { d: "M8 14h.01", key: "6423bh" }],
  ["path", { d: "M12 18h.01", key: "mhygvu" }],
  ["path", { d: "M8 18h.01", key: "lrp35t" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Calendar = createLucideIcon("Calendar", [
  ["path", { d: "M8 2v4", key: "1cmpym" }],
  ["path", { d: "M16 2v4", key: "4m81vk" }],
  ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
  ["path", { d: "M3 10h18", key: "8toen8" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Camera = createLucideIcon("Camera", [
  [
    "path",
    {
      d: "M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z",
      key: "1tc9qg"
    }
  ],
  ["circle", { cx: "12", cy: "13", r: "3", key: "1vg3eu" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const CheckCircle = createLucideIcon("CheckCircle", [
  ["path", { d: "M22 11.08V12a10 10 0 1 1-5.93-9.14", key: "g774vq" }],
  ["path", { d: "m9 11 3 3L22 4", key: "1pflzl" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Check = createLucideIcon("Check", [["path", { d: "M20 6 9 17l-5-5", key: "1gmf2c" }]]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ChevronDown = createLucideIcon("ChevronDown", [
  ["path", { d: "m6 9 6 6 6-6", key: "qrunsl" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ChevronLeft = createLucideIcon("ChevronLeft", [
  ["path", { d: "m15 18-6-6 6-6", key: "1wnfg3" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ChevronRight = createLucideIcon("ChevronRight", [
  ["path", { d: "m9 18 6-6-6-6", key: "mthhwq" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ChevronUp = createLucideIcon("ChevronUp", [["path", { d: "m18 15-6-6-6 6", key: "153udz" }]]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const CircleUserRound = createLucideIcon("CircleUserRound", [
  ["path", { d: "M18 20a6 6 0 0 0-12 0", key: "1qehca" }],
  ["circle", { cx: "12", cy: "10", r: "4", key: "1h16sb" }],
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Clock = createLucideIcon("Clock", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12 16 14", key: "68esgv" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Copy = createLucideIcon("Copy", [
  ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
  ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const CreditCard = createLucideIcon("CreditCard", [
  ["rect", { width: "20", height: "14", x: "2", y: "5", rx: "2", key: "ynyp8z" }],
  ["line", { x1: "2", x2: "22", y1: "10", y2: "10", key: "1b3vmo" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const DollarSign = createLucideIcon("DollarSign", [
  ["line", { x1: "12", x2: "12", y1: "2", y2: "22", key: "7eqyqh" }],
  ["path", { d: "M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6", key: "1b0p4s" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Download = createLucideIcon("Download", [
  ["path", { d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4", key: "ih7n3h" }],
  ["polyline", { points: "7 10 12 15 17 10", key: "2ggqvy" }],
  ["line", { x1: "12", x2: "12", y1: "15", y2: "3", key: "1vk2je" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const EyeOff = createLucideIcon("EyeOff", [
  ["path", { d: "M9.88 9.88a3 3 0 1 0 4.24 4.24", key: "1jxqfv" }],
  [
    "path",
    {
      d: "M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68",
      key: "9wicm4"
    }
  ],
  [
    "path",
    { d: "M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61", key: "1jreej" }
  ],
  ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Eye = createLucideIcon("Eye", [
  ["path", { d: "M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z", key: "rwhkz3" }],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const FileText = createLucideIcon("FileText", [
  ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
  ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
  ["path", { d: "M10 9H8", key: "b1mrlr" }],
  ["path", { d: "M16 13H8", key: "t4e002" }],
  ["path", { d: "M16 17H8", key: "z1uh3a" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const FileX = createLucideIcon("FileX", [
  ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
  ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
  ["path", { d: "m14.5 12.5-5 5", key: "b62r18" }],
  ["path", { d: "m9.5 12.5 5 5", key: "1rk7el" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Filter = createLucideIcon("Filter", [
  ["polygon", { points: "22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3", key: "1yg77f" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const FolderOpen = createLucideIcon("FolderOpen", [
  [
    "path",
    {
      d: "m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2",
      key: "usdka0"
    }
  ]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Grid3x3 = createLucideIcon("Grid3x3", [
  ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
  ["path", { d: "M3 9h18", key: "1pudct" }],
  ["path", { d: "M3 15h18", key: "5xshup" }],
  ["path", { d: "M9 3v18", key: "fh3hqa" }],
  ["path", { d: "M15 3v18", key: "14nvp0" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Home = createLucideIcon("Home", [
  ["path", { d: "m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z", key: "y5dka4" }],
  ["polyline", { points: "9 22 9 12 15 12 15 22", key: "e2us08" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Image = createLucideIcon("Image", [
  ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
  ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
  ["path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Info = createLucideIcon("Info", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M12 16v-4", key: "1dtifu" }],
  ["path", { d: "M12 8h.01", key: "e9boi3" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ListOrdered = createLucideIcon("ListOrdered", [
  ["line", { x1: "10", x2: "21", y1: "6", y2: "6", key: "76qw6h" }],
  ["line", { x1: "10", x2: "21", y1: "12", y2: "12", key: "16nom4" }],
  ["line", { x1: "10", x2: "21", y1: "18", y2: "18", key: "u3jurt" }],
  ["path", { d: "M4 6h1v4", key: "cnovpq" }],
  ["path", { d: "M4 10h2", key: "16xx2s" }],
  ["path", { d: "M6 18H4c0-1 2-2 2-3s-1-1.5-2-1", key: "m9a95d" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Lock = createLucideIcon("Lock", [
  ["rect", { width: "18", height: "11", x: "3", y: "11", rx: "2", ry: "2", key: "1w4ew1" }],
  ["path", { d: "M7 11V7a5 5 0 0 1 10 0v4", key: "fwvmzm" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const LogOut = createLucideIcon("LogOut", [
  ["path", { d: "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4", key: "1uf3rs" }],
  ["polyline", { points: "16 17 21 12 16 7", key: "1gabdz" }],
  ["line", { x1: "21", x2: "9", y1: "12", y2: "12", key: "1uyos4" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Mail = createLucideIcon("Mail", [
  ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
  ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const MapPin = createLucideIcon("MapPin", [
  ["path", { d: "M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z", key: "2oe9fu" }],
  ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Maximize2 = createLucideIcon("Maximize2", [
  ["polyline", { points: "15 3 21 3 21 9", key: "mznyad" }],
  ["polyline", { points: "9 21 3 21 3 15", key: "1avn1i" }],
  ["line", { x1: "21", x2: "14", y1: "3", y2: "10", key: "ota7mn" }],
  ["line", { x1: "3", x2: "10", y1: "21", y2: "14", key: "1atl0r" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const MessageCircle = createLucideIcon("MessageCircle", [
  ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const MessageSquare = createLucideIcon("MessageSquare", [
  ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Minimize2 = createLucideIcon("Minimize2", [
  ["polyline", { points: "4 14 10 14 10 20", key: "11kfnr" }],
  ["polyline", { points: "20 10 14 10 14 4", key: "rlmsce" }],
  ["line", { x1: "14", x2: "21", y1: "10", y2: "3", key: "o5lafz" }],
  ["line", { x1: "3", x2: "10", y1: "21", y2: "14", key: "1atl0r" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Minus = createLucideIcon("Minus", [["path", { d: "M5 12h14", key: "1ays0h" }]]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const MoreVertical = createLucideIcon("MoreVertical", [
  ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
  ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
  ["circle", { cx: "12", cy: "19", r: "1", key: "lyex9k" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Package2 = createLucideIcon("Package2", [
  ["path", { d: "M3 9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9Z", key: "1ront0" }],
  ["path", { d: "m3 9 2.45-4.9A2 2 0 0 1 7.24 3h9.52a2 2 0 0 1 1.8 1.1L21 9", key: "19h2x1" }],
  ["path", { d: "M12 3v6", key: "1holv5" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Package = createLucideIcon("Package", [
  ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
  [
    "path",
    {
      d: "M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z",
      key: "hh9hay"
    }
  ],
  ["path", { d: "m3.3 7 8.7 5 8.7-5", key: "g66t2b" }],
  ["path", { d: "M12 22V12", key: "d0xqtd" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Pencil = createLucideIcon("Pencil", [
  ["path", { d: "M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z", key: "5qss01" }],
  ["path", { d: "m15 5 4 4", key: "1mk7zo" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Percent = createLucideIcon("Percent", [
  ["line", { x1: "19", x2: "5", y1: "5", y2: "19", key: "1x9vlm" }],
  ["circle", { cx: "6.5", cy: "6.5", r: "2.5", key: "4mh3h7" }],
  ["circle", { cx: "17.5", cy: "17.5", r: "2.5", key: "1mdrzq" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Phone = createLucideIcon("Phone", [
  [
    "path",
    {
      d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
      key: "foiqr5"
    }
  ]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const PlusCircle = createLucideIcon("PlusCircle", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M8 12h8", key: "1wcyev" }],
  ["path", { d: "M12 8v8", key: "napkw2" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Plus = createLucideIcon("Plus", [
  ["path", { d: "M5 12h14", key: "1ays0h" }],
  ["path", { d: "M12 5v14", key: "s699le" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const QrCode = createLucideIcon("QrCode", [
  ["rect", { width: "5", height: "5", x: "3", y: "3", rx: "1", key: "1tu5fj" }],
  ["rect", { width: "5", height: "5", x: "16", y: "3", rx: "1", key: "1v8r4q" }],
  ["rect", { width: "5", height: "5", x: "3", y: "16", rx: "1", key: "1x03jg" }],
  ["path", { d: "M21 16h-3a2 2 0 0 0-2 2v3", key: "177gqh" }],
  ["path", { d: "M21 21v.01", key: "ents32" }],
  ["path", { d: "M12 7v3a2 2 0 0 1-2 2H7", key: "8crl2c" }],
  ["path", { d: "M3 12h.01", key: "nlz23k" }],
  ["path", { d: "M12 3h.01", key: "n36tog" }],
  ["path", { d: "M12 16v.01", key: "133mhm" }],
  ["path", { d: "M16 12h1", key: "1slzba" }],
  ["path", { d: "M21 12v.01", key: "1lwtk9" }],
  ["path", { d: "M12 21v-1", key: "1880an" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Receipt = createLucideIcon("Receipt", [
  [
    "path",
    { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
  ],
  ["path", { d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8", key: "1h4pet" }],
  ["path", { d: "M12 17.5v-11", key: "1jc1ny" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const RefreshCw = createLucideIcon("RefreshCw", [
  ["path", { d: "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8", key: "v9h5vc" }],
  ["path", { d: "M21 3v5h-5", key: "1q7to0" }],
  ["path", { d: "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16", key: "3uifl3" }],
  ["path", { d: "M8 16H3v5", key: "1cv678" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Ruler = createLucideIcon("Ruler", [
  [
    "path",
    {
      d: "M21.3 15.3a2.4 2.4 0 0 1 0 3.4l-2.6 2.6a2.4 2.4 0 0 1-3.4 0L2.7 8.7a2.41 2.41 0 0 1 0-3.4l2.6-2.6a2.41 2.41 0 0 1 3.4 0Z",
      key: "icamh8"
    }
  ],
  ["path", { d: "m14.5 12.5 2-2", key: "inckbg" }],
  ["path", { d: "m11.5 9.5 2-2", key: "fmmyf7" }],
  ["path", { d: "m8.5 6.5 2-2", key: "vc6u1g" }],
  ["path", { d: "m17.5 15.5 2-2", key: "wo5hmg" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Save = createLucideIcon("Save", [
  ["path", { d: "M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z", key: "1owoqh" }],
  ["polyline", { points: "17 21 17 13 7 13 7 21", key: "1md35c" }],
  ["polyline", { points: "7 3 7 8 15 8", key: "8nz8an" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Search = createLucideIcon("Search", [
  ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
  ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Send = createLucideIcon("Send", [
  ["path", { d: "m22 2-7 20-4-9-9-4Z", key: "1q3vgg" }],
  ["path", { d: "M22 2 11 13", key: "nzbqef" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Settings = createLucideIcon("Settings", [
  [
    "path",
    {
      d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",
      key: "1qme2f"
    }
  ],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ShoppingBag = createLucideIcon("ShoppingBag", [
  ["path", { d: "M6 2 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4Z", key: "hou9p0" }],
  ["path", { d: "M3 6h18", key: "d0wm0j" }],
  ["path", { d: "M16 10a4 4 0 0 1-8 0", key: "1ltviw" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ShoppingCart = createLucideIcon("ShoppingCart", [
  ["circle", { cx: "8", cy: "21", r: "1", key: "jimo8o" }],
  ["circle", { cx: "19", cy: "21", r: "1", key: "13723u" }],
  [
    "path",
    {
      d: "M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12",
      key: "9zh506"
    }
  ]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const SquarePen = createLucideIcon("SquarePen", [
  ["path", { d: "M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7", key: "1m0v6g" }],
  ["path", { d: "M18.375 2.625a2.121 2.121 0 1 1 3 3L12 15l-4 1 1-4Z", key: "1lpok0" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Star = createLucideIcon("Star", [
  [
    "polygon",
    {
      points: "12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2",
      key: "8f66p6"
    }
  ]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Table = createLucideIcon("Table", [
  ["path", { d: "M12 3v18", key: "108xh3" }],
  ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
  ["path", { d: "M3 9h18", key: "1pudct" }],
  ["path", { d: "M3 15h18", key: "5xshup" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Tag = createLucideIcon("Tag", [
  [
    "path",
    {
      d: "M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z",
      key: "vktsd0"
    }
  ],
  ["circle", { cx: "7.5", cy: "7.5", r: ".5", fill: "currentColor", key: "kqv944" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Trash2 = createLucideIcon("Trash2", [
  ["path", { d: "M3 6h18", key: "d0wm0j" }],
  ["path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6", key: "4alrt4" }],
  ["path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2", key: "v07s0e" }],
  ["line", { x1: "10", x2: "10", y1: "11", y2: "17", key: "1uufr5" }],
  ["line", { x1: "14", x2: "14", y1: "11", y2: "17", key: "xtxkd" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const TrendingDown = createLucideIcon("TrendingDown", [
  ["polyline", { points: "22 17 13.5 8.5 8.5 13.5 2 7", key: "1r2t7k" }],
  ["polyline", { points: "16 17 22 17 22 11", key: "11uiuu" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const TrendingUp = createLucideIcon("TrendingUp", [
  ["polyline", { points: "22 7 13.5 15.5 8.5 10.5 2 17", key: "126l90" }],
  ["polyline", { points: "16 7 22 7 22 13", key: "kwv8wd" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Truck = createLucideIcon("Truck", [
  ["path", { d: "M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2", key: "wrbu53" }],
  ["path", { d: "M15 18H9", key: "1lyqi6" }],
  [
    "path",
    {
      d: "M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14",
      key: "lysw3i"
    }
  ],
  ["circle", { cx: "17", cy: "18", r: "2", key: "332jqn" }],
  ["circle", { cx: "7", cy: "18", r: "2", key: "19iecd" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Unlock = createLucideIcon("Unlock", [
  ["rect", { width: "18", height: "11", x: "3", y: "11", rx: "2", ry: "2", key: "1w4ew1" }],
  ["path", { d: "M7 11V7a5 5 0 0 1 9.9-1", key: "1mm8w8" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Upload = createLucideIcon("Upload", [
  ["path", { d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4", key: "ih7n3h" }],
  ["polyline", { points: "17 8 12 3 7 8", key: "t8dd8p" }],
  ["line", { x1: "12", x2: "12", y1: "3", y2: "15", key: "widbto" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const UserCheck = createLucideIcon("UserCheck", [
  ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
  ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
  ["polyline", { points: "16 11 18 13 22 9", key: "1pwet4" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const User = createLucideIcon("User", [
  ["path", { d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2", key: "975kel" }],
  ["circle", { cx: "12", cy: "7", r: "4", key: "17ys0d" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Users = createLucideIcon("Users", [
  ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
  ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
  ["path", { d: "M22 21v-2a4 4 0 0 0-3-3.87", key: "kshegd" }],
  ["path", { d: "M16 3.13a4 4 0 0 1 0 7.75", key: "1da9ce" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const XCircle = createLucideIcon("XCircle", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
  ["path", { d: "m9 9 6 6", key: "z0biqf" }]
]);
/**
 * @license lucide-react v0.331.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const X = createLucideIcon("X", [
  ["path", { d: "M18 6 6 18", key: "1bl5f8" }],
  ["path", { d: "m6 6 12 12", key: "d8bk6v" }]
]);
const Input = ({
  id: id2,
  type: initialType,
  label,
  value,
  onChange,
  required = false,
  autoComplete
}) => {
  const [isFocused, setIsFocused] = reactExports.useState(false);
  const [showPassword, setShowPassword] = reactExports.useState(false);
  const isPassword = initialType === "password";
  const type = isPassword ? showPassword ? "text" : "password" : initialType;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative mb-6 group fade-in", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "input",
      {
        id: id2,
        type,
        value,
        onChange,
        placeholder: " ",
        required,
        autoComplete,
        className: "form-input",
        onFocus: () => setIsFocused(true),
        onBlur: () => setIsFocused(false)
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "label",
      {
        htmlFor: id2,
        className: `floating-label ${isFocused || value ? "-translate-y-6 -translate-x-2 scale-75 text-primary-500" : ""}`,
        children: label
      }
    ),
    isPassword && /* @__PURE__ */ jsxRuntimeExports.jsx(
      "button",
      {
        type: "button",
        className: "absolute right-3 top-3 text-gray-400 hover:text-white transition-colors",
        onClick: () => setShowPassword(!showPassword),
        children: showPassword ? /* @__PURE__ */ jsxRuntimeExports.jsx(EyeOff, { size: 20 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Eye, { size: 20 })
      }
    )
  ] });
};
const Button = ({
  type = "button",
  variant = "primary",
  children,
  onClick,
  fullWidth = false,
  className = "",
  disabled = false
}) => {
  const baseClasses = "rounded-lg py-3 px-4 font-medium transition-all duration-300 focus:outline-none focus:ring-2";
  const variantClasses = {
    primary: "bg-primary-500 hover:bg-primary-600 text-white focus:ring-primary-400 focus:ring-opacity-50",
    text: "text-primary-400 hover:text-primary-300 bg-transparent",
    success: "bg-green-600 hover:bg-green-700 text-white focus:ring-green-400 focus:ring-opacity-50",
    secondary: "bg-gray-600 hover:bg-gray-500 text-white focus:ring-gray-400 focus:ring-opacity-50"
  };
  const widthClass = fullWidth ? "w-full" : "";
  const disabledClass = disabled ? "opacity-50 cursor-not-allowed" : "";
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "button",
    {
      type,
      onClick,
      className: `${baseClasses} ${variantClasses[variant]} ${widthClass} ${disabledClass} ${className}`,
      disabled,
      children
    }
  );
};
const scriptRel = "modulepreload";
const assetsURL = function(dep) {
  return "/" + dep;
};
const seen = {};
const __vitePreload = function preload(baseModule, deps, importerUrl) {
  let promise = Promise.resolve();
  if (deps && deps.length > 0) {
    document.getElementsByTagName("link");
    const cspNonceMeta = document.querySelector(
      "meta[property=csp-nonce]"
    );
    const cspNonce = (cspNonceMeta == null ? void 0 : cspNonceMeta.nonce) || (cspNonceMeta == null ? void 0 : cspNonceMeta.getAttribute("nonce"));
    promise = Promise.allSettled(
      deps.map((dep) => {
        dep = assetsURL(dep);
        if (dep in seen) return;
        seen[dep] = true;
        const isCss = dep.endsWith(".css");
        const cssSelector = isCss ? '[rel="stylesheet"]' : "";
        if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
          return;
        }
        const link = document.createElement("link");
        link.rel = isCss ? "stylesheet" : scriptRel;
        if (!isCss) {
          link.as = "script";
        }
        link.crossOrigin = "";
        link.href = dep;
        if (cspNonce) {
          link.setAttribute("nonce", cspNonce);
        }
        document.head.appendChild(link);
        if (isCss) {
          return new Promise((res, rej) => {
            link.addEventListener("load", res);
            link.addEventListener(
              "error",
              () => rej(new Error(`Unable to preload CSS for ${dep}`))
            );
          });
        }
      })
    );
  }
  function handlePreloadError(err) {
    const e = new Event("vite:preloadError", {
      cancelable: true
    });
    e.payload = err;
    window.dispatchEvent(e);
    if (!e.defaultPrevented) {
      throw err;
    }
  }
  return promise.then((res) => {
    for (const item of res || []) {
      if (item.status !== "rejected") continue;
      handlePreloadError(item.reason);
    }
    return baseModule().catch(handlePreloadError);
  });
};
const resolveFetch$3 = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = (...args) => __vitePreload(async () => {
      const { default: fetch2 } = await Promise.resolve().then(() => browser);
      return { default: fetch2 };
    }, true ? void 0 : void 0).then(({ default: fetch2 }) => fetch2(...args));
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
class FunctionsError extends Error {
  constructor(message, name = "FunctionsError", context) {
    super(message);
    this.name = name;
    this.context = context;
  }
}
class FunctionsFetchError extends FunctionsError {
  constructor(context) {
    super("Failed to send a request to the Edge Function", "FunctionsFetchError", context);
  }
}
class FunctionsRelayError extends FunctionsError {
  constructor(context) {
    super("Relay Error invoking the Edge Function", "FunctionsRelayError", context);
  }
}
class FunctionsHttpError extends FunctionsError {
  constructor(context) {
    super("Edge Function returned a non-2xx status code", "FunctionsHttpError", context);
  }
}
var FunctionRegion;
(function(FunctionRegion2) {
  FunctionRegion2["Any"] = "any";
  FunctionRegion2["ApNortheast1"] = "ap-northeast-1";
  FunctionRegion2["ApNortheast2"] = "ap-northeast-2";
  FunctionRegion2["ApSouth1"] = "ap-south-1";
  FunctionRegion2["ApSoutheast1"] = "ap-southeast-1";
  FunctionRegion2["ApSoutheast2"] = "ap-southeast-2";
  FunctionRegion2["CaCentral1"] = "ca-central-1";
  FunctionRegion2["EuCentral1"] = "eu-central-1";
  FunctionRegion2["EuWest1"] = "eu-west-1";
  FunctionRegion2["EuWest2"] = "eu-west-2";
  FunctionRegion2["EuWest3"] = "eu-west-3";
  FunctionRegion2["SaEast1"] = "sa-east-1";
  FunctionRegion2["UsEast1"] = "us-east-1";
  FunctionRegion2["UsWest1"] = "us-west-1";
  FunctionRegion2["UsWest2"] = "us-west-2";
})(FunctionRegion || (FunctionRegion = {}));
var __awaiter$7 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
class FunctionsClient {
  constructor(url, { headers = {}, customFetch, region = FunctionRegion.Any } = {}) {
    this.url = url;
    this.headers = headers;
    this.region = region;
    this.fetch = resolveFetch$3(customFetch);
  }
  /**
   * Updates the authorization header
   * @param token - the new jwt token sent in the authorisation header
   */
  setAuth(token) {
    this.headers.Authorization = `Bearer ${token}`;
  }
  /**
   * Invokes a function
   * @param functionName - The name of the Function to invoke.
   * @param options - Options for invoking the Function.
   */
  invoke(functionName, options = {}) {
    var _a2;
    return __awaiter$7(this, void 0, void 0, function* () {
      try {
        const { headers, method, body: functionArgs } = options;
        let _headers = {};
        let { region } = options;
        if (!region) {
          region = this.region;
        }
        if (region && region !== "any") {
          _headers["x-region"] = region;
        }
        let body;
        if (functionArgs && (headers && !Object.prototype.hasOwnProperty.call(headers, "Content-Type") || !headers)) {
          if (typeof Blob !== "undefined" && functionArgs instanceof Blob || functionArgs instanceof ArrayBuffer) {
            _headers["Content-Type"] = "application/octet-stream";
            body = functionArgs;
          } else if (typeof functionArgs === "string") {
            _headers["Content-Type"] = "text/plain";
            body = functionArgs;
          } else if (typeof FormData !== "undefined" && functionArgs instanceof FormData) {
            body = functionArgs;
          } else {
            _headers["Content-Type"] = "application/json";
            body = JSON.stringify(functionArgs);
          }
        }
        const response = yield this.fetch(`${this.url}/${functionName}`, {
          method: method || "POST",
          // headers priority is (high to low):
          // 1. invoke-level headers
          // 2. client-level headers
          // 3. default Content-Type header
          headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),
          body
        }).catch((fetchError) => {
          throw new FunctionsFetchError(fetchError);
        });
        const isRelayError = response.headers.get("x-relay-error");
        if (isRelayError && isRelayError === "true") {
          throw new FunctionsRelayError(response);
        }
        if (!response.ok) {
          throw new FunctionsHttpError(response);
        }
        let responseType = ((_a2 = response.headers.get("Content-Type")) !== null && _a2 !== void 0 ? _a2 : "text/plain").split(";")[0].trim();
        let data;
        if (responseType === "application/json") {
          data = yield response.json();
        } else if (responseType === "application/octet-stream") {
          data = yield response.blob();
        } else if (responseType === "text/event-stream") {
          data = response;
        } else if (responseType === "multipart/form-data") {
          data = yield response.formData();
        } else {
          data = yield response.text();
        }
        return { data, error: null };
      } catch (error) {
        return { data: null, error };
      }
    });
  }
}
var cjs = {};
var PostgrestClient$2 = {};
var PostgrestQueryBuilder$2 = {};
var PostgrestFilterBuilder$2 = {};
var PostgrestTransformBuilder$2 = {};
var PostgrestBuilder$2 = {};
var getGlobal = function() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("unable to locate global object");
};
var globalObject = getGlobal();
const fetch$1 = globalObject.fetch;
const nodeFetch = globalObject.fetch.bind(globalObject);
const Headers$1 = globalObject.Headers;
const Request = globalObject.Request;
const Response$1 = globalObject.Response;
const browser = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Headers: Headers$1,
  Request,
  Response: Response$1,
  default: nodeFetch,
  fetch: fetch$1
}, Symbol.toStringTag, { value: "Module" }));
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(browser);
var PostgrestError$2 = {};
Object.defineProperty(PostgrestError$2, "__esModule", { value: true });
let PostgrestError$1 = class PostgrestError extends Error {
  constructor(context) {
    super(context.message);
    this.name = "PostgrestError";
    this.details = context.details;
    this.hint = context.hint;
    this.code = context.code;
  }
};
PostgrestError$2.default = PostgrestError$1;
var __importDefault$5 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(PostgrestBuilder$2, "__esModule", { value: true });
const node_fetch_1 = __importDefault$5(require$$0);
const PostgrestError_1$1 = __importDefault$5(PostgrestError$2);
let PostgrestBuilder$1 = class PostgrestBuilder {
  constructor(builder) {
    this.shouldThrowOnError = false;
    this.method = builder.method;
    this.url = builder.url;
    this.headers = builder.headers;
    this.schema = builder.schema;
    this.body = builder.body;
    this.shouldThrowOnError = builder.shouldThrowOnError;
    this.signal = builder.signal;
    this.isMaybeSingle = builder.isMaybeSingle;
    if (builder.fetch) {
      this.fetch = builder.fetch;
    } else if (typeof fetch === "undefined") {
      this.fetch = node_fetch_1.default;
    } else {
      this.fetch = fetch;
    }
  }
  /**
   * If there's an error with the query, throwOnError will reject the promise by
   * throwing the error instead of returning it as part of a successful response.
   *
   * {@link https://github.com/supabase/supabase-js/issues/92}
   */
  throwOnError() {
    this.shouldThrowOnError = true;
    return this;
  }
  /**
   * Set an HTTP header for the request.
   */
  setHeader(name, value) {
    this.headers = Object.assign({}, this.headers);
    this.headers[name] = value;
    return this;
  }
  then(onfulfilled, onrejected) {
    if (this.schema === void 0) ;
    else if (["GET", "HEAD"].includes(this.method)) {
      this.headers["Accept-Profile"] = this.schema;
    } else {
      this.headers["Content-Profile"] = this.schema;
    }
    if (this.method !== "GET" && this.method !== "HEAD") {
      this.headers["Content-Type"] = "application/json";
    }
    const _fetch = this.fetch;
    let res = _fetch(this.url.toString(), {
      method: this.method,
      headers: this.headers,
      body: JSON.stringify(this.body),
      signal: this.signal
    }).then(async (res2) => {
      var _a2, _b2, _c;
      let error = null;
      let data = null;
      let count = null;
      let status = res2.status;
      let statusText = res2.statusText;
      if (res2.ok) {
        if (this.method !== "HEAD") {
          const body = await res2.text();
          if (body === "") ;
          else if (this.headers["Accept"] === "text/csv") {
            data = body;
          } else if (this.headers["Accept"] && this.headers["Accept"].includes("application/vnd.pgrst.plan+text")) {
            data = body;
          } else {
            data = JSON.parse(body);
          }
        }
        const countHeader = (_a2 = this.headers["Prefer"]) === null || _a2 === void 0 ? void 0 : _a2.match(/count=(exact|planned|estimated)/);
        const contentRange = (_b2 = res2.headers.get("content-range")) === null || _b2 === void 0 ? void 0 : _b2.split("/");
        if (countHeader && contentRange && contentRange.length > 1) {
          count = parseInt(contentRange[1]);
        }
        if (this.isMaybeSingle && this.method === "GET" && Array.isArray(data)) {
          if (data.length > 1) {
            error = {
              // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553
              code: "PGRST116",
              details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,
              hint: null,
              message: "JSON object requested, multiple (or no) rows returned"
            };
            data = null;
            count = null;
            status = 406;
            statusText = "Not Acceptable";
          } else if (data.length === 1) {
            data = data[0];
          } else {
            data = null;
          }
        }
      } else {
        const body = await res2.text();
        try {
          error = JSON.parse(body);
          if (Array.isArray(error) && res2.status === 404) {
            data = [];
            error = null;
            status = 200;
            statusText = "OK";
          }
        } catch (_d) {
          if (res2.status === 404 && body === "") {
            status = 204;
            statusText = "No Content";
          } else {
            error = {
              message: body
            };
          }
        }
        if (error && this.isMaybeSingle && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes("0 rows"))) {
          error = null;
          status = 200;
          statusText = "OK";
        }
        if (error && this.shouldThrowOnError) {
          throw new PostgrestError_1$1.default(error);
        }
      }
      const postgrestResponse = {
        error,
        data,
        count,
        status,
        statusText
      };
      return postgrestResponse;
    });
    if (!this.shouldThrowOnError) {
      res = res.catch((fetchError) => {
        var _a2, _b2, _c;
        return {
          error: {
            message: `${(_a2 = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a2 !== void 0 ? _a2 : "FetchError"}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,
            details: `${(_b2 = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b2 !== void 0 ? _b2 : ""}`,
            hint: "",
            code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ""}`
          },
          data: null,
          count: null,
          status: 0,
          statusText: ""
        };
      });
    }
    return res.then(onfulfilled, onrejected);
  }
  /**
   * Override the type of the returned `data`.
   *
   * @typeParam NewResult - The new result type to override with
   * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead
   */
  returns() {
    return this;
  }
  /**
   * Override the type of the returned `data` field in the response.
   *
   * @typeParam NewResult - The new type to cast the response data to
   * @typeParam Options - Optional type configuration (defaults to { merge: true })
   * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)
   * @example
   * ```typescript
   * // Merge with existing types (default behavior)
   * const query = supabase
   *   .from('users')
   *   .select()
   *   .overrideTypes<{ custom_field: string }>()
   *
   * // Replace existing types completely
   * const replaceQuery = supabase
   *   .from('users')
   *   .select()
   *   .overrideTypes<{ id: number; name: string }, { merge: false }>()
   * ```
   * @returns A PostgrestBuilder instance with the new type
   */
  overrideTypes() {
    return this;
  }
};
PostgrestBuilder$2.default = PostgrestBuilder$1;
var __importDefault$4 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(PostgrestTransformBuilder$2, "__esModule", { value: true });
const PostgrestBuilder_1$1 = __importDefault$4(PostgrestBuilder$2);
let PostgrestTransformBuilder$1 = class PostgrestTransformBuilder extends PostgrestBuilder_1$1.default {
  /**
   * Perform a SELECT on the query result.
   *
   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not
   * return modified rows. By calling this method, modified rows are returned in
   * `data`.
   *
   * @param columns - The columns to retrieve, separated by commas
   */
  select(columns) {
    let quoted = false;
    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c2) => {
      if (/\s/.test(c2) && !quoted) {
        return "";
      }
      if (c2 === '"') {
        quoted = !quoted;
      }
      return c2;
    }).join("");
    this.url.searchParams.set("select", cleanedColumns);
    if (this.headers["Prefer"]) {
      this.headers["Prefer"] += ",";
    }
    this.headers["Prefer"] += "return=representation";
    return this;
  }
  /**
   * Order the query result by `column`.
   *
   * You can call this method multiple times to order by multiple columns.
   *
   * You can order referenced tables, but it only affects the ordering of the
   * parent table if you use `!inner` in the query.
   *
   * @param column - The column to order by
   * @param options - Named parameters
   * @param options.ascending - If `true`, the result will be in ascending order
   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,
   * `null`s appear last.
   * @param options.referencedTable - Set this to order a referenced table by
   * its columns
   * @param options.foreignTable - Deprecated, use `options.referencedTable`
   * instead
   */
  order(column, { ascending = true, nullsFirst, foreignTable, referencedTable = foreignTable } = {}) {
    const key = referencedTable ? `${referencedTable}.order` : "order";
    const existingOrder = this.url.searchParams.get(key);
    this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ""}${column}.${ascending ? "asc" : "desc"}${nullsFirst === void 0 ? "" : nullsFirst ? ".nullsfirst" : ".nullslast"}`);
    return this;
  }
  /**
   * Limit the query result by `count`.
   *
   * @param count - The maximum number of rows to return
   * @param options - Named parameters
   * @param options.referencedTable - Set this to limit rows of referenced
   * tables instead of the parent table
   * @param options.foreignTable - Deprecated, use `options.referencedTable`
   * instead
   */
  limit(count, { foreignTable, referencedTable = foreignTable } = {}) {
    const key = typeof referencedTable === "undefined" ? "limit" : `${referencedTable}.limit`;
    this.url.searchParams.set(key, `${count}`);
    return this;
  }
  /**
   * Limit the query result by starting at an offset `from` and ending at the offset `to`.
   * Only records within this range are returned.
   * This respects the query order and if there is no order clause the range could behave unexpectedly.
   * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third
   * and fourth rows of the query.
   *
   * @param from - The starting index from which to limit the result
   * @param to - The last index to which to limit the result
   * @param options - Named parameters
   * @param options.referencedTable - Set this to limit rows of referenced
   * tables instead of the parent table
   * @param options.foreignTable - Deprecated, use `options.referencedTable`
   * instead
   */
  range(from2, to2, { foreignTable, referencedTable = foreignTable } = {}) {
    const keyOffset = typeof referencedTable === "undefined" ? "offset" : `${referencedTable}.offset`;
    const keyLimit = typeof referencedTable === "undefined" ? "limit" : `${referencedTable}.limit`;
    this.url.searchParams.set(keyOffset, `${from2}`);
    this.url.searchParams.set(keyLimit, `${to2 - from2 + 1}`);
    return this;
  }
  /**
   * Set the AbortSignal for the fetch request.
   *
   * @param signal - The AbortSignal to use for the fetch request
   */
  abortSignal(signal) {
    this.signal = signal;
    return this;
  }
  /**
   * Return `data` as a single object instead of an array of objects.
   *
   * Query result must be one row (e.g. using `.limit(1)`), otherwise this
   * returns an error.
   */
  single() {
    this.headers["Accept"] = "application/vnd.pgrst.object+json";
    return this;
  }
  /**
   * Return `data` as a single object instead of an array of objects.
   *
   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise
   * this returns an error.
   */
  maybeSingle() {
    if (this.method === "GET") {
      this.headers["Accept"] = "application/json";
    } else {
      this.headers["Accept"] = "application/vnd.pgrst.object+json";
    }
    this.isMaybeSingle = true;
    return this;
  }
  /**
   * Return `data` as a string in CSV format.
   */
  csv() {
    this.headers["Accept"] = "text/csv";
    return this;
  }
  /**
   * Return `data` as an object in [GeoJSON](https://geojson.org) format.
   */
  geojson() {
    this.headers["Accept"] = "application/geo+json";
    return this;
  }
  /**
   * Return `data` as the EXPLAIN plan for the query.
   *
   * You need to enable the
   * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)
   * setting before using this method.
   *
   * @param options - Named parameters
   *
   * @param options.analyze - If `true`, the query will be executed and the
   * actual run time will be returned
   *
   * @param options.verbose - If `true`, the query identifier will be returned
   * and `data` will include the output columns of the query
   *
   * @param options.settings - If `true`, include information on configuration
   * parameters that affect query planning
   *
   * @param options.buffers - If `true`, include information on buffer usage
   *
   * @param options.wal - If `true`, include information on WAL record generation
   *
   * @param options.format - The format of the output, can be `"text"` (default)
   * or `"json"`
   */
  explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = "text" } = {}) {
    var _a2;
    const options = [
      analyze ? "analyze" : null,
      verbose ? "verbose" : null,
      settings ? "settings" : null,
      buffers ? "buffers" : null,
      wal ? "wal" : null
    ].filter(Boolean).join("|");
    const forMediatype = (_a2 = this.headers["Accept"]) !== null && _a2 !== void 0 ? _a2 : "application/json";
    this.headers["Accept"] = `application/vnd.pgrst.plan+${format}; for="${forMediatype}"; options=${options};`;
    if (format === "json")
      return this;
    else
      return this;
  }
  /**
   * Rollback the query.
   *
   * `data` will still be returned, but the query is not committed.
   */
  rollback() {
    var _a2;
    if (((_a2 = this.headers["Prefer"]) !== null && _a2 !== void 0 ? _a2 : "").trim().length > 0) {
      this.headers["Prefer"] += ",tx=rollback";
    } else {
      this.headers["Prefer"] = "tx=rollback";
    }
    return this;
  }
  /**
   * Override the type of the returned `data`.
   *
   * @typeParam NewResult - The new result type to override with
   * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead
   */
  returns() {
    return this;
  }
};
PostgrestTransformBuilder$2.default = PostgrestTransformBuilder$1;
var __importDefault$3 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(PostgrestFilterBuilder$2, "__esModule", { value: true });
const PostgrestTransformBuilder_1$1 = __importDefault$3(PostgrestTransformBuilder$2);
let PostgrestFilterBuilder$1 = class PostgrestFilterBuilder extends PostgrestTransformBuilder_1$1.default {
  /**
   * Match only rows where `column` is equal to `value`.
   *
   * To check if the value of `column` is NULL, you should use `.is()` instead.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  eq(column, value) {
    this.url.searchParams.append(column, `eq.${value}`);
    return this;
  }
  /**
   * Match only rows where `column` is not equal to `value`.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  neq(column, value) {
    this.url.searchParams.append(column, `neq.${value}`);
    return this;
  }
  /**
   * Match only rows where `column` is greater than `value`.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  gt(column, value) {
    this.url.searchParams.append(column, `gt.${value}`);
    return this;
  }
  /**
   * Match only rows where `column` is greater than or equal to `value`.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  gte(column, value) {
    this.url.searchParams.append(column, `gte.${value}`);
    return this;
  }
  /**
   * Match only rows where `column` is less than `value`.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  lt(column, value) {
    this.url.searchParams.append(column, `lt.${value}`);
    return this;
  }
  /**
   * Match only rows where `column` is less than or equal to `value`.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  lte(column, value) {
    this.url.searchParams.append(column, `lte.${value}`);
    return this;
  }
  /**
   * Match only rows where `column` matches `pattern` case-sensitively.
   *
   * @param column - The column to filter on
   * @param pattern - The pattern to match with
   */
  like(column, pattern) {
    this.url.searchParams.append(column, `like.${pattern}`);
    return this;
  }
  /**
   * Match only rows where `column` matches all of `patterns` case-sensitively.
   *
   * @param column - The column to filter on
   * @param patterns - The patterns to match with
   */
  likeAllOf(column, patterns) {
    this.url.searchParams.append(column, `like(all).{${patterns.join(",")}}`);
    return this;
  }
  /**
   * Match only rows where `column` matches any of `patterns` case-sensitively.
   *
   * @param column - The column to filter on
   * @param patterns - The patterns to match with
   */
  likeAnyOf(column, patterns) {
    this.url.searchParams.append(column, `like(any).{${patterns.join(",")}}`);
    return this;
  }
  /**
   * Match only rows where `column` matches `pattern` case-insensitively.
   *
   * @param column - The column to filter on
   * @param pattern - The pattern to match with
   */
  ilike(column, pattern) {
    this.url.searchParams.append(column, `ilike.${pattern}`);
    return this;
  }
  /**
   * Match only rows where `column` matches all of `patterns` case-insensitively.
   *
   * @param column - The column to filter on
   * @param patterns - The patterns to match with
   */
  ilikeAllOf(column, patterns) {
    this.url.searchParams.append(column, `ilike(all).{${patterns.join(",")}}`);
    return this;
  }
  /**
   * Match only rows where `column` matches any of `patterns` case-insensitively.
   *
   * @param column - The column to filter on
   * @param patterns - The patterns to match with
   */
  ilikeAnyOf(column, patterns) {
    this.url.searchParams.append(column, `ilike(any).{${patterns.join(",")}}`);
    return this;
  }
  /**
   * Match only rows where `column` IS `value`.
   *
   * For non-boolean columns, this is only relevant for checking if the value of
   * `column` is NULL by setting `value` to `null`.
   *
   * For boolean columns, you can also set `value` to `true` or `false` and it
   * will behave the same way as `.eq()`.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  is(column, value) {
    this.url.searchParams.append(column, `is.${value}`);
    return this;
  }
  /**
   * Match only rows where `column` is included in the `values` array.
   *
   * @param column - The column to filter on
   * @param values - The values array to filter with
   */
  in(column, values) {
    const cleanedValues = Array.from(new Set(values)).map((s) => {
      if (typeof s === "string" && new RegExp("[,()]").test(s))
        return `"${s}"`;
      else
        return `${s}`;
    }).join(",");
    this.url.searchParams.append(column, `in.(${cleanedValues})`);
    return this;
  }
  /**
   * Only relevant for jsonb, array, and range columns. Match only rows where
   * `column` contains every element appearing in `value`.
   *
   * @param column - The jsonb, array, or range column to filter on
   * @param value - The jsonb, array, or range value to filter with
   */
  contains(column, value) {
    if (typeof value === "string") {
      this.url.searchParams.append(column, `cs.${value}`);
    } else if (Array.isArray(value)) {
      this.url.searchParams.append(column, `cs.{${value.join(",")}}`);
    } else {
      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);
    }
    return this;
  }
  /**
   * Only relevant for jsonb, array, and range columns. Match only rows where
   * every element appearing in `column` is contained by `value`.
   *
   * @param column - The jsonb, array, or range column to filter on
   * @param value - The jsonb, array, or range value to filter with
   */
  containedBy(column, value) {
    if (typeof value === "string") {
      this.url.searchParams.append(column, `cd.${value}`);
    } else if (Array.isArray(value)) {
      this.url.searchParams.append(column, `cd.{${value.join(",")}}`);
    } else {
      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);
    }
    return this;
  }
  /**
   * Only relevant for range columns. Match only rows where every element in
   * `column` is greater than any element in `range`.
   *
   * @param column - The range column to filter on
   * @param range - The range to filter with
   */
  rangeGt(column, range) {
    this.url.searchParams.append(column, `sr.${range}`);
    return this;
  }
  /**
   * Only relevant for range columns. Match only rows where every element in
   * `column` is either contained in `range` or greater than any element in
   * `range`.
   *
   * @param column - The range column to filter on
   * @param range - The range to filter with
   */
  rangeGte(column, range) {
    this.url.searchParams.append(column, `nxl.${range}`);
    return this;
  }
  /**
   * Only relevant for range columns. Match only rows where every element in
   * `column` is less than any element in `range`.
   *
   * @param column - The range column to filter on
   * @param range - The range to filter with
   */
  rangeLt(column, range) {
    this.url.searchParams.append(column, `sl.${range}`);
    return this;
  }
  /**
   * Only relevant for range columns. Match only rows where every element in
   * `column` is either contained in `range` or less than any element in
   * `range`.
   *
   * @param column - The range column to filter on
   * @param range - The range to filter with
   */
  rangeLte(column, range) {
    this.url.searchParams.append(column, `nxr.${range}`);
    return this;
  }
  /**
   * Only relevant for range columns. Match only rows where `column` is
   * mutually exclusive to `range` and there can be no element between the two
   * ranges.
   *
   * @param column - The range column to filter on
   * @param range - The range to filter with
   */
  rangeAdjacent(column, range) {
    this.url.searchParams.append(column, `adj.${range}`);
    return this;
  }
  /**
   * Only relevant for array and range columns. Match only rows where
   * `column` and `value` have an element in common.
   *
   * @param column - The array or range column to filter on
   * @param value - The array or range value to filter with
   */
  overlaps(column, value) {
    if (typeof value === "string") {
      this.url.searchParams.append(column, `ov.${value}`);
    } else {
      this.url.searchParams.append(column, `ov.{${value.join(",")}}`);
    }
    return this;
  }
  /**
   * Only relevant for text and tsvector columns. Match only rows where
   * `column` matches the query string in `query`.
   *
   * @param column - The text or tsvector column to filter on
   * @param query - The query text to match with
   * @param options - Named parameters
   * @param options.config - The text search configuration to use
   * @param options.type - Change how the `query` text is interpreted
   */
  textSearch(column, query, { config, type } = {}) {
    let typePart = "";
    if (type === "plain") {
      typePart = "pl";
    } else if (type === "phrase") {
      typePart = "ph";
    } else if (type === "websearch") {
      typePart = "w";
    }
    const configPart = config === void 0 ? "" : `(${config})`;
    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);
    return this;
  }
  /**
   * Match only rows where each column in `query` keys is equal to its
   * associated value. Shorthand for multiple `.eq()`s.
   *
   * @param query - The object to filter with, with column names as keys mapped
   * to their filter values
   */
  match(query) {
    Object.entries(query).forEach(([column, value]) => {
      this.url.searchParams.append(column, `eq.${value}`);
    });
    return this;
  }
  /**
   * Match only rows which doesn't satisfy the filter.
   *
   * Unlike most filters, `opearator` and `value` are used as-is and need to
   * follow [PostgREST
   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
   * to make sure they are properly sanitized.
   *
   * @param column - The column to filter on
   * @param operator - The operator to be negated to filter with, following
   * PostgREST syntax
   * @param value - The value to filter with, following PostgREST syntax
   */
  not(column, operator, value) {
    this.url.searchParams.append(column, `not.${operator}.${value}`);
    return this;
  }
  /**
   * Match only rows which satisfy at least one of the filters.
   *
   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST
   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
   * to make sure it's properly sanitized.
   *
   * It's currently not possible to do an `.or()` filter across multiple tables.
   *
   * @param filters - The filters to use, following PostgREST syntax
   * @param options - Named parameters
   * @param options.referencedTable - Set this to filter on referenced tables
   * instead of the parent table
   * @param options.foreignTable - Deprecated, use `referencedTable` instead
   */
  or(filters, { foreignTable, referencedTable = foreignTable } = {}) {
    const key = referencedTable ? `${referencedTable}.or` : "or";
    this.url.searchParams.append(key, `(${filters})`);
    return this;
  }
  /**
   * Match only rows which satisfy the filter. This is an escape hatch - you
   * should use the specific filter methods wherever possible.
   *
   * Unlike most filters, `opearator` and `value` are used as-is and need to
   * follow [PostgREST
   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
   * to make sure they are properly sanitized.
   *
   * @param column - The column to filter on
   * @param operator - The operator to filter with, following PostgREST syntax
   * @param value - The value to filter with, following PostgREST syntax
   */
  filter(column, operator, value) {
    this.url.searchParams.append(column, `${operator}.${value}`);
    return this;
  }
};
PostgrestFilterBuilder$2.default = PostgrestFilterBuilder$1;
var __importDefault$2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(PostgrestQueryBuilder$2, "__esModule", { value: true });
const PostgrestFilterBuilder_1$2 = __importDefault$2(PostgrestFilterBuilder$2);
let PostgrestQueryBuilder$1 = class PostgrestQueryBuilder {
  constructor(url, { headers = {}, schema, fetch: fetch2 }) {
    this.url = url;
    this.headers = headers;
    this.schema = schema;
    this.fetch = fetch2;
  }
  /**
   * Perform a SELECT query on the table or view.
   *
   * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`
   *
   * @param options - Named parameters
   *
   * @param options.head - When set to `true`, `data` will not be returned.
   * Useful if you only need the count.
   *
   * @param options.count - Count algorithm to use to count rows in the table or view.
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   */
  select(columns, { head: head2 = false, count } = {}) {
    const method = head2 ? "HEAD" : "GET";
    let quoted = false;
    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c2) => {
      if (/\s/.test(c2) && !quoted) {
        return "";
      }
      if (c2 === '"') {
        quoted = !quoted;
      }
      return c2;
    }).join("");
    this.url.searchParams.set("select", cleanedColumns);
    if (count) {
      this.headers["Prefer"] = `count=${count}`;
    }
    return new PostgrestFilterBuilder_1$2.default({
      method,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      fetch: this.fetch,
      allowEmpty: false
    });
  }
  /**
   * Perform an INSERT into the table or view.
   *
   * By default, inserted rows are not returned. To return it, chain the call
   * with `.select()`.
   *
   * @param values - The values to insert. Pass an object to insert a single row
   * or an array to insert multiple rows.
   *
   * @param options - Named parameters
   *
   * @param options.count - Count algorithm to use to count inserted rows.
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   *
   * @param options.defaultToNull - Make missing fields default to `null`.
   * Otherwise, use the default value for the column. Only applies for bulk
   * inserts.
   */
  insert(values, { count, defaultToNull = true } = {}) {
    const method = "POST";
    const prefersHeaders = [];
    if (this.headers["Prefer"]) {
      prefersHeaders.push(this.headers["Prefer"]);
    }
    if (count) {
      prefersHeaders.push(`count=${count}`);
    }
    if (!defaultToNull) {
      prefersHeaders.push("missing=default");
    }
    this.headers["Prefer"] = prefersHeaders.join(",");
    if (Array.isArray(values)) {
      const columns = values.reduce((acc, x2) => acc.concat(Object.keys(x2)), []);
      if (columns.length > 0) {
        const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
        this.url.searchParams.set("columns", uniqueColumns.join(","));
      }
    }
    return new PostgrestFilterBuilder_1$2.default({
      method,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      body: values,
      fetch: this.fetch,
      allowEmpty: false
    });
  }
  /**
   * Perform an UPSERT on the table or view. Depending on the column(s) passed
   * to `onConflict`, `.upsert()` allows you to perform the equivalent of
   * `.insert()` if a row with the corresponding `onConflict` columns doesn't
   * exist, or if it does exist, perform an alternative action depending on
   * `ignoreDuplicates`.
   *
   * By default, upserted rows are not returned. To return it, chain the call
   * with `.select()`.
   *
   * @param values - The values to upsert with. Pass an object to upsert a
   * single row or an array to upsert multiple rows.
   *
   * @param options - Named parameters
   *
   * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how
   * duplicate rows are determined. Two rows are duplicates if all the
   * `onConflict` columns are equal.
   *
   * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If
   * `false`, duplicate rows are merged with existing rows.
   *
   * @param options.count - Count algorithm to use to count upserted rows.
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   *
   * @param options.defaultToNull - Make missing fields default to `null`.
   * Otherwise, use the default value for the column. This only applies when
   * inserting new rows, not when merging with existing rows under
   * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.
   */
  upsert(values, { onConflict, ignoreDuplicates = false, count, defaultToNull = true } = {}) {
    const method = "POST";
    const prefersHeaders = [`resolution=${ignoreDuplicates ? "ignore" : "merge"}-duplicates`];
    if (onConflict !== void 0)
      this.url.searchParams.set("on_conflict", onConflict);
    if (this.headers["Prefer"]) {
      prefersHeaders.push(this.headers["Prefer"]);
    }
    if (count) {
      prefersHeaders.push(`count=${count}`);
    }
    if (!defaultToNull) {
      prefersHeaders.push("missing=default");
    }
    this.headers["Prefer"] = prefersHeaders.join(",");
    if (Array.isArray(values)) {
      const columns = values.reduce((acc, x2) => acc.concat(Object.keys(x2)), []);
      if (columns.length > 0) {
        const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
        this.url.searchParams.set("columns", uniqueColumns.join(","));
      }
    }
    return new PostgrestFilterBuilder_1$2.default({
      method,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      body: values,
      fetch: this.fetch,
      allowEmpty: false
    });
  }
  /**
   * Perform an UPDATE on the table or view.
   *
   * By default, updated rows are not returned. To return it, chain the call
   * with `.select()` after filters.
   *
   * @param values - The values to update with
   *
   * @param options - Named parameters
   *
   * @param options.count - Count algorithm to use to count updated rows.
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   */
  update(values, { count } = {}) {
    const method = "PATCH";
    const prefersHeaders = [];
    if (this.headers["Prefer"]) {
      prefersHeaders.push(this.headers["Prefer"]);
    }
    if (count) {
      prefersHeaders.push(`count=${count}`);
    }
    this.headers["Prefer"] = prefersHeaders.join(",");
    return new PostgrestFilterBuilder_1$2.default({
      method,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      body: values,
      fetch: this.fetch,
      allowEmpty: false
    });
  }
  /**
   * Perform a DELETE on the table or view.
   *
   * By default, deleted rows are not returned. To return it, chain the call
   * with `.select()` after filters.
   *
   * @param options - Named parameters
   *
   * @param options.count - Count algorithm to use to count deleted rows.
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   */
  delete({ count } = {}) {
    const method = "DELETE";
    const prefersHeaders = [];
    if (count) {
      prefersHeaders.push(`count=${count}`);
    }
    if (this.headers["Prefer"]) {
      prefersHeaders.unshift(this.headers["Prefer"]);
    }
    this.headers["Prefer"] = prefersHeaders.join(",");
    return new PostgrestFilterBuilder_1$2.default({
      method,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      fetch: this.fetch,
      allowEmpty: false
    });
  }
};
PostgrestQueryBuilder$2.default = PostgrestQueryBuilder$1;
var constants = {};
var version$5 = {};
Object.defineProperty(version$5, "__esModule", { value: true });
version$5.version = void 0;
version$5.version = "0.0.0-automated";
Object.defineProperty(constants, "__esModule", { value: true });
constants.DEFAULT_HEADERS = void 0;
const version_1 = version$5;
constants.DEFAULT_HEADERS = { "X-Client-Info": `postgrest-js/${version_1.version}` };
var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(PostgrestClient$2, "__esModule", { value: true });
const PostgrestQueryBuilder_1$1 = __importDefault$1(PostgrestQueryBuilder$2);
const PostgrestFilterBuilder_1$1 = __importDefault$1(PostgrestFilterBuilder$2);
const constants_1 = constants;
let PostgrestClient$1 = class PostgrestClient {
  // TODO: Add back shouldThrowOnError once we figure out the typings
  /**
   * Creates a PostgREST client.
   *
   * @param url - URL of the PostgREST endpoint
   * @param options - Named parameters
   * @param options.headers - Custom headers
   * @param options.schema - Postgres schema to switch to
   * @param options.fetch - Custom fetch
   */
  constructor(url, { headers = {}, schema, fetch: fetch2 } = {}) {
    this.url = url;
    this.headers = Object.assign(Object.assign({}, constants_1.DEFAULT_HEADERS), headers);
    this.schemaName = schema;
    this.fetch = fetch2;
  }
  /**
   * Perform a query on a table or a view.
   *
   * @param relation - The table or view name to query
   */
  from(relation) {
    const url = new URL(`${this.url}/${relation}`);
    return new PostgrestQueryBuilder_1$1.default(url, {
      headers: Object.assign({}, this.headers),
      schema: this.schemaName,
      fetch: this.fetch
    });
  }
  /**
   * Select a schema to query or perform an function (rpc) call.
   *
   * The schema needs to be on the list of exposed schemas inside Supabase.
   *
   * @param schema - The schema to query
   */
  schema(schema) {
    return new PostgrestClient(this.url, {
      headers: this.headers,
      schema,
      fetch: this.fetch
    });
  }
  /**
   * Perform a function call.
   *
   * @param fn - The function name to call
   * @param args - The arguments to pass to the function call
   * @param options - Named parameters
   * @param options.head - When set to `true`, `data` will not be returned.
   * Useful if you only need the count.
   * @param options.get - When set to `true`, the function will be called with
   * read-only access mode.
   * @param options.count - Count algorithm to use to count rows returned by the
   * function. Only applicable for [set-returning
   * functions](https://www.postgresql.org/docs/current/functions-srf.html).
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   */
  rpc(fn, args = {}, { head: head2 = false, get: get2 = false, count } = {}) {
    let method;
    const url = new URL(`${this.url}/rpc/${fn}`);
    let body;
    if (head2 || get2) {
      method = head2 ? "HEAD" : "GET";
      Object.entries(args).filter(([_2, value]) => value !== void 0).map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(",")}}` : `${value}`]).forEach(([name, value]) => {
        url.searchParams.append(name, value);
      });
    } else {
      method = "POST";
      body = args;
    }
    const headers = Object.assign({}, this.headers);
    if (count) {
      headers["Prefer"] = `count=${count}`;
    }
    return new PostgrestFilterBuilder_1$1.default({
      method,
      url,
      headers,
      schema: this.schemaName,
      body,
      fetch: this.fetch,
      allowEmpty: false
    });
  }
};
PostgrestClient$2.default = PostgrestClient$1;
var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(cjs, "__esModule", { value: true });
cjs.PostgrestError = cjs.PostgrestBuilder = cjs.PostgrestTransformBuilder = cjs.PostgrestFilterBuilder = cjs.PostgrestQueryBuilder = cjs.PostgrestClient = void 0;
const PostgrestClient_1 = __importDefault(PostgrestClient$2);
cjs.PostgrestClient = PostgrestClient_1.default;
const PostgrestQueryBuilder_1 = __importDefault(PostgrestQueryBuilder$2);
cjs.PostgrestQueryBuilder = PostgrestQueryBuilder_1.default;
const PostgrestFilterBuilder_1 = __importDefault(PostgrestFilterBuilder$2);
cjs.PostgrestFilterBuilder = PostgrestFilterBuilder_1.default;
const PostgrestTransformBuilder_1 = __importDefault(PostgrestTransformBuilder$2);
cjs.PostgrestTransformBuilder = PostgrestTransformBuilder_1.default;
const PostgrestBuilder_1 = __importDefault(PostgrestBuilder$2);
cjs.PostgrestBuilder = PostgrestBuilder_1.default;
const PostgrestError_1 = __importDefault(PostgrestError$2);
cjs.PostgrestError = PostgrestError_1.default;
var _default = cjs.default = {
  PostgrestClient: PostgrestClient_1.default,
  PostgrestQueryBuilder: PostgrestQueryBuilder_1.default,
  PostgrestFilterBuilder: PostgrestFilterBuilder_1.default,
  PostgrestTransformBuilder: PostgrestTransformBuilder_1.default,
  PostgrestBuilder: PostgrestBuilder_1.default,
  PostgrestError: PostgrestError_1.default
};
const {
  PostgrestClient: PostgrestClient2,
  PostgrestQueryBuilder: PostgrestQueryBuilder2,
  PostgrestFilterBuilder: PostgrestFilterBuilder2,
  PostgrestTransformBuilder: PostgrestTransformBuilder2,
  PostgrestBuilder: PostgrestBuilder2,
  PostgrestError: PostgrestError2
} = _default;
let WebSocketImpl;
if (typeof window === "undefined") {
  WebSocketImpl = require("ws");
} else {
  WebSocketImpl = window.WebSocket;
}
const version$4 = "2.11.9";
const DEFAULT_HEADERS$3 = { "X-Client-Info": `realtime-js/${version$4}` };
const VSN = "1.0.0";
const DEFAULT_TIMEOUT = 1e4;
const WS_CLOSE_NORMAL = 1e3;
var SOCKET_STATES;
(function(SOCKET_STATES2) {
  SOCKET_STATES2[SOCKET_STATES2["connecting"] = 0] = "connecting";
  SOCKET_STATES2[SOCKET_STATES2["open"] = 1] = "open";
  SOCKET_STATES2[SOCKET_STATES2["closing"] = 2] = "closing";
  SOCKET_STATES2[SOCKET_STATES2["closed"] = 3] = "closed";
})(SOCKET_STATES || (SOCKET_STATES = {}));
var CHANNEL_STATES;
(function(CHANNEL_STATES2) {
  CHANNEL_STATES2["closed"] = "closed";
  CHANNEL_STATES2["errored"] = "errored";
  CHANNEL_STATES2["joined"] = "joined";
  CHANNEL_STATES2["joining"] = "joining";
  CHANNEL_STATES2["leaving"] = "leaving";
})(CHANNEL_STATES || (CHANNEL_STATES = {}));
var CHANNEL_EVENTS;
(function(CHANNEL_EVENTS2) {
  CHANNEL_EVENTS2["close"] = "phx_close";
  CHANNEL_EVENTS2["error"] = "phx_error";
  CHANNEL_EVENTS2["join"] = "phx_join";
  CHANNEL_EVENTS2["reply"] = "phx_reply";
  CHANNEL_EVENTS2["leave"] = "phx_leave";
  CHANNEL_EVENTS2["access_token"] = "access_token";
})(CHANNEL_EVENTS || (CHANNEL_EVENTS = {}));
var TRANSPORTS;
(function(TRANSPORTS2) {
  TRANSPORTS2["websocket"] = "websocket";
})(TRANSPORTS || (TRANSPORTS = {}));
var CONNECTION_STATE;
(function(CONNECTION_STATE2) {
  CONNECTION_STATE2["Connecting"] = "connecting";
  CONNECTION_STATE2["Open"] = "open";
  CONNECTION_STATE2["Closing"] = "closing";
  CONNECTION_STATE2["Closed"] = "closed";
})(CONNECTION_STATE || (CONNECTION_STATE = {}));
class Serializer {
  constructor() {
    this.HEADER_LENGTH = 1;
  }
  decode(rawPayload, callback2) {
    if (rawPayload.constructor === ArrayBuffer) {
      return callback2(this._binaryDecode(rawPayload));
    }
    if (typeof rawPayload === "string") {
      return callback2(JSON.parse(rawPayload));
    }
    return callback2({});
  }
  _binaryDecode(buffer) {
    const view = new DataView(buffer);
    const decoder = new TextDecoder();
    return this._decodeBroadcast(buffer, view, decoder);
  }
  _decodeBroadcast(buffer, view, decoder) {
    const topicSize = view.getUint8(1);
    const eventSize = view.getUint8(2);
    let offset = this.HEADER_LENGTH + 2;
    const topic = decoder.decode(buffer.slice(offset, offset + topicSize));
    offset = offset + topicSize;
    const event = decoder.decode(buffer.slice(offset, offset + eventSize));
    offset = offset + eventSize;
    const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));
    return { ref: null, topic, event, payload: data };
  }
}
class Timer {
  constructor(callback2, timerCalc) {
    this.callback = callback2;
    this.timerCalc = timerCalc;
    this.timer = void 0;
    this.tries = 0;
    this.callback = callback2;
    this.timerCalc = timerCalc;
  }
  reset() {
    this.tries = 0;
    clearTimeout(this.timer);
  }
  // Cancels any previous scheduleTimeout and schedules callback
  scheduleTimeout() {
    clearTimeout(this.timer);
    this.timer = setTimeout(() => {
      this.tries = this.tries + 1;
      this.callback();
    }, this.timerCalc(this.tries + 1));
  }
}
var PostgresTypes;
(function(PostgresTypes2) {
  PostgresTypes2["abstime"] = "abstime";
  PostgresTypes2["bool"] = "bool";
  PostgresTypes2["date"] = "date";
  PostgresTypes2["daterange"] = "daterange";
  PostgresTypes2["float4"] = "float4";
  PostgresTypes2["float8"] = "float8";
  PostgresTypes2["int2"] = "int2";
  PostgresTypes2["int4"] = "int4";
  PostgresTypes2["int4range"] = "int4range";
  PostgresTypes2["int8"] = "int8";
  PostgresTypes2["int8range"] = "int8range";
  PostgresTypes2["json"] = "json";
  PostgresTypes2["jsonb"] = "jsonb";
  PostgresTypes2["money"] = "money";
  PostgresTypes2["numeric"] = "numeric";
  PostgresTypes2["oid"] = "oid";
  PostgresTypes2["reltime"] = "reltime";
  PostgresTypes2["text"] = "text";
  PostgresTypes2["time"] = "time";
  PostgresTypes2["timestamp"] = "timestamp";
  PostgresTypes2["timestamptz"] = "timestamptz";
  PostgresTypes2["timetz"] = "timetz";
  PostgresTypes2["tsrange"] = "tsrange";
  PostgresTypes2["tstzrange"] = "tstzrange";
})(PostgresTypes || (PostgresTypes = {}));
const convertChangeData = (columns, record, options = {}) => {
  var _a2;
  const skipTypes = (_a2 = options.skipTypes) !== null && _a2 !== void 0 ? _a2 : [];
  return Object.keys(record).reduce((acc, rec_key) => {
    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);
    return acc;
  }, {});
};
const convertColumn = (columnName, columns, record, skipTypes) => {
  const column = columns.find((x2) => x2.name === columnName);
  const colType = column === null || column === void 0 ? void 0 : column.type;
  const value = record[columnName];
  if (colType && !skipTypes.includes(colType)) {
    return convertCell(colType, value);
  }
  return noop$3(value);
};
const convertCell = (type, value) => {
  if (type.charAt(0) === "_") {
    const dataType = type.slice(1, type.length);
    return toArray(value, dataType);
  }
  switch (type) {
    case PostgresTypes.bool:
      return toBoolean(value);
    case PostgresTypes.float4:
    case PostgresTypes.float8:
    case PostgresTypes.int2:
    case PostgresTypes.int4:
    case PostgresTypes.int8:
    case PostgresTypes.numeric:
    case PostgresTypes.oid:
      return toNumber(value);
    case PostgresTypes.json:
    case PostgresTypes.jsonb:
      return toJson(value);
    case PostgresTypes.timestamp:
      return toTimestampString(value);
    case PostgresTypes.abstime:
    case PostgresTypes.date:
    case PostgresTypes.daterange:
    case PostgresTypes.int4range:
    case PostgresTypes.int8range:
    case PostgresTypes.money:
    case PostgresTypes.reltime:
    case PostgresTypes.text:
    case PostgresTypes.time:
    case PostgresTypes.timestamptz:
    case PostgresTypes.timetz:
    case PostgresTypes.tsrange:
    case PostgresTypes.tstzrange:
      return noop$3(value);
    default:
      return noop$3(value);
  }
};
const noop$3 = (value) => {
  return value;
};
const toBoolean = (value) => {
  switch (value) {
    case "t":
      return true;
    case "f":
      return false;
    default:
      return value;
  }
};
const toNumber = (value) => {
  if (typeof value === "string") {
    const parsedValue = parseFloat(value);
    if (!Number.isNaN(parsedValue)) {
      return parsedValue;
    }
  }
  return value;
};
const toJson = (value) => {
  if (typeof value === "string") {
    try {
      return JSON.parse(value);
    } catch (error) {
      console.log(`JSON parse error: ${error}`);
      return value;
    }
  }
  return value;
};
const toArray = (value, type) => {
  if (typeof value !== "string") {
    return value;
  }
  const lastIdx = value.length - 1;
  const closeBrace = value[lastIdx];
  const openBrace = value[0];
  if (openBrace === "{" && closeBrace === "}") {
    let arr;
    const valTrim = value.slice(1, lastIdx);
    try {
      arr = JSON.parse("[" + valTrim + "]");
    } catch (_2) {
      arr = valTrim ? valTrim.split(",") : [];
    }
    return arr.map((val) => convertCell(type, val));
  }
  return value;
};
const toTimestampString = (value) => {
  if (typeof value === "string") {
    return value.replace(" ", "T");
  }
  return value;
};
const httpEndpointURL = (socketUrl) => {
  let url = socketUrl;
  url = url.replace(/^ws/i, "http");
  url = url.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i, "");
  return url.replace(/\/+$/, "");
};
class Push {
  /**
   * Initializes the Push
   *
   * @param channel The Channel
   * @param event The event, for example `"phx_join"`
   * @param payload The payload, for example `{user_id: 123}`
   * @param timeout The push timeout in milliseconds
   */
  constructor(channel, event, payload = {}, timeout = DEFAULT_TIMEOUT) {
    this.channel = channel;
    this.event = event;
    this.payload = payload;
    this.timeout = timeout;
    this.sent = false;
    this.timeoutTimer = void 0;
    this.ref = "";
    this.receivedResp = null;
    this.recHooks = [];
    this.refEvent = null;
  }
  resend(timeout) {
    this.timeout = timeout;
    this._cancelRefEvent();
    this.ref = "";
    this.refEvent = null;
    this.receivedResp = null;
    this.sent = false;
    this.send();
  }
  send() {
    if (this._hasReceived("timeout")) {
      return;
    }
    this.startTimeout();
    this.sent = true;
    this.channel.socket.push({
      topic: this.channel.topic,
      event: this.event,
      payload: this.payload,
      ref: this.ref,
      join_ref: this.channel._joinRef()
    });
  }
  updatePayload(payload) {
    this.payload = Object.assign(Object.assign({}, this.payload), payload);
  }
  receive(status, callback2) {
    var _a2;
    if (this._hasReceived(status)) {
      callback2((_a2 = this.receivedResp) === null || _a2 === void 0 ? void 0 : _a2.response);
    }
    this.recHooks.push({ status, callback: callback2 });
    return this;
  }
  startTimeout() {
    if (this.timeoutTimer) {
      return;
    }
    this.ref = this.channel.socket._makeRef();
    this.refEvent = this.channel._replyEventName(this.ref);
    const callback2 = (payload) => {
      this._cancelRefEvent();
      this._cancelTimeout();
      this.receivedResp = payload;
      this._matchReceive(payload);
    };
    this.channel._on(this.refEvent, {}, callback2);
    this.timeoutTimer = setTimeout(() => {
      this.trigger("timeout", {});
    }, this.timeout);
  }
  trigger(status, response) {
    if (this.refEvent)
      this.channel._trigger(this.refEvent, { status, response });
  }
  destroy() {
    this._cancelRefEvent();
    this._cancelTimeout();
  }
  _cancelRefEvent() {
    if (!this.refEvent) {
      return;
    }
    this.channel._off(this.refEvent, {});
  }
  _cancelTimeout() {
    clearTimeout(this.timeoutTimer);
    this.timeoutTimer = void 0;
  }
  _matchReceive({ status, response }) {
    this.recHooks.filter((h3) => h3.status === status).forEach((h3) => h3.callback(response));
  }
  _hasReceived(status) {
    return this.receivedResp && this.receivedResp.status === status;
  }
}
var REALTIME_PRESENCE_LISTEN_EVENTS;
(function(REALTIME_PRESENCE_LISTEN_EVENTS2) {
  REALTIME_PRESENCE_LISTEN_EVENTS2["SYNC"] = "sync";
  REALTIME_PRESENCE_LISTEN_EVENTS2["JOIN"] = "join";
  REALTIME_PRESENCE_LISTEN_EVENTS2["LEAVE"] = "leave";
})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));
class RealtimePresence {
  /**
   * Initializes the Presence.
   *
   * @param channel - The RealtimeChannel
   * @param opts - The options,
   *        for example `{events: {state: 'state', diff: 'diff'}}`
   */
  constructor(channel, opts) {
    this.channel = channel;
    this.state = {};
    this.pendingDiffs = [];
    this.joinRef = null;
    this.caller = {
      onJoin: () => {
      },
      onLeave: () => {
      },
      onSync: () => {
      }
    };
    const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {
      state: "presence_state",
      diff: "presence_diff"
    };
    this.channel._on(events.state, {}, (newState) => {
      const { onJoin, onLeave, onSync } = this.caller;
      this.joinRef = this.channel._joinRef();
      this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);
      this.pendingDiffs.forEach((diff) => {
        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
      });
      this.pendingDiffs = [];
      onSync();
    });
    this.channel._on(events.diff, {}, (diff) => {
      const { onJoin, onLeave, onSync } = this.caller;
      if (this.inPendingSyncState()) {
        this.pendingDiffs.push(diff);
      } else {
        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
        onSync();
      }
    });
    this.onJoin((key, currentPresences, newPresences) => {
      this.channel._trigger("presence", {
        event: "join",
        key,
        currentPresences,
        newPresences
      });
    });
    this.onLeave((key, currentPresences, leftPresences) => {
      this.channel._trigger("presence", {
        event: "leave",
        key,
        currentPresences,
        leftPresences
      });
    });
    this.onSync(() => {
      this.channel._trigger("presence", { event: "sync" });
    });
  }
  /**
   * Used to sync the list of presences on the server with the
   * client's state.
   *
   * An optional `onJoin` and `onLeave` callback can be provided to
   * react to changes in the client's local presences across
   * disconnects and reconnects with the server.
   *
   * @internal
   */
  static syncState(currentState, newState, onJoin, onLeave) {
    const state = this.cloneDeep(currentState);
    const transformedState = this.transformState(newState);
    const joins = {};
    const leaves = {};
    this.map(state, (key, presences) => {
      if (!transformedState[key]) {
        leaves[key] = presences;
      }
    });
    this.map(transformedState, (key, newPresences) => {
      const currentPresences = state[key];
      if (currentPresences) {
        const newPresenceRefs = newPresences.map((m2) => m2.presence_ref);
        const curPresenceRefs = currentPresences.map((m2) => m2.presence_ref);
        const joinedPresences = newPresences.filter((m2) => curPresenceRefs.indexOf(m2.presence_ref) < 0);
        const leftPresences = currentPresences.filter((m2) => newPresenceRefs.indexOf(m2.presence_ref) < 0);
        if (joinedPresences.length > 0) {
          joins[key] = joinedPresences;
        }
        if (leftPresences.length > 0) {
          leaves[key] = leftPresences;
        }
      } else {
        joins[key] = newPresences;
      }
    });
    return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);
  }
  /**
   * Used to sync a diff of presence join and leave events from the
   * server, as they happen.
   *
   * Like `syncState`, `syncDiff` accepts optional `onJoin` and
   * `onLeave` callbacks to react to a user joining or leaving from a
   * device.
   *
   * @internal
   */
  static syncDiff(state, diff, onJoin, onLeave) {
    const { joins, leaves } = {
      joins: this.transformState(diff.joins),
      leaves: this.transformState(diff.leaves)
    };
    if (!onJoin) {
      onJoin = () => {
      };
    }
    if (!onLeave) {
      onLeave = () => {
      };
    }
    this.map(joins, (key, newPresences) => {
      var _a2;
      const currentPresences = (_a2 = state[key]) !== null && _a2 !== void 0 ? _a2 : [];
      state[key] = this.cloneDeep(newPresences);
      if (currentPresences.length > 0) {
        const joinedPresenceRefs = state[key].map((m2) => m2.presence_ref);
        const curPresences = currentPresences.filter((m2) => joinedPresenceRefs.indexOf(m2.presence_ref) < 0);
        state[key].unshift(...curPresences);
      }
      onJoin(key, currentPresences, newPresences);
    });
    this.map(leaves, (key, leftPresences) => {
      let currentPresences = state[key];
      if (!currentPresences)
        return;
      const presenceRefsToRemove = leftPresences.map((m2) => m2.presence_ref);
      currentPresences = currentPresences.filter((m2) => presenceRefsToRemove.indexOf(m2.presence_ref) < 0);
      state[key] = currentPresences;
      onLeave(key, currentPresences, leftPresences);
      if (currentPresences.length === 0)
        delete state[key];
    });
    return state;
  }
  /** @internal */
  static map(obj, func) {
    return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));
  }
  /**
   * Remove 'metas' key
   * Change 'phx_ref' to 'presence_ref'
   * Remove 'phx_ref' and 'phx_ref_prev'
   *
   * @example
   * // returns {
   *  abc123: [
   *    { presence_ref: '2', user_id: 1 },
   *    { presence_ref: '3', user_id: 2 }
   *  ]
   * }
   * RealtimePresence.transformState({
   *  abc123: {
   *    metas: [
   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },
   *      { phx_ref: '3', user_id: 2 }
   *    ]
   *  }
   * })
   *
   * @internal
   */
  static transformState(state) {
    state = this.cloneDeep(state);
    return Object.getOwnPropertyNames(state).reduce((newState, key) => {
      const presences = state[key];
      if ("metas" in presences) {
        newState[key] = presences.metas.map((presence) => {
          presence["presence_ref"] = presence["phx_ref"];
          delete presence["phx_ref"];
          delete presence["phx_ref_prev"];
          return presence;
        });
      } else {
        newState[key] = presences;
      }
      return newState;
    }, {});
  }
  /** @internal */
  static cloneDeep(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  /** @internal */
  onJoin(callback2) {
    this.caller.onJoin = callback2;
  }
  /** @internal */
  onLeave(callback2) {
    this.caller.onLeave = callback2;
  }
  /** @internal */
  onSync(callback2) {
    this.caller.onSync = callback2;
  }
  /** @internal */
  inPendingSyncState() {
    return !this.joinRef || this.joinRef !== this.channel._joinRef();
  }
}
var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;
(function(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2) {
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["ALL"] = "*";
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["INSERT"] = "INSERT";
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["UPDATE"] = "UPDATE";
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["DELETE"] = "DELETE";
})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));
var REALTIME_LISTEN_TYPES;
(function(REALTIME_LISTEN_TYPES2) {
  REALTIME_LISTEN_TYPES2["BROADCAST"] = "broadcast";
  REALTIME_LISTEN_TYPES2["PRESENCE"] = "presence";
  REALTIME_LISTEN_TYPES2["POSTGRES_CHANGES"] = "postgres_changes";
  REALTIME_LISTEN_TYPES2["SYSTEM"] = "system";
})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));
var REALTIME_SUBSCRIBE_STATES;
(function(REALTIME_SUBSCRIBE_STATES2) {
  REALTIME_SUBSCRIBE_STATES2["SUBSCRIBED"] = "SUBSCRIBED";
  REALTIME_SUBSCRIBE_STATES2["TIMED_OUT"] = "TIMED_OUT";
  REALTIME_SUBSCRIBE_STATES2["CLOSED"] = "CLOSED";
  REALTIME_SUBSCRIBE_STATES2["CHANNEL_ERROR"] = "CHANNEL_ERROR";
})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));
class RealtimeChannel {
  constructor(topic, params = { config: {} }, socket) {
    this.topic = topic;
    this.params = params;
    this.socket = socket;
    this.bindings = {};
    this.state = CHANNEL_STATES.closed;
    this.joinedOnce = false;
    this.pushBuffer = [];
    this.subTopic = topic.replace(/^realtime:/i, "");
    this.params.config = Object.assign({
      broadcast: { ack: false, self: false },
      presence: { key: "" },
      private: false
    }, params.config);
    this.timeout = this.socket.timeout;
    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
    this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);
    this.joinPush.receive("ok", () => {
      this.state = CHANNEL_STATES.joined;
      this.rejoinTimer.reset();
      this.pushBuffer.forEach((pushEvent) => pushEvent.send());
      this.pushBuffer = [];
    });
    this._onClose(() => {
      this.rejoinTimer.reset();
      this.socket.log("channel", `close ${this.topic} ${this._joinRef()}`);
      this.state = CHANNEL_STATES.closed;
      this.socket._remove(this);
    });
    this._onError((reason) => {
      if (this._isLeaving() || this._isClosed()) {
        return;
      }
      this.socket.log("channel", `error ${this.topic}`, reason);
      this.state = CHANNEL_STATES.errored;
      this.rejoinTimer.scheduleTimeout();
    });
    this.joinPush.receive("timeout", () => {
      if (!this._isJoining()) {
        return;
      }
      this.socket.log("channel", `timeout ${this.topic}`, this.joinPush.timeout);
      this.state = CHANNEL_STATES.errored;
      this.rejoinTimer.scheduleTimeout();
    });
    this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {
      this._trigger(this._replyEventName(ref), payload);
    });
    this.presence = new RealtimePresence(this);
    this.broadcastEndpointURL = httpEndpointURL(this.socket.endPoint) + "/api/broadcast";
    this.private = this.params.config.private || false;
  }
  /** Subscribe registers your client with the server */
  subscribe(callback2, timeout = this.timeout) {
    var _a2, _b2;
    if (!this.socket.isConnected()) {
      this.socket.connect();
    }
    if (this.joinedOnce) {
      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;
    } else {
      const { config: { broadcast, presence, private: isPrivate } } = this.params;
      this._onError((e) => callback2 === null || callback2 === void 0 ? void 0 : callback2(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e));
      this._onClose(() => callback2 === null || callback2 === void 0 ? void 0 : callback2(REALTIME_SUBSCRIBE_STATES.CLOSED));
      const accessTokenPayload = {};
      const config = {
        broadcast,
        presence,
        postgres_changes: (_b2 = (_a2 = this.bindings.postgres_changes) === null || _a2 === void 0 ? void 0 : _a2.map((r2) => r2.filter)) !== null && _b2 !== void 0 ? _b2 : [],
        private: isPrivate
      };
      if (this.socket.accessTokenValue) {
        accessTokenPayload.access_token = this.socket.accessTokenValue;
      }
      this.updateJoinPayload(Object.assign({ config }, accessTokenPayload));
      this.joinedOnce = true;
      this._rejoin(timeout);
      this.joinPush.receive("ok", async ({ postgres_changes }) => {
        var _a3;
        this.socket.setAuth();
        if (postgres_changes === void 0) {
          callback2 === null || callback2 === void 0 ? void 0 : callback2(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);
          return;
        } else {
          const clientPostgresBindings = this.bindings.postgres_changes;
          const bindingsLen = (_a3 = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a3 !== void 0 ? _a3 : 0;
          const newPostgresBindings = [];
          for (let i = 0; i < bindingsLen; i++) {
            const clientPostgresBinding = clientPostgresBindings[i];
            const { filter: { event, schema, table, filter: filter2 } } = clientPostgresBinding;
            const serverPostgresFilter = postgres_changes && postgres_changes[i];
            if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter2) {
              newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));
            } else {
              this.unsubscribe();
              this.state = CHANNEL_STATES.errored;
              callback2 === null || callback2 === void 0 ? void 0 : callback2(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error("mismatch between server and client bindings for postgres changes"));
              return;
            }
          }
          this.bindings.postgres_changes = newPostgresBindings;
          callback2 && callback2(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);
          return;
        }
      }).receive("error", (error) => {
        this.state = CHANNEL_STATES.errored;
        callback2 === null || callback2 === void 0 ? void 0 : callback2(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error(JSON.stringify(Object.values(error).join(", ") || "error")));
        return;
      }).receive("timeout", () => {
        callback2 === null || callback2 === void 0 ? void 0 : callback2(REALTIME_SUBSCRIBE_STATES.TIMED_OUT);
        return;
      });
    }
    return this;
  }
  presenceState() {
    return this.presence.state;
  }
  async track(payload, opts = {}) {
    return await this.send({
      type: "presence",
      event: "track",
      payload
    }, opts.timeout || this.timeout);
  }
  async untrack(opts = {}) {
    return await this.send({
      type: "presence",
      event: "untrack"
    }, opts);
  }
  on(type, filter2, callback2) {
    return this._on(type, filter2, callback2);
  }
  /**
   * Sends a message into the channel.
   *
   * @param args Arguments to send to channel
   * @param args.type The type of event to send
   * @param args.event The name of the event being sent
   * @param args.payload Payload to be sent
   * @param opts Options to be used during the send process
   */
  async send(args, opts = {}) {
    var _a2, _b2;
    if (!this._canPush() && args.type === "broadcast") {
      const { event, payload: endpoint_payload } = args;
      const authorization = this.socket.accessTokenValue ? `Bearer ${this.socket.accessTokenValue}` : "";
      const options = {
        method: "POST",
        headers: {
          Authorization: authorization,
          apikey: this.socket.apiKey ? this.socket.apiKey : "",
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          messages: [
            {
              topic: this.subTopic,
              event,
              payload: endpoint_payload,
              private: this.private
            }
          ]
        })
      };
      try {
        const response = await this._fetchWithTimeout(this.broadcastEndpointURL, options, (_a2 = opts.timeout) !== null && _a2 !== void 0 ? _a2 : this.timeout);
        await ((_b2 = response.body) === null || _b2 === void 0 ? void 0 : _b2.cancel());
        return response.ok ? "ok" : "error";
      } catch (error) {
        if (error.name === "AbortError") {
          return "timed out";
        } else {
          return "error";
        }
      }
    } else {
      return new Promise((resolve2) => {
        var _a3, _b3, _c;
        const push = this._push(args.type, args, opts.timeout || this.timeout);
        if (args.type === "broadcast" && !((_c = (_b3 = (_a3 = this.params) === null || _a3 === void 0 ? void 0 : _a3.config) === null || _b3 === void 0 ? void 0 : _b3.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {
          resolve2("ok");
        }
        push.receive("ok", () => resolve2("ok"));
        push.receive("error", () => resolve2("error"));
        push.receive("timeout", () => resolve2("timed out"));
      });
    }
  }
  updateJoinPayload(payload) {
    this.joinPush.updatePayload(payload);
  }
  /**
   * Leaves the channel.
   *
   * Unsubscribes from server events, and instructs channel to terminate on server.
   * Triggers onClose() hooks.
   *
   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:
   * channel.unsubscribe().receive("ok", () => alert("left!") )
   */
  unsubscribe(timeout = this.timeout) {
    this.state = CHANNEL_STATES.leaving;
    const onClose = () => {
      this.socket.log("channel", `leave ${this.topic}`);
      this._trigger(CHANNEL_EVENTS.close, "leave", this._joinRef());
    };
    this.joinPush.destroy();
    return new Promise((resolve2) => {
      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);
      leavePush.receive("ok", () => {
        onClose();
        resolve2("ok");
      }).receive("timeout", () => {
        onClose();
        resolve2("timed out");
      }).receive("error", () => {
        resolve2("error");
      });
      leavePush.send();
      if (!this._canPush()) {
        leavePush.trigger("ok", {});
      }
    });
  }
  /**
   * Teardown the channel.
   *
   * Destroys and stops related timers.
   */
  teardown() {
    this.pushBuffer.forEach((push) => push.destroy());
    this.rejoinTimer && clearTimeout(this.rejoinTimer.timer);
    this.joinPush.destroy();
  }
  /** @internal */
  async _fetchWithTimeout(url, options, timeout) {
    const controller = new AbortController();
    const id2 = setTimeout(() => controller.abort(), timeout);
    const response = await this.socket.fetch(url, Object.assign(Object.assign({}, options), { signal: controller.signal }));
    clearTimeout(id2);
    return response;
  }
  /** @internal */
  _push(event, payload, timeout = this.timeout) {
    if (!this.joinedOnce) {
      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;
    }
    let pushEvent = new Push(this, event, payload, timeout);
    if (this._canPush()) {
      pushEvent.send();
    } else {
      pushEvent.startTimeout();
      this.pushBuffer.push(pushEvent);
    }
    return pushEvent;
  }
  /**
   * Overridable message hook
   *
   * Receives all events for specialized message handling before dispatching to the channel callbacks.
   * Must return the payload, modified or unmodified.
   *
   * @internal
   */
  _onMessage(_event, payload, _ref) {
    return payload;
  }
  /** @internal */
  _isMember(topic) {
    return this.topic === topic;
  }
  /** @internal */
  _joinRef() {
    return this.joinPush.ref;
  }
  /** @internal */
  _trigger(type, payload, ref) {
    var _a2, _b2;
    const typeLower = type.toLocaleLowerCase();
    const { close, error, leave, join } = CHANNEL_EVENTS;
    const events = [close, error, leave, join];
    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {
      return;
    }
    let handledPayload = this._onMessage(typeLower, payload, ref);
    if (payload && !handledPayload) {
      throw "channel onMessage callbacks must return the payload, modified or unmodified";
    }
    if (["insert", "update", "delete"].includes(typeLower)) {
      (_a2 = this.bindings.postgres_changes) === null || _a2 === void 0 ? void 0 : _a2.filter((bind) => {
        var _a3, _b3, _c;
        return ((_a3 = bind.filter) === null || _a3 === void 0 ? void 0 : _a3.event) === "*" || ((_c = (_b3 = bind.filter) === null || _b3 === void 0 ? void 0 : _b3.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;
      }).map((bind) => bind.callback(handledPayload, ref));
    } else {
      (_b2 = this.bindings[typeLower]) === null || _b2 === void 0 ? void 0 : _b2.filter((bind) => {
        var _a3, _b3, _c, _d, _e, _f;
        if (["broadcast", "presence", "postgres_changes"].includes(typeLower)) {
          if ("id" in bind) {
            const bindId = bind.id;
            const bindEvent = (_a3 = bind.filter) === null || _a3 === void 0 ? void 0 : _a3.event;
            return bindId && ((_b3 = payload.ids) === null || _b3 === void 0 ? void 0 : _b3.includes(bindId)) && (bindEvent === "*" || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));
          } else {
            const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();
            return bindEvent === "*" || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());
          }
        } else {
          return bind.type.toLocaleLowerCase() === typeLower;
        }
      }).map((bind) => {
        if (typeof handledPayload === "object" && "ids" in handledPayload) {
          const postgresChanges = handledPayload.data;
          const { schema, table, commit_timestamp, type: type2, errors } = postgresChanges;
          const enrichedPayload = {
            schema,
            table,
            commit_timestamp,
            eventType: type2,
            new: {},
            old: {},
            errors
          };
          handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));
        }
        bind.callback(handledPayload, ref);
      });
    }
  }
  /** @internal */
  _isClosed() {
    return this.state === CHANNEL_STATES.closed;
  }
  /** @internal */
  _isJoined() {
    return this.state === CHANNEL_STATES.joined;
  }
  /** @internal */
  _isJoining() {
    return this.state === CHANNEL_STATES.joining;
  }
  /** @internal */
  _isLeaving() {
    return this.state === CHANNEL_STATES.leaving;
  }
  /** @internal */
  _replyEventName(ref) {
    return `chan_reply_${ref}`;
  }
  /** @internal */
  _on(type, filter2, callback2) {
    const typeLower = type.toLocaleLowerCase();
    const binding = {
      type: typeLower,
      filter: filter2,
      callback: callback2
    };
    if (this.bindings[typeLower]) {
      this.bindings[typeLower].push(binding);
    } else {
      this.bindings[typeLower] = [binding];
    }
    return this;
  }
  /** @internal */
  _off(type, filter2) {
    const typeLower = type.toLocaleLowerCase();
    this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {
      var _a2;
      return !(((_a2 = bind.type) === null || _a2 === void 0 ? void 0 : _a2.toLocaleLowerCase()) === typeLower && RealtimeChannel.isEqual(bind.filter, filter2));
    });
    return this;
  }
  /** @internal */
  static isEqual(obj1, obj2) {
    if (Object.keys(obj1).length !== Object.keys(obj2).length) {
      return false;
    }
    for (const k2 in obj1) {
      if (obj1[k2] !== obj2[k2]) {
        return false;
      }
    }
    return true;
  }
  /** @internal */
  _rejoinUntilConnected() {
    this.rejoinTimer.scheduleTimeout();
    if (this.socket.isConnected()) {
      this._rejoin();
    }
  }
  /**
   * Registers a callback that will be executed when the channel closes.
   *
   * @internal
   */
  _onClose(callback2) {
    this._on(CHANNEL_EVENTS.close, {}, callback2);
  }
  /**
   * Registers a callback that will be executed when the channel encounteres an error.
   *
   * @internal
   */
  _onError(callback2) {
    this._on(CHANNEL_EVENTS.error, {}, (reason) => callback2(reason));
  }
  /**
   * Returns `true` if the socket is connected and the channel has been joined.
   *
   * @internal
   */
  _canPush() {
    return this.socket.isConnected() && this._isJoined();
  }
  /** @internal */
  _rejoin(timeout = this.timeout) {
    if (this._isLeaving()) {
      return;
    }
    this.socket._leaveOpenTopic(this.topic);
    this.state = CHANNEL_STATES.joining;
    this.joinPush.resend(timeout);
  }
  /** @internal */
  _getPayloadRecords(payload) {
    const records = {
      new: {},
      old: {}
    };
    if (payload.type === "INSERT" || payload.type === "UPDATE") {
      records.new = convertChangeData(payload.columns, payload.record);
    }
    if (payload.type === "UPDATE" || payload.type === "DELETE") {
      records.old = convertChangeData(payload.columns, payload.old_record);
    }
    return records;
  }
}
const noop$2 = () => {
};
const WORKER_SCRIPT = `
  addEventListener("message", (e) => {
    if (e.data.event === "start") {
      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);
    }
  });`;
class RealtimeClient {
  /**
   * Initializes the Socket.
   *
   * @param endPoint The string WebSocket endpoint, ie, "ws://example.com/socket", "wss://example.com", "/socket" (inherited host & protocol)
   * @param httpEndpoint The string HTTP endpoint, ie, "https://example.com", "/" (inherited host & protocol)
   * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation
   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.
   * @param options.params The optional params to pass when connecting.
   * @param options.headers The optional headers to pass when connecting.
   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.
   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }
   * @param options.logLevel Sets the log level for Realtime
   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))
   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.
   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.
   * @param options.worker Use Web Worker to set a side flow. Defaults to false.
   * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.
   */
  constructor(endPoint, options) {
    var _a2;
    this.accessTokenValue = null;
    this.apiKey = null;
    this.channels = new Array();
    this.endPoint = "";
    this.httpEndpoint = "";
    this.headers = DEFAULT_HEADERS$3;
    this.params = {};
    this.timeout = DEFAULT_TIMEOUT;
    this.heartbeatIntervalMs = 25e3;
    this.heartbeatTimer = void 0;
    this.pendingHeartbeatRef = null;
    this.heartbeatCallback = noop$2;
    this.ref = 0;
    this.logger = noop$2;
    this.conn = null;
    this.sendBuffer = [];
    this.serializer = new Serializer();
    this.stateChangeCallbacks = {
      open: [],
      close: [],
      error: [],
      message: []
    };
    this.accessToken = null;
    this._resolveFetch = (customFetch) => {
      let _fetch;
      if (customFetch) {
        _fetch = customFetch;
      } else if (typeof fetch === "undefined") {
        _fetch = (...args) => __vitePreload(async () => {
          const { default: fetch2 } = await Promise.resolve().then(() => browser);
          return { default: fetch2 };
        }, true ? void 0 : void 0).then(({ default: fetch2 }) => fetch2(...args));
      } else {
        _fetch = fetch;
      }
      return (...args) => _fetch(...args);
    };
    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
    this.httpEndpoint = httpEndpointURL(endPoint);
    if (options === null || options === void 0 ? void 0 : options.transport) {
      this.transport = options.transport;
    } else {
      this.transport = null;
    }
    if (options === null || options === void 0 ? void 0 : options.params)
      this.params = options.params;
    if (options === null || options === void 0 ? void 0 : options.headers)
      this.headers = Object.assign(Object.assign({}, this.headers), options.headers);
    if (options === null || options === void 0 ? void 0 : options.timeout)
      this.timeout = options.timeout;
    if (options === null || options === void 0 ? void 0 : options.logger)
      this.logger = options.logger;
    if ((options === null || options === void 0 ? void 0 : options.logLevel) || (options === null || options === void 0 ? void 0 : options.log_level)) {
      this.logLevel = options.logLevel || options.log_level;
      this.params = Object.assign(Object.assign({}, this.params), { log_level: this.logLevel });
    }
    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs)
      this.heartbeatIntervalMs = options.heartbeatIntervalMs;
    const accessTokenValue = (_a2 = options === null || options === void 0 ? void 0 : options.params) === null || _a2 === void 0 ? void 0 : _a2.apikey;
    if (accessTokenValue) {
      this.accessTokenValue = accessTokenValue;
      this.apiKey = accessTokenValue;
    }
    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : (tries) => {
      return [1e3, 2e3, 5e3, 1e4][tries - 1] || 1e4;
    };
    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback2) => {
      return callback2(JSON.stringify(payload));
    };
    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);
    this.reconnectTimer = new Timer(async () => {
      this.disconnect();
      this.connect();
    }, this.reconnectAfterMs);
    this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);
    if (options === null || options === void 0 ? void 0 : options.worker) {
      if (typeof window !== "undefined" && !window.Worker) {
        throw new Error("Web Worker is not supported");
      }
      this.worker = (options === null || options === void 0 ? void 0 : options.worker) || false;
      this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;
    }
    this.accessToken = (options === null || options === void 0 ? void 0 : options.accessToken) || null;
  }
  /**
   * Connects the socket, unless already connected.
   */
  connect() {
    if (this.conn) {
      return;
    }
    if (!this.transport) {
      this.transport = WebSocketImpl;
    }
    if (this.transport) {
      const isBrowser2 = typeof window !== "undefined" && this.transport === window.WebSocket;
      if (isBrowser2) {
        this.conn = new this.transport(this.endpointURL());
      } else {
        this.conn = new this.transport(this.endpointURL(), void 0, {
          headers: this.headers
        });
      }
      this.setupConnection();
      return;
    }
    this.conn = new WSWebSocketDummy(this.endpointURL(), void 0, {
      close: () => {
        this.conn = null;
      }
    });
  }
  /**
   * Returns the URL of the websocket.
   * @returns string The URL of the websocket.
   */
  endpointURL() {
    return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));
  }
  /**
   * Disconnects the socket.
   *
   * @param code A numeric status code to send on disconnect.
   * @param reason A custom reason for the disconnect.
   */
  disconnect(code, reason) {
    if (this.conn) {
      this.conn.onclose = function() {
      };
      if (code) {
        this.conn.close(code, reason !== null && reason !== void 0 ? reason : "");
      } else {
        this.conn.close();
      }
      this.conn = null;
      this.heartbeatTimer && clearInterval(this.heartbeatTimer);
      this.reconnectTimer.reset();
      this.channels.forEach((channel) => channel.teardown());
    }
  }
  /**
   * Returns all created channels
   */
  getChannels() {
    return this.channels;
  }
  /**
   * Unsubscribes and removes a single channel
   * @param channel A RealtimeChannel instance
   */
  async removeChannel(channel) {
    const status = await channel.unsubscribe();
    this.channels = this.channels.filter((c2) => c2._joinRef !== channel._joinRef);
    if (this.channels.length === 0) {
      this.disconnect();
    }
    return status;
  }
  /**
   * Unsubscribes and removes all channels
   */
  async removeAllChannels() {
    const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()));
    this.channels = [];
    this.disconnect();
    return values_1;
  }
  /**
   * Logs the message.
   *
   * For customized logging, `this.logger` can be overridden.
   */
  log(kind, msg, data) {
    this.logger(kind, msg, data);
  }
  /**
   * Returns the current state of the socket.
   */
  connectionState() {
    switch (this.conn && this.conn.readyState) {
      case SOCKET_STATES.connecting:
        return CONNECTION_STATE.Connecting;
      case SOCKET_STATES.open:
        return CONNECTION_STATE.Open;
      case SOCKET_STATES.closing:
        return CONNECTION_STATE.Closing;
      default:
        return CONNECTION_STATE.Closed;
    }
  }
  /**
   * Returns `true` is the connection is open.
   */
  isConnected() {
    return this.connectionState() === CONNECTION_STATE.Open;
  }
  channel(topic, params = { config: {} }) {
    const realtimeTopic = `realtime:${topic}`;
    const exists = this.getChannels().find((c2) => c2.topic === realtimeTopic);
    if (!exists) {
      const chan = new RealtimeChannel(`realtime:${topic}`, params, this);
      this.channels.push(chan);
      return chan;
    } else {
      return exists;
    }
  }
  /**
   * Push out a message if the socket is connected.
   *
   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.
   */
  push(data) {
    const { topic, event, payload, ref } = data;
    const callback2 = () => {
      this.encode(data, (result) => {
        var _a2;
        (_a2 = this.conn) === null || _a2 === void 0 ? void 0 : _a2.send(result);
      });
    };
    this.log("push", `${topic} ${event} (${ref})`, payload);
    if (this.isConnected()) {
      callback2();
    } else {
      this.sendBuffer.push(callback2);
    }
  }
  /**
   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.
   *
   * If param is null it will use the `accessToken` callback function or the token set on the client.
   *
   * On callback used, it will set the value of the token internal to the client.
   *
   * @param token A JWT string to override the token set on the client.
   */
  async setAuth(token = null) {
    let tokenToSend = token || this.accessToken && await this.accessToken() || this.accessTokenValue;
    if (this.accessTokenValue != tokenToSend) {
      this.accessTokenValue = tokenToSend;
      this.channels.forEach((channel) => {
        tokenToSend && channel.updateJoinPayload({
          access_token: tokenToSend,
          version: this.headers && this.headers["X-Client-Info"]
        });
        if (channel.joinedOnce && channel._isJoined()) {
          channel._push(CHANNEL_EVENTS.access_token, {
            access_token: tokenToSend
          });
        }
      });
    }
  }
  /**
   * Sends a heartbeat message if the socket is connected.
   */
  async sendHeartbeat() {
    var _a2;
    if (!this.isConnected()) {
      this.heartbeatCallback("disconnected");
      return;
    }
    if (this.pendingHeartbeatRef) {
      this.pendingHeartbeatRef = null;
      this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
      this.heartbeatCallback("timeout");
      (_a2 = this.conn) === null || _a2 === void 0 ? void 0 : _a2.close(WS_CLOSE_NORMAL, "hearbeat timeout");
      return;
    }
    this.pendingHeartbeatRef = this._makeRef();
    this.push({
      topic: "phoenix",
      event: "heartbeat",
      payload: {},
      ref: this.pendingHeartbeatRef
    });
    this.heartbeatCallback("sent");
    await this.setAuth();
  }
  onHeartbeat(callback2) {
    this.heartbeatCallback = callback2;
  }
  /**
   * Flushes send buffer
   */
  flushSendBuffer() {
    if (this.isConnected() && this.sendBuffer.length > 0) {
      this.sendBuffer.forEach((callback2) => callback2());
      this.sendBuffer = [];
    }
  }
  /**
   * Return the next message ref, accounting for overflows
   *
   * @internal
   */
  _makeRef() {
    let newRef = this.ref + 1;
    if (newRef === this.ref) {
      this.ref = 0;
    } else {
      this.ref = newRef;
    }
    return this.ref.toString();
  }
  /**
   * Unsubscribe from channels with the specified topic.
   *
   * @internal
   */
  _leaveOpenTopic(topic) {
    let dupChannel = this.channels.find((c2) => c2.topic === topic && (c2._isJoined() || c2._isJoining()));
    if (dupChannel) {
      this.log("transport", `leaving duplicate topic "${topic}"`);
      dupChannel.unsubscribe();
    }
  }
  /**
   * Removes a subscription from the socket.
   *
   * @param channel An open subscription.
   *
   * @internal
   */
  _remove(channel) {
    this.channels = this.channels.filter((c2) => c2.topic !== channel.topic);
  }
  /**
   * Sets up connection handlers.
   *
   * @internal
   */
  setupConnection() {
    if (this.conn) {
      this.conn.binaryType = "arraybuffer";
      this.conn.onopen = () => this._onConnOpen();
      this.conn.onerror = (error) => this._onConnError(error);
      this.conn.onmessage = (event) => this._onConnMessage(event);
      this.conn.onclose = (event) => this._onConnClose(event);
    }
  }
  /** @internal */
  _onConnMessage(rawMessage) {
    this.decode(rawMessage.data, (msg) => {
      let { topic, event, payload, ref } = msg;
      if (topic === "phoenix" && event === "phx_reply") {
        this.heartbeatCallback(msg.payload.status == "ok" ? "ok" : "error");
      }
      if (ref && ref === this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
      }
      this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
      Array.from(this.channels).filter((channel) => channel._isMember(topic)).forEach((channel) => channel._trigger(event, payload, ref));
      this.stateChangeCallbacks.message.forEach((callback2) => callback2(msg));
    });
  }
  /** @internal */
  _onConnOpen() {
    this.log("transport", `connected to ${this.endpointURL()}`);
    this.flushSendBuffer();
    this.reconnectTimer.reset();
    if (!this.worker) {
      this.heartbeatTimer && clearInterval(this.heartbeatTimer);
      this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    } else {
      if (this.workerUrl) {
        this.log("worker", `starting worker for from ${this.workerUrl}`);
      } else {
        this.log("worker", `starting default worker`);
      }
      const objectUrl = this._workerObjectUrl(this.workerUrl);
      this.workerRef = new Worker(objectUrl);
      this.workerRef.onerror = (error) => {
        this.log("worker", "worker error", error.message);
        this.workerRef.terminate();
      };
      this.workerRef.onmessage = (event) => {
        if (event.data.event === "keepAlive") {
          this.sendHeartbeat();
        }
      };
      this.workerRef.postMessage({
        event: "start",
        interval: this.heartbeatIntervalMs
      });
    }
    this.stateChangeCallbacks.open.forEach((callback2) => callback2());
  }
  /** @internal */
  _onConnClose(event) {
    this.log("transport", "close", event);
    this._triggerChanError();
    this.heartbeatTimer && clearInterval(this.heartbeatTimer);
    this.reconnectTimer.scheduleTimeout();
    this.stateChangeCallbacks.close.forEach((callback2) => callback2(event));
  }
  /** @internal */
  _onConnError(error) {
    this.log("transport", error.message);
    this._triggerChanError();
    this.stateChangeCallbacks.error.forEach((callback2) => callback2(error));
  }
  /** @internal */
  _triggerChanError() {
    this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));
  }
  /** @internal */
  _appendParams(url, params) {
    if (Object.keys(params).length === 0) {
      return url;
    }
    const prefix = url.match(/\?/) ? "&" : "?";
    const query = new URLSearchParams(params);
    return `${url}${prefix}${query}`;
  }
  _workerObjectUrl(url) {
    let result_url;
    if (url) {
      result_url = url;
    } else {
      const blob = new Blob([WORKER_SCRIPT], { type: "application/javascript" });
      result_url = URL.createObjectURL(blob);
    }
    return result_url;
  }
}
class WSWebSocketDummy {
  constructor(address, _protocols, options) {
    this.binaryType = "arraybuffer";
    this.onclose = () => {
    };
    this.onerror = () => {
    };
    this.onmessage = () => {
    };
    this.onopen = () => {
    };
    this.readyState = SOCKET_STATES.connecting;
    this.send = () => {
    };
    this.url = null;
    this.url = address;
    this.close = options.close;
  }
}
class StorageError extends Error {
  constructor(message) {
    super(message);
    this.__isStorageError = true;
    this.name = "StorageError";
  }
}
function isStorageError(error) {
  return typeof error === "object" && error !== null && "__isStorageError" in error;
}
class StorageApiError extends StorageError {
  constructor(message, status) {
    super(message);
    this.name = "StorageApiError";
    this.status = status;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status
    };
  }
}
class StorageUnknownError extends StorageError {
  constructor(message, originalError) {
    super(message);
    this.name = "StorageUnknownError";
    this.originalError = originalError;
  }
}
var __awaiter$6 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
const resolveFetch$2 = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = (...args) => __vitePreload(async () => {
      const { default: fetch2 } = await Promise.resolve().then(() => browser);
      return { default: fetch2 };
    }, true ? void 0 : void 0).then(({ default: fetch2 }) => fetch2(...args));
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
const resolveResponse = () => __awaiter$6(void 0, void 0, void 0, function* () {
  if (typeof Response === "undefined") {
    return (yield __vitePreload(() => Promise.resolve().then(() => browser), true ? void 0 : void 0)).Response;
  }
  return Response;
});
const recursiveToCamel = (item) => {
  if (Array.isArray(item)) {
    return item.map((el2) => recursiveToCamel(el2));
  } else if (typeof item === "function" || item !== Object(item)) {
    return item;
  }
  const result = {};
  Object.entries(item).forEach(([key, value]) => {
    const newKey = key.replace(/([-_][a-z])/gi, (c2) => c2.toUpperCase().replace(/[-_]/g, ""));
    result[newKey] = recursiveToCamel(value);
  });
  return result;
};
var __awaiter$5 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
const _getErrorMessage$1 = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);
const handleError$1 = (error, reject, options) => __awaiter$5(void 0, void 0, void 0, function* () {
  const Res = yield resolveResponse();
  if (error instanceof Res && !(options === null || options === void 0 ? void 0 : options.noResolveJson)) {
    error.json().then((err) => {
      reject(new StorageApiError(_getErrorMessage$1(err), error.status || 500));
    }).catch((err) => {
      reject(new StorageUnknownError(_getErrorMessage$1(err), err));
    });
  } else {
    reject(new StorageUnknownError(_getErrorMessage$1(error), error));
  }
});
const _getRequestParams$1 = (method, options, parameters, body) => {
  const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };
  if (method === "GET") {
    return params;
  }
  params.headers = Object.assign({ "Content-Type": "application/json" }, options === null || options === void 0 ? void 0 : options.headers);
  if (body) {
    params.body = JSON.stringify(body);
  }
  return Object.assign(Object.assign({}, params), parameters);
};
function _handleRequest$1(fetcher, method, url, options, parameters, body) {
  return __awaiter$5(this, void 0, void 0, function* () {
    return new Promise((resolve2, reject) => {
      fetcher(url, _getRequestParams$1(method, options, parameters, body)).then((result) => {
        if (!result.ok)
          throw result;
        if (options === null || options === void 0 ? void 0 : options.noResolveJson)
          return result;
        return result.json();
      }).then((data) => resolve2(data)).catch((error) => handleError$1(error, reject, options));
    });
  });
}
function get(fetcher, url, options, parameters) {
  return __awaiter$5(this, void 0, void 0, function* () {
    return _handleRequest$1(fetcher, "GET", url, options, parameters);
  });
}
function post(fetcher, url, body, options, parameters) {
  return __awaiter$5(this, void 0, void 0, function* () {
    return _handleRequest$1(fetcher, "POST", url, options, parameters, body);
  });
}
function put(fetcher, url, body, options, parameters) {
  return __awaiter$5(this, void 0, void 0, function* () {
    return _handleRequest$1(fetcher, "PUT", url, options, parameters, body);
  });
}
function head(fetcher, url, options, parameters) {
  return __awaiter$5(this, void 0, void 0, function* () {
    return _handleRequest$1(fetcher, "HEAD", url, Object.assign(Object.assign({}, options), { noResolveJson: true }), parameters);
  });
}
function remove(fetcher, url, body, options, parameters) {
  return __awaiter$5(this, void 0, void 0, function* () {
    return _handleRequest$1(fetcher, "DELETE", url, options, parameters, body);
  });
}
var __awaiter$4 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
const DEFAULT_SEARCH_OPTIONS = {
  limit: 100,
  offset: 0,
  sortBy: {
    column: "name",
    order: "asc"
  }
};
const DEFAULT_FILE_OPTIONS = {
  cacheControl: "3600",
  contentType: "text/plain;charset=UTF-8",
  upsert: false
};
class StorageFileApi {
  constructor(url, headers = {}, bucketId, fetch2) {
    this.url = url;
    this.headers = headers;
    this.bucketId = bucketId;
    this.fetch = resolveFetch$2(fetch2);
  }
  /**
   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.
   *
   * @param method HTTP method.
   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
   * @param fileBody The body of the file to be stored in the bucket.
   */
  uploadOrUpdate(method, path, fileBody, fileOptions) {
    return __awaiter$4(this, void 0, void 0, function* () {
      try {
        let body;
        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);
        let headers = Object.assign(Object.assign({}, this.headers), method === "POST" && { "x-upsert": String(options.upsert) });
        const metadata = options.metadata;
        if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
          body = new FormData();
          body.append("cacheControl", options.cacheControl);
          if (metadata) {
            body.append("metadata", this.encodeMetadata(metadata));
          }
          body.append("", fileBody);
        } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
          body = fileBody;
          body.append("cacheControl", options.cacheControl);
          if (metadata) {
            body.append("metadata", this.encodeMetadata(metadata));
          }
        } else {
          body = fileBody;
          headers["cache-control"] = `max-age=${options.cacheControl}`;
          headers["content-type"] = options.contentType;
          if (metadata) {
            headers["x-metadata"] = this.toBase64(this.encodeMetadata(metadata));
          }
        }
        if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {
          headers = Object.assign(Object.assign({}, headers), fileOptions.headers);
        }
        const cleanPath = this._removeEmptyFolders(path);
        const _path = this._getFinalPath(cleanPath);
        const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({ method, body, headers }, (options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {}));
        const data = yield res.json();
        if (res.ok) {
          return {
            data: { path: cleanPath, id: data.Id, fullPath: data.Key },
            error: null
          };
        } else {
          const error = data;
          return { data: null, error };
        }
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Uploads a file to an existing bucket.
   *
   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
   * @param fileBody The body of the file to be stored in the bucket.
   */
  upload(path, fileBody, fileOptions) {
    return __awaiter$4(this, void 0, void 0, function* () {
      return this.uploadOrUpdate("POST", path, fileBody, fileOptions);
    });
  }
  /**
   * Upload a file with a token generated from `createSignedUploadUrl`.
   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
   * @param token The token generated from `createSignedUploadUrl`
   * @param fileBody The body of the file to be stored in the bucket.
   */
  uploadToSignedUrl(path, token, fileBody, fileOptions) {
    return __awaiter$4(this, void 0, void 0, function* () {
      const cleanPath = this._removeEmptyFolders(path);
      const _path = this._getFinalPath(cleanPath);
      const url = new URL(this.url + `/object/upload/sign/${_path}`);
      url.searchParams.set("token", token);
      try {
        let body;
        const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);
        const headers = Object.assign(Object.assign({}, this.headers), { "x-upsert": String(options.upsert) });
        if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
          body = new FormData();
          body.append("cacheControl", options.cacheControl);
          body.append("", fileBody);
        } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
          body = fileBody;
          body.append("cacheControl", options.cacheControl);
        } else {
          body = fileBody;
          headers["cache-control"] = `max-age=${options.cacheControl}`;
          headers["content-type"] = options.contentType;
        }
        const res = yield this.fetch(url.toString(), {
          method: "PUT",
          body,
          headers
        });
        const data = yield res.json();
        if (res.ok) {
          return {
            data: { path: cleanPath, fullPath: data.Key },
            error: null
          };
        } else {
          const error = data;
          return { data: null, error };
        }
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Creates a signed upload URL.
   * Signed upload URLs can be used to upload files to the bucket without further authentication.
   * They are valid for 2 hours.
   * @param path The file path, including the current file name. For example `folder/image.png`.
   * @param options.upsert If set to true, allows the file to be overwritten if it already exists.
   */
  createSignedUploadUrl(path, options) {
    return __awaiter$4(this, void 0, void 0, function* () {
      try {
        let _path = this._getFinalPath(path);
        const headers = Object.assign({}, this.headers);
        if (options === null || options === void 0 ? void 0 : options.upsert) {
          headers["x-upsert"] = "true";
        }
        const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers });
        const url = new URL(this.url + data.url);
        const token = url.searchParams.get("token");
        if (!token) {
          throw new StorageError("No token returned by API");
        }
        return { data: { signedUrl: url.toString(), path, token }, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Replaces an existing file at the specified path with a new one.
   *
   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.
   * @param fileBody The body of the file to be stored in the bucket.
   */
  update(path, fileBody, fileOptions) {
    return __awaiter$4(this, void 0, void 0, function* () {
      return this.uploadOrUpdate("PUT", path, fileBody, fileOptions);
    });
  }
  /**
   * Moves an existing file to a new path in the same bucket.
   *
   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.
   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.
   * @param options The destination options.
   */
  move(fromPath, toPath, options) {
    return __awaiter$4(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/object/move`, {
          bucketId: this.bucketId,
          sourceKey: fromPath,
          destinationKey: toPath,
          destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket
        }, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Copies an existing file to a new path in the same bucket.
   *
   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.
   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.
   * @param options The destination options.
   */
  copy(fromPath, toPath, options) {
    return __awaiter$4(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/object/copy`, {
          bucketId: this.bucketId,
          sourceKey: fromPath,
          destinationKey: toPath,
          destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket
        }, { headers: this.headers });
        return { data: { path: data.Key }, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.
   *
   * @param path The file path, including the current file name. For example `folder/image.png`.
   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.
   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
   * @param options.transform Transform the asset before serving it to the client.
   */
  createSignedUrl(path, expiresIn, options) {
    return __awaiter$4(this, void 0, void 0, function* () {
      try {
        let _path = this._getFinalPath(path);
        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, (options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {}), { headers: this.headers });
        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? "" : options.download}` : "";
        const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);
        data = { signedUrl };
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.
   *
   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.
   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.
   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
   */
  createSignedUrls(paths, expiresIn, options) {
    return __awaiter$4(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });
        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? "" : options.download}` : "";
        return {
          data: data.map((datum) => Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null })),
          error: null
        };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.
   *
   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.
   * @param options.transform Transform the asset before serving it to the client.
   */
  download(path, options) {
    return __awaiter$4(this, void 0, void 0, function* () {
      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== "undefined";
      const renderPath = wantsTransformation ? "render/image/authenticated" : "object";
      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});
      const queryString = transformationQuery ? `?${transformationQuery}` : "";
      try {
        const _path = this._getFinalPath(path);
        const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {
          headers: this.headers,
          noResolveJson: true
        });
        const data = yield res.blob();
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Retrieves the details of an existing file.
   * @param path
   */
  info(path) {
    return __awaiter$4(this, void 0, void 0, function* () {
      const _path = this._getFinalPath(path);
      try {
        const data = yield get(this.fetch, `${this.url}/object/info/${_path}`, {
          headers: this.headers
        });
        return { data: recursiveToCamel(data), error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Checks the existence of a file.
   * @param path
   */
  exists(path) {
    return __awaiter$4(this, void 0, void 0, function* () {
      const _path = this._getFinalPath(path);
      try {
        yield head(this.fetch, `${this.url}/object/${_path}`, {
          headers: this.headers
        });
        return { data: true, error: null };
      } catch (error) {
        if (isStorageError(error) && error instanceof StorageUnknownError) {
          const originalError = error.originalError;
          if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {
            return { data: false, error };
          }
        }
        throw error;
      }
    });
  }
  /**
   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.
   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.
   *
   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.
   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
   * @param options.transform Transform the asset before serving it to the client.
   */
  getPublicUrl(path, options) {
    const _path = this._getFinalPath(path);
    const _queryString = [];
    const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? "" : options.download}` : "";
    if (downloadQueryParam !== "") {
      _queryString.push(downloadQueryParam);
    }
    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== "undefined";
    const renderPath = wantsTransformation ? "render/image" : "object";
    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});
    if (transformationQuery !== "") {
      _queryString.push(transformationQuery);
    }
    let queryString = _queryString.join("&");
    if (queryString !== "") {
      queryString = `?${queryString}`;
    }
    return {
      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) }
    };
  }
  /**
   * Deletes files within the same bucket
   *
   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].
   */
  remove(paths) {
    return __awaiter$4(this, void 0, void 0, function* () {
      try {
        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Get file metadata
   * @param id the file id to retrieve metadata
   */
  // async getMetadata(
  //   id: string
  // ): Promise<
  //   | {
  //       data: Metadata
  //       error: null
  //     }
  //   | {
  //       data: null
  //       error: StorageError
  //     }
  // > {
  //   try {
  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })
  //     return { data, error: null }
  //   } catch (error) {
  //     if (isStorageError(error)) {
  //       return { data: null, error }
  //     }
  //     throw error
  //   }
  // }
  /**
   * Update file metadata
   * @param id the file id to update metadata
   * @param meta the new file metadata
   */
  // async updateMetadata(
  //   id: string,
  //   meta: Metadata
  // ): Promise<
  //   | {
  //       data: Metadata
  //       error: null
  //     }
  //   | {
  //       data: null
  //       error: StorageError
  //     }
  // > {
  //   try {
  //     const data = await post(
  //       this.fetch,
  //       `${this.url}/metadata/${id}`,
  //       { ...meta },
  //       { headers: this.headers }
  //     )
  //     return { data, error: null }
  //   } catch (error) {
  //     if (isStorageError(error)) {
  //       return { data: null, error }
  //     }
  //     throw error
  //   }
  // }
  /**
   * Lists all the files within a bucket.
   * @param path The folder path.
   */
  list(path, options, parameters) {
    return __awaiter$4(this, void 0, void 0, function* () {
      try {
        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || "" });
        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  encodeMetadata(metadata) {
    return JSON.stringify(metadata);
  }
  toBase64(data) {
    if (typeof Buffer !== "undefined") {
      return Buffer.from(data).toString("base64");
    }
    return btoa(data);
  }
  _getFinalPath(path) {
    return `${this.bucketId}/${path}`;
  }
  _removeEmptyFolders(path) {
    return path.replace(/^\/|\/$/g, "").replace(/\/+/g, "/");
  }
  transformOptsToQueryString(transform) {
    const params = [];
    if (transform.width) {
      params.push(`width=${transform.width}`);
    }
    if (transform.height) {
      params.push(`height=${transform.height}`);
    }
    if (transform.resize) {
      params.push(`resize=${transform.resize}`);
    }
    if (transform.format) {
      params.push(`format=${transform.format}`);
    }
    if (transform.quality) {
      params.push(`quality=${transform.quality}`);
    }
    return params.join("&");
  }
}
const version$3 = "2.7.1";
const DEFAULT_HEADERS$2 = { "X-Client-Info": `storage-js/${version$3}` };
var __awaiter$3 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
class StorageBucketApi {
  constructor(url, headers = {}, fetch2) {
    this.url = url;
    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS$2), headers);
    this.fetch = resolveFetch$2(fetch2);
  }
  /**
   * Retrieves the details of all Storage buckets within an existing project.
   */
  listBuckets() {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        const data = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Retrieves the details of an existing Storage bucket.
   *
   * @param id The unique identifier of the bucket you would like to retrieve.
   */
  getBucket(id2) {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        const data = yield get(this.fetch, `${this.url}/bucket/${id2}`, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Creates a new Storage bucket
   *
   * @param id A unique identifier for the bucket you are creating.
   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.
   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.
   * The global file size limit takes precedence over this value.
   * The default value is null, which doesn't set a per bucket file size limit.
   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.
   * The default value is null, which allows files with all mime types to be uploaded.
   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.
   * @returns newly created bucket id
   */
  createBucket(id2, options = {
    public: false
  }) {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/bucket`, {
          id: id2,
          name: id2,
          public: options.public,
          file_size_limit: options.fileSizeLimit,
          allowed_mime_types: options.allowedMimeTypes
        }, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Updates a Storage bucket
   *
   * @param id A unique identifier for the bucket you are updating.
   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.
   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.
   * The global file size limit takes precedence over this value.
   * The default value is null, which doesn't set a per bucket file size limit.
   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.
   * The default value is null, which allows files with all mime types to be uploaded.
   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.
   */
  updateBucket(id2, options) {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        const data = yield put(this.fetch, `${this.url}/bucket/${id2}`, {
          id: id2,
          name: id2,
          public: options.public,
          file_size_limit: options.fileSizeLimit,
          allowed_mime_types: options.allowedMimeTypes
        }, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Removes all objects inside a single bucket.
   *
   * @param id The unique identifier of the bucket you would like to empty.
   */
  emptyBucket(id2) {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/bucket/${id2}/empty`, {}, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.
   * You must first `empty()` the bucket.
   *
   * @param id The unique identifier of the bucket you would like to delete.
   */
  deleteBucket(id2) {
    return __awaiter$3(this, void 0, void 0, function* () {
      try {
        const data = yield remove(this.fetch, `${this.url}/bucket/${id2}`, {}, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
}
class StorageClient extends StorageBucketApi {
  constructor(url, headers = {}, fetch2) {
    super(url, headers, fetch2);
  }
  /**
   * Perform file operation in a bucket.
   *
   * @param id The bucket id to operate on.
   */
  from(id2) {
    return new StorageFileApi(this.url, this.headers, id2, this.fetch);
  }
}
const version$2 = "2.49.9";
let JS_ENV = "";
if (typeof Deno !== "undefined") {
  JS_ENV = "deno";
} else if (typeof document !== "undefined") {
  JS_ENV = "web";
} else if (typeof navigator !== "undefined" && navigator.product === "ReactNative") {
  JS_ENV = "react-native";
} else {
  JS_ENV = "node";
}
const DEFAULT_HEADERS$1 = { "X-Client-Info": `supabase-js-${JS_ENV}/${version$2}` };
const DEFAULT_GLOBAL_OPTIONS = {
  headers: DEFAULT_HEADERS$1
};
const DEFAULT_DB_OPTIONS = {
  schema: "public"
};
const DEFAULT_AUTH_OPTIONS = {
  autoRefreshToken: true,
  persistSession: true,
  detectSessionInUrl: true,
  flowType: "implicit"
};
const DEFAULT_REALTIME_OPTIONS = {};
var __awaiter$2 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
const resolveFetch$1 = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = nodeFetch;
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
const resolveHeadersConstructor = () => {
  if (typeof Headers === "undefined") {
    return Headers$1;
  }
  return Headers;
};
const fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {
  const fetch2 = resolveFetch$1(customFetch);
  const HeadersConstructor = resolveHeadersConstructor();
  return (input, init) => __awaiter$2(void 0, void 0, void 0, function* () {
    var _a2;
    const accessToken = (_a2 = yield getAccessToken()) !== null && _a2 !== void 0 ? _a2 : supabaseKey;
    let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);
    if (!headers.has("apikey")) {
      headers.set("apikey", supabaseKey);
    }
    if (!headers.has("Authorization")) {
      headers.set("Authorization", `Bearer ${accessToken}`);
    }
    return fetch2(input, Object.assign(Object.assign({}, init), { headers }));
  });
};
var __awaiter$1 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function ensureTrailingSlash(url) {
  return url.endsWith("/") ? url : url + "/";
}
function applySettingDefaults(options, defaults2) {
  var _a2, _b2;
  const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions } = options;
  const { db: DEFAULT_DB_OPTIONS2, auth: DEFAULT_AUTH_OPTIONS2, realtime: DEFAULT_REALTIME_OPTIONS2, global: DEFAULT_GLOBAL_OPTIONS2 } = defaults2;
  const result = {
    db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS2), dbOptions),
    auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS2), authOptions),
    realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS2), realtimeOptions),
    global: Object.assign(Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS2), globalOptions), { headers: Object.assign(Object.assign({}, (_a2 = DEFAULT_GLOBAL_OPTIONS2 === null || DEFAULT_GLOBAL_OPTIONS2 === void 0 ? void 0 : DEFAULT_GLOBAL_OPTIONS2.headers) !== null && _a2 !== void 0 ? _a2 : {}), (_b2 = globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.headers) !== null && _b2 !== void 0 ? _b2 : {}) }),
    accessToken: () => __awaiter$1(this, void 0, void 0, function* () {
      return "";
    })
  };
  if (options.accessToken) {
    result.accessToken = options.accessToken;
  } else {
    delete result.accessToken;
  }
  return result;
}
const version$1 = "2.69.1";
const AUTO_REFRESH_TICK_DURATION_MS = 30 * 1e3;
const AUTO_REFRESH_TICK_THRESHOLD = 3;
const EXPIRY_MARGIN_MS = AUTO_REFRESH_TICK_THRESHOLD * AUTO_REFRESH_TICK_DURATION_MS;
const GOTRUE_URL = "http://localhost:9999";
const STORAGE_KEY = "supabase.auth.token";
const DEFAULT_HEADERS = { "X-Client-Info": `gotrue-js/${version$1}` };
const API_VERSION_HEADER_NAME = "X-Supabase-Api-Version";
const API_VERSIONS = {
  "2024-01-01": {
    timestamp: Date.parse("2024-01-01T00:00:00.0Z"),
    name: "2024-01-01"
  }
};
const BASE64URL_REGEX = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i;
const JWKS_TTL = 6e5;
class AuthError extends Error {
  constructor(message, status, code) {
    super(message);
    this.__isAuthError = true;
    this.name = "AuthError";
    this.status = status;
    this.code = code;
  }
}
function isAuthError(error) {
  return typeof error === "object" && error !== null && "__isAuthError" in error;
}
class AuthApiError extends AuthError {
  constructor(message, status, code) {
    super(message, status, code);
    this.name = "AuthApiError";
    this.status = status;
    this.code = code;
  }
}
function isAuthApiError(error) {
  return isAuthError(error) && error.name === "AuthApiError";
}
class AuthUnknownError extends AuthError {
  constructor(message, originalError) {
    super(message);
    this.name = "AuthUnknownError";
    this.originalError = originalError;
  }
}
class CustomAuthError extends AuthError {
  constructor(message, name, status, code) {
    super(message, status, code);
    this.name = name;
    this.status = status;
  }
}
class AuthSessionMissingError extends CustomAuthError {
  constructor() {
    super("Auth session missing!", "AuthSessionMissingError", 400, void 0);
  }
}
function isAuthSessionMissingError(error) {
  return isAuthError(error) && error.name === "AuthSessionMissingError";
}
class AuthInvalidTokenResponseError extends CustomAuthError {
  constructor() {
    super("Auth session or user missing", "AuthInvalidTokenResponseError", 500, void 0);
  }
}
class AuthInvalidCredentialsError extends CustomAuthError {
  constructor(message) {
    super(message, "AuthInvalidCredentialsError", 400, void 0);
  }
}
class AuthImplicitGrantRedirectError extends CustomAuthError {
  constructor(message, details = null) {
    super(message, "AuthImplicitGrantRedirectError", 500, void 0);
    this.details = null;
    this.details = details;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status,
      details: this.details
    };
  }
}
function isAuthImplicitGrantRedirectError(error) {
  return isAuthError(error) && error.name === "AuthImplicitGrantRedirectError";
}
class AuthPKCEGrantCodeExchangeError extends CustomAuthError {
  constructor(message, details = null) {
    super(message, "AuthPKCEGrantCodeExchangeError", 500, void 0);
    this.details = null;
    this.details = details;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status,
      details: this.details
    };
  }
}
class AuthRetryableFetchError extends CustomAuthError {
  constructor(message, status) {
    super(message, "AuthRetryableFetchError", status, void 0);
  }
}
function isAuthRetryableFetchError(error) {
  return isAuthError(error) && error.name === "AuthRetryableFetchError";
}
class AuthWeakPasswordError extends CustomAuthError {
  constructor(message, status, reasons) {
    super(message, "AuthWeakPasswordError", status, "weak_password");
    this.reasons = reasons;
  }
}
class AuthInvalidJwtError extends CustomAuthError {
  constructor(message) {
    super(message, "AuthInvalidJwtError", 400, "invalid_jwt");
  }
}
const TO_BASE64URL = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split("");
const IGNORE_BASE64URL = " 	\n\r=".split("");
const FROM_BASE64URL = (() => {
  const charMap = new Array(128);
  for (let i = 0; i < charMap.length; i += 1) {
    charMap[i] = -1;
  }
  for (let i = 0; i < IGNORE_BASE64URL.length; i += 1) {
    charMap[IGNORE_BASE64URL[i].charCodeAt(0)] = -2;
  }
  for (let i = 0; i < TO_BASE64URL.length; i += 1) {
    charMap[TO_BASE64URL[i].charCodeAt(0)] = i;
  }
  return charMap;
})();
function byteFromBase64URL(charCode, state, emit) {
  const bits = FROM_BASE64URL[charCode];
  if (bits > -1) {
    state.queue = state.queue << 6 | bits;
    state.queuedBits += 6;
    while (state.queuedBits >= 8) {
      emit(state.queue >> state.queuedBits - 8 & 255);
      state.queuedBits -= 8;
    }
  } else if (bits === -2) {
    return;
  } else {
    throw new Error(`Invalid Base64-URL character "${String.fromCharCode(charCode)}"`);
  }
}
function stringFromBase64URL(str) {
  const conv = [];
  const utf8Emit = (codepoint) => {
    conv.push(String.fromCodePoint(codepoint));
  };
  const utf8State = {
    utf8seq: 0,
    codepoint: 0
  };
  const b64State = { queue: 0, queuedBits: 0 };
  const byteEmit = (byte) => {
    stringFromUTF8(byte, utf8State, utf8Emit);
  };
  for (let i = 0; i < str.length; i += 1) {
    byteFromBase64URL(str.charCodeAt(i), b64State, byteEmit);
  }
  return conv.join("");
}
function codepointToUTF8(codepoint, emit) {
  if (codepoint <= 127) {
    emit(codepoint);
    return;
  } else if (codepoint <= 2047) {
    emit(192 | codepoint >> 6);
    emit(128 | codepoint & 63);
    return;
  } else if (codepoint <= 65535) {
    emit(224 | codepoint >> 12);
    emit(128 | codepoint >> 6 & 63);
    emit(128 | codepoint & 63);
    return;
  } else if (codepoint <= 1114111) {
    emit(240 | codepoint >> 18);
    emit(128 | codepoint >> 12 & 63);
    emit(128 | codepoint >> 6 & 63);
    emit(128 | codepoint & 63);
    return;
  }
  throw new Error(`Unrecognized Unicode codepoint: ${codepoint.toString(16)}`);
}
function stringToUTF8(str, emit) {
  for (let i = 0; i < str.length; i += 1) {
    let codepoint = str.charCodeAt(i);
    if (codepoint > 55295 && codepoint <= 56319) {
      const highSurrogate = (codepoint - 55296) * 1024 & 65535;
      const lowSurrogate = str.charCodeAt(i + 1) - 56320 & 65535;
      codepoint = (lowSurrogate | highSurrogate) + 65536;
      i += 1;
    }
    codepointToUTF8(codepoint, emit);
  }
}
function stringFromUTF8(byte, state, emit) {
  if (state.utf8seq === 0) {
    if (byte <= 127) {
      emit(byte);
      return;
    }
    for (let leadingBit = 1; leadingBit < 6; leadingBit += 1) {
      if ((byte >> 7 - leadingBit & 1) === 0) {
        state.utf8seq = leadingBit;
        break;
      }
    }
    if (state.utf8seq === 2) {
      state.codepoint = byte & 31;
    } else if (state.utf8seq === 3) {
      state.codepoint = byte & 15;
    } else if (state.utf8seq === 4) {
      state.codepoint = byte & 7;
    } else {
      throw new Error("Invalid UTF-8 sequence");
    }
    state.utf8seq -= 1;
  } else if (state.utf8seq > 0) {
    if (byte <= 127) {
      throw new Error("Invalid UTF-8 sequence");
    }
    state.codepoint = state.codepoint << 6 | byte & 63;
    state.utf8seq -= 1;
    if (state.utf8seq === 0) {
      emit(state.codepoint);
    }
  }
}
function base64UrlToUint8Array(str) {
  const result = [];
  const state = { queue: 0, queuedBits: 0 };
  const onByte = (byte) => {
    result.push(byte);
  };
  for (let i = 0; i < str.length; i += 1) {
    byteFromBase64URL(str.charCodeAt(i), state, onByte);
  }
  return new Uint8Array(result);
}
function stringToUint8Array(str) {
  const result = [];
  stringToUTF8(str, (byte) => result.push(byte));
  return new Uint8Array(result);
}
function expiresAt(expiresIn) {
  const timeNow = Math.round(Date.now() / 1e3);
  return timeNow + expiresIn;
}
function uuid() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c2) {
    const r2 = Math.random() * 16 | 0, v2 = c2 == "x" ? r2 : r2 & 3 | 8;
    return v2.toString(16);
  });
}
const isBrowser$1 = () => typeof window !== "undefined" && typeof document !== "undefined";
const localStorageWriteTests = {
  tested: false,
  writable: false
};
const supportsLocalStorage = () => {
  if (!isBrowser$1()) {
    return false;
  }
  try {
    if (typeof globalThis.localStorage !== "object") {
      return false;
    }
  } catch (e) {
    return false;
  }
  if (localStorageWriteTests.tested) {
    return localStorageWriteTests.writable;
  }
  const randomKey = `lswt-${Math.random()}${Math.random()}`;
  try {
    globalThis.localStorage.setItem(randomKey, randomKey);
    globalThis.localStorage.removeItem(randomKey);
    localStorageWriteTests.tested = true;
    localStorageWriteTests.writable = true;
  } catch (e) {
    localStorageWriteTests.tested = true;
    localStorageWriteTests.writable = false;
  }
  return localStorageWriteTests.writable;
};
function parseParametersFromURL(href) {
  const result = {};
  const url = new URL(href);
  if (url.hash && url.hash[0] === "#") {
    try {
      const hashSearchParams = new URLSearchParams(url.hash.substring(1));
      hashSearchParams.forEach((value, key) => {
        result[key] = value;
      });
    } catch (e) {
    }
  }
  url.searchParams.forEach((value, key) => {
    result[key] = value;
  });
  return result;
}
const resolveFetch = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = (...args) => __vitePreload(async () => {
      const { default: fetch2 } = await Promise.resolve().then(() => browser);
      return { default: fetch2 };
    }, true ? void 0 : void 0).then(({ default: fetch2 }) => fetch2(...args));
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
const looksLikeFetchResponse = (maybeResponse) => {
  return typeof maybeResponse === "object" && maybeResponse !== null && "status" in maybeResponse && "ok" in maybeResponse && "json" in maybeResponse && typeof maybeResponse.json === "function";
};
const setItemAsync = async (storage, key, data) => {
  await storage.setItem(key, JSON.stringify(data));
};
const getItemAsync = async (storage, key) => {
  const value = await storage.getItem(key);
  if (!value) {
    return null;
  }
  try {
    return JSON.parse(value);
  } catch (_a2) {
    return value;
  }
};
const removeItemAsync = async (storage, key) => {
  await storage.removeItem(key);
};
class Deferred {
  constructor() {
    this.promise = new Deferred.promiseConstructor((res, rej) => {
      this.resolve = res;
      this.reject = rej;
    });
  }
}
Deferred.promiseConstructor = Promise;
function decodeJWT(token) {
  const parts = token.split(".");
  if (parts.length !== 3) {
    throw new AuthInvalidJwtError("Invalid JWT structure");
  }
  for (let i = 0; i < parts.length; i++) {
    if (!BASE64URL_REGEX.test(parts[i])) {
      throw new AuthInvalidJwtError("JWT not in base64url format");
    }
  }
  const data = {
    // using base64url lib
    header: JSON.parse(stringFromBase64URL(parts[0])),
    payload: JSON.parse(stringFromBase64URL(parts[1])),
    signature: base64UrlToUint8Array(parts[2]),
    raw: {
      header: parts[0],
      payload: parts[1]
    }
  };
  return data;
}
async function sleep(time2) {
  return await new Promise((accept) => {
    setTimeout(() => accept(null), time2);
  });
}
function retryable(fn, isRetryable) {
  const promise = new Promise((accept, reject) => {
    (async () => {
      for (let attempt = 0; attempt < Infinity; attempt++) {
        try {
          const result = await fn(attempt);
          if (!isRetryable(attempt, null, result)) {
            accept(result);
            return;
          }
        } catch (e) {
          if (!isRetryable(attempt, e)) {
            reject(e);
            return;
          }
        }
      }
    })();
  });
  return promise;
}
function dec2hex(dec) {
  return ("0" + dec.toString(16)).substr(-2);
}
function generatePKCEVerifier() {
  const verifierLength = 56;
  const array = new Uint32Array(verifierLength);
  if (typeof crypto === "undefined") {
    const charSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
    const charSetLen = charSet.length;
    let verifier = "";
    for (let i = 0; i < verifierLength; i++) {
      verifier += charSet.charAt(Math.floor(Math.random() * charSetLen));
    }
    return verifier;
  }
  crypto.getRandomValues(array);
  return Array.from(array, dec2hex).join("");
}
async function sha256(randomString) {
  const encoder = new TextEncoder();
  const encodedData = encoder.encode(randomString);
  const hash = await crypto.subtle.digest("SHA-256", encodedData);
  const bytes = new Uint8Array(hash);
  return Array.from(bytes).map((c2) => String.fromCharCode(c2)).join("");
}
async function generatePKCEChallenge(verifier) {
  const hasCryptoSupport = typeof crypto !== "undefined" && typeof crypto.subtle !== "undefined" && typeof TextEncoder !== "undefined";
  if (!hasCryptoSupport) {
    console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256.");
    return verifier;
  }
  const hashed = await sha256(verifier);
  return btoa(hashed).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
}
async function getCodeChallengeAndMethod(storage, storageKey, isPasswordRecovery = false) {
  const codeVerifier = generatePKCEVerifier();
  let storedCodeVerifier = codeVerifier;
  if (isPasswordRecovery) {
    storedCodeVerifier += "/PASSWORD_RECOVERY";
  }
  await setItemAsync(storage, `${storageKey}-code-verifier`, storedCodeVerifier);
  const codeChallenge = await generatePKCEChallenge(codeVerifier);
  const codeChallengeMethod = codeVerifier === codeChallenge ? "plain" : "s256";
  return [codeChallenge, codeChallengeMethod];
}
const API_VERSION_REGEX = /^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i;
function parseResponseAPIVersion(response) {
  const apiVersion = response.headers.get(API_VERSION_HEADER_NAME);
  if (!apiVersion) {
    return null;
  }
  if (!apiVersion.match(API_VERSION_REGEX)) {
    return null;
  }
  try {
    const date = /* @__PURE__ */ new Date(`${apiVersion}T00:00:00.0Z`);
    return date;
  } catch (e) {
    return null;
  }
}
function validateExp(exp) {
  if (!exp) {
    throw new Error("Missing exp claim");
  }
  const timeNow = Math.floor(Date.now() / 1e3);
  if (exp <= timeNow) {
    throw new Error("JWT has expired");
  }
}
function getAlgorithm(alg) {
  switch (alg) {
    case "RS256":
      return {
        name: "RSASSA-PKCS1-v1_5",
        hash: { name: "SHA-256" }
      };
    case "ES256":
      return {
        name: "ECDSA",
        namedCurve: "P-256",
        hash: { name: "SHA-256" }
      };
    default:
      throw new Error("Invalid alg claim");
  }
}
var __rest$1 = function(s, e) {
  var t2 = {};
  for (var p2 in s) if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
    t2[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t2[p2[i]] = s[p2[i]];
    }
  return t2;
};
const _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);
const NETWORK_ERROR_CODES = [502, 503, 504];
async function handleError(error) {
  var _a2;
  if (!looksLikeFetchResponse(error)) {
    throw new AuthRetryableFetchError(_getErrorMessage(error), 0);
  }
  if (NETWORK_ERROR_CODES.includes(error.status)) {
    throw new AuthRetryableFetchError(_getErrorMessage(error), error.status);
  }
  let data;
  try {
    data = await error.json();
  } catch (e) {
    throw new AuthUnknownError(_getErrorMessage(e), e);
  }
  let errorCode = void 0;
  const responseAPIVersion = parseResponseAPIVersion(error);
  if (responseAPIVersion && responseAPIVersion.getTime() >= API_VERSIONS["2024-01-01"].timestamp && typeof data === "object" && data && typeof data.code === "string") {
    errorCode = data.code;
  } else if (typeof data === "object" && data && typeof data.error_code === "string") {
    errorCode = data.error_code;
  }
  if (!errorCode) {
    if (typeof data === "object" && data && typeof data.weak_password === "object" && data.weak_password && Array.isArray(data.weak_password.reasons) && data.weak_password.reasons.length && data.weak_password.reasons.reduce((a, i) => a && typeof i === "string", true)) {
      throw new AuthWeakPasswordError(_getErrorMessage(data), error.status, data.weak_password.reasons);
    }
  } else if (errorCode === "weak_password") {
    throw new AuthWeakPasswordError(_getErrorMessage(data), error.status, ((_a2 = data.weak_password) === null || _a2 === void 0 ? void 0 : _a2.reasons) || []);
  } else if (errorCode === "session_not_found") {
    throw new AuthSessionMissingError();
  }
  throw new AuthApiError(_getErrorMessage(data), error.status || 500, errorCode);
}
const _getRequestParams = (method, options, parameters, body) => {
  const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };
  if (method === "GET") {
    return params;
  }
  params.headers = Object.assign({ "Content-Type": "application/json;charset=UTF-8" }, options === null || options === void 0 ? void 0 : options.headers);
  params.body = JSON.stringify(body);
  return Object.assign(Object.assign({}, params), parameters);
};
async function _request(fetcher, method, url, options) {
  var _a2;
  const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers);
  if (!headers[API_VERSION_HEADER_NAME]) {
    headers[API_VERSION_HEADER_NAME] = API_VERSIONS["2024-01-01"].name;
  }
  if (options === null || options === void 0 ? void 0 : options.jwt) {
    headers["Authorization"] = `Bearer ${options.jwt}`;
  }
  const qs = (_a2 = options === null || options === void 0 ? void 0 : options.query) !== null && _a2 !== void 0 ? _a2 : {};
  if (options === null || options === void 0 ? void 0 : options.redirectTo) {
    qs["redirect_to"] = options.redirectTo;
  }
  const queryString = Object.keys(qs).length ? "?" + new URLSearchParams(qs).toString() : "";
  const data = await _handleRequest(fetcher, method, url + queryString, {
    headers,
    noResolveJson: options === null || options === void 0 ? void 0 : options.noResolveJson
  }, {}, options === null || options === void 0 ? void 0 : options.body);
  return (options === null || options === void 0 ? void 0 : options.xform) ? options === null || options === void 0 ? void 0 : options.xform(data) : { data: Object.assign({}, data), error: null };
}
async function _handleRequest(fetcher, method, url, options, parameters, body) {
  const requestParams = _getRequestParams(method, options, parameters, body);
  let result;
  try {
    result = await fetcher(url, Object.assign({}, requestParams));
  } catch (e) {
    console.error(e);
    throw new AuthRetryableFetchError(_getErrorMessage(e), 0);
  }
  if (!result.ok) {
    await handleError(result);
  }
  if (options === null || options === void 0 ? void 0 : options.noResolveJson) {
    return result;
  }
  try {
    return await result.json();
  } catch (e) {
    await handleError(e);
  }
}
function _sessionResponse(data) {
  var _a2;
  let session = null;
  if (hasSession(data)) {
    session = Object.assign({}, data);
    if (!data.expires_at) {
      session.expires_at = expiresAt(data.expires_in);
    }
  }
  const user = (_a2 = data.user) !== null && _a2 !== void 0 ? _a2 : data;
  return { data: { session, user }, error: null };
}
function _sessionResponsePassword(data) {
  const response = _sessionResponse(data);
  if (!response.error && data.weak_password && typeof data.weak_password === "object" && Array.isArray(data.weak_password.reasons) && data.weak_password.reasons.length && data.weak_password.message && typeof data.weak_password.message === "string" && data.weak_password.reasons.reduce((a, i) => a && typeof i === "string", true)) {
    response.data.weak_password = data.weak_password;
  }
  return response;
}
function _userResponse(data) {
  var _a2;
  const user = (_a2 = data.user) !== null && _a2 !== void 0 ? _a2 : data;
  return { data: { user }, error: null };
}
function _ssoResponse(data) {
  return { data, error: null };
}
function _generateLinkResponse(data) {
  const { action_link, email_otp, hashed_token, redirect_to, verification_type } = data, rest = __rest$1(data, ["action_link", "email_otp", "hashed_token", "redirect_to", "verification_type"]);
  const properties = {
    action_link,
    email_otp,
    hashed_token,
    redirect_to,
    verification_type
  };
  const user = Object.assign({}, rest);
  return {
    data: {
      properties,
      user
    },
    error: null
  };
}
function _noResolveJsonResponse(data) {
  return data;
}
function hasSession(data) {
  return data.access_token && data.refresh_token && data.expires_in;
}
var __rest = function(s, e) {
  var t2 = {};
  for (var p2 in s) if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
    t2[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t2[p2[i]] = s[p2[i]];
    }
  return t2;
};
class GoTrueAdminApi {
  constructor({ url = "", headers = {}, fetch: fetch2 }) {
    this.url = url;
    this.headers = headers;
    this.fetch = resolveFetch(fetch2);
    this.mfa = {
      listFactors: this._listFactors.bind(this),
      deleteFactor: this._deleteFactor.bind(this)
    };
  }
  /**
   * Removes a logged-in session.
   * @param jwt A valid, logged-in JWT.
   * @param scope The logout sope.
   */
  async signOut(jwt, scope = "global") {
    try {
      await _request(this.fetch, "POST", `${this.url}/logout?scope=${scope}`, {
        headers: this.headers,
        jwt,
        noResolveJson: true
      });
      return { data: null, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Sends an invite link to an email address.
   * @param email The email address of the user.
   * @param options Additional options to be included when inviting.
   */
  async inviteUserByEmail(email, options = {}) {
    try {
      return await _request(this.fetch, "POST", `${this.url}/invite`, {
        body: { email, data: options.data },
        headers: this.headers,
        redirectTo: options.redirectTo,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Generates email links and OTPs to be sent via a custom email provider.
   * @param email The user's email.
   * @param options.password User password. For signup only.
   * @param options.data Optional user metadata. For signup only.
   * @param options.redirectTo The redirect url which should be appended to the generated link
   */
  async generateLink(params) {
    try {
      const { options } = params, rest = __rest(params, ["options"]);
      const body = Object.assign(Object.assign({}, rest), options);
      if ("newEmail" in rest) {
        body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;
        delete body["newEmail"];
      }
      return await _request(this.fetch, "POST", `${this.url}/admin/generate_link`, {
        body,
        headers: this.headers,
        xform: _generateLinkResponse,
        redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo
      });
    } catch (error) {
      if (isAuthError(error)) {
        return {
          data: {
            properties: null,
            user: null
          },
          error
        };
      }
      throw error;
    }
  }
  // User Admin API
  /**
   * Creates a new user.
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async createUser(attributes) {
    try {
      return await _request(this.fetch, "POST", `${this.url}/admin/users`, {
        body: attributes,
        headers: this.headers,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Get a list of users.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.
   */
  async listUsers(params) {
    var _a2, _b2, _c, _d, _e, _f, _g;
    try {
      const pagination = { nextPage: null, lastPage: 0, total: 0 };
      const response = await _request(this.fetch, "GET", `${this.url}/admin/users`, {
        headers: this.headers,
        noResolveJson: true,
        query: {
          page: (_b2 = (_a2 = params === null || params === void 0 ? void 0 : params.page) === null || _a2 === void 0 ? void 0 : _a2.toString()) !== null && _b2 !== void 0 ? _b2 : "",
          per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ""
        },
        xform: _noResolveJsonResponse
      });
      if (response.error)
        throw response.error;
      const users = await response.json();
      const total = (_e = response.headers.get("x-total-count")) !== null && _e !== void 0 ? _e : 0;
      const links = (_g = (_f = response.headers.get("link")) === null || _f === void 0 ? void 0 : _f.split(",")) !== null && _g !== void 0 ? _g : [];
      if (links.length > 0) {
        links.forEach((link) => {
          const page = parseInt(link.split(";")[0].split("=")[1].substring(0, 1));
          const rel = JSON.parse(link.split(";")[1].split("=")[1]);
          pagination[`${rel}Page`] = page;
        });
        pagination.total = parseInt(total);
      }
      return { data: Object.assign(Object.assign({}, users), pagination), error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { users: [] }, error };
      }
      throw error;
    }
  }
  /**
   * Get user by id.
   *
   * @param uid The user's unique identifier
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async getUserById(uid2) {
    try {
      return await _request(this.fetch, "GET", `${this.url}/admin/users/${uid2}`, {
        headers: this.headers,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Updates the user data.
   *
   * @param attributes The data you want to update.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async updateUserById(uid2, attributes) {
    try {
      return await _request(this.fetch, "PUT", `${this.url}/admin/users/${uid2}`, {
        body: attributes,
        headers: this.headers,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Delete a user. Requires a `service_role` key.
   *
   * @param id The user id you want to remove.
   * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema. Soft deletion allows user identification from the hashed user ID but is not reversible.
   * Defaults to false for backward compatibility.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async deleteUser(id2, shouldSoftDelete = false) {
    try {
      return await _request(this.fetch, "DELETE", `${this.url}/admin/users/${id2}`, {
        headers: this.headers,
        body: {
          should_soft_delete: shouldSoftDelete
        },
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  async _listFactors(params) {
    try {
      const { data, error } = await _request(this.fetch, "GET", `${this.url}/admin/users/${params.userId}/factors`, {
        headers: this.headers,
        xform: (factors) => {
          return { data: { factors }, error: null };
        }
      });
      return { data, error };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async _deleteFactor(params) {
    try {
      const data = await _request(this.fetch, "DELETE", `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {
        headers: this.headers
      });
      return { data, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
}
const localStorageAdapter = {
  getItem: (key) => {
    if (!supportsLocalStorage()) {
      return null;
    }
    return globalThis.localStorage.getItem(key);
  },
  setItem: (key, value) => {
    if (!supportsLocalStorage()) {
      return;
    }
    globalThis.localStorage.setItem(key, value);
  },
  removeItem: (key) => {
    if (!supportsLocalStorage()) {
      return;
    }
    globalThis.localStorage.removeItem(key);
  }
};
function memoryLocalStorageAdapter(store = {}) {
  return {
    getItem: (key) => {
      return store[key] || null;
    },
    setItem: (key, value) => {
      store[key] = value;
    },
    removeItem: (key) => {
      delete store[key];
    }
  };
}
function polyfillGlobalThis() {
  if (typeof globalThis === "object")
    return;
  try {
    Object.defineProperty(Object.prototype, "__magic__", {
      get: function() {
        return this;
      },
      configurable: true
    });
    __magic__.globalThis = __magic__;
    delete Object.prototype.__magic__;
  } catch (e) {
    if (typeof self !== "undefined") {
      self.globalThis = self;
    }
  }
}
const internals = {
  /**
   * @experimental
   */
  debug: !!(globalThis && supportsLocalStorage() && globalThis.localStorage && globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug") === "true")
};
class LockAcquireTimeoutError extends Error {
  constructor(message) {
    super(message);
    this.isAcquireTimeout = true;
  }
}
class NavigatorLockAcquireTimeoutError extends LockAcquireTimeoutError {
}
async function navigatorLock(name, acquireTimeout, fn) {
  if (internals.debug) {
    console.log("@supabase/gotrue-js: navigatorLock: acquire lock", name, acquireTimeout);
  }
  const abortController = new globalThis.AbortController();
  if (acquireTimeout > 0) {
    setTimeout(() => {
      abortController.abort();
      if (internals.debug) {
        console.log("@supabase/gotrue-js: navigatorLock acquire timed out", name);
      }
    }, acquireTimeout);
  }
  return await Promise.resolve().then(() => globalThis.navigator.locks.request(name, acquireTimeout === 0 ? {
    mode: "exclusive",
    ifAvailable: true
  } : {
    mode: "exclusive",
    signal: abortController.signal
  }, async (lock) => {
    if (lock) {
      if (internals.debug) {
        console.log("@supabase/gotrue-js: navigatorLock: acquired", name, lock.name);
      }
      try {
        return await fn();
      } finally {
        if (internals.debug) {
          console.log("@supabase/gotrue-js: navigatorLock: released", name, lock.name);
        }
      }
    } else {
      if (acquireTimeout === 0) {
        if (internals.debug) {
          console.log("@supabase/gotrue-js: navigatorLock: not immediately available", name);
        }
        throw new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock "${name}" immediately failed`);
      } else {
        if (internals.debug) {
          try {
            const result = await globalThis.navigator.locks.query();
            console.log("@supabase/gotrue-js: Navigator LockManager state", JSON.stringify(result, null, "  "));
          } catch (e) {
            console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state", e);
          }
        }
        console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request");
        return await fn();
      }
    }
  }));
}
polyfillGlobalThis();
const DEFAULT_OPTIONS = {
  url: GOTRUE_URL,
  storageKey: STORAGE_KEY,
  autoRefreshToken: true,
  persistSession: true,
  detectSessionInUrl: true,
  headers: DEFAULT_HEADERS,
  flowType: "implicit",
  debug: false,
  hasCustomAuthorizationHeader: false
};
async function lockNoOp(name, acquireTimeout, fn) {
  return await fn();
}
class GoTrueClient {
  /**
   * Create a new client for use in the browser.
   */
  constructor(options) {
    var _a2, _b2;
    this.memoryStorage = null;
    this.stateChangeEmitters = /* @__PURE__ */ new Map();
    this.autoRefreshTicker = null;
    this.visibilityChangedCallback = null;
    this.refreshingDeferred = null;
    this.initializePromise = null;
    this.detectSessionInUrl = true;
    this.hasCustomAuthorizationHeader = false;
    this.suppressGetSessionWarning = false;
    this.lockAcquired = false;
    this.pendingInLock = [];
    this.broadcastChannel = null;
    this.logger = console.log;
    this.instanceID = GoTrueClient.nextInstanceID;
    GoTrueClient.nextInstanceID += 1;
    if (this.instanceID > 0 && isBrowser$1()) {
      console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");
    }
    const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);
    this.logDebugMessages = !!settings.debug;
    if (typeof settings.debug === "function") {
      this.logger = settings.debug;
    }
    this.persistSession = settings.persistSession;
    this.storageKey = settings.storageKey;
    this.autoRefreshToken = settings.autoRefreshToken;
    this.admin = new GoTrueAdminApi({
      url: settings.url,
      headers: settings.headers,
      fetch: settings.fetch
    });
    this.url = settings.url;
    this.headers = settings.headers;
    this.fetch = resolveFetch(settings.fetch);
    this.lock = settings.lock || lockNoOp;
    this.detectSessionInUrl = settings.detectSessionInUrl;
    this.flowType = settings.flowType;
    this.hasCustomAuthorizationHeader = settings.hasCustomAuthorizationHeader;
    if (settings.lock) {
      this.lock = settings.lock;
    } else if (isBrowser$1() && ((_a2 = globalThis === null || globalThis === void 0 ? void 0 : globalThis.navigator) === null || _a2 === void 0 ? void 0 : _a2.locks)) {
      this.lock = navigatorLock;
    } else {
      this.lock = lockNoOp;
    }
    this.jwks = { keys: [] };
    this.jwks_cached_at = Number.MIN_SAFE_INTEGER;
    this.mfa = {
      verify: this._verify.bind(this),
      enroll: this._enroll.bind(this),
      unenroll: this._unenroll.bind(this),
      challenge: this._challenge.bind(this),
      listFactors: this._listFactors.bind(this),
      challengeAndVerify: this._challengeAndVerify.bind(this),
      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this)
    };
    if (this.persistSession) {
      if (settings.storage) {
        this.storage = settings.storage;
      } else {
        if (supportsLocalStorage()) {
          this.storage = localStorageAdapter;
        } else {
          this.memoryStorage = {};
          this.storage = memoryLocalStorageAdapter(this.memoryStorage);
        }
      }
    } else {
      this.memoryStorage = {};
      this.storage = memoryLocalStorageAdapter(this.memoryStorage);
    }
    if (isBrowser$1() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {
      try {
        this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);
      } catch (e) {
        console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available", e);
      }
      (_b2 = this.broadcastChannel) === null || _b2 === void 0 ? void 0 : _b2.addEventListener("message", async (event) => {
        this._debug("received broadcast notification from other tab or client", event);
        await this._notifyAllSubscribers(event.data.event, event.data.session, false);
      });
    }
    this.initialize();
  }
  _debug(...args) {
    if (this.logDebugMessages) {
      this.logger(`GoTrueClient@${this.instanceID} (${version$1}) ${(/* @__PURE__ */ new Date()).toISOString()}`, ...args);
    }
    return this;
  }
  /**
   * Initializes the client session either from the url or from storage.
   * This method is automatically called when instantiating the client, but should also be called
   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).
   */
  async initialize() {
    if (this.initializePromise) {
      return await this.initializePromise;
    }
    this.initializePromise = (async () => {
      return await this._acquireLock(-1, async () => {
        return await this._initialize();
      });
    })();
    return await this.initializePromise;
  }
  /**
   * IMPORTANT:
   * 1. Never throw in this method, as it is called from the constructor
   * 2. Never return a session from this method as it would be cached over
   *    the whole lifetime of the client
   */
  async _initialize() {
    var _a2;
    try {
      const params = parseParametersFromURL(window.location.href);
      let callbackUrlType = "none";
      if (this._isImplicitGrantCallback(params)) {
        callbackUrlType = "implicit";
      } else if (await this._isPKCECallback(params)) {
        callbackUrlType = "pkce";
      }
      if (isBrowser$1() && this.detectSessionInUrl && callbackUrlType !== "none") {
        const { data, error } = await this._getSessionFromURL(params, callbackUrlType);
        if (error) {
          this._debug("#_initialize()", "error detecting session from URL", error);
          if (isAuthImplicitGrantRedirectError(error)) {
            const errorCode = (_a2 = error.details) === null || _a2 === void 0 ? void 0 : _a2.code;
            if (errorCode === "identity_already_exists" || errorCode === "identity_not_found" || errorCode === "single_identity_not_deletable") {
              return { error };
            }
          }
          await this._removeSession();
          return { error };
        }
        const { session, redirectType } = data;
        this._debug("#_initialize()", "detected session in URL", session, "redirect type", redirectType);
        await this._saveSession(session);
        setTimeout(async () => {
          if (redirectType === "recovery") {
            await this._notifyAllSubscribers("PASSWORD_RECOVERY", session);
          } else {
            await this._notifyAllSubscribers("SIGNED_IN", session);
          }
        }, 0);
        return { error: null };
      }
      await this._recoverAndRefresh();
      return { error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { error };
      }
      return {
        error: new AuthUnknownError("Unexpected error during initialization", error)
      };
    } finally {
      await this._handleVisibilityChange();
      this._debug("#_initialize()", "end");
    }
  }
  /**
   * Creates a new anonymous user.
   *
   * @returns A session where the is_anonymous claim in the access token JWT set to true
   */
  async signInAnonymously(credentials) {
    var _a2, _b2, _c;
    try {
      const res = await _request(this.fetch, "POST", `${this.url}/signup`, {
        headers: this.headers,
        body: {
          data: (_b2 = (_a2 = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _a2 === void 0 ? void 0 : _a2.data) !== null && _b2 !== void 0 ? _b2 : {},
          gotrue_meta_security: { captcha_token: (_c = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _c === void 0 ? void 0 : _c.captchaToken }
        },
        xform: _sessionResponse
      });
      const { data, error } = res;
      if (error || !data) {
        return { data: { user: null, session: null }, error };
      }
      const session = data.session;
      const user = data.user;
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", session);
      }
      return { data: { user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Creates a new user.
   *
   * Be aware that if a user account exists in the system you may get back an
   * error message that attempts to hide this information from the user.
   * This method has support for PKCE via email signups. The PKCE flow cannot be used when autoconfirm is enabled.
   *
   * @returns A logged-in session if the server has "autoconfirm" ON
   * @returns A user if the server has "autoconfirm" OFF
   */
  async signUp(credentials) {
    var _a2, _b2, _c;
    try {
      let res;
      if ("email" in credentials) {
        const { email, password, options } = credentials;
        let codeChallenge = null;
        let codeChallengeMethod = null;
        if (this.flowType === "pkce") {
          ;
          [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
        }
        res = await _request(this.fetch, "POST", `${this.url}/signup`, {
          headers: this.headers,
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,
          body: {
            email,
            password,
            data: (_a2 = options === null || options === void 0 ? void 0 : options.data) !== null && _a2 !== void 0 ? _a2 : {},
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
            code_challenge: codeChallenge,
            code_challenge_method: codeChallengeMethod
          },
          xform: _sessionResponse
        });
      } else if ("phone" in credentials) {
        const { phone, password, options } = credentials;
        res = await _request(this.fetch, "POST", `${this.url}/signup`, {
          headers: this.headers,
          body: {
            phone,
            password,
            data: (_b2 = options === null || options === void 0 ? void 0 : options.data) !== null && _b2 !== void 0 ? _b2 : {},
            channel: (_c = options === null || options === void 0 ? void 0 : options.channel) !== null && _c !== void 0 ? _c : "sms",
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponse
        });
      } else {
        throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
      }
      const { data, error } = res;
      if (error || !data) {
        return { data: { user: null, session: null }, error };
      }
      const session = data.session;
      const user = data.user;
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", session);
      }
      return { data: { user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Log in an existing user with an email and password or phone and password.
   *
   * Be aware that you may get back an error message that will not distinguish
   * between the cases where the account does not exist or that the
   * email/phone and password combination is wrong or that the account can only
   * be accessed via social login.
   */
  async signInWithPassword(credentials) {
    try {
      let res;
      if ("email" in credentials) {
        const { email, password, options } = credentials;
        res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
          headers: this.headers,
          body: {
            email,
            password,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponsePassword
        });
      } else if ("phone" in credentials) {
        const { phone, password, options } = credentials;
        res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
          headers: this.headers,
          body: {
            phone,
            password,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponsePassword
        });
      } else {
        throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
      }
      const { data, error } = res;
      if (error) {
        return { data: { user: null, session: null }, error };
      } else if (!data || !data.session || !data.user) {
        return { data: { user: null, session: null }, error: new AuthInvalidTokenResponseError() };
      }
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", data.session);
      }
      return {
        data: Object.assign({ user: data.user, session: data.session }, data.weak_password ? { weakPassword: data.weak_password } : null),
        error
      };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Log in an existing user via a third-party provider.
   * This method supports the PKCE flow.
   */
  async signInWithOAuth(credentials) {
    var _a2, _b2, _c, _d;
    return await this._handleProviderSignIn(credentials.provider, {
      redirectTo: (_a2 = credentials.options) === null || _a2 === void 0 ? void 0 : _a2.redirectTo,
      scopes: (_b2 = credentials.options) === null || _b2 === void 0 ? void 0 : _b2.scopes,
      queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,
      skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect
    });
  }
  /**
   * Log in an existing user by exchanging an Auth Code issued during the PKCE flow.
   */
  async exchangeCodeForSession(authCode) {
    await this.initializePromise;
    return this._acquireLock(-1, async () => {
      return this._exchangeCodeForSession(authCode);
    });
  }
  async _exchangeCodeForSession(authCode) {
    const storageItem = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);
    const [codeVerifier, redirectType] = (storageItem !== null && storageItem !== void 0 ? storageItem : "").split("/");
    try {
      const { data, error } = await _request(this.fetch, "POST", `${this.url}/token?grant_type=pkce`, {
        headers: this.headers,
        body: {
          auth_code: authCode,
          code_verifier: codeVerifier
        },
        xform: _sessionResponse
      });
      await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
      if (error) {
        throw error;
      }
      if (!data || !data.session || !data.user) {
        return {
          data: { user: null, session: null, redirectType: null },
          error: new AuthInvalidTokenResponseError()
        };
      }
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", data.session);
      }
      return { data: Object.assign(Object.assign({}, data), { redirectType: redirectType !== null && redirectType !== void 0 ? redirectType : null }), error };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null, redirectType: null }, error };
      }
      throw error;
    }
  }
  /**
   * Allows signing in with an OIDC ID token. The authentication provider used
   * should be enabled and configured.
   */
  async signInWithIdToken(credentials) {
    try {
      const { options, provider, token, access_token, nonce } = credentials;
      const res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=id_token`, {
        headers: this.headers,
        body: {
          provider,
          id_token: token,
          access_token,
          nonce,
          gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
        },
        xform: _sessionResponse
      });
      const { data, error } = res;
      if (error) {
        return { data: { user: null, session: null }, error };
      } else if (!data || !data.session || !data.user) {
        return {
          data: { user: null, session: null },
          error: new AuthInvalidTokenResponseError()
        };
      }
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", data.session);
      }
      return { data, error };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Log in a user using magiclink or a one-time password (OTP).
   *
   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.
   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.
   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.
   *
   * Be aware that you may get back an error message that will not distinguish
   * between the cases where the account does not exist or, that the account
   * can only be accessed via social login.
   *
   * Do note that you will need to configure a Whatsapp sender on Twilio
   * if you are using phone sign in with the 'whatsapp' channel. The whatsapp
   * channel is not supported on other providers
   * at this time.
   * This method supports PKCE when an email is passed.
   */
  async signInWithOtp(credentials) {
    var _a2, _b2, _c, _d, _e;
    try {
      if ("email" in credentials) {
        const { email, options } = credentials;
        let codeChallenge = null;
        let codeChallengeMethod = null;
        if (this.flowType === "pkce") {
          ;
          [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
        }
        const { error } = await _request(this.fetch, "POST", `${this.url}/otp`, {
          headers: this.headers,
          body: {
            email,
            data: (_a2 = options === null || options === void 0 ? void 0 : options.data) !== null && _a2 !== void 0 ? _a2 : {},
            create_user: (_b2 = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b2 !== void 0 ? _b2 : true,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
            code_challenge: codeChallenge,
            code_challenge_method: codeChallengeMethod
          },
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo
        });
        return { data: { user: null, session: null }, error };
      }
      if ("phone" in credentials) {
        const { phone, options } = credentials;
        const { data, error } = await _request(this.fetch, "POST", `${this.url}/otp`, {
          headers: this.headers,
          body: {
            phone,
            data: (_c = options === null || options === void 0 ? void 0 : options.data) !== null && _c !== void 0 ? _c : {},
            create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
            channel: (_e = options === null || options === void 0 ? void 0 : options.channel) !== null && _e !== void 0 ? _e : "sms"
          }
        });
        return { data: { user: null, session: null, messageId: data === null || data === void 0 ? void 0 : data.message_id }, error };
      }
      throw new AuthInvalidCredentialsError("You must provide either an email or phone number.");
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Log in a user given a User supplied OTP or TokenHash received through mobile or email.
   */
  async verifyOtp(params) {
    var _a2, _b2;
    try {
      let redirectTo = void 0;
      let captchaToken = void 0;
      if ("options" in params) {
        redirectTo = (_a2 = params.options) === null || _a2 === void 0 ? void 0 : _a2.redirectTo;
        captchaToken = (_b2 = params.options) === null || _b2 === void 0 ? void 0 : _b2.captchaToken;
      }
      const { data, error } = await _request(this.fetch, "POST", `${this.url}/verify`, {
        headers: this.headers,
        body: Object.assign(Object.assign({}, params), { gotrue_meta_security: { captcha_token: captchaToken } }),
        redirectTo,
        xform: _sessionResponse
      });
      if (error) {
        throw error;
      }
      if (!data) {
        throw new Error("An error occurred on token verification.");
      }
      const session = data.session;
      const user = data.user;
      if (session === null || session === void 0 ? void 0 : session.access_token) {
        await this._saveSession(session);
        await this._notifyAllSubscribers(params.type == "recovery" ? "PASSWORD_RECOVERY" : "SIGNED_IN", session);
      }
      return { data: { user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Attempts a single-sign on using an enterprise Identity Provider. A
   * successful SSO attempt will redirect the current page to the identity
   * provider authorization page. The redirect URL is implementation and SSO
   * protocol specific.
   *
   * You can use it by providing a SSO domain. Typically you can extract this
   * domain by asking users for their email address. If this domain is
   * registered on the Auth instance the redirect will use that organization's
   * currently active SSO Identity Provider for the login.
   *
   * If you have built an organization-specific login page, you can use the
   * organization's SSO Identity Provider UUID directly instead.
   */
  async signInWithSSO(params) {
    var _a2, _b2, _c;
    try {
      let codeChallenge = null;
      let codeChallengeMethod = null;
      if (this.flowType === "pkce") {
        ;
        [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
      }
      return await _request(this.fetch, "POST", `${this.url}/sso`, {
        body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, "providerId" in params ? { provider_id: params.providerId } : null), "domain" in params ? { domain: params.domain } : null), { redirect_to: (_b2 = (_a2 = params.options) === null || _a2 === void 0 ? void 0 : _a2.redirectTo) !== null && _b2 !== void 0 ? _b2 : void 0 }), ((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken) ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } } : null), { skip_http_redirect: true, code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),
        headers: this.headers,
        xform: _ssoResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Sends a reauthentication OTP to the user's email or phone number.
   * Requires the user to be signed-in.
   */
  async reauthenticate() {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._reauthenticate();
    });
  }
  async _reauthenticate() {
    try {
      return await this._useSession(async (result) => {
        const { data: { session }, error: sessionError } = result;
        if (sessionError)
          throw sessionError;
        if (!session)
          throw new AuthSessionMissingError();
        const { error } = await _request(this.fetch, "GET", `${this.url}/reauthenticate`, {
          headers: this.headers,
          jwt: session.access_token
        });
        return { data: { user: null, session: null }, error };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Resends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.
   */
  async resend(credentials) {
    try {
      const endpoint = `${this.url}/resend`;
      if ("email" in credentials) {
        const { email, type, options } = credentials;
        const { error } = await _request(this.fetch, "POST", endpoint, {
          headers: this.headers,
          body: {
            email,
            type,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo
        });
        return { data: { user: null, session: null }, error };
      } else if ("phone" in credentials) {
        const { phone, type, options } = credentials;
        const { data, error } = await _request(this.fetch, "POST", endpoint, {
          headers: this.headers,
          body: {
            phone,
            type,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          }
        });
        return { data: { user: null, session: null, messageId: data === null || data === void 0 ? void 0 : data.message_id }, error };
      }
      throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a type");
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Returns the session, refreshing it if necessary.
   *
   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.
   *
   * **IMPORTANT:** This method loads values directly from the storage attached
   * to the client. If that storage is based on request cookies for example,
   * the values in it may not be authentic and therefore it's strongly advised
   * against using this method and its results in such circumstances. A warning
   * will be emitted if this is detected. Use {@link #getUser()} instead.
   */
  async getSession() {
    await this.initializePromise;
    const result = await this._acquireLock(-1, async () => {
      return this._useSession(async (result2) => {
        return result2;
      });
    });
    return result;
  }
  /**
   * Acquires a global lock based on the storage key.
   */
  async _acquireLock(acquireTimeout, fn) {
    this._debug("#_acquireLock", "begin", acquireTimeout);
    try {
      if (this.lockAcquired) {
        const last = this.pendingInLock.length ? this.pendingInLock[this.pendingInLock.length - 1] : Promise.resolve();
        const result = (async () => {
          await last;
          return await fn();
        })();
        this.pendingInLock.push((async () => {
          try {
            await result;
          } catch (e) {
          }
        })());
        return result;
      }
      return await this.lock(`lock:${this.storageKey}`, acquireTimeout, async () => {
        this._debug("#_acquireLock", "lock acquired for storage key", this.storageKey);
        try {
          this.lockAcquired = true;
          const result = fn();
          this.pendingInLock.push((async () => {
            try {
              await result;
            } catch (e) {
            }
          })());
          await result;
          while (this.pendingInLock.length) {
            const waitOn = [...this.pendingInLock];
            await Promise.all(waitOn);
            this.pendingInLock.splice(0, waitOn.length);
          }
          return await result;
        } finally {
          this._debug("#_acquireLock", "lock released for storage key", this.storageKey);
          this.lockAcquired = false;
        }
      });
    } finally {
      this._debug("#_acquireLock", "end");
    }
  }
  /**
   * Use instead of {@link #getSession} inside the library. It is
   * semantically usually what you want, as getting a session involves some
   * processing afterwards that requires only one client operating on the
   * session at once across multiple tabs or processes.
   */
  async _useSession(fn) {
    this._debug("#_useSession", "begin");
    try {
      const result = await this.__loadSession();
      return await fn(result);
    } finally {
      this._debug("#_useSession", "end");
    }
  }
  /**
   * NEVER USE DIRECTLY!
   *
   * Always use {@link #_useSession}.
   */
  async __loadSession() {
    this._debug("#__loadSession()", "begin");
    if (!this.lockAcquired) {
      this._debug("#__loadSession()", "used outside of an acquired lock!", new Error().stack);
    }
    try {
      let currentSession = null;
      const maybeSession = await getItemAsync(this.storage, this.storageKey);
      this._debug("#getSession()", "session from storage", maybeSession);
      if (maybeSession !== null) {
        if (this._isValidSession(maybeSession)) {
          currentSession = maybeSession;
        } else {
          this._debug("#getSession()", "session from storage is not valid");
          await this._removeSession();
        }
      }
      if (!currentSession) {
        return { data: { session: null }, error: null };
      }
      const hasExpired = currentSession.expires_at ? currentSession.expires_at * 1e3 - Date.now() < EXPIRY_MARGIN_MS : false;
      this._debug("#__loadSession()", `session has${hasExpired ? "" : " not"} expired`, "expires_at", currentSession.expires_at);
      if (!hasExpired) {
        if (this.storage.isServer) {
          let suppressWarning = this.suppressGetSessionWarning;
          const proxySession = new Proxy(currentSession, {
            get: (target, prop, receiver) => {
              if (!suppressWarning && prop === "user") {
                console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.");
                suppressWarning = true;
                this.suppressGetSessionWarning = true;
              }
              return Reflect.get(target, prop, receiver);
            }
          });
          currentSession = proxySession;
        }
        return { data: { session: currentSession }, error: null };
      }
      const { session, error } = await this._callRefreshToken(currentSession.refresh_token);
      if (error) {
        return { data: { session: null }, error };
      }
      return { data: { session }, error: null };
    } finally {
      this._debug("#__loadSession()", "end");
    }
  }
  /**
   * Gets the current user details if there is an existing session. This method
   * performs a network request to the Supabase Auth server, so the returned
   * value is authentic and can be used to base authorization rules on.
   *
   * @param jwt Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.
   */
  async getUser(jwt) {
    if (jwt) {
      return await this._getUser(jwt);
    }
    await this.initializePromise;
    const result = await this._acquireLock(-1, async () => {
      return await this._getUser();
    });
    return result;
  }
  async _getUser(jwt) {
    try {
      if (jwt) {
        return await _request(this.fetch, "GET", `${this.url}/user`, {
          headers: this.headers,
          jwt,
          xform: _userResponse
        });
      }
      return await this._useSession(async (result) => {
        var _a2, _b2, _c;
        const { data, error } = result;
        if (error) {
          throw error;
        }
        if (!((_a2 = data.session) === null || _a2 === void 0 ? void 0 : _a2.access_token) && !this.hasCustomAuthorizationHeader) {
          return { data: { user: null }, error: new AuthSessionMissingError() };
        }
        return await _request(this.fetch, "GET", `${this.url}/user`, {
          headers: this.headers,
          jwt: (_c = (_b2 = data.session) === null || _b2 === void 0 ? void 0 : _b2.access_token) !== null && _c !== void 0 ? _c : void 0,
          xform: _userResponse
        });
      });
    } catch (error) {
      if (isAuthError(error)) {
        if (isAuthSessionMissingError(error)) {
          await this._removeSession();
          await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
        }
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Updates user data for a logged in user.
   */
  async updateUser(attributes, options = {}) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._updateUser(attributes, options);
    });
  }
  async _updateUser(attributes, options = {}) {
    try {
      return await this._useSession(async (result) => {
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          throw sessionError;
        }
        if (!sessionData.session) {
          throw new AuthSessionMissingError();
        }
        const session = sessionData.session;
        let codeChallenge = null;
        let codeChallengeMethod = null;
        if (this.flowType === "pkce" && attributes.email != null) {
          ;
          [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
        }
        const { data, error: userError } = await _request(this.fetch, "PUT", `${this.url}/user`, {
          headers: this.headers,
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,
          body: Object.assign(Object.assign({}, attributes), { code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),
          jwt: session.access_token,
          xform: _userResponse
        });
        if (userError)
          throw userError;
        session.user = data.user;
        await this._saveSession(session);
        await this._notifyAllSubscribers("USER_UPDATED", session);
        return { data: { user: session.user }, error: null };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.
   * If the refresh token or access token in the current session is invalid, an error will be thrown.
   * @param currentSession The current session that minimally contains an access token and refresh token.
   */
  async setSession(currentSession) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._setSession(currentSession);
    });
  }
  async _setSession(currentSession) {
    try {
      if (!currentSession.access_token || !currentSession.refresh_token) {
        throw new AuthSessionMissingError();
      }
      const timeNow = Date.now() / 1e3;
      let expiresAt2 = timeNow;
      let hasExpired = true;
      let session = null;
      const { payload } = decodeJWT(currentSession.access_token);
      if (payload.exp) {
        expiresAt2 = payload.exp;
        hasExpired = expiresAt2 <= timeNow;
      }
      if (hasExpired) {
        const { session: refreshedSession, error } = await this._callRefreshToken(currentSession.refresh_token);
        if (error) {
          return { data: { user: null, session: null }, error };
        }
        if (!refreshedSession) {
          return { data: { user: null, session: null }, error: null };
        }
        session = refreshedSession;
      } else {
        const { data, error } = await this._getUser(currentSession.access_token);
        if (error) {
          throw error;
        }
        session = {
          access_token: currentSession.access_token,
          refresh_token: currentSession.refresh_token,
          user: data.user,
          token_type: "bearer",
          expires_in: expiresAt2 - timeNow,
          expires_at: expiresAt2
        };
        await this._saveSession(session);
        await this._notifyAllSubscribers("SIGNED_IN", session);
      }
      return { data: { user: session.user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { session: null, user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Returns a new session, regardless of expiry status.
   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().
   * If the current session's refresh token is invalid, an error will be thrown.
   * @param currentSession The current session. If passed in, it must contain a refresh token.
   */
  async refreshSession(currentSession) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._refreshSession(currentSession);
    });
  }
  async _refreshSession(currentSession) {
    try {
      return await this._useSession(async (result) => {
        var _a2;
        if (!currentSession) {
          const { data, error: error2 } = result;
          if (error2) {
            throw error2;
          }
          currentSession = (_a2 = data.session) !== null && _a2 !== void 0 ? _a2 : void 0;
        }
        if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {
          throw new AuthSessionMissingError();
        }
        const { session, error } = await this._callRefreshToken(currentSession.refresh_token);
        if (error) {
          return { data: { user: null, session: null }, error };
        }
        if (!session) {
          return { data: { user: null, session: null }, error: null };
        }
        return { data: { user: session.user, session }, error: null };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Gets the session data from a URL string
   */
  async _getSessionFromURL(params, callbackUrlType) {
    try {
      if (!isBrowser$1())
        throw new AuthImplicitGrantRedirectError("No browser detected.");
      if (params.error || params.error_description || params.error_code) {
        throw new AuthImplicitGrantRedirectError(params.error_description || "Error in URL with unspecified error_description", {
          error: params.error || "unspecified_error",
          code: params.error_code || "unspecified_code"
        });
      }
      switch (callbackUrlType) {
        case "implicit":
          if (this.flowType === "pkce") {
            throw new AuthPKCEGrantCodeExchangeError("Not a valid PKCE flow url.");
          }
          break;
        case "pkce":
          if (this.flowType === "implicit") {
            throw new AuthImplicitGrantRedirectError("Not a valid implicit grant flow url.");
          }
          break;
        default:
      }
      if (callbackUrlType === "pkce") {
        this._debug("#_initialize()", "begin", "is PKCE flow", true);
        if (!params.code)
          throw new AuthPKCEGrantCodeExchangeError("No code detected.");
        const { data: data2, error: error2 } = await this._exchangeCodeForSession(params.code);
        if (error2)
          throw error2;
        const url = new URL(window.location.href);
        url.searchParams.delete("code");
        window.history.replaceState(window.history.state, "", url.toString());
        return { data: { session: data2.session, redirectType: null }, error: null };
      }
      const { provider_token, provider_refresh_token, access_token, refresh_token, expires_in, expires_at, token_type } = params;
      if (!access_token || !expires_in || !refresh_token || !token_type) {
        throw new AuthImplicitGrantRedirectError("No session defined in URL");
      }
      const timeNow = Math.round(Date.now() / 1e3);
      const expiresIn = parseInt(expires_in);
      let expiresAt2 = timeNow + expiresIn;
      if (expires_at) {
        expiresAt2 = parseInt(expires_at);
      }
      const actuallyExpiresIn = expiresAt2 - timeNow;
      if (actuallyExpiresIn * 1e3 <= AUTO_REFRESH_TICK_DURATION_MS) {
        console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${actuallyExpiresIn}s, should have been closer to ${expiresIn}s`);
      }
      const issuedAt = expiresAt2 - expiresIn;
      if (timeNow - issuedAt >= 120) {
        console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale", issuedAt, expiresAt2, timeNow);
      } else if (timeNow - issuedAt < 0) {
        console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew", issuedAt, expiresAt2, timeNow);
      }
      const { data, error } = await this._getUser(access_token);
      if (error)
        throw error;
      const session = {
        provider_token,
        provider_refresh_token,
        access_token,
        expires_in: expiresIn,
        expires_at: expiresAt2,
        refresh_token,
        token_type,
        user: data.user
      };
      window.location.hash = "";
      this._debug("#_getSessionFromURL()", "clearing window.location.hash");
      return { data: { session, redirectType: params.type }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { session: null, redirectType: null }, error };
      }
      throw error;
    }
  }
  /**
   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)
   */
  _isImplicitGrantCallback(params) {
    return Boolean(params.access_token || params.error_description);
  }
  /**
   * Checks if the current URL and backing storage contain parameters given by a PKCE flow
   */
  async _isPKCECallback(params) {
    const currentStorageContent = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);
    return !!(params.code && currentStorageContent);
  }
  /**
   * Inside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `"SIGNED_OUT"` event.
   *
   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.
   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.
   *
   * If using `others` scope, no `SIGNED_OUT` event is fired!
   */
  async signOut(options = { scope: "global" }) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._signOut(options);
    });
  }
  async _signOut({ scope } = { scope: "global" }) {
    return await this._useSession(async (result) => {
      var _a2;
      const { data, error: sessionError } = result;
      if (sessionError) {
        return { error: sessionError };
      }
      const accessToken = (_a2 = data.session) === null || _a2 === void 0 ? void 0 : _a2.access_token;
      if (accessToken) {
        const { error } = await this.admin.signOut(accessToken, scope);
        if (error) {
          if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401 || error.status === 403))) {
            return { error };
          }
        }
      }
      if (scope !== "others") {
        await this._removeSession();
        await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
      }
      return { error: null };
    });
  }
  /**
   * Receive a notification every time an auth event happens.
   * @param callback A callback function to be invoked when an auth event happens.
   */
  onAuthStateChange(callback2) {
    const id2 = uuid();
    const subscription = {
      id: id2,
      callback: callback2,
      unsubscribe: () => {
        this._debug("#unsubscribe()", "state change callback with id removed", id2);
        this.stateChangeEmitters.delete(id2);
      }
    };
    this._debug("#onAuthStateChange()", "registered callback with id", id2);
    this.stateChangeEmitters.set(id2, subscription);
    (async () => {
      await this.initializePromise;
      await this._acquireLock(-1, async () => {
        this._emitInitialSession(id2);
      });
    })();
    return { data: { subscription } };
  }
  async _emitInitialSession(id2) {
    return await this._useSession(async (result) => {
      var _a2, _b2;
      try {
        const { data: { session }, error } = result;
        if (error)
          throw error;
        await ((_a2 = this.stateChangeEmitters.get(id2)) === null || _a2 === void 0 ? void 0 : _a2.callback("INITIAL_SESSION", session));
        this._debug("INITIAL_SESSION", "callback id", id2, "session", session);
      } catch (err) {
        await ((_b2 = this.stateChangeEmitters.get(id2)) === null || _b2 === void 0 ? void 0 : _b2.callback("INITIAL_SESSION", null));
        this._debug("INITIAL_SESSION", "callback id", id2, "error", err);
        console.error(err);
      }
    });
  }
  /**
   * Sends a password reset request to an email address. This method supports the PKCE flow.
   *
   * @param email The email address of the user.
   * @param options.redirectTo The URL to send the user to after they click the password reset link.
   * @param options.captchaToken Verification token received when the user completes the captcha on the site.
   */
  async resetPasswordForEmail(email, options = {}) {
    let codeChallenge = null;
    let codeChallengeMethod = null;
    if (this.flowType === "pkce") {
      [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(
        this.storage,
        this.storageKey,
        true
        // isPasswordRecovery
      );
    }
    try {
      return await _request(this.fetch, "POST", `${this.url}/recover`, {
        body: {
          email,
          code_challenge: codeChallenge,
          code_challenge_method: codeChallengeMethod,
          gotrue_meta_security: { captcha_token: options.captchaToken }
        },
        headers: this.headers,
        redirectTo: options.redirectTo
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Gets all the identities linked to a user.
   */
  async getUserIdentities() {
    var _a2;
    try {
      const { data, error } = await this.getUser();
      if (error)
        throw error;
      return { data: { identities: (_a2 = data.user.identities) !== null && _a2 !== void 0 ? _a2 : [] }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Links an oauth identity to an existing user.
   * This method supports the PKCE flow.
   */
  async linkIdentity(credentials) {
    var _a2;
    try {
      const { data, error } = await this._useSession(async (result) => {
        var _a3, _b2, _c, _d, _e;
        const { data: data2, error: error2 } = result;
        if (error2)
          throw error2;
        const url = await this._getUrlForProvider(`${this.url}/user/identities/authorize`, credentials.provider, {
          redirectTo: (_a3 = credentials.options) === null || _a3 === void 0 ? void 0 : _a3.redirectTo,
          scopes: (_b2 = credentials.options) === null || _b2 === void 0 ? void 0 : _b2.scopes,
          queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,
          skipBrowserRedirect: true
        });
        return await _request(this.fetch, "GET", url, {
          headers: this.headers,
          jwt: (_e = (_d = data2.session) === null || _d === void 0 ? void 0 : _d.access_token) !== null && _e !== void 0 ? _e : void 0
        });
      });
      if (error)
        throw error;
      if (isBrowser$1() && !((_a2 = credentials.options) === null || _a2 === void 0 ? void 0 : _a2.skipBrowserRedirect)) {
        window.location.assign(data === null || data === void 0 ? void 0 : data.url);
      }
      return { data: { provider: credentials.provider, url: data === null || data === void 0 ? void 0 : data.url }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { provider: credentials.provider, url: null }, error };
      }
      throw error;
    }
  }
  /**
   * Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.
   */
  async unlinkIdentity(identity2) {
    try {
      return await this._useSession(async (result) => {
        var _a2, _b2;
        const { data, error } = result;
        if (error) {
          throw error;
        }
        return await _request(this.fetch, "DELETE", `${this.url}/user/identities/${identity2.identity_id}`, {
          headers: this.headers,
          jwt: (_b2 = (_a2 = data.session) === null || _a2 === void 0 ? void 0 : _a2.access_token) !== null && _b2 !== void 0 ? _b2 : void 0
        });
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Generates a new JWT.
   * @param refreshToken A valid refresh token that was returned on login.
   */
  async _refreshAccessToken(refreshToken) {
    const debugName = `#_refreshAccessToken(${refreshToken.substring(0, 5)}...)`;
    this._debug(debugName, "begin");
    try {
      const startedAt = Date.now();
      return await retryable(async (attempt) => {
        if (attempt > 0) {
          await sleep(200 * Math.pow(2, attempt - 1));
        }
        this._debug(debugName, "refreshing attempt", attempt);
        return await _request(this.fetch, "POST", `${this.url}/token?grant_type=refresh_token`, {
          body: { refresh_token: refreshToken },
          headers: this.headers,
          xform: _sessionResponse
        });
      }, (attempt, error) => {
        const nextBackOffInterval = 200 * Math.pow(2, attempt);
        return error && isAuthRetryableFetchError(error) && // retryable only if the request can be sent before the backoff overflows the tick duration
        Date.now() + nextBackOffInterval - startedAt < AUTO_REFRESH_TICK_DURATION_MS;
      });
    } catch (error) {
      this._debug(debugName, "error", error);
      if (isAuthError(error)) {
        return { data: { session: null, user: null }, error };
      }
      throw error;
    } finally {
      this._debug(debugName, "end");
    }
  }
  _isValidSession(maybeSession) {
    const isValidSession = typeof maybeSession === "object" && maybeSession !== null && "access_token" in maybeSession && "refresh_token" in maybeSession && "expires_at" in maybeSession;
    return isValidSession;
  }
  async _handleProviderSignIn(provider, options) {
    const url = await this._getUrlForProvider(`${this.url}/authorize`, provider, {
      redirectTo: options.redirectTo,
      scopes: options.scopes,
      queryParams: options.queryParams
    });
    this._debug("#_handleProviderSignIn()", "provider", provider, "options", options, "url", url);
    if (isBrowser$1() && !options.skipBrowserRedirect) {
      window.location.assign(url);
    }
    return { data: { provider, url }, error: null };
  }
  /**
   * Recovers the session from LocalStorage and refreshes the token
   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.
   */
  async _recoverAndRefresh() {
    var _a2;
    const debugName = "#_recoverAndRefresh()";
    this._debug(debugName, "begin");
    try {
      const currentSession = await getItemAsync(this.storage, this.storageKey);
      this._debug(debugName, "session from storage", currentSession);
      if (!this._isValidSession(currentSession)) {
        this._debug(debugName, "session is not valid");
        if (currentSession !== null) {
          await this._removeSession();
        }
        return;
      }
      const expiresWithMargin = ((_a2 = currentSession.expires_at) !== null && _a2 !== void 0 ? _a2 : Infinity) * 1e3 - Date.now() < EXPIRY_MARGIN_MS;
      this._debug(debugName, `session has${expiresWithMargin ? "" : " not"} expired with margin of ${EXPIRY_MARGIN_MS}s`);
      if (expiresWithMargin) {
        if (this.autoRefreshToken && currentSession.refresh_token) {
          const { error } = await this._callRefreshToken(currentSession.refresh_token);
          if (error) {
            console.error(error);
            if (!isAuthRetryableFetchError(error)) {
              this._debug(debugName, "refresh failed with a non-retryable error, removing the session", error);
              await this._removeSession();
            }
          }
        }
      } else {
        await this._notifyAllSubscribers("SIGNED_IN", currentSession);
      }
    } catch (err) {
      this._debug(debugName, "error", err);
      console.error(err);
      return;
    } finally {
      this._debug(debugName, "end");
    }
  }
  async _callRefreshToken(refreshToken) {
    var _a2, _b2;
    if (!refreshToken) {
      throw new AuthSessionMissingError();
    }
    if (this.refreshingDeferred) {
      return this.refreshingDeferred.promise;
    }
    const debugName = `#_callRefreshToken(${refreshToken.substring(0, 5)}...)`;
    this._debug(debugName, "begin");
    try {
      this.refreshingDeferred = new Deferred();
      const { data, error } = await this._refreshAccessToken(refreshToken);
      if (error)
        throw error;
      if (!data.session)
        throw new AuthSessionMissingError();
      await this._saveSession(data.session);
      await this._notifyAllSubscribers("TOKEN_REFRESHED", data.session);
      const result = { session: data.session, error: null };
      this.refreshingDeferred.resolve(result);
      return result;
    } catch (error) {
      this._debug(debugName, "error", error);
      if (isAuthError(error)) {
        const result = { session: null, error };
        if (!isAuthRetryableFetchError(error)) {
          await this._removeSession();
        }
        (_a2 = this.refreshingDeferred) === null || _a2 === void 0 ? void 0 : _a2.resolve(result);
        return result;
      }
      (_b2 = this.refreshingDeferred) === null || _b2 === void 0 ? void 0 : _b2.reject(error);
      throw error;
    } finally {
      this.refreshingDeferred = null;
      this._debug(debugName, "end");
    }
  }
  async _notifyAllSubscribers(event, session, broadcast = true) {
    const debugName = `#_notifyAllSubscribers(${event})`;
    this._debug(debugName, "begin", session, `broadcast = ${broadcast}`);
    try {
      if (this.broadcastChannel && broadcast) {
        this.broadcastChannel.postMessage({ event, session });
      }
      const errors = [];
      const promises = Array.from(this.stateChangeEmitters.values()).map(async (x2) => {
        try {
          await x2.callback(event, session);
        } catch (e) {
          errors.push(e);
        }
      });
      await Promise.all(promises);
      if (errors.length > 0) {
        for (let i = 0; i < errors.length; i += 1) {
          console.error(errors[i]);
        }
        throw errors[0];
      }
    } finally {
      this._debug(debugName, "end");
    }
  }
  /**
   * set currentSession and currentUser
   * process to _startAutoRefreshToken if possible
   */
  async _saveSession(session) {
    this._debug("#_saveSession()", session);
    this.suppressGetSessionWarning = true;
    await setItemAsync(this.storage, this.storageKey, session);
  }
  async _removeSession() {
    this._debug("#_removeSession()");
    await removeItemAsync(this.storage, this.storageKey);
    await this._notifyAllSubscribers("SIGNED_OUT", null);
  }
  /**
   * Removes any registered visibilitychange callback.
   *
   * {@see #startAutoRefresh}
   * {@see #stopAutoRefresh}
   */
  _removeVisibilityChangedCallback() {
    this._debug("#_removeVisibilityChangedCallback()");
    const callback2 = this.visibilityChangedCallback;
    this.visibilityChangedCallback = null;
    try {
      if (callback2 && isBrowser$1() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {
        window.removeEventListener("visibilitychange", callback2);
      }
    } catch (e) {
      console.error("removing visibilitychange callback failed", e);
    }
  }
  /**
   * This is the private implementation of {@link #startAutoRefresh}. Use this
   * within the library.
   */
  async _startAutoRefresh() {
    await this._stopAutoRefresh();
    this._debug("#_startAutoRefresh()");
    const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION_MS);
    this.autoRefreshTicker = ticker;
    if (ticker && typeof ticker === "object" && typeof ticker.unref === "function") {
      ticker.unref();
    } else if (typeof Deno !== "undefined" && typeof Deno.unrefTimer === "function") {
      Deno.unrefTimer(ticker);
    }
    setTimeout(async () => {
      await this.initializePromise;
      await this._autoRefreshTokenTick();
    }, 0);
  }
  /**
   * This is the private implementation of {@link #stopAutoRefresh}. Use this
   * within the library.
   */
  async _stopAutoRefresh() {
    this._debug("#_stopAutoRefresh()");
    const ticker = this.autoRefreshTicker;
    this.autoRefreshTicker = null;
    if (ticker) {
      clearInterval(ticker);
    }
  }
  /**
   * Starts an auto-refresh process in the background. The session is checked
   * every few seconds. Close to the time of expiration a process is started to
   * refresh the session. If refreshing fails it will be retried for as long as
   * necessary.
   *
   * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need
   * to call this function, it will be called for you.
   *
   * On browsers the refresh process works only when the tab/window is in the
   * foreground to conserve resources as well as prevent race conditions and
   * flooding auth with requests. If you call this method any managed
   * visibility change callback will be removed and you must manage visibility
   * changes on your own.
   *
   * On non-browser platforms the refresh process works *continuously* in the
   * background, which may not be desirable. You should hook into your
   * platform's foreground indication mechanism and call these methods
   * appropriately to conserve resources.
   *
   * {@see #stopAutoRefresh}
   */
  async startAutoRefresh() {
    this._removeVisibilityChangedCallback();
    await this._startAutoRefresh();
  }
  /**
   * Stops an active auto refresh process running in the background (if any).
   *
   * If you call this method any managed visibility change callback will be
   * removed and you must manage visibility changes on your own.
   *
   * See {@link #startAutoRefresh} for more details.
   */
  async stopAutoRefresh() {
    this._removeVisibilityChangedCallback();
    await this._stopAutoRefresh();
  }
  /**
   * Runs the auto refresh token tick.
   */
  async _autoRefreshTokenTick() {
    this._debug("#_autoRefreshTokenTick()", "begin");
    try {
      await this._acquireLock(0, async () => {
        try {
          const now2 = Date.now();
          try {
            return await this._useSession(async (result) => {
              const { data: { session } } = result;
              if (!session || !session.refresh_token || !session.expires_at) {
                this._debug("#_autoRefreshTokenTick()", "no session");
                return;
              }
              const expiresInTicks = Math.floor((session.expires_at * 1e3 - now2) / AUTO_REFRESH_TICK_DURATION_MS);
              this._debug("#_autoRefreshTokenTick()", `access token expires in ${expiresInTicks} ticks, a tick lasts ${AUTO_REFRESH_TICK_DURATION_MS}ms, refresh threshold is ${AUTO_REFRESH_TICK_THRESHOLD} ticks`);
              if (expiresInTicks <= AUTO_REFRESH_TICK_THRESHOLD) {
                await this._callRefreshToken(session.refresh_token);
              }
            });
          } catch (e) {
            console.error("Auto refresh tick failed with error. This is likely a transient error.", e);
          }
        } finally {
          this._debug("#_autoRefreshTokenTick()", "end");
        }
      });
    } catch (e) {
      if (e.isAcquireTimeout || e instanceof LockAcquireTimeoutError) {
        this._debug("auto refresh token tick lock not available");
      } else {
        throw e;
      }
    }
  }
  /**
   * Registers callbacks on the browser / platform, which in-turn run
   * algorithms when the browser window/tab are in foreground. On non-browser
   * platforms it assumes always foreground.
   */
  async _handleVisibilityChange() {
    this._debug("#_handleVisibilityChange()");
    if (!isBrowser$1() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {
      if (this.autoRefreshToken) {
        this.startAutoRefresh();
      }
      return false;
    }
    try {
      this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false);
      window === null || window === void 0 ? void 0 : window.addEventListener("visibilitychange", this.visibilityChangedCallback);
      await this._onVisibilityChanged(true);
    } catch (error) {
      console.error("_handleVisibilityChange", error);
    }
  }
  /**
   * Callback registered with `window.addEventListener('visibilitychange')`.
   */
  async _onVisibilityChanged(calledFromInitialize) {
    const methodName = `#_onVisibilityChanged(${calledFromInitialize})`;
    this._debug(methodName, "visibilityState", document.visibilityState);
    if (document.visibilityState === "visible") {
      if (this.autoRefreshToken) {
        this._startAutoRefresh();
      }
      if (!calledFromInitialize) {
        await this.initializePromise;
        await this._acquireLock(-1, async () => {
          if (document.visibilityState !== "visible") {
            this._debug(methodName, "acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting");
            return;
          }
          await this._recoverAndRefresh();
        });
      }
    } else if (document.visibilityState === "hidden") {
      if (this.autoRefreshToken) {
        this._stopAutoRefresh();
      }
    }
  }
  /**
   * Generates the relevant login URL for a third-party provider.
   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.
   * @param options.scopes A space-separated list of scopes granted to the OAuth application.
   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.
   */
  async _getUrlForProvider(url, provider, options) {
    const urlParams = [`provider=${encodeURIComponent(provider)}`];
    if (options === null || options === void 0 ? void 0 : options.redirectTo) {
      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);
    }
    if (options === null || options === void 0 ? void 0 : options.scopes) {
      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);
    }
    if (this.flowType === "pkce") {
      const [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
      const flowParams = new URLSearchParams({
        code_challenge: `${encodeURIComponent(codeChallenge)}`,
        code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`
      });
      urlParams.push(flowParams.toString());
    }
    if (options === null || options === void 0 ? void 0 : options.queryParams) {
      const query = new URLSearchParams(options.queryParams);
      urlParams.push(query.toString());
    }
    if (options === null || options === void 0 ? void 0 : options.skipBrowserRedirect) {
      urlParams.push(`skip_http_redirect=${options.skipBrowserRedirect}`);
    }
    return `${url}?${urlParams.join("&")}`;
  }
  async _unenroll(params) {
    try {
      return await this._useSession(async (result) => {
        var _a2;
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          return { data: null, error: sessionError };
        }
        return await _request(this.fetch, "DELETE", `${this.url}/factors/${params.factorId}`, {
          headers: this.headers,
          jwt: (_a2 = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a2 === void 0 ? void 0 : _a2.access_token
        });
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async _enroll(params) {
    try {
      return await this._useSession(async (result) => {
        var _a2, _b2;
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          return { data: null, error: sessionError };
        }
        const body = Object.assign({ friendly_name: params.friendlyName, factor_type: params.factorType }, params.factorType === "phone" ? { phone: params.phone } : { issuer: params.issuer });
        const { data, error } = await _request(this.fetch, "POST", `${this.url}/factors`, {
          body,
          headers: this.headers,
          jwt: (_a2 = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a2 === void 0 ? void 0 : _a2.access_token
        });
        if (error) {
          return { data: null, error };
        }
        if (params.factorType === "totp" && ((_b2 = data === null || data === void 0 ? void 0 : data.totp) === null || _b2 === void 0 ? void 0 : _b2.qr_code)) {
          data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`;
        }
        return { data, error: null };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * {@see GoTrueMFAApi#verify}
   */
  async _verify(params) {
    return this._acquireLock(-1, async () => {
      try {
        return await this._useSession(async (result) => {
          var _a2;
          const { data: sessionData, error: sessionError } = result;
          if (sessionError) {
            return { data: null, error: sessionError };
          }
          const { data, error } = await _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/verify`, {
            body: { code: params.code, challenge_id: params.challengeId },
            headers: this.headers,
            jwt: (_a2 = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a2 === void 0 ? void 0 : _a2.access_token
          });
          if (error) {
            return { data: null, error };
          }
          await this._saveSession(Object.assign({ expires_at: Math.round(Date.now() / 1e3) + data.expires_in }, data));
          await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED", data);
          return { data, error };
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * {@see GoTrueMFAApi#challenge}
   */
  async _challenge(params) {
    return this._acquireLock(-1, async () => {
      try {
        return await this._useSession(async (result) => {
          var _a2;
          const { data: sessionData, error: sessionError } = result;
          if (sessionError) {
            return { data: null, error: sessionError };
          }
          return await _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/challenge`, {
            body: { channel: params.channel },
            headers: this.headers,
            jwt: (_a2 = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a2 === void 0 ? void 0 : _a2.access_token
          });
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * {@see GoTrueMFAApi#challengeAndVerify}
   */
  async _challengeAndVerify(params) {
    const { data: challengeData, error: challengeError } = await this._challenge({
      factorId: params.factorId
    });
    if (challengeError) {
      return { data: null, error: challengeError };
    }
    return await this._verify({
      factorId: params.factorId,
      challengeId: challengeData.id,
      code: params.code
    });
  }
  /**
   * {@see GoTrueMFAApi#listFactors}
   */
  async _listFactors() {
    const { data: { user }, error: userError } = await this.getUser();
    if (userError) {
      return { data: null, error: userError };
    }
    const factors = (user === null || user === void 0 ? void 0 : user.factors) || [];
    const totp = factors.filter((factor) => factor.factor_type === "totp" && factor.status === "verified");
    const phone = factors.filter((factor) => factor.factor_type === "phone" && factor.status === "verified");
    return {
      data: {
        all: factors,
        totp,
        phone
      },
      error: null
    };
  }
  /**
   * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}
   */
  async _getAuthenticatorAssuranceLevel() {
    return this._acquireLock(-1, async () => {
      return await this._useSession(async (result) => {
        var _a2, _b2;
        const { data: { session }, error: sessionError } = result;
        if (sessionError) {
          return { data: null, error: sessionError };
        }
        if (!session) {
          return {
            data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },
            error: null
          };
        }
        const { payload } = decodeJWT(session.access_token);
        let currentLevel = null;
        if (payload.aal) {
          currentLevel = payload.aal;
        }
        let nextLevel = currentLevel;
        const verifiedFactors = (_b2 = (_a2 = session.user.factors) === null || _a2 === void 0 ? void 0 : _a2.filter((factor) => factor.status === "verified")) !== null && _b2 !== void 0 ? _b2 : [];
        if (verifiedFactors.length > 0) {
          nextLevel = "aal2";
        }
        const currentAuthenticationMethods = payload.amr || [];
        return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null };
      });
    });
  }
  async fetchJwk(kid, jwks = { keys: [] }) {
    let jwk = jwks.keys.find((key) => key.kid === kid);
    if (jwk) {
      return jwk;
    }
    jwk = this.jwks.keys.find((key) => key.kid === kid);
    if (jwk && this.jwks_cached_at + JWKS_TTL > Date.now()) {
      return jwk;
    }
    const { data, error } = await _request(this.fetch, "GET", `${this.url}/.well-known/jwks.json`, {
      headers: this.headers
    });
    if (error) {
      throw error;
    }
    if (!data.keys || data.keys.length === 0) {
      throw new AuthInvalidJwtError("JWKS is empty");
    }
    this.jwks = data;
    this.jwks_cached_at = Date.now();
    jwk = data.keys.find((key) => key.kid === kid);
    if (!jwk) {
      throw new AuthInvalidJwtError("No matching signing key found in JWKS");
    }
    return jwk;
  }
  /**
   * @experimental This method may change in future versions.
   * @description Gets the claims from a JWT. If the JWT is symmetric JWTs, it will call getUser() to verify against the server. If the JWT is asymmetric, it will be verified against the JWKS using the WebCrypto API.
   */
  async getClaims(jwt, jwks = { keys: [] }) {
    try {
      let token = jwt;
      if (!token) {
        const { data, error } = await this.getSession();
        if (error || !data.session) {
          return { data: null, error };
        }
        token = data.session.access_token;
      }
      const { header, payload, signature, raw: { header: rawHeader, payload: rawPayload } } = decodeJWT(token);
      validateExp(payload.exp);
      if (!header.kid || header.alg === "HS256" || !("crypto" in globalThis && "subtle" in globalThis.crypto)) {
        const { error } = await this.getUser(token);
        if (error) {
          throw error;
        }
        return {
          data: {
            claims: payload,
            header,
            signature
          },
          error: null
        };
      }
      const algorithm = getAlgorithm(header.alg);
      const signingKey = await this.fetchJwk(header.kid, jwks);
      const publicKey = await crypto.subtle.importKey("jwk", signingKey, algorithm, true, [
        "verify"
      ]);
      const isValid = await crypto.subtle.verify(algorithm, publicKey, signature, stringToUint8Array(`${rawHeader}.${rawPayload}`));
      if (!isValid) {
        throw new AuthInvalidJwtError("Invalid JWT signature");
      }
      return {
        data: {
          claims: payload,
          header,
          signature
        },
        error: null
      };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
}
GoTrueClient.nextInstanceID = 0;
const AuthClient = GoTrueClient;
class SupabaseAuthClient extends AuthClient {
  constructor(options) {
    super(options);
  }
}
var __awaiter = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
class SupabaseClient {
  /**
   * Create a new client for use in the browser.
   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.
   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.
   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.
   * @param options.auth.autoRefreshToken Set to "true" if you want to automatically refresh the token before expiring.
   * @param options.auth.persistSession Set to "true" if you want to automatically save the user session into local storage.
   * @param options.auth.detectSessionInUrl Set to "true" if you want to automatically detects OAuth grants in the URL and signs in the user.
   * @param options.realtime Options passed along to realtime-js constructor.
   * @param options.global.fetch A custom fetch implementation.
   * @param options.global.headers Any additional headers to send with each network request.
   */
  constructor(supabaseUrl2, supabaseKey, options) {
    var _a2, _b2, _c;
    this.supabaseUrl = supabaseUrl2;
    this.supabaseKey = supabaseKey;
    if (!supabaseUrl2)
      throw new Error("supabaseUrl is required.");
    if (!supabaseKey)
      throw new Error("supabaseKey is required.");
    const _supabaseUrl = ensureTrailingSlash(supabaseUrl2);
    const baseUrl = new URL(_supabaseUrl);
    this.realtimeUrl = new URL("realtime/v1", baseUrl);
    this.realtimeUrl.protocol = this.realtimeUrl.protocol.replace("http", "ws");
    this.authUrl = new URL("auth/v1", baseUrl);
    this.storageUrl = new URL("storage/v1", baseUrl);
    this.functionsUrl = new URL("functions/v1", baseUrl);
    const defaultStorageKey = `sb-${baseUrl.hostname.split(".")[0]}-auth-token`;
    const DEFAULTS = {
      db: DEFAULT_DB_OPTIONS,
      realtime: DEFAULT_REALTIME_OPTIONS,
      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),
      global: DEFAULT_GLOBAL_OPTIONS
    };
    const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);
    this.storageKey = (_a2 = settings.auth.storageKey) !== null && _a2 !== void 0 ? _a2 : "";
    this.headers = (_b2 = settings.global.headers) !== null && _b2 !== void 0 ? _b2 : {};
    if (!settings.accessToken) {
      this.auth = this._initSupabaseAuthClient((_c = settings.auth) !== null && _c !== void 0 ? _c : {}, this.headers, settings.global.fetch);
    } else {
      this.accessToken = settings.accessToken;
      this.auth = new Proxy({}, {
        get: (_2, prop) => {
          throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);
        }
      });
    }
    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch);
    this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers, accessToken: this._getAccessToken.bind(this) }, settings.realtime));
    this.rest = new PostgrestClient2(new URL("rest/v1", baseUrl).href, {
      headers: this.headers,
      schema: settings.db.schema,
      fetch: this.fetch
    });
    if (!settings.accessToken) {
      this._listenForAuthEvents();
    }
  }
  /**
   * Supabase Functions allows you to deploy and invoke edge functions.
   */
  get functions() {
    return new FunctionsClient(this.functionsUrl.href, {
      headers: this.headers,
      customFetch: this.fetch
    });
  }
  /**
   * Supabase Storage allows you to manage user-generated content, such as photos or videos.
   */
  get storage() {
    return new StorageClient(this.storageUrl.href, this.headers, this.fetch);
  }
  /**
   * Perform a query on a table or a view.
   *
   * @param relation - The table or view name to query
   */
  from(relation) {
    return this.rest.from(relation);
  }
  // NOTE: signatures must be kept in sync with PostgrestClient.schema
  /**
   * Select a schema to query or perform an function (rpc) call.
   *
   * The schema needs to be on the list of exposed schemas inside Supabase.
   *
   * @param schema - The schema to query
   */
  schema(schema) {
    return this.rest.schema(schema);
  }
  // NOTE: signatures must be kept in sync with PostgrestClient.rpc
  /**
   * Perform a function call.
   *
   * @param fn - The function name to call
   * @param args - The arguments to pass to the function call
   * @param options - Named parameters
   * @param options.head - When set to `true`, `data` will not be returned.
   * Useful if you only need the count.
   * @param options.get - When set to `true`, the function will be called with
   * read-only access mode.
   * @param options.count - Count algorithm to use to count rows returned by the
   * function. Only applicable for [set-returning
   * functions](https://www.postgresql.org/docs/current/functions-srf.html).
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   */
  rpc(fn, args = {}, options = {}) {
    return this.rest.rpc(fn, args, options);
  }
  /**
   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.
   *
   * @param {string} name - The name of the Realtime channel.
   * @param {Object} opts - The options to pass to the Realtime channel.
   *
   */
  channel(name, opts = { config: {} }) {
    return this.realtime.channel(name, opts);
  }
  /**
   * Returns all Realtime channels.
   */
  getChannels() {
    return this.realtime.getChannels();
  }
  /**
   * Unsubscribes and removes Realtime channel from Realtime client.
   *
   * @param {RealtimeChannel} channel - The name of the Realtime channel.
   *
   */
  removeChannel(channel) {
    return this.realtime.removeChannel(channel);
  }
  /**
   * Unsubscribes and removes all Realtime channels from Realtime client.
   */
  removeAllChannels() {
    return this.realtime.removeAllChannels();
  }
  _getAccessToken() {
    var _a2, _b2;
    return __awaiter(this, void 0, void 0, function* () {
      if (this.accessToken) {
        return yield this.accessToken();
      }
      const { data } = yield this.auth.getSession();
      return (_b2 = (_a2 = data.session) === null || _a2 === void 0 ? void 0 : _a2.access_token) !== null && _b2 !== void 0 ? _b2 : null;
    });
  }
  _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, flowType, lock, debug }, headers, fetch2) {
    const authHeaders = {
      Authorization: `Bearer ${this.supabaseKey}`,
      apikey: `${this.supabaseKey}`
    };
    return new SupabaseAuthClient({
      url: this.authUrl.href,
      headers: Object.assign(Object.assign({}, authHeaders), headers),
      storageKey,
      autoRefreshToken,
      persistSession,
      detectSessionInUrl,
      storage,
      flowType,
      lock,
      debug,
      fetch: fetch2,
      // auth checks if there is a custom authorizaiton header using this flag
      // so it knows whether to return an error when getUser is called with no session
      hasCustomAuthorizationHeader: "Authorization" in this.headers
    });
  }
  _initRealtimeClient(options) {
    return new RealtimeClient(this.realtimeUrl.href, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));
  }
  _listenForAuthEvents() {
    let data = this.auth.onAuthStateChange((event, session) => {
      this._handleTokenChanged(event, "CLIENT", session === null || session === void 0 ? void 0 : session.access_token);
    });
    return data;
  }
  _handleTokenChanged(event, source, token) {
    if ((event === "TOKEN_REFRESHED" || event === "SIGNED_IN") && this.changedAccessToken !== token) {
      this.changedAccessToken = token;
    } else if (event === "SIGNED_OUT") {
      this.realtime.setAuth();
      if (source == "STORAGE")
        this.auth.signOut();
      this.changedAccessToken = void 0;
    }
  }
}
const createClient = (supabaseUrl2, supabaseKey, options) => {
  return new SupabaseClient(supabaseUrl2, supabaseKey, options);
};
const supabaseUrl = "https://xsrirnfwsjeovekwtluz.supabase.co";
const supabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhzcmlybmZ3c2plb3Zla3d0bHV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY2NjQ5OTcsImV4cCI6MjA2MjI0MDk5N30.SrIEj_akvD9x-tltfpV3K4hQSKtPjJ_tQ4FFhPwiIy4";
console.log("Supabase initialized:", { url: supabaseUrl, hasKey: true });
const supabase = createClient(supabaseUrl, supabaseAnonKey);
const supabase$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  supabase
}, Symbol.toStringTag, { value: "Module" }));
const translateErrorMessage = (error) => {
  if (!error) return "Erro desconhecido";
  const message = typeof error === "string" ? error : error.message || error.error_description || "";
  if (message.includes("Invalid login credentials")) {
    return "Email ou senha incorretos. Verifique suas credenciais e tente novamente.";
  }
  if (message.includes("email already registered") || message.includes("User already registered")) {
    return "Este email já está cadastrado no sistema.";
  }
  if (message.includes("Password should be at least")) {
    return "A senha deve ter pelo menos 6 caracteres.";
  }
  if (message.includes("Invalid email")) {
    return "O formato do email é inválido.";
  }
  if (message.includes("Email not confirmed")) {
    return "Email não confirmado. Verifique sua caixa de entrada.";
  }
  if (message.includes("Too many requests")) {
    return "Muitas tentativas. Aguarde alguns minutos antes de tentar novamente.";
  }
  if (message.includes("Network error") || message.includes("fetch")) {
    return "Erro de conexão. Verifique sua internet e tente novamente.";
  }
  if (message.includes("timeout")) {
    return "A operação demorou muito para responder. Tente novamente.";
  }
  if (message.includes("duplicate key value") || message.includes("already exists")) {
    return "Este registro já existe no sistema.";
  }
  if (message.includes("foreign key constraint")) {
    return "Não é possível realizar esta operação devido a dependências no sistema.";
  }
  if (message.includes("not found") || message.includes("No rows")) {
    return "Registro não encontrado.";
  }
  if (message.includes("permission denied") || message.includes("insufficient_privilege")) {
    return "Você não tem permissão para realizar esta operação.";
  }
  if (message.includes("required") || message.includes("cannot be null")) {
    return "Todos os campos obrigatórios devem ser preenchidos.";
  }
  if (message.includes("invalid format")) {
    return "Formato de dados inválido.";
  }
  if (message.includes("Sua conta está bloqueada")) {
    return "Sua conta está bloqueada. Entre em contato com o administrador do sistema.";
  }
  if (message.includes("Failed to fetch") || message.includes("NetworkError")) {
    return "Erro de conexão com o servidor. Verifique sua internet e tente novamente.";
  }
  if (message.includes("CORS")) {
    return "Erro de configuração do servidor. Entre em contato com o suporte técnico.";
  }
  if (message.includes("email") && message.includes("invalid")) {
    return "O formato do email é inválido. Verifique e tente novamente.";
  }
  if (message.includes("password") && message.includes("weak")) {
    return "A senha é muito fraca. Use pelo menos 6 caracteres com letras e números.";
  }
  if (message.includes("session") || message.includes("token")) {
    return "Sua sessão expirou. Faça login novamente.";
  }
  if (message.includes("unauthorized") || message.includes("Unauthorized")) {
    return "Acesso não autorizado. Verifique suas credenciais.";
  }
  if (message.includes("500") || message.includes("Internal Server Error")) {
    return "Erro interno do servidor. Tente novamente em alguns minutos.";
  }
  if (message.includes("503") || message.includes("Service Unavailable")) {
    return "Serviço temporariamente indisponível. Tente novamente em alguns minutos.";
  }
  if (message.includes("404") || message.includes("Not Found")) {
    return "Recurso não encontrado.";
  }
  if (message.includes("required field") || message.includes("campo obrigatório")) {
    return "Preencha todos os campos obrigatórios.";
  }
  if (message.includes("invalid format") || message.includes("formato inválido")) {
    return "Formato de dados inválido. Verifique os campos preenchidos.";
  }
  if (message.length > 0) {
    return message;
  }
  return "Ocorreu um erro inesperado. Tente novamente.";
};
const showMessage = (type, message) => {
  const translatedMessage = type === "error" ? translateErrorMessage(message) : message;
  const options = {
    position: "top-center",
    className: "bg-background-card text-white",
    progressClassName: "bg-primary-500",
    autoClose: 3e3,
    hideProgressBar: false,
    closeOnClick: true,
    pauseOnHover: true,
    draggable: true
  };
  switch (type) {
    case "success":
      B.success(translatedMessage, options);
      break;
    case "error":
      B.error(translatedMessage, options);
      break;
    case "info":
      B.info(translatedMessage, options);
      break;
    case "warning":
      B.warning(translatedMessage, options);
      break;
    default:
      B(translatedMessage, options);
  }
};
const FormEntrar = () => {
  const navigate = useNavigate();
  const [email, setEmail] = reactExports.useState("");
  const [senha, setSenha] = reactExports.useState("");
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [error, setError] = reactExports.useState("");
  const handleSubmit = async (e) => {
    var _a2;
    e.preventDefault();
    setIsLoading(true);
    setError("");
    try {
      const { error: signInError } = await supabase.auth.signInWithPassword({
        email,
        password: senha
      });
      if (signInError) throw signInError;
      const { data: userData } = await supabase.from("usuarios").select(`
          status,
          tipo_user_config:tipo_user_config_id(tipo)
        `).eq("id", (_a2 = (await supabase.auth.getUser()).data.user) == null ? void 0 : _a2.id).single();
      if ((userData == null ? void 0 : userData.status) === false) {
        await supabase.auth.signOut();
        throw new Error("Sua conta está bloqueada. Entre em contato com o administrador do sistema.");
      }
      if ((userData == null ? void 0 : userData.tipo) === "user") {
        navigate("/user/dashboard", { replace: true });
      } else {
        navigate("/dashboard", { replace: true });
      }
    } catch (err) {
      setError(translateErrorMessage(err));
    } finally {
      setIsLoading(false);
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, className: "space-y-6", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Input,
      {
        id: "email",
        type: "email",
        label: "Email",
        value: email,
        onChange: (e) => setEmail(e.target.value),
        required: true,
        autoComplete: "email"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Input,
      {
        id: "senha",
        type: "password",
        label: "Senha",
        value: senha,
        onChange: (e) => setSenha(e.target.value),
        required: true,
        autoComplete: "current-password"
      }
    ),
    error && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 text-sm", children: error }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Button,
      {
        type: "submit",
        variant: "primary",
        fullWidth: true,
        disabled: isLoading,
        children: isLoading ? "Entrando..." : "Entrar"
      }
    )
  ] });
};
const EntrarPage = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "min-h-screen flex items-center justify-center p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full max-w-md fade-in", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center mb-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Logo, { size: "lg" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "mt-4 text-2xl font-medium text-white", children: "Bem-vindo de volta" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mt-2 text-gray-400", children: "Entre com seus dados para acessar sua conta" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "form-container", children: /* @__PURE__ */ jsxRuntimeExports.jsx(FormEntrar, {}) })
  ] }) });
};
const FormCadastro = () => {
  const navigate = useNavigate();
  const [nome, setNome] = reactExports.useState("");
  const [email, setEmail] = reactExports.useState("");
  const [senha, setSenha] = reactExports.useState("");
  const [confirmarSenha, setConfirmarSenha] = reactExports.useState("");
  const [senhaError, setSenhaError] = reactExports.useState("");
  const [isFormValid, setIsFormValid] = reactExports.useState(false);
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [error, setError] = reactExports.useState("");
  reactExports.useEffect(() => {
    const validateForm = () => {
      if (!nome || !email || !senha || !confirmarSenha) {
        setIsFormValid(false);
        return;
      }
      if (senha !== confirmarSenha) {
        setSenhaError("As senhas não conferem");
        setIsFormValid(false);
        return;
      }
      if (senha.length < 6) {
        setSenhaError("A senha deve ter pelo menos 6 caracteres");
        setIsFormValid(false);
        return;
      }
      setSenhaError("");
      setIsFormValid(true);
    };
    validateForm();
  }, [nome, email, senha, confirmarSenha]);
  const handleSubmit = async (e) => {
    var _a2;
    e.preventDefault();
    if (!isFormValid || isLoading) return;
    try {
      setIsLoading(true);
      setError("");
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email,
        password: senha
      });
      if (authError) throw authError;
      const { data: empresaData, error: empresaError } = await supabase.from("empresas").insert([{ nome }]).select().single();
      if (empresaError) throw empresaError;
      const { data: adminTipoData, error: adminTipoError } = await supabase.from("tipo_user_config").select("id").eq("tipo", "admin").single();
      if (adminTipoError) {
        console.error("Erro ao buscar tipo admin:", adminTipoError);
      }
      const { error: usuarioError } = await supabase.from("usuarios").insert([
        {
          id: (_a2 = authData.user) == null ? void 0 : _a2.id,
          nome,
          email,
          empresa_id: empresaData.id,
          tipo_user_config_id: adminTipoData == null ? void 0 : adminTipoData.id,
          // Associar ao tipo admin
          status: true
          // Define o status como ativo por padrão
        }
      ]);
      if (usuarioError) throw usuarioError;
      const { error: configError } = await supabase.from("configuracoes").insert([{
        empresa_id: empresaData.id,
        taxa_modo: "distancia"
      }]);
      if (configError) throw configError;
      const { error: statusError } = await supabase.from("status_loja").insert([{
        empresa_id: empresaData.id,
        aberto: false,
        aberto_manual: true,
        modo_operacao: "manual"
      }]);
      if (statusError) throw statusError;
      try {
        const { error: estoqueConfigError } = await supabase.from("tipo_controle_estoque_config").insert([{
          empresa_id: empresaData.id,
          tipo_controle: "pedidos",
          bloqueia_sem_estoque: false
        }]);
        if (estoqueConfigError) {
          console.error("Erro ao criar configuração de estoque:", estoqueConfigError);
        }
      } catch (estoqueError) {
        console.error("Exceção ao criar configuração de estoque:", estoqueError);
      }
      await supabase.auth.signOut();
      navigate("/entrar", {
        replace: true,
        state: { message: "Conta criada com sucesso! Por favor, faça login." }
      });
    } catch (err) {
      console.error("Erro no cadastro:", err);
      setError(translateErrorMessage(err));
    } finally {
      setIsLoading(false);
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, className: "space-y-5", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Input,
      {
        id: "nome",
        type: "text",
        label: "Nome completo",
        value: nome,
        onChange: (e) => setNome(e.target.value),
        required: true,
        autoComplete: "name"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Input,
      {
        id: "email",
        type: "email",
        label: "Email",
        value: email,
        onChange: (e) => setEmail(e.target.value),
        required: true,
        autoComplete: "email"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Input,
      {
        id: "senha",
        type: "password",
        label: "Senha",
        value: senha,
        onChange: (e) => setSenha(e.target.value),
        required: true,
        autoComplete: "new-password"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Input,
      {
        id: "confirmarSenha",
        type: "password",
        label: "Confirmar senha",
        value: confirmarSenha,
        onChange: (e) => setConfirmarSenha(e.target.value),
        required: true,
        autoComplete: "new-password"
      }
    ),
    senhaError && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 text-sm mt-2", children: senhaError }),
    error && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 text-sm mt-2", children: error }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "pt-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      Button,
      {
        type: "submit",
        variant: "primary",
        fullWidth: true,
        disabled: !isFormValid || isLoading,
        children: isLoading ? "Criando conta..." : "Criar conta"
      }
    ) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 text-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-400", children: [
      "Já possui uma conta?",
      " ",
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        Link,
        {
          to: "/entrar",
          className: "text-primary-400 hover:text-primary-300 inline-flex items-center gap-1 transition-colors",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowLeft, { size: 16 }),
            "Entrar"
          ]
        }
      )
    ] }) })
  ] });
};
const CadastrarPage = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "min-h-screen flex items-center justify-center p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full max-w-md fade-in", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center mb-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Logo, { size: "lg" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "mt-4 text-2xl font-medium text-white", children: "Criar uma nova conta" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mt-2 text-gray-400", children: "Preencha os dados abaixo para se cadastrar" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "form-container", children: /* @__PURE__ */ jsxRuntimeExports.jsx(FormCadastro, {}) })
  ] }) });
};
const LayoutGroupContext = reactExports.createContext({});
function useConstant(init) {
  const ref = reactExports.useRef(null);
  if (ref.current === null) {
    ref.current = init();
  }
  return ref.current;
}
const PresenceContext = reactExports.createContext(null);
const MotionConfigContext = reactExports.createContext({
  transformPagePoint: (p2) => p2,
  isStatic: false,
  reducedMotion: "never"
});
class PopChildMeasure extends reactExports.Component {
  getSnapshotBeforeUpdate(prevProps) {
    const element = this.props.childRef.current;
    if (element && prevProps.isPresent && !this.props.isPresent) {
      const size = this.props.sizeRef.current;
      size.height = element.offsetHeight || 0;
      size.width = element.offsetWidth || 0;
      size.top = element.offsetTop;
      size.left = element.offsetLeft;
    }
    return null;
  }
  /**
   * Required with getSnapshotBeforeUpdate to stop React complaining.
   */
  componentDidUpdate() {
  }
  render() {
    return this.props.children;
  }
}
function PopChild({ children, isPresent }) {
  const id2 = reactExports.useId();
  const ref = reactExports.useRef(null);
  const size = reactExports.useRef({
    width: 0,
    height: 0,
    top: 0,
    left: 0
  });
  const { nonce } = reactExports.useContext(MotionConfigContext);
  reactExports.useInsertionEffect(() => {
    const { width, height, top, left } = size.current;
    if (isPresent || !ref.current || !width || !height)
      return;
    ref.current.dataset.motionPopId = id2;
    const style = document.createElement("style");
    if (nonce)
      style.nonce = nonce;
    document.head.appendChild(style);
    if (style.sheet) {
      style.sheet.insertRule(`
          [data-motion-pop-id="${id2}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
            top: ${top}px !important;
            left: ${left}px !important;
          }
        `);
    }
    return () => {
      document.head.removeChild(style);
    };
  }, [isPresent]);
  return jsxRuntimeExports.jsx(PopChildMeasure, { isPresent, childRef: ref, sizeRef: size, children: reactExports.cloneElement(children, { ref }) });
}
const PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode }) => {
  const presenceChildren = useConstant(newChildrenMap);
  const id2 = reactExports.useId();
  const memoizedOnExitComplete = reactExports.useCallback((childId) => {
    presenceChildren.set(childId, true);
    for (const isComplete of presenceChildren.values()) {
      if (!isComplete)
        return;
    }
    onExitComplete && onExitComplete();
  }, [presenceChildren, onExitComplete]);
  const context = reactExports.useMemo(
    () => ({
      id: id2,
      initial,
      isPresent,
      custom,
      onExitComplete: memoizedOnExitComplete,
      register: (childId) => {
        presenceChildren.set(childId, false);
        return () => presenceChildren.delete(childId);
      }
    }),
    /**
     * If the presence of a child affects the layout of the components around it,
     * we want to make a new context value to ensure they get re-rendered
     * so they can detect that layout change.
     */
    presenceAffectsLayout ? [Math.random(), memoizedOnExitComplete] : [isPresent, memoizedOnExitComplete]
  );
  reactExports.useMemo(() => {
    presenceChildren.forEach((_2, key) => presenceChildren.set(key, false));
  }, [isPresent]);
  reactExports.useEffect(() => {
    !isPresent && !presenceChildren.size && onExitComplete && onExitComplete();
  }, [isPresent]);
  if (mode === "popLayout") {
    children = jsxRuntimeExports.jsx(PopChild, { isPresent, children });
  }
  return jsxRuntimeExports.jsx(PresenceContext.Provider, { value: context, children });
};
function newChildrenMap() {
  return /* @__PURE__ */ new Map();
}
function usePresence(subscribe = true) {
  const context = reactExports.useContext(PresenceContext);
  if (context === null)
    return [true, null];
  const { isPresent, onExitComplete, register } = context;
  const id2 = reactExports.useId();
  reactExports.useEffect(() => {
    if (subscribe)
      register(id2);
  }, [subscribe]);
  const safeToRemove = reactExports.useCallback(() => subscribe && onExitComplete && onExitComplete(id2), [id2, onExitComplete, subscribe]);
  return !isPresent && onExitComplete ? [false, safeToRemove] : [true];
}
const getChildKey = (child) => child.key || "";
function onlyElements(children) {
  const filtered = [];
  reactExports.Children.forEach(children, (child) => {
    if (reactExports.isValidElement(child))
      filtered.push(child);
  });
  return filtered;
}
const isBrowser = typeof window !== "undefined";
const useIsomorphicLayoutEffect = isBrowser ? reactExports.useLayoutEffect : reactExports.useEffect;
const AnimatePresence = ({ children, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = "sync", propagate = false }) => {
  const [isParentPresent, safeToRemove] = usePresence(propagate);
  const presentChildren = reactExports.useMemo(() => onlyElements(children), [children]);
  const presentKeys = propagate && !isParentPresent ? [] : presentChildren.map(getChildKey);
  const isInitialRender = reactExports.useRef(true);
  const pendingPresentChildren = reactExports.useRef(presentChildren);
  const exitComplete = useConstant(() => /* @__PURE__ */ new Map());
  const [diffedChildren, setDiffedChildren] = reactExports.useState(presentChildren);
  const [renderedChildren, setRenderedChildren] = reactExports.useState(presentChildren);
  useIsomorphicLayoutEffect(() => {
    isInitialRender.current = false;
    pendingPresentChildren.current = presentChildren;
    for (let i = 0; i < renderedChildren.length; i++) {
      const key = getChildKey(renderedChildren[i]);
      if (!presentKeys.includes(key)) {
        if (exitComplete.get(key) !== true) {
          exitComplete.set(key, false);
        }
      } else {
        exitComplete.delete(key);
      }
    }
  }, [renderedChildren, presentKeys.length, presentKeys.join("-")]);
  const exitingChildren = [];
  if (presentChildren !== diffedChildren) {
    let nextChildren = [...presentChildren];
    for (let i = 0; i < renderedChildren.length; i++) {
      const child = renderedChildren[i];
      const key = getChildKey(child);
      if (!presentKeys.includes(key)) {
        nextChildren.splice(i, 0, child);
        exitingChildren.push(child);
      }
    }
    if (mode === "wait" && exitingChildren.length) {
      nextChildren = exitingChildren;
    }
    setRenderedChildren(onlyElements(nextChildren));
    setDiffedChildren(presentChildren);
    return;
  }
  const { forceRender } = reactExports.useContext(LayoutGroupContext);
  return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: renderedChildren.map((child) => {
    const key = getChildKey(child);
    const isPresent = propagate && !isParentPresent ? false : presentChildren === renderedChildren || presentKeys.includes(key);
    const onExit = () => {
      if (exitComplete.has(key)) {
        exitComplete.set(key, true);
      } else {
        return;
      }
      let isEveryExitComplete = true;
      exitComplete.forEach((isExitComplete) => {
        if (!isExitComplete)
          isEveryExitComplete = false;
      });
      if (isEveryExitComplete) {
        forceRender === null || forceRender === void 0 ? void 0 : forceRender();
        setRenderedChildren(pendingPresentChildren.current);
        propagate && (safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove());
        onExitComplete && onExitComplete();
      }
    };
    return jsxRuntimeExports.jsx(PresenceChild, { isPresent, initial: !isInitialRender.current || initial ? void 0 : false, custom: isPresent ? void 0 : custom, presenceAffectsLayout, mode, onExitComplete: isPresent ? void 0 : onExit, children: child }, key);
  }) });
};
const noop$1 = /* @__NO_SIDE_EFFECTS__ */ (any) => any;
let invariant = noop$1;
// @__NO_SIDE_EFFECTS__
function memo(callback2) {
  let result;
  return () => {
    if (result === void 0)
      result = callback2();
    return result;
  };
}
const progress = /* @__NO_SIDE_EFFECTS__ */ (from2, to2, value) => {
  const toFromDifference = to2 - from2;
  return toFromDifference === 0 ? 1 : (value - from2) / toFromDifference;
};
const secondsToMilliseconds = /* @__NO_SIDE_EFFECTS__ */ (seconds) => seconds * 1e3;
const millisecondsToSeconds = /* @__NO_SIDE_EFFECTS__ */ (milliseconds) => milliseconds / 1e3;
const MotionGlobalConfig = {
  useManualTiming: false
};
function createRenderStep(runNextFrame) {
  let thisFrame = /* @__PURE__ */ new Set();
  let nextFrame = /* @__PURE__ */ new Set();
  let isProcessing = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  let latestFrameData = {
    delta: 0,
    timestamp: 0,
    isProcessing: false
  };
  function triggerCallback(callback2) {
    if (toKeepAlive.has(callback2)) {
      step.schedule(callback2);
      runNextFrame();
    }
    callback2(latestFrameData);
  }
  const step = {
    /**
     * Schedule a process to run on the next frame.
     */
    schedule: (callback2, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing;
      const queue = addToCurrentFrame ? thisFrame : nextFrame;
      if (keepAlive)
        toKeepAlive.add(callback2);
      if (!queue.has(callback2))
        queue.add(callback2);
      return callback2;
    },
    /**
     * Cancel the provided callback from running on the next frame.
     */
    cancel: (callback2) => {
      nextFrame.delete(callback2);
      toKeepAlive.delete(callback2);
    },
    /**
     * Execute all schedule callbacks.
     */
    process: (frameData2) => {
      latestFrameData = frameData2;
      if (isProcessing) {
        flushNextFrame = true;
        return;
      }
      isProcessing = true;
      [thisFrame, nextFrame] = [nextFrame, thisFrame];
      thisFrame.forEach(triggerCallback);
      thisFrame.clear();
      isProcessing = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}
const stepsOrder = [
  "read",
  // Read
  "resolveKeyframes",
  // Write/Read/Write/Read
  "update",
  // Compute
  "preRender",
  // Compute
  "render",
  // Write
  "postRender"
  // Compute
];
const maxElapsed = 40;
function createRenderBatcher(scheduleNextBatch, allowKeepAlive) {
  let runNextFrame = false;
  let useDefaultElapsed = true;
  const state = {
    delta: 0,
    timestamp: 0,
    isProcessing: false
  };
  const flagRunNextFrame = () => runNextFrame = true;
  const steps = stepsOrder.reduce((acc, key) => {
    acc[key] = createRenderStep(flagRunNextFrame);
    return acc;
  }, {});
  const { read, resolveKeyframes, update, preRender, render, postRender } = steps;
  const processBatch = () => {
    const timestamp = performance.now();
    runNextFrame = false;
    state.delta = useDefaultElapsed ? 1e3 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);
    state.timestamp = timestamp;
    state.isProcessing = true;
    read.process(state);
    resolveKeyframes.process(state);
    update.process(state);
    preRender.process(state);
    render.process(state);
    postRender.process(state);
    state.isProcessing = false;
    if (runNextFrame && allowKeepAlive) {
      useDefaultElapsed = false;
      scheduleNextBatch(processBatch);
    }
  };
  const wake = () => {
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!state.isProcessing) {
      scheduleNextBatch(processBatch);
    }
  };
  const schedule = stepsOrder.reduce((acc, key) => {
    const step = steps[key];
    acc[key] = (process, keepAlive = false, immediate = false) => {
      if (!runNextFrame)
        wake();
      return step.schedule(process, keepAlive, immediate);
    };
    return acc;
  }, {});
  const cancel = (process) => {
    for (let i = 0; i < stepsOrder.length; i++) {
      steps[stepsOrder[i]].cancel(process);
    }
  };
  return { schedule, cancel, state, steps };
}
const { schedule: frame, cancel: cancelFrame, state: frameData, steps: frameSteps } = createRenderBatcher(typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : noop$1, true);
const LazyContext = reactExports.createContext({ strict: false });
const featureProps = {
  animation: [
    "animate",
    "variants",
    "whileHover",
    "whileTap",
    "exit",
    "whileInView",
    "whileFocus",
    "whileDrag"
  ],
  exit: ["exit"],
  drag: ["drag", "dragControls"],
  focus: ["whileFocus"],
  hover: ["whileHover", "onHoverStart", "onHoverEnd"],
  tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
  pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
  inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
  layout: ["layout", "layoutId"]
};
const featureDefinitions = {};
for (const key in featureProps) {
  featureDefinitions[key] = {
    isEnabled: (props) => featureProps[key].some((name) => !!props[name])
  };
}
function loadFeatures(features) {
  for (const key in features) {
    featureDefinitions[key] = {
      ...featureDefinitions[key],
      ...features[key]
    };
  }
}
const validMotionProps = /* @__PURE__ */ new Set([
  "animate",
  "exit",
  "variants",
  "initial",
  "style",
  "values",
  "variants",
  "transition",
  "transformTemplate",
  "custom",
  "inherit",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "_dragX",
  "_dragY",
  "onHoverStart",
  "onHoverEnd",
  "onViewportEnter",
  "onViewportLeave",
  "globalTapTarget",
  "ignoreStrict",
  "viewport"
]);
function isValidMotionProp(key) {
  return key.startsWith("while") || key.startsWith("drag") && key !== "draggable" || key.startsWith("layout") || key.startsWith("onTap") || key.startsWith("onPan") || key.startsWith("onLayout") || validMotionProps.has(key);
}
let shouldForward = (key) => !isValidMotionProp(key);
function loadExternalIsValidProp(isValidProp) {
  if (!isValidProp)
    return;
  shouldForward = (key) => key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
}
try {
  loadExternalIsValidProp(require("@emotion/is-prop-valid").default);
} catch (_a2) {
}
function filterProps(props, isDom, forwardMotionProps) {
  const filteredProps = {};
  for (const key in props) {
    if (key === "values" && typeof props.values === "object")
      continue;
    if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || // If trying to use native HTML drag events, forward drag listeners
    props["draggable"] && key.startsWith("onDrag")) {
      filteredProps[key] = props[key];
    }
  }
  return filteredProps;
}
function createDOMMotionComponentProxy(componentFactory) {
  if (typeof Proxy === "undefined") {
    return componentFactory;
  }
  const componentCache = /* @__PURE__ */ new Map();
  const deprecatedFactoryFunction = (...args) => {
    return componentFactory(...args);
  };
  return new Proxy(deprecatedFactoryFunction, {
    /**
     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
     * The prop name is passed through as `key` and we can use that to generate a `motion`
     * DOM component with that name.
     */
    get: (_target, key) => {
      if (key === "create")
        return componentFactory;
      if (!componentCache.has(key)) {
        componentCache.set(key, componentFactory(key));
      }
      return componentCache.get(key);
    }
  });
}
const MotionContext = reactExports.createContext({});
function isVariantLabel(v2) {
  return typeof v2 === "string" || Array.isArray(v2);
}
function isAnimationControls(v2) {
  return v2 !== null && typeof v2 === "object" && typeof v2.start === "function";
}
const variantPriorityOrder = [
  "animate",
  "whileInView",
  "whileFocus",
  "whileHover",
  "whileTap",
  "whileDrag",
  "exit"
];
const variantProps = ["initial", ...variantPriorityOrder];
function isControllingVariants(props) {
  return isAnimationControls(props.animate) || variantProps.some((name) => isVariantLabel(props[name]));
}
function isVariantNode(props) {
  return Boolean(isControllingVariants(props) || props.variants);
}
function getCurrentTreeVariants(props, context) {
  if (isControllingVariants(props)) {
    const { initial, animate } = props;
    return {
      initial: initial === false || isVariantLabel(initial) ? initial : void 0,
      animate: isVariantLabel(animate) ? animate : void 0
    };
  }
  return props.inherit !== false ? context : {};
}
function useCreateMotionContext(props) {
  const { initial, animate } = getCurrentTreeVariants(props, reactExports.useContext(MotionContext));
  return reactExports.useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);
}
function variantLabelsAsDependency(prop) {
  return Array.isArray(prop) ? prop.join(" ") : prop;
}
const motionComponentSymbol = Symbol.for("motionComponentSymbol");
function isRefObject(ref) {
  return ref && typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}
function useMotionRef(visualState, visualElement, externalRef) {
  return reactExports.useCallback(
    (instance) => {
      if (instance) {
        visualState.onMount && visualState.onMount(instance);
      }
      if (visualElement) {
        if (instance) {
          visualElement.mount(instance);
        } else {
          visualElement.unmount();
        }
      }
      if (externalRef) {
        if (typeof externalRef === "function") {
          externalRef(instance);
        } else if (isRefObject(externalRef)) {
          externalRef.current = instance;
        }
      }
    },
    /**
     * Only pass a new ref callback to React if we've received a visual element
     * factory. Otherwise we'll be mounting/remounting every time externalRef
     * or other dependencies change.
     */
    [visualElement]
  );
}
const camelToDash = (str) => str.replace(/([a-z])([A-Z])/gu, "$1-$2").toLowerCase();
const optimizedAppearDataId = "framerAppearId";
const optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);
const { schedule: microtask } = createRenderBatcher(queueMicrotask, false);
const SwitchLayoutGroupContext = reactExports.createContext({});
function useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {
  var _a2, _b2;
  const { visualElement: parent } = reactExports.useContext(MotionContext);
  const lazyContext = reactExports.useContext(LazyContext);
  const presenceContext = reactExports.useContext(PresenceContext);
  const reducedMotionConfig = reactExports.useContext(MotionConfigContext).reducedMotion;
  const visualElementRef = reactExports.useRef(null);
  createVisualElement = createVisualElement || lazyContext.renderer;
  if (!visualElementRef.current && createVisualElement) {
    visualElementRef.current = createVisualElement(Component, {
      visualState,
      parent,
      props,
      presenceContext,
      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,
      reducedMotionConfig
    });
  }
  const visualElement = visualElementRef.current;
  const initialLayoutGroupConfig = reactExports.useContext(SwitchLayoutGroupContext);
  if (visualElement && !visualElement.projection && ProjectionNodeConstructor && (visualElement.type === "html" || visualElement.type === "svg")) {
    createProjectionNode$1(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);
  }
  const isMounted = reactExports.useRef(false);
  reactExports.useInsertionEffect(() => {
    if (visualElement && isMounted.current) {
      visualElement.update(props, presenceContext);
    }
  });
  const optimisedAppearId = props[optimizedAppearDataAttribute];
  const wantsHandoff = reactExports.useRef(Boolean(optimisedAppearId) && !((_a2 = window.MotionHandoffIsComplete) === null || _a2 === void 0 ? void 0 : _a2.call(window, optimisedAppearId)) && ((_b2 = window.MotionHasOptimisedAnimation) === null || _b2 === void 0 ? void 0 : _b2.call(window, optimisedAppearId)));
  useIsomorphicLayoutEffect(() => {
    if (!visualElement)
      return;
    isMounted.current = true;
    window.MotionIsMounted = true;
    visualElement.updateFeatures();
    microtask.render(visualElement.render);
    if (wantsHandoff.current && visualElement.animationState) {
      visualElement.animationState.animateChanges();
    }
  });
  reactExports.useEffect(() => {
    if (!visualElement)
      return;
    if (!wantsHandoff.current && visualElement.animationState) {
      visualElement.animationState.animateChanges();
    }
    if (wantsHandoff.current) {
      queueMicrotask(() => {
        var _a3;
        (_a3 = window.MotionHandoffMarkAsComplete) === null || _a3 === void 0 ? void 0 : _a3.call(window, optimisedAppearId);
      });
      wantsHandoff.current = false;
    }
  });
  return visualElement;
}
function createProjectionNode$1(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {
  const { layoutId, layout: layout2, drag: drag2, dragConstraints, layoutScroll, layoutRoot } = props;
  visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props["data-framer-portal-id"] ? void 0 : getClosestProjectingNode(visualElement.parent));
  visualElement.projection.setOptions({
    layoutId,
    layout: layout2,
    alwaysMeasureLayout: Boolean(drag2) || dragConstraints && isRefObject(dragConstraints),
    visualElement,
    /**
     * TODO: Update options in an effect. This could be tricky as it'll be too late
     * to update by the time layout animations run.
     * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
     * ensuring it gets called if there's no potential layout animations.
     *
     */
    animationType: typeof layout2 === "string" ? layout2 : "both",
    initialPromotionConfig,
    layoutScroll,
    layoutRoot
  });
}
function getClosestProjectingNode(visualElement) {
  if (!visualElement)
    return void 0;
  return visualElement.options.allowProjection !== false ? visualElement.projection : getClosestProjectingNode(visualElement.parent);
}
function createRendererMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component }) {
  var _a2, _b2;
  preloadedFeatures && loadFeatures(preloadedFeatures);
  function MotionComponent(props, externalRef) {
    let MeasureLayout2;
    const configAndProps = {
      ...reactExports.useContext(MotionConfigContext),
      ...props,
      layoutId: useLayoutId(props)
    };
    const { isStatic } = configAndProps;
    const context = useCreateMotionContext(props);
    const visualState = useVisualState(props, isStatic);
    if (!isStatic && isBrowser) {
      useStrictMode();
      const layoutProjection = getProjectionFunctionality(configAndProps);
      MeasureLayout2 = layoutProjection.MeasureLayout;
      context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement, layoutProjection.ProjectionNode);
    }
    return jsxRuntimeExports.jsxs(MotionContext.Provider, { value: context, children: [MeasureLayout2 && context.visualElement ? jsxRuntimeExports.jsx(MeasureLayout2, { visualElement: context.visualElement, ...configAndProps }) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)] });
  }
  MotionComponent.displayName = `motion.${typeof Component === "string" ? Component : `create(${(_b2 = (_a2 = Component.displayName) !== null && _a2 !== void 0 ? _a2 : Component.name) !== null && _b2 !== void 0 ? _b2 : ""})`}`;
  const ForwardRefMotionComponent = reactExports.forwardRef(MotionComponent);
  ForwardRefMotionComponent[motionComponentSymbol] = Component;
  return ForwardRefMotionComponent;
}
function useLayoutId({ layoutId }) {
  const layoutGroupId = reactExports.useContext(LayoutGroupContext).id;
  return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
}
function useStrictMode(configAndProps, preloadedFeatures) {
  reactExports.useContext(LazyContext).strict;
}
function getProjectionFunctionality(props) {
  const { drag: drag2, layout: layout2 } = featureDefinitions;
  if (!drag2 && !layout2)
    return {};
  const combined = { ...drag2, ...layout2 };
  return {
    MeasureLayout: (drag2 === null || drag2 === void 0 ? void 0 : drag2.isEnabled(props)) || (layout2 === null || layout2 === void 0 ? void 0 : layout2.isEnabled(props)) ? combined.MeasureLayout : void 0,
    ProjectionNode: combined.ProjectionNode
  };
}
const lowercaseSVGElements = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "switch",
  "symbol",
  "svg",
  "text",
  "tspan",
  "use",
  "view"
];
function isSVGComponent(Component) {
  if (
    /**
     * If it's not a string, it's a custom React component. Currently we only support
     * HTML custom React components.
     */
    typeof Component !== "string" || /**
     * If it contains a dash, the element is a custom HTML webcomponent.
     */
    Component.includes("-")
  ) {
    return false;
  } else if (
    /**
     * If it's in our list of lowercase SVG tags, it's an SVG component
     */
    lowercaseSVGElements.indexOf(Component) > -1 || /**
     * If it contains a capital letter, it's an SVG component
     */
    /[A-Z]/u.test(Component)
  ) {
    return true;
  }
  return false;
}
function getValueState(visualElement) {
  const state = [{}, {}];
  visualElement === null || visualElement === void 0 ? void 0 : visualElement.values.forEach((value, key) => {
    state[0][key] = value.get();
    state[1][key] = value.getVelocity();
  });
  return state;
}
function resolveVariantFromProps(props, definition, custom, visualElement) {
  if (typeof definition === "function") {
    const [current, velocity] = getValueState(visualElement);
    definition = definition(custom !== void 0 ? custom : props.custom, current, velocity);
  }
  if (typeof definition === "string") {
    definition = props.variants && props.variants[definition];
  }
  if (typeof definition === "function") {
    const [current, velocity] = getValueState(visualElement);
    definition = definition(custom !== void 0 ? custom : props.custom, current, velocity);
  }
  return definition;
}
const isKeyframesTarget = (v2) => {
  return Array.isArray(v2);
};
const isCustomValue = (v2) => {
  return Boolean(v2 && typeof v2 === "object" && v2.mix && v2.toValue);
};
const resolveFinalValueInKeyframes = (v2) => {
  return isKeyframesTarget(v2) ? v2[v2.length - 1] || 0 : v2;
};
const isMotionValue = (value) => Boolean(value && value.getVelocity);
function resolveMotionValue(value) {
  const unwrappedValue = isMotionValue(value) ? value.get() : value;
  return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}
function makeState({ scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2, createRenderState, onUpdate }, props, context, presenceContext) {
  const state = {
    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps2),
    renderState: createRenderState()
  };
  if (onUpdate) {
    state.onMount = (instance) => onUpdate({ props, current: instance, ...state });
    state.onUpdate = (visualElement) => onUpdate(visualElement);
  }
  return state;
}
const makeUseVisualState = (config) => (props, isStatic) => {
  const context = reactExports.useContext(MotionContext);
  const presenceContext = reactExports.useContext(PresenceContext);
  const make = () => makeState(config, props, context, presenceContext);
  return isStatic ? make() : useConstant(make);
};
function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
  const values = {};
  const motionValues = scrapeMotionValues(props, {});
  for (const key in motionValues) {
    values[key] = resolveMotionValue(motionValues[key]);
  }
  let { initial, animate } = props;
  const isControllingVariants$1 = isControllingVariants(props);
  const isVariantNode$1 = isVariantNode(props);
  if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {
    if (initial === void 0)
      initial = context.initial;
    if (animate === void 0)
      animate = context.animate;
  }
  let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;
  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
  const variantToSet = isInitialAnimationBlocked ? animate : initial;
  if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
    const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
    for (let i = 0; i < list.length; i++) {
      const resolved = resolveVariantFromProps(props, list[i]);
      if (resolved) {
        const { transitionEnd, transition, ...target } = resolved;
        for (const key in target) {
          let valueTarget = target[key];
          if (Array.isArray(valueTarget)) {
            const index2 = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;
            valueTarget = valueTarget[index2];
          }
          if (valueTarget !== null) {
            values[key] = valueTarget;
          }
        }
        for (const key in transitionEnd) {
          values[key] = transitionEnd[key];
        }
      }
    }
  }
  return values;
}
const transformPropOrder = [
  "transformPerspective",
  "x",
  "y",
  "z",
  "translateX",
  "translateY",
  "translateZ",
  "scale",
  "scaleX",
  "scaleY",
  "rotate",
  "rotateX",
  "rotateY",
  "rotateZ",
  "skew",
  "skewX",
  "skewY"
];
const transformProps = new Set(transformPropOrder);
const checkStringStartsWith = (token) => (key) => typeof key === "string" && key.startsWith(token);
const isCSSVariableName = /* @__PURE__ */ checkStringStartsWith("--");
const startsAsVariableToken = /* @__PURE__ */ checkStringStartsWith("var(--");
const isCSSVariableToken = (value) => {
  const startsWithToken = startsAsVariableToken(value);
  if (!startsWithToken)
    return false;
  return singleCssVariableRegex.test(value.split("/*")[0].trim());
};
const singleCssVariableRegex = /var\(--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)$/iu;
const getValueAsType = (value, type) => {
  return type && typeof value === "number" ? type.transform(value) : value;
};
const clamp = (min, max, v2) => {
  if (v2 > max)
    return max;
  if (v2 < min)
    return min;
  return v2;
};
const number = {
  test: (v2) => typeof v2 === "number",
  parse: parseFloat,
  transform: (v2) => v2
};
const alpha$1 = {
  ...number,
  transform: (v2) => clamp(0, 1, v2)
};
const scale = {
  ...number,
  default: 1
};
const createUnitType = (unit) => ({
  test: (v2) => typeof v2 === "string" && v2.endsWith(unit) && v2.split(" ").length === 1,
  parse: parseFloat,
  transform: (v2) => `${v2}${unit}`
});
const degrees = /* @__PURE__ */ createUnitType("deg");
const percent = /* @__PURE__ */ createUnitType("%");
const px = /* @__PURE__ */ createUnitType("px");
const vh = /* @__PURE__ */ createUnitType("vh");
const vw = /* @__PURE__ */ createUnitType("vw");
const progressPercentage = {
  ...percent,
  parse: (v2) => percent.parse(v2) / 100,
  transform: (v2) => percent.transform(v2 * 100)
};
const browserNumberValueTypes = {
  // Border props
  borderWidth: px,
  borderTopWidth: px,
  borderRightWidth: px,
  borderBottomWidth: px,
  borderLeftWidth: px,
  borderRadius: px,
  radius: px,
  borderTopLeftRadius: px,
  borderTopRightRadius: px,
  borderBottomRightRadius: px,
  borderBottomLeftRadius: px,
  // Positioning props
  width: px,
  maxWidth: px,
  height: px,
  maxHeight: px,
  top: px,
  right: px,
  bottom: px,
  left: px,
  // Spacing props
  padding: px,
  paddingTop: px,
  paddingRight: px,
  paddingBottom: px,
  paddingLeft: px,
  margin: px,
  marginTop: px,
  marginRight: px,
  marginBottom: px,
  marginLeft: px,
  // Misc
  backgroundPositionX: px,
  backgroundPositionY: px
};
const transformValueTypes = {
  rotate: degrees,
  rotateX: degrees,
  rotateY: degrees,
  rotateZ: degrees,
  scale,
  scaleX: scale,
  scaleY: scale,
  scaleZ: scale,
  skew: degrees,
  skewX: degrees,
  skewY: degrees,
  distance: px,
  translateX: px,
  translateY: px,
  translateZ: px,
  x: px,
  y: px,
  z: px,
  perspective: px,
  transformPerspective: px,
  opacity: alpha$1,
  originX: progressPercentage,
  originY: progressPercentage,
  originZ: px
};
const int = {
  ...number,
  transform: Math.round
};
const numberValueTypes = {
  ...browserNumberValueTypes,
  ...transformValueTypes,
  zIndex: int,
  size: px,
  // SVG
  fillOpacity: alpha$1,
  strokeOpacity: alpha$1,
  numOctaves: int
};
const translateAlias = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective"
};
const numTransforms = transformPropOrder.length;
function buildTransform(latestValues, transform, transformTemplate) {
  let transformString = "";
  let transformIsDefault = true;
  for (let i = 0; i < numTransforms; i++) {
    const key = transformPropOrder[i];
    const value = latestValues[key];
    if (value === void 0)
      continue;
    let valueIsDefault = true;
    if (typeof value === "number") {
      valueIsDefault = value === (key.startsWith("scale") ? 1 : 0);
    } else {
      valueIsDefault = parseFloat(value) === 0;
    }
    if (!valueIsDefault || transformTemplate) {
      const valueAsType = getValueAsType(value, numberValueTypes[key]);
      if (!valueIsDefault) {
        transformIsDefault = false;
        const transformName = translateAlias[key] || key;
        transformString += `${transformName}(${valueAsType}) `;
      }
      if (transformTemplate) {
        transform[key] = valueAsType;
      }
    }
  }
  transformString = transformString.trim();
  if (transformTemplate) {
    transformString = transformTemplate(transform, transformIsDefault ? "" : transformString);
  } else if (transformIsDefault) {
    transformString = "none";
  }
  return transformString;
}
function buildHTMLStyles(state, latestValues, transformTemplate) {
  const { style, vars, transformOrigin } = state;
  let hasTransform2 = false;
  let hasTransformOrigin = false;
  for (const key in latestValues) {
    const value = latestValues[key];
    if (transformProps.has(key)) {
      hasTransform2 = true;
      continue;
    } else if (isCSSVariableName(key)) {
      vars[key] = value;
      continue;
    } else {
      const valueAsType = getValueAsType(value, numberValueTypes[key]);
      if (key.startsWith("origin")) {
        hasTransformOrigin = true;
        transformOrigin[key] = valueAsType;
      } else {
        style[key] = valueAsType;
      }
    }
  }
  if (!latestValues.transform) {
    if (hasTransform2 || transformTemplate) {
      style.transform = buildTransform(latestValues, state.transform, transformTemplate);
    } else if (style.transform) {
      style.transform = "none";
    }
  }
  if (hasTransformOrigin) {
    const { originX = "50%", originY = "50%", originZ = 0 } = transformOrigin;
    style.transformOrigin = `${originX} ${originY} ${originZ}`;
  }
}
const dashKeys = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray"
};
const camelKeys = {
  offset: "strokeDashoffset",
  array: "strokeDasharray"
};
function buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {
  attrs.pathLength = 1;
  const keys = useDashCase ? dashKeys : camelKeys;
  attrs[keys.offset] = px.transform(-offset);
  const pathLength = px.transform(length);
  const pathSpacing = px.transform(spacing);
  attrs[keys.array] = `${pathLength} ${pathSpacing}`;
}
function calcOrigin$1(origin, offset, size) {
  return typeof origin === "string" ? origin : px.transform(offset + size * origin);
}
function calcSVGTransformOrigin(dimensions, originX, originY) {
  const pxOriginX = calcOrigin$1(originX, dimensions.x, dimensions.width);
  const pxOriginY = calcOrigin$1(originY, dimensions.y, dimensions.height);
  return `${pxOriginX} ${pxOriginY}`;
}
function buildSVGAttrs(state, {
  attrX,
  attrY,
  attrScale,
  originX,
  originY,
  pathLength,
  pathSpacing = 1,
  pathOffset = 0,
  // This is object creation, which we try to avoid per-frame.
  ...latest
}, isSVGTag2, transformTemplate) {
  buildHTMLStyles(state, latest, transformTemplate);
  if (isSVGTag2) {
    if (state.style.viewBox) {
      state.attrs.viewBox = state.style.viewBox;
    }
    return;
  }
  state.attrs = state.style;
  state.style = {};
  const { attrs, style, dimensions } = state;
  if (attrs.transform) {
    if (dimensions)
      style.transform = attrs.transform;
    delete attrs.transform;
  }
  if (dimensions && (originX !== void 0 || originY !== void 0 || style.transform)) {
    style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
  }
  if (attrX !== void 0)
    attrs.x = attrX;
  if (attrY !== void 0)
    attrs.y = attrY;
  if (attrScale !== void 0)
    attrs.scale = attrScale;
  if (pathLength !== void 0) {
    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
  }
}
const createHtmlRenderState = () => ({
  style: {},
  transform: {},
  transformOrigin: {},
  vars: {}
});
const createSvgRenderState = () => ({
  ...createHtmlRenderState(),
  attrs: {}
});
const isSVGTag = (tag) => typeof tag === "string" && tag.toLowerCase() === "svg";
function renderHTML(element, { style, vars }, styleProp, projection) {
  Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
  for (const key in vars) {
    element.style.setProperty(key, vars[key]);
  }
}
const camelCaseAttributes = /* @__PURE__ */ new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform",
  "pathLength",
  "startOffset",
  "textLength",
  "lengthAdjust"
]);
function renderSVG(element, renderState, _styleProp, projection) {
  renderHTML(element, renderState, void 0, projection);
  for (const key in renderState.attrs) {
    element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
  }
}
const scaleCorrectors = {};
function addScaleCorrector(correctors) {
  Object.assign(scaleCorrectors, correctors);
}
function isForcedMotionValue(key, { layout: layout2, layoutId }) {
  return transformProps.has(key) || key.startsWith("origin") || (layout2 || layoutId !== void 0) && (!!scaleCorrectors[key] || key === "opacity");
}
function scrapeMotionValuesFromProps$1(props, prevProps, visualElement) {
  var _a2;
  const { style } = props;
  const newValues = {};
  for (const key in style) {
    if (isMotionValue(style[key]) || prevProps.style && isMotionValue(prevProps.style[key]) || isForcedMotionValue(key, props) || ((_a2 = visualElement === null || visualElement === void 0 ? void 0 : visualElement.getValue(key)) === null || _a2 === void 0 ? void 0 : _a2.liveStyle) !== void 0) {
      newValues[key] = style[key];
    }
  }
  return newValues;
}
function scrapeMotionValuesFromProps(props, prevProps, visualElement) {
  const newValues = scrapeMotionValuesFromProps$1(props, prevProps, visualElement);
  for (const key in props) {
    if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {
      const targetKey = transformPropOrder.indexOf(key) !== -1 ? "attr" + key.charAt(0).toUpperCase() + key.substring(1) : key;
      newValues[targetKey] = props[key];
    }
  }
  return newValues;
}
function updateSVGDimensions(instance, renderState) {
  try {
    renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
  } catch (e) {
    renderState.dimensions = {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    };
  }
}
const layoutProps = ["x", "y", "width", "height", "cx", "cy", "r"];
const svgMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps,
    createRenderState: createSvgRenderState,
    onUpdate: ({ props, prevProps, current, renderState, latestValues }) => {
      if (!current)
        return;
      let hasTransform2 = !!props.drag;
      if (!hasTransform2) {
        for (const key in latestValues) {
          if (transformProps.has(key)) {
            hasTransform2 = true;
            break;
          }
        }
      }
      if (!hasTransform2)
        return;
      let needsMeasure = !prevProps;
      if (prevProps) {
        for (let i = 0; i < layoutProps.length; i++) {
          const key = layoutProps[i];
          if (props[key] !== prevProps[key]) {
            needsMeasure = true;
          }
        }
      }
      if (!needsMeasure)
        return;
      frame.read(() => {
        updateSVGDimensions(current, renderState);
        frame.render(() => {
          buildSVGAttrs(renderState, latestValues, isSVGTag(current.tagName), props.transformTemplate);
          renderSVG(current, renderState);
        });
      });
    }
  })
};
const htmlMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,
    createRenderState: createHtmlRenderState
  })
};
function copyRawValuesOnly(target, source, props) {
  for (const key in source) {
    if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
      target[key] = source[key];
    }
  }
}
function useInitialMotionValues({ transformTemplate }, visualState) {
  return reactExports.useMemo(() => {
    const state = createHtmlRenderState();
    buildHTMLStyles(state, visualState, transformTemplate);
    return Object.assign({}, state.vars, state.style);
  }, [visualState]);
}
function useStyle(props, visualState) {
  const styleProp = props.style || {};
  const style = {};
  copyRawValuesOnly(style, styleProp, props);
  Object.assign(style, useInitialMotionValues(props, visualState));
  return style;
}
function useHTMLProps(props, visualState) {
  const htmlProps = {};
  const style = useStyle(props, visualState);
  if (props.drag && props.dragListener !== false) {
    htmlProps.draggable = false;
    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
    style.touchAction = props.drag === true ? "none" : `pan-${props.drag === "x" ? "y" : "x"}`;
  }
  if (props.tabIndex === void 0 && (props.onTap || props.onTapStart || props.whileTap)) {
    htmlProps.tabIndex = 0;
  }
  htmlProps.style = style;
  return htmlProps;
}
function useSVGProps(props, visualState, _isStatic, Component) {
  const visualProps = reactExports.useMemo(() => {
    const state = createSvgRenderState();
    buildSVGAttrs(state, visualState, isSVGTag(Component), props.transformTemplate);
    return {
      ...state.attrs,
      style: { ...state.style }
    };
  }, [visualState]);
  if (props.style) {
    const rawStyles = {};
    copyRawValuesOnly(rawStyles, props.style, props);
    visualProps.style = { ...rawStyles, ...visualProps.style };
  }
  return visualProps;
}
function createUseRender(forwardMotionProps = false) {
  const useRender = (Component, props, ref, { latestValues }, isStatic) => {
    const useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;
    const visualProps = useVisualProps(props, latestValues, isStatic, Component);
    const filteredProps = filterProps(props, typeof Component === "string", forwardMotionProps);
    const elementProps = Component !== reactExports.Fragment ? { ...filteredProps, ...visualProps, ref } : {};
    const { children } = props;
    const renderedChildren = reactExports.useMemo(() => isMotionValue(children) ? children.get() : children, [children]);
    return reactExports.createElement(Component, {
      ...elementProps,
      children: renderedChildren
    });
  };
  return useRender;
}
function createMotionComponentFactory(preloadedFeatures, createVisualElement) {
  return function createMotionComponent2(Component, { forwardMotionProps } = { forwardMotionProps: false }) {
    const baseConfig = isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig;
    const config = {
      ...baseConfig,
      preloadedFeatures,
      useRender: createUseRender(forwardMotionProps),
      createVisualElement,
      Component
    };
    return createRendererMotionComponent(config);
  };
}
function shallowCompare(next, prev) {
  if (!Array.isArray(prev))
    return false;
  const prevLength = prev.length;
  if (prevLength !== next.length)
    return false;
  for (let i = 0; i < prevLength; i++) {
    if (prev[i] !== next[i])
      return false;
  }
  return true;
}
function resolveVariant(visualElement, definition, custom) {
  const props = visualElement.getProps();
  return resolveVariantFromProps(props, definition, custom !== void 0 ? custom : props.custom, visualElement);
}
const supportsScrollTimeline = /* @__PURE__ */ memo(() => window.ScrollTimeline !== void 0);
class BaseGroupPlaybackControls {
  constructor(animations2) {
    this.stop = () => this.runAll("stop");
    this.animations = animations2.filter(Boolean);
  }
  get finished() {
    return Promise.all(this.animations.map((animation) => "finished" in animation ? animation.finished : animation));
  }
  /**
   * TODO: Filter out cancelled or stopped animations before returning
   */
  getAll(propName) {
    return this.animations[0][propName];
  }
  setAll(propName, newValue) {
    for (let i = 0; i < this.animations.length; i++) {
      this.animations[i][propName] = newValue;
    }
  }
  attachTimeline(timeline, fallback) {
    const subscriptions = this.animations.map((animation) => {
      if (supportsScrollTimeline() && animation.attachTimeline) {
        return animation.attachTimeline(timeline);
      } else if (typeof fallback === "function") {
        return fallback(animation);
      }
    });
    return () => {
      subscriptions.forEach((cancel, i) => {
        cancel && cancel();
        this.animations[i].stop();
      });
    };
  }
  get time() {
    return this.getAll("time");
  }
  set time(time2) {
    this.setAll("time", time2);
  }
  get speed() {
    return this.getAll("speed");
  }
  set speed(speed) {
    this.setAll("speed", speed);
  }
  get startTime() {
    return this.getAll("startTime");
  }
  get duration() {
    let max = 0;
    for (let i = 0; i < this.animations.length; i++) {
      max = Math.max(max, this.animations[i].duration);
    }
    return max;
  }
  runAll(methodName) {
    this.animations.forEach((controls) => controls[methodName]());
  }
  flatten() {
    this.runAll("flatten");
  }
  play() {
    this.runAll("play");
  }
  pause() {
    this.runAll("pause");
  }
  cancel() {
    this.runAll("cancel");
  }
  complete() {
    this.runAll("complete");
  }
}
class GroupPlaybackControls extends BaseGroupPlaybackControls {
  then(onResolve, onReject) {
    return Promise.all(this.animations).then(onResolve).catch(onReject);
  }
}
function getValueTransition(transition, key) {
  return transition ? transition[key] || transition["default"] || transition : void 0;
}
const maxGeneratorDuration = 2e4;
function calcGeneratorDuration(generator) {
  let duration = 0;
  const timeStep = 50;
  let state = generator.next(duration);
  while (!state.done && duration < maxGeneratorDuration) {
    duration += timeStep;
    state = generator.next(duration);
  }
  return duration >= maxGeneratorDuration ? Infinity : duration;
}
function isGenerator(type) {
  return typeof type === "function";
}
function attachTimeline(animation, timeline) {
  animation.timeline = timeline;
  animation.onfinish = null;
}
const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === "number";
const supportsFlags = {
  linearEasing: void 0
};
function memoSupports(callback2, supportsFlag) {
  const memoized = /* @__PURE__ */ memo(callback2);
  return () => {
    var _a2;
    return (_a2 = supportsFlags[supportsFlag]) !== null && _a2 !== void 0 ? _a2 : memoized();
  };
}
const supportsLinearEasing = /* @__PURE__ */ memoSupports(() => {
  try {
    document.createElement("div").animate({ opacity: 0 }, { easing: "linear(0, 1)" });
  } catch (e) {
    return false;
  }
  return true;
}, "linearEasing");
const generateLinearEasing = (easing, duration, resolution = 10) => {
  let points = "";
  const numPoints = Math.max(Math.round(duration / resolution), 2);
  for (let i = 0; i < numPoints; i++) {
    points += easing(/* @__PURE__ */ progress(0, numPoints - 1, i)) + ", ";
  }
  return `linear(${points.substring(0, points.length - 2)})`;
};
function isWaapiSupportedEasing(easing) {
  return Boolean(typeof easing === "function" && supportsLinearEasing() || !easing || typeof easing === "string" && (easing in supportedWaapiEasing || supportsLinearEasing()) || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));
}
const cubicBezierAsString = ([a, b2, c2, d2]) => `cubic-bezier(${a}, ${b2}, ${c2}, ${d2})`;
const supportedWaapiEasing = {
  linear: "linear",
  ease: "ease",
  easeIn: "ease-in",
  easeOut: "ease-out",
  easeInOut: "ease-in-out",
  circIn: /* @__PURE__ */ cubicBezierAsString([0, 0.65, 0.55, 1]),
  circOut: /* @__PURE__ */ cubicBezierAsString([0.55, 0, 1, 0.45]),
  backIn: /* @__PURE__ */ cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
  backOut: /* @__PURE__ */ cubicBezierAsString([0.33, 1.53, 0.69, 0.99])
};
function mapEasingToNativeEasing(easing, duration) {
  if (!easing) {
    return void 0;
  } else if (typeof easing === "function" && supportsLinearEasing()) {
    return generateLinearEasing(easing, duration);
  } else if (isBezierDefinition(easing)) {
    return cubicBezierAsString(easing);
  } else if (Array.isArray(easing)) {
    return easing.map((segmentEasing) => mapEasingToNativeEasing(segmentEasing, duration) || supportedWaapiEasing.easeOut);
  } else {
    return supportedWaapiEasing[easing];
  }
}
const isDragging = {
  x: false,
  y: false
};
function isDragActive() {
  return isDragging.x || isDragging.y;
}
function resolveElements(elementOrSelector, scope, selectorCache) {
  var _a2;
  if (elementOrSelector instanceof Element) {
    return [elementOrSelector];
  } else if (typeof elementOrSelector === "string") {
    let root = document;
    const elements = (_a2 = void 0) !== null && _a2 !== void 0 ? _a2 : root.querySelectorAll(elementOrSelector);
    return elements ? Array.from(elements) : [];
  }
  return Array.from(elementOrSelector);
}
function setupGesture(elementOrSelector, options) {
  const elements = resolveElements(elementOrSelector);
  const gestureAbortController = new AbortController();
  const eventOptions = {
    passive: true,
    ...options,
    signal: gestureAbortController.signal
  };
  const cancel = () => gestureAbortController.abort();
  return [elements, eventOptions, cancel];
}
function filterEvents$1(callback2) {
  return (event) => {
    if (event.pointerType === "touch" || isDragActive())
      return;
    callback2(event);
  };
}
function hover(elementOrSelector, onHoverStart, options = {}) {
  const [elements, eventOptions, cancel] = setupGesture(elementOrSelector, options);
  const onPointerEnter = filterEvents$1((enterEvent) => {
    const { target } = enterEvent;
    const onHoverEnd = onHoverStart(enterEvent);
    if (typeof onHoverEnd !== "function" || !target)
      return;
    const onPointerLeave = filterEvents$1((leaveEvent) => {
      onHoverEnd(leaveEvent);
      target.removeEventListener("pointerleave", onPointerLeave);
    });
    target.addEventListener("pointerleave", onPointerLeave, eventOptions);
  });
  elements.forEach((element) => {
    element.addEventListener("pointerenter", onPointerEnter, eventOptions);
  });
  return cancel;
}
const isNodeOrChild = (parent, child) => {
  if (!child) {
    return false;
  } else if (parent === child) {
    return true;
  } else {
    return isNodeOrChild(parent, child.parentElement);
  }
};
const isPrimaryPointer = (event) => {
  if (event.pointerType === "mouse") {
    return typeof event.button !== "number" || event.button <= 0;
  } else {
    return event.isPrimary !== false;
  }
};
const focusableElements = /* @__PURE__ */ new Set([
  "BUTTON",
  "INPUT",
  "SELECT",
  "TEXTAREA",
  "A"
]);
function isElementKeyboardAccessible(element) {
  return focusableElements.has(element.tagName) || element.tabIndex !== -1;
}
const isPressing = /* @__PURE__ */ new WeakSet();
function filterEvents(callback2) {
  return (event) => {
    if (event.key !== "Enter")
      return;
    callback2(event);
  };
}
function firePointerEvent(target, type) {
  target.dispatchEvent(new PointerEvent("pointer" + type, { isPrimary: true, bubbles: true }));
}
const enableKeyboardPress = (focusEvent, eventOptions) => {
  const element = focusEvent.currentTarget;
  if (!element)
    return;
  const handleKeydown = filterEvents(() => {
    if (isPressing.has(element))
      return;
    firePointerEvent(element, "down");
    const handleKeyup = filterEvents(() => {
      firePointerEvent(element, "up");
    });
    const handleBlur = () => firePointerEvent(element, "cancel");
    element.addEventListener("keyup", handleKeyup, eventOptions);
    element.addEventListener("blur", handleBlur, eventOptions);
  });
  element.addEventListener("keydown", handleKeydown, eventOptions);
  element.addEventListener("blur", () => element.removeEventListener("keydown", handleKeydown), eventOptions);
};
function isValidPressEvent(event) {
  return isPrimaryPointer(event) && !isDragActive();
}
function press(elementOrSelector, onPressStart, options = {}) {
  const [elements, eventOptions, cancelEvents] = setupGesture(elementOrSelector, options);
  const startPress = (startEvent) => {
    const element = startEvent.currentTarget;
    if (!isValidPressEvent(startEvent) || isPressing.has(element))
      return;
    isPressing.add(element);
    const onPressEnd = onPressStart(startEvent);
    const onPointerEnd = (endEvent, success) => {
      window.removeEventListener("pointerup", onPointerUp);
      window.removeEventListener("pointercancel", onPointerCancel);
      if (!isValidPressEvent(endEvent) || !isPressing.has(element)) {
        return;
      }
      isPressing.delete(element);
      if (typeof onPressEnd === "function") {
        onPressEnd(endEvent, { success });
      }
    };
    const onPointerUp = (upEvent) => {
      onPointerEnd(upEvent, options.useGlobalTarget || isNodeOrChild(element, upEvent.target));
    };
    const onPointerCancel = (cancelEvent) => {
      onPointerEnd(cancelEvent, false);
    };
    window.addEventListener("pointerup", onPointerUp, eventOptions);
    window.addEventListener("pointercancel", onPointerCancel, eventOptions);
  };
  elements.forEach((element) => {
    if (!isElementKeyboardAccessible(element) && element.getAttribute("tabindex") === null) {
      element.tabIndex = 0;
    }
    const target = options.useGlobalTarget ? window : element;
    target.addEventListener("pointerdown", startPress, eventOptions);
    element.addEventListener("focus", (event) => enableKeyboardPress(event, eventOptions), eventOptions);
  });
  return cancelEvents;
}
function setDragLock(axis) {
  if (axis === "x" || axis === "y") {
    if (isDragging[axis]) {
      return null;
    } else {
      isDragging[axis] = true;
      return () => {
        isDragging[axis] = false;
      };
    }
  } else {
    if (isDragging.x || isDragging.y) {
      return null;
    } else {
      isDragging.x = isDragging.y = true;
      return () => {
        isDragging.x = isDragging.y = false;
      };
    }
  }
}
const positionalKeys = /* @__PURE__ */ new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  ...transformPropOrder
]);
let now;
function clearTime() {
  now = void 0;
}
const time = {
  now: () => {
    if (now === void 0) {
      time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming ? frameData.timestamp : performance.now());
    }
    return now;
  },
  set: (newTime) => {
    now = newTime;
    queueMicrotask(clearTime);
  }
};
function addUniqueItem(arr, item) {
  if (arr.indexOf(item) === -1)
    arr.push(item);
}
function removeItem(arr, item) {
  const index2 = arr.indexOf(item);
  if (index2 > -1)
    arr.splice(index2, 1);
}
class SubscriptionManager {
  constructor() {
    this.subscriptions = [];
  }
  add(handler) {
    addUniqueItem(this.subscriptions, handler);
    return () => removeItem(this.subscriptions, handler);
  }
  notify(a, b2, c2) {
    const numSubscriptions = this.subscriptions.length;
    if (!numSubscriptions)
      return;
    if (numSubscriptions === 1) {
      this.subscriptions[0](a, b2, c2);
    } else {
      for (let i = 0; i < numSubscriptions; i++) {
        const handler = this.subscriptions[i];
        handler && handler(a, b2, c2);
      }
    }
  }
  getSize() {
    return this.subscriptions.length;
  }
  clear() {
    this.subscriptions.length = 0;
  }
}
function velocityPerSecond(velocity, frameDuration) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}
const MAX_VELOCITY_DELTA = 30;
const isFloat = (value) => {
  return !isNaN(parseFloat(value));
};
class MotionValue {
  /**
   * @param init - The initiating value
   * @param config - Optional configuration options
   *
   * -  `transformer`: A function to transform incoming values with.
   *
   * @internal
   */
  constructor(init, options = {}) {
    this.version = "11.18.2";
    this.canTrackVelocity = null;
    this.events = {};
    this.updateAndNotify = (v2, render = true) => {
      const currentTime = time.now();
      if (this.updatedAt !== currentTime) {
        this.setPrevFrameValue();
      }
      this.prev = this.current;
      this.setCurrent(v2);
      if (this.current !== this.prev && this.events.change) {
        this.events.change.notify(this.current);
      }
      if (render && this.events.renderRequest) {
        this.events.renderRequest.notify(this.current);
      }
    };
    this.hasAnimated = false;
    this.setCurrent(init);
    this.owner = options.owner;
  }
  setCurrent(current) {
    this.current = current;
    this.updatedAt = time.now();
    if (this.canTrackVelocity === null && current !== void 0) {
      this.canTrackVelocity = isFloat(this.current);
    }
  }
  setPrevFrameValue(prevFrameValue = this.current) {
    this.prevFrameValue = prevFrameValue;
    this.prevUpdatedAt = this.updatedAt;
  }
  /**
   * Adds a function that will be notified when the `MotionValue` is updated.
   *
   * It returns a function that, when called, will cancel the subscription.
   *
   * When calling `onChange` inside a React component, it should be wrapped with the
   * `useEffect` hook. As it returns an unsubscribe function, this should be returned
   * from the `useEffect` function to ensure you don't add duplicate subscribers..
   *
   * ```jsx
   * export const MyComponent = () => {
   *   const x = useMotionValue(0)
   *   const y = useMotionValue(0)
   *   const opacity = useMotionValue(1)
   *
   *   useEffect(() => {
   *     function updateOpacity() {
   *       const maxXY = Math.max(x.get(), y.get())
   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
   *       opacity.set(newOpacity)
   *     }
   *
   *     const unsubscribeX = x.on("change", updateOpacity)
   *     const unsubscribeY = y.on("change", updateOpacity)
   *
   *     return () => {
   *       unsubscribeX()
   *       unsubscribeY()
   *     }
   *   }, [])
   *
   *   return <motion.div style={{ x }} />
   * }
   * ```
   *
   * @param subscriber - A function that receives the latest value.
   * @returns A function that, when called, will cancel this subscription.
   *
   * @deprecated
   */
  onChange(subscription) {
    return this.on("change", subscription);
  }
  on(eventName, callback2) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    const unsubscribe = this.events[eventName].add(callback2);
    if (eventName === "change") {
      return () => {
        unsubscribe();
        frame.read(() => {
          if (!this.events.change.getSize()) {
            this.stop();
          }
        });
      };
    }
    return unsubscribe;
  }
  clearListeners() {
    for (const eventManagers in this.events) {
      this.events[eventManagers].clear();
    }
  }
  /**
   * Attaches a passive effect to the `MotionValue`.
   *
   * @internal
   */
  attach(passiveEffect, stopPassiveEffect) {
    this.passiveEffect = passiveEffect;
    this.stopPassiveEffect = stopPassiveEffect;
  }
  /**
   * Sets the state of the `MotionValue`.
   *
   * @remarks
   *
   * ```jsx
   * const x = useMotionValue(0)
   * x.set(10)
   * ```
   *
   * @param latest - Latest value to set.
   * @param render - Whether to notify render subscribers. Defaults to `true`
   *
   * @public
   */
  set(v2, render = true) {
    if (!render || !this.passiveEffect) {
      this.updateAndNotify(v2, render);
    } else {
      this.passiveEffect(v2, this.updateAndNotify);
    }
  }
  setWithVelocity(prev, current, delta) {
    this.set(current);
    this.prev = void 0;
    this.prevFrameValue = prev;
    this.prevUpdatedAt = this.updatedAt - delta;
  }
  /**
   * Set the state of the `MotionValue`, stopping any active animations,
   * effects, and resets velocity to `0`.
   */
  jump(v2, endAnimation = true) {
    this.updateAndNotify(v2);
    this.prev = v2;
    this.prevUpdatedAt = this.prevFrameValue = void 0;
    endAnimation && this.stop();
    if (this.stopPassiveEffect)
      this.stopPassiveEffect();
  }
  /**
   * Returns the latest state of `MotionValue`
   *
   * @returns - The latest state of `MotionValue`
   *
   * @public
   */
  get() {
    return this.current;
  }
  /**
   * @public
   */
  getPrevious() {
    return this.prev;
  }
  /**
   * Returns the latest velocity of `MotionValue`
   *
   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
   *
   * @public
   */
  getVelocity() {
    const currentTime = time.now();
    if (!this.canTrackVelocity || this.prevFrameValue === void 0 || currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {
      return 0;
    }
    const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);
    return velocityPerSecond(parseFloat(this.current) - parseFloat(this.prevFrameValue), delta);
  }
  /**
   * Registers a new animation to control this `MotionValue`. Only one
   * animation can drive a `MotionValue` at one time.
   *
   * ```jsx
   * value.start()
   * ```
   *
   * @param animation - A function that starts the provided animation
   *
   * @internal
   */
  start(startAnimation) {
    this.stop();
    return new Promise((resolve2) => {
      this.hasAnimated = true;
      this.animation = startAnimation(resolve2);
      if (this.events.animationStart) {
        this.events.animationStart.notify();
      }
    }).then(() => {
      if (this.events.animationComplete) {
        this.events.animationComplete.notify();
      }
      this.clearAnimation();
    });
  }
  /**
   * Stop the currently active animation.
   *
   * @public
   */
  stop() {
    if (this.animation) {
      this.animation.stop();
      if (this.events.animationCancel) {
        this.events.animationCancel.notify();
      }
    }
    this.clearAnimation();
  }
  /**
   * Returns `true` if this value is currently animating.
   *
   * @public
   */
  isAnimating() {
    return !!this.animation;
  }
  clearAnimation() {
    delete this.animation;
  }
  /**
   * Destroy and clean up subscribers to this `MotionValue`.
   *
   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
   * created a `MotionValue` via the `motionValue` function.
   *
   * @public
   */
  destroy() {
    this.clearListeners();
    this.stop();
    if (this.stopPassiveEffect) {
      this.stopPassiveEffect();
    }
  }
}
function motionValue(init, options) {
  return new MotionValue(init, options);
}
function setMotionValue(visualElement, key, value) {
  if (visualElement.hasValue(key)) {
    visualElement.getValue(key).set(value);
  } else {
    visualElement.addValue(key, motionValue(value));
  }
}
function setTarget(visualElement, definition) {
  const resolved = resolveVariant(visualElement, definition);
  let { transitionEnd = {}, transition = {}, ...target } = resolved || {};
  target = { ...target, ...transitionEnd };
  for (const key in target) {
    const value = resolveFinalValueInKeyframes(target[key]);
    setMotionValue(visualElement, key, value);
  }
}
function isWillChangeMotionValue(value) {
  return Boolean(isMotionValue(value) && value.add);
}
function addValueToWillChange(visualElement, key) {
  const willChange = visualElement.getValue("willChange");
  if (isWillChangeMotionValue(willChange)) {
    return willChange.add(key);
  }
}
function getOptimisedAppearId(visualElement) {
  return visualElement.props[optimizedAppearDataAttribute];
}
const calcBezier = (t2, a1, a2) => (((1 - 3 * a2 + 3 * a1) * t2 + (3 * a2 - 6 * a1)) * t2 + 3 * a1) * t2;
const subdivisionPrecision = 1e-7;
const subdivisionMaxIterations = 12;
function binarySubdivide(x2, lowerBound, upperBound, mX1, mX2) {
  let currentX;
  let currentT;
  let i = 0;
  do {
    currentT = lowerBound + (upperBound - lowerBound) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - x2;
    if (currentX > 0) {
      upperBound = currentT;
    } else {
      lowerBound = currentT;
    }
  } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
  return currentT;
}
function cubicBezier(mX1, mY1, mX2, mY2) {
  if (mX1 === mY1 && mX2 === mY2)
    return noop$1;
  const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
  return (t2) => t2 === 0 || t2 === 1 ? t2 : calcBezier(getTForX(t2), mY1, mY2);
}
const mirrorEasing = (easing) => (p2) => p2 <= 0.5 ? easing(2 * p2) / 2 : (2 - easing(2 * (1 - p2))) / 2;
const reverseEasing = (easing) => (p2) => 1 - easing(1 - p2);
const backOut = /* @__PURE__ */ cubicBezier(0.33, 1.53, 0.69, 0.99);
const backIn = /* @__PURE__ */ reverseEasing(backOut);
const backInOut = /* @__PURE__ */ mirrorEasing(backIn);
const anticipate = (p2) => (p2 *= 2) < 1 ? 0.5 * backIn(p2) : 0.5 * (2 - Math.pow(2, -10 * (p2 - 1)));
const circIn = (p2) => 1 - Math.sin(Math.acos(p2));
const circOut = reverseEasing(circIn);
const circInOut = mirrorEasing(circIn);
const isZeroValueString = (v2) => /^0[^.\s]+$/u.test(v2);
function isNone(value) {
  if (typeof value === "number") {
    return value === 0;
  } else if (value !== null) {
    return value === "none" || value === "0" || isZeroValueString(value);
  } else {
    return true;
  }
}
const sanitize = (v2) => Math.round(v2 * 1e5) / 1e5;
const floatRegex = /-?(?:\d+(?:\.\d+)?|\.\d+)/gu;
function isNullish(v2) {
  return v2 == null;
}
const singleColorRegex = /^(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))$/iu;
const isColorString = (type, testProp) => (v2) => {
  return Boolean(typeof v2 === "string" && singleColorRegex.test(v2) && v2.startsWith(type) || testProp && !isNullish(v2) && Object.prototype.hasOwnProperty.call(v2, testProp));
};
const splitColor = (aName, bName, cName) => (v2) => {
  if (typeof v2 !== "string")
    return v2;
  const [a, b2, c2, alpha2] = v2.match(floatRegex);
  return {
    [aName]: parseFloat(a),
    [bName]: parseFloat(b2),
    [cName]: parseFloat(c2),
    alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
  };
};
const clampRgbUnit = (v2) => clamp(0, 255, v2);
const rgbUnit = {
  ...number,
  transform: (v2) => Math.round(clampRgbUnit(v2))
};
const rgba = {
  test: /* @__PURE__ */ isColorString("rgb", "red"),
  parse: /* @__PURE__ */ splitColor("red", "green", "blue"),
  transform: ({ red, green, blue, alpha: alpha$1$1 = 1 }) => "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha$1.transform(alpha$1$1)) + ")"
};
function parseHex(v2) {
  let r2 = "";
  let g2 = "";
  let b2 = "";
  let a = "";
  if (v2.length > 5) {
    r2 = v2.substring(1, 3);
    g2 = v2.substring(3, 5);
    b2 = v2.substring(5, 7);
    a = v2.substring(7, 9);
  } else {
    r2 = v2.substring(1, 2);
    g2 = v2.substring(2, 3);
    b2 = v2.substring(3, 4);
    a = v2.substring(4, 5);
    r2 += r2;
    g2 += g2;
    b2 += b2;
    a += a;
  }
  return {
    red: parseInt(r2, 16),
    green: parseInt(g2, 16),
    blue: parseInt(b2, 16),
    alpha: a ? parseInt(a, 16) / 255 : 1
  };
}
const hex$1 = {
  test: /* @__PURE__ */ isColorString("#"),
  parse: parseHex,
  transform: rgba.transform
};
const hsla = {
  test: /* @__PURE__ */ isColorString("hsl", "hue"),
  parse: /* @__PURE__ */ splitColor("hue", "saturation", "lightness"),
  transform: ({ hue: hue2, saturation, lightness, alpha: alpha$1$1 = 1 }) => {
    return "hsla(" + Math.round(hue2) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha$1.transform(alpha$1$1)) + ")";
  }
};
const color$1 = {
  test: (v2) => rgba.test(v2) || hex$1.test(v2) || hsla.test(v2),
  parse: (v2) => {
    if (rgba.test(v2)) {
      return rgba.parse(v2);
    } else if (hsla.test(v2)) {
      return hsla.parse(v2);
    } else {
      return hex$1.parse(v2);
    }
  },
  transform: (v2) => {
    return typeof v2 === "string" ? v2 : v2.hasOwnProperty("red") ? rgba.transform(v2) : hsla.transform(v2);
  }
};
const colorRegex = /(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))/giu;
function test(v2) {
  var _a2, _b2;
  return isNaN(v2) && typeof v2 === "string" && (((_a2 = v2.match(floatRegex)) === null || _a2 === void 0 ? void 0 : _a2.length) || 0) + (((_b2 = v2.match(colorRegex)) === null || _b2 === void 0 ? void 0 : _b2.length) || 0) > 0;
}
const NUMBER_TOKEN = "number";
const COLOR_TOKEN = "color";
const VAR_TOKEN = "var";
const VAR_FUNCTION_TOKEN = "var(";
const SPLIT_TOKEN = "${}";
const complexRegex = /var\s*\(\s*--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)|#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\)|-?(?:\d+(?:\.\d+)?|\.\d+)/giu;
function analyseComplexValue(value) {
  const originalValue = value.toString();
  const values = [];
  const indexes = {
    color: [],
    number: [],
    var: []
  };
  const types = [];
  let i = 0;
  const tokenised = originalValue.replace(complexRegex, (parsedValue) => {
    if (color$1.test(parsedValue)) {
      indexes.color.push(i);
      types.push(COLOR_TOKEN);
      values.push(color$1.parse(parsedValue));
    } else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {
      indexes.var.push(i);
      types.push(VAR_TOKEN);
      values.push(parsedValue);
    } else {
      indexes.number.push(i);
      types.push(NUMBER_TOKEN);
      values.push(parseFloat(parsedValue));
    }
    ++i;
    return SPLIT_TOKEN;
  });
  const split = tokenised.split(SPLIT_TOKEN);
  return { values, split, indexes, types };
}
function parseComplexValue(v2) {
  return analyseComplexValue(v2).values;
}
function createTransformer(source) {
  const { split, types } = analyseComplexValue(source);
  const numSections = split.length;
  return (v2) => {
    let output = "";
    for (let i = 0; i < numSections; i++) {
      output += split[i];
      if (v2[i] !== void 0) {
        const type = types[i];
        if (type === NUMBER_TOKEN) {
          output += sanitize(v2[i]);
        } else if (type === COLOR_TOKEN) {
          output += color$1.transform(v2[i]);
        } else {
          output += v2[i];
        }
      }
    }
    return output;
  };
}
const convertNumbersToZero = (v2) => typeof v2 === "number" ? 0 : v2;
function getAnimatableNone$1(v2) {
  const parsed = parseComplexValue(v2);
  const transformer = createTransformer(v2);
  return transformer(parsed.map(convertNumbersToZero));
}
const complex = {
  test,
  parse: parseComplexValue,
  createTransformer,
  getAnimatableNone: getAnimatableNone$1
};
const maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function applyDefaultFilter(v2) {
  const [name, value] = v2.slice(0, -1).split("(");
  if (name === "drop-shadow")
    return v2;
  const [number2] = value.match(floatRegex) || [];
  if (!number2)
    return v2;
  const unit = value.replace(number2, "");
  let defaultValue = maxDefaults.has(name) ? 1 : 0;
  if (number2 !== value)
    defaultValue *= 100;
  return name + "(" + defaultValue + unit + ")";
}
const functionRegex = /\b([a-z-]*)\(.*?\)/gu;
const filter = {
  ...complex,
  getAnimatableNone: (v2) => {
    const functions = v2.match(functionRegex);
    return functions ? functions.map(applyDefaultFilter).join(" ") : v2;
  }
};
const defaultValueTypes = {
  ...numberValueTypes,
  // Color props
  color: color$1,
  backgroundColor: color$1,
  outlineColor: color$1,
  fill: color$1,
  stroke: color$1,
  // Border props
  borderColor: color$1,
  borderTopColor: color$1,
  borderRightColor: color$1,
  borderBottomColor: color$1,
  borderLeftColor: color$1,
  filter,
  WebkitFilter: filter
};
const getDefaultValueType = (key) => defaultValueTypes[key];
function getAnimatableNone(key, value) {
  let defaultValueType = getDefaultValueType(key);
  if (defaultValueType !== filter)
    defaultValueType = complex;
  return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : void 0;
}
const invalidTemplates = /* @__PURE__ */ new Set(["auto", "none", "0"]);
function makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name) {
  let i = 0;
  let animatableTemplate = void 0;
  while (i < unresolvedKeyframes.length && !animatableTemplate) {
    const keyframe = unresolvedKeyframes[i];
    if (typeof keyframe === "string" && !invalidTemplates.has(keyframe) && analyseComplexValue(keyframe).values.length) {
      animatableTemplate = unresolvedKeyframes[i];
    }
    i++;
  }
  if (animatableTemplate && name) {
    for (const noneIndex of noneKeyframeIndexes) {
      unresolvedKeyframes[noneIndex] = getAnimatableNone(name, animatableTemplate);
    }
  }
}
const isNumOrPxType = (v2) => v2 === number || v2 === px;
const getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(", ")[pos]);
const getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {
  if (transform === "none" || !transform)
    return 0;
  const matrix3d = transform.match(/^matrix3d\((.+)\)$/u);
  if (matrix3d) {
    return getPosFromMatrix(matrix3d[1], pos3);
  } else {
    const matrix = transform.match(/^matrix\((.+)\)$/u);
    if (matrix) {
      return getPosFromMatrix(matrix[1], pos2);
    } else {
      return 0;
    }
  }
};
const transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
const nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));
function removeNonTranslationalTransform(visualElement) {
  const removedTransforms = [];
  nonTranslationalTransformKeys.forEach((key) => {
    const value = visualElement.getValue(key);
    if (value !== void 0) {
      removedTransforms.push([key, value.get()]);
      value.set(key.startsWith("scale") ? 1 : 0);
    }
  });
  return removedTransforms;
}
const positionalValues = {
  // Dimensions
  width: ({ x: x2 }, { paddingLeft = "0", paddingRight = "0" }) => x2.max - x2.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
  height: ({ y: y2 }, { paddingTop = "0", paddingBottom = "0" }) => y2.max - y2.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
  top: (_bbox, { top }) => parseFloat(top),
  left: (_bbox, { left }) => parseFloat(left),
  bottom: ({ y: y2 }, { top }) => parseFloat(top) + (y2.max - y2.min),
  right: ({ x: x2 }, { left }) => parseFloat(left) + (x2.max - x2.min),
  // Transform
  x: getTranslateFromMatrix(4, 13),
  y: getTranslateFromMatrix(5, 14)
};
positionalValues.translateX = positionalValues.x;
positionalValues.translateY = positionalValues.y;
const toResolve = /* @__PURE__ */ new Set();
let isScheduled = false;
let anyNeedsMeasurement = false;
function measureAllKeyframes() {
  if (anyNeedsMeasurement) {
    const resolversToMeasure = Array.from(toResolve).filter((resolver) => resolver.needsMeasurement);
    const elementsToMeasure = new Set(resolversToMeasure.map((resolver) => resolver.element));
    const transformsToRestore = /* @__PURE__ */ new Map();
    elementsToMeasure.forEach((element) => {
      const removedTransforms = removeNonTranslationalTransform(element);
      if (!removedTransforms.length)
        return;
      transformsToRestore.set(element, removedTransforms);
      element.render();
    });
    resolversToMeasure.forEach((resolver) => resolver.measureInitialState());
    elementsToMeasure.forEach((element) => {
      element.render();
      const restore = transformsToRestore.get(element);
      if (restore) {
        restore.forEach(([key, value]) => {
          var _a2;
          (_a2 = element.getValue(key)) === null || _a2 === void 0 ? void 0 : _a2.set(value);
        });
      }
    });
    resolversToMeasure.forEach((resolver) => resolver.measureEndState());
    resolversToMeasure.forEach((resolver) => {
      if (resolver.suspendedScrollY !== void 0) {
        window.scrollTo(0, resolver.suspendedScrollY);
      }
    });
  }
  anyNeedsMeasurement = false;
  isScheduled = false;
  toResolve.forEach((resolver) => resolver.complete());
  toResolve.clear();
}
function readAllKeyframes() {
  toResolve.forEach((resolver) => {
    resolver.readKeyframes();
    if (resolver.needsMeasurement) {
      anyNeedsMeasurement = true;
    }
  });
}
function flushKeyframeResolvers() {
  readAllKeyframes();
  measureAllKeyframes();
}
class KeyframeResolver {
  constructor(unresolvedKeyframes, onComplete, name, motionValue2, element, isAsync = false) {
    this.isComplete = false;
    this.isAsync = false;
    this.needsMeasurement = false;
    this.isScheduled = false;
    this.unresolvedKeyframes = [...unresolvedKeyframes];
    this.onComplete = onComplete;
    this.name = name;
    this.motionValue = motionValue2;
    this.element = element;
    this.isAsync = isAsync;
  }
  scheduleResolve() {
    this.isScheduled = true;
    if (this.isAsync) {
      toResolve.add(this);
      if (!isScheduled) {
        isScheduled = true;
        frame.read(readAllKeyframes);
        frame.resolveKeyframes(measureAllKeyframes);
      }
    } else {
      this.readKeyframes();
      this.complete();
    }
  }
  readKeyframes() {
    const { unresolvedKeyframes, name, element, motionValue: motionValue2 } = this;
    for (let i = 0; i < unresolvedKeyframes.length; i++) {
      if (unresolvedKeyframes[i] === null) {
        if (i === 0) {
          const currentValue = motionValue2 === null || motionValue2 === void 0 ? void 0 : motionValue2.get();
          const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
          if (currentValue !== void 0) {
            unresolvedKeyframes[0] = currentValue;
          } else if (element && name) {
            const valueAsRead = element.readValue(name, finalKeyframe);
            if (valueAsRead !== void 0 && valueAsRead !== null) {
              unresolvedKeyframes[0] = valueAsRead;
            }
          }
          if (unresolvedKeyframes[0] === void 0) {
            unresolvedKeyframes[0] = finalKeyframe;
          }
          if (motionValue2 && currentValue === void 0) {
            motionValue2.set(unresolvedKeyframes[0]);
          }
        } else {
          unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];
        }
      }
    }
  }
  setFinalKeyframe() {
  }
  measureInitialState() {
  }
  renderEndStyles() {
  }
  measureEndState() {
  }
  complete() {
    this.isComplete = true;
    this.onComplete(this.unresolvedKeyframes, this.finalKeyframe);
    toResolve.delete(this);
  }
  cancel() {
    if (!this.isComplete) {
      this.isScheduled = false;
      toResolve.delete(this);
    }
  }
  resume() {
    if (!this.isComplete)
      this.scheduleResolve();
  }
}
const isNumericalString = (v2) => /^-?(?:\d+(?:\.\d+)?|\.\d+)$/u.test(v2);
const splitCSSVariableRegex = (
  // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words
  /^var\(--(?:([\w-]+)|([\w-]+), ?([a-zA-Z\d ()%#.,-]+))\)/u
);
function parseCSSVariable(current) {
  const match = splitCSSVariableRegex.exec(current);
  if (!match)
    return [,];
  const [, token1, token2, fallback] = match;
  return [`--${token1 !== null && token1 !== void 0 ? token1 : token2}`, fallback];
}
function getVariableValue(current, element, depth = 1) {
  const [token, fallback] = parseCSSVariable(current);
  if (!token)
    return;
  const resolved = window.getComputedStyle(element).getPropertyValue(token);
  if (resolved) {
    const trimmed = resolved.trim();
    return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;
  }
  return isCSSVariableToken(fallback) ? getVariableValue(fallback, element, depth + 1) : fallback;
}
const testValueType = (v2) => (type) => type.test(v2);
const auto = {
  test: (v2) => v2 === "auto",
  parse: (v2) => v2
};
const dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];
const findDimensionValueType = (v2) => dimensionValueTypes.find(testValueType(v2));
class DOMKeyframesResolver extends KeyframeResolver {
  constructor(unresolvedKeyframes, onComplete, name, motionValue2, element) {
    super(unresolvedKeyframes, onComplete, name, motionValue2, element, true);
  }
  readKeyframes() {
    const { unresolvedKeyframes, element, name } = this;
    if (!element || !element.current)
      return;
    super.readKeyframes();
    for (let i = 0; i < unresolvedKeyframes.length; i++) {
      let keyframe = unresolvedKeyframes[i];
      if (typeof keyframe === "string") {
        keyframe = keyframe.trim();
        if (isCSSVariableToken(keyframe)) {
          const resolved = getVariableValue(keyframe, element.current);
          if (resolved !== void 0) {
            unresolvedKeyframes[i] = resolved;
          }
          if (i === unresolvedKeyframes.length - 1) {
            this.finalKeyframe = keyframe;
          }
        }
      }
    }
    this.resolveNoneKeyframes();
    if (!positionalKeys.has(name) || unresolvedKeyframes.length !== 2) {
      return;
    }
    const [origin, target] = unresolvedKeyframes;
    const originType = findDimensionValueType(origin);
    const targetType = findDimensionValueType(target);
    if (originType === targetType)
      return;
    if (isNumOrPxType(originType) && isNumOrPxType(targetType)) {
      for (let i = 0; i < unresolvedKeyframes.length; i++) {
        const value = unresolvedKeyframes[i];
        if (typeof value === "string") {
          unresolvedKeyframes[i] = parseFloat(value);
        }
      }
    } else {
      this.needsMeasurement = true;
    }
  }
  resolveNoneKeyframes() {
    const { unresolvedKeyframes, name } = this;
    const noneKeyframeIndexes = [];
    for (let i = 0; i < unresolvedKeyframes.length; i++) {
      if (isNone(unresolvedKeyframes[i])) {
        noneKeyframeIndexes.push(i);
      }
    }
    if (noneKeyframeIndexes.length) {
      makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name);
    }
  }
  measureInitialState() {
    const { element, unresolvedKeyframes, name } = this;
    if (!element || !element.current)
      return;
    if (name === "height") {
      this.suspendedScrollY = window.pageYOffset;
    }
    this.measuredOrigin = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));
    unresolvedKeyframes[0] = this.measuredOrigin;
    const measureKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
    if (measureKeyframe !== void 0) {
      element.getValue(name, measureKeyframe).jump(measureKeyframe, false);
    }
  }
  measureEndState() {
    var _a2;
    const { element, name, unresolvedKeyframes } = this;
    if (!element || !element.current)
      return;
    const value = element.getValue(name);
    value && value.jump(this.measuredOrigin, false);
    const finalKeyframeIndex = unresolvedKeyframes.length - 1;
    const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];
    unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));
    if (finalKeyframe !== null && this.finalKeyframe === void 0) {
      this.finalKeyframe = finalKeyframe;
    }
    if ((_a2 = this.removedTransforms) === null || _a2 === void 0 ? void 0 : _a2.length) {
      this.removedTransforms.forEach(([unsetTransformName, unsetTransformValue]) => {
        element.getValue(unsetTransformName).set(unsetTransformValue);
      });
    }
    this.resolveNoneKeyframes();
  }
}
const isAnimatable = (value, name) => {
  if (name === "zIndex")
    return false;
  if (typeof value === "number" || Array.isArray(value))
    return true;
  if (typeof value === "string" && // It's animatable if we have a string
  (complex.test(value) || value === "0") && // And it contains numbers and/or colors
  !value.startsWith("url(")) {
    return true;
  }
  return false;
};
function hasKeyframesChanged(keyframes2) {
  const current = keyframes2[0];
  if (keyframes2.length === 1)
    return true;
  for (let i = 0; i < keyframes2.length; i++) {
    if (keyframes2[i] !== current)
      return true;
  }
}
function canAnimate(keyframes2, name, type, velocity) {
  const originKeyframe = keyframes2[0];
  if (originKeyframe === null)
    return false;
  if (name === "display" || name === "visibility")
    return true;
  const targetKeyframe = keyframes2[keyframes2.length - 1];
  const isOriginAnimatable = isAnimatable(originKeyframe, name);
  const isTargetAnimatable = isAnimatable(targetKeyframe, name);
  if (!isOriginAnimatable || !isTargetAnimatable) {
    return false;
  }
  return hasKeyframesChanged(keyframes2) || (type === "spring" || isGenerator(type)) && velocity;
}
const isNotNull = (value) => value !== null;
function getFinalKeyframe(keyframes2, { repeat, repeatType = "loop" }, finalKeyframe) {
  const resolvedKeyframes = keyframes2.filter(isNotNull);
  const index2 = repeat && repeatType !== "loop" && repeat % 2 === 1 ? 0 : resolvedKeyframes.length - 1;
  return !index2 || finalKeyframe === void 0 ? resolvedKeyframes[index2] : finalKeyframe;
}
const MAX_RESOLVE_DELAY = 40;
class BaseAnimation {
  constructor({ autoplay = true, delay: delay2 = 0, type = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", ...options }) {
    this.isStopped = false;
    this.hasAttemptedResolve = false;
    this.createdAt = time.now();
    this.options = {
      autoplay,
      delay: delay2,
      type,
      repeat,
      repeatDelay,
      repeatType,
      ...options
    };
    this.updateFinishedPromise();
  }
  /**
   * This method uses the createdAt and resolvedAt to calculate the
   * animation startTime. *Ideally*, we would use the createdAt time as t=0
   * as the following frame would then be the first frame of the animation in
   * progress, which would feel snappier.
   *
   * However, if there's a delay (main thread work) between the creation of
   * the animation and the first commited frame, we prefer to use resolvedAt
   * to avoid a sudden jump into the animation.
   */
  calcStartTime() {
    if (!this.resolvedAt)
      return this.createdAt;
    return this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY ? this.resolvedAt : this.createdAt;
  }
  /**
   * A getter for resolved data. If keyframes are not yet resolved, accessing
   * this.resolved will synchronously flush all pending keyframe resolvers.
   * This is a deoptimisation, but at its worst still batches read/writes.
   */
  get resolved() {
    if (!this._resolved && !this.hasAttemptedResolve) {
      flushKeyframeResolvers();
    }
    return this._resolved;
  }
  /**
   * A method to be called when the keyframes resolver completes. This method
   * will check if its possible to run the animation and, if not, skip it.
   * Otherwise, it will call initPlayback on the implementing class.
   */
  onKeyframesResolved(keyframes2, finalKeyframe) {
    this.resolvedAt = time.now();
    this.hasAttemptedResolve = true;
    const { name, type, velocity, delay: delay2, onComplete, onUpdate, isGenerator: isGenerator2 } = this.options;
    if (!isGenerator2 && !canAnimate(keyframes2, name, type, velocity)) {
      if (!delay2) {
        onUpdate && onUpdate(getFinalKeyframe(keyframes2, this.options, finalKeyframe));
        onComplete && onComplete();
        this.resolveFinishedPromise();
        return;
      } else {
        this.options.duration = 0;
      }
    }
    const resolvedAnimation = this.initPlayback(keyframes2, finalKeyframe);
    if (resolvedAnimation === false)
      return;
    this._resolved = {
      keyframes: keyframes2,
      finalKeyframe,
      ...resolvedAnimation
    };
    this.onPostResolved();
  }
  onPostResolved() {
  }
  /**
   * Allows the returned animation to be awaited or promise-chained. Currently
   * resolves when the animation finishes at all but in a future update could/should
   * reject if its cancels.
   */
  then(resolve2, reject) {
    return this.currentFinishedPromise.then(resolve2, reject);
  }
  flatten() {
    this.options.type = "keyframes";
    this.options.ease = "linear";
  }
  updateFinishedPromise() {
    this.currentFinishedPromise = new Promise((resolve2) => {
      this.resolveFinishedPromise = resolve2;
    });
  }
}
const mixNumber$1 = (from2, to2, progress2) => {
  return from2 + (to2 - from2) * progress2;
};
function hueToRgb(p2, q2, t2) {
  if (t2 < 0)
    t2 += 1;
  if (t2 > 1)
    t2 -= 1;
  if (t2 < 1 / 6)
    return p2 + (q2 - p2) * 6 * t2;
  if (t2 < 1 / 2)
    return q2;
  if (t2 < 2 / 3)
    return p2 + (q2 - p2) * (2 / 3 - t2) * 6;
  return p2;
}
function hslaToRgba({ hue: hue2, saturation, lightness, alpha: alpha2 }) {
  hue2 /= 360;
  saturation /= 100;
  lightness /= 100;
  let red = 0;
  let green = 0;
  let blue = 0;
  if (!saturation) {
    red = green = blue = lightness;
  } else {
    const q2 = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
    const p2 = 2 * lightness - q2;
    red = hueToRgb(p2, q2, hue2 + 1 / 3);
    green = hueToRgb(p2, q2, hue2);
    blue = hueToRgb(p2, q2, hue2 - 1 / 3);
  }
  return {
    red: Math.round(red * 255),
    green: Math.round(green * 255),
    blue: Math.round(blue * 255),
    alpha: alpha2
  };
}
function mixImmediate(a, b2) {
  return (p2) => p2 > 0 ? b2 : a;
}
const mixLinearColor = (from2, to2, v2) => {
  const fromExpo = from2 * from2;
  const expo = v2 * (to2 * to2 - fromExpo) + fromExpo;
  return expo < 0 ? 0 : Math.sqrt(expo);
};
const colorTypes = [hex$1, rgba, hsla];
const getColorType = (v2) => colorTypes.find((type) => type.test(v2));
function asRGBA(color2) {
  const type = getColorType(color2);
  if (!Boolean(type))
    return false;
  let model = type.parse(color2);
  if (type === hsla) {
    model = hslaToRgba(model);
  }
  return model;
}
const mixColor = (from2, to2) => {
  const fromRGBA = asRGBA(from2);
  const toRGBA = asRGBA(to2);
  if (!fromRGBA || !toRGBA) {
    return mixImmediate(from2, to2);
  }
  const blended = { ...fromRGBA };
  return (v2) => {
    blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v2);
    blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v2);
    blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v2);
    blended.alpha = mixNumber$1(fromRGBA.alpha, toRGBA.alpha, v2);
    return rgba.transform(blended);
  };
};
const combineFunctions = (a, b2) => (v2) => b2(a(v2));
const pipe = (...transformers) => transformers.reduce(combineFunctions);
const invisibleValues = /* @__PURE__ */ new Set(["none", "hidden"]);
function mixVisibility(origin, target) {
  if (invisibleValues.has(origin)) {
    return (p2) => p2 <= 0 ? origin : target;
  } else {
    return (p2) => p2 >= 1 ? target : origin;
  }
}
function mixNumber(a, b2) {
  return (p2) => mixNumber$1(a, b2, p2);
}
function getMixer(a) {
  if (typeof a === "number") {
    return mixNumber;
  } else if (typeof a === "string") {
    return isCSSVariableToken(a) ? mixImmediate : color$1.test(a) ? mixColor : mixComplex;
  } else if (Array.isArray(a)) {
    return mixArray;
  } else if (typeof a === "object") {
    return color$1.test(a) ? mixColor : mixObject;
  }
  return mixImmediate;
}
function mixArray(a, b2) {
  const output = [...a];
  const numValues = output.length;
  const blendValue = a.map((v2, i) => getMixer(v2)(v2, b2[i]));
  return (p2) => {
    for (let i = 0; i < numValues; i++) {
      output[i] = blendValue[i](p2);
    }
    return output;
  };
}
function mixObject(a, b2) {
  const output = { ...a, ...b2 };
  const blendValue = {};
  for (const key in output) {
    if (a[key] !== void 0 && b2[key] !== void 0) {
      blendValue[key] = getMixer(a[key])(a[key], b2[key]);
    }
  }
  return (v2) => {
    for (const key in blendValue) {
      output[key] = blendValue[key](v2);
    }
    return output;
  };
}
function matchOrder(origin, target) {
  var _a2;
  const orderedOrigin = [];
  const pointers = { color: 0, var: 0, number: 0 };
  for (let i = 0; i < target.values.length; i++) {
    const type = target.types[i];
    const originIndex = origin.indexes[type][pointers[type]];
    const originValue = (_a2 = origin.values[originIndex]) !== null && _a2 !== void 0 ? _a2 : 0;
    orderedOrigin[i] = originValue;
    pointers[type]++;
  }
  return orderedOrigin;
}
const mixComplex = (origin, target) => {
  const template = complex.createTransformer(target);
  const originStats = analyseComplexValue(origin);
  const targetStats = analyseComplexValue(target);
  const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length && originStats.indexes.color.length === targetStats.indexes.color.length && originStats.indexes.number.length >= targetStats.indexes.number.length;
  if (canInterpolate) {
    if (invisibleValues.has(origin) && !targetStats.values.length || invisibleValues.has(target) && !originStats.values.length) {
      return mixVisibility(origin, target);
    }
    return pipe(mixArray(matchOrder(originStats, targetStats), targetStats.values), template);
  } else {
    return mixImmediate(origin, target);
  }
};
function mix(from2, to2, p2) {
  if (typeof from2 === "number" && typeof to2 === "number" && typeof p2 === "number") {
    return mixNumber$1(from2, to2, p2);
  }
  const mixer = getMixer(from2);
  return mixer(from2, to2);
}
const velocitySampleDuration = 5;
function calcGeneratorVelocity(resolveValue, t2, current) {
  const prevT = Math.max(t2 - velocitySampleDuration, 0);
  return velocityPerSecond(current - resolveValue(prevT), t2 - prevT);
}
const springDefaults = {
  // Default spring physics
  stiffness: 100,
  damping: 10,
  mass: 1,
  velocity: 0,
  // Default duration/bounce-based options
  duration: 800,
  // in ms
  bounce: 0.3,
  visualDuration: 0.3,
  // in seconds
  // Rest thresholds
  restSpeed: {
    granular: 0.01,
    default: 2
  },
  restDelta: {
    granular: 5e-3,
    default: 0.5
  },
  // Limits
  minDuration: 0.01,
  // in seconds
  maxDuration: 10,
  // in seconds
  minDamping: 0.05,
  maxDamping: 1
};
const safeMin = 1e-3;
function findSpring({ duration = springDefaults.duration, bounce = springDefaults.bounce, velocity = springDefaults.velocity, mass = springDefaults.mass }) {
  let envelope;
  let derivative;
  let dampingRatio = 1 - bounce;
  dampingRatio = clamp(springDefaults.minDamping, springDefaults.maxDamping, dampingRatio);
  duration = clamp(springDefaults.minDuration, springDefaults.maxDuration, /* @__PURE__ */ millisecondsToSeconds(duration));
  if (dampingRatio < 1) {
    envelope = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const a = exponentialDecay - velocity;
      const b2 = calcAngularFreq(undampedFreq2, dampingRatio);
      const c2 = Math.exp(-delta);
      return safeMin - a / b2 * c2;
    };
    derivative = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const d2 = delta * velocity + velocity;
      const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
      const f2 = Math.exp(-delta);
      const g2 = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
      const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
      return factor * ((d2 - e) * f2) / g2;
    };
  } else {
    envelope = (undampedFreq2) => {
      const a = Math.exp(-undampedFreq2 * duration);
      const b2 = (undampedFreq2 - velocity) * duration + 1;
      return -1e-3 + a * b2;
    };
    derivative = (undampedFreq2) => {
      const a = Math.exp(-undampedFreq2 * duration);
      const b2 = (velocity - undampedFreq2) * (duration * duration);
      return a * b2;
    };
  }
  const initialGuess = 5 / duration;
  const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
  duration = /* @__PURE__ */ secondsToMilliseconds(duration);
  if (isNaN(undampedFreq)) {
    return {
      stiffness: springDefaults.stiffness,
      damping: springDefaults.damping,
      duration
    };
  } else {
    const stiffness = Math.pow(undampedFreq, 2) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
      duration
    };
  }
}
const rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess) {
  let result = initialGuess;
  for (let i = 1; i < rootIterations; i++) {
    result = result - envelope(result) / derivative(result);
  }
  return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}
const durationKeys = ["duration", "bounce"];
const physicsKeys = ["stiffness", "damping", "mass"];
function isSpringType(options, keys) {
  return keys.some((key) => options[key] !== void 0);
}
function getSpringOptions(options) {
  let springOptions = {
    velocity: springDefaults.velocity,
    stiffness: springDefaults.stiffness,
    damping: springDefaults.damping,
    mass: springDefaults.mass,
    isResolvedFromDuration: false,
    ...options
  };
  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
    if (options.visualDuration) {
      const visualDuration = options.visualDuration;
      const root = 2 * Math.PI / (visualDuration * 1.2);
      const stiffness = root * root;
      const damping = 2 * clamp(0.05, 1, 1 - (options.bounce || 0)) * Math.sqrt(stiffness);
      springOptions = {
        ...springOptions,
        mass: springDefaults.mass,
        stiffness,
        damping
      };
    } else {
      const derived = findSpring(options);
      springOptions = {
        ...springOptions,
        ...derived,
        mass: springDefaults.mass
      };
      springOptions.isResolvedFromDuration = true;
    }
  }
  return springOptions;
}
function spring(optionsOrVisualDuration = springDefaults.visualDuration, bounce = springDefaults.bounce) {
  const options = typeof optionsOrVisualDuration !== "object" ? {
    visualDuration: optionsOrVisualDuration,
    keyframes: [0, 1],
    bounce
  } : optionsOrVisualDuration;
  let { restSpeed, restDelta } = options;
  const origin = options.keyframes[0];
  const target = options.keyframes[options.keyframes.length - 1];
  const state = { done: false, value: origin };
  const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration } = getSpringOptions({
    ...options,
    velocity: -/* @__PURE__ */ millisecondsToSeconds(options.velocity || 0)
  });
  const initialVelocity = velocity || 0;
  const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
  const initialDelta = target - origin;
  const undampedAngularFreq = /* @__PURE__ */ millisecondsToSeconds(Math.sqrt(stiffness / mass));
  const isGranularScale = Math.abs(initialDelta) < 5;
  restSpeed || (restSpeed = isGranularScale ? springDefaults.restSpeed.granular : springDefaults.restSpeed.default);
  restDelta || (restDelta = isGranularScale ? springDefaults.restDelta.granular : springDefaults.restDelta.default);
  let resolveSpring;
  if (dampingRatio < 1) {
    const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
    resolveSpring = (t2) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t2) + initialDelta * Math.cos(angularFreq * t2));
    };
  } else if (dampingRatio === 1) {
    resolveSpring = (t2) => target - Math.exp(-undampedAngularFreq * t2) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t2);
  } else {
    const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
    resolveSpring = (t2) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
      const freqForT = Math.min(dampedAngularFreq * t2, 300);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
    };
  }
  const generator = {
    calculatedDuration: isResolvedFromDuration ? duration || null : null,
    next: (t2) => {
      const current = resolveSpring(t2);
      if (!isResolvedFromDuration) {
        let currentVelocity = 0;
        if (dampingRatio < 1) {
          currentVelocity = t2 === 0 ? /* @__PURE__ */ secondsToMilliseconds(initialVelocity) : calcGeneratorVelocity(resolveSpring, t2, current);
        }
        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
        const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      } else {
        state.done = t2 >= duration;
      }
      state.value = state.done ? target : current;
      return state;
    },
    toString: () => {
      const calculatedDuration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);
      const easing = generateLinearEasing((progress2) => generator.next(calculatedDuration * progress2).value, calculatedDuration, 30);
      return calculatedDuration + "ms " + easing;
    }
  };
  return generator;
}
function inertia({ keyframes: keyframes2, velocity = 0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed }) {
  const origin = keyframes2[0];
  const state = {
    done: false,
    value: origin
  };
  const isOutOfBounds = (v2) => min !== void 0 && v2 < min || max !== void 0 && v2 > max;
  const nearestBoundary = (v2) => {
    if (min === void 0)
      return max;
    if (max === void 0)
      return min;
    return Math.abs(min - v2) < Math.abs(max - v2) ? min : max;
  };
  let amplitude = power * velocity;
  const ideal = origin + amplitude;
  const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
  if (target !== ideal)
    amplitude = target - origin;
  const calcDelta = (t2) => -amplitude * Math.exp(-t2 / timeConstant);
  const calcLatest = (t2) => target + calcDelta(t2);
  const applyFriction = (t2) => {
    const delta = calcDelta(t2);
    const latest = calcLatest(t2);
    state.done = Math.abs(delta) <= restDelta;
    state.value = state.done ? target : latest;
  };
  let timeReachedBoundary;
  let spring$1;
  const checkCatchBoundary = (t2) => {
    if (!isOutOfBounds(state.value))
      return;
    timeReachedBoundary = t2;
    spring$1 = spring({
      keyframes: [state.value, nearestBoundary(state.value)],
      velocity: calcGeneratorVelocity(calcLatest, t2, state.value),
      // TODO: This should be passing * 1000
      damping: bounceDamping,
      stiffness: bounceStiffness,
      restDelta,
      restSpeed
    });
  };
  checkCatchBoundary(0);
  return {
    calculatedDuration: null,
    next: (t2) => {
      let hasUpdatedFrame = false;
      if (!spring$1 && timeReachedBoundary === void 0) {
        hasUpdatedFrame = true;
        applyFriction(t2);
        checkCatchBoundary(t2);
      }
      if (timeReachedBoundary !== void 0 && t2 >= timeReachedBoundary) {
        return spring$1.next(t2 - timeReachedBoundary);
      } else {
        !hasUpdatedFrame && applyFriction(t2);
        return state;
      }
    }
  };
}
const easeIn = /* @__PURE__ */ cubicBezier(0.42, 0, 1, 1);
const easeOut = /* @__PURE__ */ cubicBezier(0, 0, 0.58, 1);
const easeInOut = /* @__PURE__ */ cubicBezier(0.42, 0, 0.58, 1);
const isEasingArray = (ease2) => {
  return Array.isArray(ease2) && typeof ease2[0] !== "number";
};
const easingLookup = {
  linear: noop$1,
  easeIn,
  easeInOut,
  easeOut,
  circIn,
  circInOut,
  circOut,
  backIn,
  backInOut,
  backOut,
  anticipate
};
const easingDefinitionToFunction = (definition) => {
  if (isBezierDefinition(definition)) {
    invariant(definition.length === 4);
    const [x1, y1, x2, y2] = definition;
    return cubicBezier(x1, y1, x2, y2);
  } else if (typeof definition === "string") {
    return easingLookup[definition];
  }
  return definition;
};
function createMixers(output, ease2, customMixer) {
  const mixers = [];
  const mixerFactory = customMixer || mix;
  const numMixers = output.length - 1;
  for (let i = 0; i < numMixers; i++) {
    let mixer = mixerFactory(output[i], output[i + 1]);
    if (ease2) {
      const easingFunction = Array.isArray(ease2) ? ease2[i] || noop$1 : ease2;
      mixer = pipe(easingFunction, mixer);
    }
    mixers.push(mixer);
  }
  return mixers;
}
function interpolate$2(input, output, { clamp: isClamp = true, ease: ease2, mixer } = {}) {
  const inputLength = input.length;
  invariant(inputLength === output.length);
  if (inputLength === 1)
    return () => output[0];
  if (inputLength === 2 && output[0] === output[1])
    return () => output[1];
  const isZeroDeltaRange = input[0] === input[1];
  if (input[0] > input[inputLength - 1]) {
    input = [...input].reverse();
    output = [...output].reverse();
  }
  const mixers = createMixers(output, ease2, mixer);
  const numMixers = mixers.length;
  const interpolator = (v2) => {
    if (isZeroDeltaRange && v2 < input[0])
      return output[0];
    let i = 0;
    if (numMixers > 1) {
      for (; i < input.length - 2; i++) {
        if (v2 < input[i + 1])
          break;
      }
    }
    const progressInRange = /* @__PURE__ */ progress(input[i], input[i + 1], v2);
    return mixers[i](progressInRange);
  };
  return isClamp ? (v2) => interpolator(clamp(input[0], input[inputLength - 1], v2)) : interpolator;
}
function fillOffset(offset, remaining) {
  const min = offset[offset.length - 1];
  for (let i = 1; i <= remaining; i++) {
    const offsetProgress = /* @__PURE__ */ progress(0, remaining, i);
    offset.push(mixNumber$1(min, 1, offsetProgress));
  }
}
function defaultOffset(arr) {
  const offset = [0];
  fillOffset(offset, arr.length - 1);
  return offset;
}
function convertOffsetToTimes(offset, duration) {
  return offset.map((o) => o * duration);
}
function defaultEasing(values, easing) {
  return values.map(() => easing || easeInOut).splice(0, values.length - 1);
}
function keyframes({ duration = 300, keyframes: keyframeValues, times, ease: ease2 = "easeInOut" }) {
  const easingFunctions = isEasingArray(ease2) ? ease2.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease2);
  const state = {
    done: false,
    value: keyframeValues[0]
  };
  const absoluteTimes = convertOffsetToTimes(
    // Only use the provided offsets if they're the correct length
    // TODO Maybe we should warn here if there's a length mismatch
    times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues),
    duration
  );
  const mapTimeToKeyframe = interpolate$2(absoluteTimes, keyframeValues, {
    ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)
  });
  return {
    calculatedDuration: duration,
    next: (t2) => {
      state.value = mapTimeToKeyframe(t2);
      state.done = t2 >= duration;
      return state;
    }
  };
}
const frameloopDriver = (update) => {
  const passTimestamp = ({ timestamp }) => update(timestamp);
  return {
    start: () => frame.update(passTimestamp, true),
    stop: () => cancelFrame(passTimestamp),
    /**
     * If we're processing this frame we can use the
     * framelocked timestamp to keep things in sync.
     */
    now: () => frameData.isProcessing ? frameData.timestamp : time.now()
  };
};
const generators = {
  decay: inertia,
  inertia,
  tween: keyframes,
  keyframes,
  spring
};
const percentToProgress = (percent2) => percent2 / 100;
class MainThreadAnimation extends BaseAnimation {
  constructor(options) {
    super(options);
    this.holdTime = null;
    this.cancelTime = null;
    this.currentTime = 0;
    this.playbackSpeed = 1;
    this.pendingPlayState = "running";
    this.startTime = null;
    this.state = "idle";
    this.stop = () => {
      this.resolver.cancel();
      this.isStopped = true;
      if (this.state === "idle")
        return;
      this.teardown();
      const { onStop } = this.options;
      onStop && onStop();
    };
    const { name, motionValue: motionValue2, element, keyframes: keyframes2 } = this.options;
    const KeyframeResolver$1 = (element === null || element === void 0 ? void 0 : element.KeyframeResolver) || KeyframeResolver;
    const onResolved = (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe);
    this.resolver = new KeyframeResolver$1(keyframes2, onResolved, name, motionValue2, element);
    this.resolver.scheduleResolve();
  }
  flatten() {
    super.flatten();
    if (this._resolved) {
      Object.assign(this._resolved, this.initPlayback(this._resolved.keyframes));
    }
  }
  initPlayback(keyframes$1) {
    const { type = "keyframes", repeat = 0, repeatDelay = 0, repeatType, velocity = 0 } = this.options;
    const generatorFactory = isGenerator(type) ? type : generators[type] || keyframes;
    let mapPercentToKeyframes;
    let mirroredGenerator;
    if (generatorFactory !== keyframes && typeof keyframes$1[0] !== "number") {
      mapPercentToKeyframes = pipe(percentToProgress, mix(keyframes$1[0], keyframes$1[1]));
      keyframes$1 = [0, 100];
    }
    const generator = generatorFactory({ ...this.options, keyframes: keyframes$1 });
    if (repeatType === "mirror") {
      mirroredGenerator = generatorFactory({
        ...this.options,
        keyframes: [...keyframes$1].reverse(),
        velocity: -velocity
      });
    }
    if (generator.calculatedDuration === null) {
      generator.calculatedDuration = calcGeneratorDuration(generator);
    }
    const { calculatedDuration } = generator;
    const resolvedDuration = calculatedDuration + repeatDelay;
    const totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;
    return {
      generator,
      mirroredGenerator,
      mapPercentToKeyframes,
      calculatedDuration,
      resolvedDuration,
      totalDuration
    };
  }
  onPostResolved() {
    const { autoplay = true } = this.options;
    this.play();
    if (this.pendingPlayState === "paused" || !autoplay) {
      this.pause();
    } else {
      this.state = this.pendingPlayState;
    }
  }
  tick(timestamp, sample2 = false) {
    const { resolved } = this;
    if (!resolved) {
      const { keyframes: keyframes3 } = this.options;
      return { done: true, value: keyframes3[keyframes3.length - 1] };
    }
    const { finalKeyframe, generator, mirroredGenerator, mapPercentToKeyframes, keyframes: keyframes2, calculatedDuration, totalDuration, resolvedDuration } = resolved;
    if (this.startTime === null)
      return generator.next(0);
    const { delay: delay2, repeat, repeatType, repeatDelay, onUpdate } = this.options;
    if (this.speed > 0) {
      this.startTime = Math.min(this.startTime, timestamp);
    } else if (this.speed < 0) {
      this.startTime = Math.min(timestamp - totalDuration / this.speed, this.startTime);
    }
    if (sample2) {
      this.currentTime = timestamp;
    } else if (this.holdTime !== null) {
      this.currentTime = this.holdTime;
    } else {
      this.currentTime = Math.round(timestamp - this.startTime) * this.speed;
    }
    const timeWithoutDelay = this.currentTime - delay2 * (this.speed >= 0 ? 1 : -1);
    const isInDelayPhase = this.speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;
    this.currentTime = Math.max(timeWithoutDelay, 0);
    if (this.state === "finished" && this.holdTime === null) {
      this.currentTime = totalDuration;
    }
    let elapsed = this.currentTime;
    let frameGenerator = generator;
    if (repeat) {
      const progress2 = Math.min(this.currentTime, totalDuration) / resolvedDuration;
      let currentIteration = Math.floor(progress2);
      let iterationProgress = progress2 % 1;
      if (!iterationProgress && progress2 >= 1) {
        iterationProgress = 1;
      }
      iterationProgress === 1 && currentIteration--;
      currentIteration = Math.min(currentIteration, repeat + 1);
      const isOddIteration = Boolean(currentIteration % 2);
      if (isOddIteration) {
        if (repeatType === "reverse") {
          iterationProgress = 1 - iterationProgress;
          if (repeatDelay) {
            iterationProgress -= repeatDelay / resolvedDuration;
          }
        } else if (repeatType === "mirror") {
          frameGenerator = mirroredGenerator;
        }
      }
      elapsed = clamp(0, 1, iterationProgress) * resolvedDuration;
    }
    const state = isInDelayPhase ? { done: false, value: keyframes2[0] } : frameGenerator.next(elapsed);
    if (mapPercentToKeyframes) {
      state.value = mapPercentToKeyframes(state.value);
    }
    let { done } = state;
    if (!isInDelayPhase && calculatedDuration !== null) {
      done = this.speed >= 0 ? this.currentTime >= totalDuration : this.currentTime <= 0;
    }
    const isAnimationFinished = this.holdTime === null && (this.state === "finished" || this.state === "running" && done);
    if (isAnimationFinished && finalKeyframe !== void 0) {
      state.value = getFinalKeyframe(keyframes2, this.options, finalKeyframe);
    }
    if (onUpdate) {
      onUpdate(state.value);
    }
    if (isAnimationFinished) {
      this.finish();
    }
    return state;
  }
  get duration() {
    const { resolved } = this;
    return resolved ? /* @__PURE__ */ millisecondsToSeconds(resolved.calculatedDuration) : 0;
  }
  get time() {
    return /* @__PURE__ */ millisecondsToSeconds(this.currentTime);
  }
  set time(newTime) {
    newTime = /* @__PURE__ */ secondsToMilliseconds(newTime);
    this.currentTime = newTime;
    if (this.holdTime !== null || this.speed === 0) {
      this.holdTime = newTime;
    } else if (this.driver) {
      this.startTime = this.driver.now() - newTime / this.speed;
    }
  }
  get speed() {
    return this.playbackSpeed;
  }
  set speed(newSpeed) {
    const hasChanged = this.playbackSpeed !== newSpeed;
    this.playbackSpeed = newSpeed;
    if (hasChanged) {
      this.time = /* @__PURE__ */ millisecondsToSeconds(this.currentTime);
    }
  }
  play() {
    if (!this.resolver.isScheduled) {
      this.resolver.resume();
    }
    if (!this._resolved) {
      this.pendingPlayState = "running";
      return;
    }
    if (this.isStopped)
      return;
    const { driver = frameloopDriver, onPlay, startTime } = this.options;
    if (!this.driver) {
      this.driver = driver((timestamp) => this.tick(timestamp));
    }
    onPlay && onPlay();
    const now2 = this.driver.now();
    if (this.holdTime !== null) {
      this.startTime = now2 - this.holdTime;
    } else if (!this.startTime) {
      this.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();
    } else if (this.state === "finished") {
      this.startTime = now2;
    }
    if (this.state === "finished") {
      this.updateFinishedPromise();
    }
    this.cancelTime = this.startTime;
    this.holdTime = null;
    this.state = "running";
    this.driver.start();
  }
  pause() {
    var _a2;
    if (!this._resolved) {
      this.pendingPlayState = "paused";
      return;
    }
    this.state = "paused";
    this.holdTime = (_a2 = this.currentTime) !== null && _a2 !== void 0 ? _a2 : 0;
  }
  complete() {
    if (this.state !== "running") {
      this.play();
    }
    this.pendingPlayState = this.state = "finished";
    this.holdTime = null;
  }
  finish() {
    this.teardown();
    this.state = "finished";
    const { onComplete } = this.options;
    onComplete && onComplete();
  }
  cancel() {
    if (this.cancelTime !== null) {
      this.tick(this.cancelTime);
    }
    this.teardown();
    this.updateFinishedPromise();
  }
  teardown() {
    this.state = "idle";
    this.stopDriver();
    this.resolveFinishedPromise();
    this.updateFinishedPromise();
    this.startTime = this.cancelTime = null;
    this.resolver.cancel();
  }
  stopDriver() {
    if (!this.driver)
      return;
    this.driver.stop();
    this.driver = void 0;
  }
  sample(time2) {
    this.startTime = 0;
    return this.tick(time2, true);
  }
}
const acceleratedValues = /* @__PURE__ */ new Set([
  "opacity",
  "clipPath",
  "filter",
  "transform"
  // TODO: Can be accelerated but currently disabled until https://issues.chromium.org/issues/41491098 is resolved
  // or until we implement support for linear() easing.
  // "background-color"
]);
function startWaapiAnimation(element, valueName, keyframes2, { delay: delay2 = 0, duration = 300, repeat = 0, repeatType = "loop", ease: ease2 = "easeInOut", times } = {}) {
  const keyframeOptions = { [valueName]: keyframes2 };
  if (times)
    keyframeOptions.offset = times;
  const easing = mapEasingToNativeEasing(ease2, duration);
  if (Array.isArray(easing))
    keyframeOptions.easing = easing;
  return element.animate(keyframeOptions, {
    delay: delay2,
    duration,
    easing: !Array.isArray(easing) ? easing : "linear",
    fill: "both",
    iterations: repeat + 1,
    direction: repeatType === "reverse" ? "alternate" : "normal"
  });
}
const supportsWaapi = /* @__PURE__ */ memo(() => Object.hasOwnProperty.call(Element.prototype, "animate"));
const sampleDelta = 10;
const maxDuration = 2e4;
function requiresPregeneratedKeyframes(options) {
  return isGenerator(options.type) || options.type === "spring" || !isWaapiSupportedEasing(options.ease);
}
function pregenerateKeyframes(keyframes2, options) {
  const sampleAnimation = new MainThreadAnimation({
    ...options,
    keyframes: keyframes2,
    repeat: 0,
    delay: 0,
    isGenerator: true
  });
  let state = { done: false, value: keyframes2[0] };
  const pregeneratedKeyframes = [];
  let t2 = 0;
  while (!state.done && t2 < maxDuration) {
    state = sampleAnimation.sample(t2);
    pregeneratedKeyframes.push(state.value);
    t2 += sampleDelta;
  }
  return {
    times: void 0,
    keyframes: pregeneratedKeyframes,
    duration: t2 - sampleDelta,
    ease: "linear"
  };
}
const unsupportedEasingFunctions = {
  anticipate,
  backInOut,
  circInOut
};
function isUnsupportedEase(key) {
  return key in unsupportedEasingFunctions;
}
class AcceleratedAnimation extends BaseAnimation {
  constructor(options) {
    super(options);
    const { name, motionValue: motionValue2, element, keyframes: keyframes2 } = this.options;
    this.resolver = new DOMKeyframesResolver(keyframes2, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue2, element);
    this.resolver.scheduleResolve();
  }
  initPlayback(keyframes2, finalKeyframe) {
    let { duration = 300, times, ease: ease2, type, motionValue: motionValue2, name, startTime } = this.options;
    if (!motionValue2.owner || !motionValue2.owner.current) {
      return false;
    }
    if (typeof ease2 === "string" && supportsLinearEasing() && isUnsupportedEase(ease2)) {
      ease2 = unsupportedEasingFunctions[ease2];
    }
    if (requiresPregeneratedKeyframes(this.options)) {
      const { onComplete, onUpdate, motionValue: motionValue3, element, ...options } = this.options;
      const pregeneratedAnimation = pregenerateKeyframes(keyframes2, options);
      keyframes2 = pregeneratedAnimation.keyframes;
      if (keyframes2.length === 1) {
        keyframes2[1] = keyframes2[0];
      }
      duration = pregeneratedAnimation.duration;
      times = pregeneratedAnimation.times;
      ease2 = pregeneratedAnimation.ease;
      type = "keyframes";
    }
    const animation = startWaapiAnimation(motionValue2.owner.current, name, keyframes2, { ...this.options, duration, times, ease: ease2 });
    animation.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();
    if (this.pendingTimeline) {
      attachTimeline(animation, this.pendingTimeline);
      this.pendingTimeline = void 0;
    } else {
      animation.onfinish = () => {
        const { onComplete } = this.options;
        motionValue2.set(getFinalKeyframe(keyframes2, this.options, finalKeyframe));
        onComplete && onComplete();
        this.cancel();
        this.resolveFinishedPromise();
      };
    }
    return {
      animation,
      duration,
      times,
      type,
      ease: ease2,
      keyframes: keyframes2
    };
  }
  get duration() {
    const { resolved } = this;
    if (!resolved)
      return 0;
    const { duration } = resolved;
    return /* @__PURE__ */ millisecondsToSeconds(duration);
  }
  get time() {
    const { resolved } = this;
    if (!resolved)
      return 0;
    const { animation } = resolved;
    return /* @__PURE__ */ millisecondsToSeconds(animation.currentTime || 0);
  }
  set time(newTime) {
    const { resolved } = this;
    if (!resolved)
      return;
    const { animation } = resolved;
    animation.currentTime = /* @__PURE__ */ secondsToMilliseconds(newTime);
  }
  get speed() {
    const { resolved } = this;
    if (!resolved)
      return 1;
    const { animation } = resolved;
    return animation.playbackRate;
  }
  set speed(newSpeed) {
    const { resolved } = this;
    if (!resolved)
      return;
    const { animation } = resolved;
    animation.playbackRate = newSpeed;
  }
  get state() {
    const { resolved } = this;
    if (!resolved)
      return "idle";
    const { animation } = resolved;
    return animation.playState;
  }
  get startTime() {
    const { resolved } = this;
    if (!resolved)
      return null;
    const { animation } = resolved;
    return animation.startTime;
  }
  /**
   * Replace the default DocumentTimeline with another AnimationTimeline.
   * Currently used for scroll animations.
   */
  attachTimeline(timeline) {
    if (!this._resolved) {
      this.pendingTimeline = timeline;
    } else {
      const { resolved } = this;
      if (!resolved)
        return noop$1;
      const { animation } = resolved;
      attachTimeline(animation, timeline);
    }
    return noop$1;
  }
  play() {
    if (this.isStopped)
      return;
    const { resolved } = this;
    if (!resolved)
      return;
    const { animation } = resolved;
    if (animation.playState === "finished") {
      this.updateFinishedPromise();
    }
    animation.play();
  }
  pause() {
    const { resolved } = this;
    if (!resolved)
      return;
    const { animation } = resolved;
    animation.pause();
  }
  stop() {
    this.resolver.cancel();
    this.isStopped = true;
    if (this.state === "idle")
      return;
    this.resolveFinishedPromise();
    this.updateFinishedPromise();
    const { resolved } = this;
    if (!resolved)
      return;
    const { animation, keyframes: keyframes2, duration, type, ease: ease2, times } = resolved;
    if (animation.playState === "idle" || animation.playState === "finished") {
      return;
    }
    if (this.time) {
      const { motionValue: motionValue2, onUpdate, onComplete, element, ...options } = this.options;
      const sampleAnimation = new MainThreadAnimation({
        ...options,
        keyframes: keyframes2,
        duration,
        type,
        ease: ease2,
        times,
        isGenerator: true
      });
      const sampleTime = /* @__PURE__ */ secondsToMilliseconds(this.time);
      motionValue2.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);
    }
    const { onStop } = this.options;
    onStop && onStop();
    this.cancel();
  }
  complete() {
    const { resolved } = this;
    if (!resolved)
      return;
    resolved.animation.finish();
  }
  cancel() {
    const { resolved } = this;
    if (!resolved)
      return;
    resolved.animation.cancel();
  }
  static supports(options) {
    const { motionValue: motionValue2, name, repeatDelay, repeatType, damping, type } = options;
    if (!motionValue2 || !motionValue2.owner || !(motionValue2.owner.current instanceof HTMLElement)) {
      return false;
    }
    const { onUpdate, transformTemplate } = motionValue2.owner.getProps();
    return supportsWaapi() && name && acceleratedValues.has(name) && /**
     * If we're outputting values to onUpdate then we can't use WAAPI as there's
     * no way to read the value from WAAPI every frame.
     */
    !onUpdate && !transformTemplate && !repeatDelay && repeatType !== "mirror" && damping !== 0 && type !== "inertia";
  }
}
const underDampedSpring = {
  type: "spring",
  stiffness: 500,
  damping: 25,
  restSpeed: 10
};
const criticallyDampedSpring = (target) => ({
  type: "spring",
  stiffness: 550,
  damping: target === 0 ? 2 * Math.sqrt(550) : 30,
  restSpeed: 10
});
const keyframesTransition = {
  type: "keyframes",
  duration: 0.8
};
const ease = {
  type: "keyframes",
  ease: [0.25, 0.1, 0.35, 1],
  duration: 0.3
};
const getDefaultTransition = (valueKey, { keyframes: keyframes2 }) => {
  if (keyframes2.length > 2) {
    return keyframesTransition;
  } else if (transformProps.has(valueKey)) {
    return valueKey.startsWith("scale") ? criticallyDampedSpring(keyframes2[1]) : underDampedSpring;
  }
  return ease;
};
function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from: from2, elapsed, ...transition }) {
  return !!Object.keys(transition).length;
}
const animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {
  const valueTransition = getValueTransition(transition, name) || {};
  const delay2 = valueTransition.delay || transition.delay || 0;
  let { elapsed = 0 } = transition;
  elapsed = elapsed - /* @__PURE__ */ secondsToMilliseconds(delay2);
  let options = {
    keyframes: Array.isArray(target) ? target : [null, target],
    ease: "easeOut",
    velocity: value.getVelocity(),
    ...valueTransition,
    delay: -elapsed,
    onUpdate: (v2) => {
      value.set(v2);
      valueTransition.onUpdate && valueTransition.onUpdate(v2);
    },
    onComplete: () => {
      onComplete();
      valueTransition.onComplete && valueTransition.onComplete();
    },
    name,
    motionValue: value,
    element: isHandoff ? void 0 : element
  };
  if (!isTransitionDefined(valueTransition)) {
    options = {
      ...options,
      ...getDefaultTransition(name, options)
    };
  }
  if (options.duration) {
    options.duration = /* @__PURE__ */ secondsToMilliseconds(options.duration);
  }
  if (options.repeatDelay) {
    options.repeatDelay = /* @__PURE__ */ secondsToMilliseconds(options.repeatDelay);
  }
  if (options.from !== void 0) {
    options.keyframes[0] = options.from;
  }
  let shouldSkip = false;
  if (options.type === false || options.duration === 0 && !options.repeatDelay) {
    options.duration = 0;
    if (options.delay === 0) {
      shouldSkip = true;
    }
  }
  if (shouldSkip && !isHandoff && value.get() !== void 0) {
    const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);
    if (finalKeyframe !== void 0) {
      frame.update(() => {
        options.onUpdate(finalKeyframe);
        options.onComplete();
      });
      return new GroupPlaybackControls([]);
    }
  }
  if (!isHandoff && AcceleratedAnimation.supports(options)) {
    return new AcceleratedAnimation(options);
  } else {
    return new MainThreadAnimation(options);
  }
};
function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {
  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
  needsAnimating[key] = false;
  return shouldBlock;
}
function animateTarget(visualElement, targetAndTransition, { delay: delay2 = 0, transitionOverride, type } = {}) {
  var _a2;
  let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;
  if (transitionOverride)
    transition = transitionOverride;
  const animations2 = [];
  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];
  for (const key in target) {
    const value = visualElement.getValue(key, (_a2 = visualElement.latestValues[key]) !== null && _a2 !== void 0 ? _a2 : null);
    const valueTarget = target[key];
    if (valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
      continue;
    }
    const valueTransition = {
      delay: delay2,
      ...getValueTransition(transition || {}, key)
    };
    let isHandoff = false;
    if (window.MotionHandoffAnimation) {
      const appearId = getOptimisedAppearId(visualElement);
      if (appearId) {
        const startTime = window.MotionHandoffAnimation(appearId, key, frame);
        if (startTime !== null) {
          valueTransition.startTime = startTime;
          isHandoff = true;
        }
      }
    }
    addValueToWillChange(visualElement, key);
    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && positionalKeys.has(key) ? { type: false } : valueTransition, visualElement, isHandoff));
    const animation = value.animation;
    if (animation) {
      animations2.push(animation);
    }
  }
  if (transitionEnd) {
    Promise.all(animations2).then(() => {
      frame.update(() => {
        transitionEnd && setTarget(visualElement, transitionEnd);
      });
    });
  }
  return animations2;
}
function animateVariant(visualElement, variant, options = {}) {
  var _a2;
  const resolved = resolveVariant(visualElement, variant, options.type === "exit" ? (_a2 = visualElement.presenceContext) === null || _a2 === void 0 ? void 0 : _a2.custom : void 0);
  let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};
  if (options.transitionOverride) {
    transition = options.transitionOverride;
  }
  const getAnimation = resolved ? () => Promise.all(animateTarget(visualElement, resolved, options)) : () => Promise.resolve();
  const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0) => {
    const { delayChildren = 0, staggerChildren, staggerDirection } = transition;
    return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
  } : () => Promise.resolve();
  const { when } = transition;
  if (when) {
    const [first, last] = when === "beforeChildren" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];
    return first().then(() => last());
  } else {
    return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
  }
}
function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
  const animations2 = [];
  const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
  const generateStaggerDuration = staggerDirection === 1 ? (i = 0) => i * staggerChildren : (i = 0) => maxStaggerDuration - i * staggerChildren;
  Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i) => {
    child.notify("AnimationStart", variant);
    animations2.push(animateVariant(child, variant, {
      ...options,
      delay: delayChildren + generateStaggerDuration(i)
    }).then(() => child.notify("AnimationComplete", variant)));
  });
  return Promise.all(animations2);
}
function sortByTreeOrder(a, b2) {
  return a.sortNodePosition(b2);
}
function animateVisualElement(visualElement, definition, options = {}) {
  visualElement.notify("AnimationStart", definition);
  let animation;
  if (Array.isArray(definition)) {
    const animations2 = definition.map((variant) => animateVariant(visualElement, variant, options));
    animation = Promise.all(animations2);
  } else if (typeof definition === "string") {
    animation = animateVariant(visualElement, definition, options);
  } else {
    const resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement, definition, options.custom) : definition;
    animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));
  }
  return animation.then(() => {
    visualElement.notify("AnimationComplete", definition);
  });
}
const numVariantProps = variantProps.length;
function getVariantContext(visualElement) {
  if (!visualElement)
    return void 0;
  if (!visualElement.isControllingVariants) {
    const context2 = visualElement.parent ? getVariantContext(visualElement.parent) || {} : {};
    if (visualElement.props.initial !== void 0) {
      context2.initial = visualElement.props.initial;
    }
    return context2;
  }
  const context = {};
  for (let i = 0; i < numVariantProps; i++) {
    const name = variantProps[i];
    const prop = visualElement.props[name];
    if (isVariantLabel(prop) || prop === false) {
      context[name] = prop;
    }
  }
  return context;
}
const reversePriorityOrder = [...variantPriorityOrder].reverse();
const numAnimationTypes = variantPriorityOrder.length;
function animateList(visualElement) {
  return (animations2) => Promise.all(animations2.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));
}
function createAnimationState(visualElement) {
  let animate = animateList(visualElement);
  let state = createState();
  let isInitialRender = true;
  const buildResolvedTypeValues = (type) => (acc, definition) => {
    var _a2;
    const resolved = resolveVariant(visualElement, definition, type === "exit" ? (_a2 = visualElement.presenceContext) === null || _a2 === void 0 ? void 0 : _a2.custom : void 0);
    if (resolved) {
      const { transition, transitionEnd, ...target } = resolved;
      acc = { ...acc, ...target, ...transitionEnd };
    }
    return acc;
  };
  function setAnimateFunction(makeAnimator) {
    animate = makeAnimator(visualElement);
  }
  function animateChanges(changedActiveType) {
    const { props } = visualElement;
    const context = getVariantContext(visualElement.parent) || {};
    const animations2 = [];
    const removedKeys = /* @__PURE__ */ new Set();
    let encounteredKeys = {};
    let removedVariantIndex = Infinity;
    for (let i = 0; i < numAnimationTypes; i++) {
      const type = reversePriorityOrder[i];
      const typeState = state[type];
      const prop = props[type] !== void 0 ? props[type] : context[type];
      const propIsVariant = isVariantLabel(prop);
      const activeDelta = type === changedActiveType ? typeState.isActive : null;
      if (activeDelta === false)
        removedVariantIndex = i;
      let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
      if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {
        isInherited = false;
      }
      typeState.protectedKeys = { ...encounteredKeys };
      if (
        // If it isn't active and hasn't *just* been set as inactive
        !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type
        !prop && !typeState.prevProp || // Or if the prop doesn't define an animation
        isAnimationControls(prop) || typeof prop === "boolean"
      ) {
        continue;
      }
      const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
      let shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active
      type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)
      i > removedVariantIndex && propIsVariant;
      let handledRemovedValues = false;
      const definitionList = Array.isArray(prop) ? prop : [prop];
      let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});
      if (activeDelta === false)
        resolvedValues = {};
      const { prevResolvedValues = {} } = typeState;
      const allKeys = {
        ...prevResolvedValues,
        ...resolvedValues
      };
      const markToAnimate = (key) => {
        shouldAnimateType = true;
        if (removedKeys.has(key)) {
          handledRemovedValues = true;
          removedKeys.delete(key);
        }
        typeState.needsAnimating[key] = true;
        const motionValue2 = visualElement.getValue(key);
        if (motionValue2)
          motionValue2.liveStyle = false;
      };
      for (const key in allKeys) {
        const next = resolvedValues[key];
        const prev = prevResolvedValues[key];
        if (encounteredKeys.hasOwnProperty(key))
          continue;
        let valueHasChanged = false;
        if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
          valueHasChanged = !shallowCompare(next, prev);
        } else {
          valueHasChanged = next !== prev;
        }
        if (valueHasChanged) {
          if (next !== void 0 && next !== null) {
            markToAnimate(key);
          } else {
            removedKeys.add(key);
          }
        } else if (next !== void 0 && removedKeys.has(key)) {
          markToAnimate(key);
        } else {
          typeState.protectedKeys[key] = true;
        }
      }
      typeState.prevProp = prop;
      typeState.prevResolvedValues = resolvedValues;
      if (typeState.isActive) {
        encounteredKeys = { ...encounteredKeys, ...resolvedValues };
      }
      if (isInitialRender && visualElement.blockInitialAnimation) {
        shouldAnimateType = false;
      }
      const willAnimateViaParent = isInherited && variantDidChange;
      const needsAnimating = !willAnimateViaParent || handledRemovedValues;
      if (shouldAnimateType && needsAnimating) {
        animations2.push(...definitionList.map((animation) => ({
          animation,
          options: { type }
        })));
      }
    }
    if (removedKeys.size) {
      const fallbackAnimation = {};
      removedKeys.forEach((key) => {
        const fallbackTarget = visualElement.getBaseTarget(key);
        const motionValue2 = visualElement.getValue(key);
        if (motionValue2)
          motionValue2.liveStyle = true;
        fallbackAnimation[key] = fallbackTarget !== null && fallbackTarget !== void 0 ? fallbackTarget : null;
      });
      animations2.push({ animation: fallbackAnimation });
    }
    let shouldAnimate = Boolean(animations2.length);
    if (isInitialRender && (props.initial === false || props.initial === props.animate) && !visualElement.manuallyAnimateOnMount) {
      shouldAnimate = false;
    }
    isInitialRender = false;
    return shouldAnimate ? animate(animations2) : Promise.resolve();
  }
  function setActive(type, isActive) {
    var _a2;
    if (state[type].isActive === isActive)
      return Promise.resolve();
    (_a2 = visualElement.variantChildren) === null || _a2 === void 0 ? void 0 : _a2.forEach((child) => {
      var _a3;
      return (_a3 = child.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(type, isActive);
    });
    state[type].isActive = isActive;
    const animations2 = animateChanges(type);
    for (const key in state) {
      state[key].protectedKeys = {};
    }
    return animations2;
  }
  return {
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: () => state,
    reset: () => {
      state = createState();
      isInitialRender = true;
    }
  };
}
function checkVariantsDidChange(prev, next) {
  if (typeof next === "string") {
    return next !== prev;
  } else if (Array.isArray(next)) {
    return !shallowCompare(next, prev);
  }
  return false;
}
function createTypeState(isActive = false) {
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function createState() {
  return {
    animate: createTypeState(true),
    whileInView: createTypeState(),
    whileHover: createTypeState(),
    whileTap: createTypeState(),
    whileDrag: createTypeState(),
    whileFocus: createTypeState(),
    exit: createTypeState()
  };
}
class Feature {
  constructor(node) {
    this.isMounted = false;
    this.node = node;
  }
  update() {
  }
}
class AnimationFeature extends Feature {
  /**
   * We dynamically generate the AnimationState manager as it contains a reference
   * to the underlying animation library. We only want to load that if we load this,
   * so people can optionally code split it out using the `m` component.
   */
  constructor(node) {
    super(node);
    node.animationState || (node.animationState = createAnimationState(node));
  }
  updateAnimationControlsSubscription() {
    const { animate } = this.node.getProps();
    if (isAnimationControls(animate)) {
      this.unmountControls = animate.subscribe(this.node);
    }
  }
  /**
   * Subscribe any provided AnimationControls to the component's VisualElement
   */
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    const { animate } = this.node.getProps();
    const { animate: prevAnimate } = this.node.prevProps || {};
    if (animate !== prevAnimate) {
      this.updateAnimationControlsSubscription();
    }
  }
  unmount() {
    var _a2;
    this.node.animationState.reset();
    (_a2 = this.unmountControls) === null || _a2 === void 0 ? void 0 : _a2.call(this);
  }
}
let id$1 = 0;
class ExitAnimationFeature extends Feature {
  constructor() {
    super(...arguments);
    this.id = id$1++;
  }
  update() {
    if (!this.node.presenceContext)
      return;
    const { isPresent, onExitComplete } = this.node.presenceContext;
    const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
    if (!this.node.animationState || isPresent === prevIsPresent) {
      return;
    }
    const exitAnimation = this.node.animationState.setActive("exit", !isPresent);
    if (onExitComplete && !isPresent) {
      exitAnimation.then(() => onExitComplete(this.id));
    }
  }
  mount() {
    const { register } = this.node.presenceContext || {};
    if (register) {
      this.unmount = register(this.id);
    }
  }
  unmount() {
  }
}
const animations = {
  animation: {
    Feature: AnimationFeature
  },
  exit: {
    Feature: ExitAnimationFeature
  }
};
function addDomEvent(target, eventName, handler, options = { passive: true }) {
  target.addEventListener(eventName, handler, options);
  return () => target.removeEventListener(eventName, handler);
}
function extractEventInfo(event) {
  return {
    point: {
      x: event.pageX,
      y: event.pageY
    }
  };
}
const addPointerInfo = (handler) => {
  return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));
};
function addPointerEvent(target, eventName, handler, options) {
  return addDomEvent(target, eventName, addPointerInfo(handler), options);
}
const distance = (a, b2) => Math.abs(a - b2);
function distance2D(a, b2) {
  const xDelta = distance(a.x, b2.x);
  const yDelta = distance(a.y, b2.y);
  return Math.sqrt(xDelta ** 2 + yDelta ** 2);
}
class PanSession {
  constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false } = {}) {
    this.startEvent = null;
    this.lastMoveEvent = null;
    this.lastMoveEventInfo = null;
    this.handlers = {};
    this.contextWindow = window;
    this.updatePoint = () => {
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const info2 = getPanInfo(this.lastMoveEventInfo, this.history);
      const isPanStarted = this.startEvent !== null;
      const isDistancePastThreshold = distance2D(info2.offset, { x: 0, y: 0 }) >= 3;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      const { point: point2 } = info2;
      const { timestamp: timestamp2 } = frameData;
      this.history.push({ ...point2, timestamp: timestamp2 });
      const { onStart, onMove } = this.handlers;
      if (!isPanStarted) {
        onStart && onStart(this.lastMoveEvent, info2);
        this.startEvent = this.lastMoveEvent;
      }
      onMove && onMove(this.lastMoveEvent, info2);
    };
    this.handlePointerMove = (event2, info2) => {
      this.lastMoveEvent = event2;
      this.lastMoveEventInfo = transformPoint(info2, this.transformPagePoint);
      frame.update(this.updatePoint, true);
    };
    this.handlePointerUp = (event2, info2) => {
      this.end();
      const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;
      if (this.dragSnapToOrigin)
        resumeAnimation && resumeAnimation();
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const panInfo = getPanInfo(event2.type === "pointercancel" ? this.lastMoveEventInfo : transformPoint(info2, this.transformPagePoint), this.history);
      if (this.startEvent && onEnd) {
        onEnd(event2, panInfo);
      }
      onSessionEnd && onSessionEnd(event2, panInfo);
    };
    if (!isPrimaryPointer(event))
      return;
    this.dragSnapToOrigin = dragSnapToOrigin;
    this.handlers = handlers;
    this.transformPagePoint = transformPagePoint;
    this.contextWindow = contextWindow || window;
    const info = extractEventInfo(event);
    const initialInfo = transformPoint(info, this.transformPagePoint);
    const { point } = initialInfo;
    const { timestamp } = frameData;
    this.history = [{ ...point, timestamp }];
    const { onSessionStart } = handlers;
    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
    this.removeListeners = pipe(addPointerEvent(this.contextWindow, "pointermove", this.handlePointerMove), addPointerEvent(this.contextWindow, "pointerup", this.handlePointerUp), addPointerEvent(this.contextWindow, "pointercancel", this.handlePointerUp));
  }
  updateHandlers(handlers) {
    this.handlers = handlers;
  }
  end() {
    this.removeListeners && this.removeListeners();
    cancelFrame(this.updatePoint);
  }
}
function transformPoint(info, transformPagePoint) {
  return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
}
function subtractPoint(a, b2) {
  return { x: a.x - b2.x, y: a.y - b2.y };
}
function getPanInfo({ point }, history) {
  return {
    point,
    delta: subtractPoint(point, lastDevicePoint(history)),
    offset: subtractPoint(point, startDevicePoint(history)),
    velocity: getVelocity(history, 0.1)
  };
}
function startDevicePoint(history) {
  return history[0];
}
function lastDevicePoint(history) {
  return history[history.length - 1];
}
function getVelocity(history, timeDelta) {
  if (history.length < 2) {
    return { x: 0, y: 0 };
  }
  let i = history.length - 1;
  let timestampedPoint = null;
  const lastPoint = lastDevicePoint(history);
  while (i >= 0) {
    timestampedPoint = history[i];
    if (lastPoint.timestamp - timestampedPoint.timestamp > /* @__PURE__ */ secondsToMilliseconds(timeDelta)) {
      break;
    }
    i--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  const time2 = /* @__PURE__ */ millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);
  if (time2 === 0) {
    return { x: 0, y: 0 };
  }
  const currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time2,
    y: (lastPoint.y - timestampedPoint.y) / time2
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}
const SCALE_PRECISION = 1e-4;
const SCALE_MIN = 1 - SCALE_PRECISION;
const SCALE_MAX = 1 + SCALE_PRECISION;
const TRANSLATE_PRECISION = 0.01;
const TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;
const TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;
function calcLength(axis) {
  return axis.max - axis.min;
}
function isNear(value, target, maxDistance) {
  return Math.abs(value - target) <= maxDistance;
}
function calcAxisDelta(delta, source, target, origin = 0.5) {
  delta.origin = origin;
  delta.originPoint = mixNumber$1(source.min, source.max, delta.origin);
  delta.scale = calcLength(target) / calcLength(source);
  delta.translate = mixNumber$1(target.min, target.max, delta.origin) - delta.originPoint;
  if (delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX || isNaN(delta.scale)) {
    delta.scale = 1;
  }
  if (delta.translate >= TRANSLATE_MIN && delta.translate <= TRANSLATE_MAX || isNaN(delta.translate)) {
    delta.translate = 0;
  }
}
function calcBoxDelta(delta, source, target, origin) {
  calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : void 0);
  calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : void 0);
}
function calcRelativeAxis(target, relative, parent) {
  target.min = parent.min + relative.min;
  target.max = target.min + calcLength(relative);
}
function calcRelativeBox(target, relative, parent) {
  calcRelativeAxis(target.x, relative.x, parent.x);
  calcRelativeAxis(target.y, relative.y, parent.y);
}
function calcRelativeAxisPosition(target, layout2, parent) {
  target.min = layout2.min - parent.min;
  target.max = target.min + calcLength(layout2);
}
function calcRelativePosition(target, layout2, parent) {
  calcRelativeAxisPosition(target.x, layout2.x, parent.x);
  calcRelativeAxisPosition(target.y, layout2.y, parent.y);
}
function applyConstraints(point, { min, max }, elastic) {
  if (min !== void 0 && point < min) {
    point = elastic ? mixNumber$1(min, point, elastic.min) : Math.max(point, min);
  } else if (max !== void 0 && point > max) {
    point = elastic ? mixNumber$1(max, point, elastic.max) : Math.min(point, max);
  }
  return point;
}
function calcRelativeAxisConstraints(axis, min, max) {
  return {
    min: min !== void 0 ? axis.min + min : void 0,
    max: max !== void 0 ? axis.max + max - (axis.max - axis.min) : void 0
  };
}
function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
  return {
    x: calcRelativeAxisConstraints(layoutBox.x, left, right),
    y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
  };
}
function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
  let min = constraintsAxis.min - layoutAxis.min;
  let max = constraintsAxis.max - layoutAxis.max;
  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
    [min, max] = [max, min];
  }
  return { min, max };
}
function calcViewportConstraints(layoutBox, constraintsBox) {
  return {
    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
  };
}
function calcOrigin(source, target) {
  let origin = 0.5;
  const sourceLength = calcLength(source);
  const targetLength = calcLength(target);
  if (targetLength > sourceLength) {
    origin = /* @__PURE__ */ progress(target.min, target.max - sourceLength, source.min);
  } else if (sourceLength > targetLength) {
    origin = /* @__PURE__ */ progress(source.min, source.max - targetLength, target.min);
  }
  return clamp(0, 1, origin);
}
function rebaseAxisConstraints(layout2, constraints) {
  const relativeConstraints = {};
  if (constraints.min !== void 0) {
    relativeConstraints.min = constraints.min - layout2.min;
  }
  if (constraints.max !== void 0) {
    relativeConstraints.max = constraints.max - layout2.min;
  }
  return relativeConstraints;
}
const defaultElastic = 0.35;
function resolveDragElastic(dragElastic = defaultElastic) {
  if (dragElastic === false) {
    dragElastic = 0;
  } else if (dragElastic === true) {
    dragElastic = defaultElastic;
  }
  return {
    x: resolveAxisElastic(dragElastic, "left", "right"),
    y: resolveAxisElastic(dragElastic, "top", "bottom")
  };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
  return {
    min: resolvePointElastic(dragElastic, minLabel),
    max: resolvePointElastic(dragElastic, maxLabel)
  };
}
function resolvePointElastic(dragElastic, label) {
  return typeof dragElastic === "number" ? dragElastic : dragElastic[label] || 0;
}
const createAxisDelta = () => ({
  translate: 0,
  scale: 1,
  origin: 0,
  originPoint: 0
});
const createDelta = () => ({
  x: createAxisDelta(),
  y: createAxisDelta()
});
const createAxis = () => ({ min: 0, max: 0 });
const createBox = () => ({
  x: createAxis(),
  y: createAxis()
});
function eachAxis(callback2) {
  return [callback2("x"), callback2("y")];
}
function convertBoundingBoxToBox({ top, left, right, bottom }) {
  return {
    x: { min: left, max: right },
    y: { min: top, max: bottom }
  };
}
function convertBoxToBoundingBox({ x: x2, y: y2 }) {
  return { top: y2.min, right: x2.max, bottom: y2.max, left: x2.min };
}
function transformBoxPoints(point, transformPoint2) {
  if (!transformPoint2)
    return point;
  const topLeft = transformPoint2({ x: point.left, y: point.top });
  const bottomRight = transformPoint2({ x: point.right, y: point.bottom });
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x
  };
}
function isIdentityScale(scale2) {
  return scale2 === void 0 || scale2 === 1;
}
function hasScale({ scale: scale2, scaleX, scaleY }) {
  return !isIdentityScale(scale2) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
}
function hasTransform(values) {
  return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY || values.skewX || values.skewY;
}
function has2DTranslate(values) {
  return is2DTranslate(values.x) || is2DTranslate(values.y);
}
function is2DTranslate(value) {
  return value && value !== "0%";
}
function scalePoint(point, scale2, originPoint) {
  const distanceFromOrigin = point - originPoint;
  const scaled = scale2 * distanceFromOrigin;
  return originPoint + scaled;
}
function applyPointDelta(point, translate, scale2, originPoint, boxScale) {
  if (boxScale !== void 0) {
    point = scalePoint(point, boxScale, originPoint);
  }
  return scalePoint(point, scale2, originPoint) + translate;
}
function applyAxisDelta(axis, translate = 0, scale2 = 1, originPoint, boxScale) {
  axis.min = applyPointDelta(axis.min, translate, scale2, originPoint, boxScale);
  axis.max = applyPointDelta(axis.max, translate, scale2, originPoint, boxScale);
}
function applyBoxDelta(box, { x: x2, y: y2 }) {
  applyAxisDelta(box.x, x2.translate, x2.scale, x2.originPoint);
  applyAxisDelta(box.y, y2.translate, y2.scale, y2.originPoint);
}
const TREE_SCALE_SNAP_MIN = 0.999999999999;
const TREE_SCALE_SNAP_MAX = 1.0000000000001;
function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
  const treeLength = treePath.length;
  if (!treeLength)
    return;
  treeScale.x = treeScale.y = 1;
  let node;
  let delta;
  for (let i = 0; i < treeLength; i++) {
    node = treePath[i];
    delta = node.projectionDelta;
    const { visualElement } = node.options;
    if (visualElement && visualElement.props.style && visualElement.props.style.display === "contents") {
      continue;
    }
    if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {
      transformBox(box, {
        x: -node.scroll.offset.x,
        y: -node.scroll.offset.y
      });
    }
    if (delta) {
      treeScale.x *= delta.x.scale;
      treeScale.y *= delta.y.scale;
      applyBoxDelta(box, delta);
    }
    if (isSharedTransition && hasTransform(node.latestValues)) {
      transformBox(box, node.latestValues);
    }
  }
  if (treeScale.x < TREE_SCALE_SNAP_MAX && treeScale.x > TREE_SCALE_SNAP_MIN) {
    treeScale.x = 1;
  }
  if (treeScale.y < TREE_SCALE_SNAP_MAX && treeScale.y > TREE_SCALE_SNAP_MIN) {
    treeScale.y = 1;
  }
}
function translateAxis(axis, distance2) {
  axis.min = axis.min + distance2;
  axis.max = axis.max + distance2;
}
function transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {
  const originPoint = mixNumber$1(axis.min, axis.max, axisOrigin);
  applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);
}
function transformBox(box, transform) {
  transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);
  transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);
}
function measureViewportBox(instance, transformPoint2) {
  return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2));
}
function measurePageBox(element, rootProjectionNode2, transformPagePoint) {
  const viewportBox = measureViewportBox(element, transformPagePoint);
  const { scroll } = rootProjectionNode2;
  if (scroll) {
    translateAxis(viewportBox.x, scroll.offset.x);
    translateAxis(viewportBox.y, scroll.offset.y);
  }
  return viewportBox;
}
const getContextWindow = ({ current }) => {
  return current ? current.ownerDocument.defaultView : null;
};
const elementDragControls = /* @__PURE__ */ new WeakMap();
class VisualElementDragControls {
  constructor(visualElement) {
    this.openDragLock = null;
    this.isDragging = false;
    this.currentDirection = null;
    this.originPoint = { x: 0, y: 0 };
    this.constraints = false;
    this.hasMutatedConstraints = false;
    this.elastic = createBox();
    this.visualElement = visualElement;
  }
  start(originEvent, { snapToCursor = false } = {}) {
    const { presenceContext } = this.visualElement;
    if (presenceContext && presenceContext.isPresent === false)
      return;
    const onSessionStart = (event) => {
      const { dragSnapToOrigin: dragSnapToOrigin2 } = this.getProps();
      dragSnapToOrigin2 ? this.pauseAnimation() : this.stopAnimation();
      if (snapToCursor) {
        this.snapToCursor(extractEventInfo(event).point);
      }
    };
    const onStart = (event, info) => {
      const { drag: drag2, dragPropagation, onDragStart } = this.getProps();
      if (drag2 && !dragPropagation) {
        if (this.openDragLock)
          this.openDragLock();
        this.openDragLock = setDragLock(drag2);
        if (!this.openDragLock)
          return;
      }
      this.isDragging = true;
      this.currentDirection = null;
      this.resolveConstraints();
      if (this.visualElement.projection) {
        this.visualElement.projection.isAnimationBlocked = true;
        this.visualElement.projection.target = void 0;
      }
      eachAxis((axis) => {
        let current = this.getAxisMotionValue(axis).get() || 0;
        if (percent.test(current)) {
          const { projection } = this.visualElement;
          if (projection && projection.layout) {
            const measuredAxis = projection.layout.layoutBox[axis];
            if (measuredAxis) {
              const length = calcLength(measuredAxis);
              current = length * (parseFloat(current) / 100);
            }
          }
        }
        this.originPoint[axis] = current;
      });
      if (onDragStart) {
        frame.postRender(() => onDragStart(event, info));
      }
      addValueToWillChange(this.visualElement, "transform");
      const { animationState } = this.visualElement;
      animationState && animationState.setActive("whileDrag", true);
    };
    const onMove = (event, info) => {
      const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();
      if (!dragPropagation && !this.openDragLock)
        return;
      const { offset } = info;
      if (dragDirectionLock && this.currentDirection === null) {
        this.currentDirection = getCurrentDirection(offset);
        if (this.currentDirection !== null) {
          onDirectionLock && onDirectionLock(this.currentDirection);
        }
        return;
      }
      this.updateAxis("x", info.point, offset);
      this.updateAxis("y", info.point, offset);
      this.visualElement.render();
      onDrag && onDrag(event, info);
    };
    const onSessionEnd = (event, info) => this.stop(event, info);
    const resumeAnimation = () => eachAxis((axis) => {
      var _a2;
      return this.getAnimationState(axis) === "paused" && ((_a2 = this.getAxisMotionValue(axis).animation) === null || _a2 === void 0 ? void 0 : _a2.play());
    });
    const { dragSnapToOrigin } = this.getProps();
    this.panSession = new PanSession(originEvent, {
      onSessionStart,
      onStart,
      onMove,
      onSessionEnd,
      resumeAnimation
    }, {
      transformPagePoint: this.visualElement.getTransformPagePoint(),
      dragSnapToOrigin,
      contextWindow: getContextWindow(this.visualElement)
    });
  }
  stop(event, info) {
    const isDragging2 = this.isDragging;
    this.cancel();
    if (!isDragging2)
      return;
    const { velocity } = info;
    this.startAnimation(velocity);
    const { onDragEnd } = this.getProps();
    if (onDragEnd) {
      frame.postRender(() => onDragEnd(event, info));
    }
  }
  cancel() {
    this.isDragging = false;
    const { projection, animationState } = this.visualElement;
    if (projection) {
      projection.isAnimationBlocked = false;
    }
    this.panSession && this.panSession.end();
    this.panSession = void 0;
    const { dragPropagation } = this.getProps();
    if (!dragPropagation && this.openDragLock) {
      this.openDragLock();
      this.openDragLock = null;
    }
    animationState && animationState.setActive("whileDrag", false);
  }
  updateAxis(axis, _point, offset) {
    const { drag: drag2 } = this.getProps();
    if (!offset || !shouldDrag(axis, drag2, this.currentDirection))
      return;
    const axisValue = this.getAxisMotionValue(axis);
    let next = this.originPoint[axis] + offset[axis];
    if (this.constraints && this.constraints[axis]) {
      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);
    }
    axisValue.set(next);
  }
  resolveConstraints() {
    var _a2;
    const { dragConstraints, dragElastic } = this.getProps();
    const layout2 = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a2 = this.visualElement.projection) === null || _a2 === void 0 ? void 0 : _a2.layout;
    const prevConstraints = this.constraints;
    if (dragConstraints && isRefObject(dragConstraints)) {
      if (!this.constraints) {
        this.constraints = this.resolveRefConstraints();
      }
    } else {
      if (dragConstraints && layout2) {
        this.constraints = calcRelativeConstraints(layout2.layoutBox, dragConstraints);
      } else {
        this.constraints = false;
      }
    }
    this.elastic = resolveDragElastic(dragElastic);
    if (prevConstraints !== this.constraints && layout2 && this.constraints && !this.hasMutatedConstraints) {
      eachAxis((axis) => {
        if (this.constraints !== false && this.getAxisMotionValue(axis)) {
          this.constraints[axis] = rebaseAxisConstraints(layout2.layoutBox[axis], this.constraints[axis]);
        }
      });
    }
  }
  resolveRefConstraints() {
    const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
    if (!constraints || !isRefObject(constraints))
      return false;
    const constraintsElement = constraints.current;
    const { projection } = this.visualElement;
    if (!projection || !projection.layout)
      return false;
    const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
    let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);
    if (onMeasureDragConstraints) {
      const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
      this.hasMutatedConstraints = !!userConstraints;
      if (userConstraints) {
        measuredConstraints = convertBoundingBoxToBox(userConstraints);
      }
    }
    return measuredConstraints;
  }
  startAnimation(velocity) {
    const { drag: drag2, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps();
    const constraints = this.constraints || {};
    const momentumAnimations = eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, this.currentDirection)) {
        return;
      }
      let transition = constraints && constraints[axis] || {};
      if (dragSnapToOrigin)
        transition = { min: 0, max: 0 };
      const bounceStiffness = dragElastic ? 200 : 1e6;
      const bounceDamping = dragElastic ? 40 : 1e7;
      const inertia2 = {
        type: "inertia",
        velocity: dragMomentum ? velocity[axis] : 0,
        bounceStiffness,
        bounceDamping,
        timeConstant: 750,
        restDelta: 1,
        restSpeed: 10,
        ...dragTransition,
        ...transition
      };
      return this.startAxisValueAnimation(axis, inertia2);
    });
    return Promise.all(momentumAnimations).then(onDragTransitionEnd);
  }
  startAxisValueAnimation(axis, transition) {
    const axisValue = this.getAxisMotionValue(axis);
    addValueToWillChange(this.visualElement, axis);
    return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));
  }
  stopAnimation() {
    eachAxis((axis) => this.getAxisMotionValue(axis).stop());
  }
  pauseAnimation() {
    eachAxis((axis) => {
      var _a2;
      return (_a2 = this.getAxisMotionValue(axis).animation) === null || _a2 === void 0 ? void 0 : _a2.pause();
    });
  }
  getAnimationState(axis) {
    var _a2;
    return (_a2 = this.getAxisMotionValue(axis).animation) === null || _a2 === void 0 ? void 0 : _a2.state;
  }
  /**
   * Drag works differently depending on which props are provided.
   *
   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
   * - Otherwise, we apply the delta to the x/y motion values.
   */
  getAxisMotionValue(axis) {
    const dragKey = `_drag${axis.toUpperCase()}`;
    const props = this.visualElement.getProps();
    const externalMotionValue = props[dragKey];
    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : void 0) || 0);
  }
  snapToCursor(point) {
    eachAxis((axis) => {
      const { drag: drag2 } = this.getProps();
      if (!shouldDrag(axis, drag2, this.currentDirection))
        return;
      const { projection } = this.visualElement;
      const axisValue = this.getAxisMotionValue(axis);
      if (projection && projection.layout) {
        const { min, max } = projection.layout.layoutBox[axis];
        axisValue.set(point[axis] - mixNumber$1(min, max, 0.5));
      }
    });
  }
  /**
   * When the viewport resizes we want to check if the measured constraints
   * have changed and, if so, reposition the element within those new constraints
   * relative to where it was before the resize.
   */
  scalePositionWithinConstraints() {
    if (!this.visualElement.current)
      return;
    const { drag: drag2, dragConstraints } = this.getProps();
    const { projection } = this.visualElement;
    if (!isRefObject(dragConstraints) || !projection || !this.constraints)
      return;
    this.stopAnimation();
    const boxProgress = { x: 0, y: 0 };
    eachAxis((axis) => {
      const axisValue = this.getAxisMotionValue(axis);
      if (axisValue && this.constraints !== false) {
        const latest = axisValue.get();
        boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);
      }
    });
    const { transformTemplate } = this.visualElement.getProps();
    this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, "") : "none";
    projection.root && projection.root.updateScroll();
    projection.updateLayout();
    this.resolveConstraints();
    eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, null))
        return;
      const axisValue = this.getAxisMotionValue(axis);
      const { min, max } = this.constraints[axis];
      axisValue.set(mixNumber$1(min, max, boxProgress[axis]));
    });
  }
  addListeners() {
    if (!this.visualElement.current)
      return;
    elementDragControls.set(this.visualElement, this);
    const element = this.visualElement.current;
    const stopPointerListener = addPointerEvent(element, "pointerdown", (event) => {
      const { drag: drag2, dragListener = true } = this.getProps();
      drag2 && dragListener && this.start(event);
    });
    const measureDragConstraints = () => {
      const { dragConstraints } = this.getProps();
      if (isRefObject(dragConstraints) && dragConstraints.current) {
        this.constraints = this.resolveRefConstraints();
      }
    };
    const { projection } = this.visualElement;
    const stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
    if (projection && !projection.layout) {
      projection.root && projection.root.updateScroll();
      projection.updateLayout();
    }
    frame.read(measureDragConstraints);
    const stopResizeListener = addDomEvent(window, "resize", () => this.scalePositionWithinConstraints());
    const stopLayoutUpdateListener = projection.addEventListener("didUpdate", ({ delta, hasLayoutChanged }) => {
      if (this.isDragging && hasLayoutChanged) {
        eachAxis((axis) => {
          const motionValue2 = this.getAxisMotionValue(axis);
          if (!motionValue2)
            return;
          this.originPoint[axis] += delta[axis].translate;
          motionValue2.set(motionValue2.get() + delta[axis].translate);
        });
        this.visualElement.render();
      }
    });
    return () => {
      stopResizeListener();
      stopPointerListener();
      stopMeasureLayoutListener();
      stopLayoutUpdateListener && stopLayoutUpdateListener();
    };
  }
  getProps() {
    const props = this.visualElement.getProps();
    const { drag: drag2 = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true } = props;
    return {
      ...props,
      drag: drag2,
      dragDirectionLock,
      dragPropagation,
      dragConstraints,
      dragElastic,
      dragMomentum
    };
  }
}
function shouldDrag(direction, drag2, currentDirection) {
  return (drag2 === true || drag2 === direction) && (currentDirection === null || currentDirection === direction);
}
function getCurrentDirection(offset, lockThreshold = 10) {
  let direction = null;
  if (Math.abs(offset.y) > lockThreshold) {
    direction = "y";
  } else if (Math.abs(offset.x) > lockThreshold) {
    direction = "x";
  }
  return direction;
}
class DragGesture extends Feature {
  constructor(node) {
    super(node);
    this.removeGroupControls = noop$1;
    this.removeListeners = noop$1;
    this.controls = new VisualElementDragControls(node);
  }
  mount() {
    const { dragControls } = this.node.getProps();
    if (dragControls) {
      this.removeGroupControls = dragControls.subscribe(this.controls);
    }
    this.removeListeners = this.controls.addListeners() || noop$1;
  }
  unmount() {
    this.removeGroupControls();
    this.removeListeners();
  }
}
const asyncHandler = (handler) => (event, info) => {
  if (handler) {
    frame.postRender(() => handler(event, info));
  }
};
class PanGesture extends Feature {
  constructor() {
    super(...arguments);
    this.removePointerDownListener = noop$1;
  }
  onPointerDown(pointerDownEvent) {
    this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {
      transformPagePoint: this.node.getTransformPagePoint(),
      contextWindow: getContextWindow(this.node)
    });
  }
  createPanHandlers() {
    const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
    return {
      onSessionStart: asyncHandler(onPanSessionStart),
      onStart: asyncHandler(onPanStart),
      onMove: onPan,
      onEnd: (event, info) => {
        delete this.session;
        if (onPanEnd) {
          frame.postRender(() => onPanEnd(event, info));
        }
      }
    };
  }
  mount() {
    this.removePointerDownListener = addPointerEvent(this.node.current, "pointerdown", (event) => this.onPointerDown(event));
  }
  update() {
    this.session && this.session.updateHandlers(this.createPanHandlers());
  }
  unmount() {
    this.removePointerDownListener();
    this.session && this.session.end();
  }
}
const globalProjectionState = {
  /**
   * Global flag as to whether the tree has animated since the last time
   * we resized the window
   */
  hasAnimatedSinceResize: true,
  /**
   * We set this to true once, on the first update. Any nodes added to the tree beyond that
   * update will be given a `data-projection-id` attribute.
   */
  hasEverUpdated: false
};
function pixelsToPercent(pixels, axis) {
  if (axis.max === axis.min)
    return 0;
  return pixels / (axis.max - axis.min) * 100;
}
const correctBorderRadius = {
  correct: (latest, node) => {
    if (!node.target)
      return latest;
    if (typeof latest === "string") {
      if (px.test(latest)) {
        latest = parseFloat(latest);
      } else {
        return latest;
      }
    }
    const x2 = pixelsToPercent(latest, node.target.x);
    const y2 = pixelsToPercent(latest, node.target.y);
    return `${x2}% ${y2}%`;
  }
};
const correctBoxShadow = {
  correct: (latest, { treeScale, projectionDelta }) => {
    const original = latest;
    const shadow = complex.parse(latest);
    if (shadow.length > 5)
      return original;
    const template = complex.createTransformer(latest);
    const offset = typeof shadow[0] !== "number" ? 1 : 0;
    const xScale = projectionDelta.x.scale * treeScale.x;
    const yScale = projectionDelta.y.scale * treeScale.y;
    shadow[0 + offset] /= xScale;
    shadow[1 + offset] /= yScale;
    const averageScale = mixNumber$1(xScale, yScale, 0.5);
    if (typeof shadow[2 + offset] === "number")
      shadow[2 + offset] /= averageScale;
    if (typeof shadow[3 + offset] === "number")
      shadow[3 + offset] /= averageScale;
    return template(shadow);
  }
};
class MeasureLayoutWithContext extends reactExports.Component {
  /**
   * This only mounts projection nodes for components that
   * need measuring, we might want to do it for all components
   * in order to incorporate transforms
   */
  componentDidMount() {
    const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;
    const { projection } = visualElement;
    addScaleCorrector(defaultScaleCorrectors);
    if (projection) {
      if (layoutGroup.group)
        layoutGroup.group.add(projection);
      if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
        switchLayoutGroup.register(projection);
      }
      projection.root.didUpdate();
      projection.addEventListener("animationComplete", () => {
        this.safeToRemove();
      });
      projection.setOptions({
        ...projection.options,
        onExitComplete: () => this.safeToRemove()
      });
    }
    globalProjectionState.hasEverUpdated = true;
  }
  getSnapshotBeforeUpdate(prevProps) {
    const { layoutDependency, visualElement, drag: drag2, isPresent } = this.props;
    const projection = visualElement.projection;
    if (!projection)
      return null;
    projection.isPresent = isPresent;
    if (drag2 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
      projection.willUpdate();
    } else {
      this.safeToRemove();
    }
    if (prevProps.isPresent !== isPresent) {
      if (isPresent) {
        projection.promote();
      } else if (!projection.relegate()) {
        frame.postRender(() => {
          const stack = projection.getStack();
          if (!stack || !stack.members.length) {
            this.safeToRemove();
          }
        });
      }
    }
    return null;
  }
  componentDidUpdate() {
    const { projection } = this.props.visualElement;
    if (projection) {
      projection.root.didUpdate();
      microtask.postRender(() => {
        if (!projection.currentAnimation && projection.isLead()) {
          this.safeToRemove();
        }
      });
    }
  }
  componentWillUnmount() {
    const { visualElement, layoutGroup, switchLayoutGroup: promoteContext } = this.props;
    const { projection } = visualElement;
    if (projection) {
      projection.scheduleCheckAfterUnmount();
      if (layoutGroup && layoutGroup.group)
        layoutGroup.group.remove(projection);
      if (promoteContext && promoteContext.deregister)
        promoteContext.deregister(projection);
    }
  }
  safeToRemove() {
    const { safeToRemove } = this.props;
    safeToRemove && safeToRemove();
  }
  render() {
    return null;
  }
}
function MeasureLayout(props) {
  const [isPresent, safeToRemove] = usePresence();
  const layoutGroup = reactExports.useContext(LayoutGroupContext);
  return jsxRuntimeExports.jsx(MeasureLayoutWithContext, { ...props, layoutGroup, switchLayoutGroup: reactExports.useContext(SwitchLayoutGroupContext), isPresent, safeToRemove });
}
const defaultScaleCorrectors = {
  borderRadius: {
    ...correctBorderRadius,
    applyTo: [
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "borderBottomLeftRadius",
      "borderBottomRightRadius"
    ]
  },
  borderTopLeftRadius: correctBorderRadius,
  borderTopRightRadius: correctBorderRadius,
  borderBottomLeftRadius: correctBorderRadius,
  borderBottomRightRadius: correctBorderRadius,
  boxShadow: correctBoxShadow
};
function animateSingleValue(value, keyframes2, options) {
  const motionValue$1 = isMotionValue(value) ? value : motionValue(value);
  motionValue$1.start(animateMotionValue("", motionValue$1, keyframes2, options));
  return motionValue$1.animation;
}
function isSVGElement(element) {
  return element instanceof SVGElement && element.tagName !== "svg";
}
const compareByDepth = (a, b2) => a.depth - b2.depth;
class FlatTree {
  constructor() {
    this.children = [];
    this.isDirty = false;
  }
  add(child) {
    addUniqueItem(this.children, child);
    this.isDirty = true;
  }
  remove(child) {
    removeItem(this.children, child);
    this.isDirty = true;
  }
  forEach(callback2) {
    this.isDirty && this.children.sort(compareByDepth);
    this.isDirty = false;
    this.children.forEach(callback2);
  }
}
function delay(callback2, timeout) {
  const start = time.now();
  const checkElapsed = ({ timestamp }) => {
    const elapsed = timestamp - start;
    if (elapsed >= timeout) {
      cancelFrame(checkElapsed);
      callback2(elapsed - timeout);
    }
  };
  frame.read(checkElapsed, true);
  return () => cancelFrame(checkElapsed);
}
const borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
const numBorders = borders.length;
const asNumber = (value) => typeof value === "string" ? parseFloat(value) : value;
const isPx = (value) => typeof value === "number" || px.test(value);
function mixValues(target, follow, lead, progress2, shouldCrossfadeOpacity, isOnlyMember) {
  if (shouldCrossfadeOpacity) {
    target.opacity = mixNumber$1(
      0,
      // TODO Reinstate this if only child
      lead.opacity !== void 0 ? lead.opacity : 1,
      easeCrossfadeIn(progress2)
    );
    target.opacityExit = mixNumber$1(follow.opacity !== void 0 ? follow.opacity : 1, 0, easeCrossfadeOut(progress2));
  } else if (isOnlyMember) {
    target.opacity = mixNumber$1(follow.opacity !== void 0 ? follow.opacity : 1, lead.opacity !== void 0 ? lead.opacity : 1, progress2);
  }
  for (let i = 0; i < numBorders; i++) {
    const borderLabel = `border${borders[i]}Radius`;
    let followRadius = getRadius(follow, borderLabel);
    let leadRadius = getRadius(lead, borderLabel);
    if (followRadius === void 0 && leadRadius === void 0)
      continue;
    followRadius || (followRadius = 0);
    leadRadius || (leadRadius = 0);
    const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
    if (canMix) {
      target[borderLabel] = Math.max(mixNumber$1(asNumber(followRadius), asNumber(leadRadius), progress2), 0);
      if (percent.test(leadRadius) || percent.test(followRadius)) {
        target[borderLabel] += "%";
      }
    } else {
      target[borderLabel] = leadRadius;
    }
  }
  if (follow.rotate || lead.rotate) {
    target.rotate = mixNumber$1(follow.rotate || 0, lead.rotate || 0, progress2);
  }
}
function getRadius(values, radiusName) {
  return values[radiusName] !== void 0 ? values[radiusName] : values.borderRadius;
}
const easeCrossfadeIn = /* @__PURE__ */ compress(0, 0.5, circOut);
const easeCrossfadeOut = /* @__PURE__ */ compress(0.5, 0.95, noop$1);
function compress(min, max, easing) {
  return (p2) => {
    if (p2 < min)
      return 0;
    if (p2 > max)
      return 1;
    return easing(/* @__PURE__ */ progress(min, max, p2));
  };
}
function copyAxisInto(axis, originAxis) {
  axis.min = originAxis.min;
  axis.max = originAxis.max;
}
function copyBoxInto(box, originBox) {
  copyAxisInto(box.x, originBox.x);
  copyAxisInto(box.y, originBox.y);
}
function copyAxisDeltaInto(delta, originDelta) {
  delta.translate = originDelta.translate;
  delta.scale = originDelta.scale;
  delta.originPoint = originDelta.originPoint;
  delta.origin = originDelta.origin;
}
function removePointDelta(point, translate, scale2, originPoint, boxScale) {
  point -= translate;
  point = scalePoint(point, 1 / scale2, originPoint);
  if (boxScale !== void 0) {
    point = scalePoint(point, 1 / boxScale, originPoint);
  }
  return point;
}
function removeAxisDelta(axis, translate = 0, scale2 = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
  if (percent.test(translate)) {
    translate = parseFloat(translate);
    const relativeProgress = mixNumber$1(sourceAxis.min, sourceAxis.max, translate / 100);
    translate = relativeProgress - sourceAxis.min;
  }
  if (typeof translate !== "number")
    return;
  let originPoint = mixNumber$1(originAxis.min, originAxis.max, origin);
  if (axis === originAxis)
    originPoint -= translate;
  axis.min = removePointDelta(axis.min, translate, scale2, originPoint, boxScale);
  axis.max = removePointDelta(axis.max, translate, scale2, originPoint, boxScale);
}
function removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {
  removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);
}
const xKeys = ["x", "scaleX", "originX"];
const yKeys = ["y", "scaleY", "originY"];
function removeBoxTransforms(box, transforms, originBox, sourceBox) {
  removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : void 0, sourceBox ? sourceBox.x : void 0);
  removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : void 0, sourceBox ? sourceBox.y : void 0);
}
function isAxisDeltaZero(delta) {
  return delta.translate === 0 && delta.scale === 1;
}
function isDeltaZero(delta) {
  return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
}
function axisEquals(a, b2) {
  return a.min === b2.min && a.max === b2.max;
}
function boxEquals(a, b2) {
  return axisEquals(a.x, b2.x) && axisEquals(a.y, b2.y);
}
function axisEqualsRounded(a, b2) {
  return Math.round(a.min) === Math.round(b2.min) && Math.round(a.max) === Math.round(b2.max);
}
function boxEqualsRounded(a, b2) {
  return axisEqualsRounded(a.x, b2.x) && axisEqualsRounded(a.y, b2.y);
}
function aspectRatio(box) {
  return calcLength(box.x) / calcLength(box.y);
}
function axisDeltaEquals(a, b2) {
  return a.translate === b2.translate && a.scale === b2.scale && a.originPoint === b2.originPoint;
}
class NodeStack {
  constructor() {
    this.members = [];
  }
  add(node) {
    addUniqueItem(this.members, node);
    node.scheduleRender();
  }
  remove(node) {
    removeItem(this.members, node);
    if (node === this.prevLead) {
      this.prevLead = void 0;
    }
    if (node === this.lead) {
      const prevLead = this.members[this.members.length - 1];
      if (prevLead) {
        this.promote(prevLead);
      }
    }
  }
  relegate(node) {
    const indexOfNode = this.members.findIndex((member) => node === member);
    if (indexOfNode === 0)
      return false;
    let prevLead;
    for (let i = indexOfNode; i >= 0; i--) {
      const member = this.members[i];
      if (member.isPresent !== false) {
        prevLead = member;
        break;
      }
    }
    if (prevLead) {
      this.promote(prevLead);
      return true;
    } else {
      return false;
    }
  }
  promote(node, preserveFollowOpacity) {
    const prevLead = this.lead;
    if (node === prevLead)
      return;
    this.prevLead = prevLead;
    this.lead = node;
    node.show();
    if (prevLead) {
      prevLead.instance && prevLead.scheduleRender();
      node.scheduleRender();
      node.resumeFrom = prevLead;
      if (preserveFollowOpacity) {
        node.resumeFrom.preserveOpacity = true;
      }
      if (prevLead.snapshot) {
        node.snapshot = prevLead.snapshot;
        node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
      }
      if (node.root && node.root.isUpdating) {
        node.isLayoutDirty = true;
      }
      const { crossfade } = node.options;
      if (crossfade === false) {
        prevLead.hide();
      }
    }
  }
  exitAnimationComplete() {
    this.members.forEach((node) => {
      const { options, resumingFrom } = node;
      options.onExitComplete && options.onExitComplete();
      if (resumingFrom) {
        resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();
      }
    });
  }
  scheduleRender() {
    this.members.forEach((node) => {
      node.instance && node.scheduleRender(false);
    });
  }
  /**
   * Clear any leads that have been removed this render to prevent them from being
   * used in future animations and to prevent memory leaks
   */
  removeLeadSnapshot() {
    if (this.lead && this.lead.snapshot) {
      this.lead.snapshot = void 0;
    }
  }
}
function buildProjectionTransform(delta, treeScale, latestTransform) {
  let transform = "";
  const xTranslate = delta.x.translate / treeScale.x;
  const yTranslate = delta.y.translate / treeScale.y;
  const zTranslate = (latestTransform === null || latestTransform === void 0 ? void 0 : latestTransform.z) || 0;
  if (xTranslate || yTranslate || zTranslate) {
    transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;
  }
  if (treeScale.x !== 1 || treeScale.y !== 1) {
    transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
  }
  if (latestTransform) {
    const { transformPerspective, rotate: rotate2, rotateX, rotateY, skewX, skewY } = latestTransform;
    if (transformPerspective)
      transform = `perspective(${transformPerspective}px) ${transform}`;
    if (rotate2)
      transform += `rotate(${rotate2}deg) `;
    if (rotateX)
      transform += `rotateX(${rotateX}deg) `;
    if (rotateY)
      transform += `rotateY(${rotateY}deg) `;
    if (skewX)
      transform += `skewX(${skewX}deg) `;
    if (skewY)
      transform += `skewY(${skewY}deg) `;
  }
  const elementScaleX = delta.x.scale * treeScale.x;
  const elementScaleY = delta.y.scale * treeScale.y;
  if (elementScaleX !== 1 || elementScaleY !== 1) {
    transform += `scale(${elementScaleX}, ${elementScaleY})`;
  }
  return transform || "none";
}
const metrics = {
  type: "projectionFrame",
  totalNodes: 0,
  resolvedTargetDeltas: 0,
  recalculatedProjection: 0
};
const isDebug = typeof window !== "undefined" && window.MotionDebug !== void 0;
const transformAxes = ["", "X", "Y", "Z"];
const hiddenVisibility = { visibility: "hidden" };
const animationTarget = 1e3;
let id = 0;
function resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {
  const { latestValues } = visualElement;
  if (latestValues[key]) {
    values[key] = latestValues[key];
    visualElement.setStaticValue(key, 0);
    if (sharedAnimationValues) {
      sharedAnimationValues[key] = 0;
    }
  }
}
function cancelTreeOptimisedTransformAnimations(projectionNode) {
  projectionNode.hasCheckedOptimisedAppear = true;
  if (projectionNode.root === projectionNode)
    return;
  const { visualElement } = projectionNode.options;
  if (!visualElement)
    return;
  const appearId = getOptimisedAppearId(visualElement);
  if (window.MotionHasOptimisedAnimation(appearId, "transform")) {
    const { layout: layout2, layoutId } = projectionNode.options;
    window.MotionCancelOptimisedAnimation(appearId, "transform", frame, !(layout2 || layoutId));
  }
  const { parent } = projectionNode;
  if (parent && !parent.hasCheckedOptimisedAppear) {
    cancelTreeOptimisedTransformAnimations(parent);
  }
}
function createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {
  return class ProjectionNode {
    constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {
      this.id = id++;
      this.animationId = 0;
      this.children = /* @__PURE__ */ new Set();
      this.options = {};
      this.isTreeAnimating = false;
      this.isAnimationBlocked = false;
      this.isLayoutDirty = false;
      this.isProjectionDirty = false;
      this.isSharedProjectionDirty = false;
      this.isTransformDirty = false;
      this.updateManuallyBlocked = false;
      this.updateBlockedByResize = false;
      this.isUpdating = false;
      this.isSVG = false;
      this.needsReset = false;
      this.shouldResetTransform = false;
      this.hasCheckedOptimisedAppear = false;
      this.treeScale = { x: 1, y: 1 };
      this.eventHandlers = /* @__PURE__ */ new Map();
      this.hasTreeAnimated = false;
      this.updateScheduled = false;
      this.scheduleUpdate = () => this.update();
      this.projectionUpdateScheduled = false;
      this.checkUpdateFailed = () => {
        if (this.isUpdating) {
          this.isUpdating = false;
          this.clearAllSnapshots();
        }
      };
      this.updateProjection = () => {
        this.projectionUpdateScheduled = false;
        if (isDebug) {
          metrics.totalNodes = metrics.resolvedTargetDeltas = metrics.recalculatedProjection = 0;
        }
        this.nodes.forEach(propagateDirtyNodes);
        this.nodes.forEach(resolveTargetDelta);
        this.nodes.forEach(calcProjection);
        this.nodes.forEach(cleanDirtyNodes);
        if (isDebug) {
          window.MotionDebug.record(metrics);
        }
      };
      this.resolvedRelativeTargetAt = 0;
      this.hasProjected = false;
      this.isVisible = true;
      this.animationProgress = 0;
      this.sharedNodes = /* @__PURE__ */ new Map();
      this.latestValues = latestValues;
      this.root = parent ? parent.root || parent : this;
      this.path = parent ? [...parent.path, parent] : [];
      this.parent = parent;
      this.depth = parent ? parent.depth + 1 : 0;
      for (let i = 0; i < this.path.length; i++) {
        this.path[i].shouldResetTransform = true;
      }
      if (this.root === this)
        this.nodes = new FlatTree();
    }
    addEventListener(name, handler) {
      if (!this.eventHandlers.has(name)) {
        this.eventHandlers.set(name, new SubscriptionManager());
      }
      return this.eventHandlers.get(name).add(handler);
    }
    notifyListeners(name, ...args) {
      const subscriptionManager = this.eventHandlers.get(name);
      subscriptionManager && subscriptionManager.notify(...args);
    }
    hasListeners(name) {
      return this.eventHandlers.has(name);
    }
    /**
     * Lifecycles
     */
    mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {
      if (this.instance)
        return;
      this.isSVG = isSVGElement(instance);
      this.instance = instance;
      const { layoutId, layout: layout2, visualElement } = this.options;
      if (visualElement && !visualElement.current) {
        visualElement.mount(instance);
      }
      this.root.nodes.add(this);
      this.parent && this.parent.children.add(this);
      if (isLayoutDirty && (layout2 || layoutId)) {
        this.isLayoutDirty = true;
      }
      if (attachResizeListener) {
        let cancelDelay;
        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;
        attachResizeListener(instance, () => {
          this.root.updateBlockedByResize = true;
          cancelDelay && cancelDelay();
          cancelDelay = delay(resizeUnblockUpdate, 250);
          if (globalProjectionState.hasAnimatedSinceResize) {
            globalProjectionState.hasAnimatedSinceResize = false;
            this.nodes.forEach(finishAnimation);
          }
        });
      }
      if (layoutId) {
        this.root.registerSharedNode(layoutId, this);
      }
      if (this.options.animate !== false && visualElement && (layoutId || layout2)) {
        this.addEventListener("didUpdate", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout }) => {
          if (this.isTreeAnimationBlocked()) {
            this.target = void 0;
            this.relativeTarget = void 0;
            return;
          }
          const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;
          const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps();
          const targetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout) || hasRelativeTargetChanged;
          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
          if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {
            if (this.resumeFrom) {
              this.resumingFrom = this.resumeFrom;
              this.resumingFrom.resumingFrom = void 0;
            }
            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
            const animationOptions = {
              ...getValueTransition(layoutTransition, "layout"),
              onPlay: onLayoutAnimationStart,
              onComplete: onLayoutAnimationComplete
            };
            if (visualElement.shouldReduceMotion || this.options.layoutRoot) {
              animationOptions.delay = 0;
              animationOptions.type = false;
            }
            this.startAnimation(animationOptions);
          } else {
            if (!hasLayoutChanged) {
              finishAnimation(this);
            }
            if (this.isLead() && this.options.onExitComplete) {
              this.options.onExitComplete();
            }
          }
          this.targetLayout = newLayout;
        });
      }
    }
    unmount() {
      this.options.layoutId && this.willUpdate();
      this.root.nodes.remove(this);
      const stack = this.getStack();
      stack && stack.remove(this);
      this.parent && this.parent.children.delete(this);
      this.instance = void 0;
      cancelFrame(this.updateProjection);
    }
    // only on the root
    blockUpdate() {
      this.updateManuallyBlocked = true;
    }
    unblockUpdate() {
      this.updateManuallyBlocked = false;
    }
    isUpdateBlocked() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    }
    isTreeAnimationBlocked() {
      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;
    }
    // Note: currently only running on root node
    startUpdate() {
      if (this.isUpdateBlocked())
        return;
      this.isUpdating = true;
      this.nodes && this.nodes.forEach(resetSkewAndRotation);
      this.animationId++;
    }
    getTransformTemplate() {
      const { visualElement } = this.options;
      return visualElement && visualElement.getProps().transformTemplate;
    }
    willUpdate(shouldNotifyListeners = true) {
      this.root.hasTreeAnimated = true;
      if (this.root.isUpdateBlocked()) {
        this.options.onExitComplete && this.options.onExitComplete();
        return;
      }
      if (window.MotionCancelOptimisedAnimation && !this.hasCheckedOptimisedAppear) {
        cancelTreeOptimisedTransformAnimations(this);
      }
      !this.root.isUpdating && this.root.startUpdate();
      if (this.isLayoutDirty)
        return;
      this.isLayoutDirty = true;
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        node.shouldResetTransform = true;
        node.updateScroll("snapshot");
        if (node.options.layoutRoot) {
          node.willUpdate(false);
        }
      }
      const { layoutId, layout: layout2 } = this.options;
      if (layoutId === void 0 && !layout2)
        return;
      const transformTemplate = this.getTransformTemplate();
      this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : void 0;
      this.updateSnapshot();
      shouldNotifyListeners && this.notifyListeners("willUpdate");
    }
    update() {
      this.updateScheduled = false;
      const updateWasBlocked = this.isUpdateBlocked();
      if (updateWasBlocked) {
        this.unblockUpdate();
        this.clearAllSnapshots();
        this.nodes.forEach(clearMeasurements);
        return;
      }
      if (!this.isUpdating) {
        this.nodes.forEach(clearIsLayoutDirty);
      }
      this.isUpdating = false;
      this.nodes.forEach(resetTransformStyle);
      this.nodes.forEach(updateLayout);
      this.nodes.forEach(notifyLayoutUpdate);
      this.clearAllSnapshots();
      const now2 = time.now();
      frameData.delta = clamp(0, 1e3 / 60, now2 - frameData.timestamp);
      frameData.timestamp = now2;
      frameData.isProcessing = true;
      frameSteps.update.process(frameData);
      frameSteps.preRender.process(frameData);
      frameSteps.render.process(frameData);
      frameData.isProcessing = false;
    }
    didUpdate() {
      if (!this.updateScheduled) {
        this.updateScheduled = true;
        microtask.read(this.scheduleUpdate);
      }
    }
    clearAllSnapshots() {
      this.nodes.forEach(clearSnapshot);
      this.sharedNodes.forEach(removeLeadSnapshots);
    }
    scheduleUpdateProjection() {
      if (!this.projectionUpdateScheduled) {
        this.projectionUpdateScheduled = true;
        frame.preRender(this.updateProjection, false, true);
      }
    }
    scheduleCheckAfterUnmount() {
      frame.postRender(() => {
        if (this.isLayoutDirty) {
          this.root.didUpdate();
        } else {
          this.root.checkUpdateFailed();
        }
      });
    }
    /**
     * Update measurements
     */
    updateSnapshot() {
      if (this.snapshot || !this.instance)
        return;
      this.snapshot = this.measure();
    }
    updateLayout() {
      if (!this.instance)
        return;
      this.updateScroll();
      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
        return;
      }
      if (this.resumeFrom && !this.resumeFrom.instance) {
        for (let i = 0; i < this.path.length; i++) {
          const node = this.path[i];
          node.updateScroll();
        }
      }
      const prevLayout = this.layout;
      this.layout = this.measure(false);
      this.layoutCorrected = createBox();
      this.isLayoutDirty = false;
      this.projectionDelta = void 0;
      this.notifyListeners("measure", this.layout.layoutBox);
      const { visualElement } = this.options;
      visualElement && visualElement.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : void 0);
    }
    updateScroll(phase = "measure") {
      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {
        needsMeasurement = false;
      }
      if (needsMeasurement) {
        const isRoot = checkIsScrollRoot(this.instance);
        this.scroll = {
          animationId: this.root.animationId,
          phase,
          isRoot,
          offset: measureScroll(this.instance),
          wasRoot: this.scroll ? this.scroll.isRoot : isRoot
        };
      }
    }
    resetTransform() {
      if (!resetTransform)
        return;
      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform || this.options.alwaysMeasureLayout;
      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
      const transformTemplate = this.getTransformTemplate();
      const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : void 0;
      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {
        resetTransform(this.instance, transformTemplateValue);
        this.shouldResetTransform = false;
        this.scheduleRender();
      }
    }
    measure(removeTransform = true) {
      const pageBox = this.measurePageBox();
      let layoutBox = this.removeElementScroll(pageBox);
      if (removeTransform) {
        layoutBox = this.removeTransform(layoutBox);
      }
      roundBox(layoutBox);
      return {
        animationId: this.root.animationId,
        measuredBox: pageBox,
        layoutBox,
        latestValues: {},
        source: this.id
      };
    }
    measurePageBox() {
      var _a2;
      const { visualElement } = this.options;
      if (!visualElement)
        return createBox();
      const box = visualElement.measureViewportBox();
      const wasInScrollRoot = ((_a2 = this.scroll) === null || _a2 === void 0 ? void 0 : _a2.wasRoot) || this.path.some(checkNodeWasScrollRoot);
      if (!wasInScrollRoot) {
        const { scroll } = this.root;
        if (scroll) {
          translateAxis(box.x, scroll.offset.x);
          translateAxis(box.y, scroll.offset.y);
        }
      }
      return box;
    }
    removeElementScroll(box) {
      var _a2;
      const boxWithoutScroll = createBox();
      copyBoxInto(boxWithoutScroll, box);
      if ((_a2 = this.scroll) === null || _a2 === void 0 ? void 0 : _a2.wasRoot) {
        return boxWithoutScroll;
      }
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        const { scroll, options } = node;
        if (node !== this.root && scroll && options.layoutScroll) {
          if (scroll.wasRoot) {
            copyBoxInto(boxWithoutScroll, box);
          }
          translateAxis(boxWithoutScroll.x, scroll.offset.x);
          translateAxis(boxWithoutScroll.y, scroll.offset.y);
        }
      }
      return boxWithoutScroll;
    }
    applyTransform(box, transformOnly = false) {
      const withTransforms = createBox();
      copyBoxInto(withTransforms, box);
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {
          transformBox(withTransforms, {
            x: -node.scroll.offset.x,
            y: -node.scroll.offset.y
          });
        }
        if (!hasTransform(node.latestValues))
          continue;
        transformBox(withTransforms, node.latestValues);
      }
      if (hasTransform(this.latestValues)) {
        transformBox(withTransforms, this.latestValues);
      }
      return withTransforms;
    }
    removeTransform(box) {
      const boxWithoutTransform = createBox();
      copyBoxInto(boxWithoutTransform, box);
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        if (!node.instance)
          continue;
        if (!hasTransform(node.latestValues))
          continue;
        hasScale(node.latestValues) && node.updateSnapshot();
        const sourceBox = createBox();
        const nodeBox = node.measurePageBox();
        copyBoxInto(sourceBox, nodeBox);
        removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : void 0, sourceBox);
      }
      if (hasTransform(this.latestValues)) {
        removeBoxTransforms(boxWithoutTransform, this.latestValues);
      }
      return boxWithoutTransform;
    }
    setTargetDelta(delta) {
      this.targetDelta = delta;
      this.root.scheduleUpdateProjection();
      this.isProjectionDirty = true;
    }
    setOptions(options) {
      this.options = {
        ...this.options,
        ...options,
        crossfade: options.crossfade !== void 0 ? options.crossfade : true
      };
    }
    clearMeasurements() {
      this.scroll = void 0;
      this.layout = void 0;
      this.snapshot = void 0;
      this.prevTransformTemplateValue = void 0;
      this.targetDelta = void 0;
      this.target = void 0;
      this.isLayoutDirty = false;
    }
    forceRelativeParentToResolveTarget() {
      if (!this.relativeParent)
        return;
      if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {
        this.relativeParent.resolveTargetDelta(true);
      }
    }
    resolveTargetDelta(forceRecalculation = false) {
      var _a2;
      const lead = this.getLead();
      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
      this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.isProjectionDirty) || this.attemptToResolveRelativeTarget || this.root.updateBlockedByResize);
      if (canSkip)
        return;
      const { layout: layout2, layoutId } = this.options;
      if (!this.layout || !(layout2 || layoutId))
        return;
      this.resolvedRelativeTargetAt = frameData.timestamp;
      if (!this.targetDelta && !this.relativeTarget) {
        const relativeParent = this.getClosestProjectingParent();
        if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      if (!this.relativeTarget && !this.targetDelta)
        return;
      if (!this.target) {
        this.target = createBox();
        this.targetWithTransforms = createBox();
      }
      if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {
        this.forceRelativeParentToResolveTarget();
        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
      } else if (this.targetDelta) {
        if (Boolean(this.resumingFrom)) {
          this.target = this.applyTransform(this.layout.layoutBox);
        } else {
          copyBoxInto(this.target, this.layout.layoutBox);
        }
        applyBoxDelta(this.target, this.targetDelta);
      } else {
        copyBoxInto(this.target, this.layout.layoutBox);
      }
      if (this.attemptToResolveRelativeTarget) {
        this.attemptToResolveRelativeTarget = false;
        const relativeParent = this.getClosestProjectingParent();
        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      if (isDebug) {
        metrics.resolvedTargetDeltas++;
      }
    }
    getClosestProjectingParent() {
      if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {
        return void 0;
      }
      if (this.parent.isProjecting()) {
        return this.parent;
      } else {
        return this.parent.getClosestProjectingParent();
      }
    }
    isProjecting() {
      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
    }
    calcProjection() {
      var _a2;
      const lead = this.getLead();
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      let canSkip = true;
      if (this.isProjectionDirty || ((_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.isProjectionDirty)) {
        canSkip = false;
      }
      if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {
        canSkip = false;
      }
      if (this.resolvedRelativeTargetAt === frameData.timestamp) {
        canSkip = false;
      }
      if (canSkip)
        return;
      const { layout: layout2, layoutId } = this.options;
      this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);
      if (!this.isTreeAnimating) {
        this.targetDelta = this.relativeTarget = void 0;
      }
      if (!this.layout || !(layout2 || layoutId))
        return;
      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
      const prevTreeScaleX = this.treeScale.x;
      const prevTreeScaleY = this.treeScale.y;
      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);
      if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {
        lead.target = lead.layout.layoutBox;
        lead.targetWithTransforms = createBox();
      }
      const { target } = lead;
      if (!target) {
        if (this.prevProjectionDelta) {
          this.createProjectionDeltas();
          this.scheduleRender();
        }
        return;
      }
      if (!this.projectionDelta || !this.prevProjectionDelta) {
        this.createProjectionDeltas();
      } else {
        copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);
        copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);
      }
      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
      if (this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY || !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) || !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {
        this.hasProjected = true;
        this.scheduleRender();
        this.notifyListeners("projectionUpdate", target);
      }
      if (isDebug) {
        metrics.recalculatedProjection++;
      }
    }
    hide() {
      this.isVisible = false;
    }
    show() {
      this.isVisible = true;
    }
    scheduleRender(notifyAll = true) {
      var _a2;
      (_a2 = this.options.visualElement) === null || _a2 === void 0 ? void 0 : _a2.scheduleRender();
      if (notifyAll) {
        const stack = this.getStack();
        stack && stack.scheduleRender();
      }
      if (this.resumingFrom && !this.resumingFrom.instance) {
        this.resumingFrom = void 0;
      }
    }
    createProjectionDeltas() {
      this.prevProjectionDelta = createDelta();
      this.projectionDelta = createDelta();
      this.projectionDeltaWithTransform = createDelta();
    }
    setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {
      const snapshot = this.snapshot;
      const snapshotLatestValues = snapshot ? snapshot.latestValues : {};
      const mixedValues = { ...this.latestValues };
      const targetDelta = createDelta();
      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {
        this.relativeTarget = this.relativeTargetOrigin = void 0;
      }
      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
      const relativeLayout = createBox();
      const snapshotSource = snapshot ? snapshot.source : void 0;
      const layoutSource = this.layout ? this.layout.source : void 0;
      const isSharedLayoutAnimation = snapshotSource !== layoutSource;
      const stack = this.getStack();
      const isOnlyMember = !stack || stack.members.length <= 1;
      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
      this.animationProgress = 0;
      let prevRelativeTarget;
      this.mixTargetDelta = (latest) => {
        const progress2 = latest / 1e3;
        mixAxisDelta(targetDelta.x, delta.x, progress2);
        mixAxisDelta(targetDelta.y, delta.y, progress2);
        this.setTargetDelta(targetDelta);
        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {
          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);
          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress2);
          if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {
            this.isProjectionDirty = false;
          }
          if (!prevRelativeTarget)
            prevRelativeTarget = createBox();
          copyBoxInto(prevRelativeTarget, this.relativeTarget);
        }
        if (isSharedLayoutAnimation) {
          this.animationValues = mixedValues;
          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress2, shouldCrossfadeOpacity, isOnlyMember);
        }
        this.root.scheduleUpdateProjection();
        this.scheduleRender();
        this.animationProgress = progress2;
      };
      this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
    }
    startAnimation(options) {
      this.notifyListeners("animationStart");
      this.currentAnimation && this.currentAnimation.stop();
      if (this.resumingFrom && this.resumingFrom.currentAnimation) {
        this.resumingFrom.currentAnimation.stop();
      }
      if (this.pendingAnimation) {
        cancelFrame(this.pendingAnimation);
        this.pendingAnimation = void 0;
      }
      this.pendingAnimation = frame.update(() => {
        globalProjectionState.hasAnimatedSinceResize = true;
        this.currentAnimation = animateSingleValue(0, animationTarget, {
          ...options,
          onUpdate: (latest) => {
            this.mixTargetDelta(latest);
            options.onUpdate && options.onUpdate(latest);
          },
          onComplete: () => {
            options.onComplete && options.onComplete();
            this.completeAnimation();
          }
        });
        if (this.resumingFrom) {
          this.resumingFrom.currentAnimation = this.currentAnimation;
        }
        this.pendingAnimation = void 0;
      });
    }
    completeAnimation() {
      if (this.resumingFrom) {
        this.resumingFrom.currentAnimation = void 0;
        this.resumingFrom.preserveOpacity = void 0;
      }
      const stack = this.getStack();
      stack && stack.exitAnimationComplete();
      this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
      this.notifyListeners("animationComplete");
    }
    finishAnimation() {
      if (this.currentAnimation) {
        this.mixTargetDelta && this.mixTargetDelta(animationTarget);
        this.currentAnimation.stop();
      }
      this.completeAnimation();
    }
    applyTransformsToTarget() {
      const lead = this.getLead();
      let { targetWithTransforms, target, layout: layout2, latestValues } = lead;
      if (!targetWithTransforms || !target || !layout2)
        return;
      if (this !== lead && this.layout && layout2 && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout2.layoutBox)) {
        target = this.target || createBox();
        const xLength = calcLength(this.layout.layoutBox.x);
        target.x.min = lead.target.x.min;
        target.x.max = target.x.min + xLength;
        const yLength = calcLength(this.layout.layoutBox.y);
        target.y.min = lead.target.y.min;
        target.y.max = target.y.min + yLength;
      }
      copyBoxInto(targetWithTransforms, target);
      transformBox(targetWithTransforms, latestValues);
      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
    }
    registerSharedNode(layoutId, node) {
      if (!this.sharedNodes.has(layoutId)) {
        this.sharedNodes.set(layoutId, new NodeStack());
      }
      const stack = this.sharedNodes.get(layoutId);
      stack.add(node);
      const config = node.options.initialPromotionConfig;
      node.promote({
        transition: config ? config.transition : void 0,
        preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : void 0
      });
    }
    isLead() {
      const stack = this.getStack();
      return stack ? stack.lead === this : true;
    }
    getLead() {
      var _a2;
      const { layoutId } = this.options;
      return layoutId ? ((_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.lead) || this : this;
    }
    getPrevLead() {
      var _a2;
      const { layoutId } = this.options;
      return layoutId ? (_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.prevLead : void 0;
    }
    getStack() {
      const { layoutId } = this.options;
      if (layoutId)
        return this.root.sharedNodes.get(layoutId);
    }
    promote({ needsReset, transition, preserveFollowOpacity } = {}) {
      const stack = this.getStack();
      if (stack)
        stack.promote(this, preserveFollowOpacity);
      if (needsReset) {
        this.projectionDelta = void 0;
        this.needsReset = true;
      }
      if (transition)
        this.setOptions({ transition });
    }
    relegate() {
      const stack = this.getStack();
      if (stack) {
        return stack.relegate(this);
      } else {
        return false;
      }
    }
    resetSkewAndRotation() {
      const { visualElement } = this.options;
      if (!visualElement)
        return;
      let hasDistortingTransform = false;
      const { latestValues } = visualElement;
      if (latestValues.z || latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ || latestValues.skewX || latestValues.skewY) {
        hasDistortingTransform = true;
      }
      if (!hasDistortingTransform)
        return;
      const resetValues = {};
      if (latestValues.z) {
        resetDistortingTransform("z", visualElement, resetValues, this.animationValues);
      }
      for (let i = 0; i < transformAxes.length; i++) {
        resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);
        resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);
      }
      visualElement.render();
      for (const key in resetValues) {
        visualElement.setStaticValue(key, resetValues[key]);
        if (this.animationValues) {
          this.animationValues[key] = resetValues[key];
        }
      }
      visualElement.scheduleRender();
    }
    getProjectionStyles(styleProp) {
      var _a2, _b2;
      if (!this.instance || this.isSVG)
        return void 0;
      if (!this.isVisible) {
        return hiddenVisibility;
      }
      const styles = {
        visibility: ""
      };
      const transformTemplate = this.getTransformTemplate();
      if (this.needsReset) {
        this.needsReset = false;
        styles.opacity = "";
        styles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
        styles.transform = transformTemplate ? transformTemplate(this.latestValues, "") : "none";
        return styles;
      }
      const lead = this.getLead();
      if (!this.projectionDelta || !this.layout || !lead.target) {
        const emptyStyles = {};
        if (this.options.layoutId) {
          emptyStyles.opacity = this.latestValues.opacity !== void 0 ? this.latestValues.opacity : 1;
          emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
        }
        if (this.hasProjected && !hasTransform(this.latestValues)) {
          emptyStyles.transform = transformTemplate ? transformTemplate({}, "") : "none";
          this.hasProjected = false;
        }
        return emptyStyles;
      }
      const valuesToRender = lead.animationValues || lead.latestValues;
      this.applyTransformsToTarget();
      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
      if (transformTemplate) {
        styles.transform = transformTemplate(valuesToRender, styles.transform);
      }
      const { x: x2, y: y2 } = this.projectionDelta;
      styles.transformOrigin = `${x2.origin * 100}% ${y2.origin * 100}% 0`;
      if (lead.animationValues) {
        styles.opacity = lead === this ? (_b2 = (_a2 = valuesToRender.opacity) !== null && _a2 !== void 0 ? _a2 : this.latestValues.opacity) !== null && _b2 !== void 0 ? _b2 : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
      } else {
        styles.opacity = lead === this ? valuesToRender.opacity !== void 0 ? valuesToRender.opacity : "" : valuesToRender.opacityExit !== void 0 ? valuesToRender.opacityExit : 0;
      }
      for (const key in scaleCorrectors) {
        if (valuesToRender[key] === void 0)
          continue;
        const { correct, applyTo } = scaleCorrectors[key];
        const corrected = styles.transform === "none" ? valuesToRender[key] : correct(valuesToRender[key], lead);
        if (applyTo) {
          const num = applyTo.length;
          for (let i = 0; i < num; i++) {
            styles[applyTo[i]] = corrected;
          }
        } else {
          styles[key] = corrected;
        }
      }
      if (this.options.layoutId) {
        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "" : "none";
      }
      return styles;
    }
    clearSnapshot() {
      this.resumeFrom = this.snapshot = void 0;
    }
    // Only run on root
    resetTree() {
      this.root.nodes.forEach((node) => {
        var _a2;
        return (_a2 = node.currentAnimation) === null || _a2 === void 0 ? void 0 : _a2.stop();
      });
      this.root.nodes.forEach(clearMeasurements);
      this.root.sharedNodes.clear();
    }
  };
}
function updateLayout(node) {
  node.updateLayout();
}
function notifyLayoutUpdate(node) {
  var _a2;
  const snapshot = ((_a2 = node.resumeFrom) === null || _a2 === void 0 ? void 0 : _a2.snapshot) || node.snapshot;
  if (node.isLead() && node.layout && snapshot && node.hasListeners("didUpdate")) {
    const { layoutBox: layout2, measuredBox: measuredLayout } = node.layout;
    const { animationType } = node.options;
    const isShared = snapshot.source !== node.layout.source;
    if (animationType === "size") {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length = calcLength(axisSnapshot);
        axisSnapshot.min = layout2[axis].min;
        axisSnapshot.max = axisSnapshot.min + length;
      });
    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout2)) {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length = calcLength(layout2[axis]);
        axisSnapshot.max = axisSnapshot.min + length;
        if (node.relativeTarget && !node.currentAnimation) {
          node.isProjectionDirty = true;
          node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;
        }
      });
    }
    const layoutDelta = createDelta();
    calcBoxDelta(layoutDelta, layout2, snapshot.layoutBox);
    const visualDelta = createDelta();
    if (isShared) {
      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);
    } else {
      calcBoxDelta(visualDelta, layout2, snapshot.layoutBox);
    }
    const hasLayoutChanged = !isDeltaZero(layoutDelta);
    let hasRelativeTargetChanged = false;
    if (!node.resumeFrom) {
      const relativeParent = node.getClosestProjectingParent();
      if (relativeParent && !relativeParent.resumeFrom) {
        const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
        if (parentSnapshot && parentLayout) {
          const relativeSnapshot = createBox();
          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
          const relativeLayout = createBox();
          calcRelativePosition(relativeLayout, layout2, parentLayout.layoutBox);
          if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {
            hasRelativeTargetChanged = true;
          }
          if (relativeParent.options.layoutRoot) {
            node.relativeTarget = relativeLayout;
            node.relativeTargetOrigin = relativeSnapshot;
            node.relativeParent = relativeParent;
          }
        }
      }
    }
    node.notifyListeners("didUpdate", {
      layout: layout2,
      snapshot,
      delta: visualDelta,
      layoutDelta,
      hasLayoutChanged,
      hasRelativeTargetChanged
    });
  } else if (node.isLead()) {
    const { onExitComplete } = node.options;
    onExitComplete && onExitComplete();
  }
  node.options.transition = void 0;
}
function propagateDirtyNodes(node) {
  if (isDebug) {
    metrics.totalNodes++;
  }
  if (!node.parent)
    return;
  if (!node.isProjecting()) {
    node.isProjectionDirty = node.parent.isProjectionDirty;
  }
  node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));
  node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);
}
function cleanDirtyNodes(node) {
  node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;
}
function clearSnapshot(node) {
  node.clearSnapshot();
}
function clearMeasurements(node) {
  node.clearMeasurements();
}
function clearIsLayoutDirty(node) {
  node.isLayoutDirty = false;
}
function resetTransformStyle(node) {
  const { visualElement } = node.options;
  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {
    visualElement.notify("BeforeLayoutMeasure");
  }
  node.resetTransform();
}
function finishAnimation(node) {
  node.finishAnimation();
  node.targetDelta = node.relativeTarget = node.target = void 0;
  node.isProjectionDirty = true;
}
function resolveTargetDelta(node) {
  node.resolveTargetDelta();
}
function calcProjection(node) {
  node.calcProjection();
}
function resetSkewAndRotation(node) {
  node.resetSkewAndRotation();
}
function removeLeadSnapshots(stack) {
  stack.removeLeadSnapshot();
}
function mixAxisDelta(output, delta, p2) {
  output.translate = mixNumber$1(delta.translate, 0, p2);
  output.scale = mixNumber$1(delta.scale, 1, p2);
  output.origin = delta.origin;
  output.originPoint = delta.originPoint;
}
function mixAxis(output, from2, to2, p2) {
  output.min = mixNumber$1(from2.min, to2.min, p2);
  output.max = mixNumber$1(from2.max, to2.max, p2);
}
function mixBox(output, from2, to2, p2) {
  mixAxis(output.x, from2.x, to2.x, p2);
  mixAxis(output.y, from2.y, to2.y, p2);
}
function hasOpacityCrossfade(node) {
  return node.animationValues && node.animationValues.opacityExit !== void 0;
}
const defaultLayoutTransition = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1]
};
const userAgentContains = (string) => typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(string);
const roundPoint = userAgentContains("applewebkit/") && !userAgentContains("chrome/") ? Math.round : noop$1;
function roundAxis(axis) {
  axis.min = roundPoint(axis.min);
  axis.max = roundPoint(axis.max);
}
function roundBox(box) {
  roundAxis(box.x);
  roundAxis(box.y);
}
function shouldAnimatePositionOnly(animationType, snapshot, layout2) {
  return animationType === "position" || animationType === "preserve-aspect" && !isNear(aspectRatio(snapshot), aspectRatio(layout2), 0.2);
}
function checkNodeWasScrollRoot(node) {
  var _a2;
  return node !== node.root && ((_a2 = node.scroll) === null || _a2 === void 0 ? void 0 : _a2.wasRoot);
}
const DocumentProjectionNode = createProjectionNode({
  attachResizeListener: (ref, notify) => addDomEvent(ref, "resize", notify),
  measureScroll: () => ({
    x: document.documentElement.scrollLeft || document.body.scrollLeft,
    y: document.documentElement.scrollTop || document.body.scrollTop
  }),
  checkIsScrollRoot: () => true
});
const rootProjectionNode = {
  current: void 0
};
const HTMLProjectionNode = createProjectionNode({
  measureScroll: (instance) => ({
    x: instance.scrollLeft,
    y: instance.scrollTop
  }),
  defaultParent: () => {
    if (!rootProjectionNode.current) {
      const documentNode = new DocumentProjectionNode({});
      documentNode.mount(window);
      documentNode.setOptions({ layoutScroll: true });
      rootProjectionNode.current = documentNode;
    }
    return rootProjectionNode.current;
  },
  resetTransform: (instance, value) => {
    instance.style.transform = value !== void 0 ? value : "none";
  },
  checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === "fixed")
});
const drag = {
  pan: {
    Feature: PanGesture
  },
  drag: {
    Feature: DragGesture,
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};
function handleHoverEvent(node, event, lifecycle) {
  const { props } = node;
  if (node.animationState && props.whileHover) {
    node.animationState.setActive("whileHover", lifecycle === "Start");
  }
  const eventName = "onHover" + lifecycle;
  const callback2 = props[eventName];
  if (callback2) {
    frame.postRender(() => callback2(event, extractEventInfo(event)));
  }
}
class HoverGesture extends Feature {
  mount() {
    const { current } = this.node;
    if (!current)
      return;
    this.unmount = hover(current, (startEvent) => {
      handleHoverEvent(this.node, startEvent, "Start");
      return (endEvent) => handleHoverEvent(this.node, endEvent, "End");
    });
  }
  unmount() {
  }
}
class FocusGesture extends Feature {
  constructor() {
    super(...arguments);
    this.isActive = false;
  }
  onFocus() {
    let isFocusVisible = false;
    try {
      isFocusVisible = this.node.current.matches(":focus-visible");
    } catch (e) {
      isFocusVisible = true;
    }
    if (!isFocusVisible || !this.node.animationState)
      return;
    this.node.animationState.setActive("whileFocus", true);
    this.isActive = true;
  }
  onBlur() {
    if (!this.isActive || !this.node.animationState)
      return;
    this.node.animationState.setActive("whileFocus", false);
    this.isActive = false;
  }
  mount() {
    this.unmount = pipe(addDomEvent(this.node.current, "focus", () => this.onFocus()), addDomEvent(this.node.current, "blur", () => this.onBlur()));
  }
  unmount() {
  }
}
function handlePressEvent(node, event, lifecycle) {
  const { props } = node;
  if (node.animationState && props.whileTap) {
    node.animationState.setActive("whileTap", lifecycle === "Start");
  }
  const eventName = "onTap" + (lifecycle === "End" ? "" : lifecycle);
  const callback2 = props[eventName];
  if (callback2) {
    frame.postRender(() => callback2(event, extractEventInfo(event)));
  }
}
class PressGesture extends Feature {
  mount() {
    const { current } = this.node;
    if (!current)
      return;
    this.unmount = press(current, (startEvent) => {
      handlePressEvent(this.node, startEvent, "Start");
      return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? "End" : "Cancel");
    }, { useGlobalTarget: this.node.props.globalTapTarget });
  }
  unmount() {
  }
}
const observerCallbacks = /* @__PURE__ */ new WeakMap();
const observers = /* @__PURE__ */ new WeakMap();
const fireObserverCallback = (entry) => {
  const callback2 = observerCallbacks.get(entry.target);
  callback2 && callback2(entry);
};
const fireAllObserverCallbacks = (entries) => {
  entries.forEach(fireObserverCallback);
};
function initIntersectionObserver({ root, ...options }) {
  const lookupRoot = root || document;
  if (!observers.has(lookupRoot)) {
    observers.set(lookupRoot, {});
  }
  const rootObservers = observers.get(lookupRoot);
  const key = JSON.stringify(options);
  if (!rootObservers[key]) {
    rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });
  }
  return rootObservers[key];
}
function observeIntersection(element, options, callback2) {
  const rootInteresectionObserver = initIntersectionObserver(options);
  observerCallbacks.set(element, callback2);
  rootInteresectionObserver.observe(element);
  return () => {
    observerCallbacks.delete(element);
    rootInteresectionObserver.unobserve(element);
  };
}
const thresholdNames = {
  some: 0,
  all: 1
};
class InViewFeature extends Feature {
  constructor() {
    super(...arguments);
    this.hasEnteredView = false;
    this.isInView = false;
  }
  startObserver() {
    this.unmount();
    const { viewport = {} } = this.node.getProps();
    const { root, margin: rootMargin, amount = "some", once } = viewport;
    const options = {
      root: root ? root.current : void 0,
      rootMargin,
      threshold: typeof amount === "number" ? amount : thresholdNames[amount]
    };
    const onIntersectionUpdate = (entry) => {
      const { isIntersecting } = entry;
      if (this.isInView === isIntersecting)
        return;
      this.isInView = isIntersecting;
      if (once && !isIntersecting && this.hasEnteredView) {
        return;
      } else if (isIntersecting) {
        this.hasEnteredView = true;
      }
      if (this.node.animationState) {
        this.node.animationState.setActive("whileInView", isIntersecting);
      }
      const { onViewportEnter, onViewportLeave } = this.node.getProps();
      const callback2 = isIntersecting ? onViewportEnter : onViewportLeave;
      callback2 && callback2(entry);
    };
    return observeIntersection(this.node.current, options, onIntersectionUpdate);
  }
  mount() {
    this.startObserver();
  }
  update() {
    if (typeof IntersectionObserver === "undefined")
      return;
    const { props, prevProps } = this.node;
    const hasOptionsChanged = ["amount", "margin", "root"].some(hasViewportOptionChanged(props, prevProps));
    if (hasOptionsChanged) {
      this.startObserver();
    }
  }
  unmount() {
  }
}
function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
  return (name) => viewport[name] !== prevViewport[name];
}
const gestureAnimations = {
  inView: {
    Feature: InViewFeature
  },
  tap: {
    Feature: PressGesture
  },
  focus: {
    Feature: FocusGesture
  },
  hover: {
    Feature: HoverGesture
  }
};
const layout = {
  layout: {
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};
const prefersReducedMotion = { current: null };
const hasReducedMotionListener = { current: false };
function initPrefersReducedMotion() {
  hasReducedMotionListener.current = true;
  if (!isBrowser)
    return;
  if (window.matchMedia) {
    const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
    const setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;
    motionMediaQuery.addListener(setReducedMotionPreferences);
    setReducedMotionPreferences();
  } else {
    prefersReducedMotion.current = false;
  }
}
const valueTypes = [...dimensionValueTypes, color$1, complex];
const findValueType = (v2) => valueTypes.find(testValueType(v2));
const visualElementStore = /* @__PURE__ */ new WeakMap();
function updateMotionValuesFromProps(element, next, prev) {
  for (const key in next) {
    const nextValue = next[key];
    const prevValue = prev[key];
    if (isMotionValue(nextValue)) {
      element.addValue(key, nextValue);
    } else if (isMotionValue(prevValue)) {
      element.addValue(key, motionValue(nextValue, { owner: element }));
    } else if (prevValue !== nextValue) {
      if (element.hasValue(key)) {
        const existingValue = element.getValue(key);
        if (existingValue.liveStyle === true) {
          existingValue.jump(nextValue);
        } else if (!existingValue.hasAnimated) {
          existingValue.set(nextValue);
        }
      } else {
        const latestValue = element.getStaticValue(key);
        element.addValue(key, motionValue(latestValue !== void 0 ? latestValue : nextValue, { owner: element }));
      }
    }
  }
  for (const key in prev) {
    if (next[key] === void 0)
      element.removeValue(key);
  }
  return next;
}
const propEventHandlers = [
  "AnimationStart",
  "AnimationComplete",
  "Update",
  "BeforeLayoutMeasure",
  "LayoutMeasure",
  "LayoutAnimationStart",
  "LayoutAnimationComplete"
];
class VisualElement {
  /**
   * This method takes React props and returns found MotionValues. For example, HTML
   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
   *
   * This isn't an abstract method as it needs calling in the constructor, but it is
   * intended to be one.
   */
  scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {
    return {};
  }
  constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState }, options = {}) {
    this.current = null;
    this.children = /* @__PURE__ */ new Set();
    this.isVariantNode = false;
    this.isControllingVariants = false;
    this.shouldReduceMotion = null;
    this.values = /* @__PURE__ */ new Map();
    this.KeyframeResolver = KeyframeResolver;
    this.features = {};
    this.valueSubscriptions = /* @__PURE__ */ new Map();
    this.prevMotionValues = {};
    this.events = {};
    this.propEventSubscriptions = {};
    this.notifyUpdate = () => this.notify("Update", this.latestValues);
    this.render = () => {
      if (!this.current)
        return;
      this.triggerBuild();
      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
    };
    this.renderScheduledAt = 0;
    this.scheduleRender = () => {
      const now2 = time.now();
      if (this.renderScheduledAt < now2) {
        this.renderScheduledAt = now2;
        frame.render(this.render, false, true);
      }
    };
    const { latestValues, renderState, onUpdate } = visualState;
    this.onUpdate = onUpdate;
    this.latestValues = latestValues;
    this.baseTarget = { ...latestValues };
    this.initialValues = props.initial ? { ...latestValues } : {};
    this.renderState = renderState;
    this.parent = parent;
    this.props = props;
    this.presenceContext = presenceContext;
    this.depth = parent ? parent.depth + 1 : 0;
    this.reducedMotionConfig = reducedMotionConfig;
    this.options = options;
    this.blockInitialAnimation = Boolean(blockInitialAnimation);
    this.isControllingVariants = isControllingVariants(props);
    this.isVariantNode = isVariantNode(props);
    if (this.isVariantNode) {
      this.variantChildren = /* @__PURE__ */ new Set();
    }
    this.manuallyAnimateOnMount = Boolean(parent && parent.current);
    const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);
    for (const key in initialMotionValues) {
      const value = initialMotionValues[key];
      if (latestValues[key] !== void 0 && isMotionValue(value)) {
        value.set(latestValues[key], false);
      }
    }
  }
  mount(instance) {
    this.current = instance;
    visualElementStore.set(instance, this);
    if (this.projection && !this.projection.instance) {
      this.projection.mount(instance);
    }
    if (this.parent && this.isVariantNode && !this.isControllingVariants) {
      this.removeFromVariantTree = this.parent.addVariantChild(this);
    }
    this.values.forEach((value, key) => this.bindToMotionValue(key, value));
    if (!hasReducedMotionListener.current) {
      initPrefersReducedMotion();
    }
    this.shouldReduceMotion = this.reducedMotionConfig === "never" ? false : this.reducedMotionConfig === "always" ? true : prefersReducedMotion.current;
    if (this.parent)
      this.parent.children.add(this);
    this.update(this.props, this.presenceContext);
  }
  unmount() {
    visualElementStore.delete(this.current);
    this.projection && this.projection.unmount();
    cancelFrame(this.notifyUpdate);
    cancelFrame(this.render);
    this.valueSubscriptions.forEach((remove2) => remove2());
    this.valueSubscriptions.clear();
    this.removeFromVariantTree && this.removeFromVariantTree();
    this.parent && this.parent.children.delete(this);
    for (const key in this.events) {
      this.events[key].clear();
    }
    for (const key in this.features) {
      const feature = this.features[key];
      if (feature) {
        feature.unmount();
        feature.isMounted = false;
      }
    }
    this.current = null;
  }
  bindToMotionValue(key, value) {
    if (this.valueSubscriptions.has(key)) {
      this.valueSubscriptions.get(key)();
    }
    const valueIsTransform = transformProps.has(key);
    const removeOnChange = value.on("change", (latestValue) => {
      this.latestValues[key] = latestValue;
      this.props.onUpdate && frame.preRender(this.notifyUpdate);
      if (valueIsTransform && this.projection) {
        this.projection.isTransformDirty = true;
      }
    });
    const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
    let removeSyncCheck;
    if (window.MotionCheckAppearSync) {
      removeSyncCheck = window.MotionCheckAppearSync(this, key, value);
    }
    this.valueSubscriptions.set(key, () => {
      removeOnChange();
      removeOnRenderRequest();
      if (removeSyncCheck)
        removeSyncCheck();
      if (value.owner)
        value.stop();
    });
  }
  sortNodePosition(other) {
    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {
      return 0;
    }
    return this.sortInstanceNodePosition(this.current, other.current);
  }
  updateFeatures() {
    let key = "animation";
    for (key in featureDefinitions) {
      const featureDefinition = featureDefinitions[key];
      if (!featureDefinition)
        continue;
      const { isEnabled, Feature: FeatureConstructor } = featureDefinition;
      if (!this.features[key] && FeatureConstructor && isEnabled(this.props)) {
        this.features[key] = new FeatureConstructor(this);
      }
      if (this.features[key]) {
        const feature = this.features[key];
        if (feature.isMounted) {
          feature.update();
        } else {
          feature.mount();
          feature.isMounted = true;
        }
      }
    }
  }
  triggerBuild() {
    this.build(this.renderState, this.latestValues, this.props);
  }
  /**
   * Measure the current viewport box with or without transforms.
   * Only measures axis-aligned boxes, rotate and skew must be manually
   * removed with a re-render to work.
   */
  measureViewportBox() {
    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();
  }
  getStaticValue(key) {
    return this.latestValues[key];
  }
  setStaticValue(key, value) {
    this.latestValues[key] = value;
  }
  /**
   * Update the provided props. Ensure any newly-added motion values are
   * added to our map, old ones removed, and listeners updated.
   */
  update(props, presenceContext) {
    if (props.transformTemplate || this.props.transformTemplate) {
      this.scheduleRender();
    }
    this.prevProps = this.props;
    this.props = props;
    this.prevPresenceContext = this.presenceContext;
    this.presenceContext = presenceContext;
    for (let i = 0; i < propEventHandlers.length; i++) {
      const key = propEventHandlers[i];
      if (this.propEventSubscriptions[key]) {
        this.propEventSubscriptions[key]();
        delete this.propEventSubscriptions[key];
      }
      const listenerName = "on" + key;
      const listener = props[listenerName];
      if (listener) {
        this.propEventSubscriptions[key] = this.on(key, listener);
      }
    }
    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);
    if (this.handleChildMotionValue) {
      this.handleChildMotionValue();
    }
    this.onUpdate && this.onUpdate(this);
  }
  getProps() {
    return this.props;
  }
  /**
   * Returns the variant definition with a given name.
   */
  getVariant(name) {
    return this.props.variants ? this.props.variants[name] : void 0;
  }
  /**
   * Returns the defined default transition on this component.
   */
  getDefaultTransition() {
    return this.props.transition;
  }
  getTransformPagePoint() {
    return this.props.transformPagePoint;
  }
  getClosestVariantNode() {
    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
  }
  /**
   * Add a child visual element to our set of children.
   */
  addVariantChild(child) {
    const closestVariantNode = this.getClosestVariantNode();
    if (closestVariantNode) {
      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);
      return () => closestVariantNode.variantChildren.delete(child);
    }
  }
  /**
   * Add a motion value and bind it to this visual element.
   */
  addValue(key, value) {
    const existingValue = this.values.get(key);
    if (value !== existingValue) {
      if (existingValue)
        this.removeValue(key);
      this.bindToMotionValue(key, value);
      this.values.set(key, value);
      this.latestValues[key] = value.get();
    }
  }
  /**
   * Remove a motion value and unbind any active subscriptions.
   */
  removeValue(key) {
    this.values.delete(key);
    const unsubscribe = this.valueSubscriptions.get(key);
    if (unsubscribe) {
      unsubscribe();
      this.valueSubscriptions.delete(key);
    }
    delete this.latestValues[key];
    this.removeValueFromRenderState(key, this.renderState);
  }
  /**
   * Check whether we have a motion value for this key
   */
  hasValue(key) {
    return this.values.has(key);
  }
  getValue(key, defaultValue) {
    if (this.props.values && this.props.values[key]) {
      return this.props.values[key];
    }
    let value = this.values.get(key);
    if (value === void 0 && defaultValue !== void 0) {
      value = motionValue(defaultValue === null ? void 0 : defaultValue, { owner: this });
      this.addValue(key, value);
    }
    return value;
  }
  /**
   * If we're trying to animate to a previously unencountered value,
   * we need to check for it in our state and as a last resort read it
   * directly from the instance (which might have performance implications).
   */
  readValue(key, target) {
    var _a2;
    let value = this.latestValues[key] !== void 0 || !this.current ? this.latestValues[key] : (_a2 = this.getBaseTargetFromProps(this.props, key)) !== null && _a2 !== void 0 ? _a2 : this.readValueFromInstance(this.current, key, this.options);
    if (value !== void 0 && value !== null) {
      if (typeof value === "string" && (isNumericalString(value) || isZeroValueString(value))) {
        value = parseFloat(value);
      } else if (!findValueType(value) && complex.test(target)) {
        value = getAnimatableNone(key, target);
      }
      this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);
    }
    return isMotionValue(value) ? value.get() : value;
  }
  /**
   * Set the base target to later animate back to. This is currently
   * only hydrated on creation and when we first read a value.
   */
  setBaseTarget(key, value) {
    this.baseTarget[key] = value;
  }
  /**
   * Find the base target for a value thats been removed from all animation
   * props.
   */
  getBaseTarget(key) {
    var _a2;
    const { initial } = this.props;
    let valueFromInitial;
    if (typeof initial === "string" || typeof initial === "object") {
      const variant = resolveVariantFromProps(this.props, initial, (_a2 = this.presenceContext) === null || _a2 === void 0 ? void 0 : _a2.custom);
      if (variant) {
        valueFromInitial = variant[key];
      }
    }
    if (initial && valueFromInitial !== void 0) {
      return valueFromInitial;
    }
    const target = this.getBaseTargetFromProps(this.props, key);
    if (target !== void 0 && !isMotionValue(target))
      return target;
    return this.initialValues[key] !== void 0 && valueFromInitial === void 0 ? void 0 : this.baseTarget[key];
  }
  on(eventName, callback2) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    return this.events[eventName].add(callback2);
  }
  notify(eventName, ...args) {
    if (this.events[eventName]) {
      this.events[eventName].notify(...args);
    }
  }
}
class DOMVisualElement extends VisualElement {
  constructor() {
    super(...arguments);
    this.KeyframeResolver = DOMKeyframesResolver;
  }
  sortInstanceNodePosition(a, b2) {
    return a.compareDocumentPosition(b2) & 2 ? 1 : -1;
  }
  getBaseTargetFromProps(props, key) {
    return props.style ? props.style[key] : void 0;
  }
  removeValueFromRenderState(key, { vars, style }) {
    delete vars[key];
    delete style[key];
  }
  handleChildMotionValue() {
    if (this.childSubscription) {
      this.childSubscription();
      delete this.childSubscription;
    }
    const { children } = this.props;
    if (isMotionValue(children)) {
      this.childSubscription = children.on("change", (latest) => {
        if (this.current) {
          this.current.textContent = `${latest}`;
        }
      });
    }
  }
}
function getComputedStyle$1(element) {
  return window.getComputedStyle(element);
}
class HTMLVisualElement extends DOMVisualElement {
  constructor() {
    super(...arguments);
    this.type = "html";
    this.renderInstance = renderHTML;
  }
  readValueFromInstance(instance, key) {
    if (transformProps.has(key)) {
      const defaultType = getDefaultValueType(key);
      return defaultType ? defaultType.default || 0 : 0;
    } else {
      const computedStyle = getComputedStyle$1(instance);
      const value = (isCSSVariableName(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
      return typeof value === "string" ? value.trim() : value;
    }
  }
  measureInstanceViewportBox(instance, { transformPagePoint }) {
    return measureViewportBox(instance, transformPagePoint);
  }
  build(renderState, latestValues, props) {
    buildHTMLStyles(renderState, latestValues, props.transformTemplate);
  }
  scrapeMotionValuesFromProps(props, prevProps, visualElement) {
    return scrapeMotionValuesFromProps$1(props, prevProps, visualElement);
  }
}
class SVGVisualElement extends DOMVisualElement {
  constructor() {
    super(...arguments);
    this.type = "svg";
    this.isSVGTag = false;
    this.measureInstanceViewportBox = createBox;
  }
  getBaseTargetFromProps(props, key) {
    return props[key];
  }
  readValueFromInstance(instance, key) {
    if (transformProps.has(key)) {
      const defaultType = getDefaultValueType(key);
      return defaultType ? defaultType.default || 0 : 0;
    }
    key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
    return instance.getAttribute(key);
  }
  scrapeMotionValuesFromProps(props, prevProps, visualElement) {
    return scrapeMotionValuesFromProps(props, prevProps, visualElement);
  }
  build(renderState, latestValues, props) {
    buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate);
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderSVG(instance, renderState, styleProp, projection);
  }
  mount(instance) {
    this.isSVGTag = isSVGTag(instance.tagName);
    super.mount(instance);
  }
}
const createDomVisualElement = (Component, options) => {
  return isSVGComponent(Component) ? new SVGVisualElement(options) : new HTMLVisualElement(options, {
    allowProjection: Component !== reactExports.Fragment
  });
};
const createMotionComponent = /* @__PURE__ */ createMotionComponentFactory({
  ...animations,
  ...gestureAnimations,
  ...drag,
  ...layout
}, createDomVisualElement);
const motion = /* @__PURE__ */ createDOMMotionComponentProxy(createMotionComponent);
const __vite_import_meta_env__$1 = {};
const createStoreImpl = (createState2) => {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (!Object.is(nextState, state)) {
      const previousState = state;
      state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const getInitialState = () => initialState;
  const subscribe = (listener) => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => {
    if ((__vite_import_meta_env__$1 ? "development" : void 0) !== "production") {
      console.warn(
        "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
      );
    }
    listeners.clear();
  };
  const api = { setState, getState, getInitialState, subscribe, destroy };
  const initialState = state = createState2(setState, getState, api);
  return api;
};
const createStore = (createState2) => createState2 ? createStoreImpl(createState2) : createStoreImpl;
var withSelector = { exports: {} };
var withSelector_production = {};
var shim$2 = { exports: {} };
var useSyncExternalStoreShim_production = {};
/**
 * @license React
 * use-sync-external-store-shim.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var React$1 = reactExports;
function is$1(x2, y2) {
  return x2 === y2 && (0 !== x2 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
}
var objectIs$1 = "function" === typeof Object.is ? Object.is : is$1, useState = React$1.useState, useEffect$1 = React$1.useEffect, useLayoutEffect = React$1.useLayoutEffect, useDebugValue$2 = React$1.useDebugValue;
function useSyncExternalStore$2(subscribe, getSnapshot) {
  var value = getSnapshot(), _useState = useState({ inst: { value, getSnapshot } }), inst = _useState[0].inst, forceUpdate = _useState[1];
  useLayoutEffect(
    function() {
      inst.value = value;
      inst.getSnapshot = getSnapshot;
      checkIfSnapshotChanged(inst) && forceUpdate({ inst });
    },
    [subscribe, value, getSnapshot]
  );
  useEffect$1(
    function() {
      checkIfSnapshotChanged(inst) && forceUpdate({ inst });
      return subscribe(function() {
        checkIfSnapshotChanged(inst) && forceUpdate({ inst });
      });
    },
    [subscribe]
  );
  useDebugValue$2(value);
  return value;
}
function checkIfSnapshotChanged(inst) {
  var latestGetSnapshot = inst.getSnapshot;
  inst = inst.value;
  try {
    var nextValue = latestGetSnapshot();
    return !objectIs$1(inst, nextValue);
  } catch (error) {
    return true;
  }
}
function useSyncExternalStore$1(subscribe, getSnapshot) {
  return getSnapshot();
}
var shim$1 = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
useSyncExternalStoreShim_production.useSyncExternalStore = void 0 !== React$1.useSyncExternalStore ? React$1.useSyncExternalStore : shim$1;
{
  shim$2.exports = useSyncExternalStoreShim_production;
}
var shimExports = shim$2.exports;
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var React = reactExports, shim = shimExports;
function is(x2, y2) {
  return x2 === y2 && (0 !== x2 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
}
var objectIs = "function" === typeof Object.is ? Object.is : is, useSyncExternalStore = shim.useSyncExternalStore, useRef = React.useRef, useEffect = React.useEffect, useMemo = React.useMemo, useDebugValue$1 = React.useDebugValue;
withSelector_production.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
  var instRef = useRef(null);
  if (null === instRef.current) {
    var inst = { hasValue: false, value: null };
    instRef.current = inst;
  } else inst = instRef.current;
  instRef = useMemo(
    function() {
      function memoizedSelector(nextSnapshot) {
        if (!hasMemo) {
          hasMemo = true;
          memoizedSnapshot = nextSnapshot;
          nextSnapshot = selector(nextSnapshot);
          if (void 0 !== isEqual && inst.hasValue) {
            var currentSelection = inst.value;
            if (isEqual(currentSelection, nextSnapshot))
              return memoizedSelection = currentSelection;
          }
          return memoizedSelection = nextSnapshot;
        }
        currentSelection = memoizedSelection;
        if (objectIs(memoizedSnapshot, nextSnapshot)) return currentSelection;
        var nextSelection = selector(nextSnapshot);
        if (void 0 !== isEqual && isEqual(currentSelection, nextSelection))
          return memoizedSnapshot = nextSnapshot, currentSelection;
        memoizedSnapshot = nextSnapshot;
        return memoizedSelection = nextSelection;
      }
      var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
      return [
        function() {
          return memoizedSelector(getSnapshot());
        },
        null === maybeGetServerSnapshot ? void 0 : function() {
          return memoizedSelector(maybeGetServerSnapshot());
        }
      ];
    },
    [getSnapshot, getServerSnapshot, selector, isEqual]
  );
  var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);
  useEffect(
    function() {
      inst.hasValue = true;
      inst.value = value;
    },
    [value]
  );
  useDebugValue$1(value);
  return value;
};
{
  withSelector.exports = withSelector_production;
}
var withSelectorExports = withSelector.exports;
const useSyncExternalStoreExports = /* @__PURE__ */ getDefaultExportFromCjs(withSelectorExports);
const __vite_import_meta_env__ = {};
const { useDebugValue } = React$2;
const { useSyncExternalStoreWithSelector } = useSyncExternalStoreExports;
let didWarnAboutEqualityFn = false;
const identity = (arg) => arg;
function useStore(api, selector = identity, equalityFn) {
  if ((__vite_import_meta_env__ ? "development" : void 0) !== "production" && equalityFn && !didWarnAboutEqualityFn) {
    console.warn(
      "[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"
    );
    didWarnAboutEqualityFn = true;
  }
  const slice = useSyncExternalStoreWithSelector(
    api.subscribe,
    api.getState,
    api.getServerState || api.getInitialState,
    selector,
    equalityFn
  );
  useDebugValue(slice);
  return slice;
}
const createImpl = (createState2) => {
  if ((__vite_import_meta_env__ ? "development" : void 0) !== "production" && typeof createState2 !== "function") {
    console.warn(
      "[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."
    );
  }
  const api = typeof createState2 === "function" ? createStore(createState2) : createState2;
  const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn);
  Object.assign(useBoundStore, api);
  return useBoundStore;
};
const create = (createState2) => createState2 ? createImpl(createState2) : createImpl;
const useSidebarStore = create((set2) => ({
  isExpanded: false,
  toggle: () => set2((state) => ({ isExpanded: !state.isExpanded }))
}));
const UserProfileFooter = () => {
  const navigate = useNavigate();
  const { isExpanded } = useSidebarStore();
  const [showConfirmation, setShowConfirmation] = reactExports.useState(false);
  const [userEmail, setUserEmail] = reactExports.useState("");
  const [isAdmin, setIsAdmin] = reactExports.useState(false);
  const [empresaNomeFantasia, setEmpresaNomeFantasia] = reactExports.useState("");
  reactExports.useEffect(() => {
    const getUser = async () => {
      var _a2;
      try {
        const { data: { user } } = await supabase.auth.getUser();
        if (user) {
          setUserEmail(user.email || "");
          const { data: userData } = await supabase.from("usuarios").select(`
              empresa_id,
              tipo_user_config:tipo_user_config_id(tipo)
            `).eq("id", user.id).single();
          setIsAdmin(((_a2 = userData == null ? void 0 : userData.tipo_user_config) == null ? void 0 : _a2.tipo) === "admin");
          if (userData == null ? void 0 : userData.empresa_id) {
            const { data: empresaData } = await supabase.from("empresas").select("nome_fantasia").eq("id", userData.empresa_id).single();
            if (empresaData && empresaData.nome_fantasia) {
              setEmpresaNomeFantasia(empresaData.nome_fantasia);
            }
          }
        }
      } catch (error) {
        console.error("Erro ao carregar dados do usuário:", error);
      }
    };
    getUser();
  }, []);
  const handleLogout = async () => {
    try {
      await supabase.auth.signOut();
      document.body.innerHTML = "";
      document.body.style.margin = "0";
      document.body.style.padding = "0";
      document.body.style.background = "#0a0a0c";
      const messageDiv = document.createElement("div");
      messageDiv.style.position = "fixed";
      messageDiv.style.top = "50%";
      messageDiv.style.left = "50%";
      messageDiv.style.transform = "translate(-50%, -50%)";
      messageDiv.style.color = "white";
      messageDiv.style.fontFamily = "sans-serif";
      messageDiv.style.textAlign = "center";
      messageDiv.innerHTML = `
        <h2>Logout realizado com sucesso</h2>
        <p>Redirecionando para a tela de login...</p>
      `;
      document.body.appendChild(messageDiv);
      setTimeout(() => {
        try {
          navigate("/entrar", { replace: true });
          setTimeout(() => {
            if (document.body.innerHTML.includes("Logout realizado")) {
              window.location.href = "/";
            }
          }, 500);
        } catch (error) {
          console.error("Erro ao redirecionar:", error);
          window.location.href = "/";
        }
      }, 1e3);
    } catch (error) {
      console.error("Error logging out:", error);
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-auto border-t border-gray-800", children: [
      empresaNomeFantasia && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center px-4 py-2 my-1 mx-2 rounded-lg text-primary-400 transition-colors", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Building, { size: 20 }),
        isExpanded && /* @__PURE__ */ jsxRuntimeExports.jsx(
          motion.span,
          {
            initial: { opacity: 0 },
            animate: { opacity: 1 },
            transition: { duration: 0.2 },
            className: "ml-3 text-sm font-medium truncate",
            children: empresaNomeFantasia
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center px-4 py-2 my-1 mx-2 rounded-lg text-gray-400 hover:bg-gray-800/50 hover:text-white transition-colors", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(CircleUserRound, { size: 20 }),
        isExpanded && /* @__PURE__ */ jsxRuntimeExports.jsx(
          motion.span,
          {
            initial: { opacity: 0 },
            animate: { opacity: 1 },
            transition: { duration: 0.2 },
            className: "ml-3 text-sm truncate",
            children: userEmail
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "button",
        {
          onClick: () => setShowConfirmation(true),
          className: "w-full flex items-center px-4 py-2 my-1 mx-2 rounded-lg text-red-500 hover:bg-red-500/10 hover:text-red-400 transition-colors",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(LogOut, { size: 20 }),
            isExpanded && /* @__PURE__ */ jsxRuntimeExports.jsx(
              motion.span,
              {
                initial: { opacity: 0 },
                animate: { opacity: 1 },
                transition: { duration: 0.2 },
                className: "ml-3 text-sm",
                children: "Sair"
              }
            )
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showConfirmation && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        exit: { opacity: 0 },
        className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          motion.div,
          {
            initial: { scale: 0.9, opacity: 0 },
            animate: { scale: 1, opacity: 1 },
            exit: { scale: 0.9, opacity: 0 },
            className: "bg-background-card p-6 rounded-lg shadow-xl max-w-sm mx-4",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold text-white mb-4", children: "Confirmar saída" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: "Tem certeza que deseja sair do sistema?" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => setShowConfirmation(false),
                    className: "flex-1 px-4 py-2 rounded-lg bg-gray-800 text-white hover:bg-gray-700 transition-colors",
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: handleLogout,
                    className: "flex-1 px-4 py-2 rounded-lg bg-red-500 text-white hover:bg-red-600 transition-colors",
                    children: "Sair"
                  }
                )
              ] })
            ]
          }
        )
      }
    ) })
  ] });
};
const useFullscreen = () => {
  const [isFullscreen, setIsFullscreen] = reactExports.useState(false);
  const isSupported = reactExports.useCallback(() => {
    return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);
  }, []);
  const enterFullscreen = reactExports.useCallback(async () => {
    if (!isSupported()) {
      console.warn("Fullscreen API não é suportada neste navegador");
      return false;
    }
    try {
      const element = document.documentElement;
      if (element.requestFullscreen) {
        await element.requestFullscreen();
      } else if (element.webkitRequestFullscreen) {
        await element.webkitRequestFullscreen();
      } else if (element.mozRequestFullScreen) {
        await element.mozRequestFullScreen();
      } else if (element.msRequestFullscreen) {
        await element.msRequestFullscreen();
      }
      return true;
    } catch (error) {
      console.error("Erro ao entrar em fullscreen:", error);
      return false;
    }
  }, [isSupported]);
  const exitFullscreen = reactExports.useCallback(async () => {
    if (!isSupported()) {
      return false;
    }
    try {
      if (document.exitFullscreen) {
        await document.exitFullscreen();
      } else if (document.webkitExitFullscreen) {
        await document.webkitExitFullscreen();
      } else if (document.mozCancelFullScreen) {
        await document.mozCancelFullScreen();
      } else if (document.msExitFullscreen) {
        await document.msExitFullscreen();
      }
      return true;
    } catch (error) {
      console.error("Erro ao sair do fullscreen:", error);
      return false;
    }
  }, [isSupported]);
  const toggleFullscreen = reactExports.useCallback(async () => {
    if (isFullscreen) {
      return await exitFullscreen();
    } else {
      return await enterFullscreen();
    }
  }, [isFullscreen, enterFullscreen, exitFullscreen]);
  const checkFullscreenStatus = reactExports.useCallback(() => {
    const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;
    return !!fullscreenElement;
  }, []);
  reactExports.useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(checkFullscreenStatus());
    };
    document.addEventListener("fullscreenchange", handleFullscreenChange);
    document.addEventListener("webkitfullscreenchange", handleFullscreenChange);
    document.addEventListener("mozfullscreenchange", handleFullscreenChange);
    document.addEventListener("MSFullscreenChange", handleFullscreenChange);
    setIsFullscreen(checkFullscreenStatus());
    return () => {
      document.removeEventListener("fullscreenchange", handleFullscreenChange);
      document.removeEventListener("webkitfullscreenchange", handleFullscreenChange);
      document.removeEventListener("mozfullscreenchange", handleFullscreenChange);
      document.removeEventListener("MSFullscreenChange", handleFullscreenChange);
    };
  }, [checkFullscreenStatus]);
  return {
    isFullscreen,
    isSupported: isSupported(),
    enterFullscreen,
    exitFullscreen,
    toggleFullscreen
  };
};
const Sidebar = () => {
  const { isExpanded, toggle } = useSidebarStore();
  const { enterFullscreen } = useFullscreen();
  const navigate = useNavigate();
  const [expandedSubmenu, setExpandedSubmenu] = reactExports.useState(null);
  const [opcoesAdicionaisHabilitado, setOpcoesAdicionaisHabilitado] = reactExports.useState(false);
  const [taxaEntregaHabilitada, setTaxaEntregaHabilitada] = reactExports.useState(false);
  const [conexaoHabilitada, setConexaoHabilitada] = reactExports.useState(false);
  const [empresaId, setEmpresaId] = reactExports.useState(null);
  const location = useLocation();
  reactExports.useEffect(() => {
    const loadConfiguracoes = async () => {
      try {
        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) return;
        const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
        if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
        setEmpresaId(usuarioData.empresa_id);
        const { data: configData } = await supabase.from("produtos_config").select("opcoes_adicionais").eq("empresa_id", usuarioData.empresa_id).single();
        if (configData) {
          setOpcoesAdicionaisHabilitado(configData.opcoes_adicionais || false);
        }
        const { data: taxaEntregaConfigData } = await supabase.from("taxa_entrega_config").select("habilitado").eq("empresa_id", usuarioData.empresa_id).single();
        if (taxaEntregaConfigData) {
          setTaxaEntregaHabilitada(taxaEntregaConfigData.habilitado || false);
        }
        const { data: conexaoConfigData } = await supabase.from("conexao_config").select("habilita_conexao_whatsapp").eq("empresa_id", usuarioData.empresa_id).single();
        if (conexaoConfigData) {
          setConexaoHabilitada(conexaoConfigData.habilita_conexao_whatsapp || false);
        }
      } catch (error) {
        console.error("Erro ao carregar configurações:", error);
      }
    };
    loadConfiguracoes();
    const handleOpcoesAdicionaisChange = (event) => {
      console.log("Evento opcoesAdicionaisChanged recebido:", event.detail);
      console.log("Atualizando opcoesAdicionaisHabilitado para:", event.detail.opcoesAdicionais);
      setOpcoesAdicionaisHabilitado(event.detail.opcoesAdicionais);
    };
    const handleTaxaEntregaChange = (event) => {
      console.log("🚀 Evento taxaEntregaChanged recebido:", event.detail);
      console.log("🚀 Atualizando taxaEntregaHabilitada para:", event.detail.taxaEntregaHabilitada);
      setTaxaEntregaHabilitada(event.detail.taxaEntregaHabilitada);
    };
    const handleConexaoChange = (event) => {
      console.log("🔗 Evento conexaoChanged recebido:", event.detail);
      console.log("🔗 Atualizando conexaoHabilitada para:", event.detail.conexaoHabilitada);
      setConexaoHabilitada(event.detail.conexaoHabilitada);
    };
    window.addEventListener("opcoesAdicionaisChanged", handleOpcoesAdicionaisChange);
    window.addEventListener("taxaEntregaChanged", handleTaxaEntregaChange);
    window.addEventListener("conexaoChanged", handleConexaoChange);
    const produtosSubscription = supabase.channel("produtos_config_changes").on(
      "postgres_changes",
      {
        event: "*",
        schema: "public",
        table: "produtos_config"
      },
      () => {
        console.log("Mudança detectada na tabela produtos_config");
        loadConfiguracoes();
      }
    ).subscribe();
    const taxaEntregaSubscription = supabase.channel("taxa_entrega_config_changes").on(
      "postgres_changes",
      {
        event: "*",
        schema: "public",
        table: "taxa_entrega_config"
      },
      () => {
        console.log("Mudança detectada na tabela taxa_entrega_config");
        loadConfiguracoes();
      }
    ).subscribe();
    const conexaoSubscription = supabase.channel("conexao_config_changes").on(
      "postgres_changes",
      {
        event: "*",
        schema: "public",
        table: "conexao_config"
      },
      () => {
        console.log("Mudança detectada na tabela conexao_config");
        loadConfiguracoes();
      }
    ).subscribe();
    return () => {
      window.removeEventListener("opcoesAdicionaisChanged", handleOpcoesAdicionaisChange);
      window.removeEventListener("taxaEntregaChanged", handleTaxaEntregaChange);
      window.removeEventListener("conexaoChanged", handleConexaoChange);
      produtosSubscription.unsubscribe();
      taxaEntregaSubscription.unsubscribe();
      conexaoSubscription.unsubscribe();
    };
  }, []);
  const getMenuItems = () => {
    const produtosSubmenu = [
      { icon: ListOrdered, label: "Itens", path: "/dashboard/produtos", tooltip: "Lista de Produtos" },
      { icon: Ruler, label: "Unidade", path: "/dashboard/unidade-medida", tooltip: "Unidades de Medida" }
    ];
    if (opcoesAdicionaisHabilitado) {
      produtosSubmenu.push({
        icon: PlusCircle,
        label: "Adicionais",
        path: "/dashboard/produtos/adicionais",
        tooltip: "Opções Adicionais"
      });
    }
    const menuItems2 = [
      { icon: Home, label: "Dashboard", path: "/dashboard", tooltip: "Dashboard" },
      {
        icon: Package2,
        label: "Produtos",
        tooltip: "Produtos",
        submenu: produtosSubmenu
      },
      {
        icon: Users,
        label: "Parceiros",
        tooltip: "Parceiros",
        submenu: [
          { icon: UserCheck, label: "Clientes", path: "/dashboard/clientes", tooltip: "Clientes" }
          // { icon: Briefcase, label: 'Vendedores', path: '/dashboard/vendedores', tooltip: 'Vendedores' }
        ]
      },
      { icon: ShoppingBag, label: "Pedidos", path: "/dashboard/pedidos", tooltip: "Pedidos" },
      // { icon: DollarSign, label: 'Faturamento', path: '/dashboard/faturamento', tooltip: 'Faturamento' },
      { icon: ShoppingCart, label: "PDV", path: "/dashboard/pdv", tooltip: "Ponto de Venda", isPDV: true },
      {
        icon: FileText,
        label: "Notas Fiscais",
        tooltip: "Notas Fiscais",
        submenu: [
          { icon: Receipt, label: "NFe", path: "/dashboard/nfe", tooltip: "Nota Fiscal Eletrônica" },
          { icon: FileX, label: "Inutilização", path: "/dashboard/inutilizacao", tooltip: "Inutilização de Numeração" }
        ]
      }
    ];
    if (taxaEntregaHabilitada) {
      menuItems2.push({
        icon: Truck,
        label: "Taxa de Entrega",
        path: "/dashboard/entregador/taxa",
        tooltip: "Taxa de Entrega"
      });
    }
    if (conexaoHabilitada) {
      menuItems2.push({
        icon: MessageSquare,
        label: "Conexão",
        path: "/dashboard/conexao",
        tooltip: "Conexão com WhatsApp"
      });
    }
    menuItems2.push({
      icon: Settings,
      label: "Configurações",
      path: "/dashboard/configuracoes",
      tooltip: "Configurações"
    });
    return menuItems2;
  };
  const menuItems = getMenuItems();
  const toggleSubmenu = (label) => {
    setExpandedSubmenu(expandedSubmenu === label ? null : label);
  };
  const handlePDVClick = async () => {
    try {
      await enterFullscreen();
      console.log("Fullscreen ativado, navegando para PDV...");
      navigate("/dashboard/pdv");
    } catch (error) {
      console.log("Erro ao ativar fullscreen, navegando mesmo assim:", error);
      navigate("/dashboard/pdv");
    }
  };
  const renderMenuItem = (item) => {
    if (item.isPDV) {
      const isActive = location.pathname === item.path;
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "button",
        {
          onClick: handlePDVClick,
          className: `w-full flex items-center px-3 py-2 my-1 rounded-lg transition-colors ${isActive ? "bg-primary-500/10 text-primary-400" : "text-gray-400 hover:bg-gray-800/50 hover:text-white"}`,
          title: !isExpanded ? item.tooltip : void 0,
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(item.icon, { size: 20 }),
            isExpanded && /* @__PURE__ */ jsxRuntimeExports.jsx(
              motion.span,
              {
                initial: { opacity: 0 },
                animate: { opacity: 1 },
                transition: { duration: 0.2 },
                className: "ml-3",
                children: item.label
              }
            )
          ]
        },
        item.path
      );
    }
    if (item.submenu) {
      const isSubmenuActive = item.submenu.some((subItem) => location.pathname === subItem.path);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => toggleSubmenu(item.label),
            className: `w-full flex items-center px-3 py-2 my-1 rounded-lg transition-colors ${isSubmenuActive ? "text-primary-400" : "text-gray-400"} hover:bg-gray-800/50 hover:text-white group relative`,
            title: !isExpanded ? item.tooltip : void 0,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(item.icon, { size: 20 }),
              isExpanded && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { opacity: 0 },
                  animate: { opacity: 1 },
                  transition: { duration: 0.2 },
                  className: "flex-1 flex items-center justify-between ml-3",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: item.label }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      ChevronDown,
                      {
                        size: 16,
                        className: `transform transition-transform ${expandedSubmenu === item.label ? "rotate-180" : ""}`
                      }
                    )
                  ]
                }
              )
            ]
          }
        ),
        (isExpanded || !isExpanded && expandedSubmenu === item.label) && expandedSubmenu === item.label && /* @__PURE__ */ jsxRuntimeExports.jsx(
          motion.div,
          {
            initial: { opacity: 0, height: 0 },
            animate: { opacity: 1, height: "auto" },
            exit: { opacity: 0, height: 0 },
            transition: { duration: 0.2 },
            className: `ml-${isExpanded ? "6" : "1"} mr-1 bg-black/40 rounded-lg py-1 min-w-0 w-full`,
            children: item.submenu.map((subItem) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              NavLink,
              {
                to: subItem.path,
                className: ({ isActive }) => `flex items-center px-3 py-2 my-1 rounded-lg transition-colors ${isActive && location.pathname === subItem.path ? "bg-primary-500/10 text-primary-400" : "text-gray-400 hover:bg-gray-800/50 hover:text-white"}`,
                title: !isExpanded ? subItem.tooltip : void 0,
                children: !isExpanded ? /* @__PURE__ */ jsxRuntimeExports.jsx(subItem.icon, { size: 20 }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "flex items-center gap-3", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(subItem.icon, { size: 16 }),
                  subItem.label
                ] })
              },
              subItem.path
            ))
          }
        )
      ] }, item.label);
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(
      NavLink,
      {
        to: item.path,
        className: ({ isActive }) => `flex items-center px-3 py-2 my-1 rounded-lg transition-colors ${isActive && location.pathname === item.path ? "bg-primary-500/10 text-primary-400" : "text-gray-400 hover:bg-gray-800/50 hover:text-white"}`,
        title: !isExpanded ? item.tooltip : void 0,
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(item.icon, { size: 20 }),
          isExpanded && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.span,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              transition: { duration: 0.2 },
              className: "ml-3",
              children: item.label
            }
          )
        ]
      },
      item.path
    );
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    motion.div,
    {
      initial: { width: "72px" },
      animate: { width: isExpanded ? "240px" : "72px" },
      transition: { duration: 0.3, ease: "easeInOut" },
      className: "h-screen bg-background-card fixed left-0 top-0 z-50 border-r border-gray-800 flex flex-col",
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-16 flex items-center px-4 border-b border-gray-800 relative flex-shrink-0", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-hidden pl-2", children: isExpanded ? /* @__PURE__ */ jsxRuntimeExports.jsx(Logo, { size: "md" }) : /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-3xl font-logo text-accent-500 font-bold", children: "n" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              onClick: toggle,
              className: "absolute -right-3 top-1/2 -translate-y-1/2 w-6 h-6 bg-background-card border border-gray-700 rounded-full flex items-center justify-center text-white hover:text-accent-500 hover:border-accent-500 transition-all duration-300 shadow-lg",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                motion.div,
                {
                  animate: { rotate: isExpanded ? 180 : 0 },
                  transition: { duration: 0.3 },
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRight, { size: 16 })
                }
              )
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("nav", { className: "flex-1 py-4 px-2 overflow-y-auto custom-scrollbar min-h-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-1", children: menuItems.map(renderMenuItem) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(UserProfileFooter, {}) })
      ]
    }
  );
};
const LoadingScreen = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-background-dark flex items-center justify-center z-50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { scale: 0.8, opacity: 0 },
        animate: { scale: 1, opacity: 1 },
        transition: { duration: 0.5 },
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Logo, { size: "lg" })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0, y: 20 },
        animate: { opacity: 1, y: 0 },
        transition: { delay: 0.3, duration: 0.5 },
        className: "mt-6 text-gray-400",
        children: "Carregando..."
      }
    )
  ] }) });
};
const useAuthSession = () => {
  const navigate = useNavigate();
  const checkSession = reactExports.useCallback(async () => {
    try {
      const { data: { session }, error } = await supabase.auth.getSession();
      if (error) {
        console.error("Erro ao verificar sessão:", error);
        return false;
      }
      if (!session) {
        console.log("Sessão não encontrada");
        return false;
      }
      const now2 = Math.floor(Date.now() / 1e3);
      const expiresAt2 = session.expires_at || 0;
      const timeUntilExpiry = expiresAt2 - now2;
      if (timeUntilExpiry <= 0) {
        console.log("Sessão expirada");
        return false;
      }
      if (timeUntilExpiry <= 300) {
        console.log("Sessão próxima do vencimento, tentando renovar...");
        return await refreshSession();
      }
      return true;
    } catch (error) {
      console.error("Erro ao verificar sessão:", error);
      return false;
    }
  }, []);
  const refreshSession = reactExports.useCallback(async () => {
    try {
      const { data, error } = await supabase.auth.refreshSession();
      if (error) {
        console.error("Erro ao renovar sessão:", error);
        return false;
      }
      if (data.session) {
        console.log("Sessão renovada com sucesso");
        return true;
      }
      return false;
    } catch (error) {
      console.error("Erro ao renovar sessão:", error);
      return false;
    }
  }, []);
  const handleSessionExpired = reactExports.useCallback(async () => {
    try {
      await supabase.auth.signOut();
      showMessage("warning", "Sua sessão expirou. Faça login novamente.");
      navigate("/entrar", { replace: true });
    } catch (error) {
      console.error("Erro ao fazer logout:", error);
      window.location.href = "/entrar";
    }
  }, [navigate]);
  const withSessionCheck = reactExports.useCallback(async (fn) => {
    var _a2, _b2, _c;
    const isSessionValid = await checkSession();
    if (!isSessionValid) {
      await handleSessionExpired();
      return null;
    }
    try {
      return await fn();
    } catch (error) {
      if (((_a2 = error == null ? void 0 : error.message) == null ? void 0 : _a2.includes("JWT")) || ((_b2 = error == null ? void 0 : error.message) == null ? void 0 : _b2.includes("session")) || ((_c = error == null ? void 0 : error.message) == null ? void 0 : _c.includes("unauthorized")) || (error == null ? void 0 : error.code) === "PGRST301") {
        console.log("Erro de autenticação detectado, verificando sessão...");
        const isStillValid = await checkSession();
        if (!isStillValid) {
          await handleSessionExpired();
          return null;
        }
      }
      throw error;
    }
  }, [checkSession, handleSessionExpired]);
  reactExports.useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (event === "SIGNED_OUT") {
          navigate("/entrar", { replace: true });
        }
      }
    );
    return () => {
      subscription.unsubscribe();
    };
  }, [navigate]);
  reactExports.useEffect(() => {
    const interval = setInterval(async () => {
      const isValid = await checkSession();
      if (!isValid) {
        await handleSessionExpired();
      }
    }, 5 * 60 * 1e3);
    return () => clearInterval(interval);
  }, [checkSession, handleSessionExpired]);
  return {
    checkSession,
    refreshSession,
    withSessionCheck,
    handleSessionExpired
  };
};
const SessionCheck = ({
  children,
  fallback = /* @__PURE__ */ jsxRuntimeExports.jsx(SessionCheckLoading, {})
}) => {
  const [isChecking, setIsChecking] = reactExports.useState(true);
  const [isAuthenticated, setIsAuthenticated] = reactExports.useState(false);
  const { checkSession } = useAuthSession();
  const navigate = useNavigate();
  reactExports.useEffect(() => {
    const verifySession = async () => {
      try {
        const isValid = await checkSession();
        if (isValid) {
          const { data: userData } = await supabase.auth.getUser();
          if (userData.user) {
            const { data: usuarioData } = await supabase.from("usuarios").select("id").eq("id", userData.user.id).single();
            if (usuarioData) {
              setIsAuthenticated(true);
            } else {
              await supabase.auth.signOut();
              navigate("/entrar", { replace: true });
            }
          } else {
            navigate("/entrar", { replace: true });
          }
        } else {
          navigate("/entrar", { replace: true });
        }
      } catch (error) {
        console.error("Erro ao verificar sessão:", error);
        navigate("/entrar", { replace: true });
      } finally {
        setIsChecking(false);
      }
    };
    verifySession();
  }, [checkSession, navigate]);
  if (isChecking) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: fallback });
  }
  if (!isAuthenticated) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children });
};
const SessionCheckLoading = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "min-h-screen flex items-center justify-center bg-background", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 border-2 border-primary-500 border-t-transparent rounded-full animate-spin mx-auto mb-4" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Verificando sessão..." })
  ] }) });
};
const MOBILE_BREAKPOINT = 600;
const isMobileScreen = () => {
  return window.innerWidth < MOBILE_BREAKPOINT;
};
const isDesktopScreen = () => {
  return window.innerWidth >= MOBILE_BREAKPOINT;
};
const REDIRECT_CONFIG = {
  // Rotas da versão web que devem ser redirecionadas para mobile
  WEB_TO_MOBILE_ROUTES: {
    "/dashboard": "/user/dashboard",
    "/dashboard/pedidos": "/user/pedidos",
    "/dashboard/pedidos/novo": "/user/pedidos/novo",
    "/dashboard/pedidos/editar": "/user/pedidos/editar",
    "/dashboard/produtos": "/user/produtos",
    "/dashboard/clientes": "/user/clientes",
    "/dashboard/configuracoes": "/user/configuracoes",
    "/dashboard/pdv": "/user/pdv"
  },
  // Rotas da versão mobile que devem ser redirecionadas para web
  MOBILE_TO_WEB_ROUTES: {
    "/user/dashboard": "/dashboard",
    "/user/pedidos": "/dashboard/pedidos",
    "/user/pedidos/novo": "/dashboard/pedidos/novo",
    "/user/pedidos/editar": "/dashboard/pedidos/editar",
    "/user/produtos": "/dashboard/produtos",
    "/user/clientes": "/dashboard/clientes",
    "/user/configuracoes": "/dashboard/configuracoes",
    "/user/pdv": "/dashboard/pdv"
  }
};
const webToMobileRoute = (webRoute) => {
  if (REDIRECT_CONFIG.WEB_TO_MOBILE_ROUTES[webRoute]) {
    return REDIRECT_CONFIG.WEB_TO_MOBILE_ROUTES[webRoute];
  }
  for (const [webPattern, mobileRoute] of Object.entries(REDIRECT_CONFIG.WEB_TO_MOBILE_ROUTES)) {
    if (webRoute.startsWith(webPattern)) {
      const params = webRoute.replace(webPattern, "");
      return mobileRoute + params;
    }
  }
  return "/user/dashboard";
};
const mobileToWebRoute = (mobileRoute) => {
  if (REDIRECT_CONFIG.MOBILE_TO_WEB_ROUTES[mobileRoute]) {
    return REDIRECT_CONFIG.MOBILE_TO_WEB_ROUTES[mobileRoute];
  }
  for (const [mobilePattern, webRoute] of Object.entries(REDIRECT_CONFIG.MOBILE_TO_WEB_ROUTES)) {
    if (mobileRoute.startsWith(mobilePattern)) {
      const params = mobileRoute.replace(mobilePattern, "");
      return webRoute + params;
    }
  }
  return "/dashboard";
};
const useResponsiveRedirect = () => {
  const navigate = useNavigate();
  const location = useLocation();
  reactExports.useEffect(() => {
    const handleResponsiveChange = (isMobile) => {
      const currentPath = location.pathname;
      if (isMobile && currentPath.startsWith("/dashboard")) {
        const mobileRoute = webToMobileRoute(currentPath);
        console.log(`Redirecionando para mobile: ${currentPath} -> ${mobileRoute}`);
        navigate(mobileRoute, { replace: true });
      } else if (!isMobile && currentPath.startsWith("/user")) {
        const webRoute = mobileToWebRoute(currentPath);
        console.log(`Redirecionando para web: ${currentPath} -> ${webRoute}`);
        navigate(webRoute, { replace: true });
      }
    };
    const handleResize = () => {
      handleResponsiveChange(isMobileScreen());
    };
    window.addEventListener("resize", handleResize);
    handleResize();
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, [navigate, location.pathname]);
  return {
    isMobile: isMobileScreen(),
    isDesktop: !isMobileScreen()
  };
};
const DashboardLayout = () => {
  const { isExpanded } = useSidebarStore();
  const [isLoading, setIsLoading] = reactExports.useState(true);
  const location = useLocation();
  useResponsiveRedirect();
  const isPDVPage = location.pathname === "/dashboard/pdv";
  reactExports.useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 1500);
    return () => clearTimeout(timer);
  }, []);
  if (isLoading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingScreen, {});
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(SessionCheck, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingScreen, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "min-h-screen bg-background-dark", children: [
    !isPDVPage && /* @__PURE__ */ jsxRuntimeExports.jsx(Sidebar, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.main,
      {
        initial: { marginLeft: isPDVPage ? "0px" : "72px" },
        animate: {
          marginLeft: isPDVPage ? "0px" : isExpanded ? "240px" : "72px"
        },
        transition: { duration: 0.3, ease: "easeInOut" },
        className: "min-h-screen overflow-y-auto custom-scrollbar",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: isPDVPage ? "" : "p-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {}) })
      }
    )
  ] }) });
};
/*!
 * @kurkle/color v0.3.4
 * https://github.com/kurkle/color#readme
 * (c) 2024 Jukka Kurkela
 * Released under the MIT License
 */
function round(v2) {
  return v2 + 0.5 | 0;
}
const lim = (v2, l2, h3) => Math.max(Math.min(v2, h3), l2);
function p2b(v2) {
  return lim(round(v2 * 2.55), 0, 255);
}
function n2b(v2) {
  return lim(round(v2 * 255), 0, 255);
}
function b2n(v2) {
  return lim(round(v2 / 2.55) / 100, 0, 1);
}
function n2p(v2) {
  return lim(round(v2 * 100), 0, 100);
}
const map$1 = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 };
const hex = [..."0123456789ABCDEF"];
const h1 = (b2) => hex[b2 & 15];
const h2 = (b2) => hex[(b2 & 240) >> 4] + hex[b2 & 15];
const eq = (b2) => (b2 & 240) >> 4 === (b2 & 15);
const isShort = (v2) => eq(v2.r) && eq(v2.g) && eq(v2.b) && eq(v2.a);
function hexParse(str) {
  var len = str.length;
  var ret;
  if (str[0] === "#") {
    if (len === 4 || len === 5) {
      ret = {
        r: 255 & map$1[str[1]] * 17,
        g: 255 & map$1[str[2]] * 17,
        b: 255 & map$1[str[3]] * 17,
        a: len === 5 ? map$1[str[4]] * 17 : 255
      };
    } else if (len === 7 || len === 9) {
      ret = {
        r: map$1[str[1]] << 4 | map$1[str[2]],
        g: map$1[str[3]] << 4 | map$1[str[4]],
        b: map$1[str[5]] << 4 | map$1[str[6]],
        a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
      };
    }
  }
  return ret;
}
const alpha = (a, f2) => a < 255 ? f2(a) : "";
function hexString(v2) {
  var f2 = isShort(v2) ? h1 : h2;
  return v2 ? "#" + f2(v2.r) + f2(v2.g) + f2(v2.b) + alpha(v2.a, f2) : void 0;
}
const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h3, s, l2) {
  const a = s * Math.min(l2, 1 - l2);
  const f2 = (n2, k2 = (n2 + h3 / 30) % 12) => l2 - a * Math.max(Math.min(k2 - 3, 9 - k2, 1), -1);
  return [f2(0), f2(8), f2(4)];
}
function hsv2rgbn(h3, s, v2) {
  const f2 = (n2, k2 = (n2 + h3 / 60) % 6) => v2 - v2 * s * Math.max(Math.min(k2, 4 - k2, 1), 0);
  return [f2(5), f2(3), f2(1)];
}
function hwb2rgbn(h3, w2, b2) {
  const rgb = hsl2rgbn(h3, 1, 0.5);
  let i;
  if (w2 + b2 > 1) {
    i = 1 / (w2 + b2);
    w2 *= i;
    b2 *= i;
  }
  for (i = 0; i < 3; i++) {
    rgb[i] *= 1 - w2 - b2;
    rgb[i] += w2;
  }
  return rgb;
}
function hueValue(r2, g2, b2, d2, max) {
  if (r2 === max) {
    return (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
  }
  if (g2 === max) {
    return (b2 - r2) / d2 + 2;
  }
  return (r2 - g2) / d2 + 4;
}
function rgb2hsl(v2) {
  const range = 255;
  const r2 = v2.r / range;
  const g2 = v2.g / range;
  const b2 = v2.b / range;
  const max = Math.max(r2, g2, b2);
  const min = Math.min(r2, g2, b2);
  const l2 = (max + min) / 2;
  let h3, s, d2;
  if (max !== min) {
    d2 = max - min;
    s = l2 > 0.5 ? d2 / (2 - max - min) : d2 / (max + min);
    h3 = hueValue(r2, g2, b2, d2, max);
    h3 = h3 * 60 + 0.5;
  }
  return [h3 | 0, s || 0, l2];
}
function calln(f2, a, b2, c2) {
  return (Array.isArray(a) ? f2(a[0], a[1], a[2]) : f2(a, b2, c2)).map(n2b);
}
function hsl2rgb(h3, s, l2) {
  return calln(hsl2rgbn, h3, s, l2);
}
function hwb2rgb(h3, w2, b2) {
  return calln(hwb2rgbn, h3, w2, b2);
}
function hsv2rgb(h3, s, v2) {
  return calln(hsv2rgbn, h3, s, v2);
}
function hue(h3) {
  return (h3 % 360 + 360) % 360;
}
function hueParse(str) {
  const m2 = HUE_RE.exec(str);
  let a = 255;
  let v2;
  if (!m2) {
    return;
  }
  if (m2[5] !== v2) {
    a = m2[6] ? p2b(+m2[5]) : n2b(+m2[5]);
  }
  const h3 = hue(+m2[2]);
  const p1 = +m2[3] / 100;
  const p2 = +m2[4] / 100;
  if (m2[1] === "hwb") {
    v2 = hwb2rgb(h3, p1, p2);
  } else if (m2[1] === "hsv") {
    v2 = hsv2rgb(h3, p1, p2);
  } else {
    v2 = hsl2rgb(h3, p1, p2);
  }
  return {
    r: v2[0],
    g: v2[1],
    b: v2[2],
    a
  };
}
function rotate(v2, deg) {
  var h3 = rgb2hsl(v2);
  h3[0] = hue(h3[0] + deg);
  h3 = hsl2rgb(h3);
  v2.r = h3[0];
  v2.g = h3[1];
  v2.b = h3[2];
}
function hslString(v2) {
  if (!v2) {
    return;
  }
  const a = rgb2hsl(v2);
  const h3 = a[0];
  const s = n2p(a[1]);
  const l2 = n2p(a[2]);
  return v2.a < 255 ? `hsla(${h3}, ${s}%, ${l2}%, ${b2n(v2.a)})` : `hsl(${h3}, ${s}%, ${l2}%)`;
}
const map = {
  x: "dark",
  Z: "light",
  Y: "re",
  X: "blu",
  W: "gr",
  V: "medium",
  U: "slate",
  A: "ee",
  T: "ol",
  S: "or",
  B: "ra",
  C: "lateg",
  D: "ights",
  R: "in",
  Q: "turquois",
  E: "hi",
  P: "ro",
  O: "al",
  N: "le",
  M: "de",
  L: "yello",
  F: "en",
  K: "ch",
  G: "arks",
  H: "ea",
  I: "ightg",
  J: "wh"
};
const names$1 = {
  OiceXe: "f0f8ff",
  antiquewEte: "faebd7",
  aqua: "ffff",
  aquamarRe: "7fffd4",
  azuY: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "0",
  blanKedOmond: "ffebcd",
  Xe: "ff",
  XeviTet: "8a2be2",
  bPwn: "a52a2a",
  burlywood: "deb887",
  caMtXe: "5f9ea0",
  KartYuse: "7fff00",
  KocTate: "d2691e",
  cSO: "ff7f50",
  cSnflowerXe: "6495ed",
  cSnsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "ffff",
  xXe: "8b",
  xcyan: "8b8b",
  xgTMnPd: "b8860b",
  xWay: "a9a9a9",
  xgYF: "6400",
  xgYy: "a9a9a9",
  xkhaki: "bdb76b",
  xmagFta: "8b008b",
  xTivegYF: "556b2f",
  xSange: "ff8c00",
  xScEd: "9932cc",
  xYd: "8b0000",
  xsOmon: "e9967a",
  xsHgYF: "8fbc8f",
  xUXe: "483d8b",
  xUWay: "2f4f4f",
  xUgYy: "2f4f4f",
  xQe: "ced1",
  xviTet: "9400d3",
  dAppRk: "ff1493",
  dApskyXe: "bfff",
  dimWay: "696969",
  dimgYy: "696969",
  dodgerXe: "1e90ff",
  fiYbrick: "b22222",
  flSOwEte: "fffaf0",
  foYstWAn: "228b22",
  fuKsia: "ff00ff",
  gaRsbSo: "dcdcdc",
  ghostwEte: "f8f8ff",
  gTd: "ffd700",
  gTMnPd: "daa520",
  Way: "808080",
  gYF: "8000",
  gYFLw: "adff2f",
  gYy: "808080",
  honeyMw: "f0fff0",
  hotpRk: "ff69b4",
  RdianYd: "cd5c5c",
  Rdigo: "4b0082",
  ivSy: "fffff0",
  khaki: "f0e68c",
  lavFMr: "e6e6fa",
  lavFMrXsh: "fff0f5",
  lawngYF: "7cfc00",
  NmoncEffon: "fffacd",
  ZXe: "add8e6",
  ZcSO: "f08080",
  Zcyan: "e0ffff",
  ZgTMnPdLw: "fafad2",
  ZWay: "d3d3d3",
  ZgYF: "90ee90",
  ZgYy: "d3d3d3",
  ZpRk: "ffb6c1",
  ZsOmon: "ffa07a",
  ZsHgYF: "20b2aa",
  ZskyXe: "87cefa",
  ZUWay: "778899",
  ZUgYy: "778899",
  ZstAlXe: "b0c4de",
  ZLw: "ffffe0",
  lime: "ff00",
  limegYF: "32cd32",
  lRF: "faf0e6",
  magFta: "ff00ff",
  maPon: "800000",
  VaquamarRe: "66cdaa",
  VXe: "cd",
  VScEd: "ba55d3",
  VpurpN: "9370db",
  VsHgYF: "3cb371",
  VUXe: "7b68ee",
  VsprRggYF: "fa9a",
  VQe: "48d1cc",
  VviTetYd: "c71585",
  midnightXe: "191970",
  mRtcYam: "f5fffa",
  mistyPse: "ffe4e1",
  moccasR: "ffe4b5",
  navajowEte: "ffdead",
  navy: "80",
  Tdlace: "fdf5e6",
  Tive: "808000",
  TivedBb: "6b8e23",
  Sange: "ffa500",
  SangeYd: "ff4500",
  ScEd: "da70d6",
  pOegTMnPd: "eee8aa",
  pOegYF: "98fb98",
  pOeQe: "afeeee",
  pOeviTetYd: "db7093",
  papayawEp: "ffefd5",
  pHKpuff: "ffdab9",
  peru: "cd853f",
  pRk: "ffc0cb",
  plum: "dda0dd",
  powMrXe: "b0e0e6",
  purpN: "800080",
  YbeccapurpN: "663399",
  Yd: "ff0000",
  Psybrown: "bc8f8f",
  PyOXe: "4169e1",
  saddNbPwn: "8b4513",
  sOmon: "fa8072",
  sandybPwn: "f4a460",
  sHgYF: "2e8b57",
  sHshell: "fff5ee",
  siFna: "a0522d",
  silver: "c0c0c0",
  skyXe: "87ceeb",
  UXe: "6a5acd",
  UWay: "708090",
  UgYy: "708090",
  snow: "fffafa",
  sprRggYF: "ff7f",
  stAlXe: "4682b4",
  tan: "d2b48c",
  teO: "8080",
  tEstN: "d8bfd8",
  tomato: "ff6347",
  Qe: "40e0d0",
  viTet: "ee82ee",
  JHt: "f5deb3",
  wEte: "ffffff",
  wEtesmoke: "f5f5f5",
  Lw: "ffff00",
  LwgYF: "9acd32"
};
function unpack() {
  const unpacked = {};
  const keys = Object.keys(names$1);
  const tkeys = Object.keys(map);
  let i, j, k2, ok2, nk2;
  for (i = 0; i < keys.length; i++) {
    ok2 = nk2 = keys[i];
    for (j = 0; j < tkeys.length; j++) {
      k2 = tkeys[j];
      nk2 = nk2.replace(k2, map[k2]);
    }
    k2 = parseInt(names$1[ok2], 16);
    unpacked[nk2] = [k2 >> 16 & 255, k2 >> 8 & 255, k2 & 255];
  }
  return unpacked;
}
let names;
function nameParse(str) {
  if (!names) {
    names = unpack();
    names.transparent = [0, 0, 0, 0];
  }
  const a = names[str.toLowerCase()];
  return a && {
    r: a[0],
    g: a[1],
    b: a[2],
    a: a.length === 4 ? a[3] : 255
  };
}
const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
  const m2 = RGB_RE.exec(str);
  let a = 255;
  let r2, g2, b2;
  if (!m2) {
    return;
  }
  if (m2[7] !== r2) {
    const v2 = +m2[7];
    a = m2[8] ? p2b(v2) : lim(v2 * 255, 0, 255);
  }
  r2 = +m2[1];
  g2 = +m2[3];
  b2 = +m2[5];
  r2 = 255 & (m2[2] ? p2b(r2) : lim(r2, 0, 255));
  g2 = 255 & (m2[4] ? p2b(g2) : lim(g2, 0, 255));
  b2 = 255 & (m2[6] ? p2b(b2) : lim(b2, 0, 255));
  return {
    r: r2,
    g: g2,
    b: b2,
    a
  };
}
function rgbString(v2) {
  return v2 && (v2.a < 255 ? `rgba(${v2.r}, ${v2.g}, ${v2.b}, ${b2n(v2.a)})` : `rgb(${v2.r}, ${v2.g}, ${v2.b})`);
}
const to = (v2) => v2 <= 31308e-7 ? v2 * 12.92 : Math.pow(v2, 1 / 2.4) * 1.055 - 0.055;
const from = (v2) => v2 <= 0.04045 ? v2 / 12.92 : Math.pow((v2 + 0.055) / 1.055, 2.4);
function interpolate$1(rgb1, rgb2, t2) {
  const r2 = from(b2n(rgb1.r));
  const g2 = from(b2n(rgb1.g));
  const b2 = from(b2n(rgb1.b));
  return {
    r: n2b(to(r2 + t2 * (from(b2n(rgb2.r)) - r2))),
    g: n2b(to(g2 + t2 * (from(b2n(rgb2.g)) - g2))),
    b: n2b(to(b2 + t2 * (from(b2n(rgb2.b)) - b2))),
    a: rgb1.a + t2 * (rgb2.a - rgb1.a)
  };
}
function modHSL(v2, i, ratio) {
  if (v2) {
    let tmp = rgb2hsl(v2);
    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
    tmp = hsl2rgb(tmp);
    v2.r = tmp[0];
    v2.g = tmp[1];
    v2.b = tmp[2];
  }
}
function clone$1(v2, proto) {
  return v2 ? Object.assign(proto || {}, v2) : v2;
}
function fromObject(input) {
  var v2 = { r: 0, g: 0, b: 0, a: 255 };
  if (Array.isArray(input)) {
    if (input.length >= 3) {
      v2 = { r: input[0], g: input[1], b: input[2], a: 255 };
      if (input.length > 3) {
        v2.a = n2b(input[3]);
      }
    }
  } else {
    v2 = clone$1(input, { r: 0, g: 0, b: 0, a: 1 });
    v2.a = n2b(v2.a);
  }
  return v2;
}
function functionParse(str) {
  if (str.charAt(0) === "r") {
    return rgbParse(str);
  }
  return hueParse(str);
}
class Color {
  constructor(input) {
    if (input instanceof Color) {
      return input;
    }
    const type = typeof input;
    let v2;
    if (type === "object") {
      v2 = fromObject(input);
    } else if (type === "string") {
      v2 = hexParse(input) || nameParse(input) || functionParse(input);
    }
    this._rgb = v2;
    this._valid = !!v2;
  }
  get valid() {
    return this._valid;
  }
  get rgb() {
    var v2 = clone$1(this._rgb);
    if (v2) {
      v2.a = b2n(v2.a);
    }
    return v2;
  }
  set rgb(obj) {
    this._rgb = fromObject(obj);
  }
  rgbString() {
    return this._valid ? rgbString(this._rgb) : void 0;
  }
  hexString() {
    return this._valid ? hexString(this._rgb) : void 0;
  }
  hslString() {
    return this._valid ? hslString(this._rgb) : void 0;
  }
  mix(color2, weight) {
    if (color2) {
      const c1 = this.rgb;
      const c2 = color2.rgb;
      let w2;
      const p2 = weight === w2 ? 0.5 : weight;
      const w3 = 2 * p2 - 1;
      const a = c1.a - c2.a;
      const w1 = ((w3 * a === -1 ? w3 : (w3 + a) / (1 + w3 * a)) + 1) / 2;
      w2 = 1 - w1;
      c1.r = 255 & w1 * c1.r + w2 * c2.r + 0.5;
      c1.g = 255 & w1 * c1.g + w2 * c2.g + 0.5;
      c1.b = 255 & w1 * c1.b + w2 * c2.b + 0.5;
      c1.a = p2 * c1.a + (1 - p2) * c2.a;
      this.rgb = c1;
    }
    return this;
  }
  interpolate(color2, t2) {
    if (color2) {
      this._rgb = interpolate$1(this._rgb, color2._rgb, t2);
    }
    return this;
  }
  clone() {
    return new Color(this.rgb);
  }
  alpha(a) {
    this._rgb.a = n2b(a);
    return this;
  }
  clearer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 - ratio;
    return this;
  }
  greyscale() {
    const rgb = this._rgb;
    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
    rgb.r = rgb.g = rgb.b = val;
    return this;
  }
  opaquer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 + ratio;
    return this;
  }
  negate() {
    const v2 = this._rgb;
    v2.r = 255 - v2.r;
    v2.g = 255 - v2.g;
    v2.b = 255 - v2.b;
    return this;
  }
  lighten(ratio) {
    modHSL(this._rgb, 2, ratio);
    return this;
  }
  darken(ratio) {
    modHSL(this._rgb, 2, -ratio);
    return this;
  }
  saturate(ratio) {
    modHSL(this._rgb, 1, ratio);
    return this;
  }
  desaturate(ratio) {
    modHSL(this._rgb, 1, -ratio);
    return this;
  }
  rotate(deg) {
    rotate(this._rgb, deg);
    return this;
  }
}
/*!
 * Chart.js v4.4.9
 * https://www.chartjs.org
 * (c) 2025 Chart.js Contributors
 * Released under the MIT License
 */
function noop() {
}
const uid = /* @__PURE__ */ (() => {
  let id2 = 0;
  return () => id2++;
})();
function isNullOrUndef(value) {
  return value === null || value === void 0;
}
function isArray(value) {
  if (Array.isArray && Array.isArray(value)) {
    return true;
  }
  const type = Object.prototype.toString.call(value);
  if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") {
    return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && Object.prototype.toString.call(value) === "[object Object]";
}
function isNumberFinite(value) {
  return (typeof value === "number" || value instanceof Number) && isFinite(+value);
}
function finiteOrDefault(value, defaultValue) {
  return isNumberFinite(value) ? value : defaultValue;
}
function valueOrDefault(value, defaultValue) {
  return typeof value === "undefined" ? defaultValue : value;
}
const toDimension = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value;
function callback(fn, args, thisArg) {
  if (fn && typeof fn.call === "function") {
    return fn.apply(thisArg, args);
  }
}
function each(loopable, fn, thisArg, reverse) {
  let i, len, keys;
  if (isArray(loopable)) {
    len = loopable.length;
    {
      for (i = 0; i < len; i++) {
        fn.call(thisArg, loopable[i], i);
      }
    }
  } else if (isObject(loopable)) {
    keys = Object.keys(loopable);
    len = keys.length;
    for (i = 0; i < len; i++) {
      fn.call(thisArg, loopable[keys[i]], keys[i]);
    }
  }
}
function _elementsEqual(a0, a1) {
  let i, ilen, v0, v1;
  if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
  }
  for (i = 0, ilen = a0.length; i < ilen; ++i) {
    v0 = a0[i];
    v1 = a1[i];
    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
      return false;
    }
  }
  return true;
}
function clone(source) {
  if (isArray(source)) {
    return source.map(clone);
  }
  if (isObject(source)) {
    const target = /* @__PURE__ */ Object.create(null);
    const keys = Object.keys(source);
    const klen = keys.length;
    let k2 = 0;
    for (; k2 < klen; ++k2) {
      target[keys[k2]] = clone(source[keys[k2]]);
    }
    return target;
  }
  return source;
}
function isValidKey(key) {
  return [
    "__proto__",
    "prototype",
    "constructor"
  ].indexOf(key) === -1;
}
function _merger(key, target, source, options) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    merge(tval, sval, options);
  } else {
    target[key] = clone(sval);
  }
}
function merge(target, source, options) {
  const sources = isArray(source) ? source : [
    source
  ];
  const ilen = sources.length;
  if (!isObject(target)) {
    return target;
  }
  options = options || {};
  const merger = options.merger || _merger;
  let current;
  for (let i = 0; i < ilen; ++i) {
    current = sources[i];
    if (!isObject(current)) {
      continue;
    }
    const keys = Object.keys(current);
    for (let k2 = 0, klen = keys.length; k2 < klen; ++k2) {
      merger(keys[k2], target, current, options);
    }
  }
  return target;
}
function mergeIf(target, source) {
  return merge(target, source, {
    merger: _mergerIf
  });
}
function _mergerIf(key, target, source) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    mergeIf(tval, sval);
  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
    target[key] = clone(sval);
  }
}
const keyResolvers = {
  // Chart.helpers.core resolveObjectKey should resolve empty key to root object
  "": (v2) => v2,
  // default resolvers
  x: (o) => o.x,
  y: (o) => o.y
};
function _splitKey(key) {
  const parts = key.split(".");
  const keys = [];
  let tmp = "";
  for (const part of parts) {
    tmp += part;
    if (tmp.endsWith("\\")) {
      tmp = tmp.slice(0, -1) + ".";
    } else {
      keys.push(tmp);
      tmp = "";
    }
  }
  return keys;
}
function _getKeyResolver(key) {
  const keys = _splitKey(key);
  return (obj) => {
    for (const k2 of keys) {
      if (k2 === "") {
        break;
      }
      obj = obj && obj[k2];
    }
    return obj;
  };
}
function resolveObjectKey(obj, key) {
  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
  return resolver(obj);
}
function _capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
const defined = (value) => typeof value !== "undefined";
const isFunction = (value) => typeof value === "function";
const setsEqual = (a, b2) => {
  if (a.size !== b2.size) {
    return false;
  }
  for (const item of a) {
    if (!b2.has(item)) {
      return false;
    }
  }
  return true;
};
function _isClickEvent(e) {
  return e.type === "mouseup" || e.type === "click" || e.type === "contextmenu";
}
const PI = Math.PI;
const TAU = 2 * PI;
const PITAU = TAU + PI;
const INFINITY = Number.POSITIVE_INFINITY;
const RAD_PER_DEG = PI / 180;
const HALF_PI = PI / 2;
const QUARTER_PI = PI / 4;
const TWO_THIRDS_PI = PI * 2 / 3;
const log10 = Math.log10;
const sign = Math.sign;
function almostEquals(x2, y2, epsilon) {
  return Math.abs(x2 - y2) < epsilon;
}
function niceNum(range) {
  const roundedRange = Math.round(range);
  range = almostEquals(range, roundedRange, range / 1e3) ? roundedRange : range;
  const niceRange = Math.pow(10, Math.floor(log10(range)));
  const fraction = range / niceRange;
  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
  return niceFraction * niceRange;
}
function _factorize(value) {
  const result = [];
  const sqrt = Math.sqrt(value);
  let i;
  for (i = 1; i < sqrt; i++) {
    if (value % i === 0) {
      result.push(i);
      result.push(value / i);
    }
  }
  if (sqrt === (sqrt | 0)) {
    result.push(sqrt);
  }
  result.sort((a, b2) => a - b2).pop();
  return result;
}
function isNonPrimitive(n2) {
  return typeof n2 === "symbol" || typeof n2 === "object" && n2 !== null && !(Symbol.toPrimitive in n2 || "toString" in n2 || "valueOf" in n2);
}
function isNumber(n2) {
  return !isNonPrimitive(n2) && !isNaN(parseFloat(n2)) && isFinite(n2);
}
function almostWhole(x2, epsilon) {
  const rounded = Math.round(x2);
  return rounded - epsilon <= x2 && rounded + epsilon >= x2;
}
function _setMinAndMaxByKey(array, target, property) {
  let i, ilen, value;
  for (i = 0, ilen = array.length; i < ilen; i++) {
    value = array[i][property];
    if (!isNaN(value)) {
      target.min = Math.min(target.min, value);
      target.max = Math.max(target.max, value);
    }
  }
}
function toRadians(degrees2) {
  return degrees2 * (PI / 180);
}
function toDegrees(radians) {
  return radians * (180 / PI);
}
function _decimalPlaces(x2) {
  if (!isNumberFinite(x2)) {
    return;
  }
  let e = 1;
  let p2 = 0;
  while (Math.round(x2 * e) / e !== x2) {
    e *= 10;
    p2++;
  }
  return p2;
}
function getAngleFromPoint(centrePoint, anglePoint) {
  const distanceFromXCenter = anglePoint.x - centrePoint.x;
  const distanceFromYCenter = anglePoint.y - centrePoint.y;
  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
  if (angle < -0.5 * PI) {
    angle += TAU;
  }
  return {
    angle,
    distance: radialDistanceFromCenter
  };
}
function distanceBetweenPoints(pt1, pt2) {
  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
function _angleDiff(a, b2) {
  return (a - b2 + PITAU) % TAU - PI;
}
function _normalizeAngle(a) {
  return (a % TAU + TAU) % TAU;
}
function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
  const a = _normalizeAngle(angle);
  const s = _normalizeAngle(start);
  const e = _normalizeAngle(end);
  const angleToStart = _normalizeAngle(s - a);
  const angleToEnd = _normalizeAngle(e - a);
  const startToAngle = _normalizeAngle(a - s);
  const endToAngle = _normalizeAngle(a - e);
  return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
}
function _limitValue(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function _int16Range(value) {
  return _limitValue(value, -32768, 32767);
}
function _isBetween(value, start, end, epsilon = 1e-6) {
  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}
function _lookup(table, value, cmp) {
  cmp = cmp || ((index2) => table[index2] < value);
  let hi2 = table.length - 1;
  let lo = 0;
  let mid;
  while (hi2 - lo > 1) {
    mid = lo + hi2 >> 1;
    if (cmp(mid)) {
      lo = mid;
    } else {
      hi2 = mid;
    }
  }
  return {
    lo,
    hi: hi2
  };
}
const _lookupByKey = (table, key, value, last) => _lookup(table, value, last ? (index2) => {
  const ti2 = table[index2][key];
  return ti2 < value || ti2 === value && table[index2 + 1][key] === value;
} : (index2) => table[index2][key] < value);
const _rlookupByKey = (table, key, value) => _lookup(table, value, (index2) => table[index2][key] >= value);
function _filterBetween(values, min, max) {
  let start = 0;
  let end = values.length;
  while (start < end && values[start] < min) {
    start++;
  }
  while (end > start && values[end - 1] > max) {
    end--;
  }
  return start > 0 || end < values.length ? values.slice(start, end) : values;
}
const arrayEvents = [
  "push",
  "pop",
  "shift",
  "splice",
  "unshift"
];
function listenArrayEvents(array, listener) {
  if (array._chartjs) {
    array._chartjs.listeners.push(listener);
    return;
  }
  Object.defineProperty(array, "_chartjs", {
    configurable: true,
    enumerable: false,
    value: {
      listeners: [
        listener
      ]
    }
  });
  arrayEvents.forEach((key) => {
    const method = "_onData" + _capitalize(key);
    const base = array[key];
    Object.defineProperty(array, key, {
      configurable: true,
      enumerable: false,
      value(...args) {
        const res = base.apply(this, args);
        array._chartjs.listeners.forEach((object) => {
          if (typeof object[method] === "function") {
            object[method](...args);
          }
        });
        return res;
      }
    });
  });
}
function unlistenArrayEvents(array, listener) {
  const stub = array._chartjs;
  if (!stub) {
    return;
  }
  const listeners = stub.listeners;
  const index2 = listeners.indexOf(listener);
  if (index2 !== -1) {
    listeners.splice(index2, 1);
  }
  if (listeners.length > 0) {
    return;
  }
  arrayEvents.forEach((key) => {
    delete array[key];
  });
  delete array._chartjs;
}
function _arrayUnique(items) {
  const set2 = new Set(items);
  if (set2.size === items.length) {
    return items;
  }
  return Array.from(set2);
}
const requestAnimFrame = function() {
  if (typeof window === "undefined") {
    return function(callback2) {
      return callback2();
    };
  }
  return window.requestAnimationFrame;
}();
function throttled(fn, thisArg) {
  let argsToUse = [];
  let ticking = false;
  return function(...args) {
    argsToUse = args;
    if (!ticking) {
      ticking = true;
      requestAnimFrame.call(window, () => {
        ticking = false;
        fn.apply(thisArg, argsToUse);
      });
    }
  };
}
function debounce$1(fn, delay2) {
  let timeout;
  return function(...args) {
    if (delay2) {
      clearTimeout(timeout);
      timeout = setTimeout(fn, delay2, args);
    } else {
      fn.apply(this, args);
    }
    return delay2;
  };
}
const _toLeftRightCenter = (align) => align === "start" ? "left" : align === "end" ? "right" : "center";
const _alignStartEnd = (align, start, end) => align === "start" ? start : align === "end" ? end : (start + end) / 2;
const _textX = (align, left, right, rtl) => {
  const check = rtl ? "left" : "right";
  return align === check ? right : align === "center" ? (left + right) / 2 : left;
};
function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
  const pointCount = points.length;
  let start = 0;
  let count = pointCount;
  if (meta._sorted) {
    const { iScale, vScale, _parsed } = meta;
    const spanGaps = meta.dataset ? meta.dataset.options ? meta.dataset.options.spanGaps : null : null;
    const axis = iScale.axis;
    const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
    if (minDefined) {
      start = Math.min(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, axis, min).lo,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo
      );
      if (spanGaps) {
        const distanceToDefinedLo = _parsed.slice(0, start + 1).reverse().findIndex((point) => !isNullOrUndef(point[vScale.axis]));
        start -= Math.max(0, distanceToDefinedLo);
      }
      start = _limitValue(start, 0, pointCount - 1);
    }
    if (maxDefined) {
      let end = Math.max(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1
      );
      if (spanGaps) {
        const distanceToDefinedHi = _parsed.slice(end - 1).findIndex((point) => !isNullOrUndef(point[vScale.axis]));
        end += Math.max(0, distanceToDefinedHi);
      }
      count = _limitValue(end, start, pointCount) - start;
    } else {
      count = pointCount - start;
    }
  }
  return {
    start,
    count
  };
}
function _scaleRangesChanged(meta) {
  const { xScale, yScale, _scaleRanges } = meta;
  const newRanges = {
    xmin: xScale.min,
    xmax: xScale.max,
    ymin: yScale.min,
    ymax: yScale.max
  };
  if (!_scaleRanges) {
    meta._scaleRanges = newRanges;
    return true;
  }
  const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
  Object.assign(_scaleRanges, newRanges);
  return changed;
}
const atEdge = (t2) => t2 === 0 || t2 === 1;
const elasticIn = (t2, s, p2) => -(Math.pow(2, 10 * (t2 -= 1)) * Math.sin((t2 - s) * TAU / p2));
const elasticOut = (t2, s, p2) => Math.pow(2, -10 * t2) * Math.sin((t2 - s) * TAU / p2) + 1;
const effects = {
  linear: (t2) => t2,
  easeInQuad: (t2) => t2 * t2,
  easeOutQuad: (t2) => -t2 * (t2 - 2),
  easeInOutQuad: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 : -0.5 * (--t2 * (t2 - 2) - 1),
  easeInCubic: (t2) => t2 * t2 * t2,
  easeOutCubic: (t2) => (t2 -= 1) * t2 * t2 + 1,
  easeInOutCubic: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 + 2),
  easeInQuart: (t2) => t2 * t2 * t2 * t2,
  easeOutQuart: (t2) => -((t2 -= 1) * t2 * t2 * t2 - 1),
  easeInOutQuart: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 : -0.5 * ((t2 -= 2) * t2 * t2 * t2 - 2),
  easeInQuint: (t2) => t2 * t2 * t2 * t2 * t2,
  easeOutQuint: (t2) => (t2 -= 1) * t2 * t2 * t2 * t2 + 1,
  easeInOutQuint: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 * t2 * t2 + 2),
  easeInSine: (t2) => -Math.cos(t2 * HALF_PI) + 1,
  easeOutSine: (t2) => Math.sin(t2 * HALF_PI),
  easeInOutSine: (t2) => -0.5 * (Math.cos(PI * t2) - 1),
  easeInExpo: (t2) => t2 === 0 ? 0 : Math.pow(2, 10 * (t2 - 1)),
  easeOutExpo: (t2) => t2 === 1 ? 1 : -Math.pow(2, -10 * t2) + 1,
  easeInOutExpo: (t2) => atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * Math.pow(2, 10 * (t2 * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t2 * 2 - 1)) + 2),
  easeInCirc: (t2) => t2 >= 1 ? t2 : -(Math.sqrt(1 - t2 * t2) - 1),
  easeOutCirc: (t2) => Math.sqrt(1 - (t2 -= 1) * t2),
  easeInOutCirc: (t2) => (t2 /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t2 * t2) - 1) : 0.5 * (Math.sqrt(1 - (t2 -= 2) * t2) + 1),
  easeInElastic: (t2) => atEdge(t2) ? t2 : elasticIn(t2, 0.075, 0.3),
  easeOutElastic: (t2) => atEdge(t2) ? t2 : elasticOut(t2, 0.075, 0.3),
  easeInOutElastic(t2) {
    const s = 0.1125;
    const p2 = 0.45;
    return atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * elasticIn(t2 * 2, s, p2) : 0.5 + 0.5 * elasticOut(t2 * 2 - 1, s, p2);
  },
  easeInBack(t2) {
    const s = 1.70158;
    return t2 * t2 * ((s + 1) * t2 - s);
  },
  easeOutBack(t2) {
    const s = 1.70158;
    return (t2 -= 1) * t2 * ((s + 1) * t2 + s) + 1;
  },
  easeInOutBack(t2) {
    let s = 1.70158;
    if ((t2 /= 0.5) < 1) {
      return 0.5 * (t2 * t2 * (((s *= 1.525) + 1) * t2 - s));
    }
    return 0.5 * ((t2 -= 2) * t2 * (((s *= 1.525) + 1) * t2 + s) + 2);
  },
  easeInBounce: (t2) => 1 - effects.easeOutBounce(1 - t2),
  easeOutBounce(t2) {
    const m2 = 7.5625;
    const d2 = 2.75;
    if (t2 < 1 / d2) {
      return m2 * t2 * t2;
    }
    if (t2 < 2 / d2) {
      return m2 * (t2 -= 1.5 / d2) * t2 + 0.75;
    }
    if (t2 < 2.5 / d2) {
      return m2 * (t2 -= 2.25 / d2) * t2 + 0.9375;
    }
    return m2 * (t2 -= 2.625 / d2) * t2 + 0.984375;
  },
  easeInOutBounce: (t2) => t2 < 0.5 ? effects.easeInBounce(t2 * 2) * 0.5 : effects.easeOutBounce(t2 * 2 - 1) * 0.5 + 0.5
};
function isPatternOrGradient(value) {
  if (value && typeof value === "object") {
    const type = value.toString();
    return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
  }
  return false;
}
function color(value) {
  return isPatternOrGradient(value) ? value : new Color(value);
}
function getHoverColor(value) {
  return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();
}
const numbers = [
  "x",
  "y",
  "borderWidth",
  "radius",
  "tension"
];
const colors = [
  "color",
  "borderColor",
  "backgroundColor"
];
function applyAnimationsDefaults(defaults2) {
  defaults2.set("animation", {
    delay: void 0,
    duration: 1e3,
    easing: "easeOutQuart",
    fn: void 0,
    from: void 0,
    loop: void 0,
    to: void 0,
    type: void 0
  });
  defaults2.describe("animation", {
    _fallback: false,
    _indexable: false,
    _scriptable: (name) => name !== "onProgress" && name !== "onComplete" && name !== "fn"
  });
  defaults2.set("animations", {
    colors: {
      type: "color",
      properties: colors
    },
    numbers: {
      type: "number",
      properties: numbers
    }
  });
  defaults2.describe("animations", {
    _fallback: "animation"
  });
  defaults2.set("transitions", {
    active: {
      animation: {
        duration: 400
      }
    },
    resize: {
      animation: {
        duration: 0
      }
    },
    show: {
      animations: {
        colors: {
          from: "transparent"
        },
        visible: {
          type: "boolean",
          duration: 0
        }
      }
    },
    hide: {
      animations: {
        colors: {
          to: "transparent"
        },
        visible: {
          type: "boolean",
          easing: "linear",
          fn: (v2) => v2 | 0
        }
      }
    }
  });
}
function applyLayoutsDefaults(defaults2) {
  defaults2.set("layout", {
    autoPadding: true,
    padding: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  });
}
const intlCache = /* @__PURE__ */ new Map();
function getNumberFormat(locale, options) {
  options = options || {};
  const cacheKey = locale + JSON.stringify(options);
  let formatter = intlCache.get(cacheKey);
  if (!formatter) {
    formatter = new Intl.NumberFormat(locale, options);
    intlCache.set(cacheKey, formatter);
  }
  return formatter;
}
function formatNumber(num, locale, options) {
  return getNumberFormat(locale, options).format(num);
}
const formatters = {
  values(value) {
    return isArray(value) ? value : "" + value;
  },
  numeric(tickValue, index2, ticks) {
    if (tickValue === 0) {
      return "0";
    }
    const locale = this.chart.options.locale;
    let notation;
    let delta = tickValue;
    if (ticks.length > 1) {
      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
      if (maxTick < 1e-4 || maxTick > 1e15) {
        notation = "scientific";
      }
      delta = calculateDelta(tickValue, ticks);
    }
    const logDelta = log10(Math.abs(delta));
    const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
    const options = {
      notation,
      minimumFractionDigits: numDecimal,
      maximumFractionDigits: numDecimal
    };
    Object.assign(options, this.options.ticks.format);
    return formatNumber(tickValue, locale, options);
  }
};
function calculateDelta(tickValue, ticks) {
  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
    delta = tickValue - Math.floor(tickValue);
  }
  return delta;
}
var Ticks = {
  formatters
};
function applyScaleDefaults(defaults2) {
  defaults2.set("scale", {
    display: true,
    offset: false,
    reverse: false,
    beginAtZero: false,
    bounds: "ticks",
    clip: true,
    grace: 0,
    grid: {
      display: true,
      lineWidth: 1,
      drawOnChartArea: true,
      drawTicks: true,
      tickLength: 8,
      tickWidth: (_ctx, options) => options.lineWidth,
      tickColor: (_ctx, options) => options.color,
      offset: false
    },
    border: {
      display: true,
      dash: [],
      dashOffset: 0,
      width: 1
    },
    title: {
      display: false,
      text: "",
      padding: {
        top: 4,
        bottom: 4
      }
    },
    ticks: {
      minRotation: 0,
      maxRotation: 50,
      mirror: false,
      textStrokeWidth: 0,
      textStrokeColor: "",
      padding: 3,
      display: true,
      autoSkip: true,
      autoSkipPadding: 3,
      labelOffset: 0,
      callback: Ticks.formatters.values,
      minor: {},
      major: {},
      align: "center",
      crossAlign: "near",
      showLabelBackdrop: false,
      backdropColor: "rgba(255, 255, 255, 0.75)",
      backdropPadding: 2
    }
  });
  defaults2.route("scale.ticks", "color", "", "color");
  defaults2.route("scale.grid", "color", "", "borderColor");
  defaults2.route("scale.border", "color", "", "borderColor");
  defaults2.route("scale.title", "color", "", "color");
  defaults2.describe("scale", {
    _fallback: false,
    _scriptable: (name) => !name.startsWith("before") && !name.startsWith("after") && name !== "callback" && name !== "parser",
    _indexable: (name) => name !== "borderDash" && name !== "tickBorderDash" && name !== "dash"
  });
  defaults2.describe("scales", {
    _fallback: "scale"
  });
  defaults2.describe("scale.ticks", {
    _scriptable: (name) => name !== "backdropPadding" && name !== "callback",
    _indexable: (name) => name !== "backdropPadding"
  });
}
const overrides = /* @__PURE__ */ Object.create(null);
const descriptors = /* @__PURE__ */ Object.create(null);
function getScope$1(node, key) {
  if (!key) {
    return node;
  }
  const keys = key.split(".");
  for (let i = 0, n2 = keys.length; i < n2; ++i) {
    const k2 = keys[i];
    node = node[k2] || (node[k2] = /* @__PURE__ */ Object.create(null));
  }
  return node;
}
function set(root, scope, values) {
  if (typeof scope === "string") {
    return merge(getScope$1(root, scope), values);
  }
  return merge(getScope$1(root, ""), scope);
}
class Defaults {
  constructor(_descriptors2, _appliers) {
    this.animation = void 0;
    this.backgroundColor = "rgba(0,0,0,0.1)";
    this.borderColor = "rgba(0,0,0,0.1)";
    this.color = "#666";
    this.datasets = {};
    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();
    this.elements = {};
    this.events = [
      "mousemove",
      "mouseout",
      "click",
      "touchstart",
      "touchmove"
    ];
    this.font = {
      family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      size: 12,
      style: "normal",
      lineHeight: 1.2,
      weight: null
    };
    this.hover = {};
    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);
    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);
    this.hoverColor = (ctx, options) => getHoverColor(options.color);
    this.indexAxis = "x";
    this.interaction = {
      mode: "nearest",
      intersect: true,
      includeInvisible: false
    };
    this.maintainAspectRatio = true;
    this.onHover = null;
    this.onClick = null;
    this.parsing = true;
    this.plugins = {};
    this.responsive = true;
    this.scale = void 0;
    this.scales = {};
    this.showLine = true;
    this.drawActiveElementsOnTop = true;
    this.describe(_descriptors2);
    this.apply(_appliers);
  }
  set(scope, values) {
    return set(this, scope, values);
  }
  get(scope) {
    return getScope$1(this, scope);
  }
  describe(scope, values) {
    return set(descriptors, scope, values);
  }
  override(scope, values) {
    return set(overrides, scope, values);
  }
  route(scope, name, targetScope, targetName) {
    const scopeObject = getScope$1(this, scope);
    const targetScopeObject = getScope$1(this, targetScope);
    const privateName = "_" + name;
    Object.defineProperties(scopeObject, {
      [privateName]: {
        value: scopeObject[name],
        writable: true
      },
      [name]: {
        enumerable: true,
        get() {
          const local = this[privateName];
          const target = targetScopeObject[targetName];
          if (isObject(local)) {
            return Object.assign({}, target, local);
          }
          return valueOrDefault(local, target);
        },
        set(value) {
          this[privateName] = value;
        }
      }
    });
  }
  apply(appliers) {
    appliers.forEach((apply) => apply(this));
  }
}
var defaults = /* @__PURE__ */ new Defaults({
  _scriptable: (name) => !name.startsWith("on"),
  _indexable: (name) => name !== "events",
  hover: {
    _fallback: "interaction"
  },
  interaction: {
    _scriptable: false,
    _indexable: false
  }
}, [
  applyAnimationsDefaults,
  applyLayoutsDefaults,
  applyScaleDefaults
]);
function toFontString(font) {
  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
    return null;
  }
  return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
}
function _measureText(ctx, data, gc2, longest, string) {
  let textWidth = data[string];
  if (!textWidth) {
    textWidth = data[string] = ctx.measureText(string).width;
    gc2.push(string);
  }
  if (textWidth > longest) {
    longest = textWidth;
  }
  return longest;
}
function _alignPixel(chart, pixel, width) {
  const devicePixelRatio = chart.currentDevicePixelRatio;
  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
function clearCanvas(canvas, ctx) {
  if (!ctx && !canvas) {
    return;
  }
  ctx = ctx || canvas.getContext("2d");
  ctx.save();
  ctx.resetTransform();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.restore();
}
function drawPoint(ctx, options, x2, y2) {
  drawPointLegend(ctx, options, x2, y2, null);
}
function drawPointLegend(ctx, options, x2, y2, w2) {
  let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
  const style = options.pointStyle;
  const rotation = options.rotation;
  const radius = options.radius;
  let rad = (rotation || 0) * RAD_PER_DEG;
  if (style && typeof style === "object") {
    type = style.toString();
    if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
      ctx.save();
      ctx.translate(x2, y2);
      ctx.rotate(rad);
      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
      ctx.restore();
      return;
    }
  }
  if (isNaN(radius) || radius <= 0) {
    return;
  }
  ctx.beginPath();
  switch (style) {
    default:
      if (w2) {
        ctx.ellipse(x2, y2, w2 / 2, radius, 0, 0, TAU);
      } else {
        ctx.arc(x2, y2, radius, 0, TAU);
      }
      ctx.closePath();
      break;
    case "triangle":
      width = w2 ? w2 / 2 : radius;
      ctx.moveTo(x2 + Math.sin(rad) * width, y2 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x2 + Math.sin(rad) * width, y2 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x2 + Math.sin(rad) * width, y2 - Math.cos(rad) * radius);
      ctx.closePath();
      break;
    case "rectRounded":
      cornerRadius = radius * 0.516;
      size = radius - cornerRadius;
      xOffset = Math.cos(rad + QUARTER_PI) * size;
      xOffsetW = Math.cos(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size);
      yOffset = Math.sin(rad + QUARTER_PI) * size;
      yOffsetW = Math.sin(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size);
      ctx.arc(x2 - xOffsetW, y2 - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
      ctx.arc(x2 + yOffsetW, y2 - xOffset, cornerRadius, rad - HALF_PI, rad);
      ctx.arc(x2 + xOffsetW, y2 + yOffset, cornerRadius, rad, rad + HALF_PI);
      ctx.arc(x2 - yOffsetW, y2 + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
      ctx.closePath();
      break;
    case "rect":
      if (!rotation) {
        size = Math.SQRT1_2 * radius;
        width = w2 ? w2 / 2 : size;
        ctx.rect(x2 - width, y2 - size, 2 * width, 2 * size);
        break;
      }
      rad += QUARTER_PI;
    case "rectRot":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x2 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x2 + xOffsetW, y2 + yOffset);
      ctx.lineTo(x2 - yOffsetW, y2 + xOffset);
      ctx.closePath();
      break;
    case "crossRot":
      rad += QUARTER_PI;
    case "cross":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y2 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y2 + xOffset);
      break;
    case "star":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y2 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y2 + xOffset);
      rad += QUARTER_PI;
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y2 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y2 + xOffset);
      break;
    case "line":
      xOffset = w2 ? w2 / 2 : Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x2 - xOffset, y2 - yOffset);
      ctx.lineTo(x2 + xOffset, y2 + yOffset);
      break;
    case "dash":
      ctx.moveTo(x2, y2);
      ctx.lineTo(x2 + Math.cos(rad) * (w2 ? w2 / 2 : radius), y2 + Math.sin(rad) * radius);
      break;
    case false:
      ctx.closePath();
      break;
  }
  ctx.fill();
  if (options.borderWidth > 0) {
    ctx.stroke();
  }
}
function _isPointInArea(point, area, margin) {
  margin = margin || 0.5;
  return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function clipArea(ctx, area) {
  ctx.save();
  ctx.beginPath();
  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
  ctx.clip();
}
function unclipArea(ctx) {
  ctx.restore();
}
function _steppedLineTo(ctx, previous, target, flip, mode) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  if (mode === "middle") {
    const midpoint = (previous.x + target.x) / 2;
    ctx.lineTo(midpoint, previous.y);
    ctx.lineTo(midpoint, target.y);
  } else if (mode === "after" !== !!flip) {
    ctx.lineTo(previous.x, target.y);
  } else {
    ctx.lineTo(target.x, previous.y);
  }
  ctx.lineTo(target.x, target.y);
}
function _bezierCurveTo(ctx, previous, target, flip) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
}
function setRenderOpts(ctx, opts) {
  if (opts.translation) {
    ctx.translate(opts.translation[0], opts.translation[1]);
  }
  if (!isNullOrUndef(opts.rotation)) {
    ctx.rotate(opts.rotation);
  }
  if (opts.color) {
    ctx.fillStyle = opts.color;
  }
  if (opts.textAlign) {
    ctx.textAlign = opts.textAlign;
  }
  if (opts.textBaseline) {
    ctx.textBaseline = opts.textBaseline;
  }
}
function decorateText(ctx, x2, y2, line, opts) {
  if (opts.strikethrough || opts.underline) {
    const metrics2 = ctx.measureText(line);
    const left = x2 - metrics2.actualBoundingBoxLeft;
    const right = x2 + metrics2.actualBoundingBoxRight;
    const top = y2 - metrics2.actualBoundingBoxAscent;
    const bottom = y2 + metrics2.actualBoundingBoxDescent;
    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
    ctx.strokeStyle = ctx.fillStyle;
    ctx.beginPath();
    ctx.lineWidth = opts.decorationWidth || 2;
    ctx.moveTo(left, yDecoration);
    ctx.lineTo(right, yDecoration);
    ctx.stroke();
  }
}
function drawBackdrop(ctx, opts) {
  const oldColor = ctx.fillStyle;
  ctx.fillStyle = opts.color;
  ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
  ctx.fillStyle = oldColor;
}
function renderText(ctx, text, x2, y2, font, opts = {}) {
  const lines = isArray(text) ? text : [
    text
  ];
  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
  let i, line;
  ctx.save();
  ctx.font = font.string;
  setRenderOpts(ctx, opts);
  for (i = 0; i < lines.length; ++i) {
    line = lines[i];
    if (opts.backdrop) {
      drawBackdrop(ctx, opts.backdrop);
    }
    if (stroke) {
      if (opts.strokeColor) {
        ctx.strokeStyle = opts.strokeColor;
      }
      if (!isNullOrUndef(opts.strokeWidth)) {
        ctx.lineWidth = opts.strokeWidth;
      }
      ctx.strokeText(line, x2, y2, opts.maxWidth);
    }
    ctx.fillText(line, x2, y2, opts.maxWidth);
    decorateText(ctx, x2, y2, line, opts);
    y2 += Number(font.lineHeight);
  }
  ctx.restore();
}
function addRoundedRectPath(ctx, rect) {
  const { x: x2, y: y2, w: w2, h: h3, radius } = rect;
  ctx.arc(x2 + radius.topLeft, y2 + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
  ctx.lineTo(x2, y2 + h3 - radius.bottomLeft);
  ctx.arc(x2 + radius.bottomLeft, y2 + h3 - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
  ctx.lineTo(x2 + w2 - radius.bottomRight, y2 + h3);
  ctx.arc(x2 + w2 - radius.bottomRight, y2 + h3 - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
  ctx.lineTo(x2 + w2, y2 + radius.topRight);
  ctx.arc(x2 + w2 - radius.topRight, y2 + radius.topRight, radius.topRight, 0, -HALF_PI, true);
  ctx.lineTo(x2 + radius.topLeft, y2);
}
const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
function toLineHeight(value, size) {
  const matches = ("" + value).match(LINE_HEIGHT);
  if (!matches || matches[1] === "normal") {
    return size * 1.2;
  }
  value = +matches[2];
  switch (matches[3]) {
    case "px":
      return value;
    case "%":
      value /= 100;
      break;
  }
  return size * value;
}
const numberOrZero = (v2) => +v2 || 0;
function _readValueToProps(value, props) {
  const ret = {};
  const objProps = isObject(props);
  const keys = objProps ? Object.keys(props) : props;
  const read = isObject(value) ? objProps ? (prop) => valueOrDefault(value[prop], value[props[prop]]) : (prop) => value[prop] : () => value;
  for (const prop of keys) {
    ret[prop] = numberOrZero(read(prop));
  }
  return ret;
}
function toTRBL(value) {
  return _readValueToProps(value, {
    top: "y",
    right: "x",
    bottom: "y",
    left: "x"
  });
}
function toTRBLCorners(value) {
  return _readValueToProps(value, [
    "topLeft",
    "topRight",
    "bottomLeft",
    "bottomRight"
  ]);
}
function toPadding(value) {
  const obj = toTRBL(value);
  obj.width = obj.left + obj.right;
  obj.height = obj.top + obj.bottom;
  return obj;
}
function toFont(options, fallback) {
  options = options || {};
  fallback = fallback || defaults.font;
  let size = valueOrDefault(options.size, fallback.size);
  if (typeof size === "string") {
    size = parseInt(size, 10);
  }
  let style = valueOrDefault(options.style, fallback.style);
  if (style && !("" + style).match(FONT_STYLE)) {
    console.warn('Invalid font style specified: "' + style + '"');
    style = void 0;
  }
  const font = {
    family: valueOrDefault(options.family, fallback.family),
    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
    size,
    style,
    weight: valueOrDefault(options.weight, fallback.weight),
    string: ""
  };
  font.string = toFontString(font);
  return font;
}
function resolve(inputs, context, index2, info) {
  let i, ilen, value;
  for (i = 0, ilen = inputs.length; i < ilen; ++i) {
    value = inputs[i];
    if (value === void 0) {
      continue;
    }
    if (value !== void 0) {
      return value;
    }
  }
}
function _addGrace(minmax, grace, beginAtZero) {
  const { min, max } = minmax;
  const change = toDimension(grace, (max - min) / 2);
  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;
  return {
    min: keepZero(min, -Math.abs(change)),
    max: keepZero(max, change)
  };
}
function createContext(parentContext, context) {
  return Object.assign(Object.create(parentContext), context);
}
function _createResolver(scopes, prefixes = [
  ""
], rootScopes, fallback, getTarget = () => scopes[0]) {
  const finalRootScopes = rootScopes || scopes;
  if (typeof fallback === "undefined") {
    fallback = _resolve("_fallback", scopes);
  }
  const cache = {
    [Symbol.toStringTag]: "Object",
    _cacheable: true,
    _scopes: scopes,
    _rootScopes: finalRootScopes,
    _fallback: fallback,
    _getTarget: getTarget,
    override: (scope) => _createResolver([
      scope,
      ...scopes
    ], prefixes, finalRootScopes, fallback)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete target._keys;
      delete scopes[0][prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop) {
      return _cached(target, prop, () => _resolveWithPrefixes(prop, prefixes, scopes, target));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(scopes[0]);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return getKeysFromAllScopes(target).includes(prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys(target) {
      return getKeysFromAllScopes(target);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      const storage = target._storage || (target._storage = getTarget());
      target[prop] = storage[prop] = value;
      delete target._keys;
      return true;
    }
  });
}
function _attachContext(proxy, context, subProxy, descriptorDefaults) {
  const cache = {
    _cacheable: false,
    _proxy: proxy,
    _context: context,
    _subProxy: subProxy,
    _stack: /* @__PURE__ */ new Set(),
    _descriptors: _descriptors(proxy, descriptorDefaults),
    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),
    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete proxy[prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop, receiver) {
      return _cached(target, prop, () => _resolveWithContext(target, prop, receiver));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
        enumerable: true,
        configurable: true
      } : void 0 : Reflect.getOwnPropertyDescriptor(proxy, prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(proxy);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return Reflect.has(proxy, prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys() {
      return Reflect.ownKeys(proxy);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      proxy[prop] = value;
      delete target[prop];
      return true;
    }
  });
}
function _descriptors(proxy, defaults2 = {
  scriptable: true,
  indexable: true
}) {
  const { _scriptable = defaults2.scriptable, _indexable = defaults2.indexable, _allKeys = defaults2.allKeys } = proxy;
  return {
    allKeys: _allKeys,
    scriptable: _scriptable,
    indexable: _indexable,
    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,
    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable
  };
}
const readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;
const needsSubResolver = (prop, value) => isObject(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object);
function _cached(target, prop, resolve2) {
  if (Object.prototype.hasOwnProperty.call(target, prop) || prop === "constructor") {
    return target[prop];
  }
  const value = resolve2();
  target[prop] = value;
  return value;
}
function _resolveWithContext(target, prop, receiver) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  let value = _proxy[prop];
  if (isFunction(value) && descriptors2.isScriptable(prop)) {
    value = _resolveScriptable(prop, value, target, receiver);
  }
  if (isArray(value) && value.length) {
    value = _resolveArray(prop, value, target, descriptors2.isIndexable);
  }
  if (needsSubResolver(prop, value)) {
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors2);
  }
  return value;
}
function _resolveScriptable(prop, getValue, target, receiver) {
  const { _proxy, _context, _subProxy, _stack } = target;
  if (_stack.has(prop)) {
    throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
  }
  _stack.add(prop);
  let value = getValue(_context, _subProxy || receiver);
  _stack.delete(prop);
  if (needsSubResolver(prop, value)) {
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
  }
  return value;
}
function _resolveArray(prop, value, target, isIndexable) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  if (typeof _context.index !== "undefined" && isIndexable(prop)) {
    return value[_context.index % value.length];
  } else if (isObject(value[0])) {
    const arr = value;
    const scopes = _proxy._scopes.filter((s) => s !== arr);
    value = [];
    for (const item of arr) {
      const resolver = createSubResolver(scopes, _proxy, prop, item);
      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors2));
    }
  }
  return value;
}
function resolveFallback(fallback, prop, value) {
  return isFunction(fallback) ? fallback(prop, value) : fallback;
}
const getScope = (key, parent) => key === true ? parent : typeof key === "string" ? resolveObjectKey(parent, key) : void 0;
function addScopes(set2, parentScopes, key, parentFallback, value) {
  for (const parent of parentScopes) {
    const scope = getScope(key, parent);
    if (scope) {
      set2.add(scope);
      const fallback = resolveFallback(scope._fallback, key, value);
      if (typeof fallback !== "undefined" && fallback !== key && fallback !== parentFallback) {
        return fallback;
      }
    } else if (scope === false && typeof parentFallback !== "undefined" && key !== parentFallback) {
      return null;
    }
  }
  return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
  const rootScopes = resolver._rootScopes;
  const fallback = resolveFallback(resolver._fallback, prop, value);
  const allScopes = [
    ...parentScopes,
    ...rootScopes
  ];
  const set2 = /* @__PURE__ */ new Set();
  set2.add(value);
  let key = addScopesFromKey(set2, allScopes, prop, fallback || prop, value);
  if (key === null) {
    return false;
  }
  if (typeof fallback !== "undefined" && fallback !== prop) {
    key = addScopesFromKey(set2, allScopes, fallback, key, value);
    if (key === null) {
      return false;
    }
  }
  return _createResolver(Array.from(set2), [
    ""
  ], rootScopes, fallback, () => subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set2, allScopes, key, fallback, item) {
  while (key) {
    key = addScopes(set2, allScopes, key, fallback, item);
  }
  return key;
}
function subGetTarget(resolver, prop, value) {
  const parent = resolver._getTarget();
  if (!(prop in parent)) {
    parent[prop] = {};
  }
  const target = parent[prop];
  if (isArray(target) && isObject(value)) {
    return value;
  }
  return target || {};
}
function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
  let value;
  for (const prefix of prefixes) {
    value = _resolve(readKey(prefix, prop), scopes);
    if (typeof value !== "undefined") {
      return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
    }
  }
}
function _resolve(key, scopes) {
  for (const scope of scopes) {
    if (!scope) {
      continue;
    }
    const value = scope[key];
    if (typeof value !== "undefined") {
      return value;
    }
  }
}
function getKeysFromAllScopes(target) {
  let keys = target._keys;
  if (!keys) {
    keys = target._keys = resolveKeysFromAllScopes(target._scopes);
  }
  return keys;
}
function resolveKeysFromAllScopes(scopes) {
  const set2 = /* @__PURE__ */ new Set();
  for (const scope of scopes) {
    for (const key of Object.keys(scope).filter((k2) => !k2.startsWith("_"))) {
      set2.add(key);
    }
  }
  return Array.from(set2);
}
const EPSILON = Number.EPSILON || 1e-14;
const getPoint = (points, i) => i < points.length && !points[i].skip && points[i];
const getValueAxis = (indexAxis) => indexAxis === "x" ? "y" : "x";
function splineCurve(firstPoint, middlePoint, afterPoint, t2) {
  const previous = firstPoint.skip ? middlePoint : firstPoint;
  const current = middlePoint;
  const next = afterPoint.skip ? middlePoint : afterPoint;
  const d01 = distanceBetweenPoints(current, previous);
  const d12 = distanceBetweenPoints(next, current);
  let s01 = d01 / (d01 + d12);
  let s12 = d12 / (d01 + d12);
  s01 = isNaN(s01) ? 0 : s01;
  s12 = isNaN(s12) ? 0 : s12;
  const fa2 = t2 * s01;
  const fb2 = t2 * s12;
  return {
    previous: {
      x: current.x - fa2 * (next.x - previous.x),
      y: current.y - fa2 * (next.y - previous.y)
    },
    next: {
      x: current.x + fb2 * (next.x - previous.x),
      y: current.y + fb2 * (next.y - previous.y)
    }
  };
}
function monotoneAdjust(points, deltaK, mK) {
  const pointsLen = points.length;
  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i = 0; i < pointsLen - 1; ++i) {
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent || !pointAfter) {
      continue;
    }
    if (almostEquals(deltaK[i], 0, EPSILON)) {
      mK[i] = mK[i + 1] = 0;
      continue;
    }
    alphaK = mK[i] / deltaK[i];
    betaK = mK[i + 1] / deltaK[i];
    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    if (squaredMagnitude <= 9) {
      continue;
    }
    tauK = 3 / Math.sqrt(squaredMagnitude);
    mK[i] = alphaK * tauK * deltaK[i];
    mK[i + 1] = betaK * tauK * deltaK[i];
  }
}
function monotoneCompute(points, mK, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  let delta, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i = 0; i < pointsLen; ++i) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent) {
      continue;
    }
    const iPixel = pointCurrent[indexAxis];
    const vPixel = pointCurrent[valueAxis];
    if (pointBefore) {
      delta = (iPixel - pointBefore[indexAxis]) / 3;
      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
    }
    if (pointAfter) {
      delta = (pointAfter[indexAxis] - iPixel) / 3;
      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
    }
  }
}
function splineCurveMonotone(points, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  const deltaK = Array(pointsLen).fill(0);
  const mK = Array(pointsLen);
  let i, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (i = 0; i < pointsLen; ++i) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent) {
      continue;
    }
    if (pointAfter) {
      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
    }
    mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
  }
  monotoneAdjust(points, deltaK, mK);
  monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt, min, max) {
  return Math.max(Math.min(pt, max), min);
}
function capBezierPoints(points, area) {
  let i, ilen, point, inArea, inAreaPrev;
  let inAreaNext = _isPointInArea(points[0], area);
  for (i = 0, ilen = points.length; i < ilen; ++i) {
    inAreaPrev = inArea;
    inArea = inAreaNext;
    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
    if (!inArea) {
      continue;
    }
    point = points[i];
    if (inAreaPrev) {
      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
    }
    if (inAreaNext) {
      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
    }
  }
}
function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
  let i, ilen, point, controlPoints;
  if (options.spanGaps) {
    points = points.filter((pt) => !pt.skip);
  }
  if (options.cubicInterpolationMode === "monotone") {
    splineCurveMonotone(points, indexAxis);
  } else {
    let prev = loop ? points[points.length - 1] : points[0];
    for (i = 0, ilen = points.length; i < ilen; ++i) {
      point = points[i];
      controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
      point.cp1x = controlPoints.previous.x;
      point.cp1y = controlPoints.previous.y;
      point.cp2x = controlPoints.next.x;
      point.cp2y = controlPoints.next.y;
      prev = point;
    }
  }
  if (options.capBezierPoints) {
    capBezierPoints(points, area);
  }
}
function _isDomSupported() {
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function _getParentNode(domNode) {
  let parent = domNode.parentNode;
  if (parent && parent.toString() === "[object ShadowRoot]") {
    parent = parent.host;
  }
  return parent;
}
function parseMaxStyle(styleValue, node, parentProperty) {
  let valueInPixels;
  if (typeof styleValue === "string") {
    valueInPixels = parseInt(styleValue, 10);
    if (styleValue.indexOf("%") !== -1) {
      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    }
  } else {
    valueInPixels = styleValue;
  }
  return valueInPixels;
}
const getComputedStyle = (element) => element.ownerDocument.defaultView.getComputedStyle(element, null);
function getStyle(el2, property) {
  return getComputedStyle(el2).getPropertyValue(property);
}
const positions = [
  "top",
  "right",
  "bottom",
  "left"
];
function getPositionedStyle(styles, style, suffix) {
  const result = {};
  suffix = suffix ? "-" + suffix : "";
  for (let i = 0; i < 4; i++) {
    const pos = positions[i];
    result[pos] = parseFloat(styles[style + "-" + pos + suffix]) || 0;
  }
  result.width = result.left + result.right;
  result.height = result.top + result.bottom;
  return result;
}
const useOffsetPos = (x2, y2, target) => (x2 > 0 || y2 > 0) && (!target || !target.shadowRoot);
function getCanvasPosition(e, canvas) {
  const touches = e.touches;
  const source = touches && touches.length ? touches[0] : e;
  const { offsetX, offsetY } = source;
  let box = false;
  let x2, y2;
  if (useOffsetPos(offsetX, offsetY, e.target)) {
    x2 = offsetX;
    y2 = offsetY;
  } else {
    const rect = canvas.getBoundingClientRect();
    x2 = source.clientX - rect.left;
    y2 = source.clientY - rect.top;
    box = true;
  }
  return {
    x: x2,
    y: y2,
    box
  };
}
function getRelativePosition(event, chart) {
  if ("native" in event) {
    return event;
  }
  const { canvas, currentDevicePixelRatio } = chart;
  const style = getComputedStyle(canvas);
  const borderBox = style.boxSizing === "border-box";
  const paddings = getPositionedStyle(style, "padding");
  const borders2 = getPositionedStyle(style, "border", "width");
  const { x: x2, y: y2, box } = getCanvasPosition(event, canvas);
  const xOffset = paddings.left + (box && borders2.left);
  const yOffset = paddings.top + (box && borders2.top);
  let { width, height } = chart;
  if (borderBox) {
    width -= paddings.width + borders2.width;
    height -= paddings.height + borders2.height;
  }
  return {
    x: Math.round((x2 - xOffset) / width * canvas.width / currentDevicePixelRatio),
    y: Math.round((y2 - yOffset) / height * canvas.height / currentDevicePixelRatio)
  };
}
function getContainerSize(canvas, width, height) {
  let maxWidth, maxHeight;
  if (width === void 0 || height === void 0) {
    const container = canvas && _getParentNode(canvas);
    if (!container) {
      width = canvas.clientWidth;
      height = canvas.clientHeight;
    } else {
      const rect = container.getBoundingClientRect();
      const containerStyle = getComputedStyle(container);
      const containerBorder = getPositionedStyle(containerStyle, "border", "width");
      const containerPadding = getPositionedStyle(containerStyle, "padding");
      width = rect.width - containerPadding.width - containerBorder.width;
      height = rect.height - containerPadding.height - containerBorder.height;
      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, "clientWidth");
      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, "clientHeight");
    }
  }
  return {
    width,
    height,
    maxWidth: maxWidth || INFINITY,
    maxHeight: maxHeight || INFINITY
  };
}
const round1 = (v2) => Math.round(v2 * 10) / 10;
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio2) {
  const style = getComputedStyle(canvas);
  const margins = getPositionedStyle(style, "margin");
  const maxWidth = parseMaxStyle(style.maxWidth, canvas, "clientWidth") || INFINITY;
  const maxHeight = parseMaxStyle(style.maxHeight, canvas, "clientHeight") || INFINITY;
  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
  let { width, height } = containerSize;
  if (style.boxSizing === "content-box") {
    const borders2 = getPositionedStyle(style, "border", "width");
    const paddings = getPositionedStyle(style, "padding");
    width -= paddings.width + borders2.width;
    height -= paddings.height + borders2.height;
  }
  width = Math.max(0, width - margins.width);
  height = Math.max(0, aspectRatio2 ? width / aspectRatio2 : height - margins.height);
  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
  if (width && !height) {
    height = round1(width / 2);
  }
  const maintainHeight = bbWidth !== void 0 || bbHeight !== void 0;
  if (maintainHeight && aspectRatio2 && containerSize.height && height > containerSize.height) {
    height = containerSize.height;
    width = round1(Math.floor(height * aspectRatio2));
  }
  return {
    width,
    height
  };
}
function retinaScale(chart, forceRatio, forceStyle) {
  const pixelRatio = forceRatio || 1;
  const deviceHeight = Math.floor(chart.height * pixelRatio);
  const deviceWidth = Math.floor(chart.width * pixelRatio);
  chart.height = Math.floor(chart.height);
  chart.width = Math.floor(chart.width);
  const canvas = chart.canvas;
  if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
    canvas.style.height = `${chart.height}px`;
    canvas.style.width = `${chart.width}px`;
  }
  if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
    chart.currentDevicePixelRatio = pixelRatio;
    canvas.height = deviceHeight;
    canvas.width = deviceWidth;
    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
    return true;
  }
  return false;
}
const supportsEventListenerOptions = function() {
  let passiveSupported = false;
  try {
    const options = {
      get passive() {
        passiveSupported = true;
        return false;
      }
    };
    if (_isDomSupported()) {
      window.addEventListener("test", null, options);
      window.removeEventListener("test", null, options);
    }
  } catch (e) {
  }
  return passiveSupported;
}();
function readUsedSize(element, property) {
  const value = getStyle(element, property);
  const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
  return matches ? +matches[1] : void 0;
}
function _pointInLine(p1, p2, t2, mode) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: p1.y + t2 * (p2.y - p1.y)
  };
}
function _steppedInterpolation(p1, p2, t2, mode) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: mode === "middle" ? t2 < 0.5 ? p1.y : p2.y : mode === "after" ? t2 < 1 ? p1.y : p2.y : t2 > 0 ? p2.y : p1.y
  };
}
function _bezierInterpolation(p1, p2, t2, mode) {
  const cp1 = {
    x: p1.cp2x,
    y: p1.cp2y
  };
  const cp2 = {
    x: p2.cp1x,
    y: p2.cp1y
  };
  const a = _pointInLine(p1, cp1, t2);
  const b2 = _pointInLine(cp1, cp2, t2);
  const c2 = _pointInLine(cp2, p2, t2);
  const d2 = _pointInLine(a, b2, t2);
  const e = _pointInLine(b2, c2, t2);
  return _pointInLine(d2, e, t2);
}
const getRightToLeftAdapter = function(rectX, width) {
  return {
    x(x2) {
      return rectX + rectX + width - x2;
    },
    setWidth(w2) {
      width = w2;
    },
    textAlign(align) {
      if (align === "center") {
        return align;
      }
      return align === "right" ? "left" : "right";
    },
    xPlus(x2, value) {
      return x2 - value;
    },
    leftForLtr(x2, itemWidth) {
      return x2 - itemWidth;
    }
  };
};
const getLeftToRightAdapter = function() {
  return {
    x(x2) {
      return x2;
    },
    setWidth(w2) {
    },
    textAlign(align) {
      return align;
    },
    xPlus(x2, value) {
      return x2 + value;
    },
    leftForLtr(x2, _itemWidth) {
      return x2;
    }
  };
};
function getRtlAdapter(rtl, rectX, width) {
  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
  let style, original;
  if (direction === "ltr" || direction === "rtl") {
    style = ctx.canvas.style;
    original = [
      style.getPropertyValue("direction"),
      style.getPropertyPriority("direction")
    ];
    style.setProperty("direction", direction, "important");
    ctx.prevTextDirection = original;
  }
}
function restoreTextDirection(ctx, original) {
  if (original !== void 0) {
    delete ctx.prevTextDirection;
    ctx.canvas.style.setProperty("direction", original[0], original[1]);
  }
}
function propertyFn(property) {
  if (property === "angle") {
    return {
      between: _angleBetween,
      compare: _angleDiff,
      normalize: _normalizeAngle
    };
  }
  return {
    between: _isBetween,
    compare: (a, b2) => a - b2,
    normalize: (x2) => x2
  };
}
function normalizeSegment({ start, end, count, loop, style }) {
  return {
    start: start % count,
    end: end % count,
    loop: loop && (end - start + 1) % count === 0,
    style
  };
}
function getSegment(segment, points, bounds) {
  const { property, start: startBound, end: endBound } = bounds;
  const { between, normalize } = propertyFn(property);
  const count = points.length;
  let { start, end, loop } = segment;
  let i, ilen;
  if (loop) {
    start += count;
    end += count;
    for (i = 0, ilen = count; i < ilen; ++i) {
      if (!between(normalize(points[start % count][property]), startBound, endBound)) {
        break;
      }
      start--;
      end--;
    }
    start %= count;
    end %= count;
  }
  if (end < start) {
    end += count;
  }
  return {
    start,
    end,
    loop,
    style: segment.style
  };
}
function _boundSegment(segment, points, bounds) {
  if (!bounds) {
    return [
      segment
    ];
  }
  const { property, start: startBound, end: endBound } = bounds;
  const count = points.length;
  const { compare, between, normalize } = propertyFn(property);
  const { start, end, loop, style } = getSegment(segment, points, bounds);
  const result = [];
  let inside = false;
  let subStart = null;
  let value, point, prevValue;
  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);
  const shouldStart = () => inside || startIsBefore();
  const shouldStop = () => !inside || endIsBefore();
  for (let i = start, prev = start; i <= end; ++i) {
    point = points[i % count];
    if (point.skip) {
      continue;
    }
    value = normalize(point[property]);
    if (value === prevValue) {
      continue;
    }
    inside = between(value, startBound, endBound);
    if (subStart === null && shouldStart()) {
      subStart = compare(value, startBound) === 0 ? i : prev;
    }
    if (subStart !== null && shouldStop()) {
      result.push(normalizeSegment({
        start: subStart,
        end: i,
        loop,
        count,
        style
      }));
      subStart = null;
    }
    prev = i;
    prevValue = value;
  }
  if (subStart !== null) {
    result.push(normalizeSegment({
      start: subStart,
      end,
      loop,
      count,
      style
    }));
  }
  return result;
}
function _boundSegments(line, bounds) {
  const result = [];
  const segments = line.segments;
  for (let i = 0; i < segments.length; i++) {
    const sub = _boundSegment(segments[i], line.points, bounds);
    if (sub.length) {
      result.push(...sub);
    }
  }
  return result;
}
function findStartAndEnd(points, count, loop, spanGaps) {
  let start = 0;
  let end = count - 1;
  if (loop && !spanGaps) {
    while (start < count && !points[start].skip) {
      start++;
    }
  }
  while (start < count && points[start].skip) {
    start++;
  }
  start %= count;
  if (loop) {
    end += start;
  }
  while (end > start && points[end % count].skip) {
    end--;
  }
  end %= count;
  return {
    start,
    end
  };
}
function solidSegments(points, start, max, loop) {
  const count = points.length;
  const result = [];
  let last = start;
  let prev = points[start];
  let end;
  for (end = start + 1; end <= max; ++end) {
    const cur = points[end % count];
    if (cur.skip || cur.stop) {
      if (!prev.skip) {
        loop = false;
        result.push({
          start: start % count,
          end: (end - 1) % count,
          loop
        });
        start = last = cur.stop ? end : null;
      }
    } else {
      last = end;
      if (prev.skip) {
        start = end;
      }
    }
    prev = cur;
  }
  if (last !== null) {
    result.push({
      start: start % count,
      end: last % count,
      loop
    });
  }
  return result;
}
function _computeSegments(line, segmentOptions) {
  const points = line.points;
  const spanGaps = line.options.spanGaps;
  const count = points.length;
  if (!count) {
    return [];
  }
  const loop = !!line._loop;
  const { start, end } = findStartAndEnd(points, count, loop, spanGaps);
  if (spanGaps === true) {
    return splitByStyles(line, [
      {
        start,
        end,
        loop
      }
    ], points, segmentOptions);
  }
  const max = end < start ? end + count : end;
  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
}
function splitByStyles(line, segments, points, segmentOptions) {
  if (!segmentOptions || !segmentOptions.setContext || !points) {
    return segments;
  }
  return doSplitByStyles(line, segments, points, segmentOptions);
}
function doSplitByStyles(line, segments, points, segmentOptions) {
  const chartContext = line._chart.getContext();
  const baseStyle = readStyle(line.options);
  const { _datasetIndex: datasetIndex, options: { spanGaps } } = line;
  const count = points.length;
  const result = [];
  let prevStyle = baseStyle;
  let start = segments[0].start;
  let i = start;
  function addStyle(s, e, l2, st) {
    const dir = spanGaps ? -1 : 1;
    if (s === e) {
      return;
    }
    s += count;
    while (points[s % count].skip) {
      s -= dir;
    }
    while (points[e % count].skip) {
      e += dir;
    }
    if (s % count !== e % count) {
      result.push({
        start: s % count,
        end: e % count,
        loop: l2,
        style: st
      });
      prevStyle = st;
      start = e % count;
    }
  }
  for (const segment of segments) {
    start = spanGaps ? start : segment.start;
    let prev = points[start % count];
    let style;
    for (i = start + 1; i <= segment.end; i++) {
      const pt = points[i % count];
      style = readStyle(segmentOptions.setContext(createContext(chartContext, {
        type: "segment",
        p0: prev,
        p1: pt,
        p0DataIndex: (i - 1) % count,
        p1DataIndex: i % count,
        datasetIndex
      })));
      if (styleChanged(style, prevStyle)) {
        addStyle(start, i - 1, segment.loop, prevStyle);
      }
      prev = pt;
      prevStyle = style;
    }
    if (start < i - 1) {
      addStyle(start, i - 1, segment.loop, prevStyle);
    }
  }
  return result;
}
function readStyle(options) {
  return {
    backgroundColor: options.backgroundColor,
    borderCapStyle: options.borderCapStyle,
    borderDash: options.borderDash,
    borderDashOffset: options.borderDashOffset,
    borderJoinStyle: options.borderJoinStyle,
    borderWidth: options.borderWidth,
    borderColor: options.borderColor
  };
}
function styleChanged(style, prevStyle) {
  if (!prevStyle) {
    return false;
  }
  const cache = [];
  const replacer = function(key, value) {
    if (!isPatternOrGradient(value)) {
      return value;
    }
    if (!cache.includes(value)) {
      cache.push(value);
    }
    return cache.indexOf(value);
  };
  return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);
}
function getSizeForArea(scale2, chartArea, field) {
  return scale2.options.clip ? scale2[field] : chartArea[field];
}
function getDatasetArea(meta, chartArea) {
  const { xScale, yScale } = meta;
  if (xScale && yScale) {
    return {
      left: getSizeForArea(xScale, chartArea, "left"),
      right: getSizeForArea(xScale, chartArea, "right"),
      top: getSizeForArea(yScale, chartArea, "top"),
      bottom: getSizeForArea(yScale, chartArea, "bottom")
    };
  }
  return chartArea;
}
function getDatasetClipArea(chart, meta) {
  const clip = meta._clip;
  if (clip.disabled) {
    return false;
  }
  const area = getDatasetArea(meta, chart.chartArea);
  return {
    left: clip.left === false ? 0 : area.left - (clip.left === true ? 0 : clip.left),
    right: clip.right === false ? chart.width : area.right + (clip.right === true ? 0 : clip.right),
    top: clip.top === false ? 0 : area.top - (clip.top === true ? 0 : clip.top),
    bottom: clip.bottom === false ? chart.height : area.bottom + (clip.bottom === true ? 0 : clip.bottom)
  };
}
/*!
 * Chart.js v4.4.9
 * https://www.chartjs.org
 * (c) 2025 Chart.js Contributors
 * Released under the MIT License
 */
class Animator {
  constructor() {
    this._request = null;
    this._charts = /* @__PURE__ */ new Map();
    this._running = false;
    this._lastDate = void 0;
  }
  _notify(chart, anims, date, type) {
    const callbacks = anims.listeners[type];
    const numSteps = anims.duration;
    callbacks.forEach((fn) => fn({
      chart,
      initial: anims.initial,
      numSteps,
      currentStep: Math.min(date - anims.start, numSteps)
    }));
  }
  _refresh() {
    if (this._request) {
      return;
    }
    this._running = true;
    this._request = requestAnimFrame.call(window, () => {
      this._update();
      this._request = null;
      if (this._running) {
        this._refresh();
      }
    });
  }
  _update(date = Date.now()) {
    let remaining = 0;
    this._charts.forEach((anims, chart) => {
      if (!anims.running || !anims.items.length) {
        return;
      }
      const items = anims.items;
      let i = items.length - 1;
      let draw2 = false;
      let item;
      for (; i >= 0; --i) {
        item = items[i];
        if (item._active) {
          if (item._total > anims.duration) {
            anims.duration = item._total;
          }
          item.tick(date);
          draw2 = true;
        } else {
          items[i] = items[items.length - 1];
          items.pop();
        }
      }
      if (draw2) {
        chart.draw();
        this._notify(chart, anims, date, "progress");
      }
      if (!items.length) {
        anims.running = false;
        this._notify(chart, anims, date, "complete");
        anims.initial = false;
      }
      remaining += items.length;
    });
    this._lastDate = date;
    if (remaining === 0) {
      this._running = false;
    }
  }
  _getAnims(chart) {
    const charts = this._charts;
    let anims = charts.get(chart);
    if (!anims) {
      anims = {
        running: false,
        initial: true,
        items: [],
        listeners: {
          complete: [],
          progress: []
        }
      };
      charts.set(chart, anims);
    }
    return anims;
  }
  listen(chart, event, cb2) {
    this._getAnims(chart).listeners[event].push(cb2);
  }
  add(chart, items) {
    if (!items || !items.length) {
      return;
    }
    this._getAnims(chart).items.push(...items);
  }
  has(chart) {
    return this._getAnims(chart).items.length > 0;
  }
  start(chart) {
    const anims = this._charts.get(chart);
    if (!anims) {
      return;
    }
    anims.running = true;
    anims.start = Date.now();
    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);
    this._refresh();
  }
  running(chart) {
    if (!this._running) {
      return false;
    }
    const anims = this._charts.get(chart);
    if (!anims || !anims.running || !anims.items.length) {
      return false;
    }
    return true;
  }
  stop(chart) {
    const anims = this._charts.get(chart);
    if (!anims || !anims.items.length) {
      return;
    }
    const items = anims.items;
    let i = items.length - 1;
    for (; i >= 0; --i) {
      items[i].cancel();
    }
    anims.items = [];
    this._notify(chart, anims, Date.now(), "complete");
  }
  remove(chart) {
    return this._charts.delete(chart);
  }
}
var animator = /* @__PURE__ */ new Animator();
const transparent = "transparent";
const interpolators = {
  boolean(from2, to2, factor) {
    return factor > 0.5 ? to2 : from2;
  },
  color(from2, to2, factor) {
    const c0 = color(from2 || transparent);
    const c1 = c0.valid && color(to2 || transparent);
    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to2;
  },
  number(from2, to2, factor) {
    return from2 + (to2 - from2) * factor;
  }
};
class Animation {
  constructor(cfg, target, prop, to2) {
    const currentValue = target[prop];
    to2 = resolve([
      cfg.to,
      to2,
      currentValue,
      cfg.from
    ]);
    const from2 = resolve([
      cfg.from,
      currentValue,
      to2
    ]);
    this._active = true;
    this._fn = cfg.fn || interpolators[cfg.type || typeof from2];
    this._easing = effects[cfg.easing] || effects.linear;
    this._start = Math.floor(Date.now() + (cfg.delay || 0));
    this._duration = this._total = Math.floor(cfg.duration);
    this._loop = !!cfg.loop;
    this._target = target;
    this._prop = prop;
    this._from = from2;
    this._to = to2;
    this._promises = void 0;
  }
  active() {
    return this._active;
  }
  update(cfg, to2, date) {
    if (this._active) {
      this._notify(false);
      const currentValue = this._target[this._prop];
      const elapsed = date - this._start;
      const remain = this._duration - elapsed;
      this._start = date;
      this._duration = Math.floor(Math.max(remain, cfg.duration));
      this._total += elapsed;
      this._loop = !!cfg.loop;
      this._to = resolve([
        cfg.to,
        to2,
        currentValue,
        cfg.from
      ]);
      this._from = resolve([
        cfg.from,
        currentValue,
        to2
      ]);
    }
  }
  cancel() {
    if (this._active) {
      this.tick(Date.now());
      this._active = false;
      this._notify(false);
    }
  }
  tick(date) {
    const elapsed = date - this._start;
    const duration = this._duration;
    const prop = this._prop;
    const from2 = this._from;
    const loop = this._loop;
    const to2 = this._to;
    let factor;
    this._active = from2 !== to2 && (loop || elapsed < duration);
    if (!this._active) {
      this._target[prop] = to2;
      this._notify(true);
      return;
    }
    if (elapsed < 0) {
      this._target[prop] = from2;
      return;
    }
    factor = elapsed / duration % 2;
    factor = loop && factor > 1 ? 2 - factor : factor;
    factor = this._easing(Math.min(1, Math.max(0, factor)));
    this._target[prop] = this._fn(from2, to2, factor);
  }
  wait() {
    const promises = this._promises || (this._promises = []);
    return new Promise((res, rej) => {
      promises.push({
        res,
        rej
      });
    });
  }
  _notify(resolved) {
    const method = resolved ? "res" : "rej";
    const promises = this._promises || [];
    for (let i = 0; i < promises.length; i++) {
      promises[i][method]();
    }
  }
}
class Animations {
  constructor(chart, config) {
    this._chart = chart;
    this._properties = /* @__PURE__ */ new Map();
    this.configure(config);
  }
  configure(config) {
    if (!isObject(config)) {
      return;
    }
    const animationOptions = Object.keys(defaults.animation);
    const animatedProps = this._properties;
    Object.getOwnPropertyNames(config).forEach((key) => {
      const cfg = config[key];
      if (!isObject(cfg)) {
        return;
      }
      const resolved = {};
      for (const option of animationOptions) {
        resolved[option] = cfg[option];
      }
      (isArray(cfg.properties) && cfg.properties || [
        key
      ]).forEach((prop) => {
        if (prop === key || !animatedProps.has(prop)) {
          animatedProps.set(prop, resolved);
        }
      });
    });
  }
  _animateOptions(target, values) {
    const newOptions = values.options;
    const options = resolveTargetOptions(target, newOptions);
    if (!options) {
      return [];
    }
    const animations2 = this._createAnimations(options, newOptions);
    if (newOptions.$shared) {
      awaitAll(target.options.$animations, newOptions).then(() => {
        target.options = newOptions;
      }, () => {
      });
    }
    return animations2;
  }
  _createAnimations(target, values) {
    const animatedProps = this._properties;
    const animations2 = [];
    const running = target.$animations || (target.$animations = {});
    const props = Object.keys(values);
    const date = Date.now();
    let i;
    for (i = props.length - 1; i >= 0; --i) {
      const prop = props[i];
      if (prop.charAt(0) === "$") {
        continue;
      }
      if (prop === "options") {
        animations2.push(...this._animateOptions(target, values));
        continue;
      }
      const value = values[prop];
      let animation = running[prop];
      const cfg = animatedProps.get(prop);
      if (animation) {
        if (cfg && animation.active()) {
          animation.update(cfg, value, date);
          continue;
        } else {
          animation.cancel();
        }
      }
      if (!cfg || !cfg.duration) {
        target[prop] = value;
        continue;
      }
      running[prop] = animation = new Animation(cfg, target, prop, value);
      animations2.push(animation);
    }
    return animations2;
  }
  update(target, values) {
    if (this._properties.size === 0) {
      Object.assign(target, values);
      return;
    }
    const animations2 = this._createAnimations(target, values);
    if (animations2.length) {
      animator.add(this._chart, animations2);
      return true;
    }
  }
}
function awaitAll(animations2, properties) {
  const running = [];
  const keys = Object.keys(properties);
  for (let i = 0; i < keys.length; i++) {
    const anim = animations2[keys[i]];
    if (anim && anim.active()) {
      running.push(anim.wait());
    }
  }
  return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
  if (!newOptions) {
    return;
  }
  let options = target.options;
  if (!options) {
    target.options = newOptions;
    return;
  }
  if (options.$shared) {
    target.options = options = Object.assign({}, options, {
      $shared: false,
      $animations: {}
    });
  }
  return options;
}
function scaleClip(scale2, allowedOverflow) {
  const opts = scale2 && scale2.options || {};
  const reverse = opts.reverse;
  const min = opts.min === void 0 ? allowedOverflow : 0;
  const max = opts.max === void 0 ? allowedOverflow : 0;
  return {
    start: reverse ? max : min,
    end: reverse ? min : max
  };
}
function defaultClip(xScale, yScale, allowedOverflow) {
  if (allowedOverflow === false) {
    return false;
  }
  const x2 = scaleClip(xScale, allowedOverflow);
  const y2 = scaleClip(yScale, allowedOverflow);
  return {
    top: y2.end,
    right: x2.end,
    bottom: y2.start,
    left: x2.start
  };
}
function toClip(value) {
  let t2, r2, b2, l2;
  if (isObject(value)) {
    t2 = value.top;
    r2 = value.right;
    b2 = value.bottom;
    l2 = value.left;
  } else {
    t2 = r2 = b2 = l2 = value;
  }
  return {
    top: t2,
    right: r2,
    bottom: b2,
    left: l2,
    disabled: value === false
  };
}
function getSortedDatasetIndices(chart, filterVisible) {
  const keys = [];
  const metasets = chart._getSortedDatasetMetas(filterVisible);
  let i, ilen;
  for (i = 0, ilen = metasets.length; i < ilen; ++i) {
    keys.push(metasets[i].index);
  }
  return keys;
}
function applyStack(stack, value, dsIndex, options = {}) {
  const keys = stack.keys;
  const singleMode = options.mode === "single";
  let i, ilen, datasetIndex, otherValue;
  if (value === null) {
    return;
  }
  let found = false;
  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    datasetIndex = +keys[i];
    if (datasetIndex === dsIndex) {
      found = true;
      if (options.all) {
        continue;
      }
      break;
    }
    otherValue = stack.values[datasetIndex];
    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {
      value += otherValue;
    }
  }
  if (!found && !options.all) {
    return 0;
  }
  return value;
}
function convertObjectDataToArray(data, meta) {
  const { iScale, vScale } = meta;
  const iAxisKey = iScale.axis === "x" ? "x" : "y";
  const vAxisKey = vScale.axis === "x" ? "x" : "y";
  const keys = Object.keys(data);
  const adata = new Array(keys.length);
  let i, ilen, key;
  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    key = keys[i];
    adata[i] = {
      [iAxisKey]: key,
      [vAxisKey]: data[key]
    };
  }
  return adata;
}
function isStacked(scale2, meta) {
  const stacked = scale2 && scale2.options.stacked;
  return stacked || stacked === void 0 && meta.stack !== void 0;
}
function getStackKey(indexScale, valueScale, meta) {
  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale2) {
  const { min, max, minDefined, maxDefined } = scale2.getUserBounds();
  return {
    min: minDefined ? min : Number.NEGATIVE_INFINITY,
    max: maxDefined ? max : Number.POSITIVE_INFINITY
  };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
  const subStack = stacks[stackKey] || (stacks[stackKey] = {});
  return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {
    const value = stack[meta.index];
    if (positive && value > 0 || !positive && value < 0) {
      return meta.index;
    }
  }
  return null;
}
function updateStacks(controller, parsed) {
  const { chart, _cachedMeta: meta } = controller;
  const stacks = chart._stacks || (chart._stacks = {});
  const { iScale, vScale, index: datasetIndex } = meta;
  const iAxis = iScale.axis;
  const vAxis = vScale.axis;
  const key = getStackKey(iScale, vScale, meta);
  const ilen = parsed.length;
  let stack;
  for (let i = 0; i < ilen; ++i) {
    const item = parsed[i];
    const { [iAxis]: index2, [vAxis]: value } = item;
    const itemStacks = item._stacks || (item._stacks = {});
    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index2);
    stack[datasetIndex] = value;
    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
    const visualValues = stack._visualValues || (stack._visualValues = {});
    visualValues[datasetIndex] = value;
  }
}
function getFirstScaleId(chart, axis) {
  const scales = chart.scales;
  return Object.keys(scales).filter((key) => scales[key].axis === axis).shift();
}
function createDatasetContext(parent, index2) {
  return createContext(parent, {
    active: false,
    dataset: void 0,
    datasetIndex: index2,
    index: index2,
    mode: "default",
    type: "dataset"
  });
}
function createDataContext(parent, index2, element) {
  return createContext(parent, {
    active: false,
    dataIndex: index2,
    parsed: void 0,
    raw: void 0,
    element,
    index: index2,
    mode: "default",
    type: "data"
  });
}
function clearStacks(meta, items) {
  const datasetIndex = meta.controller.index;
  const axis = meta.vScale && meta.vScale.axis;
  if (!axis) {
    return;
  }
  items = items || meta._parsed;
  for (const parsed of items) {
    const stacks = parsed._stacks;
    if (!stacks || stacks[axis] === void 0 || stacks[axis][datasetIndex] === void 0) {
      return;
    }
    delete stacks[axis][datasetIndex];
    if (stacks[axis]._visualValues !== void 0 && stacks[axis]._visualValues[datasetIndex] !== void 0) {
      delete stacks[axis]._visualValues[datasetIndex];
    }
  }
}
const isDirectUpdateMode = (mode) => mode === "reset" || mode === "none";
const cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);
const createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {
  keys: getSortedDatasetIndices(chart, true),
  values: null
};
class DatasetController {
  constructor(chart, datasetIndex) {
    this.chart = chart;
    this._ctx = chart.ctx;
    this.index = datasetIndex;
    this._cachedDataOpts = {};
    this._cachedMeta = this.getMeta();
    this._type = this._cachedMeta.type;
    this.options = void 0;
    this._parsing = false;
    this._data = void 0;
    this._objectData = void 0;
    this._sharedOptions = void 0;
    this._drawStart = void 0;
    this._drawCount = void 0;
    this.enableOptionSharing = false;
    this.supportsDecimation = false;
    this.$context = void 0;
    this._syncList = [];
    this.datasetElementType = new.target.datasetElementType;
    this.dataElementType = new.target.dataElementType;
    this.initialize();
  }
  initialize() {
    const meta = this._cachedMeta;
    this.configure();
    this.linkScales();
    meta._stacked = isStacked(meta.vScale, meta);
    this.addElements();
    if (this.options.fill && !this.chart.isPluginEnabled("filler")) {
      console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
    }
  }
  updateIndex(datasetIndex) {
    if (this.index !== datasetIndex) {
      clearStacks(this._cachedMeta);
    }
    this.index = datasetIndex;
  }
  linkScales() {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    const chooseId = (axis, x2, y2, r2) => axis === "x" ? x2 : axis === "r" ? r2 : y2;
    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, "x"));
    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, "y"));
    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, "r"));
    const indexAxis = meta.indexAxis;
    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
    meta.xScale = this.getScaleForId(xid);
    meta.yScale = this.getScaleForId(yid);
    meta.rScale = this.getScaleForId(rid);
    meta.iScale = this.getScaleForId(iid);
    meta.vScale = this.getScaleForId(vid);
  }
  getDataset() {
    return this.chart.data.datasets[this.index];
  }
  getMeta() {
    return this.chart.getDatasetMeta(this.index);
  }
  getScaleForId(scaleID) {
    return this.chart.scales[scaleID];
  }
  _getOtherScale(scale2) {
    const meta = this._cachedMeta;
    return scale2 === meta.iScale ? meta.vScale : meta.iScale;
  }
  reset() {
    this._update("reset");
  }
  _destroy() {
    const meta = this._cachedMeta;
    if (this._data) {
      unlistenArrayEvents(this._data, this);
    }
    if (meta._stacked) {
      clearStacks(meta);
    }
  }
  _dataCheck() {
    const dataset = this.getDataset();
    const data = dataset.data || (dataset.data = []);
    const _data = this._data;
    if (isObject(data)) {
      const meta = this._cachedMeta;
      this._data = convertObjectDataToArray(data, meta);
    } else if (_data !== data) {
      if (_data) {
        unlistenArrayEvents(_data, this);
        const meta = this._cachedMeta;
        clearStacks(meta);
        meta._parsed = [];
      }
      if (data && Object.isExtensible(data)) {
        listenArrayEvents(data, this);
      }
      this._syncList = [];
      this._data = data;
    }
  }
  addElements() {
    const meta = this._cachedMeta;
    this._dataCheck();
    if (this.datasetElementType) {
      meta.dataset = new this.datasetElementType();
    }
  }
  buildOrUpdateElements(resetNewElements) {
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    let stackChanged = false;
    this._dataCheck();
    const oldStacked = meta._stacked;
    meta._stacked = isStacked(meta.vScale, meta);
    if (meta.stack !== dataset.stack) {
      stackChanged = true;
      clearStacks(meta);
      meta.stack = dataset.stack;
    }
    this._resyncElements(resetNewElements);
    if (stackChanged || oldStacked !== meta._stacked) {
      updateStacks(this, meta._parsed);
      meta._stacked = isStacked(meta.vScale, meta);
    }
  }
  configure() {
    const config = this.chart.config;
    const scopeKeys = config.datasetScopeKeys(this._type);
    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
    this.options = config.createResolver(scopes, this.getContext());
    this._parsing = this.options.parsing;
    this._cachedDataOpts = {};
  }
  parse(start, count) {
    const { _cachedMeta: meta, _data: data } = this;
    const { iScale, _stacked } = meta;
    const iAxis = iScale.axis;
    let sorted = start === 0 && count === data.length ? true : meta._sorted;
    let prev = start > 0 && meta._parsed[start - 1];
    let i, cur, parsed;
    if (this._parsing === false) {
      meta._parsed = data;
      meta._sorted = true;
      parsed = data;
    } else {
      if (isArray(data[start])) {
        parsed = this.parseArrayData(meta, data, start, count);
      } else if (isObject(data[start])) {
        parsed = this.parseObjectData(meta, data, start, count);
      } else {
        parsed = this.parsePrimitiveData(meta, data, start, count);
      }
      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
      for (i = 0; i < count; ++i) {
        meta._parsed[i + start] = cur = parsed[i];
        if (sorted) {
          if (isNotInOrderComparedToPrev()) {
            sorted = false;
          }
          prev = cur;
        }
      }
      meta._sorted = sorted;
    }
    if (_stacked) {
      updateStacks(this, parsed);
    }
  }
  parsePrimitiveData(meta, data, start, count) {
    const { iScale, vScale } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = new Array(count);
    let i, ilen, index2;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index2 = i + start;
      parsed[i] = {
        [iAxis]: singleScale || iScale.parse(labels[index2], index2),
        [vAxis]: vScale.parse(data[index2], index2)
      };
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const parsed = new Array(count);
    let i, ilen, index2, item;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index2 = i + start;
      item = data[index2];
      parsed[i] = {
        x: xScale.parse(item[0], index2),
        y: yScale.parse(item[1], index2)
      };
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
    const parsed = new Array(count);
    let i, ilen, index2, item;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index2 = i + start;
      item = data[index2];
      parsed[i] = {
        x: xScale.parse(resolveObjectKey(item, xAxisKey), index2),
        y: yScale.parse(resolveObjectKey(item, yAxisKey), index2)
      };
    }
    return parsed;
  }
  getParsed(index2) {
    return this._cachedMeta._parsed[index2];
  }
  getDataElement(index2) {
    return this._cachedMeta.data[index2];
  }
  applyStack(scale2, parsed, mode) {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const value = parsed[scale2.axis];
    const stack = {
      keys: getSortedDatasetIndices(chart, true),
      values: parsed._stacks[scale2.axis]._visualValues
    };
    return applyStack(stack, value, meta.index, {
      mode
    });
  }
  updateRangeFromParsed(range, scale2, parsed, stack) {
    const parsedValue = parsed[scale2.axis];
    let value = parsedValue === null ? NaN : parsedValue;
    const values = stack && parsed._stacks[scale2.axis];
    if (stack && values) {
      stack.values = values;
      value = applyStack(stack, parsedValue, this._cachedMeta.index);
    }
    range.min = Math.min(range.min, value);
    range.max = Math.max(range.max, value);
  }
  getMinMax(scale2, canStack) {
    const meta = this._cachedMeta;
    const _parsed = meta._parsed;
    const sorted = meta._sorted && scale2 === meta.iScale;
    const ilen = _parsed.length;
    const otherScale = this._getOtherScale(scale2);
    const stack = createStack(canStack, meta, this.chart);
    const range = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    };
    const { min: otherMin, max: otherMax } = getUserBounds(otherScale);
    let i, parsed;
    function _skip() {
      parsed = _parsed[i];
      const otherValue = parsed[otherScale.axis];
      return !isNumberFinite(parsed[scale2.axis]) || otherMin > otherValue || otherMax < otherValue;
    }
    for (i = 0; i < ilen; ++i) {
      if (_skip()) {
        continue;
      }
      this.updateRangeFromParsed(range, scale2, parsed, stack);
      if (sorted) {
        break;
      }
    }
    if (sorted) {
      for (i = ilen - 1; i >= 0; --i) {
        if (_skip()) {
          continue;
        }
        this.updateRangeFromParsed(range, scale2, parsed, stack);
        break;
      }
    }
    return range;
  }
  getAllParsedValues(scale2) {
    const parsed = this._cachedMeta._parsed;
    const values = [];
    let i, ilen, value;
    for (i = 0, ilen = parsed.length; i < ilen; ++i) {
      value = parsed[i][scale2.axis];
      if (isNumberFinite(value)) {
        values.push(value);
      }
    }
    return values;
  }
  getMaxOverflow() {
    return false;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const parsed = this.getParsed(index2);
    return {
      label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
      value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
    };
  }
  _update(mode) {
    const meta = this._cachedMeta;
    this.update(mode || "default");
    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
  }
  update(mode) {
  }
  draw() {
    const ctx = this._ctx;
    const chart = this.chart;
    const meta = this._cachedMeta;
    const elements = meta.data || [];
    const area = chart.chartArea;
    const active = [];
    const start = this._drawStart || 0;
    const count = this._drawCount || elements.length - start;
    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
    let i;
    if (meta.dataset) {
      meta.dataset.draw(ctx, area, start, count);
    }
    for (i = start; i < start + count; ++i) {
      const element = elements[i];
      if (element.hidden) {
        continue;
      }
      if (element.active && drawActiveElementsOnTop) {
        active.push(element);
      } else {
        element.draw(ctx, area);
      }
    }
    for (i = 0; i < active.length; ++i) {
      active[i].draw(ctx, area);
    }
  }
  getStyle(index2, active) {
    const mode = active ? "active" : "default";
    return index2 === void 0 && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index2 || 0, mode);
  }
  getContext(index2, active, mode) {
    const dataset = this.getDataset();
    let context;
    if (index2 >= 0 && index2 < this._cachedMeta.data.length) {
      const element = this._cachedMeta.data[index2];
      context = element.$context || (element.$context = createDataContext(this.getContext(), index2, element));
      context.parsed = this.getParsed(index2);
      context.raw = dataset.data[index2];
      context.index = context.dataIndex = index2;
    } else {
      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
      context.dataset = dataset;
      context.index = context.datasetIndex = this.index;
    }
    context.active = !!active;
    context.mode = mode;
    return context;
  }
  resolveDatasetElementOptions(mode) {
    return this._resolveElementOptions(this.datasetElementType.id, mode);
  }
  resolveDataElementOptions(index2, mode) {
    return this._resolveElementOptions(this.dataElementType.id, mode, index2);
  }
  _resolveElementOptions(elementType, mode = "default", index2) {
    const active = mode === "active";
    const cache = this._cachedDataOpts;
    const cacheKey = elementType + "-" + mode;
    const cached = cache[cacheKey];
    const sharing = this.enableOptionSharing && defined(index2);
    if (cached) {
      return cloneIfNotShared(cached, sharing);
    }
    const config = this.chart.config;
    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
    const prefixes = active ? [
      `${elementType}Hover`,
      "hover",
      elementType,
      ""
    ] : [
      elementType,
      ""
    ];
    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
    const names2 = Object.keys(defaults.elements[elementType]);
    const context = () => this.getContext(index2, active, mode);
    const values = config.resolveNamedOptions(scopes, names2, context, prefixes);
    if (values.$shared) {
      values.$shared = sharing;
      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
    }
    return values;
  }
  _resolveAnimations(index2, transition, active) {
    const chart = this.chart;
    const cache = this._cachedDataOpts;
    const cacheKey = `animation-${transition}`;
    const cached = cache[cacheKey];
    if (cached) {
      return cached;
    }
    let options;
    if (chart.options.animation !== false) {
      const config = this.chart.config;
      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
      options = config.createResolver(scopes, this.getContext(index2, active, transition));
    }
    const animations2 = new Animations(chart, options && options.animations);
    if (options && options._cacheable) {
      cache[cacheKey] = Object.freeze(animations2);
    }
    return animations2;
  }
  getSharedOptions(options) {
    if (!options.$shared) {
      return;
    }
    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
  }
  includeOptions(mode, sharedOptions) {
    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
  }
  _getSharedOptions(start, mode) {
    const firstOpts = this.resolveDataElementOptions(start, mode);
    const previouslySharedOptions = this._sharedOptions;
    const sharedOptions = this.getSharedOptions(firstOpts);
    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
    this.updateSharedOptions(sharedOptions, mode, firstOpts);
    return {
      sharedOptions,
      includeOptions
    };
  }
  updateElement(element, index2, properties, mode) {
    if (isDirectUpdateMode(mode)) {
      Object.assign(element, properties);
    } else {
      this._resolveAnimations(index2, mode).update(element, properties);
    }
  }
  updateSharedOptions(sharedOptions, mode, newOptions) {
    if (sharedOptions && !isDirectUpdateMode(mode)) {
      this._resolveAnimations(void 0, mode).update(sharedOptions, newOptions);
    }
  }
  _setStyle(element, index2, mode, active) {
    element.active = active;
    const options = this.getStyle(index2, active);
    this._resolveAnimations(index2, mode, active).update(element, {
      options: !active && this.getSharedOptions(options) || options
    });
  }
  removeHoverStyle(element, datasetIndex, index2) {
    this._setStyle(element, index2, "active", false);
  }
  setHoverStyle(element, datasetIndex, index2) {
    this._setStyle(element, index2, "active", true);
  }
  _removeDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;
    if (element) {
      this._setStyle(element, void 0, "active", false);
    }
  }
  _setDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;
    if (element) {
      this._setStyle(element, void 0, "active", true);
    }
  }
  _resyncElements(resetNewElements) {
    const data = this._data;
    const elements = this._cachedMeta.data;
    for (const [method, arg1, arg2] of this._syncList) {
      this[method](arg1, arg2);
    }
    this._syncList = [];
    const numMeta = elements.length;
    const numData = data.length;
    const count = Math.min(numData, numMeta);
    if (count) {
      this.parse(0, count);
    }
    if (numData > numMeta) {
      this._insertElements(numMeta, numData - numMeta, resetNewElements);
    } else if (numData < numMeta) {
      this._removeElements(numData, numMeta - numData);
    }
  }
  _insertElements(start, count, resetNewElements = true) {
    const meta = this._cachedMeta;
    const data = meta.data;
    const end = start + count;
    let i;
    const move = (arr) => {
      arr.length += count;
      for (i = arr.length - 1; i >= end; i--) {
        arr[i] = arr[i - count];
      }
    };
    move(data);
    for (i = start; i < end; ++i) {
      data[i] = new this.dataElementType();
    }
    if (this._parsing) {
      move(meta._parsed);
    }
    this.parse(start, count);
    if (resetNewElements) {
      this.updateElements(data, start, count, "reset");
    }
  }
  updateElements(element, start, count, mode) {
  }
  _removeElements(start, count) {
    const meta = this._cachedMeta;
    if (this._parsing) {
      const removed = meta._parsed.splice(start, count);
      if (meta._stacked) {
        clearStacks(meta, removed);
      }
    }
    meta.data.splice(start, count);
  }
  _sync(args) {
    if (this._parsing) {
      this._syncList.push(args);
    } else {
      const [method, arg1, arg2] = args;
      this[method](arg1, arg2);
    }
    this.chart._dataChanges.push([
      this.index,
      ...args
    ]);
  }
  _onDataPush() {
    const count = arguments.length;
    this._sync([
      "_insertElements",
      this.getDataset().data.length - count,
      count
    ]);
  }
  _onDataPop() {
    this._sync([
      "_removeElements",
      this._cachedMeta.data.length - 1,
      1
    ]);
  }
  _onDataShift() {
    this._sync([
      "_removeElements",
      0,
      1
    ]);
  }
  _onDataSplice(start, count) {
    if (count) {
      this._sync([
        "_removeElements",
        start,
        count
      ]);
    }
    const newCount = arguments.length - 2;
    if (newCount) {
      this._sync([
        "_insertElements",
        start,
        newCount
      ]);
    }
  }
  _onDataUnshift() {
    this._sync([
      "_insertElements",
      0,
      arguments.length
    ]);
  }
}
__publicField(DatasetController, "defaults", {});
__publicField(DatasetController, "datasetElementType", null);
__publicField(DatasetController, "dataElementType", null);
class LineController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    this.supportsDecimation = true;
    super.initialize();
  }
  update(mode) {
    const meta = this._cachedMeta;
    const { dataset: line, data: points = [], _dataset } = meta;
    const animationsDisabled = this.chart._animationsDisabled;
    let { start, count } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
    this._drawStart = start;
    this._drawCount = count;
    if (_scaleRangesChanged(meta)) {
      start = 0;
      count = points.length;
    }
    line._chart = this.chart;
    line._datasetIndex = this.index;
    line._decimated = !!_dataset._decimated;
    line.points = points;
    const options = this.resolveDatasetElementOptions(mode);
    if (!this.options.showLine) {
      options.borderWidth = 0;
    }
    options.segment = this.options.segment;
    this.updateElement(line, void 0, {
      animated: !animationsDisabled,
      options
    }, mode);
    this.updateElements(points, start, count, mode);
  }
  updateElements(points, start, count, mode) {
    const reset = mode === "reset";
    const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const { spanGaps, segment } = this.options;
    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
    const end = start + count;
    const pointsCount = points.length;
    let prevParsed = start > 0 && this.getParsed(start - 1);
    for (let i = 0; i < pointsCount; ++i) {
      const point = points[i];
      const properties = directUpdate ? point : {};
      if (i < start || i >= end) {
        properties.skip = true;
        continue;
      }
      const parsed = this.getParsed(i);
      const nullData = isNullOrUndef(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
      if (segment) {
        properties.parsed = parsed;
        properties.raw = _dataset.data[i];
      }
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode);
      }
      if (!directUpdate) {
        this.updateElement(point, i, properties, mode);
      }
      prevParsed = parsed;
    }
  }
  getMaxOverflow() {
    const meta = this._cachedMeta;
    const dataset = meta.dataset;
    const border = dataset.options && dataset.options.borderWidth || 0;
    const data = meta.data || [];
    if (!data.length) {
      return border;
    }
    const firstPoint = data[0].size(this.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
    return Math.max(border, firstPoint, lastPoint) / 2;
  }
  draw() {
    const meta = this._cachedMeta;
    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
    super.draw();
  }
}
__publicField(LineController, "id", "line");
__publicField(LineController, "defaults", {
  datasetElementType: "line",
  dataElementType: "point",
  showLine: true,
  spanGaps: false
});
__publicField(LineController, "overrides", {
  scales: {
    _index_: {
      type: "category"
    },
    _value_: {
      type: "linear"
    }
  }
});
function abstract() {
  throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}
class DateAdapterBase {
  constructor(options) {
    __publicField(this, "options");
    this.options = options || {};
  }
  /**
  * Override default date adapter methods.
  * Accepts type parameter to define options type.
  * @example
  * Chart._adapters._date.override<{myAdapterOption: string}>({
  *   init() {
  *     console.log(this.options.myAdapterOption);
  *   }
  * })
  */
  static override(members) {
    Object.assign(DateAdapterBase.prototype, members);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  init() {
  }
  formats() {
    return abstract();
  }
  parse() {
    return abstract();
  }
  format() {
    return abstract();
  }
  add() {
    return abstract();
  }
  diff() {
    return abstract();
  }
  startOf() {
    return abstract();
  }
  endOf() {
    return abstract();
  }
}
var adapters = {
  _date: DateAdapterBase
};
function binarySearch(metaset, axis, value, intersect) {
  const { controller, data, _sorted } = metaset;
  const iScale = controller._cachedMeta.iScale;
  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;
  if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
    if (!intersect) {
      const result = lookupMethod(data, axis, value);
      if (spanGaps) {
        const { vScale } = controller._cachedMeta;
        const { _parsed } = metaset;
        const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex((point) => !isNullOrUndef(point[vScale.axis]));
        result.lo -= Math.max(0, distanceToDefinedLo);
        const distanceToDefinedHi = _parsed.slice(result.hi).findIndex((point) => !isNullOrUndef(point[vScale.axis]));
        result.hi += Math.max(0, distanceToDefinedHi);
      }
      return result;
    } else if (controller._sharedOptions) {
      const el2 = data[0];
      const range = typeof el2.getRange === "function" && el2.getRange(axis);
      if (range) {
        const start = lookupMethod(data, axis, value - range);
        const end = lookupMethod(data, axis, value + range);
        return {
          lo: start.lo,
          hi: end.hi
        };
      }
    }
  }
  return {
    lo: 0,
    hi: data.length - 1
  };
}
function evaluateInteractionItems(chart, axis, position, handler, intersect) {
  const metasets = chart.getSortedVisibleDatasetMetas();
  const value = position[axis];
  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {
    const { index: index2, data } = metasets[i];
    const { lo, hi: hi2 } = binarySearch(metasets[i], axis, value, intersect);
    for (let j = lo; j <= hi2; ++j) {
      const element = data[j];
      if (!element.skip) {
        handler(element, index2, j);
      }
    }
  }
}
function getDistanceMetricForAxis(axis) {
  const useX = axis.indexOf("x") !== -1;
  const useY = axis.indexOf("y") !== -1;
  return function(pt1, pt2) {
    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
  };
}
function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
  const items = [];
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return items;
  }
  const evaluationFunc = function(element, datasetIndex, index2) {
    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {
      return;
    }
    if (element.inRange(position.x, position.y, useFinalPosition)) {
      items.push({
        element,
        datasetIndex,
        index: index2
      });
    }
  };
  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
  return items;
}
function getNearestRadialItems(chart, position, axis, useFinalPosition) {
  let items = [];
  function evaluationFunc(element, datasetIndex, index2) {
    const { startAngle, endAngle } = element.getProps([
      "startAngle",
      "endAngle"
    ], useFinalPosition);
    const { angle } = getAngleFromPoint(element, {
      x: position.x,
      y: position.y
    });
    if (_angleBetween(angle, startAngle, endAngle)) {
      items.push({
        element,
        datasetIndex,
        index: index2
      });
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  let items = [];
  const distanceMetric = getDistanceMetricForAxis(axis);
  let minDistance = Number.POSITIVE_INFINITY;
  function evaluationFunc(element, datasetIndex, index2) {
    const inRange = element.inRange(position.x, position.y, useFinalPosition);
    if (intersect && !inRange) {
      return;
    }
    const center = element.getCenterPoint(useFinalPosition);
    const pointInArea = !!includeInvisible || chart.isPointInArea(center);
    if (!pointInArea && !inRange) {
      return;
    }
    const distance2 = distanceMetric(position, center);
    if (distance2 < minDistance) {
      items = [
        {
          element,
          datasetIndex,
          index: index2
        }
      ];
      minDistance = distance2;
    } else if (distance2 === minDistance) {
      items.push({
        element,
        datasetIndex,
        index: index2
      });
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return [];
  }
  return axis === "r" && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
}
function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
  const items = [];
  const rangeMethod = axis === "x" ? "inXRange" : "inYRange";
  let intersectsItem = false;
  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index2) => {
    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {
      items.push({
        element,
        datasetIndex,
        index: index2
      });
      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
    }
  });
  if (intersect && !intersectsItem) {
    return [];
  }
  return items;
}
var Interaction = {
  modes: {
    index(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || "x";
      const includeInvisible = options.includeInvisible || false;
      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
      const elements = [];
      if (!items.length) {
        return [];
      }
      chart.getSortedVisibleDatasetMetas().forEach((meta) => {
        const index2 = items[0].index;
        const element = meta.data[index2];
        if (element && !element.skip) {
          elements.push({
            element,
            datasetIndex: meta.index,
            index: index2
          });
        }
      });
      return elements;
    },
    dataset(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
      if (items.length > 0) {
        const datasetIndex = items[0].datasetIndex;
        const data = chart.getDatasetMeta(datasetIndex).data;
        items = [];
        for (let i = 0; i < data.length; ++i) {
          items.push({
            element: data[i],
            datasetIndex,
            index: i
          });
        }
      }
      return items;
    },
    point(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
    },
    nearest(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
    },
    x(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      return getAxisItems(chart, position, "x", options.intersect, useFinalPosition);
    },
    y(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      return getAxisItems(chart, position, "y", options.intersect, useFinalPosition);
    }
  }
};
const STATIC_POSITIONS = [
  "left",
  "top",
  "right",
  "bottom"
];
function filterByPosition(array, position) {
  return array.filter((v2) => v2.pos === position);
}
function filterDynamicPositionByAxis(array, axis) {
  return array.filter((v2) => STATIC_POSITIONS.indexOf(v2.pos) === -1 && v2.box.axis === axis);
}
function sortByWeight(array, reverse) {
  return array.sort((a, b2) => {
    const v0 = reverse ? b2 : a;
    const v1 = reverse ? a : b2;
    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
  });
}
function wrapBoxes(boxes) {
  const layoutBoxes = [];
  let i, ilen, box, pos, stack, stackWeight;
  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
    box = boxes[i];
    ({ position: pos, options: { stack, stackWeight = 1 } } = box);
    layoutBoxes.push({
      index: i,
      box,
      pos,
      horizontal: box.isHorizontal(),
      weight: box.weight,
      stack: stack && pos + stack,
      stackWeight
    });
  }
  return layoutBoxes;
}
function buildStacks(layouts2) {
  const stacks = {};
  for (const wrap of layouts2) {
    const { stack, pos, stackWeight } = wrap;
    if (!stack || !STATIC_POSITIONS.includes(pos)) {
      continue;
    }
    const _stack = stacks[stack] || (stacks[stack] = {
      count: 0,
      placed: 0,
      weight: 0,
      size: 0
    });
    _stack.count++;
    _stack.weight += stackWeight;
  }
  return stacks;
}
function setLayoutDims(layouts2, params) {
  const stacks = buildStacks(layouts2);
  const { vBoxMaxWidth, hBoxMaxHeight } = params;
  let i, ilen, layout2;
  for (i = 0, ilen = layouts2.length; i < ilen; ++i) {
    layout2 = layouts2[i];
    const { fullSize } = layout2.box;
    const stack = stacks[layout2.stack];
    const factor = stack && layout2.stackWeight / stack.weight;
    if (layout2.horizontal) {
      layout2.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
      layout2.height = hBoxMaxHeight;
    } else {
      layout2.width = vBoxMaxWidth;
      layout2.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
    }
  }
  return stacks;
}
function buildLayoutBoxes(boxes) {
  const layoutBoxes = wrapBoxes(boxes);
  const fullSize = sortByWeight(layoutBoxes.filter((wrap) => wrap.box.fullSize), true);
  const left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
  const right = sortByWeight(filterByPosition(layoutBoxes, "right"));
  const top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
  const bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, "x");
  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, "y");
  return {
    fullSize,
    leftAndTop: left.concat(top),
    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
    chartArea: filterByPosition(layoutBoxes, "chartArea"),
    vertical: left.concat(right).concat(centerVertical),
    horizontal: top.concat(bottom).concat(centerHorizontal)
  };
}
function getCombinedMax(maxPadding, chartArea, a, b2) {
  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b2], chartArea[b2]);
}
function updateMaxPadding(maxPadding, boxPadding) {
  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout2, stacks) {
  const { pos, box } = layout2;
  const maxPadding = chartArea.maxPadding;
  if (!isObject(pos)) {
    if (layout2.size) {
      chartArea[pos] -= layout2.size;
    }
    const stack = stacks[layout2.stack] || {
      size: 0,
      count: 1
    };
    stack.size = Math.max(stack.size, layout2.horizontal ? box.height : box.width);
    layout2.size = stack.size / stack.count;
    chartArea[pos] += layout2.size;
  }
  if (box.getPadding) {
    updateMaxPadding(maxPadding, box.getPadding());
  }
  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right"));
  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom"));
  const widthChanged = newWidth !== chartArea.w;
  const heightChanged = newHeight !== chartArea.h;
  chartArea.w = newWidth;
  chartArea.h = newHeight;
  return layout2.horizontal ? {
    same: widthChanged,
    other: heightChanged
  } : {
    same: heightChanged,
    other: widthChanged
  };
}
function handleMaxPadding(chartArea) {
  const maxPadding = chartArea.maxPadding;
  function updatePos(pos) {
    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    chartArea[pos] += change;
    return change;
  }
  chartArea.y += updatePos("top");
  chartArea.x += updatePos("left");
  updatePos("right");
  updatePos("bottom");
}
function getMargins(horizontal, chartArea) {
  const maxPadding = chartArea.maxPadding;
  function marginForPositions(positions2) {
    const margin = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    positions2.forEach((pos) => {
      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    });
    return margin;
  }
  return horizontal ? marginForPositions([
    "left",
    "right"
  ]) : marginForPositions([
    "top",
    "bottom"
  ]);
}
function fitBoxes(boxes, chartArea, params, stacks) {
  const refitBoxes = [];
  let i, ilen, layout2, box, refit, changed;
  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {
    layout2 = boxes[i];
    box = layout2.box;
    box.update(layout2.width || chartArea.w, layout2.height || chartArea.h, getMargins(layout2.horizontal, chartArea));
    const { same, other } = updateDims(chartArea, params, layout2, stacks);
    refit |= same && refitBoxes.length;
    changed = changed || other;
    if (!box.fullSize) {
      refitBoxes.push(layout2);
    }
  }
  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
  box.top = top;
  box.left = left;
  box.right = left + width;
  box.bottom = top + height;
  box.width = width;
  box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
  const userPadding = params.padding;
  let { x: x2, y: y2 } = chartArea;
  for (const layout2 of boxes) {
    const box = layout2.box;
    const stack = stacks[layout2.stack] || {
      placed: 0,
      weight: 1
    };
    const weight = layout2.stackWeight / stack.weight || 1;
    if (layout2.horizontal) {
      const width = chartArea.w * weight;
      const height = stack.size || box.height;
      if (defined(stack.start)) {
        y2 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, userPadding.left, y2, params.outerWidth - userPadding.right - userPadding.left, height);
      } else {
        setBoxDims(box, chartArea.left + stack.placed, y2, width, height);
      }
      stack.start = y2;
      stack.placed += width;
      y2 = box.bottom;
    } else {
      const height = chartArea.h * weight;
      const width = stack.size || box.width;
      if (defined(stack.start)) {
        x2 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, x2, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
      } else {
        setBoxDims(box, x2, chartArea.top + stack.placed, width, height);
      }
      stack.start = x2;
      stack.placed += height;
      x2 = box.right;
    }
  }
  chartArea.x = x2;
  chartArea.y = y2;
}
var layouts = {
  addBox(chart, item) {
    if (!chart.boxes) {
      chart.boxes = [];
    }
    item.fullSize = item.fullSize || false;
    item.position = item.position || "top";
    item.weight = item.weight || 0;
    item._layers = item._layers || function() {
      return [
        {
          z: 0,
          draw(chartArea) {
            item.draw(chartArea);
          }
        }
      ];
    };
    chart.boxes.push(item);
  },
  removeBox(chart, layoutItem) {
    const index2 = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    if (index2 !== -1) {
      chart.boxes.splice(index2, 1);
    }
  },
  configure(chart, item, options) {
    item.fullSize = options.fullSize;
    item.position = options.position;
    item.weight = options.weight;
  },
  update(chart, width, height, minPadding) {
    if (!chart) {
      return;
    }
    const padding = toPadding(chart.options.layout.padding);
    const availableWidth = Math.max(width - padding.width, 0);
    const availableHeight = Math.max(height - padding.height, 0);
    const boxes = buildLayoutBoxes(chart.boxes);
    const verticalBoxes = boxes.vertical;
    const horizontalBoxes = boxes.horizontal;
    each(chart.boxes, (box) => {
      if (typeof box.beforeLayout === "function") {
        box.beforeLayout();
      }
    });
    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
    const params = Object.freeze({
      outerWidth: width,
      outerHeight: height,
      padding,
      availableWidth,
      availableHeight,
      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
      hBoxMaxHeight: availableHeight / 2
    });
    const maxPadding = Object.assign({}, padding);
    updateMaxPadding(maxPadding, toPadding(minPadding));
    const chartArea = Object.assign({
      maxPadding,
      w: availableWidth,
      h: availableHeight,
      x: padding.left,
      y: padding.top
    }, padding);
    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
    fitBoxes(boxes.fullSize, chartArea, params, stacks);
    fitBoxes(verticalBoxes, chartArea, params, stacks);
    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
      fitBoxes(verticalBoxes, chartArea, params, stacks);
    }
    handleMaxPadding(chartArea);
    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
    chartArea.x += chartArea.w;
    chartArea.y += chartArea.h;
    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
    chart.chartArea = {
      left: chartArea.left,
      top: chartArea.top,
      right: chartArea.left + chartArea.w,
      bottom: chartArea.top + chartArea.h,
      height: chartArea.h,
      width: chartArea.w
    };
    each(boxes.chartArea, (layout2) => {
      const box = layout2.box;
      Object.assign(box, chart.chartArea);
      box.update(chartArea.w, chartArea.h, {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      });
    });
  }
};
class BasePlatform {
  acquireContext(canvas, aspectRatio2) {
  }
  releaseContext(context) {
    return false;
  }
  addEventListener(chart, type, listener) {
  }
  removeEventListener(chart, type, listener) {
  }
  getDevicePixelRatio() {
    return 1;
  }
  getMaximumSize(element, width, height, aspectRatio2) {
    width = Math.max(0, width || element.width);
    height = height || element.height;
    return {
      width,
      height: Math.max(0, aspectRatio2 ? Math.floor(width / aspectRatio2) : height)
    };
  }
  isAttached(canvas) {
    return true;
  }
  updateConfig(config) {
  }
}
class BasicPlatform extends BasePlatform {
  acquireContext(item) {
    return item && item.getContext && item.getContext("2d") || null;
  }
  updateConfig(config) {
    config.options.animation = false;
  }
}
const EXPANDO_KEY = "$chartjs";
const EVENT_TYPES$1 = {
  touchstart: "mousedown",
  touchmove: "mousemove",
  touchend: "mouseup",
  pointerenter: "mouseenter",
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointerleave: "mouseout",
  pointerout: "mouseout"
};
const isNullOrEmpty = (value) => value === null || value === "";
function initCanvas(canvas, aspectRatio2) {
  const style = canvas.style;
  const renderHeight = canvas.getAttribute("height");
  const renderWidth = canvas.getAttribute("width");
  canvas[EXPANDO_KEY] = {
    initial: {
      height: renderHeight,
      width: renderWidth,
      style: {
        display: style.display,
        height: style.height,
        width: style.width
      }
    }
  };
  style.display = style.display || "block";
  style.boxSizing = style.boxSizing || "border-box";
  if (isNullOrEmpty(renderWidth)) {
    const displayWidth = readUsedSize(canvas, "width");
    if (displayWidth !== void 0) {
      canvas.width = displayWidth;
    }
  }
  if (isNullOrEmpty(renderHeight)) {
    if (canvas.style.height === "") {
      canvas.height = canvas.width / (aspectRatio2 || 2);
    } else {
      const displayHeight = readUsedSize(canvas, "height");
      if (displayHeight !== void 0) {
        canvas.height = displayHeight;
      }
    }
  }
  return canvas;
}
const eventListenerOptions = supportsEventListenerOptions ? {
  passive: true
} : false;
function addListener(node, type, listener) {
  if (node) {
    node.addEventListener(type, listener, eventListenerOptions);
  }
}
function removeListener(chart, type, listener) {
  if (chart && chart.canvas) {
    chart.canvas.removeEventListener(type, listener, eventListenerOptions);
  }
}
function fromNativeEvent(event, chart) {
  const type = EVENT_TYPES$1[event.type] || event.type;
  const { x: x2, y: y2 } = getRelativePosition(event, chart);
  return {
    type,
    chart,
    native: event,
    x: x2 !== void 0 ? x2 : null,
    y: y2 !== void 0 ? y2 : null
  };
}
function nodeListContains(nodeList, canvas) {
  for (const node of nodeList) {
    if (node === canvas || node.contains(canvas)) {
      return true;
    }
  }
}
function createAttachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.addedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
function createDetachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.removedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
const drpListeningCharts = /* @__PURE__ */ new Map();
let oldDevicePixelRatio = 0;
function onWindowResize() {
  const dpr = window.devicePixelRatio;
  if (dpr === oldDevicePixelRatio) {
    return;
  }
  oldDevicePixelRatio = dpr;
  drpListeningCharts.forEach((resize, chart) => {
    if (chart.currentDevicePixelRatio !== dpr) {
      resize();
    }
  });
}
function listenDevicePixelRatioChanges(chart, resize) {
  if (!drpListeningCharts.size) {
    window.addEventListener("resize", onWindowResize);
  }
  drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
  drpListeningCharts.delete(chart);
  if (!drpListeningCharts.size) {
    window.removeEventListener("resize", onWindowResize);
  }
}
function createResizeObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && _getParentNode(canvas);
  if (!container) {
    return;
  }
  const resize = throttled((width, height) => {
    const w2 = container.clientWidth;
    listener(width, height);
    if (w2 < container.clientWidth) {
      listener();
    }
  }, window);
  const observer = new ResizeObserver((entries) => {
    const entry = entries[0];
    const width = entry.contentRect.width;
    const height = entry.contentRect.height;
    if (width === 0 && height === 0) {
      return;
    }
    resize(width, height);
  });
  observer.observe(container);
  listenDevicePixelRatioChanges(chart, resize);
  return observer;
}
function releaseObserver(chart, type, observer) {
  if (observer) {
    observer.disconnect();
  }
  if (type === "resize") {
    unlistenDevicePixelRatioChanges(chart);
  }
}
function createProxyAndListen(chart, type, listener) {
  const canvas = chart.canvas;
  const proxy = throttled((event) => {
    if (chart.ctx !== null) {
      listener(fromNativeEvent(event, chart));
    }
  }, chart);
  addListener(canvas, type, proxy);
  return proxy;
}
class DomPlatform extends BasePlatform {
  acquireContext(canvas, aspectRatio2) {
    const context = canvas && canvas.getContext && canvas.getContext("2d");
    if (context && context.canvas === canvas) {
      initCanvas(canvas, aspectRatio2);
      return context;
    }
    return null;
  }
  releaseContext(context) {
    const canvas = context.canvas;
    if (!canvas[EXPANDO_KEY]) {
      return false;
    }
    const initial = canvas[EXPANDO_KEY].initial;
    [
      "height",
      "width"
    ].forEach((prop) => {
      const value = initial[prop];
      if (isNullOrUndef(value)) {
        canvas.removeAttribute(prop);
      } else {
        canvas.setAttribute(prop, value);
      }
    });
    const style = initial.style || {};
    Object.keys(style).forEach((key) => {
      canvas.style[key] = style[key];
    });
    canvas.width = canvas.width;
    delete canvas[EXPANDO_KEY];
    return true;
  }
  addEventListener(chart, type, listener) {
    this.removeEventListener(chart, type);
    const proxies = chart.$proxies || (chart.$proxies = {});
    const handlers = {
      attach: createAttachObserver,
      detach: createDetachObserver,
      resize: createResizeObserver
    };
    const handler = handlers[type] || createProxyAndListen;
    proxies[type] = handler(chart, type, listener);
  }
  removeEventListener(chart, type) {
    const proxies = chart.$proxies || (chart.$proxies = {});
    const proxy = proxies[type];
    if (!proxy) {
      return;
    }
    const handlers = {
      attach: releaseObserver,
      detach: releaseObserver,
      resize: releaseObserver
    };
    const handler = handlers[type] || removeListener;
    handler(chart, type, proxy);
    proxies[type] = void 0;
  }
  getDevicePixelRatio() {
    return window.devicePixelRatio;
  }
  getMaximumSize(canvas, width, height, aspectRatio2) {
    return getMaximumSize(canvas, width, height, aspectRatio2);
  }
  isAttached(canvas) {
    const container = canvas && _getParentNode(canvas);
    return !!(container && container.isConnected);
  }
}
function _detectPlatform(canvas) {
  if (!_isDomSupported() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) {
    return BasicPlatform;
  }
  return DomPlatform;
}
let Element$1 = (_a = class {
  constructor() {
    __publicField(this, "x");
    __publicField(this, "y");
    __publicField(this, "active", false);
    __publicField(this, "options");
    __publicField(this, "$animations");
  }
  tooltipPosition(useFinalPosition) {
    const { x: x2, y: y2 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return {
      x: x2,
      y: y2
    };
  }
  hasValue() {
    return isNumber(this.x) && isNumber(this.y);
  }
  getProps(props, final) {
    const anims = this.$animations;
    if (!final || !anims) {
      return this;
    }
    const ret = {};
    props.forEach((prop) => {
      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
    });
    return ret;
  }
}, __publicField(_a, "defaults", {}), __publicField(_a, "defaultRoutes"), _a);
function autoSkip(scale2, ticks) {
  const tickOpts = scale2.options.ticks;
  const determinedMaxTicks = determineMaxTicks(scale2);
  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
  const numMajorIndices = majorIndices.length;
  const first = majorIndices[0];
  const last = majorIndices[numMajorIndices - 1];
  const newTicks = [];
  if (numMajorIndices > ticksLimit) {
    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
    return newTicks;
  }
  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
  if (numMajorIndices > 0) {
    let i, ilen;
    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
    }
    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
    return newTicks;
  }
  skip(ticks, newTicks, spacing);
  return newTicks;
}
function determineMaxTicks(scale2) {
  const offset = scale2.options.offset;
  const tickLength = scale2._tickSize();
  const maxScale = scale2._length / tickLength + (offset ? 0 : 1);
  const maxChart = scale2._maxLength / tickLength;
  return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
  const evenMajorSpacing = getEvenSpacing(majorIndices);
  const spacing = ticks.length / ticksLimit;
  if (!evenMajorSpacing) {
    return Math.max(spacing, 1);
  }
  const factors = _factorize(evenMajorSpacing);
  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {
    const factor = factors[i];
    if (factor > spacing) {
      return factor;
    }
  }
  return Math.max(spacing, 1);
}
function getMajorIndices(ticks) {
  const result = [];
  let i, ilen;
  for (i = 0, ilen = ticks.length; i < ilen; i++) {
    if (ticks[i].major) {
      result.push(i);
    }
  }
  return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing) {
  let count = 0;
  let next = majorIndices[0];
  let i;
  spacing = Math.ceil(spacing);
  for (i = 0; i < ticks.length; i++) {
    if (i === next) {
      newTicks.push(ticks[i]);
      count++;
      next = majorIndices[count * spacing];
    }
  }
}
function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
  const start = valueOrDefault(majorStart, 0);
  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
  let count = 0;
  let length, i, next;
  spacing = Math.ceil(spacing);
  if (majorEnd) {
    length = majorEnd - majorStart;
    spacing = length / Math.floor(length / spacing);
  }
  next = start;
  while (next < 0) {
    count++;
    next = Math.round(start + count * spacing);
  }
  for (i = Math.max(start, 0); i < end; i++) {
    if (i === next) {
      newTicks.push(ticks[i]);
      count++;
      next = Math.round(start + count * spacing);
    }
  }
}
function getEvenSpacing(arr) {
  const len = arr.length;
  let i, diff;
  if (len < 2) {
    return false;
  }
  for (diff = arr[0], i = 1; i < len; ++i) {
    if (arr[i] - arr[i - 1] !== diff) {
      return false;
    }
  }
  return diff;
}
const reverseAlign = (align) => align === "left" ? "right" : align === "right" ? "left" : align;
const offsetFromEdge = (scale2, edge, offset) => edge === "top" || edge === "left" ? scale2[edge] + offset : scale2[edge] - offset;
const getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);
function sample(arr, numItems) {
  const result = [];
  const increment = arr.length / numItems;
  const len = arr.length;
  let i = 0;
  for (; i < len; i += increment) {
    result.push(arr[Math.floor(i)]);
  }
  return result;
}
function getPixelForGridLine(scale2, index2, offsetGridLines) {
  const length = scale2.ticks.length;
  const validIndex2 = Math.min(index2, length - 1);
  const start = scale2._startPixel;
  const end = scale2._endPixel;
  const epsilon = 1e-6;
  let lineValue = scale2.getPixelForTick(validIndex2);
  let offset;
  if (offsetGridLines) {
    if (length === 1) {
      offset = Math.max(lineValue - start, end - lineValue);
    } else if (index2 === 0) {
      offset = (scale2.getPixelForTick(1) - lineValue) / 2;
    } else {
      offset = (lineValue - scale2.getPixelForTick(validIndex2 - 1)) / 2;
    }
    lineValue += validIndex2 < index2 ? offset : -offset;
    if (lineValue < start - epsilon || lineValue > end + epsilon) {
      return;
    }
  }
  return lineValue;
}
function garbageCollect(caches, length) {
  each(caches, (cache) => {
    const gc2 = cache.gc;
    const gcLen = gc2.length / 2;
    let i;
    if (gcLen > length) {
      for (i = 0; i < gcLen; ++i) {
        delete cache.data[gc2[i]];
      }
      gc2.splice(0, gcLen);
    }
  });
}
function getTickMarkLength(options) {
  return options.drawTicks ? options.tickLength : 0;
}
function getTitleHeight(options, fallback) {
  if (!options.display) {
    return 0;
  }
  const font = toFont(options.font, fallback);
  const padding = toPadding(options.padding);
  const lines = isArray(options.text) ? options.text.length : 1;
  return lines * font.lineHeight + padding.height;
}
function createScaleContext(parent, scale2) {
  return createContext(parent, {
    scale: scale2,
    type: "scale"
  });
}
function createTickContext(parent, index2, tick) {
  return createContext(parent, {
    tick,
    index: index2,
    type: "tick"
  });
}
function titleAlign(align, position, reverse) {
  let ret = _toLeftRightCenter(align);
  if (reverse && position !== "right" || !reverse && position === "right") {
    ret = reverseAlign(ret);
  }
  return ret;
}
function titleArgs(scale2, offset, position, align) {
  const { top, left, bottom, right, chart } = scale2;
  const { chartArea, scales } = chart;
  let rotation = 0;
  let maxWidth, titleX, titleY;
  const height = bottom - top;
  const width = right - left;
  if (scale2.isHorizontal()) {
    titleX = _alignStartEnd(align, left, right);
    if (isObject(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
    } else if (position === "center") {
      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
    } else {
      titleY = offsetFromEdge(scale2, position, offset);
    }
    maxWidth = right - left;
  } else {
    if (isObject(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
    } else if (position === "center") {
      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
    } else {
      titleX = offsetFromEdge(scale2, position, offset);
    }
    titleY = _alignStartEnd(align, bottom, top);
    rotation = position === "left" ? -HALF_PI : HALF_PI;
  }
  return {
    titleX,
    titleY,
    maxWidth,
    rotation
  };
}
class Scale extends Element$1 {
  constructor(cfg) {
    super();
    this.id = cfg.id;
    this.type = cfg.type;
    this.options = void 0;
    this.ctx = cfg.ctx;
    this.chart = cfg.chart;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    this.maxWidth = void 0;
    this.maxHeight = void 0;
    this.paddingTop = void 0;
    this.paddingBottom = void 0;
    this.paddingLeft = void 0;
    this.paddingRight = void 0;
    this.axis = void 0;
    this.labelRotation = void 0;
    this.min = void 0;
    this.max = void 0;
    this._range = void 0;
    this.ticks = [];
    this._gridLineItems = null;
    this._labelItems = null;
    this._labelSizes = null;
    this._length = 0;
    this._maxLength = 0;
    this._longestTextCache = {};
    this._startPixel = void 0;
    this._endPixel = void 0;
    this._reversePixels = false;
    this._userMax = void 0;
    this._userMin = void 0;
    this._suggestedMax = void 0;
    this._suggestedMin = void 0;
    this._ticksLength = 0;
    this._borderValue = 0;
    this._cache = {};
    this._dataLimitsCached = false;
    this.$context = void 0;
  }
  init(options) {
    this.options = options.setContext(this.getContext());
    this.axis = options.axis;
    this._userMin = this.parse(options.min);
    this._userMax = this.parse(options.max);
    this._suggestedMin = this.parse(options.suggestedMin);
    this._suggestedMax = this.parse(options.suggestedMax);
  }
  parse(raw, index2) {
    return raw;
  }
  getUserBounds() {
    let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;
    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
    return {
      min: finiteOrDefault(_userMin, _suggestedMin),
      max: finiteOrDefault(_userMax, _suggestedMax),
      minDefined: isNumberFinite(_userMin),
      maxDefined: isNumberFinite(_userMax)
    };
  }
  getMinMax(canStack) {
    let { min, max, minDefined, maxDefined } = this.getUserBounds();
    let range;
    if (minDefined && maxDefined) {
      return {
        min,
        max
      };
    }
    const metas = this.getMatchingVisibleMetas();
    for (let i = 0, ilen = metas.length; i < ilen; ++i) {
      range = metas[i].controller.getMinMax(this, canStack);
      if (!minDefined) {
        min = Math.min(min, range.min);
      }
      if (!maxDefined) {
        max = Math.max(max, range.max);
      }
    }
    min = maxDefined && min > max ? max : min;
    max = minDefined && min > max ? min : max;
    return {
      min: finiteOrDefault(min, finiteOrDefault(max, min)),
      max: finiteOrDefault(max, finiteOrDefault(min, max))
    };
  }
  getPadding() {
    return {
      left: this.paddingLeft || 0,
      top: this.paddingTop || 0,
      right: this.paddingRight || 0,
      bottom: this.paddingBottom || 0
    };
  }
  getTicks() {
    return this.ticks;
  }
  getLabels() {
    const data = this.chart.data;
    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
  }
  getLabelItems(chartArea = this.chart.chartArea) {
    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
    return items;
  }
  beforeLayout() {
    this._cache = {};
    this._dataLimitsCached = false;
  }
  beforeUpdate() {
    callback(this.options.beforeUpdate, [
      this
    ]);
  }
  update(maxWidth, maxHeight, margins) {
    const { beginAtZero, grace, ticks: tickOpts } = this.options;
    const sampleSize = tickOpts.sampleSize;
    this.beforeUpdate();
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins = Object.assign({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, margins);
    this.ticks = null;
    this._labelSizes = null;
    this._gridLineItems = null;
    this._labelItems = null;
    this.beforeSetDimensions();
    this.setDimensions();
    this.afterSetDimensions();
    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
    if (!this._dataLimitsCached) {
      this.beforeDataLimits();
      this.determineDataLimits();
      this.afterDataLimits();
      this._range = _addGrace(this, grace, beginAtZero);
      this._dataLimitsCached = true;
    }
    this.beforeBuildTicks();
    this.ticks = this.buildTicks() || [];
    this.afterBuildTicks();
    const samplingEnabled = sampleSize < this.ticks.length;
    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
    this.configure();
    this.beforeCalculateLabelRotation();
    this.calculateLabelRotation();
    this.afterCalculateLabelRotation();
    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
      this.ticks = autoSkip(this, this.ticks);
      this._labelSizes = null;
      this.afterAutoSkip();
    }
    if (samplingEnabled) {
      this._convertTicksToLabels(this.ticks);
    }
    this.beforeFit();
    this.fit();
    this.afterFit();
    this.afterUpdate();
  }
  configure() {
    let reversePixels = this.options.reverse;
    let startPixel, endPixel;
    if (this.isHorizontal()) {
      startPixel = this.left;
      endPixel = this.right;
    } else {
      startPixel = this.top;
      endPixel = this.bottom;
      reversePixels = !reversePixels;
    }
    this._startPixel = startPixel;
    this._endPixel = endPixel;
    this._reversePixels = reversePixels;
    this._length = endPixel - startPixel;
    this._alignToPixels = this.options.alignToPixels;
  }
  afterUpdate() {
    callback(this.options.afterUpdate, [
      this
    ]);
  }
  beforeSetDimensions() {
    callback(this.options.beforeSetDimensions, [
      this
    ]);
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = 0;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = 0;
      this.bottom = this.height;
    }
    this.paddingLeft = 0;
    this.paddingTop = 0;
    this.paddingRight = 0;
    this.paddingBottom = 0;
  }
  afterSetDimensions() {
    callback(this.options.afterSetDimensions, [
      this
    ]);
  }
  _callHooks(name) {
    this.chart.notifyPlugins(name, this.getContext());
    callback(this.options[name], [
      this
    ]);
  }
  beforeDataLimits() {
    this._callHooks("beforeDataLimits");
  }
  determineDataLimits() {
  }
  afterDataLimits() {
    this._callHooks("afterDataLimits");
  }
  beforeBuildTicks() {
    this._callHooks("beforeBuildTicks");
  }
  buildTicks() {
    return [];
  }
  afterBuildTicks() {
    this._callHooks("afterBuildTicks");
  }
  beforeTickToLabelConversion() {
    callback(this.options.beforeTickToLabelConversion, [
      this
    ]);
  }
  generateTickLabels(ticks) {
    const tickOpts = this.options.ticks;
    let i, ilen, tick;
    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      tick = ticks[i];
      tick.label = callback(tickOpts.callback, [
        tick.value,
        i,
        ticks
      ], this);
    }
  }
  afterTickToLabelConversion() {
    callback(this.options.afterTickToLabelConversion, [
      this
    ]);
  }
  beforeCalculateLabelRotation() {
    callback(this.options.beforeCalculateLabelRotation, [
      this
    ]);
  }
  calculateLabelRotation() {
    const options = this.options;
    const tickOpts = options.ticks;
    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);
    const minRotation = tickOpts.minRotation || 0;
    const maxRotation = tickOpts.maxRotation;
    let labelRotation = minRotation;
    let tickWidth, maxHeight, maxLabelDiagonal;
    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
      this.labelRotation = minRotation;
      return;
    }
    const labelSizes = this._getLabelSizes();
    const maxLabelWidth = labelSizes.widest.width;
    const maxLabelHeight = labelSizes.highest.height;
    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
    if (maxLabelWidth + 6 > tickWidth) {
      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));
      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
    }
    this.labelRotation = labelRotation;
  }
  afterCalculateLabelRotation() {
    callback(this.options.afterCalculateLabelRotation, [
      this
    ]);
  }
  afterAutoSkip() {
  }
  beforeFit() {
    callback(this.options.beforeFit, [
      this
    ]);
  }
  fit() {
    const minSize = {
      width: 0,
      height: 0
    };
    const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;
    const display = this._isVisible();
    const isHorizontal = this.isHorizontal();
    if (display) {
      const titleHeight = getTitleHeight(titleOpts, chart.options.font);
      if (isHorizontal) {
        minSize.width = this.maxWidth;
        minSize.height = getTickMarkLength(gridOpts) + titleHeight;
      } else {
        minSize.height = this.maxHeight;
        minSize.width = getTickMarkLength(gridOpts) + titleHeight;
      }
      if (tickOpts.display && this.ticks.length) {
        const { first, last, widest, highest } = this._getLabelSizes();
        const tickPadding = tickOpts.padding * 2;
        const angleRadians = toRadians(this.labelRotation);
        const cos = Math.cos(angleRadians);
        const sin = Math.sin(angleRadians);
        if (isHorizontal) {
          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
        } else {
          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
        }
        this._calculatePadding(first, last, sin, cos);
      }
    }
    this._handleMargins();
    if (isHorizontal) {
      this.width = this._length = chart.width - this._margins.left - this._margins.right;
      this.height = minSize.height;
    } else {
      this.width = minSize.width;
      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
    }
  }
  _calculatePadding(first, last, sin, cos) {
    const { ticks: { align, padding }, position } = this.options;
    const isRotated = this.labelRotation !== 0;
    const labelsBelowTicks = position !== "top" && this.axis === "x";
    if (this.isHorizontal()) {
      const offsetLeft = this.getPixelForTick(0) - this.left;
      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
      let paddingLeft = 0;
      let paddingRight = 0;
      if (isRotated) {
        if (labelsBelowTicks) {
          paddingLeft = cos * first.width;
          paddingRight = sin * last.height;
        } else {
          paddingLeft = sin * first.height;
          paddingRight = cos * last.width;
        }
      } else if (align === "start") {
        paddingRight = last.width;
      } else if (align === "end") {
        paddingLeft = first.width;
      } else if (align !== "inner") {
        paddingLeft = first.width / 2;
        paddingRight = last.width / 2;
      }
      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
    } else {
      let paddingTop = last.height / 2;
      let paddingBottom = first.height / 2;
      if (align === "start") {
        paddingTop = 0;
        paddingBottom = first.height;
      } else if (align === "end") {
        paddingTop = last.height;
        paddingBottom = 0;
      }
      this.paddingTop = paddingTop + padding;
      this.paddingBottom = paddingBottom + padding;
    }
  }
  _handleMargins() {
    if (this._margins) {
      this._margins.left = Math.max(this.paddingLeft, this._margins.left);
      this._margins.top = Math.max(this.paddingTop, this._margins.top);
      this._margins.right = Math.max(this.paddingRight, this._margins.right);
      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
    }
  }
  afterFit() {
    callback(this.options.afterFit, [
      this
    ]);
  }
  isHorizontal() {
    const { axis, position } = this.options;
    return position === "top" || position === "bottom" || axis === "x";
  }
  isFullSize() {
    return this.options.fullSize;
  }
  _convertTicksToLabels(ticks) {
    this.beforeTickToLabelConversion();
    this.generateTickLabels(ticks);
    let i, ilen;
    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      if (isNullOrUndef(ticks[i].label)) {
        ticks.splice(i, 1);
        ilen--;
        i--;
      }
    }
    this.afterTickToLabelConversion();
  }
  _getLabelSizes() {
    let labelSizes = this._labelSizes;
    if (!labelSizes) {
      const sampleSize = this.options.ticks.sampleSize;
      let ticks = this.ticks;
      if (sampleSize < ticks.length) {
        ticks = sample(ticks, sampleSize);
      }
      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
    }
    return labelSizes;
  }
  _computeLabelSizes(ticks, length, maxTicksLimit) {
    const { ctx, _longestTextCache: caches } = this;
    const widths = [];
    const heights = [];
    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));
    let widestLabelSize = 0;
    let highestLabelSize = 0;
    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
    for (i = 0; i < length; i += increment) {
      label = ticks[i].label;
      tickFont = this._resolveTickFontOptions(i);
      ctx.font = fontString = tickFont.string;
      cache = caches[fontString] = caches[fontString] || {
        data: {},
        gc: []
      };
      lineHeight = tickFont.lineHeight;
      width = height = 0;
      if (!isNullOrUndef(label) && !isArray(label)) {
        width = _measureText(ctx, cache.data, cache.gc, width, label);
        height = lineHeight;
      } else if (isArray(label)) {
        for (j = 0, jlen = label.length; j < jlen; ++j) {
          nestedLabel = label[j];
          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
            height += lineHeight;
          }
        }
      }
      widths.push(width);
      heights.push(height);
      widestLabelSize = Math.max(width, widestLabelSize);
      highestLabelSize = Math.max(height, highestLabelSize);
    }
    garbageCollect(caches, length);
    const widest = widths.indexOf(widestLabelSize);
    const highest = heights.indexOf(highestLabelSize);
    const valueAt = (idx) => ({
      width: widths[idx] || 0,
      height: heights[idx] || 0
    });
    return {
      first: valueAt(0),
      last: valueAt(length - 1),
      widest: valueAt(widest),
      highest: valueAt(highest),
      widths,
      heights
    };
  }
  getLabelForValue(value) {
    return value;
  }
  getPixelForValue(value, index2) {
    return NaN;
  }
  getValueForPixel(pixel) {
  }
  getPixelForTick(index2) {
    const ticks = this.ticks;
    if (index2 < 0 || index2 > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index2].value);
  }
  getPixelForDecimal(decimal) {
    if (this._reversePixels) {
      decimal = 1 - decimal;
    }
    const pixel = this._startPixel + decimal * this._length;
    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
  }
  getDecimalForPixel(pixel) {
    const decimal = (pixel - this._startPixel) / this._length;
    return this._reversePixels ? 1 - decimal : decimal;
  }
  getBasePixel() {
    return this.getPixelForValue(this.getBaseValue());
  }
  getBaseValue() {
    const { min, max } = this;
    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
  }
  getContext(index2) {
    const ticks = this.ticks || [];
    if (index2 >= 0 && index2 < ticks.length) {
      const tick = ticks[index2];
      return tick.$context || (tick.$context = createTickContext(this.getContext(), index2, tick));
    }
    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
  }
  _tickSize() {
    const optionTicks = this.options.ticks;
    const rot = toRadians(this.labelRotation);
    const cos = Math.abs(Math.cos(rot));
    const sin = Math.abs(Math.sin(rot));
    const labelSizes = this._getLabelSizes();
    const padding = optionTicks.autoSkipPadding || 0;
    const w2 = labelSizes ? labelSizes.widest.width + padding : 0;
    const h3 = labelSizes ? labelSizes.highest.height + padding : 0;
    return this.isHorizontal() ? h3 * cos > w2 * sin ? w2 / cos : h3 / sin : h3 * sin < w2 * cos ? h3 / cos : w2 / sin;
  }
  _isVisible() {
    const display = this.options.display;
    if (display !== "auto") {
      return !!display;
    }
    return this.getMatchingVisibleMetas().length > 0;
  }
  _computeGridLineItems(chartArea) {
    const axis = this.axis;
    const chart = this.chart;
    const options = this.options;
    const { grid, position, border } = options;
    const offset = grid.offset;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const ticksLength = ticks.length + (offset ? 1 : 0);
    const tl2 = getTickMarkLength(grid);
    const items = [];
    const borderOpts = border.setContext(this.getContext());
    const axisWidth = borderOpts.display ? borderOpts.width : 0;
    const axisHalfWidth = axisWidth / 2;
    const alignBorderValue = function(pixel) {
      return _alignPixel(chart, pixel, axisWidth);
    };
    let borderValue, i, lineValue, alignedLineValue;
    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
    if (position === "top") {
      borderValue = alignBorderValue(this.bottom);
      ty1 = this.bottom - tl2;
      ty2 = borderValue - axisHalfWidth;
      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
      y2 = chartArea.bottom;
    } else if (position === "bottom") {
      borderValue = alignBorderValue(this.top);
      y1 = chartArea.top;
      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
      ty1 = borderValue + axisHalfWidth;
      ty2 = this.top + tl2;
    } else if (position === "left") {
      borderValue = alignBorderValue(this.right);
      tx1 = this.right - tl2;
      tx2 = borderValue - axisHalfWidth;
      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
      x2 = chartArea.right;
    } else if (position === "right") {
      borderValue = alignBorderValue(this.left);
      x1 = chartArea.left;
      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
      tx1 = borderValue + axisHalfWidth;
      tx2 = this.left + tl2;
    } else if (axis === "x") {
      if (position === "center") {
        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      y1 = chartArea.top;
      y2 = chartArea.bottom;
      ty1 = borderValue + axisHalfWidth;
      ty2 = ty1 + tl2;
    } else if (axis === "y") {
      if (position === "center") {
        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      tx1 = borderValue - axisHalfWidth;
      tx2 = tx1 - tl2;
      x1 = chartArea.left;
      x2 = chartArea.right;
    }
    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);
    const step = Math.max(1, Math.ceil(ticksLength / limit));
    for (i = 0; i < ticksLength; i += step) {
      const context = this.getContext(i);
      const optsAtIndex = grid.setContext(context);
      const optsAtIndexBorder = border.setContext(context);
      const lineWidth = optsAtIndex.lineWidth;
      const lineColor = optsAtIndex.color;
      const borderDash = optsAtIndexBorder.dash || [];
      const borderDashOffset = optsAtIndexBorder.dashOffset;
      const tickWidth = optsAtIndex.tickWidth;
      const tickColor = optsAtIndex.tickColor;
      const tickBorderDash = optsAtIndex.tickBorderDash || [];
      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
      lineValue = getPixelForGridLine(this, i, offset);
      if (lineValue === void 0) {
        continue;
      }
      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
      if (isHorizontal) {
        tx1 = tx2 = x1 = x2 = alignedLineValue;
      } else {
        ty1 = ty2 = y1 = y2 = alignedLineValue;
      }
      items.push({
        tx1,
        ty1,
        tx2,
        ty2,
        x1,
        y1,
        x2,
        y2,
        width: lineWidth,
        color: lineColor,
        borderDash,
        borderDashOffset,
        tickWidth,
        tickColor,
        tickBorderDash,
        tickBorderDashOffset
      });
    }
    this._ticksLength = ticksLength;
    this._borderValue = borderValue;
    return items;
  }
  _computeLabelItems(chartArea) {
    const axis = this.axis;
    const options = this.options;
    const { position, ticks: optionTicks } = options;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const { align, crossAlign, padding, mirror } = optionTicks;
    const tl2 = getTickMarkLength(options.grid);
    const tickAndPadding = tl2 + padding;
    const hTickAndPadding = mirror ? -padding : tickAndPadding;
    const rotation = -toRadians(this.labelRotation);
    const items = [];
    let i, ilen, tick, label, x2, y2, textAlign, pixel, font, lineHeight, lineCount, textOffset;
    let textBaseline = "middle";
    if (position === "top") {
      y2 = this.bottom - hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position === "bottom") {
      y2 = this.top + hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position === "left") {
      const ret = this._getYAxisLabelAlignment(tl2);
      textAlign = ret.textAlign;
      x2 = ret.x;
    } else if (position === "right") {
      const ret = this._getYAxisLabelAlignment(tl2);
      textAlign = ret.textAlign;
      x2 = ret.x;
    } else if (axis === "x") {
      if (position === "center") {
        y2 = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        y2 = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
      }
      textAlign = this._getXAxisLabelAlignment();
    } else if (axis === "y") {
      if (position === "center") {
        x2 = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        x2 = this.chart.scales[positionAxisID].getPixelForValue(value);
      }
      textAlign = this._getYAxisLabelAlignment(tl2).textAlign;
    }
    if (axis === "y") {
      if (align === "start") {
        textBaseline = "top";
      } else if (align === "end") {
        textBaseline = "bottom";
      }
    }
    const labelSizes = this._getLabelSizes();
    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      label = tick.label;
      const optsAtIndex = optionTicks.setContext(this.getContext(i));
      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
      font = this._resolveTickFontOptions(i);
      lineHeight = font.lineHeight;
      lineCount = isArray(label) ? label.length : 1;
      const halfCount = lineCount / 2;
      const color2 = optsAtIndex.color;
      const strokeColor = optsAtIndex.textStrokeColor;
      const strokeWidth = optsAtIndex.textStrokeWidth;
      let tickTextAlign = textAlign;
      if (isHorizontal) {
        x2 = pixel;
        if (textAlign === "inner") {
          if (i === ilen - 1) {
            tickTextAlign = !this.options.reverse ? "right" : "left";
          } else if (i === 0) {
            tickTextAlign = !this.options.reverse ? "left" : "right";
          } else {
            tickTextAlign = "center";
          }
        }
        if (position === "top") {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = -lineCount * lineHeight + lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
          } else {
            textOffset = -labelSizes.highest.height + lineHeight / 2;
          }
        } else {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
          } else {
            textOffset = labelSizes.highest.height - lineCount * lineHeight;
          }
        }
        if (mirror) {
          textOffset *= -1;
        }
        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {
          x2 += lineHeight / 2 * Math.sin(rotation);
        }
      } else {
        y2 = pixel;
        textOffset = (1 - lineCount) * lineHeight / 2;
      }
      let backdrop;
      if (optsAtIndex.showLabelBackdrop) {
        const labelPadding = toPadding(optsAtIndex.backdropPadding);
        const height = labelSizes.heights[i];
        const width = labelSizes.widths[i];
        let top = textOffset - labelPadding.top;
        let left = 0 - labelPadding.left;
        switch (textBaseline) {
          case "middle":
            top -= height / 2;
            break;
          case "bottom":
            top -= height;
            break;
        }
        switch (textAlign) {
          case "center":
            left -= width / 2;
            break;
          case "right":
            left -= width;
            break;
          case "inner":
            if (i === ilen - 1) {
              left -= width;
            } else if (i > 0) {
              left -= width / 2;
            }
            break;
        }
        backdrop = {
          left,
          top,
          width: width + labelPadding.width,
          height: height + labelPadding.height,
          color: optsAtIndex.backdropColor
        };
      }
      items.push({
        label,
        font,
        textOffset,
        options: {
          rotation,
          color: color2,
          strokeColor,
          strokeWidth,
          textAlign: tickTextAlign,
          textBaseline,
          translation: [
            x2,
            y2
          ],
          backdrop
        }
      });
    }
    return items;
  }
  _getXAxisLabelAlignment() {
    const { position, ticks } = this.options;
    const rotation = -toRadians(this.labelRotation);
    if (rotation) {
      return position === "top" ? "left" : "right";
    }
    let align = "center";
    if (ticks.align === "start") {
      align = "left";
    } else if (ticks.align === "end") {
      align = "right";
    } else if (ticks.align === "inner") {
      align = "inner";
    }
    return align;
  }
  _getYAxisLabelAlignment(tl2) {
    const { position, ticks: { crossAlign, mirror, padding } } = this.options;
    const labelSizes = this._getLabelSizes();
    const tickAndPadding = tl2 + padding;
    const widest = labelSizes.widest.width;
    let textAlign;
    let x2;
    if (position === "left") {
      if (mirror) {
        x2 = this.right + padding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 += widest / 2;
        } else {
          textAlign = "right";
          x2 += widest;
        }
      } else {
        x2 = this.right - tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 -= widest / 2;
        } else {
          textAlign = "left";
          x2 = this.left;
        }
      }
    } else if (position === "right") {
      if (mirror) {
        x2 = this.left + padding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 -= widest / 2;
        } else {
          textAlign = "left";
          x2 -= widest;
        }
      } else {
        x2 = this.left + tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 += widest / 2;
        } else {
          textAlign = "right";
          x2 = this.right;
        }
      }
    } else {
      textAlign = "right";
    }
    return {
      textAlign,
      x: x2
    };
  }
  _computeLabelArea() {
    if (this.options.ticks.mirror) {
      return;
    }
    const chart = this.chart;
    const position = this.options.position;
    if (position === "left" || position === "right") {
      return {
        top: 0,
        left: this.left,
        bottom: chart.height,
        right: this.right
      };
    }
    if (position === "top" || position === "bottom") {
      return {
        top: this.top,
        left: 0,
        bottom: this.bottom,
        right: chart.width
      };
    }
  }
  drawBackground() {
    const { ctx, options: { backgroundColor }, left, top, width, height } = this;
    if (backgroundColor) {
      ctx.save();
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(left, top, width, height);
      ctx.restore();
    }
  }
  getLineWidthForValue(value) {
    const grid = this.options.grid;
    if (!this._isVisible() || !grid.display) {
      return 0;
    }
    const ticks = this.ticks;
    const index2 = ticks.findIndex((t2) => t2.value === value);
    if (index2 >= 0) {
      const opts = grid.setContext(this.getContext(index2));
      return opts.lineWidth;
    }
    return 0;
  }
  drawGrid(chartArea) {
    const grid = this.options.grid;
    const ctx = this.ctx;
    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
    let i, ilen;
    const drawLine = (p1, p2, style) => {
      if (!style.width || !style.color) {
        return;
      }
      ctx.save();
      ctx.lineWidth = style.width;
      ctx.strokeStyle = style.color;
      ctx.setLineDash(style.borderDash || []);
      ctx.lineDashOffset = style.borderDashOffset;
      ctx.beginPath();
      ctx.moveTo(p1.x, p1.y);
      ctx.lineTo(p2.x, p2.y);
      ctx.stroke();
      ctx.restore();
    };
    if (grid.display) {
      for (i = 0, ilen = items.length; i < ilen; ++i) {
        const item = items[i];
        if (grid.drawOnChartArea) {
          drawLine({
            x: item.x1,
            y: item.y1
          }, {
            x: item.x2,
            y: item.y2
          }, item);
        }
        if (grid.drawTicks) {
          drawLine({
            x: item.tx1,
            y: item.ty1
          }, {
            x: item.tx2,
            y: item.ty2
          }, {
            color: item.tickColor,
            width: item.tickWidth,
            borderDash: item.tickBorderDash,
            borderDashOffset: item.tickBorderDashOffset
          });
        }
      }
    }
  }
  drawBorder() {
    const { chart, ctx, options: { border, grid } } = this;
    const borderOpts = border.setContext(this.getContext());
    const axisWidth = border.display ? borderOpts.width : 0;
    if (!axisWidth) {
      return;
    }
    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
    const borderValue = this._borderValue;
    let x1, x2, y1, y2;
    if (this.isHorizontal()) {
      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
      y1 = y2 = borderValue;
    } else {
      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
      x1 = x2 = borderValue;
    }
    ctx.save();
    ctx.lineWidth = borderOpts.width;
    ctx.strokeStyle = borderOpts.color;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
    ctx.restore();
  }
  drawLabels(chartArea) {
    const optionTicks = this.options.ticks;
    if (!optionTicks.display) {
      return;
    }
    const ctx = this.ctx;
    const area = this._computeLabelArea();
    if (area) {
      clipArea(ctx, area);
    }
    const items = this.getLabelItems(chartArea);
    for (const item of items) {
      const renderTextOptions = item.options;
      const tickFont = item.font;
      const label = item.label;
      const y2 = item.textOffset;
      renderText(ctx, label, 0, y2, tickFont, renderTextOptions);
    }
    if (area) {
      unclipArea(ctx);
    }
  }
  drawTitle() {
    const { ctx, options: { position, title, reverse } } = this;
    if (!title.display) {
      return;
    }
    const font = toFont(title.font);
    const padding = toPadding(title.padding);
    const align = title.align;
    let offset = font.lineHeight / 2;
    if (position === "bottom" || position === "center" || isObject(position)) {
      offset += padding.bottom;
      if (isArray(title.text)) {
        offset += font.lineHeight * (title.text.length - 1);
      }
    } else {
      offset += padding.top;
    }
    const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset, position, align);
    renderText(ctx, title.text, 0, 0, font, {
      color: title.color,
      maxWidth,
      rotation,
      textAlign: titleAlign(align, position, reverse),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
  draw(chartArea) {
    if (!this._isVisible()) {
      return;
    }
    this.drawBackground();
    this.drawGrid(chartArea);
    this.drawBorder();
    this.drawTitle();
    this.drawLabels(chartArea);
  }
  _layers() {
    const opts = this.options;
    const tz = opts.ticks && opts.ticks.z || 0;
    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);
    const bz = valueOrDefault(opts.border && opts.border.z, 0);
    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
      return [
        {
          z: tz,
          draw: (chartArea) => {
            this.draw(chartArea);
          }
        }
      ];
    }
    return [
      {
        z: gz,
        draw: (chartArea) => {
          this.drawBackground();
          this.drawGrid(chartArea);
          this.drawTitle();
        }
      },
      {
        z: bz,
        draw: () => {
          this.drawBorder();
        }
      },
      {
        z: tz,
        draw: (chartArea) => {
          this.drawLabels(chartArea);
        }
      }
    ];
  }
  getMatchingVisibleMetas(type) {
    const metas = this.chart.getSortedVisibleDatasetMetas();
    const axisID = this.axis + "AxisID";
    const result = [];
    let i, ilen;
    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      const meta = metas[i];
      if (meta[axisID] === this.id && (!type || meta.type === type)) {
        result.push(meta);
      }
    }
    return result;
  }
  _resolveTickFontOptions(index2) {
    const opts = this.options.ticks.setContext(this.getContext(index2));
    return toFont(opts.font);
  }
  _maxDigits() {
    const fontSize = this._resolveTickFontOptions(0).lineHeight;
    return (this.isHorizontal() ? this.width : this.height) / fontSize;
  }
}
class TypedRegistry {
  constructor(type, scope, override) {
    this.type = type;
    this.scope = scope;
    this.override = override;
    this.items = /* @__PURE__ */ Object.create(null);
  }
  isForType(type) {
    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
  }
  register(item) {
    const proto = Object.getPrototypeOf(item);
    let parentScope;
    if (isIChartComponent(proto)) {
      parentScope = this.register(proto);
    }
    const items = this.items;
    const id2 = item.id;
    const scope = this.scope + "." + id2;
    if (!id2) {
      throw new Error("class does not have id: " + item);
    }
    if (id2 in items) {
      return scope;
    }
    items[id2] = item;
    registerDefaults(item, scope, parentScope);
    if (this.override) {
      defaults.override(item.id, item.overrides);
    }
    return scope;
  }
  get(id2) {
    return this.items[id2];
  }
  unregister(item) {
    const items = this.items;
    const id2 = item.id;
    const scope = this.scope;
    if (id2 in items) {
      delete items[id2];
    }
    if (scope && id2 in defaults[scope]) {
      delete defaults[scope][id2];
      if (this.override) {
        delete overrides[id2];
      }
    }
  }
}
function registerDefaults(item, scope, parentScope) {
  const itemDefaults = merge(/* @__PURE__ */ Object.create(null), [
    parentScope ? defaults.get(parentScope) : {},
    defaults.get(scope),
    item.defaults
  ]);
  defaults.set(scope, itemDefaults);
  if (item.defaultRoutes) {
    routeDefaults(scope, item.defaultRoutes);
  }
  if (item.descriptors) {
    defaults.describe(scope, item.descriptors);
  }
}
function routeDefaults(scope, routes) {
  Object.keys(routes).forEach((property) => {
    const propertyParts = property.split(".");
    const sourceName = propertyParts.pop();
    const sourceScope = [
      scope
    ].concat(propertyParts).join(".");
    const parts = routes[property].split(".");
    const targetName = parts.pop();
    const targetScope = parts.join(".");
    defaults.route(sourceScope, sourceName, targetScope, targetName);
  });
}
function isIChartComponent(proto) {
  return "id" in proto && "defaults" in proto;
}
class Registry {
  constructor() {
    this.controllers = new TypedRegistry(DatasetController, "datasets", true);
    this.elements = new TypedRegistry(Element$1, "elements");
    this.plugins = new TypedRegistry(Object, "plugins");
    this.scales = new TypedRegistry(Scale, "scales");
    this._typedRegistries = [
      this.controllers,
      this.scales,
      this.elements
    ];
  }
  add(...args) {
    this._each("register", args);
  }
  remove(...args) {
    this._each("unregister", args);
  }
  addControllers(...args) {
    this._each("register", args, this.controllers);
  }
  addElements(...args) {
    this._each("register", args, this.elements);
  }
  addPlugins(...args) {
    this._each("register", args, this.plugins);
  }
  addScales(...args) {
    this._each("register", args, this.scales);
  }
  getController(id2) {
    return this._get(id2, this.controllers, "controller");
  }
  getElement(id2) {
    return this._get(id2, this.elements, "element");
  }
  getPlugin(id2) {
    return this._get(id2, this.plugins, "plugin");
  }
  getScale(id2) {
    return this._get(id2, this.scales, "scale");
  }
  removeControllers(...args) {
    this._each("unregister", args, this.controllers);
  }
  removeElements(...args) {
    this._each("unregister", args, this.elements);
  }
  removePlugins(...args) {
    this._each("unregister", args, this.plugins);
  }
  removeScales(...args) {
    this._each("unregister", args, this.scales);
  }
  _each(method, args, typedRegistry) {
    [
      ...args
    ].forEach((arg) => {
      const reg = typedRegistry || this._getRegistryForType(arg);
      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {
        this._exec(method, reg, arg);
      } else {
        each(arg, (item) => {
          const itemReg = typedRegistry || this._getRegistryForType(item);
          this._exec(method, itemReg, item);
        });
      }
    });
  }
  _exec(method, registry2, component) {
    const camelMethod = _capitalize(method);
    callback(component["before" + camelMethod], [], component);
    registry2[method](component);
    callback(component["after" + camelMethod], [], component);
  }
  _getRegistryForType(type) {
    for (let i = 0; i < this._typedRegistries.length; i++) {
      const reg = this._typedRegistries[i];
      if (reg.isForType(type)) {
        return reg;
      }
    }
    return this.plugins;
  }
  _get(id2, typedRegistry, type) {
    const item = typedRegistry.get(id2);
    if (item === void 0) {
      throw new Error('"' + id2 + '" is not a registered ' + type + ".");
    }
    return item;
  }
}
var registry = /* @__PURE__ */ new Registry();
class PluginService {
  constructor() {
    this._init = [];
  }
  notify(chart, hook, args, filter2) {
    if (hook === "beforeInit") {
      this._init = this._createDescriptors(chart, true);
      this._notify(this._init, chart, "install");
    }
    const descriptors2 = filter2 ? this._descriptors(chart).filter(filter2) : this._descriptors(chart);
    const result = this._notify(descriptors2, chart, hook, args);
    if (hook === "afterDestroy") {
      this._notify(descriptors2, chart, "stop");
      this._notify(this._init, chart, "uninstall");
    }
    return result;
  }
  _notify(descriptors2, chart, hook, args) {
    args = args || {};
    for (const descriptor of descriptors2) {
      const plugin = descriptor.plugin;
      const method = plugin[hook];
      const params = [
        chart,
        args,
        descriptor.options
      ];
      if (callback(method, params, plugin) === false && args.cancelable) {
        return false;
      }
    }
    return true;
  }
  invalidate() {
    if (!isNullOrUndef(this._cache)) {
      this._oldCache = this._cache;
      this._cache = void 0;
    }
  }
  _descriptors(chart) {
    if (this._cache) {
      return this._cache;
    }
    const descriptors2 = this._cache = this._createDescriptors(chart);
    this._notifyStateChanges(chart);
    return descriptors2;
  }
  _createDescriptors(chart, all) {
    const config = chart && chart.config;
    const options = valueOrDefault(config.options && config.options.plugins, {});
    const plugins = allPlugins(config);
    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
  }
  _notifyStateChanges(chart) {
    const previousDescriptors = this._oldCache || [];
    const descriptors2 = this._cache;
    const diff = (a, b2) => a.filter((x2) => !b2.some((y2) => x2.plugin.id === y2.plugin.id));
    this._notify(diff(previousDescriptors, descriptors2), chart, "stop");
    this._notify(diff(descriptors2, previousDescriptors), chart, "start");
  }
}
function allPlugins(config) {
  const localIds = {};
  const plugins = [];
  const keys = Object.keys(registry.plugins.items);
  for (let i = 0; i < keys.length; i++) {
    plugins.push(registry.getPlugin(keys[i]));
  }
  const local = config.plugins || [];
  for (let i = 0; i < local.length; i++) {
    const plugin = local[i];
    if (plugins.indexOf(plugin) === -1) {
      plugins.push(plugin);
      localIds[plugin.id] = true;
    }
  }
  return {
    plugins,
    localIds
  };
}
function getOpts(options, all) {
  if (!all && options === false) {
    return null;
  }
  if (options === true) {
    return {};
  }
  return options;
}
function createDescriptors(chart, { plugins, localIds }, options, all) {
  const result = [];
  const context = chart.getContext();
  for (const plugin of plugins) {
    const id2 = plugin.id;
    const opts = getOpts(options[id2], all);
    if (opts === null) {
      continue;
    }
    result.push({
      plugin,
      options: pluginOpts(chart.config, {
        plugin,
        local: localIds[id2]
      }, opts, context)
    });
  }
  return result;
}
function pluginOpts(config, { plugin, local }, opts, context) {
  const keys = config.pluginScopeKeys(plugin);
  const scopes = config.getOptionScopes(opts, keys);
  if (local && plugin.defaults) {
    scopes.push(plugin.defaults);
  }
  return config.createResolver(scopes, context, [
    ""
  ], {
    scriptable: false,
    indexable: false,
    allKeys: true
  });
}
function getIndexAxis(type, options) {
  const datasetDefaults = defaults.datasets[type] || {};
  const datasetOptions = (options.datasets || {})[type] || {};
  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || "x";
}
function getAxisFromDefaultScaleID(id2, indexAxis) {
  let axis = id2;
  if (id2 === "_index_") {
    axis = indexAxis;
  } else if (id2 === "_value_") {
    axis = indexAxis === "x" ? "y" : "x";
  }
  return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
  return axis === indexAxis ? "_index_" : "_value_";
}
function idMatchesAxis(id2) {
  if (id2 === "x" || id2 === "y" || id2 === "r") {
    return id2;
  }
}
function axisFromPosition(position) {
  if (position === "top" || position === "bottom") {
    return "x";
  }
  if (position === "left" || position === "right") {
    return "y";
  }
}
function determineAxis(id2, ...scaleOptions) {
  if (idMatchesAxis(id2)) {
    return id2;
  }
  for (const opts of scaleOptions) {
    const axis = opts.axis || axisFromPosition(opts.position) || id2.length > 1 && idMatchesAxis(id2[0].toLowerCase());
    if (axis) {
      return axis;
    }
  }
  throw new Error(`Cannot determine type of '${id2}' axis. Please provide 'axis' or 'position' option.`);
}
function getAxisFromDataset(id2, axis, dataset) {
  if (dataset[axis + "AxisID"] === id2) {
    return {
      axis
    };
  }
}
function retrieveAxisFromDatasets(id2, config) {
  if (config.data && config.data.datasets) {
    const boundDs = config.data.datasets.filter((d2) => d2.xAxisID === id2 || d2.yAxisID === id2);
    if (boundDs.length) {
      return getAxisFromDataset(id2, "x", boundDs[0]) || getAxisFromDataset(id2, "y", boundDs[0]);
    }
  }
  return {};
}
function mergeScaleConfig(config, options) {
  const chartDefaults = overrides[config.type] || {
    scales: {}
  };
  const configScales = options.scales || {};
  const chartIndexAxis = getIndexAxis(config.type, options);
  const scales = /* @__PURE__ */ Object.create(null);
  Object.keys(configScales).forEach((id2) => {
    const scaleConf = configScales[id2];
    if (!isObject(scaleConf)) {
      return console.error(`Invalid scale configuration for scale: ${id2}`);
    }
    if (scaleConf._proxy) {
      return console.warn(`Ignoring resolver passed as options for scale: ${id2}`);
    }
    const axis = determineAxis(id2, scaleConf, retrieveAxisFromDatasets(id2, config), defaults.scales[scaleConf.type]);
    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
    const defaultScaleOptions = chartDefaults.scales || {};
    scales[id2] = mergeIf(/* @__PURE__ */ Object.create(null), [
      {
        axis
      },
      scaleConf,
      defaultScaleOptions[axis],
      defaultScaleOptions[defaultId]
    ]);
  });
  config.data.datasets.forEach((dataset) => {
    const type = dataset.type || config.type;
    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
    const datasetDefaults = overrides[type] || {};
    const defaultScaleOptions = datasetDefaults.scales || {};
    Object.keys(defaultScaleOptions).forEach((defaultID) => {
      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
      const id2 = dataset[axis + "AxisID"] || axis;
      scales[id2] = scales[id2] || /* @__PURE__ */ Object.create(null);
      mergeIf(scales[id2], [
        {
          axis
        },
        configScales[id2],
        defaultScaleOptions[defaultID]
      ]);
    });
  });
  Object.keys(scales).forEach((key) => {
    const scale2 = scales[key];
    mergeIf(scale2, [
      defaults.scales[scale2.type],
      defaults.scale
    ]);
  });
  return scales;
}
function initOptions(config) {
  const options = config.options || (config.options = {});
  options.plugins = valueOrDefault(options.plugins, {});
  options.scales = mergeScaleConfig(config, options);
}
function initData(data) {
  data = data || {};
  data.datasets = data.datasets || [];
  data.labels = data.labels || [];
  return data;
}
function initConfig(config) {
  config = config || {};
  config.data = initData(config.data);
  initOptions(config);
  return config;
}
const keyCache = /* @__PURE__ */ new Map();
const keysCached = /* @__PURE__ */ new Set();
function cachedKeys(cacheKey, generate) {
  let keys = keyCache.get(cacheKey);
  if (!keys) {
    keys = generate();
    keyCache.set(cacheKey, keys);
    keysCached.add(keys);
  }
  return keys;
}
const addIfFound = (set2, obj, key) => {
  const opts = resolveObjectKey(obj, key);
  if (opts !== void 0) {
    set2.add(opts);
  }
};
class Config {
  constructor(config) {
    this._config = initConfig(config);
    this._scopeCache = /* @__PURE__ */ new Map();
    this._resolverCache = /* @__PURE__ */ new Map();
  }
  get platform() {
    return this._config.platform;
  }
  get type() {
    return this._config.type;
  }
  set type(type) {
    this._config.type = type;
  }
  get data() {
    return this._config.data;
  }
  set data(data) {
    this._config.data = initData(data);
  }
  get options() {
    return this._config.options;
  }
  set options(options) {
    this._config.options = options;
  }
  get plugins() {
    return this._config.plugins;
  }
  update() {
    const config = this._config;
    this.clearCache();
    initOptions(config);
  }
  clearCache() {
    this._scopeCache.clear();
    this._resolverCache.clear();
  }
  datasetScopeKeys(datasetType) {
    return cachedKeys(datasetType, () => [
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetAnimationScopeKeys(datasetType, transition) {
    return cachedKeys(`${datasetType}.transition.${transition}`, () => [
      [
        `datasets.${datasetType}.transitions.${transition}`,
        `transitions.${transition}`
      ],
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetElementScopeKeys(datasetType, elementType) {
    return cachedKeys(`${datasetType}-${elementType}`, () => [
      [
        `datasets.${datasetType}.elements.${elementType}`,
        `datasets.${datasetType}`,
        `elements.${elementType}`,
        ""
      ]
    ]);
  }
  pluginScopeKeys(plugin) {
    const id2 = plugin.id;
    const type = this.type;
    return cachedKeys(`${type}-plugin-${id2}`, () => [
      [
        `plugins.${id2}`,
        ...plugin.additionalOptionScopes || []
      ]
    ]);
  }
  _cachedScopes(mainScope, resetCache) {
    const _scopeCache = this._scopeCache;
    let cache = _scopeCache.get(mainScope);
    if (!cache || resetCache) {
      cache = /* @__PURE__ */ new Map();
      _scopeCache.set(mainScope, cache);
    }
    return cache;
  }
  getOptionScopes(mainScope, keyLists, resetCache) {
    const { options, type } = this;
    const cache = this._cachedScopes(mainScope, resetCache);
    const cached = cache.get(keyLists);
    if (cached) {
      return cached;
    }
    const scopes = /* @__PURE__ */ new Set();
    keyLists.forEach((keys) => {
      if (mainScope) {
        scopes.add(mainScope);
        keys.forEach((key) => addIfFound(scopes, mainScope, key));
      }
      keys.forEach((key) => addIfFound(scopes, options, key));
      keys.forEach((key) => addIfFound(scopes, overrides[type] || {}, key));
      keys.forEach((key) => addIfFound(scopes, defaults, key));
      keys.forEach((key) => addIfFound(scopes, descriptors, key));
    });
    const array = Array.from(scopes);
    if (array.length === 0) {
      array.push(/* @__PURE__ */ Object.create(null));
    }
    if (keysCached.has(keyLists)) {
      cache.set(keyLists, array);
    }
    return array;
  }
  chartOptionScopes() {
    const { options, type } = this;
    return [
      options,
      overrides[type] || {},
      defaults.datasets[type] || {},
      {
        type
      },
      defaults,
      descriptors
    ];
  }
  resolveNamedOptions(scopes, names2, context, prefixes = [
    ""
  ]) {
    const result = {
      $shared: true
    };
    const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes, prefixes);
    let options = resolver;
    if (needContext(resolver, names2)) {
      result.$shared = false;
      context = isFunction(context) ? context() : context;
      const subResolver = this.createResolver(scopes, context, subPrefixes);
      options = _attachContext(resolver, context, subResolver);
    }
    for (const prop of names2) {
      result[prop] = options[prop];
    }
    return result;
  }
  createResolver(scopes, context, prefixes = [
    ""
  ], descriptorDefaults) {
    const { resolver } = getResolver(this._resolverCache, scopes, prefixes);
    return isObject(context) ? _attachContext(resolver, context, void 0, descriptorDefaults) : resolver;
  }
}
function getResolver(resolverCache, scopes, prefixes) {
  let cache = resolverCache.get(scopes);
  if (!cache) {
    cache = /* @__PURE__ */ new Map();
    resolverCache.set(scopes, cache);
  }
  const cacheKey = prefixes.join();
  let cached = cache.get(cacheKey);
  if (!cached) {
    const resolver = _createResolver(scopes, prefixes);
    cached = {
      resolver,
      subPrefixes: prefixes.filter((p2) => !p2.toLowerCase().includes("hover"))
    };
    cache.set(cacheKey, cached);
  }
  return cached;
}
const hasFunction = (value) => isObject(value) && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));
function needContext(proxy, names2) {
  const { isScriptable, isIndexable } = _descriptors(proxy);
  for (const prop of names2) {
    const scriptable = isScriptable(prop);
    const indexable = isIndexable(prop);
    const value = (indexable || scriptable) && proxy[prop];
    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {
      return true;
    }
  }
  return false;
}
var version = "4.4.9";
const KNOWN_POSITIONS = [
  "top",
  "bottom",
  "left",
  "right",
  "chartArea"
];
function positionIsHorizontal(position, axis) {
  return position === "top" || position === "bottom" || KNOWN_POSITIONS.indexOf(position) === -1 && axis === "x";
}
function compare2Level(l1, l2) {
  return function(a, b2) {
    return a[l1] === b2[l1] ? a[l2] - b2[l2] : a[l1] - b2[l1];
  };
}
function onAnimationsComplete(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  chart.notifyPlugins("afterRender");
  callback(animationOptions && animationOptions.onComplete, [
    context
  ], chart);
}
function onAnimationProgress(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  callback(animationOptions && animationOptions.onProgress, [
    context
  ], chart);
}
function getCanvas(item) {
  if (_isDomSupported() && typeof item === "string") {
    item = document.getElementById(item);
  } else if (item && item.length) {
    item = item[0];
  }
  if (item && item.canvas) {
    item = item.canvas;
  }
  return item;
}
const instances = {};
const getChart = (key) => {
  const canvas = getCanvas(key);
  return Object.values(instances).filter((c2) => c2.canvas === canvas).pop();
};
function moveNumericKeys(obj, start, move) {
  const keys = Object.keys(obj);
  for (const key of keys) {
    const intKey = +key;
    if (intKey >= start) {
      const value = obj[key];
      delete obj[key];
      if (move > 0 || intKey > start) {
        obj[intKey + move] = value;
      }
    }
  }
}
function determineLastEvent(e, lastEvent, inChartArea, isClick) {
  if (!inChartArea || e.type === "mouseout") {
    return null;
  }
  if (isClick) {
    return lastEvent;
  }
  return e;
}
let Chart$1 = (_b = class {
  static register(...items) {
    registry.add(...items);
    invalidatePlugins();
  }
  static unregister(...items) {
    registry.remove(...items);
    invalidatePlugins();
  }
  constructor(item, userConfig) {
    const config = this.config = new Config(userConfig);
    const initialCanvas = getCanvas(item);
    const existingChart = getChart(initialCanvas);
    if (existingChart) {
      throw new Error("Canvas is already in use. Chart with ID '" + existingChart.id + "' must be destroyed before the canvas with ID '" + existingChart.canvas.id + "' can be reused.");
    }
    const options = config.createResolver(config.chartOptionScopes(), this.getContext());
    this.platform = new (config.platform || _detectPlatform(initialCanvas))();
    this.platform.updateConfig(config);
    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
    const canvas = context && context.canvas;
    const height = canvas && canvas.height;
    const width = canvas && canvas.width;
    this.id = uid();
    this.ctx = context;
    this.canvas = canvas;
    this.width = width;
    this.height = height;
    this._options = options;
    this._aspectRatio = this.aspectRatio;
    this._layers = [];
    this._metasets = [];
    this._stacks = void 0;
    this.boxes = [];
    this.currentDevicePixelRatio = void 0;
    this.chartArea = void 0;
    this._active = [];
    this._lastEvent = void 0;
    this._listeners = {};
    this._responsiveListeners = void 0;
    this._sortedMetasets = [];
    this.scales = {};
    this._plugins = new PluginService();
    this.$proxies = {};
    this._hiddenIndices = {};
    this.attached = false;
    this._animationsDisabled = void 0;
    this.$context = void 0;
    this._doResize = debounce$1((mode) => this.update(mode), options.resizeDelay || 0);
    this._dataChanges = [];
    instances[this.id] = this;
    if (!context || !canvas) {
      console.error("Failed to create chart: can't acquire context from the given item");
      return;
    }
    animator.listen(this, "complete", onAnimationsComplete);
    animator.listen(this, "progress", onAnimationProgress);
    this._initialize();
    if (this.attached) {
      this.update();
    }
  }
  get aspectRatio() {
    const { options: { aspectRatio: aspectRatio2, maintainAspectRatio }, width, height, _aspectRatio } = this;
    if (!isNullOrUndef(aspectRatio2)) {
      return aspectRatio2;
    }
    if (maintainAspectRatio && _aspectRatio) {
      return _aspectRatio;
    }
    return height ? width / height : null;
  }
  get data() {
    return this.config.data;
  }
  set data(data) {
    this.config.data = data;
  }
  get options() {
    return this._options;
  }
  set options(options) {
    this.config.options = options;
  }
  get registry() {
    return registry;
  }
  _initialize() {
    this.notifyPlugins("beforeInit");
    if (this.options.responsive) {
      this.resize();
    } else {
      retinaScale(this, this.options.devicePixelRatio);
    }
    this.bindEvents();
    this.notifyPlugins("afterInit");
    return this;
  }
  clear() {
    clearCanvas(this.canvas, this.ctx);
    return this;
  }
  stop() {
    animator.stop(this);
    return this;
  }
  resize(width, height) {
    if (!animator.running(this)) {
      this._resize(width, height);
    } else {
      this._resizeBeforeDraw = {
        width,
        height
      };
    }
  }
  _resize(width, height) {
    const options = this.options;
    const canvas = this.canvas;
    const aspectRatio2 = options.maintainAspectRatio && this.aspectRatio;
    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio2);
    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
    const mode = this.width ? "resize" : "attach";
    this.width = newSize.width;
    this.height = newSize.height;
    this._aspectRatio = this.aspectRatio;
    if (!retinaScale(this, newRatio, true)) {
      return;
    }
    this.notifyPlugins("resize", {
      size: newSize
    });
    callback(options.onResize, [
      this,
      newSize
    ], this);
    if (this.attached) {
      if (this._doResize(mode)) {
        this.render();
      }
    }
  }
  ensureScalesHaveIDs() {
    const options = this.options;
    const scalesOptions = options.scales || {};
    each(scalesOptions, (axisOptions, axisID) => {
      axisOptions.id = axisID;
    });
  }
  buildOrUpdateScales() {
    const options = this.options;
    const scaleOpts = options.scales;
    const scales = this.scales;
    const updated = Object.keys(scales).reduce((obj, id2) => {
      obj[id2] = false;
      return obj;
    }, {});
    let items = [];
    if (scaleOpts) {
      items = items.concat(Object.keys(scaleOpts).map((id2) => {
        const scaleOptions = scaleOpts[id2];
        const axis = determineAxis(id2, scaleOptions);
        const isRadial = axis === "r";
        const isHorizontal = axis === "x";
        return {
          options: scaleOptions,
          dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
          dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
        };
      }));
    }
    each(items, (item) => {
      const scaleOptions = item.options;
      const id2 = scaleOptions.id;
      const axis = determineAxis(id2, scaleOptions);
      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);
      if (scaleOptions.position === void 0 || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
        scaleOptions.position = item.dposition;
      }
      updated[id2] = true;
      let scale2 = null;
      if (id2 in scales && scales[id2].type === scaleType) {
        scale2 = scales[id2];
      } else {
        const scaleClass = registry.getScale(scaleType);
        scale2 = new scaleClass({
          id: id2,
          type: scaleType,
          ctx: this.ctx,
          chart: this
        });
        scales[scale2.id] = scale2;
      }
      scale2.init(scaleOptions, options);
    });
    each(updated, (hasUpdated, id2) => {
      if (!hasUpdated) {
        delete scales[id2];
      }
    });
    each(scales, (scale2) => {
      layouts.configure(this, scale2, scale2.options);
      layouts.addBox(this, scale2);
    });
  }
  _updateMetasets() {
    const metasets = this._metasets;
    const numData = this.data.datasets.length;
    const numMeta = metasets.length;
    metasets.sort((a, b2) => a.index - b2.index);
    if (numMeta > numData) {
      for (let i = numData; i < numMeta; ++i) {
        this._destroyDatasetMeta(i);
      }
      metasets.splice(numData, numMeta - numData);
    }
    this._sortedMetasets = metasets.slice(0).sort(compare2Level("order", "index"));
  }
  _removeUnreferencedMetasets() {
    const { _metasets: metasets, data: { datasets } } = this;
    if (metasets.length > datasets.length) {
      delete this._stacks;
    }
    metasets.forEach((meta, index2) => {
      if (datasets.filter((x2) => x2 === meta._dataset).length === 0) {
        this._destroyDatasetMeta(index2);
      }
    });
  }
  buildOrUpdateControllers() {
    const newControllers = [];
    const datasets = this.data.datasets;
    let i, ilen;
    this._removeUnreferencedMetasets();
    for (i = 0, ilen = datasets.length; i < ilen; i++) {
      const dataset = datasets[i];
      let meta = this.getDatasetMeta(i);
      const type = dataset.type || this.config.type;
      if (meta.type && meta.type !== type) {
        this._destroyDatasetMeta(i);
        meta = this.getDatasetMeta(i);
      }
      meta.type = type;
      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
      meta.order = dataset.order || 0;
      meta.index = i;
      meta.label = "" + dataset.label;
      meta.visible = this.isDatasetVisible(i);
      if (meta.controller) {
        meta.controller.updateIndex(i);
        meta.controller.linkScales();
      } else {
        const ControllerClass = registry.getController(type);
        const { datasetElementType, dataElementType } = defaults.datasets[type];
        Object.assign(ControllerClass, {
          dataElementType: registry.getElement(dataElementType),
          datasetElementType: datasetElementType && registry.getElement(datasetElementType)
        });
        meta.controller = new ControllerClass(this, i);
        newControllers.push(meta.controller);
      }
    }
    this._updateMetasets();
    return newControllers;
  }
  _resetElements() {
    each(this.data.datasets, (dataset, datasetIndex) => {
      this.getDatasetMeta(datasetIndex).controller.reset();
    }, this);
  }
  reset() {
    this._resetElements();
    this.notifyPlugins("reset");
  }
  update(mode) {
    const config = this.config;
    config.update();
    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
    const animsDisabled = this._animationsDisabled = !options.animation;
    this._updateScales();
    this._checkEventBindings();
    this._updateHiddenIndices();
    this._plugins.invalidate();
    if (this.notifyPlugins("beforeUpdate", {
      mode,
      cancelable: true
    }) === false) {
      return;
    }
    const newControllers = this.buildOrUpdateControllers();
    this.notifyPlugins("beforeElementsUpdate");
    let minPadding = 0;
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {
      const { controller } = this.getDatasetMeta(i);
      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
      controller.buildOrUpdateElements(reset);
      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
    }
    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
    this._updateLayout(minPadding);
    if (!animsDisabled) {
      each(newControllers, (controller) => {
        controller.reset();
      });
    }
    this._updateDatasets(mode);
    this.notifyPlugins("afterUpdate", {
      mode
    });
    this._layers.sort(compare2Level("z", "_idx"));
    const { _active, _lastEvent } = this;
    if (_lastEvent) {
      this._eventHandler(_lastEvent, true);
    } else if (_active.length) {
      this._updateHoverStyles(_active, _active, true);
    }
    this.render();
  }
  _updateScales() {
    each(this.scales, (scale2) => {
      layouts.removeBox(this, scale2);
    });
    this.ensureScalesHaveIDs();
    this.buildOrUpdateScales();
  }
  _checkEventBindings() {
    const options = this.options;
    const existingEvents = new Set(Object.keys(this._listeners));
    const newEvents = new Set(options.events);
    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
      this.unbindEvents();
      this.bindEvents();
    }
  }
  _updateHiddenIndices() {
    const { _hiddenIndices } = this;
    const changes = this._getUniformDataChanges() || [];
    for (const { method, start, count } of changes) {
      const move = method === "_removeElements" ? -count : count;
      moveNumericKeys(_hiddenIndices, start, move);
    }
  }
  _getUniformDataChanges() {
    const _dataChanges = this._dataChanges;
    if (!_dataChanges || !_dataChanges.length) {
      return;
    }
    this._dataChanges = [];
    const datasetCount = this.data.datasets.length;
    const makeSet = (idx) => new Set(_dataChanges.filter((c2) => c2[0] === idx).map((c2, i) => i + "," + c2.splice(1).join(",")));
    const changeSet = makeSet(0);
    for (let i = 1; i < datasetCount; i++) {
      if (!setsEqual(changeSet, makeSet(i))) {
        return;
      }
    }
    return Array.from(changeSet).map((c2) => c2.split(",")).map((a) => ({
      method: a[1],
      start: +a[2],
      count: +a[3]
    }));
  }
  _updateLayout(minPadding) {
    if (this.notifyPlugins("beforeLayout", {
      cancelable: true
    }) === false) {
      return;
    }
    layouts.update(this, this.width, this.height, minPadding);
    const area = this.chartArea;
    const noArea = area.width <= 0 || area.height <= 0;
    this._layers = [];
    each(this.boxes, (box) => {
      if (noArea && box.position === "chartArea") {
        return;
      }
      if (box.configure) {
        box.configure();
      }
      this._layers.push(...box._layers());
    }, this);
    this._layers.forEach((item, index2) => {
      item._idx = index2;
    });
    this.notifyPlugins("afterLayout");
  }
  _updateDatasets(mode) {
    if (this.notifyPlugins("beforeDatasetsUpdate", {
      mode,
      cancelable: true
    }) === false) {
      return;
    }
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this.getDatasetMeta(i).controller.configure();
    }
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this._updateDataset(i, isFunction(mode) ? mode({
        datasetIndex: i
      }) : mode);
    }
    this.notifyPlugins("afterDatasetsUpdate", {
      mode
    });
  }
  _updateDataset(index2, mode) {
    const meta = this.getDatasetMeta(index2);
    const args = {
      meta,
      index: index2,
      mode,
      cancelable: true
    };
    if (this.notifyPlugins("beforeDatasetUpdate", args) === false) {
      return;
    }
    meta.controller._update(mode);
    args.cancelable = false;
    this.notifyPlugins("afterDatasetUpdate", args);
  }
  render() {
    if (this.notifyPlugins("beforeRender", {
      cancelable: true
    }) === false) {
      return;
    }
    if (animator.has(this)) {
      if (this.attached && !animator.running(this)) {
        animator.start(this);
      }
    } else {
      this.draw();
      onAnimationsComplete({
        chart: this
      });
    }
  }
  draw() {
    let i;
    if (this._resizeBeforeDraw) {
      const { width, height } = this._resizeBeforeDraw;
      this._resizeBeforeDraw = null;
      this._resize(width, height);
    }
    this.clear();
    if (this.width <= 0 || this.height <= 0) {
      return;
    }
    if (this.notifyPlugins("beforeDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const layers = this._layers;
    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
      layers[i].draw(this.chartArea);
    }
    this._drawDatasets();
    for (; i < layers.length; ++i) {
      layers[i].draw(this.chartArea);
    }
    this.notifyPlugins("afterDraw");
  }
  _getSortedDatasetMetas(filterVisible) {
    const metasets = this._sortedMetasets;
    const result = [];
    let i, ilen;
    for (i = 0, ilen = metasets.length; i < ilen; ++i) {
      const meta = metasets[i];
      if (!filterVisible || meta.visible) {
        result.push(meta);
      }
    }
    return result;
  }
  getSortedVisibleDatasetMetas() {
    return this._getSortedDatasetMetas(true);
  }
  _drawDatasets() {
    if (this.notifyPlugins("beforeDatasetsDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const metasets = this.getSortedVisibleDatasetMetas();
    for (let i = metasets.length - 1; i >= 0; --i) {
      this._drawDataset(metasets[i]);
    }
    this.notifyPlugins("afterDatasetsDraw");
  }
  _drawDataset(meta) {
    const ctx = this.ctx;
    const args = {
      meta,
      index: meta.index,
      cancelable: true
    };
    const clip = getDatasetClipArea(this, meta);
    if (this.notifyPlugins("beforeDatasetDraw", args) === false) {
      return;
    }
    if (clip) {
      clipArea(ctx, clip);
    }
    meta.controller.draw();
    if (clip) {
      unclipArea(ctx);
    }
    args.cancelable = false;
    this.notifyPlugins("afterDatasetDraw", args);
  }
  isPointInArea(point) {
    return _isPointInArea(point, this.chartArea, this._minPadding);
  }
  getElementsAtEventForMode(e, mode, options, useFinalPosition) {
    const method = Interaction.modes[mode];
    if (typeof method === "function") {
      return method(this, e, options, useFinalPosition);
    }
    return [];
  }
  getDatasetMeta(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    const metasets = this._metasets;
    let meta = metasets.filter((x2) => x2 && x2._dataset === dataset).pop();
    if (!meta) {
      meta = {
        type: null,
        data: [],
        dataset: null,
        controller: null,
        hidden: null,
        xAxisID: null,
        yAxisID: null,
        order: dataset && dataset.order || 0,
        index: datasetIndex,
        _dataset: dataset,
        _parsed: [],
        _sorted: false
      };
      metasets.push(meta);
    }
    return meta;
  }
  getContext() {
    return this.$context || (this.$context = createContext(null, {
      chart: this,
      type: "chart"
    }));
  }
  getVisibleDatasetCount() {
    return this.getSortedVisibleDatasetMetas().length;
  }
  isDatasetVisible(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    if (!dataset) {
      return false;
    }
    const meta = this.getDatasetMeta(datasetIndex);
    return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
  }
  setDatasetVisibility(datasetIndex, visible) {
    const meta = this.getDatasetMeta(datasetIndex);
    meta.hidden = !visible;
  }
  toggleDataVisibility(index2) {
    this._hiddenIndices[index2] = !this._hiddenIndices[index2];
  }
  getDataVisibility(index2) {
    return !this._hiddenIndices[index2];
  }
  _updateVisibility(datasetIndex, dataIndex, visible) {
    const mode = visible ? "show" : "hide";
    const meta = this.getDatasetMeta(datasetIndex);
    const anims = meta.controller._resolveAnimations(void 0, mode);
    if (defined(dataIndex)) {
      meta.data[dataIndex].hidden = !visible;
      this.update();
    } else {
      this.setDatasetVisibility(datasetIndex, visible);
      anims.update(meta, {
        visible
      });
      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : void 0);
    }
  }
  hide(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, false);
  }
  show(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, true);
  }
  _destroyDatasetMeta(datasetIndex) {
    const meta = this._metasets[datasetIndex];
    if (meta && meta.controller) {
      meta.controller._destroy();
    }
    delete this._metasets[datasetIndex];
  }
  _stop() {
    let i, ilen;
    this.stop();
    animator.remove(this);
    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this._destroyDatasetMeta(i);
    }
  }
  destroy() {
    this.notifyPlugins("beforeDestroy");
    const { canvas, ctx } = this;
    this._stop();
    this.config.clearCache();
    if (canvas) {
      this.unbindEvents();
      clearCanvas(canvas, ctx);
      this.platform.releaseContext(ctx);
      this.canvas = null;
      this.ctx = null;
    }
    delete instances[this.id];
    this.notifyPlugins("afterDestroy");
  }
  toBase64Image(...args) {
    return this.canvas.toDataURL(...args);
  }
  bindEvents() {
    this.bindUserEvents();
    if (this.options.responsive) {
      this.bindResponsiveEvents();
    } else {
      this.attached = true;
    }
  }
  bindUserEvents() {
    const listeners = this._listeners;
    const platform = this.platform;
    const _add = (type, listener2) => {
      platform.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const listener = (e, x2, y2) => {
      e.offsetX = x2;
      e.offsetY = y2;
      this._eventHandler(e);
    };
    each(this.options.events, (type) => _add(type, listener));
  }
  bindResponsiveEvents() {
    if (!this._responsiveListeners) {
      this._responsiveListeners = {};
    }
    const listeners = this._responsiveListeners;
    const platform = this.platform;
    const _add = (type, listener2) => {
      platform.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const _remove = (type, listener2) => {
      if (listeners[type]) {
        platform.removeEventListener(this, type, listener2);
        delete listeners[type];
      }
    };
    const listener = (width, height) => {
      if (this.canvas) {
        this.resize(width, height);
      }
    };
    let detached;
    const attached = () => {
      _remove("attach", attached);
      this.attached = true;
      this.resize();
      _add("resize", listener);
      _add("detach", detached);
    };
    detached = () => {
      this.attached = false;
      _remove("resize", listener);
      this._stop();
      this._resize(0, 0);
      _add("attach", attached);
    };
    if (platform.isAttached(this.canvas)) {
      attached();
    } else {
      detached();
    }
  }
  unbindEvents() {
    each(this._listeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._listeners = {};
    each(this._responsiveListeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._responsiveListeners = void 0;
  }
  updateHoverStyle(items, mode, enabled) {
    const prefix = enabled ? "set" : "remove";
    let meta, item, i, ilen;
    if (mode === "dataset") {
      meta = this.getDatasetMeta(items[0].datasetIndex);
      meta.controller["_" + prefix + "DatasetHoverStyle"]();
    }
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      item = items[i];
      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
      if (controller) {
        controller[prefix + "HoverStyle"](item.element, item.datasetIndex, item.index);
      }
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements) {
    const lastActive = this._active || [];
    const active = activeElements.map(({ datasetIndex, index: index2 }) => {
      const meta = this.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("No dataset found at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index2],
        index: index2
      };
    });
    const changed = !_elementsEqual(active, lastActive);
    if (changed) {
      this._active = active;
      this._lastEvent = null;
      this._updateHoverStyles(active, lastActive);
    }
  }
  notifyPlugins(hook, args, filter2) {
    return this._plugins.notify(this, hook, args, filter2);
  }
  isPluginEnabled(pluginId) {
    return this._plugins._cache.filter((p2) => p2.plugin.id === pluginId).length === 1;
  }
  _updateHoverStyles(active, lastActive, replay) {
    const hoverOptions = this.options.hover;
    const diff = (a, b2) => a.filter((x2) => !b2.some((y2) => x2.datasetIndex === y2.datasetIndex && x2.index === y2.index));
    const deactivated = diff(lastActive, active);
    const activated = replay ? active : diff(active, lastActive);
    if (deactivated.length) {
      this.updateHoverStyle(deactivated, hoverOptions.mode, false);
    }
    if (activated.length && hoverOptions.mode) {
      this.updateHoverStyle(activated, hoverOptions.mode, true);
    }
  }
  _eventHandler(e, replay) {
    const args = {
      event: e,
      replay,
      cancelable: true,
      inChartArea: this.isPointInArea(e)
    };
    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);
    if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) {
      return;
    }
    const changed = this._handleEvent(e, replay, args.inChartArea);
    args.cancelable = false;
    this.notifyPlugins("afterEvent", args, eventFilter);
    if (changed || args.changed) {
      this.render();
    }
    return this;
  }
  _handleEvent(e, replay, inChartArea) {
    const { _active: lastActive = [], options } = this;
    const useFinalPosition = replay;
    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
    const isClick = _isClickEvent(e);
    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);
    if (inChartArea) {
      this._lastEvent = null;
      callback(options.onHover, [
        e,
        active,
        this
      ], this);
      if (isClick) {
        callback(options.onClick, [
          e,
          active,
          this
        ], this);
      }
    }
    const changed = !_elementsEqual(active, lastActive);
    if (changed || replay) {
      this._active = active;
      this._updateHoverStyles(active, lastActive, replay);
    }
    this._lastEvent = lastEvent;
    return changed;
  }
  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
    if (e.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive;
    }
    const hoverOptions = this.options.hover;
    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
  }
}, __publicField(_b, "defaults", defaults), __publicField(_b, "instances", instances), __publicField(_b, "overrides", overrides), __publicField(_b, "registry", registry), __publicField(_b, "version", version), __publicField(_b, "getChart", getChart), _b);
function invalidatePlugins() {
  return each(Chart$1.instances, (chart) => chart._plugins.invalidate());
}
function setStyle(ctx, options, style = options) {
  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);
  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));
  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);
  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);
  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);
  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);
}
function lineTo(ctx, previous, target) {
  ctx.lineTo(target.x, target.y);
}
function getLineMethod(options) {
  if (options.stepped) {
    return _steppedLineTo;
  }
  if (options.tension || options.cubicInterpolationMode === "monotone") {
    return _bezierCurveTo;
  }
  return lineTo;
}
function pathVars(points, segment, params = {}) {
  const count = points.length;
  const { start: paramsStart = 0, end: paramsEnd = count - 1 } = params;
  const { start: segmentStart, end: segmentEnd } = segment;
  const start = Math.max(paramsStart, segmentStart);
  const end = Math.min(paramsEnd, segmentEnd);
  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
  return {
    count,
    start,
    loop: segment.loop,
    ilen: end < start && !outside ? count + end - start : end - start
  };
}
function pathSegment(ctx, line, segment, params) {
  const { points, options } = line;
  const { count, start, loop, ilen } = pathVars(points, segment, params);
  const lineMethod = getLineMethod(options);
  let { move = true, reverse } = params || {};
  let i, point, prev;
  for (i = 0; i <= ilen; ++i) {
    point = points[(start + (reverse ? ilen - i : i)) % count];
    if (point.skip) {
      continue;
    } else if (move) {
      ctx.moveTo(point.x, point.y);
      move = false;
    } else {
      lineMethod(ctx, prev, point, reverse, options.stepped);
    }
    prev = point;
  }
  if (loop) {
    point = points[(start + (reverse ? ilen : 0)) % count];
    lineMethod(ctx, prev, point, reverse, options.stepped);
  }
  return !!loop;
}
function fastPathSegment(ctx, line, segment, params) {
  const points = line.points;
  const { count, start, ilen } = pathVars(points, segment, params);
  const { move = true, reverse } = params || {};
  let avgX = 0;
  let countX = 0;
  let i, point, prevX, minY, maxY, lastY;
  const pointIndex = (index2) => (start + (reverse ? ilen - index2 : index2)) % count;
  const drawX = () => {
    if (minY !== maxY) {
      ctx.lineTo(avgX, maxY);
      ctx.lineTo(avgX, minY);
      ctx.lineTo(avgX, lastY);
    }
  };
  if (move) {
    point = points[pointIndex(0)];
    ctx.moveTo(point.x, point.y);
  }
  for (i = 0; i <= ilen; ++i) {
    point = points[pointIndex(i)];
    if (point.skip) {
      continue;
    }
    const x2 = point.x;
    const y2 = point.y;
    const truncX = x2 | 0;
    if (truncX === prevX) {
      if (y2 < minY) {
        minY = y2;
      } else if (y2 > maxY) {
        maxY = y2;
      }
      avgX = (countX * avgX + x2) / ++countX;
    } else {
      drawX();
      ctx.lineTo(x2, y2);
      prevX = truncX;
      countX = 0;
      minY = maxY = y2;
    }
    lastY = y2;
  }
  drawX();
}
function _getSegmentMethod(line) {
  const opts = line.options;
  const borderDash = opts.borderDash && opts.borderDash.length;
  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== "monotone" && !opts.stepped && !borderDash;
  return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options) {
  if (options.stepped) {
    return _steppedInterpolation;
  }
  if (options.tension || options.cubicInterpolationMode === "monotone") {
    return _bezierInterpolation;
  }
  return _pointInLine;
}
function strokePathWithCache(ctx, line, start, count) {
  let path = line._path;
  if (!path) {
    path = line._path = new Path2D();
    if (line.path(path, start, count)) {
      path.closePath();
    }
  }
  setStyle(ctx, line.options);
  ctx.stroke(path);
}
function strokePathDirect(ctx, line, start, count) {
  const { segments, options } = line;
  const segmentMethod = _getSegmentMethod(line);
  for (const segment of segments) {
    setStyle(ctx, options, segment.style);
    ctx.beginPath();
    if (segmentMethod(ctx, line, segment, {
      start,
      end: start + count - 1
    })) {
      ctx.closePath();
    }
    ctx.stroke();
  }
}
const usePath2D = typeof Path2D === "function";
function draw(ctx, line, start, count) {
  if (usePath2D && !line.options.segment) {
    strokePathWithCache(ctx, line, start, count);
  } else {
    strokePathDirect(ctx, line, start, count);
  }
}
class LineElement extends Element$1 {
  constructor(cfg) {
    super();
    this.animated = true;
    this.options = void 0;
    this._chart = void 0;
    this._loop = void 0;
    this._fullLoop = void 0;
    this._path = void 0;
    this._points = void 0;
    this._segments = void 0;
    this._decimated = false;
    this._pointsUpdated = false;
    this._datasetIndex = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  updateControlPoints(chartArea, indexAxis) {
    const options = this.options;
    if ((options.tension || options.cubicInterpolationMode === "monotone") && !options.stepped && !this._pointsUpdated) {
      const loop = options.spanGaps ? this._loop : this._fullLoop;
      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);
      this._pointsUpdated = true;
    }
  }
  set points(points) {
    this._points = points;
    delete this._segments;
    delete this._path;
    this._pointsUpdated = false;
  }
  get points() {
    return this._points;
  }
  get segments() {
    return this._segments || (this._segments = _computeSegments(this, this.options.segment));
  }
  first() {
    const segments = this.segments;
    const points = this.points;
    return segments.length && points[segments[0].start];
  }
  last() {
    const segments = this.segments;
    const points = this.points;
    const count = segments.length;
    return count && points[segments[count - 1].end];
  }
  interpolate(point, property) {
    const options = this.options;
    const value = point[property];
    const points = this.points;
    const segments = _boundSegments(this, {
      property,
      start: value,
      end: value
    });
    if (!segments.length) {
      return;
    }
    const result = [];
    const _interpolate = _getInterpolationMethod(options);
    let i, ilen;
    for (i = 0, ilen = segments.length; i < ilen; ++i) {
      const { start, end } = segments[i];
      const p1 = points[start];
      const p2 = points[end];
      if (p1 === p2) {
        result.push(p1);
        continue;
      }
      const t2 = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
      const interpolated = _interpolate(p1, p2, t2, options.stepped);
      interpolated[property] = point[property];
      result.push(interpolated);
    }
    return result.length === 1 ? result[0] : result;
  }
  pathSegment(ctx, segment, params) {
    const segmentMethod = _getSegmentMethod(this);
    return segmentMethod(ctx, this, segment, params);
  }
  path(ctx, start, count) {
    const segments = this.segments;
    const segmentMethod = _getSegmentMethod(this);
    let loop = this._loop;
    start = start || 0;
    count = count || this.points.length - start;
    for (const segment of segments) {
      loop &= segmentMethod(ctx, this, segment, {
        start,
        end: start + count - 1
      });
    }
    return !!loop;
  }
  draw(ctx, chartArea, start, count) {
    const options = this.options || {};
    const points = this.points || [];
    if (points.length && options.borderWidth) {
      ctx.save();
      draw(ctx, this, start, count);
      ctx.restore();
    }
    if (this.animated) {
      this._pointsUpdated = false;
      this._path = void 0;
    }
  }
}
__publicField(LineElement, "id", "line");
__publicField(LineElement, "defaults", {
  borderCapStyle: "butt",
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: "miter",
  borderWidth: 3,
  capBezierPoints: true,
  cubicInterpolationMode: "default",
  fill: false,
  spanGaps: false,
  stepped: false,
  tension: 0
});
__publicField(LineElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
__publicField(LineElement, "descriptors", {
  _scriptable: true,
  _indexable: (name) => name !== "borderDash" && name !== "fill"
});
function inRange$1(el2, pos, axis, useFinalPosition) {
  const options = el2.options;
  const { [axis]: value } = el2.getProps([
    axis
  ], useFinalPosition);
  return Math.abs(pos - value) < options.radius + options.hitRadius;
}
class PointElement extends Element$1 {
  constructor(cfg) {
    super();
    __publicField(this, "parsed");
    __publicField(this, "skip");
    __publicField(this, "stop");
    this.options = void 0;
    this.parsed = void 0;
    this.skip = void 0;
    this.stop = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    const options = this.options;
    const { x: x2, y: y2 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return Math.pow(mouseX - x2, 2) + Math.pow(mouseY - y2, 2) < Math.pow(options.hitRadius + options.radius, 2);
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange$1(this, mouseX, "x", useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange$1(this, mouseY, "y", useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y2 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return {
      x: x2,
      y: y2
    };
  }
  size(options) {
    options = options || this.options || {};
    let radius = options.radius || 0;
    radius = Math.max(radius, radius && options.hoverRadius || 0);
    const borderWidth = radius && options.borderWidth || 0;
    return (radius + borderWidth) * 2;
  }
  draw(ctx, area) {
    const options = this.options;
    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {
      return;
    }
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.fillStyle = options.backgroundColor;
    drawPoint(ctx, options, this.x, this.y);
  }
  getRange() {
    const options = this.options || {};
    return options.radius + options.hitRadius;
  }
}
__publicField(PointElement, "id", "point");
/**
* @type {any}
*/
__publicField(PointElement, "defaults", {
  borderWidth: 1,
  hitRadius: 1,
  hoverBorderWidth: 1,
  hoverRadius: 4,
  pointStyle: "circle",
  radius: 3,
  rotation: 0
});
/**
* @type {any}
*/
__publicField(PointElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
function _segments(line, target, property) {
  const segments = line.segments;
  const points = line.points;
  const tpoints = target.points;
  const parts = [];
  for (const segment of segments) {
    let { start, end } = segment;
    end = _findSegmentEnd(start, end, points);
    const bounds = _getBounds(property, points[start], points[end], segment.loop);
    if (!target.segments) {
      parts.push({
        source: segment,
        target: bounds,
        start: points[start],
        end: points[end]
      });
      continue;
    }
    const targetSegments = _boundSegments(target, bounds);
    for (const tgt of targetSegments) {
      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
      const fillSources = _boundSegment(segment, points, subBounds);
      for (const fillSource of fillSources) {
        parts.push({
          source: fillSource,
          target: tgt,
          start: {
            [property]: _getEdge(bounds, subBounds, "start", Math.max)
          },
          end: {
            [property]: _getEdge(bounds, subBounds, "end", Math.min)
          }
        });
      }
    }
  }
  return parts;
}
function _getBounds(property, first, last, loop) {
  if (loop) {
    return;
  }
  let start = first[property];
  let end = last[property];
  if (property === "angle") {
    start = _normalizeAngle(start);
    end = _normalizeAngle(end);
  }
  return {
    property,
    start,
    end
  };
}
function _pointsFromSegments(boundary, line) {
  const { x: x2 = null, y: y2 = null } = boundary || {};
  const linePoints = line.points;
  const points = [];
  line.segments.forEach(({ start, end }) => {
    end = _findSegmentEnd(start, end, linePoints);
    const first = linePoints[start];
    const last = linePoints[end];
    if (y2 !== null) {
      points.push({
        x: first.x,
        y: y2
      });
      points.push({
        x: last.x,
        y: y2
      });
    } else if (x2 !== null) {
      points.push({
        x: x2,
        y: first.y
      });
      points.push({
        x: x2,
        y: last.y
      });
    }
  });
  return points;
}
function _findSegmentEnd(start, end, points) {
  for (; end > start; end--) {
    const point = points[end];
    if (!isNaN(point.x) && !isNaN(point.y)) {
      break;
    }
  }
  return end;
}
function _getEdge(a, b2, prop, fn) {
  if (a && b2) {
    return fn(a[prop], b2[prop]);
  }
  return a ? a[prop] : b2 ? b2[prop] : 0;
}
function _createBoundaryLine(boundary, line) {
  let points = [];
  let _loop = false;
  if (isArray(boundary)) {
    _loop = true;
    points = boundary;
  } else {
    points = _pointsFromSegments(boundary, line);
  }
  return points.length ? new LineElement({
    points,
    options: {
      tension: 0
    },
    _loop,
    _fullLoop: _loop
  }) : null;
}
function _shouldApplyFill(source) {
  return source && source.fill !== false;
}
function _resolveTarget(sources, index2, propagate) {
  const source = sources[index2];
  let fill2 = source.fill;
  const visited = [
    index2
  ];
  let target;
  if (!propagate) {
    return fill2;
  }
  while (fill2 !== false && visited.indexOf(fill2) === -1) {
    if (!isNumberFinite(fill2)) {
      return fill2;
    }
    target = sources[fill2];
    if (!target) {
      return false;
    }
    if (target.visible) {
      return fill2;
    }
    visited.push(fill2);
    fill2 = target.fill;
  }
  return false;
}
function _decodeFill(line, index2, count) {
  const fill2 = parseFillOption(line);
  if (isObject(fill2)) {
    return isNaN(fill2.value) ? false : fill2;
  }
  let target = parseFloat(fill2);
  if (isNumberFinite(target) && Math.floor(target) === target) {
    return decodeTargetIndex(fill2[0], index2, target, count);
  }
  return [
    "origin",
    "start",
    "end",
    "stack",
    "shape"
  ].indexOf(fill2) >= 0 && fill2;
}
function decodeTargetIndex(firstCh, index2, target, count) {
  if (firstCh === "-" || firstCh === "+") {
    target = index2 + target;
  }
  if (target === index2 || target < 0 || target >= count) {
    return false;
  }
  return target;
}
function _getTargetPixel(fill2, scale2) {
  let pixel = null;
  if (fill2 === "start") {
    pixel = scale2.bottom;
  } else if (fill2 === "end") {
    pixel = scale2.top;
  } else if (isObject(fill2)) {
    pixel = scale2.getPixelForValue(fill2.value);
  } else if (scale2.getBasePixel) {
    pixel = scale2.getBasePixel();
  }
  return pixel;
}
function _getTargetValue(fill2, scale2, startValue) {
  let value;
  if (fill2 === "start") {
    value = startValue;
  } else if (fill2 === "end") {
    value = scale2.options.reverse ? scale2.min : scale2.max;
  } else if (isObject(fill2)) {
    value = fill2.value;
  } else {
    value = scale2.getBaseValue();
  }
  return value;
}
function parseFillOption(line) {
  const options = line.options;
  const fillOption = options.fill;
  let fill2 = valueOrDefault(fillOption && fillOption.target, fillOption);
  if (fill2 === void 0) {
    fill2 = !!options.backgroundColor;
  }
  if (fill2 === false || fill2 === null) {
    return false;
  }
  if (fill2 === true) {
    return "origin";
  }
  return fill2;
}
function _buildStackLine(source) {
  const { scale: scale2, index: index2, line } = source;
  const points = [];
  const segments = line.segments;
  const sourcePoints = line.points;
  const linesBelow = getLinesBelow(scale2, index2);
  linesBelow.push(_createBoundaryLine({
    x: null,
    y: scale2.bottom
  }, line));
  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    for (let j = segment.start; j <= segment.end; j++) {
      addPointsBelow(points, sourcePoints[j], linesBelow);
    }
  }
  return new LineElement({
    points,
    options: {}
  });
}
function getLinesBelow(scale2, index2) {
  const below = [];
  const metas = scale2.getMatchingVisibleMetas("line");
  for (let i = 0; i < metas.length; i++) {
    const meta = metas[i];
    if (meta.index === index2) {
      break;
    }
    if (!meta.hidden) {
      below.unshift(meta.dataset);
    }
  }
  return below;
}
function addPointsBelow(points, sourcePoint, linesBelow) {
  const postponed = [];
  for (let j = 0; j < linesBelow.length; j++) {
    const line = linesBelow[j];
    const { first, last, point } = findPoint(line, sourcePoint, "x");
    if (!point || first && last) {
      continue;
    }
    if (first) {
      postponed.unshift(point);
    } else {
      points.push(point);
      if (!last) {
        break;
      }
    }
  }
  points.push(...postponed);
}
function findPoint(line, sourcePoint, property) {
  const point = line.interpolate(sourcePoint, property);
  if (!point) {
    return {};
  }
  const pointValue = point[property];
  const segments = line.segments;
  const linePoints = line.points;
  let first = false;
  let last = false;
  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    const firstValue = linePoints[segment.start][property];
    const lastValue = linePoints[segment.end][property];
    if (_isBetween(pointValue, firstValue, lastValue)) {
      first = pointValue === firstValue;
      last = pointValue === lastValue;
      break;
    }
  }
  return {
    first,
    last,
    point
  };
}
class simpleArc {
  constructor(opts) {
    this.x = opts.x;
    this.y = opts.y;
    this.radius = opts.radius;
  }
  pathSegment(ctx, bounds, opts) {
    const { x: x2, y: y2, radius } = this;
    bounds = bounds || {
      start: 0,
      end: TAU
    };
    ctx.arc(x2, y2, radius, bounds.end, bounds.start, true);
    return !opts.bounds;
  }
  interpolate(point) {
    const { x: x2, y: y2, radius } = this;
    const angle = point.angle;
    return {
      x: x2 + Math.cos(angle) * radius,
      y: y2 + Math.sin(angle) * radius,
      angle
    };
  }
}
function _getTarget(source) {
  const { chart, fill: fill2, line } = source;
  if (isNumberFinite(fill2)) {
    return getLineByIndex(chart, fill2);
  }
  if (fill2 === "stack") {
    return _buildStackLine(source);
  }
  if (fill2 === "shape") {
    return true;
  }
  const boundary = computeBoundary(source);
  if (boundary instanceof simpleArc) {
    return boundary;
  }
  return _createBoundaryLine(boundary, line);
}
function getLineByIndex(chart, index2) {
  const meta = chart.getDatasetMeta(index2);
  const visible = meta && chart.isDatasetVisible(index2);
  return visible ? meta.dataset : null;
}
function computeBoundary(source) {
  const scale2 = source.scale || {};
  if (scale2.getPointPositionForValue) {
    return computeCircularBoundary(source);
  }
  return computeLinearBoundary(source);
}
function computeLinearBoundary(source) {
  const { scale: scale2 = {}, fill: fill2 } = source;
  const pixel = _getTargetPixel(fill2, scale2);
  if (isNumberFinite(pixel)) {
    const horizontal = scale2.isHorizontal();
    return {
      x: horizontal ? pixel : null,
      y: horizontal ? null : pixel
    };
  }
  return null;
}
function computeCircularBoundary(source) {
  const { scale: scale2, fill: fill2 } = source;
  const options = scale2.options;
  const length = scale2.getLabels().length;
  const start = options.reverse ? scale2.max : scale2.min;
  const value = _getTargetValue(fill2, scale2, start);
  const target = [];
  if (options.grid.circular) {
    const center = scale2.getPointPositionForValue(0, start);
    return new simpleArc({
      x: center.x,
      y: center.y,
      radius: scale2.getDistanceFromCenterForValue(value)
    });
  }
  for (let i = 0; i < length; ++i) {
    target.push(scale2.getPointPositionForValue(i, value));
  }
  return target;
}
function _drawfill(ctx, source, area) {
  const target = _getTarget(source);
  const { chart, index: index2, line, scale: scale2, axis } = source;
  const lineOpts = line.options;
  const fillOption = lineOpts.fill;
  const color2 = lineOpts.backgroundColor;
  const { above = color2, below = color2 } = fillOption || {};
  const meta = chart.getDatasetMeta(index2);
  const clip = getDatasetClipArea(chart, meta);
  if (target && line.points.length) {
    clipArea(ctx, area);
    doFill(ctx, {
      line,
      target,
      above,
      below,
      area,
      scale: scale2,
      axis,
      clip
    });
    unclipArea(ctx);
  }
}
function doFill(ctx, cfg) {
  const { line, target, above, below, area, scale: scale2, clip } = cfg;
  const property = line._loop ? "angle" : cfg.axis;
  ctx.save();
  if (property === "x" && below !== above) {
    clipVertical(ctx, target, area.top);
    fill(ctx, {
      line,
      target,
      color: above,
      scale: scale2,
      property,
      clip
    });
    ctx.restore();
    ctx.save();
    clipVertical(ctx, target, area.bottom);
  }
  fill(ctx, {
    line,
    target,
    color: below,
    scale: scale2,
    property,
    clip
  });
  ctx.restore();
}
function clipVertical(ctx, target, clipY) {
  const { segments, points } = target;
  let first = true;
  let lineLoop = false;
  ctx.beginPath();
  for (const segment of segments) {
    const { start, end } = segment;
    const firstPoint = points[start];
    const lastPoint = points[_findSegmentEnd(start, end, points)];
    if (first) {
      ctx.moveTo(firstPoint.x, firstPoint.y);
      first = false;
    } else {
      ctx.lineTo(firstPoint.x, clipY);
      ctx.lineTo(firstPoint.x, firstPoint.y);
    }
    lineLoop = !!target.pathSegment(ctx, segment, {
      move: lineLoop
    });
    if (lineLoop) {
      ctx.closePath();
    } else {
      ctx.lineTo(lastPoint.x, clipY);
    }
  }
  ctx.lineTo(target.first().x, clipY);
  ctx.closePath();
  ctx.clip();
}
function fill(ctx, cfg) {
  const { line, target, property, color: color2, scale: scale2, clip } = cfg;
  const segments = _segments(line, target, property);
  for (const { source: src, target: tgt, start, end } of segments) {
    const { style: { backgroundColor = color2 } = {} } = src;
    const notShape = target !== true;
    ctx.save();
    ctx.fillStyle = backgroundColor;
    clipBounds(ctx, scale2, clip, notShape && _getBounds(property, start, end));
    ctx.beginPath();
    const lineLoop = !!line.pathSegment(ctx, src);
    let loop;
    if (notShape) {
      if (lineLoop) {
        ctx.closePath();
      } else {
        interpolatedLineTo(ctx, target, end, property);
      }
      const targetLoop = !!target.pathSegment(ctx, tgt, {
        move: lineLoop,
        reverse: true
      });
      loop = lineLoop && targetLoop;
      if (!loop) {
        interpolatedLineTo(ctx, target, start, property);
      }
    }
    ctx.closePath();
    ctx.fill(loop ? "evenodd" : "nonzero");
    ctx.restore();
  }
}
function clipBounds(ctx, scale2, clip, bounds) {
  const chartArea = scale2.chart.chartArea;
  const { property, start, end } = bounds || {};
  if (property === "x" || property === "y") {
    let left, top, right, bottom;
    if (property === "x") {
      left = start;
      top = chartArea.top;
      right = end;
      bottom = chartArea.bottom;
    } else {
      left = chartArea.left;
      top = start;
      right = chartArea.right;
      bottom = end;
    }
    ctx.beginPath();
    if (clip) {
      left = Math.max(left, clip.left);
      right = Math.min(right, clip.right);
      top = Math.max(top, clip.top);
      bottom = Math.min(bottom, clip.bottom);
    }
    ctx.rect(left, top, right - left, bottom - top);
    ctx.clip();
  }
}
function interpolatedLineTo(ctx, target, point, property) {
  const interpolatedPoint = target.interpolate(point, property);
  if (interpolatedPoint) {
    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
  }
}
var index$1 = {
  id: "filler",
  afterDatasetsUpdate(chart, _args, options) {
    const count = (chart.data.datasets || []).length;
    const sources = [];
    let meta, i, line, source;
    for (i = 0; i < count; ++i) {
      meta = chart.getDatasetMeta(i);
      line = meta.dataset;
      source = null;
      if (line && line.options && line instanceof LineElement) {
        source = {
          visible: chart.isDatasetVisible(i),
          index: i,
          fill: _decodeFill(line, i, count),
          chart,
          axis: meta.controller.options.indexAxis,
          scale: meta.vScale,
          line
        };
      }
      meta.$filler = source;
      sources.push(source);
    }
    for (i = 0; i < count; ++i) {
      source = sources[i];
      if (!source || source.fill === false) {
        continue;
      }
      source.fill = _resolveTarget(sources, i, options.propagate);
    }
  },
  beforeDraw(chart, _args, options) {
    const draw2 = options.drawTime === "beforeDraw";
    const metasets = chart.getSortedVisibleDatasetMetas();
    const area = chart.chartArea;
    for (let i = metasets.length - 1; i >= 0; --i) {
      const source = metasets[i].$filler;
      if (!source) {
        continue;
      }
      source.line.updateControlPoints(area, source.axis);
      if (draw2 && source.fill) {
        _drawfill(chart.ctx, source, area);
      }
    }
  },
  beforeDatasetsDraw(chart, _args, options) {
    if (options.drawTime !== "beforeDatasetsDraw") {
      return;
    }
    const metasets = chart.getSortedVisibleDatasetMetas();
    for (let i = metasets.length - 1; i >= 0; --i) {
      const source = metasets[i].$filler;
      if (_shouldApplyFill(source)) {
        _drawfill(chart.ctx, source, chart.chartArea);
      }
    }
  },
  beforeDatasetDraw(chart, args, options) {
    const source = args.meta.$filler;
    if (!_shouldApplyFill(source) || options.drawTime !== "beforeDatasetDraw") {
      return;
    }
    _drawfill(chart.ctx, source, chart.chartArea);
  },
  defaults: {
    propagate: true,
    drawTime: "beforeDatasetDraw"
  }
};
const getBoxSize = (labelOpts, fontSize) => {
  let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;
  if (labelOpts.usePointStyle) {
    boxHeight = Math.min(boxHeight, fontSize);
    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
  }
  return {
    boxWidth,
    boxHeight,
    itemHeight: Math.max(fontSize, boxHeight)
  };
};
const itemsEqual = (a, b2) => a !== null && b2 !== null && a.datasetIndex === b2.datasetIndex && a.index === b2.index;
class Legend extends Element$1 {
  constructor(config) {
    super();
    this._added = false;
    this.legendHitBoxes = [];
    this._hoveredItem = null;
    this.doughnutMode = false;
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this.legendItems = void 0;
    this.columnSizes = void 0;
    this.lineWidths = void 0;
    this.maxHeight = void 0;
    this.maxWidth = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.height = void 0;
    this.width = void 0;
    this._margins = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight, margins) {
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins;
    this.setDimensions();
    this.buildLabels();
    this.fit();
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = this._margins.left;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = this._margins.top;
      this.bottom = this.height;
    }
  }
  buildLabels() {
    const labelOpts = this.options.labels || {};
    let legendItems = callback(labelOpts.generateLabels, [
      this.chart
    ], this) || [];
    if (labelOpts.filter) {
      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));
    }
    if (labelOpts.sort) {
      legendItems = legendItems.sort((a, b2) => labelOpts.sort(a, b2, this.chart.data));
    }
    if (this.options.reverse) {
      legendItems.reverse();
    }
    this.legendItems = legendItems;
  }
  fit() {
    const { options, ctx } = this;
    if (!options.display) {
      this.width = this.height = 0;
      return;
    }
    const labelOpts = options.labels;
    const labelFont = toFont(labelOpts.font);
    const fontSize = labelFont.size;
    const titleHeight = this._computeTitleHeight();
    const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);
    let width, height;
    ctx.font = labelFont.string;
    if (this.isHorizontal()) {
      width = this.maxWidth;
      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
    } else {
      height = this.maxHeight;
      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
    }
    this.width = Math.min(width, options.maxWidth || this.maxWidth);
    this.height = Math.min(height, options.maxHeight || this.maxHeight);
  }
  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
    const { ctx, maxWidth, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const lineWidths = this.lineWidths = [
      0
    ];
    const lineHeight = itemHeight + padding;
    let totalHeight = titleHeight;
    ctx.textAlign = "left";
    ctx.textBaseline = "middle";
    let row = -1;
    let top = -lineHeight;
    this.legendItems.forEach((legendItem, i) => {
      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
        totalHeight += lineHeight;
        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
        top += lineHeight;
        row++;
      }
      hitboxes[i] = {
        left: 0,
        top,
        row,
        width: itemWidth,
        height: itemHeight
      };
      lineWidths[lineWidths.length - 1] += itemWidth + padding;
    });
    return totalHeight;
  }
  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
    const { ctx, maxHeight, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const columnSizes = this.columnSizes = [];
    const heightLimit = maxHeight - titleHeight;
    let totalWidth = padding;
    let currentColWidth = 0;
    let currentColHeight = 0;
    let left = 0;
    let col = 0;
    this.legendItems.forEach((legendItem, i) => {
      const { itemWidth, itemHeight } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
        totalWidth += currentColWidth + padding;
        columnSizes.push({
          width: currentColWidth,
          height: currentColHeight
        });
        left += currentColWidth + padding;
        col++;
        currentColWidth = currentColHeight = 0;
      }
      hitboxes[i] = {
        left,
        top: currentColHeight,
        col,
        width: itemWidth,
        height: itemHeight
      };
      currentColWidth = Math.max(currentColWidth, itemWidth);
      currentColHeight += itemHeight + padding;
    });
    totalWidth += currentColWidth;
    columnSizes.push({
      width: currentColWidth,
      height: currentColHeight
    });
    return totalWidth;
  }
  adjustHitBoxes() {
    if (!this.options.display) {
      return;
    }
    const titleHeight = this._computeTitleHeight();
    const { legendHitBoxes: hitboxes, options: { align, labels: { padding }, rtl } } = this;
    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);
    if (this.isHorizontal()) {
      let row = 0;
      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
      for (const hitbox of hitboxes) {
        if (row !== hitbox.row) {
          row = hitbox.row;
          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
        }
        hitbox.top += this.top + titleHeight + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
        left += hitbox.width + padding;
      }
    } else {
      let col = 0;
      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
      for (const hitbox of hitboxes) {
        if (hitbox.col !== col) {
          col = hitbox.col;
          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
        }
        hitbox.top = top;
        hitbox.left += this.left + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
        top += hitbox.height + padding;
      }
    }
  }
  isHorizontal() {
    return this.options.position === "top" || this.options.position === "bottom";
  }
  draw() {
    if (this.options.display) {
      const ctx = this.ctx;
      clipArea(ctx, this);
      this._draw();
      unclipArea(ctx);
    }
  }
  _draw() {
    const { options: opts, columnSizes, lineWidths, ctx } = this;
    const { align, labels: labelOpts } = opts;
    const defaultColor = defaults.color;
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const labelFont = toFont(labelOpts.font);
    const { padding } = labelOpts;
    const fontSize = labelFont.size;
    const halfFontSize = fontSize / 2;
    let cursor;
    this.drawTitle();
    ctx.textAlign = rtlHelper.textAlign("left");
    ctx.textBaseline = "middle";
    ctx.lineWidth = 0.5;
    ctx.font = labelFont.string;
    const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);
    const drawLegendBox = function(x2, y2, legendItem) {
      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
        return;
      }
      ctx.save();
      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
      ctx.lineCap = valueOrDefault(legendItem.lineCap, "butt");
      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, "miter");
      ctx.lineWidth = lineWidth;
      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
      if (labelOpts.usePointStyle) {
        const drawOptions = {
          radius: boxHeight * Math.SQRT2 / 2,
          pointStyle: legendItem.pointStyle,
          rotation: legendItem.rotation,
          borderWidth: lineWidth
        };
        const centerX = rtlHelper.xPlus(x2, boxWidth / 2);
        const centerY = y2 + halfFontSize;
        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
      } else {
        const yBoxTop = y2 + Math.max((fontSize - boxHeight) / 2, 0);
        const xBoxLeft = rtlHelper.leftForLtr(x2, boxWidth);
        const borderRadius = toTRBLCorners(legendItem.borderRadius);
        ctx.beginPath();
        if (Object.values(borderRadius).some((v2) => v2 !== 0)) {
          addRoundedRectPath(ctx, {
            x: xBoxLeft,
            y: yBoxTop,
            w: boxWidth,
            h: boxHeight,
            radius: borderRadius
          });
        } else {
          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
        }
        ctx.fill();
        if (lineWidth !== 0) {
          ctx.stroke();
        }
      }
      ctx.restore();
    };
    const fillText = function(x2, y2, legendItem) {
      renderText(ctx, legendItem.text, x2, y2 + itemHeight / 2, labelFont, {
        strikethrough: legendItem.hidden,
        textAlign: rtlHelper.textAlign(legendItem.textAlign)
      });
    };
    const isHorizontal = this.isHorizontal();
    const titleHeight = this._computeTitleHeight();
    if (isHorizontal) {
      cursor = {
        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),
        y: this.top + padding + titleHeight,
        line: 0
      };
    } else {
      cursor = {
        x: this.left + padding,
        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
        line: 0
      };
    }
    overrideTextDirection(this.ctx, opts.textDirection);
    const lineHeight = itemHeight + padding;
    this.legendItems.forEach((legendItem, i) => {
      ctx.strokeStyle = legendItem.fontColor;
      ctx.fillStyle = legendItem.fontColor;
      const textWidth = ctx.measureText(legendItem.text).width;
      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
      const width = boxWidth + halfFontSize + textWidth;
      let x2 = cursor.x;
      let y2 = cursor.y;
      rtlHelper.setWidth(this.width);
      if (isHorizontal) {
        if (i > 0 && x2 + width + padding > this.right) {
          y2 = cursor.y += lineHeight;
          cursor.line++;
          x2 = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);
        }
      } else if (i > 0 && y2 + lineHeight > this.bottom) {
        x2 = cursor.x = x2 + columnSizes[cursor.line].width + padding;
        cursor.line++;
        y2 = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
      }
      const realX = rtlHelper.x(x2);
      drawLegendBox(realX, y2, legendItem);
      x2 = _textX(textAlign, x2 + boxWidth + halfFontSize, isHorizontal ? x2 + width : this.right, opts.rtl);
      fillText(rtlHelper.x(x2), y2, legendItem);
      if (isHorizontal) {
        cursor.x += width + padding;
      } else if (typeof legendItem.text !== "string") {
        const fontLineHeight = labelFont.lineHeight;
        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;
      } else {
        cursor.y += lineHeight;
      }
    });
    restoreTextDirection(this.ctx, opts.textDirection);
  }
  drawTitle() {
    const opts = this.options;
    const titleOpts = opts.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    if (!titleOpts.display) {
      return;
    }
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const ctx = this.ctx;
    const position = titleOpts.position;
    const halfFontSize = titleFont.size / 2;
    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
    let y2;
    let left = this.left;
    let maxWidth = this.width;
    if (this.isHorizontal()) {
      maxWidth = Math.max(...this.lineWidths);
      y2 = this.top + topPaddingPlusHalfFontSize;
      left = _alignStartEnd(opts.align, left, this.right - maxWidth);
    } else {
      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);
      y2 = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
    }
    const x2 = _alignStartEnd(position, left, left + maxWidth);
    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));
    ctx.textBaseline = "middle";
    ctx.strokeStyle = titleOpts.color;
    ctx.fillStyle = titleOpts.color;
    ctx.font = titleFont.string;
    renderText(ctx, titleOpts.text, x2, y2, titleFont);
  }
  _computeTitleHeight() {
    const titleOpts = this.options.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
  }
  _getLegendItemAt(x2, y2) {
    let i, hitBox, lh2;
    if (_isBetween(x2, this.left, this.right) && _isBetween(y2, this.top, this.bottom)) {
      lh2 = this.legendHitBoxes;
      for (i = 0; i < lh2.length; ++i) {
        hitBox = lh2[i];
        if (_isBetween(x2, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y2, hitBox.top, hitBox.top + hitBox.height)) {
          return this.legendItems[i];
        }
      }
    }
    return null;
  }
  handleEvent(e) {
    const opts = this.options;
    if (!isListened(e.type, opts)) {
      return;
    }
    const hoveredItem = this._getLegendItemAt(e.x, e.y);
    if (e.type === "mousemove" || e.type === "mouseout") {
      const previous = this._hoveredItem;
      const sameItem = itemsEqual(previous, hoveredItem);
      if (previous && !sameItem) {
        callback(opts.onLeave, [
          e,
          previous,
          this
        ], this);
      }
      this._hoveredItem = hoveredItem;
      if (hoveredItem && !sameItem) {
        callback(opts.onHover, [
          e,
          hoveredItem,
          this
        ], this);
      }
    } else if (hoveredItem) {
      callback(opts.onClick, [
        e,
        hoveredItem,
        this
      ], this);
    }
  }
}
function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
  return {
    itemWidth,
    itemHeight
  };
}
function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
  let legendItemText = legendItem.text;
  if (legendItemText && typeof legendItemText !== "string") {
    legendItemText = legendItemText.reduce((a, b2) => a.length > b2.length ? a : b2);
  }
  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
}
function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
  let itemHeight = _itemHeight;
  if (typeof legendItem.text !== "string") {
    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
  }
  return itemHeight;
}
function calculateLegendItemHeight(legendItem, fontLineHeight) {
  const labelHeight = legendItem.text ? legendItem.text.length : 0;
  return fontLineHeight * labelHeight;
}
function isListened(type, opts) {
  if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) {
    return true;
  }
  if (opts.onClick && (type === "click" || type === "mouseup")) {
    return true;
  }
  return false;
}
var plugin_legend = {
  id: "legend",
  _element: Legend,
  start(chart, _args, options) {
    const legend = chart.legend = new Legend({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, legend, options);
    layouts.addBox(chart, legend);
  },
  stop(chart) {
    layouts.removeBox(chart, chart.legend);
    delete chart.legend;
  },
  beforeUpdate(chart, _args, options) {
    const legend = chart.legend;
    layouts.configure(chart, legend, options);
    legend.options = options;
  },
  afterUpdate(chart) {
    const legend = chart.legend;
    legend.buildLabels();
    legend.adjustHitBoxes();
  },
  afterEvent(chart, args) {
    if (!args.replay) {
      chart.legend.handleEvent(args.event);
    }
  },
  defaults: {
    display: true,
    position: "top",
    align: "center",
    fullSize: true,
    reverse: false,
    weight: 1e3,
    onClick(e, legendItem, legend) {
      const index2 = legendItem.datasetIndex;
      const ci2 = legend.chart;
      if (ci2.isDatasetVisible(index2)) {
        ci2.hide(index2);
        legendItem.hidden = true;
      } else {
        ci2.show(index2);
        legendItem.hidden = false;
      }
    },
    onHover: null,
    onLeave: null,
    labels: {
      color: (ctx) => ctx.chart.options.color,
      boxWidth: 40,
      padding: 10,
      generateLabels(chart) {
        const datasets = chart.data.datasets;
        const { labels: { usePointStyle, pointStyle, textAlign, color: color2, useBorderRadius, borderRadius } } = chart.legend.options;
        return chart._getSortedDatasetMetas().map((meta) => {
          const style = meta.controller.getStyle(usePointStyle ? 0 : void 0);
          const borderWidth = toPadding(style.borderWidth);
          return {
            text: datasets[meta.index].label,
            fillStyle: style.backgroundColor,
            fontColor: color2,
            hidden: !meta.visible,
            lineCap: style.borderCapStyle,
            lineDash: style.borderDash,
            lineDashOffset: style.borderDashOffset,
            lineJoin: style.borderJoinStyle,
            lineWidth: (borderWidth.width + borderWidth.height) / 4,
            strokeStyle: style.borderColor,
            pointStyle: pointStyle || style.pointStyle,
            rotation: style.rotation,
            textAlign: textAlign || style.textAlign,
            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
            datasetIndex: meta.index
          };
        }, this);
      }
    },
    title: {
      color: (ctx) => ctx.chart.options.color,
      display: false,
      position: "center",
      text: ""
    }
  },
  descriptors: {
    _scriptable: (name) => !name.startsWith("on"),
    labels: {
      _scriptable: (name) => ![
        "generateLabels",
        "filter",
        "sort"
      ].includes(name)
    }
  }
};
class Title extends Element$1 {
  constructor(config) {
    super();
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this._padding = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight) {
    const opts = this.options;
    this.left = 0;
    this.top = 0;
    if (!opts.display) {
      this.width = this.height = this.right = this.bottom = 0;
      return;
    }
    this.width = this.right = maxWidth;
    this.height = this.bottom = maxHeight;
    const lineCount = isArray(opts.text) ? opts.text.length : 1;
    this._padding = toPadding(opts.padding);
    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
    if (this.isHorizontal()) {
      this.height = textSize;
    } else {
      this.width = textSize;
    }
  }
  isHorizontal() {
    const pos = this.options.position;
    return pos === "top" || pos === "bottom";
  }
  _drawArgs(offset) {
    const { top, left, bottom, right, options } = this;
    const align = options.align;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    if (this.isHorizontal()) {
      titleX = _alignStartEnd(align, left, right);
      titleY = top + offset;
      maxWidth = right - left;
    } else {
      if (options.position === "left") {
        titleX = left + offset;
        titleY = _alignStartEnd(align, bottom, top);
        rotation = PI * -0.5;
      } else {
        titleX = right - offset;
        titleY = _alignStartEnd(align, top, bottom);
        rotation = PI * 0.5;
      }
      maxWidth = bottom - top;
    }
    return {
      titleX,
      titleY,
      maxWidth,
      rotation
    };
  }
  draw() {
    const ctx = this.ctx;
    const opts = this.options;
    if (!opts.display) {
      return;
    }
    const fontOpts = toFont(opts.font);
    const lineHeight = fontOpts.lineHeight;
    const offset = lineHeight / 2 + this._padding.top;
    const { titleX, titleY, maxWidth, rotation } = this._drawArgs(offset);
    renderText(ctx, opts.text, 0, 0, fontOpts, {
      color: opts.color,
      maxWidth,
      rotation,
      textAlign: _toLeftRightCenter(opts.align),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
}
function createTitle(chart, titleOpts) {
  const title = new Title({
    ctx: chart.ctx,
    options: titleOpts,
    chart
  });
  layouts.configure(chart, title, titleOpts);
  layouts.addBox(chart, title);
  chart.titleBlock = title;
}
var plugin_title = {
  id: "title",
  _element: Title,
  start(chart, _args, options) {
    createTitle(chart, options);
  },
  stop(chart) {
    const titleBlock = chart.titleBlock;
    layouts.removeBox(chart, titleBlock);
    delete chart.titleBlock;
  },
  beforeUpdate(chart, _args, options) {
    const title = chart.titleBlock;
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "bold"
    },
    fullSize: true,
    padding: 10,
    position: "top",
    text: "",
    weight: 2e3
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
const positioners = {
  average(items) {
    if (!items.length) {
      return false;
    }
    let i, len;
    let xSet = /* @__PURE__ */ new Set();
    let y2 = 0;
    let count = 0;
    for (i = 0, len = items.length; i < len; ++i) {
      const el2 = items[i].element;
      if (el2 && el2.hasValue()) {
        const pos = el2.tooltipPosition();
        xSet.add(pos.x);
        y2 += pos.y;
        ++count;
      }
    }
    if (count === 0 || xSet.size === 0) {
      return false;
    }
    const xAverage = [
      ...xSet
    ].reduce((a, b2) => a + b2) / xSet.size;
    return {
      x: xAverage,
      y: y2 / count
    };
  },
  nearest(items, eventPosition) {
    if (!items.length) {
      return false;
    }
    let x2 = eventPosition.x;
    let y2 = eventPosition.y;
    let minDistance = Number.POSITIVE_INFINITY;
    let i, len, nearestElement;
    for (i = 0, len = items.length; i < len; ++i) {
      const el2 = items[i].element;
      if (el2 && el2.hasValue()) {
        const center = el2.getCenterPoint();
        const d2 = distanceBetweenPoints(eventPosition, center);
        if (d2 < minDistance) {
          minDistance = d2;
          nearestElement = el2;
        }
      }
    }
    if (nearestElement) {
      const tp = nearestElement.tooltipPosition();
      x2 = tp.x;
      y2 = tp.y;
    }
    return {
      x: x2,
      y: y2
    };
  }
};
function pushOrConcat(base, toPush) {
  if (toPush) {
    if (isArray(toPush)) {
      Array.prototype.push.apply(base, toPush);
    } else {
      base.push(toPush);
    }
  }
  return base;
}
function splitNewlines(str) {
  if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) {
    return str.split("\n");
  }
  return str;
}
function createTooltipItem(chart, item) {
  const { element, datasetIndex, index: index2 } = item;
  const controller = chart.getDatasetMeta(datasetIndex).controller;
  const { label, value } = controller.getLabelAndValue(index2);
  return {
    chart,
    label,
    parsed: controller.getParsed(index2),
    raw: chart.data.datasets[datasetIndex].data[index2],
    formattedValue: value,
    dataset: controller.getDataset(),
    dataIndex: index2,
    datasetIndex,
    element
  };
}
function getTooltipSize(tooltip, options) {
  const ctx = tooltip.chart.ctx;
  const { body, footer, title } = tooltip;
  const { boxWidth, boxHeight } = options;
  const bodyFont = toFont(options.bodyFont);
  const titleFont = toFont(options.titleFont);
  const footerFont = toFont(options.footerFont);
  const titleLineCount = title.length;
  const footerLineCount = footer.length;
  const bodyLineItemCount = body.length;
  const padding = toPadding(options.padding);
  let height = padding.height;
  let width = 0;
  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
  if (titleLineCount) {
    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
  }
  if (combinedBodyLength) {
    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
  }
  if (footerLineCount) {
    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
  }
  let widthPadding = 0;
  const maxLineWidth = function(line) {
    width = Math.max(width, ctx.measureText(line).width + widthPadding);
  };
  ctx.save();
  ctx.font = titleFont.string;
  each(tooltip.title, maxLineWidth);
  ctx.font = bodyFont.string;
  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
  each(body, (bodyItem) => {
    each(bodyItem.before, maxLineWidth);
    each(bodyItem.lines, maxLineWidth);
    each(bodyItem.after, maxLineWidth);
  });
  widthPadding = 0;
  ctx.font = footerFont.string;
  each(tooltip.footer, maxLineWidth);
  ctx.restore();
  width += padding.width;
  return {
    width,
    height
  };
}
function determineYAlign(chart, size) {
  const { y: y2, height } = size;
  if (y2 < height / 2) {
    return "top";
  } else if (y2 > chart.height - height / 2) {
    return "bottom";
  }
  return "center";
}
function doesNotFitWithAlign(xAlign, chart, options, size) {
  const { x: x2, width } = size;
  const caret = options.caretSize + options.caretPadding;
  if (xAlign === "left" && x2 + width + caret > chart.width) {
    return true;
  }
  if (xAlign === "right" && x2 - width - caret < 0) {
    return true;
  }
}
function determineXAlign(chart, options, size, yAlign) {
  const { x: x2, width } = size;
  const { width: chartWidth, chartArea: { left, right } } = chart;
  let xAlign = "center";
  if (yAlign === "center") {
    xAlign = x2 <= (left + right) / 2 ? "left" : "right";
  } else if (x2 <= width / 2) {
    xAlign = "left";
  } else if (x2 >= chartWidth - width / 2) {
    xAlign = "right";
  }
  if (doesNotFitWithAlign(xAlign, chart, options, size)) {
    xAlign = "center";
  }
  return xAlign;
}
function determineAlignment(chart, options, size) {
  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
  return {
    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
    yAlign
  };
}
function alignX(size, xAlign) {
  let { x: x2, width } = size;
  if (xAlign === "right") {
    x2 -= width;
  } else if (xAlign === "center") {
    x2 -= width / 2;
  }
  return x2;
}
function alignY(size, yAlign, paddingAndSize) {
  let { y: y2, height } = size;
  if (yAlign === "top") {
    y2 += paddingAndSize;
  } else if (yAlign === "bottom") {
    y2 -= height + paddingAndSize;
  } else {
    y2 -= height / 2;
  }
  return y2;
}
function getBackgroundPoint(options, size, alignment, chart) {
  const { caretSize, caretPadding, cornerRadius } = options;
  const { xAlign, yAlign } = alignment;
  const paddingAndSize = caretSize + caretPadding;
  const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
  let x2 = alignX(size, xAlign);
  const y2 = alignY(size, yAlign, paddingAndSize);
  if (yAlign === "center") {
    if (xAlign === "left") {
      x2 += paddingAndSize;
    } else if (xAlign === "right") {
      x2 -= paddingAndSize;
    }
  } else if (xAlign === "left") {
    x2 -= Math.max(topLeft, bottomLeft) + caretSize;
  } else if (xAlign === "right") {
    x2 += Math.max(topRight, bottomRight) + caretSize;
  }
  return {
    x: _limitValue(x2, 0, chart.width - size.width),
    y: _limitValue(y2, 0, chart.height - size.height)
  };
}
function getAlignedX(tooltip, align, options) {
  const padding = toPadding(options.padding);
  return align === "center" ? tooltip.x + tooltip.width / 2 : align === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback2) {
  return pushOrConcat([], splitNewlines(callback2));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
  return createContext(parent, {
    tooltip,
    tooltipItems,
    type: "tooltip"
  });
}
function overrideCallbacks(callbacks, context) {
  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
  return override ? callbacks.override(override) : callbacks;
}
const defaultCallbacks = {
  beforeTitle: noop,
  title(tooltipItems) {
    if (tooltipItems.length > 0) {
      const item = tooltipItems[0];
      const labels = item.chart.data.labels;
      const labelCount = labels ? labels.length : 0;
      if (this && this.options && this.options.mode === "dataset") {
        return item.dataset.label || "";
      } else if (item.label) {
        return item.label;
      } else if (labelCount > 0 && item.dataIndex < labelCount) {
        return labels[item.dataIndex];
      }
    }
    return "";
  },
  afterTitle: noop,
  beforeBody: noop,
  beforeLabel: noop,
  label(tooltipItem) {
    if (this && this.options && this.options.mode === "dataset") {
      return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
    }
    let label = tooltipItem.dataset.label || "";
    if (label) {
      label += ": ";
    }
    const value = tooltipItem.formattedValue;
    if (!isNullOrUndef(value)) {
      label += value;
    }
    return label;
  },
  labelColor(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      borderColor: options.borderColor,
      backgroundColor: options.backgroundColor,
      borderWidth: options.borderWidth,
      borderDash: options.borderDash,
      borderDashOffset: options.borderDashOffset,
      borderRadius: 0
    };
  },
  labelTextColor() {
    return this.options.bodyColor;
  },
  labelPointStyle(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      pointStyle: options.pointStyle,
      rotation: options.rotation
    };
  },
  afterLabel: noop,
  afterBody: noop,
  beforeFooter: noop,
  footer: noop,
  afterFooter: noop
};
function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
  const result = callbacks[name].call(ctx, arg);
  if (typeof result === "undefined") {
    return defaultCallbacks[name].call(ctx, arg);
  }
  return result;
}
class Tooltip extends Element$1 {
  constructor(config) {
    super();
    this.opacity = 0;
    this._active = [];
    this._eventPosition = void 0;
    this._size = void 0;
    this._cachedAnimations = void 0;
    this._tooltipItems = [];
    this.$animations = void 0;
    this.$context = void 0;
    this.chart = config.chart;
    this.options = config.options;
    this.dataPoints = void 0;
    this.title = void 0;
    this.beforeBody = void 0;
    this.body = void 0;
    this.afterBody = void 0;
    this.footer = void 0;
    this.xAlign = void 0;
    this.yAlign = void 0;
    this.x = void 0;
    this.y = void 0;
    this.height = void 0;
    this.width = void 0;
    this.caretX = void 0;
    this.caretY = void 0;
    this.labelColors = void 0;
    this.labelPointStyles = void 0;
    this.labelTextColors = void 0;
  }
  initialize(options) {
    this.options = options;
    this._cachedAnimations = void 0;
    this.$context = void 0;
  }
  _resolveAnimations() {
    const cached = this._cachedAnimations;
    if (cached) {
      return cached;
    }
    const chart = this.chart;
    const options = this.options.setContext(this.getContext());
    const opts = options.enabled && chart.options.animation && options.animations;
    const animations2 = new Animations(this.chart, opts);
    if (opts._cacheable) {
      this._cachedAnimations = Object.freeze(animations2);
    }
    return animations2;
  }
  getContext() {
    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
  }
  getTitle(context, options) {
    const { callbacks } = options;
    const beforeTitle = invokeCallbackWithFallback(callbacks, "beforeTitle", this, context);
    const title = invokeCallbackWithFallback(callbacks, "title", this, context);
    const afterTitle = invokeCallbackWithFallback(callbacks, "afterTitle", this, context);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    lines = pushOrConcat(lines, splitNewlines(title));
    lines = pushOrConcat(lines, splitNewlines(afterTitle));
    return lines;
  }
  getBeforeBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "beforeBody", this, tooltipItems));
  }
  getBody(tooltipItems, options) {
    const { callbacks } = options;
    const bodyItems = [];
    each(tooltipItems, (context) => {
      const bodyItem = {
        before: [],
        lines: [],
        after: []
      };
      const scoped = overrideCallbacks(callbacks, context);
      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, "beforeLabel", this, context)));
      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, "label", this, context));
      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, "afterLabel", this, context)));
      bodyItems.push(bodyItem);
    });
    return bodyItems;
  }
  getAfterBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "afterBody", this, tooltipItems));
  }
  getFooter(tooltipItems, options) {
    const { callbacks } = options;
    const beforeFooter = invokeCallbackWithFallback(callbacks, "beforeFooter", this, tooltipItems);
    const footer = invokeCallbackWithFallback(callbacks, "footer", this, tooltipItems);
    const afterFooter = invokeCallbackWithFallback(callbacks, "afterFooter", this, tooltipItems);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    lines = pushOrConcat(lines, splitNewlines(footer));
    lines = pushOrConcat(lines, splitNewlines(afterFooter));
    return lines;
  }
  _createItems(options) {
    const active = this._active;
    const data = this.chart.data;
    const labelColors = [];
    const labelPointStyles = [];
    const labelTextColors = [];
    let tooltipItems = [];
    let i, len;
    for (i = 0, len = active.length; i < len; ++i) {
      tooltipItems.push(createTooltipItem(this.chart, active[i]));
    }
    if (options.filter) {
      tooltipItems = tooltipItems.filter((element, index2, array) => options.filter(element, index2, array, data));
    }
    if (options.itemSort) {
      tooltipItems = tooltipItems.sort((a, b2) => options.itemSort(a, b2, data));
    }
    each(tooltipItems, (context) => {
      const scoped = overrideCallbacks(options.callbacks, context);
      labelColors.push(invokeCallbackWithFallback(scoped, "labelColor", this, context));
      labelPointStyles.push(invokeCallbackWithFallback(scoped, "labelPointStyle", this, context));
      labelTextColors.push(invokeCallbackWithFallback(scoped, "labelTextColor", this, context));
    });
    this.labelColors = labelColors;
    this.labelPointStyles = labelPointStyles;
    this.labelTextColors = labelTextColors;
    this.dataPoints = tooltipItems;
    return tooltipItems;
  }
  update(changed, replay) {
    const options = this.options.setContext(this.getContext());
    const active = this._active;
    let properties;
    let tooltipItems = [];
    if (!active.length) {
      if (this.opacity !== 0) {
        properties = {
          opacity: 0
        };
      }
    } else {
      const position = positioners[options.position].call(this, active, this._eventPosition);
      tooltipItems = this._createItems(options);
      this.title = this.getTitle(tooltipItems, options);
      this.beforeBody = this.getBeforeBody(tooltipItems, options);
      this.body = this.getBody(tooltipItems, options);
      this.afterBody = this.getAfterBody(tooltipItems, options);
      this.footer = this.getFooter(tooltipItems, options);
      const size = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position, size);
      const alignment = determineAlignment(this.chart, options, positionAndSize);
      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
      this.xAlign = alignment.xAlign;
      this.yAlign = alignment.yAlign;
      properties = {
        opacity: 1,
        x: backgroundPoint.x,
        y: backgroundPoint.y,
        width: size.width,
        height: size.height,
        caretX: position.x,
        caretY: position.y
      };
    }
    this._tooltipItems = tooltipItems;
    this.$context = void 0;
    if (properties) {
      this._resolveAnimations().update(this, properties);
    }
    if (changed && options.external) {
      options.external.call(this, {
        chart: this.chart,
        tooltip: this,
        replay
      });
    }
  }
  drawCaret(tooltipPoint, ctx, size, options) {
    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
    ctx.lineTo(caretPosition.x1, caretPosition.y1);
    ctx.lineTo(caretPosition.x2, caretPosition.y2);
    ctx.lineTo(caretPosition.x3, caretPosition.y3);
  }
  getCaretPosition(tooltipPoint, size, options) {
    const { xAlign, yAlign } = this;
    const { caretSize, cornerRadius } = options;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
    const { x: ptX, y: ptY } = tooltipPoint;
    const { width, height } = size;
    let x1, x2, x3, y1, y2, y3;
    if (yAlign === "center") {
      y2 = ptY + height / 2;
      if (xAlign === "left") {
        x1 = ptX;
        x2 = x1 - caretSize;
        y1 = y2 + caretSize;
        y3 = y2 - caretSize;
      } else {
        x1 = ptX + width;
        x2 = x1 + caretSize;
        y1 = y2 - caretSize;
        y3 = y2 + caretSize;
      }
      x3 = x1;
    } else {
      if (xAlign === "left") {
        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
      } else if (xAlign === "right") {
        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
      } else {
        x2 = this.caretX;
      }
      if (yAlign === "top") {
        y1 = ptY;
        y2 = y1 - caretSize;
        x1 = x2 - caretSize;
        x3 = x2 + caretSize;
      } else {
        y1 = ptY + height;
        y2 = y1 + caretSize;
        x1 = x2 + caretSize;
        x3 = x2 - caretSize;
      }
      y3 = y1;
    }
    return {
      x1,
      x2,
      x3,
      y1,
      y2,
      y3
    };
  }
  drawTitle(pt, ctx, options) {
    const title = this.title;
    const length = title.length;
    let titleFont, titleSpacing, i;
    if (length) {
      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.titleAlign, options);
      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
      ctx.textBaseline = "middle";
      titleFont = toFont(options.titleFont);
      titleSpacing = options.titleSpacing;
      ctx.fillStyle = options.titleColor;
      ctx.font = titleFont.string;
      for (i = 0; i < length; ++i) {
        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
        pt.y += titleFont.lineHeight + titleSpacing;
        if (i + 1 === length) {
          pt.y += options.titleMarginBottom - titleSpacing;
        }
      }
    }
  }
  _drawColorBox(ctx, pt, i, rtlHelper, options) {
    const labelColor = this.labelColors[i];
    const labelPointStyle = this.labelPointStyles[i];
    const { boxHeight, boxWidth } = options;
    const bodyFont = toFont(options.bodyFont);
    const colorX = getAlignedX(this, "left", options);
    const rtlColorX = rtlHelper.x(colorX);
    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
    const colorY = pt.y + yOffSet;
    if (options.usePointStyle) {
      const drawOptions = {
        radius: Math.min(boxWidth, boxHeight) / 2,
        pointStyle: labelPointStyle.pointStyle,
        rotation: labelPointStyle.rotation,
        borderWidth: 1
      };
      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
      const centerY = colorY + boxHeight / 2;
      ctx.strokeStyle = options.multiKeyBackground;
      ctx.fillStyle = options.multiKeyBackground;
      drawPoint(ctx, drawOptions, centerX, centerY);
      ctx.strokeStyle = labelColor.borderColor;
      ctx.fillStyle = labelColor.backgroundColor;
      drawPoint(ctx, drawOptions, centerX, centerY);
    } else {
      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
      ctx.strokeStyle = labelColor.borderColor;
      ctx.setLineDash(labelColor.borderDash || []);
      ctx.lineDashOffset = labelColor.borderDashOffset || 0;
      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
      const borderRadius = toTRBLCorners(labelColor.borderRadius);
      if (Object.values(borderRadius).some((v2) => v2 !== 0)) {
        ctx.beginPath();
        ctx.fillStyle = options.multiKeyBackground;
        addRoundedRectPath(ctx, {
          x: outerX,
          y: colorY,
          w: boxWidth,
          h: boxHeight,
          radius: borderRadius
        });
        ctx.fill();
        ctx.stroke();
        ctx.fillStyle = labelColor.backgroundColor;
        ctx.beginPath();
        addRoundedRectPath(ctx, {
          x: innerX,
          y: colorY + 1,
          w: boxWidth - 2,
          h: boxHeight - 2,
          radius: borderRadius
        });
        ctx.fill();
      } else {
        ctx.fillStyle = options.multiKeyBackground;
        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
        ctx.fillStyle = labelColor.backgroundColor;
        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
      }
    }
    ctx.fillStyle = this.labelTextColors[i];
  }
  drawBody(pt, ctx, options) {
    const { body } = this;
    const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding } = options;
    const bodyFont = toFont(options.bodyFont);
    let bodyLineHeight = bodyFont.lineHeight;
    let xLinePadding = 0;
    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
    const fillLineOfText = function(line) {
      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
      pt.y += bodyLineHeight + bodySpacing;
    };
    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
    let bodyItem, textColor, lines, i, j, ilen, jlen;
    ctx.textAlign = bodyAlign;
    ctx.textBaseline = "middle";
    ctx.font = bodyFont.string;
    pt.x = getAlignedX(this, bodyAlignForCalculation, options);
    ctx.fillStyle = options.bodyColor;
    each(this.beforeBody, fillLineOfText);
    xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
    for (i = 0, ilen = body.length; i < ilen; ++i) {
      bodyItem = body[i];
      textColor = this.labelTextColors[i];
      ctx.fillStyle = textColor;
      each(bodyItem.before, fillLineOfText);
      lines = bodyItem.lines;
      if (displayColors && lines.length) {
        this._drawColorBox(ctx, pt, i, rtlHelper, options);
        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
      }
      for (j = 0, jlen = lines.length; j < jlen; ++j) {
        fillLineOfText(lines[j]);
        bodyLineHeight = bodyFont.lineHeight;
      }
      each(bodyItem.after, fillLineOfText);
    }
    xLinePadding = 0;
    bodyLineHeight = bodyFont.lineHeight;
    each(this.afterBody, fillLineOfText);
    pt.y -= bodySpacing;
  }
  drawFooter(pt, ctx, options) {
    const footer = this.footer;
    const length = footer.length;
    let footerFont, i;
    if (length) {
      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.footerAlign, options);
      pt.y += options.footerMarginTop;
      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
      ctx.textBaseline = "middle";
      footerFont = toFont(options.footerFont);
      ctx.fillStyle = options.footerColor;
      ctx.font = footerFont.string;
      for (i = 0; i < length; ++i) {
        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
        pt.y += footerFont.lineHeight + options.footerSpacing;
      }
    }
  }
  drawBackground(pt, ctx, tooltipSize, options) {
    const { xAlign, yAlign } = this;
    const { x: x2, y: y2 } = pt;
    const { width, height } = tooltipSize;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(options.cornerRadius);
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.beginPath();
    ctx.moveTo(x2 + topLeft, y2);
    if (yAlign === "top") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + width - topRight, y2);
    ctx.quadraticCurveTo(x2 + width, y2, x2 + width, y2 + topRight);
    if (yAlign === "center" && xAlign === "right") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + width, y2 + height - bottomRight);
    ctx.quadraticCurveTo(x2 + width, y2 + height, x2 + width - bottomRight, y2 + height);
    if (yAlign === "bottom") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + bottomLeft, y2 + height);
    ctx.quadraticCurveTo(x2, y2 + height, x2, y2 + height - bottomLeft);
    if (yAlign === "center" && xAlign === "left") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2, y2 + topLeft);
    ctx.quadraticCurveTo(x2, y2, x2 + topLeft, y2);
    ctx.closePath();
    ctx.fill();
    if (options.borderWidth > 0) {
      ctx.stroke();
    }
  }
  _updateAnimationTarget(options) {
    const chart = this.chart;
    const anims = this.$animations;
    const animX = anims && anims.x;
    const animY = anims && anims.y;
    if (animX || animY) {
      const position = positioners[options.position].call(this, this._active, this._eventPosition);
      if (!position) {
        return;
      }
      const size = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position, this._size);
      const alignment = determineAlignment(chart, options, positionAndSize);
      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
      if (animX._to !== point.x || animY._to !== point.y) {
        this.xAlign = alignment.xAlign;
        this.yAlign = alignment.yAlign;
        this.width = size.width;
        this.height = size.height;
        this.caretX = position.x;
        this.caretY = position.y;
        this._resolveAnimations().update(this, point);
      }
    }
  }
  _willRender() {
    return !!this.opacity;
  }
  draw(ctx) {
    const options = this.options.setContext(this.getContext());
    let opacity = this.opacity;
    if (!opacity) {
      return;
    }
    this._updateAnimationTarget(options);
    const tooltipSize = {
      width: this.width,
      height: this.height
    };
    const pt = {
      x: this.x,
      y: this.y
    };
    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
    const padding = toPadding(options.padding);
    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
    if (options.enabled && hasTooltipContent) {
      ctx.save();
      ctx.globalAlpha = opacity;
      this.drawBackground(pt, ctx, tooltipSize, options);
      overrideTextDirection(ctx, options.textDirection);
      pt.y += padding.top;
      this.drawTitle(pt, ctx, options);
      this.drawBody(pt, ctx, options);
      this.drawFooter(pt, ctx, options);
      restoreTextDirection(ctx, options.textDirection);
      ctx.restore();
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements, eventPosition) {
    const lastActive = this._active;
    const active = activeElements.map(({ datasetIndex, index: index2 }) => {
      const meta = this.chart.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("Cannot find a dataset at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index2],
        index: index2
      };
    });
    const changed = !_elementsEqual(lastActive, active);
    const positionChanged = this._positionChanged(active, eventPosition);
    if (changed || positionChanged) {
      this._active = active;
      this._eventPosition = eventPosition;
      this._ignoreReplayEvents = true;
      this.update(true);
    }
  }
  handleEvent(e, replay, inChartArea = true) {
    if (replay && this._ignoreReplayEvents) {
      return false;
    }
    this._ignoreReplayEvents = false;
    const options = this.options;
    const lastActive = this._active || [];
    const active = this._getActiveElements(e, lastActive, replay, inChartArea);
    const positionChanged = this._positionChanged(active, e);
    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
    if (changed) {
      this._active = active;
      if (options.enabled || options.external) {
        this._eventPosition = {
          x: e.x,
          y: e.y
        };
        this.update(true, replay);
      }
    }
    return changed;
  }
  _getActiveElements(e, lastActive, replay, inChartArea) {
    const options = this.options;
    if (e.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive.filter((i) => this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== void 0);
    }
    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
    if (options.reverse) {
      active.reverse();
    }
    return active;
  }
  _positionChanged(active, e) {
    const { caretX, caretY, options } = this;
    const position = positioners[options.position].call(this, active, e);
    return position !== false && (caretX !== position.x || caretY !== position.y);
  }
}
__publicField(Tooltip, "positioners", positioners);
var plugin_tooltip = {
  id: "tooltip",
  _element: Tooltip,
  positioners,
  afterInit(chart, _args, options) {
    if (options) {
      chart.tooltip = new Tooltip({
        chart,
        options
      });
    }
  },
  beforeUpdate(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  reset(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  afterDraw(chart) {
    const tooltip = chart.tooltip;
    if (tooltip && tooltip._willRender()) {
      const args = {
        tooltip
      };
      if (chart.notifyPlugins("beforeTooltipDraw", {
        ...args,
        cancelable: true
      }) === false) {
        return;
      }
      tooltip.draw(chart.ctx);
      chart.notifyPlugins("afterTooltipDraw", args);
    }
  },
  afterEvent(chart, args) {
    if (chart.tooltip) {
      const useFinalPosition = args.replay;
      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
        args.changed = true;
      }
    }
  },
  defaults: {
    enabled: true,
    external: null,
    position: "average",
    backgroundColor: "rgba(0,0,0,0.8)",
    titleColor: "#fff",
    titleFont: {
      weight: "bold"
    },
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleAlign: "left",
    bodyColor: "#fff",
    bodySpacing: 2,
    bodyFont: {},
    bodyAlign: "left",
    footerColor: "#fff",
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFont: {
      weight: "bold"
    },
    footerAlign: "left",
    padding: 6,
    caretPadding: 2,
    caretSize: 5,
    cornerRadius: 6,
    boxHeight: (ctx, opts) => opts.bodyFont.size,
    boxWidth: (ctx, opts) => opts.bodyFont.size,
    multiKeyBackground: "#fff",
    displayColors: true,
    boxPadding: 0,
    borderColor: "rgba(0,0,0,0)",
    borderWidth: 0,
    animation: {
      duration: 400,
      easing: "easeOutQuart"
    },
    animations: {
      numbers: {
        type: "number",
        properties: [
          "x",
          "y",
          "width",
          "height",
          "caretX",
          "caretY"
        ]
      },
      opacity: {
        easing: "linear",
        duration: 200
      }
    },
    callbacks: defaultCallbacks
  },
  defaultRoutes: {
    bodyFont: "font",
    footerFont: "font",
    titleFont: "font"
  },
  descriptors: {
    _scriptable: (name) => name !== "filter" && name !== "itemSort" && name !== "external",
    _indexable: false,
    callbacks: {
      _scriptable: false,
      _indexable: false
    },
    animation: {
      _fallback: false
    },
    animations: {
      _fallback: "animation"
    }
  },
  additionalOptionScopes: [
    "interaction"
  ]
};
const addIfString = (labels, raw, index2, addedLabels) => {
  if (typeof raw === "string") {
    index2 = labels.push(raw) - 1;
    addedLabels.unshift({
      index: index2,
      label: raw
    });
  } else if (isNaN(raw)) {
    index2 = null;
  }
  return index2;
};
function findOrAddLabel(labels, raw, index2, addedLabels) {
  const first = labels.indexOf(raw);
  if (first === -1) {
    return addIfString(labels, raw, index2, addedLabels);
  }
  const last = labels.lastIndexOf(raw);
  return first !== last ? index2 : first;
}
const validIndex = (index2, max) => index2 === null ? null : _limitValue(Math.round(index2), 0, max);
function _getLabelForValue(value) {
  const labels = this.getLabels();
  if (value >= 0 && value < labels.length) {
    return labels[value];
  }
  return value;
}
class CategoryScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this._startValue = void 0;
    this._valueRange = 0;
    this._addedLabels = [];
  }
  init(scaleOptions) {
    const added = this._addedLabels;
    if (added.length) {
      const labels = this.getLabels();
      for (const { index: index2, label } of added) {
        if (labels[index2] === label) {
          labels.splice(index2, 1);
        }
      }
      this._addedLabels = [];
    }
    super.init(scaleOptions);
  }
  parse(raw, index2) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    const labels = this.getLabels();
    index2 = isFinite(index2) && labels[index2] === raw ? index2 : findOrAddLabel(labels, raw, valueOrDefault(index2, raw), this._addedLabels);
    return validIndex(index2, labels.length - 1);
  }
  determineDataLimits() {
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min, max } = this.getMinMax(true);
    if (this.options.bounds === "ticks") {
      if (!minDefined) {
        min = 0;
      }
      if (!maxDefined) {
        max = this.getLabels().length - 1;
      }
    }
    this.min = min;
    this.max = max;
  }
  buildTicks() {
    const min = this.min;
    const max = this.max;
    const offset = this.options.offset;
    const ticks = [];
    let labels = this.getLabels();
    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
    this._startValue = this.min - (offset ? 0.5 : 0);
    for (let value = min; value <= max; value++) {
      ticks.push({
        value
      });
    }
    return ticks;
  }
  getLabelForValue(value) {
    return _getLabelForValue.call(this, value);
  }
  configure() {
    super.configure();
    if (!this.isHorizontal()) {
      this._reversePixels = !this._reversePixels;
    }
  }
  getPixelForValue(value) {
    if (typeof value !== "number") {
      value = this.parse(value);
    }
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getPixelForTick(index2) {
    const ticks = this.ticks;
    if (index2 < 0 || index2 > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index2].value);
  }
  getValueForPixel(pixel) {
    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
  }
  getBasePixel() {
    return this.bottom;
  }
}
__publicField(CategoryScale, "id", "category");
__publicField(CategoryScale, "defaults", {
  ticks: {
    callback: _getLabelForValue
  }
});
function generateTicks$1(generationOptions, dataRange) {
  const ticks = [];
  const MIN_SPACING = 1e-14;
  const { bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds } = generationOptions;
  const unit = step || 1;
  const maxSpaces = maxTicks - 1;
  const { min: rmin, max: rmax } = dataRange;
  const minDefined = !isNullOrUndef(min);
  const maxDefined = !isNullOrUndef(max);
  const countDefined = !isNullOrUndef(count);
  const minSpacing = (rmax - rmin) / (maxDigits + 1);
  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
  let factor, niceMin, niceMax, numSpaces;
  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
    return [
      {
        value: rmin
      },
      {
        value: rmax
      }
    ];
  }
  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
  if (numSpaces > maxSpaces) {
    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;
  }
  if (!isNullOrUndef(precision)) {
    factor = Math.pow(10, precision);
    spacing = Math.ceil(spacing * factor) / factor;
  }
  if (bounds === "ticks") {
    niceMin = Math.floor(rmin / spacing) * spacing;
    niceMax = Math.ceil(rmax / spacing) * spacing;
  } else {
    niceMin = rmin;
    niceMax = rmax;
  }
  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1e3)) {
    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
    spacing = (max - min) / numSpaces;
    niceMin = min;
    niceMax = max;
  } else if (countDefined) {
    niceMin = minDefined ? min : niceMin;
    niceMax = maxDefined ? max : niceMax;
    numSpaces = count - 1;
    spacing = (niceMax - niceMin) / numSpaces;
  } else {
    numSpaces = (niceMax - niceMin) / spacing;
    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1e3)) {
      numSpaces = Math.round(numSpaces);
    } else {
      numSpaces = Math.ceil(numSpaces);
    }
  }
  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));
  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
  niceMin = Math.round(niceMin * factor) / factor;
  niceMax = Math.round(niceMax * factor) / factor;
  let j = 0;
  if (minDefined) {
    if (includeBounds && niceMin !== min) {
      ticks.push({
        value: min
      });
      if (niceMin < min) {
        j++;
      }
      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
        j++;
      }
    } else if (niceMin < min) {
      j++;
    }
  }
  for (; j < numSpaces; ++j) {
    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;
    if (maxDefined && tickValue > max) {
      break;
    }
    ticks.push({
      value: tickValue
    });
  }
  if (maxDefined && includeBounds && niceMax !== max) {
    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
      ticks[ticks.length - 1].value = max;
    } else {
      ticks.push({
        value: max
      });
    }
  } else if (!maxDefined || niceMax === max) {
    ticks.push({
      value: niceMax
    });
  }
  return ticks;
}
function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {
  const rad = toRadians(minRotation);
  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 1e-3;
  const length = 0.75 * minSpacing * ("" + value).length;
  return Math.min(minSpacing / ratio, length);
}
class LinearScaleBase extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = void 0;
    this.end = void 0;
    this._startValue = void 0;
    this._endValue = void 0;
    this._valueRange = 0;
  }
  parse(raw, index2) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) {
      return null;
    }
    return +raw;
  }
  handleTickRangeOptions() {
    const { beginAtZero } = this.options;
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min, max } = this;
    const setMin = (v2) => min = minDefined ? min : v2;
    const setMax = (v2) => max = maxDefined ? max : v2;
    if (beginAtZero) {
      const minSign = sign(min);
      const maxSign = sign(max);
      if (minSign < 0 && maxSign < 0) {
        setMax(0);
      } else if (minSign > 0 && maxSign > 0) {
        setMin(0);
      }
    }
    if (min === max) {
      let offset = max === 0 ? 1 : Math.abs(max * 0.05);
      setMax(max + offset);
      if (!beginAtZero) {
        setMin(min - offset);
      }
    }
    this.min = min;
    this.max = max;
  }
  getTickLimit() {
    const tickOpts = this.options.ticks;
    let { maxTicksLimit, stepSize } = tickOpts;
    let maxTicks;
    if (stepSize) {
      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
      if (maxTicks > 1e3) {
        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
        maxTicks = 1e3;
      }
    } else {
      maxTicks = this.computeTickLimit();
      maxTicksLimit = maxTicksLimit || 11;
    }
    if (maxTicksLimit) {
      maxTicks = Math.min(maxTicksLimit, maxTicks);
    }
    return maxTicks;
  }
  computeTickLimit() {
    return Number.POSITIVE_INFINITY;
  }
  buildTicks() {
    const opts = this.options;
    const tickOpts = opts.ticks;
    let maxTicks = this.getTickLimit();
    maxTicks = Math.max(2, maxTicks);
    const numericGeneratorOptions = {
      maxTicks,
      bounds: opts.bounds,
      min: opts.min,
      max: opts.max,
      precision: tickOpts.precision,
      step: tickOpts.stepSize,
      count: tickOpts.count,
      maxDigits: this._maxDigits(),
      horizontal: this.isHorizontal(),
      minRotation: tickOpts.minRotation || 0,
      includeBounds: tickOpts.includeBounds !== false
    };
    const dataRange = this._range || this;
    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
    if (opts.bounds === "ticks") {
      _setMinAndMaxByKey(ticks, this, "value");
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  configure() {
    const ticks = this.ticks;
    let start = this.min;
    let end = this.max;
    super.configure();
    if (this.options.offset && ticks.length) {
      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
      start -= offset;
      end += offset;
    }
    this._startValue = start;
    this._endValue = end;
    this._valueRange = end - start;
  }
  getLabelForValue(value) {
    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
  }
}
class LinearScale extends LinearScaleBase {
  determineDataLimits() {
    const { min, max } = this.getMinMax(true);
    this.min = isNumberFinite(min) ? min : 0;
    this.max = isNumberFinite(max) ? max : 1;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    const horizontal = this.isHorizontal();
    const length = horizontal ? this.width : this.height;
    const minRotation = toRadians(this.options.ticks.minRotation);
    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 1e-3;
    const tickFont = this._resolveTickFontOptions(0);
    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
  }
  getPixelForValue(value) {
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
  }
}
__publicField(LinearScale, "id", "linear");
__publicField(LinearScale, "defaults", {
  ticks: {
    callback: Ticks.formatters.numeric
  }
});
const INTERVALS = {
  millisecond: {
    common: true,
    size: 1,
    steps: 1e3
  },
  second: {
    common: true,
    size: 1e3,
    steps: 60
  },
  minute: {
    common: true,
    size: 6e4,
    steps: 60
  },
  hour: {
    common: true,
    size: 36e5,
    steps: 24
  },
  day: {
    common: true,
    size: 864e5,
    steps: 30
  },
  week: {
    common: false,
    size: 6048e5,
    steps: 4
  },
  month: {
    common: true,
    size: 2628e6,
    steps: 12
  },
  quarter: {
    common: false,
    size: 7884e6,
    steps: 4
  },
  year: {
    common: true,
    size: 3154e7
  }
};
const UNITS = /* @__PURE__ */ Object.keys(INTERVALS);
function sorter(a, b2) {
  return a - b2;
}
function parse(scale2, input) {
  if (isNullOrUndef(input)) {
    return null;
  }
  const adapter = scale2._adapter;
  const { parser, round: round2, isoWeekday } = scale2._parseOpts;
  let value = input;
  if (typeof parser === "function") {
    value = parser(value);
  }
  if (!isNumberFinite(value)) {
    value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
  }
  if (value === null) {
    return null;
  }
  if (round2) {
    value = round2 === "week" && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round2);
  }
  return +value;
}
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
  const ilen = UNITS.length;
  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
    const interval = INTERVALS[UNITS[i]];
    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
      return UNITS[i];
    }
  }
  return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale2, numTicks, minUnit, min, max) {
  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
    const unit = UNITS[i];
    if (INTERVALS[unit].common && scale2._adapter.diff(max, min, unit) >= numTicks - 1) {
      return unit;
    }
  }
  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
    if (INTERVALS[UNITS[i]].common) {
      return UNITS[i];
    }
  }
}
function addTick(ticks, time2, timestamps) {
  if (!timestamps) {
    ticks[time2] = true;
  } else if (timestamps.length) {
    const { lo, hi: hi2 } = _lookup(timestamps, time2);
    const timestamp = timestamps[lo] >= time2 ? timestamps[lo] : timestamps[hi2];
    ticks[timestamp] = true;
  }
}
function setMajorTicks(scale2, ticks, map2, majorUnit) {
  const adapter = scale2._adapter;
  const first = +adapter.startOf(ticks[0].value, majorUnit);
  const last = ticks[ticks.length - 1].value;
  let major, index2;
  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    index2 = map2[major];
    if (index2 >= 0) {
      ticks[index2].major = true;
    }
  }
  return ticks;
}
function ticksFromTimestamps(scale2, values, majorUnit) {
  const ticks = [];
  const map2 = {};
  const ilen = values.length;
  let i, value;
  for (i = 0; i < ilen; ++i) {
    value = values[i];
    map2[value] = i;
    ticks.push({
      value,
      major: false
    });
  }
  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale2, ticks, map2, majorUnit);
}
class TimeScale extends Scale {
  constructor(props) {
    super(props);
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
    this._unit = "day";
    this._majorUnit = void 0;
    this._offsets = {};
    this._normalized = false;
    this._parseOpts = void 0;
  }
  init(scaleOpts, opts = {}) {
    const time2 = scaleOpts.time || (scaleOpts.time = {});
    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
    adapter.init(opts);
    mergeIf(time2.displayFormats, adapter.formats());
    this._parseOpts = {
      parser: time2.parser,
      round: time2.round,
      isoWeekday: time2.isoWeekday
    };
    super.init(scaleOpts);
    this._normalized = opts.normalized;
  }
  parse(raw, index2) {
    if (raw === void 0) {
      return null;
    }
    return parse(this, raw);
  }
  beforeLayout() {
    super.beforeLayout();
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
  }
  determineDataLimits() {
    const options = this.options;
    const adapter = this._adapter;
    const unit = options.time.unit || "day";
    let { min, max, minDefined, maxDefined } = this.getUserBounds();
    function _applyBounds(bounds) {
      if (!minDefined && !isNaN(bounds.min)) {
        min = Math.min(min, bounds.min);
      }
      if (!maxDefined && !isNaN(bounds.max)) {
        max = Math.max(max, bounds.max);
      }
    }
    if (!minDefined || !maxDefined) {
      _applyBounds(this._getLabelBounds());
      if (options.bounds !== "ticks" || options.ticks.source !== "labels") {
        _applyBounds(this.getMinMax(false));
      }
    }
    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
    this.min = Math.min(min, max - 1);
    this.max = Math.max(min + 1, max);
  }
  _getLabelBounds() {
    const arr = this.getLabelTimestamps();
    let min = Number.POSITIVE_INFINITY;
    let max = Number.NEGATIVE_INFINITY;
    if (arr.length) {
      min = arr[0];
      max = arr[arr.length - 1];
    }
    return {
      min,
      max
    };
  }
  buildTicks() {
    const options = this.options;
    const timeOpts = options.time;
    const tickOpts = options.ticks;
    const timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
    if (options.bounds === "ticks" && timestamps.length) {
      this.min = this._userMin || timestamps[0];
      this.max = this._userMax || timestamps[timestamps.length - 1];
    }
    const min = this.min;
    const max = this.max;
    const ticks = _filterBetween(timestamps, min, max);
    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
    this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? void 0 : determineMajorUnit(this._unit);
    this.initOffsets(timestamps);
    if (options.reverse) {
      ticks.reverse();
    }
    return ticksFromTimestamps(this, ticks, this._majorUnit);
  }
  afterAutoSkip() {
    if (this.options.offsetAfterAutoskip) {
      this.initOffsets(this.ticks.map((tick) => +tick.value));
    }
  }
  initOffsets(timestamps = []) {
    let start = 0;
    let end = 0;
    let first, last;
    if (this.options.offset && timestamps.length) {
      first = this.getDecimalForValue(timestamps[0]);
      if (timestamps.length === 1) {
        start = 1 - first;
      } else {
        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
      }
      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
      if (timestamps.length === 1) {
        end = last;
      } else {
        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
      }
    }
    const limit = timestamps.length < 3 ? 0.5 : 0.25;
    start = _limitValue(start, 0, limit);
    end = _limitValue(end, 0, limit);
    this._offsets = {
      start,
      end,
      factor: 1 / (start + 1 + end)
    };
  }
  _generate() {
    const adapter = this._adapter;
    const min = this.min;
    const max = this.max;
    const options = this.options;
    const timeOpts = options.time;
    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
    const stepSize = valueOrDefault(options.ticks.stepSize, 1);
    const weekday = minor === "week" ? timeOpts.isoWeekday : false;
    const hasWeekday = isNumber(weekday) || weekday === true;
    const ticks = {};
    let first = min;
    let time2, count;
    if (hasWeekday) {
      first = +adapter.startOf(first, "isoWeek", weekday);
    }
    first = +adapter.startOf(first, hasWeekday ? "day" : minor);
    if (adapter.diff(max, min, minor) > 1e5 * stepSize) {
      throw new Error(min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor);
    }
    const timestamps = options.ticks.source === "data" && this.getDataTimestamps();
    for (time2 = first, count = 0; time2 < max; time2 = +adapter.add(time2, stepSize, minor), count++) {
      addTick(ticks, time2, timestamps);
    }
    if (time2 === max || options.bounds === "ticks" || count === 1) {
      addTick(ticks, time2, timestamps);
    }
    return Object.keys(ticks).sort(sorter).map((x2) => +x2);
  }
  getLabelForValue(value) {
    const adapter = this._adapter;
    const timeOpts = this.options.time;
    if (timeOpts.tooltipFormat) {
      return adapter.format(value, timeOpts.tooltipFormat);
    }
    return adapter.format(value, timeOpts.displayFormats.datetime);
  }
  format(value, format) {
    const options = this.options;
    const formats = options.time.displayFormats;
    const unit = this._unit;
    const fmt = format || formats[unit];
    return this._adapter.format(value, fmt);
  }
  _tickFormatFunction(time2, index2, ticks, format) {
    const options = this.options;
    const formatter = options.ticks.callback;
    if (formatter) {
      return callback(formatter, [
        time2,
        index2,
        ticks
      ], this);
    }
    const formats = options.time.displayFormats;
    const unit = this._unit;
    const majorUnit = this._majorUnit;
    const minorFormat = unit && formats[unit];
    const majorFormat = majorUnit && formats[majorUnit];
    const tick = ticks[index2];
    const major = majorUnit && majorFormat && tick && tick.major;
    return this._adapter.format(time2, format || (major ? majorFormat : minorFormat));
  }
  generateTickLabels(ticks) {
    let i, ilen, tick;
    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      tick.label = this._tickFormatFunction(tick.value, i, ticks);
    }
  }
  getDecimalForValue(value) {
    return value === null ? NaN : (value - this.min) / (this.max - this.min);
  }
  getPixelForValue(value) {
    const offsets = this._offsets;
    const pos = this.getDecimalForValue(value);
    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return this.min + pos * (this.max - this.min);
  }
  _getLabelSize(label) {
    const ticksOpts = this.options.ticks;
    const tickLabelWidth = this.ctx.measureText(label).width;
    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
    const cosRotation = Math.cos(angle);
    const sinRotation = Math.sin(angle);
    const tickFontSize = this._resolveTickFontOptions(0).size;
    return {
      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
    };
  }
  _getLabelCapacity(exampleTime) {
    const timeOpts = this.options.time;
    const displayFormats = timeOpts.displayFormats;
    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
      exampleTime
    ], this._majorUnit), format);
    const size = this._getLabelSize(exampleLabel);
    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
    return capacity > 0 ? capacity : 1;
  }
  getDataTimestamps() {
    let timestamps = this._cache.data || [];
    let i, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const metas = this.getMatchingVisibleMetas();
    if (this._normalized && metas.length) {
      return this._cache.data = metas[0].controller.getAllParsedValues(this);
    }
    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
    }
    return this._cache.data = this.normalize(timestamps);
  }
  getLabelTimestamps() {
    const timestamps = this._cache.labels || [];
    let i, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const labels = this.getLabels();
    for (i = 0, ilen = labels.length; i < ilen; ++i) {
      timestamps.push(parse(this, labels[i]));
    }
    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
  }
  normalize(values) {
    return _arrayUnique(values.sort(sorter));
  }
}
__publicField(TimeScale, "id", "time");
__publicField(TimeScale, "defaults", {
  bounds: "data",
  adapters: {},
  time: {
    parser: false,
    unit: false,
    round: false,
    isoWeekday: false,
    minUnit: "millisecond",
    displayFormats: {}
  },
  ticks: {
    source: "auto",
    callback: false,
    major: {
      enabled: false
    }
  }
});
function interpolate(table, val, reverse) {
  let lo = 0;
  let hi2 = table.length - 1;
  let prevSource, nextSource, prevTarget, nextTarget;
  if (reverse) {
    if (val >= table[lo].pos && val <= table[hi2].pos) {
      ({ lo, hi: hi2 } = _lookupByKey(table, "pos", val));
    }
    ({ pos: prevSource, time: prevTarget } = table[lo]);
    ({ pos: nextSource, time: nextTarget } = table[hi2]);
  } else {
    if (val >= table[lo].time && val <= table[hi2].time) {
      ({ lo, hi: hi2 } = _lookupByKey(table, "time", val));
    }
    ({ time: prevSource, pos: prevTarget } = table[lo]);
    ({ time: nextSource, pos: nextTarget } = table[hi2]);
  }
  const span = nextSource - prevSource;
  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class TimeSeriesScale extends TimeScale {
  constructor(props) {
    super(props);
    this._table = [];
    this._minPos = void 0;
    this._tableRange = void 0;
  }
  initOffsets() {
    const timestamps = this._getTimestampsForTable();
    const table = this._table = this.buildLookupTable(timestamps);
    this._minPos = interpolate(table, this.min);
    this._tableRange = interpolate(table, this.max) - this._minPos;
    super.initOffsets(timestamps);
  }
  buildLookupTable(timestamps) {
    const { min, max } = this;
    const items = [];
    const table = [];
    let i, ilen, prev, curr, next;
    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
      curr = timestamps[i];
      if (curr >= min && curr <= max) {
        items.push(curr);
      }
    }
    if (items.length < 2) {
      return [
        {
          time: min,
          pos: 0
        },
        {
          time: max,
          pos: 1
        }
      ];
    }
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      next = items[i + 1];
      prev = items[i - 1];
      curr = items[i];
      if (Math.round((next + prev) / 2) !== curr) {
        table.push({
          time: curr,
          pos: i / (ilen - 1)
        });
      }
    }
    return table;
  }
  _generate() {
    const min = this.min;
    const max = this.max;
    let timestamps = super.getDataTimestamps();
    if (!timestamps.includes(min) || !timestamps.length) {
      timestamps.splice(0, 0, min);
    }
    if (!timestamps.includes(max) || timestamps.length === 1) {
      timestamps.push(max);
    }
    return timestamps.sort((a, b2) => a - b2);
  }
  _getTimestampsForTable() {
    let timestamps = this._cache.all || [];
    if (timestamps.length) {
      return timestamps;
    }
    const data = this.getDataTimestamps();
    const label = this.getLabelTimestamps();
    if (data.length && label.length) {
      timestamps = this.normalize(data.concat(label));
    } else {
      timestamps = data.length ? data : label;
    }
    timestamps = this._cache.all = timestamps;
    return timestamps;
  }
  getDecimalForValue(value) {
    return (interpolate(this._table, value) - this._minPos) / this._tableRange;
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
  }
}
__publicField(TimeSeriesScale, "id", "timeseries");
__publicField(TimeSeriesScale, "defaults", TimeScale.defaults);
const defaultDatasetIdKey = "label";
function reforwardRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}
function setOptions(chart, nextOptions) {
  const options = chart.options;
  if (options && nextOptions) {
    Object.assign(options, nextOptions);
  }
}
function setLabels(currentData, nextLabels) {
  currentData.labels = nextLabels;
}
function setDatasets(currentData, nextDatasets) {
  let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;
  const addedDatasets = [];
  currentData.datasets = nextDatasets.map((nextDataset) => {
    const currentDataset = currentData.datasets.find((dataset) => dataset[datasetIdKey] === nextDataset[datasetIdKey]);
    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {
      return {
        ...nextDataset
      };
    }
    addedDatasets.push(currentDataset);
    Object.assign(currentDataset, nextDataset);
    return currentDataset;
  });
}
function cloneData(data) {
  let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;
  const nextData = {
    labels: [],
    datasets: []
  };
  setLabels(nextData, data.labels);
  setDatasets(nextData, data.datasets, datasetIdKey);
  return nextData;
}
function ChartComponent(props, ref) {
  const { height = 150, width = 300, redraw = false, datasetIdKey, type, data, options, plugins = [], fallbackContent, updateMode, ...canvasProps } = props;
  const canvasRef = reactExports.useRef(null);
  const chartRef = reactExports.useRef(null);
  const renderChart = () => {
    if (!canvasRef.current) return;
    chartRef.current = new Chart$1(canvasRef.current, {
      type,
      data: cloneData(data, datasetIdKey),
      options: options && {
        ...options
      },
      plugins
    });
    reforwardRef(ref, chartRef.current);
  };
  const destroyChart = () => {
    reforwardRef(ref, null);
    if (chartRef.current) {
      chartRef.current.destroy();
      chartRef.current = null;
    }
  };
  reactExports.useEffect(() => {
    if (!redraw && chartRef.current && options) {
      setOptions(chartRef.current, options);
    }
  }, [
    redraw,
    options
  ]);
  reactExports.useEffect(() => {
    if (!redraw && chartRef.current) {
      setLabels(chartRef.current.config.data, data.labels);
    }
  }, [
    redraw,
    data.labels
  ]);
  reactExports.useEffect(() => {
    if (!redraw && chartRef.current && data.datasets) {
      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);
    }
  }, [
    redraw,
    data.datasets
  ]);
  reactExports.useEffect(() => {
    if (!chartRef.current) return;
    if (redraw) {
      destroyChart();
      setTimeout(renderChart);
    } else {
      chartRef.current.update(updateMode);
    }
  }, [
    redraw,
    options,
    data.labels,
    data.datasets,
    updateMode
  ]);
  reactExports.useEffect(() => {
    if (!chartRef.current) return;
    destroyChart();
    setTimeout(renderChart);
  }, [
    type
  ]);
  reactExports.useEffect(() => {
    renderChart();
    return () => destroyChart();
  }, []);
  return /* @__PURE__ */ React$2.createElement("canvas", {
    ref: canvasRef,
    role: "img",
    height,
    width,
    ...canvasProps
  }, fallbackContent);
}
const Chart = /* @__PURE__ */ reactExports.forwardRef(ChartComponent);
function createTypedChart(type, registerables) {
  Chart$1.register(registerables);
  return /* @__PURE__ */ reactExports.forwardRef((props, ref) => /* @__PURE__ */ React$2.createElement(Chart, {
    ...props,
    ref,
    type
  }));
}
const Line = /* @__PURE__ */ createTypedChart("line", LineController);
Chart$1.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  plugin_title,
  plugin_tooltip,
  plugin_legend,
  index$1
);
const DashboardPage = () => {
  var _a2;
  const { withSessionCheck } = useAuthSession();
  const navigate = useNavigate();
  const chartRef = reactExports.useRef(null);
  const chartContainerRef = reactExports.useRef(null);
  const [data, setData] = reactExports.useState({
    totalPedidos: 0,
    pedidosHoje: 0,
    faturamentoTotal: 0,
    faturamentoHoje: 0,
    clientesUnicos: 0,
    entregasRealizadas: 0,
    valorFaturado: 0,
    ticketMedio: 0,
    crescimento: 0
  });
  const [storeStatus, setStoreStatus] = reactExports.useState({
    aberto: true,
    aberto_manual: false,
    modo_operacao: "manual"
  });
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [currentTime, setCurrentTime] = reactExports.useState(/* @__PURE__ */ new Date());
  const updateStatusRef = reactExports.useRef(false);
  const [isAdmin, setIsAdmin] = reactExports.useState(false);
  const [usuarios, setUsuarios] = reactExports.useState([]);
  const [usuarioSelecionado, setUsuarioSelecionado] = reactExports.useState("todos");
  const [showFilters, setShowFilters] = reactExports.useState(false);
  const [lastUpdate, setLastUpdate] = reactExports.useState(/* @__PURE__ */ new Date());
  const [produtosEstoqueMinimo, setProdutosEstoqueMinimo] = reactExports.useState(0);
  const [chartData, setChartData] = reactExports.useState({
    labels: [],
    datasets: []
  });
  reactExports.useEffect(() => {
    loadDashboardData();
    loadStoreStatus();
    checkStoreStatus();
    checkUserType();
    loadUsuarios();
    loadProdutosEstoqueMinimo();
    const timer = setInterval(() => {
      setCurrentTime(/* @__PURE__ */ new Date());
      checkStoreStatus();
    }, 6e4);
    return () => {
      clearInterval(timer);
      if (chartRef.current) {
        chartRef.current.destroy();
      }
    };
  }, []);
  reactExports.useEffect(() => {
    loadDashboardData();
  }, [usuarioSelecionado]);
  reactExports.useEffect(() => {
    if (chartRef.current) {
      chartRef.current.update();
    }
  }, [chartData]);
  const checkUserType = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select(`
          tipo_user_config:tipo_user_config_id(tipo)
        `).eq("id", userData.user.id).single();
      if (usuarioData == null ? void 0 : usuarioData.tipo_user_config) {
        setIsAdmin(usuarioData.tipo_user_config.tipo === "admin");
      }
    } catch (error) {
      console.error("Erro ao verificar tipo de usuário:", error);
    }
  };
  const loadUsuarios = async () => {
    var _a3;
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select(`
          empresa_id,
          tipo_user_config:tipo_user_config_id(tipo)
        `).eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id) || ((_a3 = usuarioData.tipo_user_config) == null ? void 0 : _a3.tipo) !== "admin") return;
      const { data: usuariosData } = await supabase.from("usuarios").select(`
          id,
          nome,
          email,
          tipo_user_config:tipo_user_config_id(tipo)
        `).eq("empresa_id", usuarioData.empresa_id).order("nome");
      if (usuariosData) {
        setUsuarios(usuariosData);
      }
    } catch (error) {
      console.error("Erro ao carregar usuários:", error);
    }
  };
  const loadProdutosEstoqueMinimo = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: produtos } = await supabase.from("produtos").select("id, nome, estoque_atual, estoque_minimo").eq("empresa_id", usuarioData.empresa_id).eq("estoque_minimo_ativo", true).eq("deletado", false).gt("estoque_minimo", 0);
      if (produtos) {
        const produtosAbaixoMinimo = produtos.filter(
          (produto) => produto.estoque_atual <= produto.estoque_minimo
        );
        setProdutosEstoqueMinimo(produtosAbaixoMinimo.length);
      }
    } catch (error) {
      console.error("Erro ao carregar produtos com estoque mínimo:", error);
    }
  };
  const loadStoreStatus = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: statusData } = await supabase.from("status_loja").select("*").eq("empresa_id", usuarioData.empresa_id).maybeSingle();
      if (statusData) {
        setStoreStatus(statusData);
      } else {
        const { data: newStatus } = await supabase.from("status_loja").insert([{
          empresa_id: usuarioData.empresa_id,
          aberto: true,
          aberto_manual: false,
          modo_operacao: "manual"
        }]).select().single();
        if (newStatus) {
          setStoreStatus(newStatus);
        }
      }
    } catch (error) {
      console.error("Error loading store status:", error);
    }
  };
  const checkStoreStatus = async () => {
    if (updateStatusRef.current) return;
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      if (storeStatus.modo_operacao === "automatico") {
        const now2 = /* @__PURE__ */ new Date();
        const currentDay = now2.getDay();
        const currentTime2 = now2.getHours() * 60 + now2.getMinutes();
        const { data: horario } = await supabase.from("horario_atendimento").select("*").eq("empresa_id", usuarioData.empresa_id).eq("dia_semana", currentDay).maybeSingle();
        if (!horario) {
          if (!storeStatus.aberto_manual) {
            await updateStoreStatus(false, false);
          }
          return;
        }
        const [horaAbertura, minutoAbertura] = horario.hora_abertura.split(":").map(Number);
        const [horaFechamento, minutoFechamento] = horario.hora_fechamento.split(":").map(Number);
        const aberturaMinutos = horaAbertura * 60 + minutoAbertura;
        const fechamentoMinutos = horaFechamento * 60 + minutoFechamento;
        const shouldBeOpen = currentTime2 >= aberturaMinutos && currentTime2 <= fechamentoMinutos;
        if (!storeStatus.aberto_manual && storeStatus.aberto !== shouldBeOpen) {
          await updateStoreStatus(shouldBeOpen, false);
        }
      }
    } catch (error) {
      console.error("Error checking store status:", error);
    }
  };
  const updateStoreStatus = async (aberto, manual) => {
    if (isLoading) return;
    try {
      setIsLoading(true);
      updateStatusRef.current = true;
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: updatedStatus, error } = await supabase.from("status_loja").update({
        aberto,
        aberto_manual: manual
      }).eq("empresa_id", usuarioData.empresa_id).select().single();
      if (error) throw error;
      if (updatedStatus) {
        setStoreStatus((prev) => ({ ...prev, ...updatedStatus }));
        showMessage("success", `Loja ${aberto ? "aberta" : "fechada"} com sucesso!`);
      }
    } catch (error) {
      console.error("Error updating store status:", error);
      showMessage("error", "Erro ao atualizar status da loja");
    } finally {
      setIsLoading(false);
      setTimeout(() => {
        updateStatusRef.current = false;
      }, 1e3);
    }
  };
  const loadDashboardData = async () => {
    await withSessionCheck(async () => {
      var _a3, _b2;
      setIsLoading(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select(`
          empresa_id,
          tipo_user_config:tipo_user_config_id(tipo)
        `).eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      let query = supabase.from("pedidos").select("*").eq("empresa_id", usuarioData.empresa_id);
      if (usuarioSelecionado !== "todos" && ((_a3 = usuarioData.tipo_user_config) == null ? void 0 : _a3.tipo) === "admin") {
        query = query.eq("usuario_id", usuarioSelecionado);
      } else if (((_b2 = usuarioData.tipo_user_config) == null ? void 0 : _b2.tipo) !== "admin") {
        query = query.eq("usuario_id", userData.user.id);
      }
      const { data: pedidos } = await query;
      if (!pedidos) return;
      setLastUpdate(/* @__PURE__ */ new Date());
      const hoje = /* @__PURE__ */ new Date();
      hoje.setHours(0, 0, 0, 0);
      const pedidosHoje = pedidos.filter((p2) => new Date(p2.created_at) >= hoje);
      const pedidosFaturados = pedidos.filter((p2) => p2.status === "entregue");
      const entregasRealizadas = pedidosFaturados.length;
      const valorFaturado = pedidosFaturados.reduce((acc, p2) => acc + p2.valor_total, 0);
      const clientesUnicos = new Set(pedidos.map((p2) => p2.cliente_telefone)).size;
      const faturamentoTotal = pedidos.reduce((acc, p2) => acc + p2.valor_total, 0);
      const faturamentoHoje = pedidosHoje.reduce((acc, p2) => acc + p2.valor_total, 0);
      const ticketMedio = faturamentoTotal / pedidos.length || 0;
      const ontem = new Date(hoje);
      ontem.setDate(ontem.getDate() - 1);
      const pedidosOntem = pedidos.filter((p2) => {
        const data2 = new Date(p2.created_at);
        return data2 >= ontem && data2 < hoje;
      });
      const crescimento = pedidosOntem.length > 0 ? (pedidosHoje.length - pedidosOntem.length) / pedidosOntem.length * 100 : 0;
      setData({
        totalPedidos: pedidos.length,
        pedidosHoje: pedidosHoje.length,
        faturamentoTotal,
        faturamentoHoje,
        clientesUnicos,
        entregasRealizadas,
        valorFaturado,
        ticketMedio,
        crescimento
      });
      const last7Days = Array.from({ length: 7 }, (_2, i) => {
        const date = /* @__PURE__ */ new Date();
        date.setDate(date.getDate() - i);
        return date;
      }).reverse();
      const chartLabels = last7Days.map(
        (date) => date.toLocaleDateString("pt-BR", { weekday: "short" })
      );
      const chartValues = last7Days.map((date) => {
        const startOfDay = new Date(date);
        startOfDay.setHours(0, 0, 0, 0);
        const endOfDay = new Date(date);
        endOfDay.setHours(23, 59, 59, 999);
        const valorDia = pedidos.filter((p2) => {
          const orderDate = new Date(p2.created_at);
          return orderDate >= startOfDay && orderDate <= endOfDay;
        }).reduce((acc, p2) => acc + p2.valor_total, 0);
        return Math.round(valorDia * 100) / 100;
      });
      setChartData({
        labels: chartLabels,
        datasets: [
          {
            fill: true,
            label: "Faturamento",
            data: chartValues,
            borderColor: "rgb(59, 130, 246)",
            backgroundColor: "rgba(59, 130, 246, 0.1)",
            tension: 0.4
          }
        ]
      });
    });
    setIsLoading(false);
  };
  const formatCurrency = (value) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(value);
  };
  const handleEstoqueMinimoClick = () => {
    if (produtosEstoqueMinimo > 0) {
      navigate("/dashboard/estoque-minimo");
    }
  };
  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false
      },
      title: {
        display: false
      },
      tooltip: {
        callbacks: {
          label: function(context) {
            return formatCurrency(context.parsed.y);
          }
        }
      }
    },
    scales: {
      y: {
        beginAtZero: true,
        grid: {
          color: "rgba(255, 255, 255, 0.1)"
        },
        ticks: {
          color: "#9CA3AF",
          callback: (value) => formatCurrency(value),
          maxTicksLimit: 5
          // Limitar o número de ticks no eixo Y
        },
        // Definir limites automáticos para evitar valores extremos
        adapters: {
          date: {
            locale: "pt-BR"
          }
        }
      },
      x: {
        grid: {
          display: false
        },
        ticks: {
          color: "#9CA3AF"
        }
      }
    }
  };
  const cards = [
    // Card "Status da Loja" removido
    {
      title: "Pedidos Hoje",
      value: data.pedidosHoje,
      icon: Package,
      change: data.crescimento,
      color: "bg-blue-500/10",
      iconColor: "text-blue-500",
      borderColor: "border-blue-500/20"
    },
    {
      title: "Faturamento Hoje",
      value: formatCurrency(data.faturamentoHoje),
      icon: DollarSign,
      color: "bg-green-500/10",
      iconColor: "text-green-500",
      borderColor: "border-green-500/20"
    },
    {
      title: "Faturados",
      value: formatCurrency(data.valorFaturado),
      icon: CheckCircle,
      color: "bg-orange-500/10",
      iconColor: "text-orange-500",
      borderColor: "border-orange-500/20"
    },
    {
      title: "Ticket Médio",
      value: formatCurrency(data.ticketMedio),
      icon: ShoppingBag,
      color: "bg-purple-500/10",
      iconColor: "text-purple-500",
      borderColor: "border-purple-500/20"
    },
    {
      title: "Total de Pedidos",
      value: data.totalPedidos,
      icon: TrendingUp,
      color: "bg-pink-500/10",
      iconColor: "text-pink-500",
      borderColor: "border-pink-500/20"
    },
    {
      title: "Clientes Únicos",
      value: data.clientesUnicos,
      icon: Users,
      color: "bg-yellow-500/10",
      iconColor: "text-yellow-500",
      borderColor: "border-yellow-500/20"
    },
    {
      title: "Estoque Mínimo",
      value: produtosEstoqueMinimo,
      icon: AlertTriangle,
      color: produtosEstoqueMinimo > 0 ? "bg-red-500/10" : "bg-gray-500/10",
      iconColor: produtosEstoqueMinimo > 0 ? "text-red-500" : "text-gray-500",
      borderColor: produtosEstoqueMinimo > 0 ? "border-red-500/20" : "border-gray-500/20",
      clickable: produtosEstoqueMinimo > 0,
      onClick: handleEstoqueMinimoClick,
      customContent: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: `text-xs mt-1 ${produtosEstoqueMinimo === 0 ? "text-gray-400" : "text-red-400 font-medium animate-pulse"}`, children: produtosEstoqueMinimo === 0 ? "Todos os produtos estão OK" : `⚠️ ${produtosEstoqueMinimo} ${produtosEstoqueMinimo === 1 ? "produto atingiu" : "produtos atingiram"} o estoque mínimo` }),
        produtosEstoqueMinimo > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-primary-400 mt-1 font-medium animate-pulse", children: "Clique para ver detalhes →" })
      ] })
    }
  ];
  const formatLastUpdate = () => {
    const now2 = /* @__PURE__ */ new Date();
    const diff = now2.getTime() - lastUpdate.getTime();
    if (diff < 6e4) {
      return "agora mesmo";
    }
    if (diff < 36e5) {
      const minutes = Math.floor(diff / 6e4);
      return `há ${minutes} ${minutes === 1 ? "minuto" : "minutos"}`;
    }
    if (diff < 864e5) {
      const hours = Math.floor(diff / 36e5);
      return `há ${hours} ${hours === 1 ? "hora" : "horas"}`;
    }
    const days = Math.floor(diff / 864e5);
    return `há ${days} ${days === 1 ? "dia" : "dias"}`;
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
    isAdmin && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-wrap items-center justify-between gap-4 mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "button",
        {
          onClick: () => setShowFilters(!showFilters),
          className: "flex items-center gap-2 px-3 py-2 bg-gray-800/50 hover:bg-gray-800 rounded-lg text-gray-300 transition-colors",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Filter, { size: 18 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Filtros" })
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-gray-400 flex items-center gap-1", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
          "Atualizado: ",
          formatLastUpdate()
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => loadDashboardData(),
            className: "p-1 hover:bg-gray-800/50 rounded-full transition-colors",
            title: "Atualizar dados",
            disabled: isLoading,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(RefreshCw, { size: 14, className: isLoading ? "animate-spin" : "" })
          }
        )
      ] })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: isAdmin && showFilters && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { height: 0, opacity: 0 },
        animate: { height: "auto", opacity: 1 },
        exit: { height: 0, opacity: 0 },
        className: "overflow-hidden",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 border border-gray-700 rounded-lg p-4 mb-6", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "text-white font-medium mb-3 flex items-center gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 18 }),
            "Filtrar por Usuário"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => setUsuarioSelecionado("todos"),
                className: `px-3 py-1 rounded-full text-xs font-medium ${usuarioSelecionado === "todos" ? "bg-primary-500 text-white" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`,
                children: "Todos"
              }
            ),
            usuarios.map((usuario) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => setUsuarioSelecionado(usuario.id),
                className: `px-3 py-1 rounded-full text-xs font-medium ${usuarioSelecionado === usuario.id ? "bg-primary-500 text-white" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`,
                children: usuario.nome
              },
              usuario.id
            ))
          ] })
        ] })
      }
    ) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-4", children: cards.map((card, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
      motion.div,
      {
        initial: { opacity: 0, y: 20 },
        animate: {
          opacity: 1,
          y: 0,
          // Animação especial para o card de estoque mínimo quando há produtos
          ...card.title === "Estoque Mínimo" && produtosEstoqueMinimo > 0 && {
            boxShadow: [
              "0 0 0 0 rgba(239, 68, 68, 0.7)",
              "0 0 0 10px rgba(239, 68, 68, 0)",
              "0 0 0 0 rgba(239, 68, 68, 0)"
            ]
          }
        },
        transition: {
          delay: index2 * 0.1,
          ...card.title === "Estoque Mínimo" && produtosEstoqueMinimo > 0 && {
            boxShadow: {
              duration: 2,
              repeat: Infinity,
              ease: "easeInOut"
            }
          }
        },
        className: `p-4 rounded-lg border ${card.title === "Estoque Mínimo" && produtosEstoqueMinimo > 0 ? "border-red-500/50 shadow-red-500/20" : card.borderColor} ${card.color} ${card.clickable ? "cursor-pointer hover:bg-opacity-80 transition-all duration-200 hover:scale-105" : ""}`,
        onClick: card.onClick,
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `p-1.5 rounded-lg ${card.color} ${card.title === "Estoque Mínimo" && produtosEstoqueMinimo > 0 ? "animate-pulse" : ""}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(card.icon, { size: 20, className: `${card.iconColor} ${card.title === "Estoque Mínimo" && produtosEstoqueMinimo > 0 ? "animate-pulse" : ""}` }) }),
            card.change !== void 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `flex items-center gap-1 text-xs ${card.change >= 0 ? "text-green-500" : "text-red-500"}`, children: [
              card.change >= 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowUpRight, { size: 14 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowDownRight, { size: 14 }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                Math.abs(card.change).toFixed(1),
                "%"
              ] })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-gray-400 text-xs mb-1", children: card.title }),
          typeof card.value === "string" || typeof card.value === "number" ? /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: `text-xl font-semibold text-white ${card.title === "Estoque Mínimo" && produtosEstoqueMinimo > 0 ? "animate-pulse" : ""}`, children: card.value }) : card.value,
          card.customContent
        ]
      },
      card.title
    )) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      motion.div,
      {
        initial: { opacity: 0, y: 20 },
        animate: { opacity: 1, y: 0 },
        transition: { delay: 0.4 },
        className: "bg-background-card rounded-lg border border-gray-800 p-6 overflow-hidden",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-lg font-medium text-white", children: "Faturamento dos Últimos 7 Dias" }),
            isAdmin && usuarioSelecionado !== "todos" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 px-3 py-1 bg-primary-500/10 rounded-full", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14, className: "text-primary-400" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-primary-400", children: ((_a2 = usuarios.find((u2) => u2.id === usuarioSelecionado)) == null ? void 0 : _a2.nome) || "Usuário" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ref: chartContainerRef, className: "h-[250px] w-full relative", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Line,
            {
              options: chartOptions,
              data: chartData,
              ref: chartRef
            }
          ) })
        ]
      }
    )
  ] });
};
var __defProp2 = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp2(a, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp2(a, prop, b2[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
/**
 * @license QR Code generator library (TypeScript)
 * Copyright (c) Project Nayuki.
 * SPDX-License-Identifier: MIT
 */
var qrcodegen;
((qrcodegen2) => {
  const _QrCode = class _QrCode2 {
    /*-- Constructor (low level) and fields --*/
    // Creates a new QR Code with the given version number,
    // error correction level, data codeword bytes, and mask number.
    // This is a low-level API that most users should not use directly.
    // A mid-level API is the encodeSegments() function.
    constructor(version2, errorCorrectionLevel, dataCodewords, msk) {
      this.version = version2;
      this.errorCorrectionLevel = errorCorrectionLevel;
      this.modules = [];
      this.isFunction = [];
      if (version2 < _QrCode2.MIN_VERSION || version2 > _QrCode2.MAX_VERSION)
        throw new RangeError("Version value out of range");
      if (msk < -1 || msk > 7)
        throw new RangeError("Mask value out of range");
      this.size = version2 * 4 + 17;
      let row = [];
      for (let i = 0; i < this.size; i++)
        row.push(false);
      for (let i = 0; i < this.size; i++) {
        this.modules.push(row.slice());
        this.isFunction.push(row.slice());
      }
      this.drawFunctionPatterns();
      const allCodewords = this.addEccAndInterleave(dataCodewords);
      this.drawCodewords(allCodewords);
      if (msk == -1) {
        let minPenalty = 1e9;
        for (let i = 0; i < 8; i++) {
          this.applyMask(i);
          this.drawFormatBits(i);
          const penalty = this.getPenaltyScore();
          if (penalty < minPenalty) {
            msk = i;
            minPenalty = penalty;
          }
          this.applyMask(i);
        }
      }
      assert(0 <= msk && msk <= 7);
      this.mask = msk;
      this.applyMask(msk);
      this.drawFormatBits(msk);
      this.isFunction = [];
    }
    /*-- Static factory functions (high level) --*/
    // Returns a QR Code representing the given Unicode text string at the given error correction level.
    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer
    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible
    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the
    // ecl argument if it can be done without increasing the version.
    static encodeText(text, ecl) {
      const segs = qrcodegen2.QrSegment.makeSegments(text);
      return _QrCode2.encodeSegments(segs, ecl);
    }
    // Returns a QR Code representing the given binary data at the given error correction level.
    // This function always encodes using the binary segment mode, not any text mode. The maximum number of
    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.
    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.
    static encodeBinary(data, ecl) {
      const seg = qrcodegen2.QrSegment.makeBytes(data);
      return _QrCode2.encodeSegments([seg], ecl);
    }
    /*-- Static factory functions (mid level) --*/
    // Returns a QR Code representing the given segments with the given encoding parameters.
    // The smallest possible QR Code version within the given range is automatically
    // chosen for the output. Iff boostEcl is true, then the ECC level of the result
    // may be higher than the ecl argument if it can be done without increasing the
    // version. The mask number is either between 0 to 7 (inclusive) to force that
    // mask, or -1 to automatically choose an appropriate mask (which may be slow).
    // This function allows the user to create a custom sequence of segments that switches
    // between modes (such as alphanumeric and byte) to encode text in less space.
    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().
    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {
      if (!(_QrCode2.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode2.MAX_VERSION) || mask < -1 || mask > 7)
        throw new RangeError("Invalid value");
      let version2;
      let dataUsedBits;
      for (version2 = minVersion; ; version2++) {
        const dataCapacityBits2 = _QrCode2.getNumDataCodewords(version2, ecl) * 8;
        const usedBits = QrSegment.getTotalBits(segs, version2);
        if (usedBits <= dataCapacityBits2) {
          dataUsedBits = usedBits;
          break;
        }
        if (version2 >= maxVersion)
          throw new RangeError("Data too long");
      }
      for (const newEcl of [_QrCode2.Ecc.MEDIUM, _QrCode2.Ecc.QUARTILE, _QrCode2.Ecc.HIGH]) {
        if (boostEcl && dataUsedBits <= _QrCode2.getNumDataCodewords(version2, newEcl) * 8)
          ecl = newEcl;
      }
      let bb2 = [];
      for (const seg of segs) {
        appendBits(seg.mode.modeBits, 4, bb2);
        appendBits(seg.numChars, seg.mode.numCharCountBits(version2), bb2);
        for (const b2 of seg.getData())
          bb2.push(b2);
      }
      assert(bb2.length == dataUsedBits);
      const dataCapacityBits = _QrCode2.getNumDataCodewords(version2, ecl) * 8;
      assert(bb2.length <= dataCapacityBits);
      appendBits(0, Math.min(4, dataCapacityBits - bb2.length), bb2);
      appendBits(0, (8 - bb2.length % 8) % 8, bb2);
      assert(bb2.length % 8 == 0);
      for (let padByte = 236; bb2.length < dataCapacityBits; padByte ^= 236 ^ 17)
        appendBits(padByte, 8, bb2);
      let dataCodewords = [];
      while (dataCodewords.length * 8 < bb2.length)
        dataCodewords.push(0);
      bb2.forEach((b2, i) => dataCodewords[i >>> 3] |= b2 << 7 - (i & 7));
      return new _QrCode2(version2, ecl, dataCodewords, mask);
    }
    /*-- Accessor methods --*/
    // Returns the color of the module (pixel) at the given coordinates, which is false
    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).
    // If the given coordinates are out of bounds, then false (light) is returned.
    getModule(x2, y2) {
      return 0 <= x2 && x2 < this.size && 0 <= y2 && y2 < this.size && this.modules[y2][x2];
    }
    // Modified to expose modules for easy access
    getModules() {
      return this.modules;
    }
    /*-- Private helper methods for constructor: Drawing function modules --*/
    // Reads this object's version field, and draws and marks all function modules.
    drawFunctionPatterns() {
      for (let i = 0; i < this.size; i++) {
        this.setFunctionModule(6, i, i % 2 == 0);
        this.setFunctionModule(i, 6, i % 2 == 0);
      }
      this.drawFinderPattern(3, 3);
      this.drawFinderPattern(this.size - 4, 3);
      this.drawFinderPattern(3, this.size - 4);
      const alignPatPos = this.getAlignmentPatternPositions();
      const numAlign = alignPatPos.length;
      for (let i = 0; i < numAlign; i++) {
        for (let j = 0; j < numAlign; j++) {
          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))
            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);
        }
      }
      this.drawFormatBits(0);
      this.drawVersion();
    }
    // Draws two copies of the format bits (with its own error correction code)
    // based on the given mask and this object's error correction level field.
    drawFormatBits(mask) {
      const data = this.errorCorrectionLevel.formatBits << 3 | mask;
      let rem = data;
      for (let i = 0; i < 10; i++)
        rem = rem << 1 ^ (rem >>> 9) * 1335;
      const bits = (data << 10 | rem) ^ 21522;
      assert(bits >>> 15 == 0);
      for (let i = 0; i <= 5; i++)
        this.setFunctionModule(8, i, getBit(bits, i));
      this.setFunctionModule(8, 7, getBit(bits, 6));
      this.setFunctionModule(8, 8, getBit(bits, 7));
      this.setFunctionModule(7, 8, getBit(bits, 8));
      for (let i = 9; i < 15; i++)
        this.setFunctionModule(14 - i, 8, getBit(bits, i));
      for (let i = 0; i < 8; i++)
        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));
      for (let i = 8; i < 15; i++)
        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));
      this.setFunctionModule(8, this.size - 8, true);
    }
    // Draws two copies of the version bits (with its own error correction code),
    // based on this object's version field, iff 7 <= version <= 40.
    drawVersion() {
      if (this.version < 7)
        return;
      let rem = this.version;
      for (let i = 0; i < 12; i++)
        rem = rem << 1 ^ (rem >>> 11) * 7973;
      const bits = this.version << 12 | rem;
      assert(bits >>> 18 == 0);
      for (let i = 0; i < 18; i++) {
        const color2 = getBit(bits, i);
        const a = this.size - 11 + i % 3;
        const b2 = Math.floor(i / 3);
        this.setFunctionModule(a, b2, color2);
        this.setFunctionModule(b2, a, color2);
      }
    }
    // Draws a 9*9 finder pattern including the border separator,
    // with the center module at (x, y). Modules can be out of bounds.
    drawFinderPattern(x2, y2) {
      for (let dy = -4; dy <= 4; dy++) {
        for (let dx = -4; dx <= 4; dx++) {
          const dist = Math.max(Math.abs(dx), Math.abs(dy));
          const xx = x2 + dx;
          const yy = y2 + dy;
          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)
            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);
        }
      }
    }
    // Draws a 5*5 alignment pattern, with the center module
    // at (x, y). All modules must be in bounds.
    drawAlignmentPattern(x2, y2) {
      for (let dy = -2; dy <= 2; dy++) {
        for (let dx = -2; dx <= 2; dx++)
          this.setFunctionModule(x2 + dx, y2 + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);
      }
    }
    // Sets the color of a module and marks it as a function module.
    // Only used by the constructor. Coordinates must be in bounds.
    setFunctionModule(x2, y2, isDark) {
      this.modules[y2][x2] = isDark;
      this.isFunction[y2][x2] = true;
    }
    /*-- Private helper methods for constructor: Codewords and masking --*/
    // Returns a new byte string representing the given data with the appropriate error correction
    // codewords appended to it, based on this object's version and error correction level.
    addEccAndInterleave(data) {
      const ver = this.version;
      const ecl = this.errorCorrectionLevel;
      if (data.length != _QrCode2.getNumDataCodewords(ver, ecl))
        throw new RangeError("Invalid argument");
      const numBlocks = _QrCode2.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];
      const blockEccLen = _QrCode2.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];
      const rawCodewords = Math.floor(_QrCode2.getNumRawDataModules(ver) / 8);
      const numShortBlocks = numBlocks - rawCodewords % numBlocks;
      const shortBlockLen = Math.floor(rawCodewords / numBlocks);
      let blocks = [];
      const rsDiv = _QrCode2.reedSolomonComputeDivisor(blockEccLen);
      for (let i = 0, k2 = 0; i < numBlocks; i++) {
        let dat = data.slice(k2, k2 + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));
        k2 += dat.length;
        const ecc = _QrCode2.reedSolomonComputeRemainder(dat, rsDiv);
        if (i < numShortBlocks)
          dat.push(0);
        blocks.push(dat.concat(ecc));
      }
      let result = [];
      for (let i = 0; i < blocks[0].length; i++) {
        blocks.forEach((block, j) => {
          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)
            result.push(block[i]);
        });
      }
      assert(result.length == rawCodewords);
      return result;
    }
    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire
    // data area of this QR Code. Function modules need to be marked off before this is called.
    drawCodewords(data) {
      if (data.length != Math.floor(_QrCode2.getNumRawDataModules(this.version) / 8))
        throw new RangeError("Invalid argument");
      let i = 0;
      for (let right = this.size - 1; right >= 1; right -= 2) {
        if (right == 6)
          right = 5;
        for (let vert = 0; vert < this.size; vert++) {
          for (let j = 0; j < 2; j++) {
            const x2 = right - j;
            const upward = (right + 1 & 2) == 0;
            const y2 = upward ? this.size - 1 - vert : vert;
            if (!this.isFunction[y2][x2] && i < data.length * 8) {
              this.modules[y2][x2] = getBit(data[i >>> 3], 7 - (i & 7));
              i++;
            }
          }
        }
      }
      assert(i == data.length * 8);
    }
    // XORs the codeword modules in this QR Code with the given mask pattern.
    // The function modules must be marked and the codeword bits must be drawn
    // before masking. Due to the arithmetic of XOR, calling applyMask() with
    // the same mask value a second time will undo the mask. A final well-formed
    // QR Code needs exactly one (not zero, two, etc.) mask applied.
    applyMask(mask) {
      if (mask < 0 || mask > 7)
        throw new RangeError("Mask value out of range");
      for (let y2 = 0; y2 < this.size; y2++) {
        for (let x2 = 0; x2 < this.size; x2++) {
          let invert;
          switch (mask) {
            case 0:
              invert = (x2 + y2) % 2 == 0;
              break;
            case 1:
              invert = y2 % 2 == 0;
              break;
            case 2:
              invert = x2 % 3 == 0;
              break;
            case 3:
              invert = (x2 + y2) % 3 == 0;
              break;
            case 4:
              invert = (Math.floor(x2 / 3) + Math.floor(y2 / 2)) % 2 == 0;
              break;
            case 5:
              invert = x2 * y2 % 2 + x2 * y2 % 3 == 0;
              break;
            case 6:
              invert = (x2 * y2 % 2 + x2 * y2 % 3) % 2 == 0;
              break;
            case 7:
              invert = ((x2 + y2) % 2 + x2 * y2 % 3) % 2 == 0;
              break;
            default:
              throw new Error("Unreachable");
          }
          if (!this.isFunction[y2][x2] && invert)
            this.modules[y2][x2] = !this.modules[y2][x2];
        }
      }
    }
    // Calculates and returns the penalty score based on state of this QR Code's current modules.
    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.
    getPenaltyScore() {
      let result = 0;
      for (let y2 = 0; y2 < this.size; y2++) {
        let runColor = false;
        let runX = 0;
        let runHistory = [0, 0, 0, 0, 0, 0, 0];
        for (let x2 = 0; x2 < this.size; x2++) {
          if (this.modules[y2][x2] == runColor) {
            runX++;
            if (runX == 5)
              result += _QrCode2.PENALTY_N1;
            else if (runX > 5)
              result++;
          } else {
            this.finderPenaltyAddHistory(runX, runHistory);
            if (!runColor)
              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode2.PENALTY_N3;
            runColor = this.modules[y2][x2];
            runX = 1;
          }
        }
        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode2.PENALTY_N3;
      }
      for (let x2 = 0; x2 < this.size; x2++) {
        let runColor = false;
        let runY = 0;
        let runHistory = [0, 0, 0, 0, 0, 0, 0];
        for (let y2 = 0; y2 < this.size; y2++) {
          if (this.modules[y2][x2] == runColor) {
            runY++;
            if (runY == 5)
              result += _QrCode2.PENALTY_N1;
            else if (runY > 5)
              result++;
          } else {
            this.finderPenaltyAddHistory(runY, runHistory);
            if (!runColor)
              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode2.PENALTY_N3;
            runColor = this.modules[y2][x2];
            runY = 1;
          }
        }
        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode2.PENALTY_N3;
      }
      for (let y2 = 0; y2 < this.size - 1; y2++) {
        for (let x2 = 0; x2 < this.size - 1; x2++) {
          const color2 = this.modules[y2][x2];
          if (color2 == this.modules[y2][x2 + 1] && color2 == this.modules[y2 + 1][x2] && color2 == this.modules[y2 + 1][x2 + 1])
            result += _QrCode2.PENALTY_N2;
        }
      }
      let dark = 0;
      for (const row of this.modules)
        dark = row.reduce((sum, color2) => sum + (color2 ? 1 : 0), dark);
      const total = this.size * this.size;
      const k2 = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;
      assert(0 <= k2 && k2 <= 9);
      result += k2 * _QrCode2.PENALTY_N4;
      assert(0 <= result && result <= 2568888);
      return result;
    }
    /*-- Private helper functions --*/
    // Returns an ascending list of positions of alignment patterns for this version number.
    // Each position is in the range [0,177), and are used on both the x and y axes.
    // This could be implemented as lookup table of 40 variable-length lists of integers.
    getAlignmentPatternPositions() {
      if (this.version == 1)
        return [];
      else {
        const numAlign = Math.floor(this.version / 7) + 2;
        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;
        let result = [6];
        for (let pos = this.size - 7; result.length < numAlign; pos -= step)
          result.splice(1, 0, pos);
        return result;
      }
    }
    // Returns the number of data bits that can be stored in a QR Code of the given version number, after
    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.
    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.
    static getNumRawDataModules(ver) {
      if (ver < _QrCode2.MIN_VERSION || ver > _QrCode2.MAX_VERSION)
        throw new RangeError("Version number out of range");
      let result = (16 * ver + 128) * ver + 64;
      if (ver >= 2) {
        const numAlign = Math.floor(ver / 7) + 2;
        result -= (25 * numAlign - 10) * numAlign - 55;
        if (ver >= 7)
          result -= 36;
      }
      assert(208 <= result && result <= 29648);
      return result;
    }
    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any
    // QR Code of the given version number and error correction level, with remainder bits discarded.
    // This stateless pure function could be implemented as a (40*4)-cell lookup table.
    static getNumDataCodewords(ver, ecl) {
      return Math.floor(_QrCode2.getNumRawDataModules(ver) / 8) - _QrCode2.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode2.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];
    }
    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be
    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.
    static reedSolomonComputeDivisor(degree) {
      if (degree < 1 || degree > 255)
        throw new RangeError("Degree out of range");
      let result = [];
      for (let i = 0; i < degree - 1; i++)
        result.push(0);
      result.push(1);
      let root = 1;
      for (let i = 0; i < degree; i++) {
        for (let j = 0; j < result.length; j++) {
          result[j] = _QrCode2.reedSolomonMultiply(result[j], root);
          if (j + 1 < result.length)
            result[j] ^= result[j + 1];
        }
        root = _QrCode2.reedSolomonMultiply(root, 2);
      }
      return result;
    }
    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.
    static reedSolomonComputeRemainder(data, divisor) {
      let result = divisor.map((_2) => 0);
      for (const b2 of data) {
        const factor = b2 ^ result.shift();
        result.push(0);
        divisor.forEach((coef, i) => result[i] ^= _QrCode2.reedSolomonMultiply(coef, factor));
      }
      return result;
    }
    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result
    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.
    static reedSolomonMultiply(x2, y2) {
      if (x2 >>> 8 != 0 || y2 >>> 8 != 0)
        throw new RangeError("Byte out of range");
      let z2 = 0;
      for (let i = 7; i >= 0; i--) {
        z2 = z2 << 1 ^ (z2 >>> 7) * 285;
        z2 ^= (y2 >>> i & 1) * x2;
      }
      assert(z2 >>> 8 == 0);
      return z2;
    }
    // Can only be called immediately after a light run is added, and
    // returns either 0, 1, or 2. A helper function for getPenaltyScore().
    finderPenaltyCountPatterns(runHistory) {
      const n2 = runHistory[1];
      assert(n2 <= this.size * 3);
      const core = n2 > 0 && runHistory[2] == n2 && runHistory[3] == n2 * 3 && runHistory[4] == n2 && runHistory[5] == n2;
      return (core && runHistory[0] >= n2 * 4 && runHistory[6] >= n2 ? 1 : 0) + (core && runHistory[6] >= n2 * 4 && runHistory[0] >= n2 ? 1 : 0);
    }
    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().
    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {
      if (currentRunColor) {
        this.finderPenaltyAddHistory(currentRunLength, runHistory);
        currentRunLength = 0;
      }
      currentRunLength += this.size;
      this.finderPenaltyAddHistory(currentRunLength, runHistory);
      return this.finderPenaltyCountPatterns(runHistory);
    }
    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().
    finderPenaltyAddHistory(currentRunLength, runHistory) {
      if (runHistory[0] == 0)
        currentRunLength += this.size;
      runHistory.pop();
      runHistory.unshift(currentRunLength);
    }
  };
  _QrCode.MIN_VERSION = 1;
  _QrCode.MAX_VERSION = 40;
  _QrCode.PENALTY_N1 = 3;
  _QrCode.PENALTY_N2 = 3;
  _QrCode.PENALTY_N3 = 40;
  _QrCode.PENALTY_N4 = 10;
  _QrCode.ECC_CODEWORDS_PER_BLOCK = [
    // Version: (note that index 0 is for padding, and is set to an illegal value)
    //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level
    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],
    // Low
    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],
    // Medium
    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],
    // Quartile
    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]
    // High
  ];
  _QrCode.NUM_ERROR_CORRECTION_BLOCKS = [
    // Version: (note that index 0 is for padding, and is set to an illegal value)
    //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level
    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],
    // Low
    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],
    // Medium
    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],
    // Quartile
    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]
    // High
  ];
  qrcodegen2.QrCode = _QrCode;
  function appendBits(val, len, bb2) {
    if (len < 0 || len > 31 || val >>> len != 0)
      throw new RangeError("Value out of range");
    for (let i = len - 1; i >= 0; i--)
      bb2.push(val >>> i & 1);
  }
  function getBit(x2, i) {
    return (x2 >>> i & 1) != 0;
  }
  function assert(cond) {
    if (!cond)
      throw new Error("Assertion error");
  }
  const _QrSegment = class _QrSegment2 {
    /*-- Constructor (low level) and fields --*/
    // Creates a new QR Code segment with the given attributes and data.
    // The character count (numChars) must agree with the mode and the bit buffer length,
    // but the constraint isn't checked. The given bit buffer is cloned and stored.
    constructor(mode, numChars, bitData) {
      this.mode = mode;
      this.numChars = numChars;
      this.bitData = bitData;
      if (numChars < 0)
        throw new RangeError("Invalid argument");
      this.bitData = bitData.slice();
    }
    /*-- Static factory functions (mid level) --*/
    // Returns a segment representing the given binary data encoded in
    // byte mode. All input byte arrays are acceptable. Any text string
    // can be converted to UTF-8 bytes and encoded as a byte mode segment.
    static makeBytes(data) {
      let bb2 = [];
      for (const b2 of data)
        appendBits(b2, 8, bb2);
      return new _QrSegment2(_QrSegment2.Mode.BYTE, data.length, bb2);
    }
    // Returns a segment representing the given string of decimal digits encoded in numeric mode.
    static makeNumeric(digits) {
      if (!_QrSegment2.isNumeric(digits))
        throw new RangeError("String contains non-numeric characters");
      let bb2 = [];
      for (let i = 0; i < digits.length; ) {
        const n2 = Math.min(digits.length - i, 3);
        appendBits(parseInt(digits.substring(i, i + n2), 10), n2 * 3 + 1, bb2);
        i += n2;
      }
      return new _QrSegment2(_QrSegment2.Mode.NUMERIC, digits.length, bb2);
    }
    // Returns a segment representing the given text string encoded in alphanumeric mode.
    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,
    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.
    static makeAlphanumeric(text) {
      if (!_QrSegment2.isAlphanumeric(text))
        throw new RangeError("String contains unencodable characters in alphanumeric mode");
      let bb2 = [];
      let i;
      for (i = 0; i + 2 <= text.length; i += 2) {
        let temp = _QrSegment2.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;
        temp += _QrSegment2.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));
        appendBits(temp, 11, bb2);
      }
      if (i < text.length)
        appendBits(_QrSegment2.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb2);
      return new _QrSegment2(_QrSegment2.Mode.ALPHANUMERIC, text.length, bb2);
    }
    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.
    // The result may use various segment modes and switch modes to optimize the length of the bit stream.
    static makeSegments(text) {
      if (text == "")
        return [];
      else if (_QrSegment2.isNumeric(text))
        return [_QrSegment2.makeNumeric(text)];
      else if (_QrSegment2.isAlphanumeric(text))
        return [_QrSegment2.makeAlphanumeric(text)];
      else
        return [_QrSegment2.makeBytes(_QrSegment2.toUtf8ByteArray(text))];
    }
    // Returns a segment representing an Extended Channel Interpretation
    // (ECI) designator with the given assignment value.
    static makeEci(assignVal) {
      let bb2 = [];
      if (assignVal < 0)
        throw new RangeError("ECI assignment value out of range");
      else if (assignVal < 1 << 7)
        appendBits(assignVal, 8, bb2);
      else if (assignVal < 1 << 14) {
        appendBits(2, 2, bb2);
        appendBits(assignVal, 14, bb2);
      } else if (assignVal < 1e6) {
        appendBits(6, 3, bb2);
        appendBits(assignVal, 21, bb2);
      } else
        throw new RangeError("ECI assignment value out of range");
      return new _QrSegment2(_QrSegment2.Mode.ECI, 0, bb2);
    }
    // Tests whether the given string can be encoded as a segment in numeric mode.
    // A string is encodable iff each character is in the range 0 to 9.
    static isNumeric(text) {
      return _QrSegment2.NUMERIC_REGEX.test(text);
    }
    // Tests whether the given string can be encoded as a segment in alphanumeric mode.
    // A string is encodable iff each character is in the following set: 0 to 9, A to Z
    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.
    static isAlphanumeric(text) {
      return _QrSegment2.ALPHANUMERIC_REGEX.test(text);
    }
    /*-- Methods --*/
    // Returns a new copy of the data bits of this segment.
    getData() {
      return this.bitData.slice();
    }
    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at
    // the given version. The result is infinity if a segment has too many characters to fit its length field.
    static getTotalBits(segs, version2) {
      let result = 0;
      for (const seg of segs) {
        const ccbits = seg.mode.numCharCountBits(version2);
        if (seg.numChars >= 1 << ccbits)
          return Infinity;
        result += 4 + ccbits + seg.bitData.length;
      }
      return result;
    }
    // Returns a new array of bytes representing the given string encoded in UTF-8.
    static toUtf8ByteArray(str) {
      str = encodeURI(str);
      let result = [];
      for (let i = 0; i < str.length; i++) {
        if (str.charAt(i) != "%")
          result.push(str.charCodeAt(i));
        else {
          result.push(parseInt(str.substring(i + 1, i + 3), 16));
          i += 2;
        }
      }
      return result;
    }
  };
  _QrSegment.NUMERIC_REGEX = /^[0-9]*$/;
  _QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\/:-]*$/;
  _QrSegment.ALPHANUMERIC_CHARSET = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:";
  let QrSegment = _QrSegment;
  qrcodegen2.QrSegment = _QrSegment;
})(qrcodegen || (qrcodegen = {}));
((qrcodegen2) => {
  ((QrCode2) => {
    const _Ecc = class _Ecc {
      // The QR Code can tolerate about 30% erroneous codewords
      /*-- Constructor and fields --*/
      constructor(ordinal, formatBits) {
        this.ordinal = ordinal;
        this.formatBits = formatBits;
      }
    };
    _Ecc.LOW = new _Ecc(0, 1);
    _Ecc.MEDIUM = new _Ecc(1, 0);
    _Ecc.QUARTILE = new _Ecc(2, 3);
    _Ecc.HIGH = new _Ecc(3, 2);
    QrCode2.Ecc = _Ecc;
  })(qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));
})(qrcodegen || (qrcodegen = {}));
((qrcodegen2) => {
  ((QrSegment2) => {
    const _Mode = class _Mode {
      /*-- Constructor and fields --*/
      constructor(modeBits, numBitsCharCount) {
        this.modeBits = modeBits;
        this.numBitsCharCount = numBitsCharCount;
      }
      /*-- Method --*/
      // (Package-private) Returns the bit width of the character count field for a segment in
      // this mode in a QR Code at the given version number. The result is in the range [0, 16].
      numCharCountBits(ver) {
        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];
      }
    };
    _Mode.NUMERIC = new _Mode(1, [10, 12, 14]);
    _Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);
    _Mode.BYTE = new _Mode(4, [8, 16, 16]);
    _Mode.KANJI = new _Mode(8, [8, 10, 12]);
    _Mode.ECI = new _Mode(7, [0, 0, 0]);
    QrSegment2.Mode = _Mode;
  })(qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));
})(qrcodegen || (qrcodegen = {}));
var qrcodegen_default = qrcodegen;
/**
 * @license qrcode.react
 * Copyright (c) Paul O'Shannessy
 * SPDX-License-Identifier: ISC
 */
var ERROR_LEVEL_MAP = {
  L: qrcodegen_default.QrCode.Ecc.LOW,
  M: qrcodegen_default.QrCode.Ecc.MEDIUM,
  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,
  H: qrcodegen_default.QrCode.Ecc.HIGH
};
var DEFAULT_SIZE = 128;
var DEFAULT_LEVEL = "L";
var DEFAULT_BGCOLOR = "#FFFFFF";
var DEFAULT_FGCOLOR = "#000000";
var DEFAULT_INCLUDEMARGIN = false;
var DEFAULT_MINVERSION = 1;
var SPEC_MARGIN_SIZE = 4;
var DEFAULT_MARGIN_SIZE = 0;
var DEFAULT_IMG_SCALE = 0.1;
function generatePath(modules, margin = 0) {
  const ops = [];
  modules.forEach(function(row, y2) {
    let start = null;
    row.forEach(function(cell, x2) {
      if (!cell && start !== null) {
        ops.push(
          `M${start + margin} ${y2 + margin}h${x2 - start}v1H${start + margin}z`
        );
        start = null;
        return;
      }
      if (x2 === row.length - 1) {
        if (!cell) {
          return;
        }
        if (start === null) {
          ops.push(`M${x2 + margin},${y2 + margin} h1v1H${x2 + margin}z`);
        } else {
          ops.push(
            `M${start + margin},${y2 + margin} h${x2 + 1 - start}v1H${start + margin}z`
          );
        }
        return;
      }
      if (cell && start === null) {
        start = x2;
      }
    });
  });
  return ops.join("");
}
function excavateModules(modules, excavation) {
  return modules.slice().map((row, y2) => {
    if (y2 < excavation.y || y2 >= excavation.y + excavation.h) {
      return row;
    }
    return row.map((cell, x2) => {
      if (x2 < excavation.x || x2 >= excavation.x + excavation.w) {
        return cell;
      }
      return false;
    });
  });
}
function getImageSettings(cells, size, margin, imageSettings) {
  if (imageSettings == null) {
    return null;
  }
  const numCells = cells.length + margin * 2;
  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);
  const scale2 = numCells / size;
  const w2 = (imageSettings.width || defaultSize) * scale2;
  const h3 = (imageSettings.height || defaultSize) * scale2;
  const x2 = imageSettings.x == null ? cells.length / 2 - w2 / 2 : imageSettings.x * scale2;
  const y2 = imageSettings.y == null ? cells.length / 2 - h3 / 2 : imageSettings.y * scale2;
  const opacity = imageSettings.opacity == null ? 1 : imageSettings.opacity;
  let excavation = null;
  if (imageSettings.excavate) {
    let floorX = Math.floor(x2);
    let floorY = Math.floor(y2);
    let ceilW = Math.ceil(w2 + x2 - floorX);
    let ceilH = Math.ceil(h3 + y2 - floorY);
    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };
  }
  const crossOrigin = imageSettings.crossOrigin;
  return { x: x2, y: y2, h: h3, w: w2, excavation, opacity, crossOrigin };
}
function getMarginSize(includeMargin, marginSize) {
  if (marginSize != null) {
    return Math.max(Math.floor(marginSize), 0);
  }
  return includeMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE;
}
function useQRCode({
  value,
  level,
  minVersion,
  includeMargin,
  marginSize,
  imageSettings,
  size,
  boostLevel
}) {
  let qrcode = React$2.useMemo(() => {
    const values = Array.isArray(value) ? value : [value];
    const segments = values.reduce((accum, v2) => {
      accum.push(...qrcodegen_default.QrSegment.makeSegments(v2));
      return accum;
    }, []);
    return qrcodegen_default.QrCode.encodeSegments(
      segments,
      ERROR_LEVEL_MAP[level],
      minVersion,
      void 0,
      void 0,
      boostLevel
    );
  }, [value, level, minVersion, boostLevel]);
  const { cells, margin, numCells, calculatedImageSettings } = React$2.useMemo(() => {
    let cells2 = qrcode.getModules();
    const margin2 = getMarginSize(includeMargin, marginSize);
    const numCells2 = cells2.length + margin2 * 2;
    const calculatedImageSettings2 = getImageSettings(
      cells2,
      size,
      margin2,
      imageSettings
    );
    return {
      cells: cells2,
      margin: margin2,
      numCells: numCells2,
      calculatedImageSettings: calculatedImageSettings2
    };
  }, [qrcode, size, imageSettings, includeMargin, marginSize]);
  return {
    qrcode,
    margin,
    cells,
    numCells,
    calculatedImageSettings
  };
}
var SUPPORTS_PATH2D = function() {
  try {
    new Path2D().addPath(new Path2D());
  } catch (e) {
    return false;
  }
  return true;
}();
var QRCodeCanvas = React$2.forwardRef(
  function QRCodeCanvas2(props, forwardedRef) {
    const _a2 = props, {
      value,
      size = DEFAULT_SIZE,
      level = DEFAULT_LEVEL,
      bgColor = DEFAULT_BGCOLOR,
      fgColor = DEFAULT_FGCOLOR,
      includeMargin = DEFAULT_INCLUDEMARGIN,
      minVersion = DEFAULT_MINVERSION,
      boostLevel,
      marginSize,
      imageSettings
    } = _a2, extraProps = __objRest(_a2, [
      "value",
      "size",
      "level",
      "bgColor",
      "fgColor",
      "includeMargin",
      "minVersion",
      "boostLevel",
      "marginSize",
      "imageSettings"
    ]);
    const _b2 = extraProps, { style } = _b2, otherProps = __objRest(_b2, ["style"]);
    const imgSrc = imageSettings == null ? void 0 : imageSettings.src;
    const _canvas = React$2.useRef(null);
    const _image = React$2.useRef(null);
    const setCanvasRef = React$2.useCallback(
      (node) => {
        _canvas.current = node;
        if (typeof forwardedRef === "function") {
          forwardedRef(node);
        } else if (forwardedRef) {
          forwardedRef.current = node;
        }
      },
      [forwardedRef]
    );
    const [isImgLoaded, setIsImageLoaded] = React$2.useState(false);
    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({
      value,
      level,
      minVersion,
      boostLevel,
      includeMargin,
      marginSize,
      imageSettings,
      size
    });
    React$2.useEffect(() => {
      if (_canvas.current != null) {
        const canvas = _canvas.current;
        const ctx = canvas.getContext("2d");
        if (!ctx) {
          return;
        }
        let cellsToDraw = cells;
        const image = _image.current;
        const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;
        if (haveImageToRender) {
          if (calculatedImageSettings.excavation != null) {
            cellsToDraw = excavateModules(
              cells,
              calculatedImageSettings.excavation
            );
          }
        }
        const pixelRatio = window.devicePixelRatio || 1;
        canvas.height = canvas.width = size * pixelRatio;
        const scale2 = size / numCells * pixelRatio;
        ctx.scale(scale2, scale2);
        ctx.fillStyle = bgColor;
        ctx.fillRect(0, 0, numCells, numCells);
        ctx.fillStyle = fgColor;
        if (SUPPORTS_PATH2D) {
          ctx.fill(new Path2D(generatePath(cellsToDraw, margin)));
        } else {
          cells.forEach(function(row, rdx) {
            row.forEach(function(cell, cdx) {
              if (cell) {
                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);
              }
            });
          });
        }
        if (calculatedImageSettings) {
          ctx.globalAlpha = calculatedImageSettings.opacity;
        }
        if (haveImageToRender) {
          ctx.drawImage(
            image,
            calculatedImageSettings.x + margin,
            calculatedImageSettings.y + margin,
            calculatedImageSettings.w,
            calculatedImageSettings.h
          );
        }
      }
    });
    React$2.useEffect(() => {
      setIsImageLoaded(false);
    }, [imgSrc]);
    const canvasStyle = __spreadValues({ height: size, width: size }, style);
    let img = null;
    if (imgSrc != null) {
      img = /* @__PURE__ */ React$2.createElement(
        "img",
        {
          src: imgSrc,
          key: imgSrc,
          style: { display: "none" },
          onLoad: () => {
            setIsImageLoaded(true);
          },
          ref: _image,
          crossOrigin: calculatedImageSettings == null ? void 0 : calculatedImageSettings.crossOrigin
        }
      );
    }
    return /* @__PURE__ */ React$2.createElement(React$2.Fragment, null, /* @__PURE__ */ React$2.createElement(
      "canvas",
      __spreadValues({
        style: canvasStyle,
        height: size,
        width: size,
        ref: setCanvasRef,
        role: "img"
      }, otherProps)
    ), img);
  }
);
QRCodeCanvas.displayName = "QRCodeCanvas";
var QRCodeSVG = React$2.forwardRef(
  function QRCodeSVG2(props, forwardedRef) {
    const _a2 = props, {
      value,
      size = DEFAULT_SIZE,
      level = DEFAULT_LEVEL,
      bgColor = DEFAULT_BGCOLOR,
      fgColor = DEFAULT_FGCOLOR,
      includeMargin = DEFAULT_INCLUDEMARGIN,
      minVersion = DEFAULT_MINVERSION,
      boostLevel,
      title,
      marginSize,
      imageSettings
    } = _a2, otherProps = __objRest(_a2, [
      "value",
      "size",
      "level",
      "bgColor",
      "fgColor",
      "includeMargin",
      "minVersion",
      "boostLevel",
      "title",
      "marginSize",
      "imageSettings"
    ]);
    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({
      value,
      level,
      minVersion,
      boostLevel,
      includeMargin,
      marginSize,
      imageSettings,
      size
    });
    let cellsToDraw = cells;
    let image = null;
    if (imageSettings != null && calculatedImageSettings != null) {
      if (calculatedImageSettings.excavation != null) {
        cellsToDraw = excavateModules(
          cells,
          calculatedImageSettings.excavation
        );
      }
      image = /* @__PURE__ */ React$2.createElement(
        "image",
        {
          href: imageSettings.src,
          height: calculatedImageSettings.h,
          width: calculatedImageSettings.w,
          x: calculatedImageSettings.x + margin,
          y: calculatedImageSettings.y + margin,
          preserveAspectRatio: "none",
          opacity: calculatedImageSettings.opacity,
          crossOrigin: calculatedImageSettings.crossOrigin
        }
      );
    }
    const fgPath = generatePath(cellsToDraw, margin);
    return /* @__PURE__ */ React$2.createElement(
      "svg",
      __spreadValues({
        height: size,
        width: size,
        viewBox: `0 0 ${numCells} ${numCells}`,
        ref: forwardedRef,
        role: "img"
      }, otherProps),
      !!title && /* @__PURE__ */ React$2.createElement("title", null, title),
      /* @__PURE__ */ React$2.createElement(
        "path",
        {
          fill: bgColor,
          d: `M0,0 h${numCells}v${numCells}H0z`,
          shapeRendering: "crispEdges"
        }
      ),
      /* @__PURE__ */ React$2.createElement("path", { fill: fgColor, d: fgPath, shapeRendering: "crispEdges" }),
      image
    );
  }
);
QRCodeSVG.displayName = "QRCodeSVG";
const LoadingMessages = () => {
  const messages = [
    "Inicializando WhatsApp...",
    "Preparando QR Code...",
    "Conectando ao servidor...",
    "Configurando sessão...",
    "Quase lá...",
    "Gerando QR Code...",
    "Estabelecendo conexão segura..."
  ];
  const [messageIndex, setMessageIndex] = reactExports.useState(0);
  reactExports.useEffect(() => {
    const interval = setInterval(() => {
      setMessageIndex((prevIndex) => (prevIndex + 1) % messages.length);
    }, 2500);
    return () => clearInterval(interval);
  }, [messages.length]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { mode: "wait", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    motion.p,
    {
      initial: { opacity: 0, y: 10 },
      animate: { opacity: 1, y: 0 },
      exit: { opacity: 0, y: -10 },
      transition: { duration: 0.3 },
      className: "text-xs text-gray-300 text-center min-h-[1.5rem]",
      children: messages[messageIndex]
    },
    messageIndex
  ) });
};
const QRCodeModal = ({
  isOpen,
  onClose,
  connectionId,
  connectionName,
  onConnect
}) => {
  const [qrCode, setQrCode] = reactExports.useState(null);
  const [status, setStatus] = reactExports.useState("loading");
  const [errorMessage, setErrorMessage] = reactExports.useState("");
  const eventSourceRef = reactExports.useRef(null);
  const connectionNotifiedRef = reactExports.useRef(false);
  const updateConnectionStatus = async () => {
    console.log("Iniciando updateConnectionStatus, connectionNotifiedRef:", connectionNotifiedRef.current);
    if (connectionNotifiedRef.current) {
      console.log("Conexão já notificada, ignorando notificação duplicada");
      return;
    }
    console.log("Atualizando status da conexão para conectado");
    try {
      const statusResponse = await fetch("http://localhost:3001/api/status");
      const statusData = await statusResponse.json();
      if (!statusData.whatsapp || statusData.whatsapp.state !== "connected") {
        console.error("TRAVA DE SEGURANÇA: WhatsApp não está realmente conectado!", statusData);
        setStatus("error");
        setErrorMessage("Erro: WhatsApp não está realmente conectado. Tente novamente.");
        return;
      }
      connectionNotifiedRef.current = true;
      console.log("connectionNotifiedRef atualizado para true");
      const response = await fetch(`http://localhost:3001/api/updateConnection`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          connectionId,
          status: "connected",
          last_connection: (/* @__PURE__ */ new Date()).toISOString()
        })
      });
      if (response.ok) {
        console.log("Status atualizado com sucesso no banco de dados");
        onConnect();
        console.log("onConnect chamado");
      } else {
        connectionNotifiedRef.current = false;
        console.error("Falha ao atualizar status no banco de dados");
        setStatus("error");
        setErrorMessage("Erro ao atualizar status da conexão no banco de dados");
      }
    } catch (error) {
      connectionNotifiedRef.current = false;
      console.error("Erro ao atualizar status da conexão:", error);
      setStatus("error");
      setErrorMessage("Erro ao atualizar status da conexão");
    }
  };
  const handleReload = () => {
    setStatus("loading");
    setErrorMessage("");
    setQrCode(null);
    fetch("http://localhost:3001/api/reinitialize", { method: "POST" }).then(() => {
      setTimeout(() => {
        fetch("http://localhost:3001/api/status").then((res) => res.json()).then((data) => {
          if (data.whatsapp.hasQR) {
            fetch("http://localhost:3001/api/qrcode").then((res) => res.json()).then((qrData) => {
              if (qrData.qrCode) {
                setQrCode(qrData.qrCode);
                setStatus("ready");
              }
            });
          }
        });
      }, 2e3);
    }).catch((error) => {
      console.error("Erro ao reinicializar cliente:", error);
      setStatus("error");
      setErrorMessage("Não foi possível reinicializar o cliente WhatsApp");
    });
  };
  reactExports.useEffect(() => {
    if (!isOpen) {
      if (eventSourceRef.current) {
        console.log("[QRCodeModal] Modal não está aberto, fechando EventSource existente.");
        eventSourceRef.current.close();
        eventSourceRef.current = null;
      }
      return;
    }
    console.log(`[QRCodeModal] useEffect executado para connectionId: ${connectionId}, isOpen: ${isOpen}`);
    setStatus("loading");
    setQrCode(null);
    setErrorMessage("");
    connectionNotifiedRef.current = false;
    const triggerReinitialize = () => {
      console.log(`[QRCodeModal] Disparando reinicialização para connectionId: ${connectionId}`);
      setStatus("loading");
      setQrCode(null);
      const timeoutId = setTimeout(() => {
        if (status === "loading") {
          console.log("[QRCodeModal] Gerando QR Code está demorando mais que o esperado...");
          setErrorMessage("Gerando QR Code... Isso pode levar alguns segundos.");
        }
      }, 3e3);
      fetch("http://localhost:3001/api/reinitialize", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ connectionId })
      }).then((res) => res.json()).then((reinitData) => {
        clearTimeout(timeoutId);
        if (reinitData.success) {
          console.log("[QRCodeModal] Reinicialização solicitada com sucesso. Aguardando QR Code via SSE...");
          if (reinitData.hasExistingQR) {
            console.log("[QRCodeModal] QR code já disponível no backend, aguardando recebimento via SSE...");
          }
        } else {
          console.error("[QRCodeModal] Falha ao solicitar reinicialização:", reinitData.error);
          setStatus("error");
          setErrorMessage(reinitData.error || "Falha ao tentar obter QR Code.");
        }
      }).catch((err) => {
        clearTimeout(timeoutId);
        console.error("[QRCodeModal] Erro de rede ao solicitar reinicialização:", err);
        setStatus("error");
        setErrorMessage("Erro de rede ao tentar obter QR Code.");
      });
    };
    fetch("http://localhost:3001/api/status").then((res) => res.json()).then((data) => {
      const backendStatus = data.whatsapp;
      console.log("[QRCodeModal] Status inicial recebido:", backendStatus, "para connectionId:", connectionId);
      if (backendStatus.connectionId === connectionId) {
        if (backendStatus.state === "connected") {
          console.log("[QRCodeModal] Conexão parece estar estabelecida para este ID, mas vamos forçar reinicialização para garantir.");
          triggerReinitialize();
        } else if ((backendStatus.state === "pending_qr" || backendStatus.state === "initializing") && backendStatus.hasQR && backendStatus.qrCode) {
          console.log("[QRCodeModal] Backend tem QR Code para este ID. Exibindo.");
          setQrCode(backendStatus.qrCode);
          setStatus("ready");
        } else {
          console.log(`[QRCodeModal] Estado inicial (${backendStatus.state}) não ideal ou sem QR para ${connectionId}. Forçando reinicialização.`);
          triggerReinitialize();
        }
      } else {
        console.log(`[QRCodeModal] Backend focado em outra conexão (${backendStatus.connectionId}) ou nenhuma. Forçando reinicialização para ${connectionId}.`);
        triggerReinitialize();
      }
    }).catch((error) => {
      console.error("[QRCodeModal] Erro ao verificar status inicial. Forçando reinicialização:", error);
      setErrorMessage("Não foi possível verificar o status inicial. Tentando obter QR Code...");
      triggerReinitialize();
    });
    if (!eventSourceRef.current) {
      console.log("[QRCodeModal] Configurando novo EventSource...");
      const source = new EventSource("http://localhost:3001/api/events");
      eventSourceRef.current = source;
      source.onopen = () => {
        console.log("[QRCodeModal] EventSource conectado.");
      };
      source.onmessage = (event) => {
        try {
          const eventData = JSON.parse(event.data);
          if (eventData.type === "qr") {
            if (status !== "connected") {
              if (eventData.data === "" || eventData.data === null) {
                console.log("[QRCodeModal] Evento QR vazio/null recebido. Tratando como conectado.");
                setStatus("connected");
                if (!connectionNotifiedRef.current) {
                  updateConnectionStatus();
                }
              } else if (eventData.data) {
                console.log("[QRCodeModal] QR code válido recebido via SSE. Exibindo.");
                setErrorMessage("");
                setQrCode(eventData.data);
                setStatus("ready");
              }
            }
          } else if (eventData.type === "status" && eventData.data) {
            if (eventData.data.connectionId === connectionId) {
              if (eventData.data.state === "connected" && status !== "connected") {
                console.log(`[QRCodeModal] Evento de status 'connected' para ${connectionId}.`);
                fetch("http://localhost:3001/api/status").then((res) => res.json()).then((statusData) => {
                  if (statusData.whatsapp && statusData.whatsapp.state === "connected") {
                    console.log("[QRCodeModal] Confirmado: WhatsApp realmente conectado.");
                    setStatus("connected");
                    if (!connectionNotifiedRef.current) updateConnectionStatus();
                  } else {
                    console.error("[QRCodeModal] TRAVA DE SEGURANÇA: Evento indica conexão, mas verificação mostra que não está conectado!");
                  }
                }).catch((err) => {
                  console.error("[QRCodeModal] Erro ao verificar status real do WhatsApp:", err);
                });
              } else if (eventData.data.state === "auth_failure") {
                console.log(`[QRCodeModal] Evento de status 'auth_failure' para ${connectionId}.`);
                setStatus("error");
                setErrorMessage("Falha na autenticação do WhatsApp.");
              } else if (eventData.data.state === "disconnected" && status === "connected") {
                console.log(`[QRCodeModal] Evento de status 'disconnected' para ${connectionId} que estava conectada. Fechando modal.`);
                onClose();
              } else if (eventData.data.state === "pending_qr" && eventData.data.hasQR && eventData.data.qrCode && status !== "ready") {
                console.log(`[QRCodeModal] Evento de status 'pending_qr' com QR para ${connectionId}. Exibindo QR.`);
                setQrCode(eventData.data.qrCode);
                setStatus("ready");
              }
            }
          } else if (eventData.type === "reload") {
            if (eventData.data.connectionId === connectionId || !eventData.data.connectionId) {
              console.log("[QRCodeModal] Evento SSE de reload do backend. Modal aguardando novo QR.");
              if (status !== "connected") {
                setStatus("loading");
                setQrCode(null);
              }
            }
          }
        } catch (error) {
          console.error("[QRCodeModal] Erro ao processar evento SSE:", error);
        }
      };
      source.onerror = (err) => {
        console.error("[QRCodeModal] EventSource error:", err);
        if (status !== "connected") {
          setStatus("error");
          setErrorMessage("Erro na conexão com o servidor de eventos (SSE).");
        }
        if (eventSourceRef.current) {
          eventSourceRef.current.close();
          eventSourceRef.current = null;
          console.log("[QRCodeModal] EventSource fechado devido a erro.");
        }
      };
    } else {
      console.log("[QRCodeModal] EventSource já existe. Não recriando.");
    }
    return () => {
      if (eventSourceRef.current) {
        console.log("[QRCodeModal] Limpando EventSource no return do useEffect.");
        eventSourceRef.current.close();
        eventSourceRef.current = null;
      }
    };
  }, [isOpen, connectionId, onConnect, onClose]);
  console.log("QRCodeModal renderizando com isOpen:", isOpen);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: isOpen && /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    motion.div,
    {
      initial: { opacity: 0 },
      animate: { opacity: 1 },
      exit: { opacity: 0 },
      className: "fixed inset-0 bg-black/70 z-50 flex items-center justify-center",
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { opacity: 0, scale: 0.95 },
          animate: { opacity: 1, scale: 1 },
          exit: { opacity: 0, scale: 0.95 },
          transition: { type: "spring", damping: 20, stiffness: 300 },
          className: "w-full max-w-xs bg-background-card border border-gray-800 rounded-lg shadow-xl z-50",
          style: { margin: "0 auto" },
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("h2", { className: "text-base font-semibold text-white", children: [
                "Conectar: ",
                connectionName
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: onClose,
                  className: "text-gray-400 hover:text-white transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3", children: [
              status === "loading" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center justify-center py-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative w-16 h-16 mb-3", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-12 h-12 border-4 border-gray-600 border-t-primary-500 rounded-full animate-spin" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "div",
                    {
                      className: "w-8 h-8 border-3 border-gray-700 border-t-primary-400 rounded-full animate-spin-slow",
                      style: { animationDirection: "reverse" }
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 bg-primary-500 rounded-full animate-pulse" }) })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingMessages, {}),
                errorMessage && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-400 mt-2 max-w-[200px] text-center", children: errorMessage }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-48 h-1 bg-gray-800 rounded-full mt-3 overflow-hidden", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full bg-primary-500 rounded-full animate-progress-bar" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-3 text-xs text-gray-500", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-center", children: "Aguarde enquanto preparamos sua conexão" }) })
              ] }),
              status === "ready" && qrCode && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  className: "flex flex-col items-center justify-center py-1",
                  initial: { opacity: 0, scale: 0.9 },
                  animate: { opacity: 1, scale: 1 },
                  transition: { type: "spring", duration: 0.5 },
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute -inset-2 rounded-lg bg-gradient-to-r from-primary-500 via-accent-500 to-primary-500 opacity-75 blur-sm animate-pulse" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative bg-white p-2 rounded-lg shadow-lg", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(QRCodeSVG, { value: qrCode, size: 120 }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-0 flex items-center justify-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-20 h-20 border-2 border-primary-500 opacity-50 animate-ping rounded-sm" }) })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-3 text-center", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        motion.p,
                        {
                          className: "text-sm font-medium text-white mb-1",
                          initial: { opacity: 0, y: 5 },
                          animate: { opacity: 1, y: 0 },
                          transition: { delay: 0.2 },
                          children: "QR Code pronto!"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        motion.div,
                        {
                          initial: { opacity: 0 },
                          animate: { opacity: 1 },
                          transition: { delay: 0.3 },
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-300 mb-1", children: "Escaneie o QR Code" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-400", children: "Abra o WhatsApp e selecione WhatsApp Web" })
                          ]
                        }
                      )
                    ] })
                  ]
                }
              ),
              status === "connected" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  className: "flex flex-col items-center justify-center py-4",
                  initial: { opacity: 0, scale: 0.9 },
                  animate: { opacity: 1, scale: 1 },
                  transition: { duration: 0.3 },
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      motion.div,
                      {
                        className: "w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center mb-2",
                        initial: { scale: 0.5 },
                        animate: { scale: 1 },
                        transition: { type: "spring", damping: 10, stiffness: 200 },
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                          motion.svg,
                          {
                            className: "w-6 h-6 text-green-500",
                            fill: "none",
                            viewBox: "0 0 24 24",
                            stroke: "currentColor",
                            initial: { pathLength: 0 },
                            animate: { pathLength: 1 },
                            transition: { duration: 0.5, delay: 0.2 },
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                              motion.path,
                              {
                                strokeLinecap: "round",
                                strokeLinejoin: "round",
                                strokeWidth: 3,
                                d: "M5 13l4 4L19 7"
                              }
                            )
                          }
                        )
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-sm font-medium text-white mb-1", children: "Conectado com sucesso!" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-400 text-center", children: "WhatsApp pronto para uso." })
                  ]
                }
              ),
              status === "error" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center justify-center py-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-12 h-12 bg-red-500/10 rounded-full flex items-center justify-center mb-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-6 h-6 text-red-400", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M6 18L18 6M6 6l12 12" }) }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-sm font-medium text-white mb-1", children: "Erro na conexão" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-400 text-center mb-2", children: errorMessage || "Não foi possível conectar ao WhatsApp" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  Button,
                  {
                    type: "button",
                    variant: "primary",
                    className: "flex items-center gap-1 text-xs py-1 px-2",
                    onClick: handleReload,
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(RefreshCw, { size: 12 }),
                      "Tentar novamente"
                    ]
                  }
                )
              ] }),
              (status === "ready" || status === "loading") && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-end gap-2 pt-2 border-t border-gray-800", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    onClick: onClose,
                    className: "text-xs py-1 px-2",
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  Button,
                  {
                    type: "button",
                    variant: "primary",
                    disabled: status === "loading",
                    onClick: handleReload,
                    className: "flex items-center gap-1 text-xs py-1 px-2",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(RefreshCw, { size: 12 }),
                      "Recarregar"
                    ]
                  }
                )
              ] }),
              status === "connected" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-end pt-2 border-t border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "button",
                  variant: "primary",
                  onClick: onClose,
                  className: "text-xs py-1 px-2",
                  children: "Fechar"
                }
              ) })
            ] })
          ] })
        }
      )
    }
  ) }) });
};
const formatarDataHoraBrasil = (dataString) => {
  if (!dataString) return "Não disponível";
  try {
    const data = new Date(dataString);
    if (isNaN(data.getTime())) return "Data inválida";
    return new Intl.DateTimeFormat("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      timeZone: "America/Sao_Paulo"
    }).format(data);
  } catch (error) {
    console.error("Erro ao formatar data:", error);
    return "Erro na data";
  }
};
const ConfirmDialog = ({
  isOpen,
  title,
  message,
  onConfirm,
  onCancel
}) => {
  if (!isOpen) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black/70 z-50 flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card border border-gray-800 rounded-lg p-6 max-w-sm w-full", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(AlertTriangle, { className: "text-yellow-400", size: 24 }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white", children: title })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-300 mb-6", children: message }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3 justify-end", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          type: "button",
          variant: "text",
          onClick: onCancel,
          children: "Cancelar"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          type: "button",
          variant: "primary",
          onClick: onConfirm,
          children: "Confirmar"
        }
      )
    ] })
  ] }) });
};
const ConexaoPage = () => {
  const [connections, setConnections] = reactExports.useState([]);
  const [showSidebar, setShowSidebar] = reactExports.useState(false);
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [novaConexao, setNovaConexao] = reactExports.useState({ nome: "" });
  const [showQrModal, setShowQrModal] = reactExports.useState(false);
  const [selectedConnection, setSelectedConnection] = reactExports.useState(null);
  const [serverStatus, setServerStatus] = reactExports.useState("loading");
  const [validandoConfiguracoes, setValidandoConfiguracoes] = reactExports.useState(false);
  const [confirmDialog, setConfirmDialog] = reactExports.useState({
    isOpen: false,
    title: "",
    message: "",
    onConfirm: () => {
    }
  });
  const checkServerStatus = async () => {
    try {
      const response = await fetch("http://localhost:3001/api/status", {
        signal: AbortSignal.timeout(3e3)
        // Timeout de 3 segundos
      });
      if (response.ok) {
        setServerStatus("online");
      } else {
        setServerStatus("offline");
      }
    } catch (error) {
      console.error("Erro ao verificar status do servidor:", error);
      setServerStatus("offline");
    }
  };
  reactExports.useEffect(() => {
    loadConnections();
    checkServerStatus();
    const intervalId = setInterval(checkServerStatus, 3e4);
    return () => clearInterval(intervalId);
  }, []);
  const loadConnections = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: conexoesData } = await supabase.from("conexao").select("*").eq("empresa_id", usuarioData.empresa_id);
      setConnections(conexoesData || []);
    } catch (error) {
      console.error("Error loading connections:", error);
      showMessage("error", "Erro ao carregar conexões");
    }
  };
  const verificarConfiguracoesAntesDeAdicionar = async () => {
    if (connections.length > 0) {
      showMessage("error", "No momento, apenas uma instância de WhatsApp é permitida por empresa.");
      return;
    }
    setValidandoConfiguracoes(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        showMessage("error", "Usuário não autenticado");
        return;
      }
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        showMessage("error", "Empresa não encontrada");
        return;
      }
      const validacao = await validarConfiguracoesPrevias(usuarioData.empresa_id);
      if (!validacao.valido) {
        showMessage("error", validacao.mensagem);
        return;
      }
      setShowSidebar(true);
    } catch (error) {
      showMessage("error", "Erro ao verificar configurações: " + error.message);
    } finally {
      setValidandoConfiguracoes(false);
    }
  };
  const validarConfiguracoesPrevias = async (empresaId) => {
    try {
      const { data: formasPagamento, error: errorFormasPagamento } = await supabase.from("formas_pagamento").select("id").eq("empresa_id", empresaId).limit(1);
      if (errorFormasPagamento || !formasPagamento || formasPagamento.length === 0) {
        return {
          valido: false,
          mensagem: "Você precisa cadastrar pelo menos uma forma de pagamento antes de criar uma conexão WhatsApp."
        };
      }
      const { data: horariosAtendimento, error: errorHorarios } = await supabase.from("horario_atendimento").select("id").eq("empresa_id", empresaId).limit(1);
      if (errorHorarios || !horariosAtendimento || horariosAtendimento.length === 0) {
        return {
          valido: false,
          mensagem: "Você precisa cadastrar pelo menos um horário de atendimento antes de criar uma conexão WhatsApp."
        };
      }
      const { data: grupos, error: errorGrupos } = await supabase.from("grupos").select("id").eq("empresa_id", empresaId).limit(1);
      if (errorGrupos || !grupos || grupos.length === 0) {
        return {
          valido: false,
          mensagem: "Você precisa cadastrar pelo menos um grupo de produtos antes de criar uma conexão WhatsApp."
        };
      }
      const { data: produtos, error: errorProdutos } = await supabase.from("produtos").select("id").eq("empresa_id", empresaId).limit(1);
      if (errorProdutos || !produtos || produtos.length === 0) {
        return {
          valido: false,
          mensagem: "Você precisa cadastrar pelo menos um produto antes de criar uma conexão WhatsApp."
        };
      }
      const { data: taxasEntrega, error: errorTaxas } = await supabase.from("taxa_entrega").select("id").eq("empresa_id", empresaId).limit(1);
      if (errorTaxas || !taxasEntrega || taxasEntrega.length === 0) {
        return {
          valido: false,
          mensagem: "Você precisa cadastrar pelo menos uma taxa de entrega antes de criar uma conexão WhatsApp."
        };
      }
      return { valido: true, mensagem: "Todas as configurações necessárias estão preenchidas." };
    } catch (error) {
      console.error("Erro ao validar configurações:", error);
      return {
        valido: false,
        mensagem: "Erro ao validar configurações: " + error.message
      };
    }
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!novaConexao.nome.trim()) return;
    if (connections.length > 0) {
      showMessage("error", "No momento, apenas uma instância de WhatsApp é permitida por empresa.");
      setShowSidebar(false);
      return;
    }
    setIsLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const { data: existingConnections } = await supabase.from("conexao").select("id").eq("empresa_id", usuarioData.empresa_id);
      if (existingConnections && existingConnections.length > 0) {
        throw new Error("No momento, apenas uma instância de WhatsApp é permitida por empresa.");
      }
      const validacao = await validarConfiguracoesPrevias(usuarioData.empresa_id);
      if (!validacao.valido) {
        throw new Error(validacao.mensagem);
      }
      const { error } = await supabase.from("conexao").insert([{
        nome: novaConexao.nome,
        empresa_id: usuarioData.empresa_id
      }]);
      if (error) throw error;
      setNovaConexao({ nome: "" });
      setShowSidebar(false);
      loadConnections();
      showMessage("success", "Conexão criada com sucesso!");
    } catch (error) {
      showMessage("error", "Erro ao criar conexão: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };
  const handleConnect = (connection) => {
    console.log("handleConnect chamado para conexão:", connection);
    const checkConnectionStatus = async () => {
      try {
        const { data, error } = await supabase.from("conexao").select("status").eq("id", connection.id).single();
        if (error) {
          console.error("Erro ao verificar status da conexão:", error);
          showMessage("error", "Erro ao verificar status da conexão");
          return;
        }
        console.log("Status atual da conexão no banco de dados:", data == null ? void 0 : data.status);
        if ((data == null ? void 0 : data.status) === "disconnected" || !(data == null ? void 0 : data.status)) {
          console.log("Conexão desconectada no banco de dados. Exibindo QR code.");
          setSelectedConnection(connection);
          console.log("selectedConnection definido:", connection);
          setTimeout(() => {
            setShowQrModal(true);
            console.log("showQrModal definido como true");
          }, 100);
        } else {
          console.log("Forçando exibição do QR code mesmo com status:", data == null ? void 0 : data.status);
          setSelectedConnection(connection);
          setTimeout(() => {
            setShowQrModal(true);
            console.log("showQrModal definido como true");
          }, 100);
        }
      } catch (error) {
        console.error("Erro ao verificar status da conexão:", error);
        showMessage("error", "Erro ao verificar status da conexão");
      }
    };
    checkConnectionStatus();
  };
  const [connectionNotified, setConnectionNotified] = reactExports.useState(false);
  const handleConnectionSuccess = async () => {
    console.log("ConexaoPage: handleConnectionSuccess chamado");
    if (connectionNotified) {
      console.log("ConexaoPage: Notificação de conexão já processada anteriormente, retornando.");
      if (showQrModal) {
        console.log("ConexaoPage: Fechando QRCodeModal pois conexão já foi notificada e modal ainda aberto.");
        setShowQrModal(false);
      }
      return;
    }
    setConnectionNotified(true);
    console.log("ConexaoPage: connectionNotified atualizado para true.");
    if (selectedConnection) {
      console.log("ConexaoPage: Atualizando status visual da conexão:", selectedConnection.id);
      setConnections((prev) => prev.map((conn) => {
        if (conn.id === selectedConnection.id) {
          return {
            ...conn,
            status: "connected",
            last_connection: (/* @__PURE__ */ new Date()).toISOString()
          };
        }
        return conn;
      }));
    }
    showMessage("success", "WhatsApp conectado com sucesso!");
    console.log("ConexaoPage: Fechando QRCodeModal após sucesso da conexão.");
    setShowQrModal(false);
    console.log("ConexaoPage: Iniciando recarga de conexões do servidor.");
    setTimeout(() => {
      loadConnections();
      setTimeout(() => {
        setConnectionNotified(false);
        console.log("ConexaoPage: connectionNotified resetado para false após delay.");
      }, 1e3);
    }, 500);
  };
  const handleRemoveConnection = (connectionId) => {
    setConfirmDialog({
      isOpen: true,
      title: "Remover Conexão",
      message: "Tem certeza que deseja remover esta conexão? Esta ação não pode ser desfeita.",
      onConfirm: async () => {
        setConfirmDialog((prev) => ({ ...prev, isOpen: false }));
        try {
          const { error } = await supabase.from("conexao").delete().eq("id", connectionId);
          if (error) throw error;
          showMessage("success", "Conexão removida com sucesso!");
          loadConnections();
        } catch (error) {
          showMessage("error", "Erro ao remover conexão: " + error.message);
        }
      }
    });
  };
  const handleDisconnect = (connectionId) => {
    setConfirmDialog({
      isOpen: true,
      title: "Desconectar WhatsApp",
      message: "Tem certeza que deseja desconectar esta instância do WhatsApp? Você precisará escanear o QR code novamente para reconectar.",
      onConfirm: async () => {
        setConfirmDialog((prev) => ({ ...prev, isOpen: false }));
        try {
          const response = await fetch("http://localhost:3001/api/logout", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({ connectionId })
          });
          const result = await response.json();
          if (result.success) {
            setConnections((prev) => prev.map((conn) => {
              if (conn.id === connectionId) {
                return {
                  ...conn,
                  status: "disconnected",
                  last_connection: (/* @__PURE__ */ new Date()).toISOString()
                };
              }
              return conn;
            }));
            showMessage("success", "WhatsApp desconectado com sucesso!");
            setTimeout(loadConnections, 500);
          } else {
            showMessage("error", result.error || "Erro ao desconectar WhatsApp");
          }
        } catch (error) {
          console.error("Erro ao desconectar WhatsApp:", error);
          showMessage("error", "Erro ao desconectar WhatsApp: " + error.message);
        }
      }
    });
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "max-w-6xl mx-auto", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl font-semibold text-white", children: "Conexões WhatsApp" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mt-1", children: "Gerencie suas conexões do WhatsApp" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            type: "button",
            variant: "primary",
            className: "flex items-center gap-2",
            onClick: verificarConfiguracoesAntesDeAdicionar,
            disabled: connections.length > 0 || validandoConfiguracoes,
            children: validandoConfiguracoes ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2" }),
              "Verificando..."
            ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 20 }),
              "Adicionar Conexão"
            ] })
          }
        ),
        connections.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-0 top-full mt-2 w-64 p-3 bg-gray-800 border border-gray-700 rounded-lg shadow-lg z-10 text-xs text-gray-300 opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none", children: "No momento, apenas uma instância de WhatsApp é permitida por empresa." })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6", children: connections.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "col-span-full bg-background-card rounded-lg p-8 text-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-primary-500/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 24, className: "text-primary-400" }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: "Nenhuma conexão encontrada" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: "Adicione sua primeira conexão do WhatsApp para começar a receber pedidos." }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          type: "button",
          variant: "primary",
          className: "flex items-center gap-2 mx-auto",
          onClick: verificarConfiguracoesAntesDeAdicionar,
          disabled: connections.length > 0 || validandoConfiguracoes,
          children: validandoConfiguracoes ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2" }),
            "Verificando..."
          ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 20 }),
            "Adicionar Conexão"
          ] })
        }
      )
    ] }) : connections.map((connection) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: "bg-background-card rounded-lg p-6 border border-gray-800 hover:border-primary-500/50 transition-colors relative overflow-hidden",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              className: `absolute left-0 top-0 bottom-0 w-1 ${connection.status === "connected" ? "bg-green-500" : connection.status === "pending" ? "bg-yellow-500" : "bg-red-500"}`
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col mb-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-end mb-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `px-3 py-1 rounded-full text-sm ${connection.status === "connected" ? "bg-green-500/10 text-green-400" : connection.status === "pending" ? "bg-yellow-500/10 text-yellow-400" : "bg-red-500/10 text-red-400"}`, children: connection.status === "connected" ? "Conectado" : connection.status === "pending" ? "Pendente" : "Desconectado" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-medium text-white mb-2", children: connection.nome }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 mb-2", children: [
              serverStatus === "loading" ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-gray-600 border-t-primary-500 rounded-full animate-spin" }) : serverStatus === "online" ? /* @__PURE__ */ jsxRuntimeExports.jsx(CheckCircle, { size: 16, className: "text-green-500" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(XCircle, { size: 16, className: "text-red-500" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-sm font-medium", children: [
                "Status servidor: ",
                serverStatus === "loading" ? "Verificando..." : serverStatus === "online" ? "Online" : "Offline"
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400", children: [
              "Última conexão: ",
              formatarDataHoraBrasil(connection.last_connection)
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-px bg-gray-800 mb-4 mt-2" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-3", children: [
            connection.status !== "connected" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Button,
              {
                type: "button",
                variant: "text",
                className: `flex-1 flex items-center justify-center gap-2 py-2 border border-gray-700 rounded-md ${serverStatus === "online" ? "hover:bg-gray-800/50" : "opacity-50 cursor-not-allowed"}`,
                onClick: () => serverStatus === "online" && handleConnect(connection),
                disabled: serverStatus !== "online",
                title: serverStatus !== "online" ? "Servidor offline. Não é possível conectar." : "Conectar ao WhatsApp",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(QrCode, { size: 16 }),
                  "Conectar"
                ]
              }
            ),
            connection.status === "connected" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Button,
              {
                type: "button",
                variant: "text",
                className: "flex-1 flex items-center justify-center gap-2 py-2 border border-yellow-900/30 rounded-md text-yellow-400 hover:text-yellow-300 hover:bg-yellow-900/10",
                onClick: () => handleDisconnect(connection.id),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(LogOut, { size: 16 }),
                  "Desconectar"
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Button,
              {
                type: "button",
                variant: "text",
                className: "flex-1 flex items-center justify-center gap-2 py-2 border border-red-900/30 rounded-md text-red-400 hover:text-red-300 hover:bg-red-900/10",
                onClick: () => handleRemoveConnection(connection.id),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 }),
                  "Remover"
                ]
              }
            )
          ] })
        ]
      },
      connection.id
    )) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showSidebar && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { opacity: 0 },
          animate: { opacity: 1 },
          exit: { opacity: 0 },
          className: "fixed inset-0 bg-black/50 z-40",
          onClick: () => setShowSidebar(false)
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { x: "100%" },
          animate: { x: 0 },
          exit: { x: "100%" },
          transition: { type: "tween", duration: 0.3 },
          className: "fixed right-0 top-0 h-screen w-full max-w-md bg-background-card border-l border-gray-800 z-50 overflow-y-auto",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Nova Conexão" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => setShowSidebar(false),
                  className: "text-gray-400 hover:text-white transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 24 })
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, className: "space-y-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Nome da Conexão" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: novaConexao.nome,
                    onChange: (e) => setNovaConexao({ nome: e.target.value }),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Digite o nome da conexão"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    className: "flex-1",
                    onClick: () => setShowSidebar(false),
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    variant: "primary",
                    className: "flex-1",
                    disabled: isLoading,
                    children: isLoading ? "Criando..." : "Criar Conexão"
                  }
                )
              ] })
            ] })
          ] })
        }
      )
    ] }) }),
    console.log("Renderizando QRCodeModal? selectedConnection:", selectedConnection, "showQrModal:", showQrModal),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      QRCodeModal,
      {
        isOpen: showQrModal && selectedConnection !== null,
        onClose: () => {
          console.log("QRCodeModal onClose chamado");
          setShowQrModal(false);
        },
        connectionId: (selectedConnection == null ? void 0 : selectedConnection.id) || "",
        connectionName: (selectedConnection == null ? void 0 : selectedConnection.nome) || "",
        onConnect: handleConnectionSuccess
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      ConfirmDialog,
      {
        isOpen: confirmDialog.isOpen,
        title: confirmDialog.title,
        message: confirmDialog.message,
        onConfirm: confirmDialog.onConfirm,
        onCancel: () => setConfirmDialog((prev) => ({ ...prev, isOpen: false }))
      }
    )
  ] });
};
const FotoGaleria = ({
  fotos,
  isOpen,
  onClose,
  initialFotoIndex = 0
}) => {
  const [currentIndex, setCurrentIndex] = reactExports.useState(initialFotoIndex);
  reactExports.useEffect(() => {
    setCurrentIndex(initialFotoIndex);
  }, [fotos, initialFotoIndex]);
  if (!isOpen || fotos.length === 0) return null;
  const handleNext = (e) => {
    e.stopPropagation();
    setCurrentIndex((prevIndex) => (prevIndex + 1) % fotos.length);
  };
  const handlePrev = (e) => {
    e.stopPropagation();
    setCurrentIndex((prevIndex) => (prevIndex - 1 + fotos.length) % fotos.length);
  };
  const handleKeyDown = (e) => {
    if (e.key === "ArrowRight") {
      setCurrentIndex((prevIndex) => (prevIndex + 1) % fotos.length);
    } else if (e.key === "ArrowLeft") {
      setCurrentIndex((prevIndex) => (prevIndex - 1 + fotos.length) % fotos.length);
    } else if (e.key === "Escape") {
      onClose();
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
    motion.div,
    {
      initial: { opacity: 0 },
      animate: { opacity: 1 },
      exit: { opacity: 0 },
      className: "fixed inset-0 bg-black/90 flex items-center justify-center z-50",
      onClick: onClose,
      onKeyDown: handleKeyDown,
      tabIndex: 0,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: "absolute top-4 right-4 text-white p-2 rounded-full bg-gray-800/50 hover:bg-gray-700/50 transition-colors",
            onClick: onClose,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 24 })
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative w-full max-w-4xl max-h-[80vh] flex items-center justify-center", onClick: (e) => e.stopPropagation(), children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              transition: { duration: 0.2 },
              className: "relative",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "img",
                  {
                    src: fotos[currentIndex].url,
                    alt: "Foto do produto",
                    className: "max-h-[80vh] max-w-full object-contain"
                  }
                ),
                fotos[currentIndex].principal && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-2 right-2 bg-primary-500 text-white text-sm px-2 py-1 rounded", children: "Principal" })
              ]
            },
            fotos[currentIndex].id
          ),
          fotos.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                className: "absolute left-4 p-2 rounded-full bg-gray-800/50 hover:bg-gray-700/50 transition-colors text-white",
                onClick: handlePrev,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronLeft, { size: 24 })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                className: "absolute right-4 p-2 rounded-full bg-gray-800/50 hover:bg-gray-700/50 transition-colors text-white",
                onClick: handleNext,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRight, { size: 24 })
              }
            )
          ] }),
          fotos.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute bottom-4 left-0 right-0 flex justify-center gap-2", children: fotos.map((_2, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              className: `w-2 h-2 rounded-full ${index2 === currentIndex ? "bg-white" : "bg-gray-500"}`,
              onClick: (e) => {
                e.stopPropagation();
                setCurrentIndex(index2);
              }
            },
            index2
          )) })
        ] })
      ]
    }
  ) });
};
const NFeValidationModal = ({
  isOpen,
  onClose,
  campo,
  valor,
  validationResult,
  onCorrect
}) => {
  const [corrigindo, setCorrigindo] = React$2.useState(false);
  const [valorCorrigido, setValorCorrigido] = React$2.useState(valor);
  React$2.useEffect(() => {
    setValorCorrigido(valor);
  }, [valor]);
  const handleCorrect = () => {
    if (onCorrect) {
      onCorrect(valorCorrigido);
    }
    onClose();
  };
  if (!isOpen) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
    motion.div,
    {
      initial: { opacity: 0, scale: 0.95 },
      animate: { opacity: 1, scale: 1 },
      exit: { opacity: 0, scale: 0.95 },
      className: "bg-gray-900 rounded-xl border border-gray-800 shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-hidden",
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between p-6 border-b border-gray-800", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-2 bg-red-500/20 rounded-lg", children: /* @__PURE__ */ jsxRuntimeExports.jsx(AlertTriangle, { className: "w-6 h-6 text-red-400" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("h2", { className: "text-xl font-bold text-white", children: [
                'Validação NFe - Campo "',
                campo,
                '"'
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: "Problemas encontrados que podem causar rejeição da SEFAZ" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              onClick: onClose,
              className: "p-2 hover:bg-gray-800 rounded-lg transition-colors",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { className: "w-5 h-5 text-gray-400" })
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-6 space-y-6 max-h-[calc(90vh-200px)] overflow-y-auto", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Valor Atual (com problemas):" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-red-500/10 border border-red-500/30 rounded-lg p-3", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("code", { className: "text-red-300 text-sm break-all", children: [
              '"',
              valor,
              '"'
            ] }) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-3", children: "Problemas Encontrados:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: validationResult.errors.map((error, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: "flex items-start gap-3 p-3 bg-red-500/10 border border-red-500/30 rounded-lg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AlertTriangle, { className: "w-4 h-4 text-red-400 mt-0.5 flex-shrink-0" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-300 text-sm", children: error })
                ]
              },
              index2
            )) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-blue-500/10 border border-blue-500/30 rounded-lg p-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 mb-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Info, { className: "w-5 h-5 text-blue-400" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-medium text-blue-300", children: "Regras da SEFAZ para NFe" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "space-y-2 text-sm text-blue-200", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "flex items-start gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(CheckCircle, { className: "w-4 h-4 text-green-400 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Não pode ter espaços no início ou fim" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "flex items-start gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(CheckCircle, { className: "w-4 h-4 text-green-400 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Não pode ter espaços duplicados" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "flex items-start gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(CheckCircle, { className: "w-4 h-4 text-green-400 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Não pode ter quebras de linha" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "flex items-start gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(CheckCircle, { className: "w-4 h-4 text-green-400 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: `Não pode ter caracteres especiais como < > & " '` })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "flex items-start gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(CheckCircle, { className: "w-4 h-4 text-green-400 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Deve respeitar o tamanho máximo do campo" })
              ] })
            ] })
          ] }),
          onCorrect && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Corrija o texto abaixo:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "textarea",
              {
                value: valorCorrigido,
                onChange: (e) => setValorCorrigido(e.target.value),
                className: "w-full bg-gray-800 border border-gray-700 rounded-lg p-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20 resize-none",
                rows: 4,
                placeholder: "Digite o texto corrigido aqui..."
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Dica: Remova espaços extras, quebras de linha e caracteres especiais" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-green-500/10 border border-green-500/30 rounded-lg p-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-medium text-green-300 mb-3", children: "Exemplos Corretos:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 text-sm", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Nome do produto:" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("code", { className: "ml-2 text-green-300", children: '"Notebook Dell Inspiron 15 3000"' })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Descrição:" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("code", { className: "ml-2 text-green-300", children: '"Produto de alta qualidade, cor azul, tamanho M"' })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Endereço:" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("code", { className: "ml-2 text-green-300", children: '"Rua das Flores, 123"' })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3 p-6 border-t border-gray-800", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              onClick: onClose,
              className: "flex-1 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors",
              children: "Fechar"
            }
          ),
          onCorrect && /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              onClick: handleCorrect,
              className: "flex-1 px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors",
              children: "Aplicar Correção"
            }
          )
        ] })
      ]
    }
  ) }) });
};
const CARACTERES_NAO_PERMITIDOS = [
  // Caracteres de controle
  "\n",
  "\r",
  "	",
  "\v",
  "\f",
  // Caracteres especiais problemáticos
  "<",
  ">",
  "&",
  '"',
  "'",
  // Caracteres Unicode problemáticos
  "\0",
  "",
  "",
  "",
  "",
  "",
  "",
  "\x07",
  "\b",
  "\v",
  "\f",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "\x1B",
  "",
  "",
  "",
  "",
  ""
];
const CARACTERES_PERMITIDOS = {
  // Nome de produto, descrição, endereço
  TEXTO_GERAL: /^[a-zA-Z0-9\sÀ-ÿ\u00C0-\u017F.,;:()\-\/\+\*=@#$%&!?°ºª]+$/,
  // Informações adicionais (mais restritivo)
  INFO_ADICIONAL: /^[a-zA-Z0-9\sÀ-ÿ\u00C0-\u017F.,;:()\-\/\+\*=@#$%&!?°ºª]+$/,
  // Justificativa de cancelamento/CCe (mais restritivo ainda)
  JUSTIFICATIVA: /^[a-zA-Z0-9\sÀ-ÿ\u00C0-\u017F.,;:()\-\/\+\*=@#$%&!?°ºª]+$/,
  // Endereço (sem alguns caracteres especiais)
  ENDERECO: /^[a-zA-Z0-9\sÀ-ÿ\u00C0-\u017F.,;:()\-\/\+]+$/
};
const validarCampoNFe = (valor, tipo = "TEXTO_GERAL", maxLength) => {
  const errors = [];
  if (!valor || valor.trim() === "") {
    return { isValid: true, errors: [], cleanValue: "" };
  }
  if (valor !== valor.trim()) {
    errors.push("❌ Não são permitidos espaços no início ou fim do texto");
  }
  if (/\s{2,}/.test(valor)) {
    errors.push("❌ Não são permitidos espaços duplicados (use apenas 1 espaço entre palavras)");
  }
  if (/[\n\r]/.test(valor)) {
    errors.push("❌ Não são permitidas quebras de linha");
  }
  const caracteresProblematicos = CARACTERES_NAO_PERMITIDOS.filter((char) => valor.includes(char));
  if (caracteresProblematicos.length > 0) {
    errors.push(`❌ Caracteres não permitidos encontrados: ${caracteresProblematicos.map((c2) => `"${c2}"`).join(", ")}`);
  }
  const regex = CARACTERES_PERMITIDOS[tipo];
  if (!regex.test(valor.trim())) {
    errors.push("❌ Contém caracteres especiais não permitidos pela SEFAZ");
  }
  if (maxLength && valor.trim().length > maxLength) {
    errors.push(`❌ Texto muito longo (máximo ${maxLength} caracteres, atual: ${valor.trim().length})`);
  }
  if (valor.trim().length === 0 && valor.length > 0) {
    errors.push("❌ Campo não pode conter apenas espaços");
  }
  const isValid = errors.length === 0;
  const cleanValue = isValid ? valor.trim() : void 0;
  return { isValid, errors, cleanValue };
};
const validarNomeProduto = (nome) => {
  return validarCampoNFe(nome, "TEXTO_GERAL", 120);
};
const validarDescricaoProduto = (descricao) => {
  return validarCampoNFe(descricao, "TEXTO_GERAL", 500);
};
const validarEndereco = (endereco, campo) => {
  const result = validarCampoNFe(endereco, "ENDERECO", 60);
  if (!result.isValid) {
    result.errors = result.errors.map((error) => error.replace("❌", `❌ ${campo}:`));
  }
  return result;
};
const validarNomeCliente = (nome) => {
  return validarCampoNFe(nome, "TEXTO_GERAL", 60);
};
const validarRazaoSocial = (razaoSocial) => {
  return validarCampoNFe(razaoSocial, "TEXTO_GERAL", 60);
};
const validarNomeFantasia = (nomeFantasia) => {
  return validarCampoNFe(nomeFantasia, "TEXTO_GERAL", 60);
};
const validarObservacaoNFe = (observacao) => {
  return validarCampoNFe(observacao, "INFO_ADICIONAL", 2e3);
};
const validarBairro = (bairro) => {
  return validarCampoNFe(bairro, "ENDERECO", 60);
};
const validarCidade = (cidade) => {
  return validarCampoNFe(cidade, "ENDERECO", 60);
};
const validarComplemento = (complemento) => {
  return validarCampoNFe(complemento, "ENDERECO", 60);
};
const validarRazaoSocialEmpresa = (razaoSocial) => {
  return validarCampoNFe(razaoSocial, "TEXTO_GERAL", 60);
};
const validarNomeFantasiaEmpresa = (nomeFantasia) => {
  return validarCampoNFe(nomeFantasia, "TEXTO_GERAL", 60);
};
const validarNomeProprietario = (nome) => {
  return validarCampoNFe(nome, "TEXTO_GERAL", 60);
};
const debounce = (func, wait) => {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
};
const DeleteConfirmation$5 = ({
  isOpen,
  onClose,
  onConfirm,
  title,
  message
}) => {
  if (!isOpen) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    motion.div,
    {
      initial: { opacity: 0 },
      animate: { opacity: 1 },
      exit: { opacity: 0 },
      className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        motion.div,
        {
          initial: { scale: 0.95, opacity: 0 },
          animate: { scale: 1, opacity: 1 },
          exit: { scale: 0.95, opacity: 0 },
          className: "bg-background-card p-6 rounded-lg shadow-xl max-w-sm mx-4 w-full",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold text-white mb-2", children: title }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: message }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "button",
                  variant: "text",
                  className: "flex-1",
                  onClick: onClose,
                  children: "Cancelar"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "button",
                  variant: "primary",
                  className: "flex-1 !bg-red-500 hover:!bg-red-600",
                  onClick: onConfirm,
                  children: "Excluir"
                }
              )
            ] })
          ]
        }
      )
    }
  ) });
};
const WarningModal = ({ isOpen, onClose, message }) => {
  if (!isOpen) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    motion.div,
    {
      initial: { opacity: 0 },
      animate: { opacity: 1 },
      exit: { opacity: 0 },
      className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        motion.div,
        {
          initial: { scale: 0.95, opacity: 0 },
          animate: { scale: 1, opacity: 1 },
          exit: { scale: 0.95, opacity: 0 },
          className: "bg-background-card p-6 rounded-lg shadow-xl max-w-sm mx-4 w-full",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCircle, { className: "text-yellow-500", size: 24 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold text-white", children: "Atenção" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: message }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                type: "button",
                variant: "primary",
                className: "w-full",
                onClick: onClose,
                children: "Entendi"
              }
            )
          ]
        }
      )
    }
  ) });
};
const ProdutosPage = () => {
  const { withSessionCheck } = useAuthSession();
  const [grupos, setGrupos] = reactExports.useState([]);
  const [showSidebar, setShowSidebar] = reactExports.useState(false);
  const [isLoading, setIsLoading] = reactExports.useState(true);
  const [isDataReady, setIsDataReady] = reactExports.useState(false);
  const [isGrupoForm, setIsGrupoForm] = reactExports.useState(true);
  const [loadingStates, setLoadingStates] = reactExports.useState({
    grupos: true,
    opcoes: true,
    unidades: true,
    estoqueConfig: true
  });
  const checkIfDataReady = () => {
    const allLoaded = !loadingStates.grupos && !loadingStates.opcoes && !loadingStates.unidades && !loadingStates.estoqueConfig;
    if (allLoaded && !isDataReady) {
      setIsDataReady(true);
      setIsLoading(false);
    }
  };
  reactExports.useEffect(() => {
    checkIfDataReady();
  }, [loadingStates, isDataReady]);
  const [novoGrupoNome, setNovoGrupoNome] = reactExports.useState("");
  const [selectedGrupo, setSelectedGrupo] = reactExports.useState(null);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [sortOrder, setSortOrder] = reactExports.useState("asc");
  const [productSearchTerms, setProductSearchTerms] = reactExports.useState({});
  const [productSortOrders, setProductSortOrders] = reactExports.useState({});
  const [novoProduto, setNovoProduto] = reactExports.useState({
    nome: "",
    preco: 0,
    descricao: "",
    codigo: "",
    codigo_barras: "",
    promocao: false,
    ativo: true,
    desconto_quantidade: false,
    quantidade_minima: 0,
    tipo_desconto_quantidade: "percentual",
    valor_desconto_quantidade: 0,
    estoque_inicial: 0,
    estoque_minimo: 0,
    // Campos fiscais NFe
    ncm: "",
    cfop: "5102",
    origem_produto: 0,
    situacao_tributaria: "tributado_integral",
    cst_icms: "",
    csosn_icms: "",
    cst_pis: "01",
    cst_cofins: "01",
    aliquota_icms: 0,
    aliquota_pis: 1.65,
    aliquota_cofins: 7.6,
    cest: "",
    peso_liquido: 0,
    estoque_minimo_ativo: false
  });
  const [precoFormatado, setPrecoFormatado] = reactExports.useState("");
  const [editingProduto, setEditingProduto] = reactExports.useState(null);
  const [deleteConfirmation, setDeleteConfirmation] = reactExports.useState({
    isOpen: false,
    type: "grupo",
    id: "",
    title: "",
    message: ""
  });
  const [showWarning, setShowWarning] = reactExports.useState(false);
  const [warningMessage, setWarningMessage] = reactExports.useState("");
  const [produtoOpcoes, setProdutoOpcoes] = reactExports.useState({});
  const [expandedOpcoes, setExpandedOpcoes] = reactExports.useState({});
  const [availableOpcoes, setAvailableOpcoes] = reactExports.useState([]);
  const [selectedOpcoes, setSelectedOpcoes] = reactExports.useState([]);
  const [opcoesAdicionaisHabilitado, setOpcoesAdicionaisHabilitado] = reactExports.useState(false);
  const [expandedOpcoesForm, setExpandedOpcoesForm] = reactExports.useState({});
  const [activeTab, setActiveTab] = reactExports.useState("dados");
  const [produtoFotos, setProdutoFotos] = reactExports.useState([]);
  const [isUploadingFoto, setIsUploadingFoto] = reactExports.useState(false);
  const fileInputRef = reactExports.useRef(null);
  const [isGaleriaOpen, setIsGaleriaOpen] = reactExports.useState(false);
  const [currentFotoIndex, setCurrentFotoIndex] = reactExports.useState(0);
  const [unidadesMedida, setUnidadesMedida] = reactExports.useState([]);
  const [regimeTributario, setRegimeTributario] = reactExports.useState(3);
  const [ncmValidacao, setNcmValidacao] = reactExports.useState({
    validando: false,
    valido: null,
    descricao: "",
    erro: ""
  });
  const [showUnidadeMedidaForm, setShowUnidadeMedidaForm] = reactExports.useState(false);
  const [novaUnidadeMedida, setNovaUnidadeMedida] = reactExports.useState({
    sigla: "",
    nome: ""
  });
  const [isLoadingUnidadeMedida, setIsLoadingUnidadeMedida] = reactExports.useState(false);
  const [descontoFormatado, setDescontoFormatado] = reactExports.useState("");
  const [valorFinalFormatado, setValorFinalFormatado] = reactExports.useState("");
  const [descontoQuantidadeFormatado, setDescontoQuantidadeFormatado] = reactExports.useState("");
  const [estoqueInputVazio, setEstoqueInputVazio] = reactExports.useState(false);
  const [quantidadeMinimaVazia, setQuantidadeMinimaVazia] = reactExports.useState(false);
  const [estoqueMinimoVazio, setEstoqueMinimoVazio] = reactExports.useState(false);
  const [formularioResetado, setFormularioResetado] = reactExports.useState(false);
  const [estoqueMovimentos, setEstoqueMovimentos] = reactExports.useState([]);
  const [estoqueAtual, setEstoqueAtual] = reactExports.useState(0);
  const [estoqueNaoFaturado, setEstoqueNaoFaturado] = reactExports.useState(0);
  const [tipoVisualizacaoEstoque, setTipoVisualizacaoEstoque] = reactExports.useState("total");
  const [tipoControleEstoque, setTipoControleEstoque] = reactExports.useState("pedidos");
  const [produtosEstoque, setProdutosEstoque] = reactExports.useState({});
  const [novoMovimento, setNovoMovimento] = reactExports.useState({
    tipo: "entrada",
    quantidade: 0,
    observacao: ""
  });
  const [quantidadeMovimentoVazia, setQuantidadeMovimentoVazia] = reactExports.useState(false);
  const [isLoadingEstoque, setIsLoadingEstoque] = reactExports.useState(false);
  const [nfeValidationModal, setNfeValidationModal] = reactExports.useState({
    isOpen: false,
    campo: "",
    valor: "",
    validationResult: { isValid: true, errors: [] }
  });
  reactExports.useEffect(() => {
    loadGrupos();
    loadAvailableOpcoes();
    loadUnidadesMedida();
    loadTipoControleEstoque();
    loadProdutosEstoque();
    loadOpcoesAdicionaisConfig();
    loadRegimeTributario();
  }, []);
  const loadRegimeTributario = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: empresaData } = await supabase.from("empresas").select("regime_tributario").eq("id", usuarioData.empresa_id).single();
      if (empresaData == null ? void 0 : empresaData.regime_tributario) {
        setRegimeTributario(empresaData.regime_tributario);
      }
    } catch (error) {
      console.error("Erro ao carregar regime tributário:", error);
    }
  };
  const validarNCM = async (codigo) => {
    if (!codigo || codigo.length !== 8) {
      setNcmValidacao({
        validando: false,
        valido: null,
        descricao: "",
        erro: ""
      });
      return;
    }
    setNcmValidacao((prev) => ({ ...prev, validando: true }));
    try {
      const response = await fetch(`https://brasilapi.com.br/api/ncm/v1/${codigo}`);
      if (response.ok) {
        const data = await response.json();
        setNcmValidacao({
          validando: false,
          valido: true,
          descricao: data.descricao || "",
          erro: ""
        });
      } else {
        setNcmValidacao({
          validando: false,
          valido: false,
          descricao: "",
          erro: "NCM não encontrado na base de dados"
        });
      }
    } catch (error) {
      setNcmValidacao({
        validando: false,
        valido: false,
        descricao: "",
        erro: "Erro ao validar NCM. Verifique sua conexão."
      });
    }
  };
  const aplicarMascaraNCM = (valor) => {
    const apenasNumeros = valor.replace(/\D/g, "");
    if (apenasNumeros.length <= 4) {
      return apenasNumeros;
    } else if (apenasNumeros.length <= 6) {
      return `${apenasNumeros.slice(0, 4)}.${apenasNumeros.slice(4)}`;
    } else {
      return `${apenasNumeros.slice(0, 4)}.${apenasNumeros.slice(4, 6)}.${apenasNumeros.slice(6, 8)}`;
    }
  };
  const debounceValidarNCM = reactExports.useCallback(
    debounce((codigo) => {
      validarNCM(codigo);
    }, 800),
    []
  );
  reactExports.useEffect(() => {
    if (grupos.length > 0) {
      checkProdutoParaEditar();
    }
  }, [grupos]);
  const checkProdutoParaEditar = () => {
    const produtoParaEditar = localStorage.getItem("produto_para_editar");
    if (produtoParaEditar) {
      try {
        const { produto_id, grupo_id, timestamp, origem, aba_inicial } = JSON.parse(produtoParaEditar);
        const agora = (/* @__PURE__ */ new Date()).getTime();
        const tempoLimite = 5 * 60 * 1e3;
        if (agora - timestamp < tempoLimite) {
          abrirProdutoParaEdicao(produto_id, grupo_id, aba_inicial);
        }
        localStorage.removeItem("produto_para_editar");
      } catch (error) {
        console.error("Erro ao processar produto para editar:", error);
        localStorage.removeItem("produto_para_editar");
      }
    }
  };
  const abrirProdutoParaEdicao = (produtoId, grupoId, abaInicial) => {
    const grupo = grupos.find((g2) => g2.id === grupoId);
    if (!grupo) {
      return;
    }
    const produto = grupo.produtos.find((p2) => p2.id === produtoId);
    if (!produto) {
      return;
    }
    handleEditProduto(grupo, produto);
    if (abaInicial) {
      setTimeout(() => {
        setActiveTab(abaInicial);
      }, 100);
    }
  };
  reactExports.useEffect(() => {
    if (!showSidebar && formularioResetado) {
      setFormularioResetado(false);
    }
  }, [showSidebar, formularioResetado]);
  reactExports.useEffect(() => {
    document.title = `Nexo - Produtos (${tipoControleEstoque})`;
    if (tipoControleEstoque === "faturamento" && tipoVisualizacaoEstoque !== "total") {
      setTipoVisualizacaoEstoque("total");
    }
  }, [tipoControleEstoque, tipoVisualizacaoEstoque]);
  reactExports.useEffect(() => {
    if (novoProduto.promocao && novoProduto.preco && novoProduto.tipo_desconto && novoProduto.valor_desconto !== void 0) {
      const valorFinal = calcularValorFinal(
        novoProduto.preco,
        novoProduto.tipo_desconto,
        novoProduto.valor_desconto
      );
      setValorFinalFormatado(formatarPreco2(valorFinal));
    } else {
      setValorFinalFormatado("");
    }
  }, [novoProduto.preco, novoProduto.promocao, novoProduto.tipo_desconto, novoProduto.valor_desconto]);
  reactExports.useEffect(() => {
    if (novoProduto.estoque_inicial !== void 0 && novoProduto.unidade_medida_id) {
      const unidadeSelecionada = unidadesMedida.find((u2) => u2.id === novoProduto.unidade_medida_id);
      const isKG = (unidadeSelecionada == null ? void 0 : unidadeSelecionada.sigla) === "KG";
      if (!isKG && novoProduto.estoque_inicial % 1 !== 0) {
        setNovoProduto((prev) => ({
          ...prev,
          estoque_inicial: Math.floor(prev.estoque_inicial || 0)
        }));
      }
    }
  }, [novoProduto.unidade_medida_id, unidadesMedida]);
  reactExports.useEffect(() => {
    if (novoProduto.estoque_minimo !== void 0 && novoProduto.unidade_medida_id) {
      const unidadeSelecionada = unidadesMedida.find((u2) => u2.id === novoProduto.unidade_medida_id);
      const isKG = (unidadeSelecionada == null ? void 0 : unidadeSelecionada.sigla) === "KG";
      if (!isKG && novoProduto.estoque_minimo % 1 !== 0) {
        setNovoProduto((prev) => ({
          ...prev,
          estoque_minimo: Math.floor(prev.estoque_minimo || 0)
        }));
      }
    }
  }, [novoProduto.unidade_medida_id, unidadesMedida]);
  const loadOpcoesAdicionaisConfig = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: configData } = await supabase.from("produtos_config").select("opcoes_adicionais").eq("empresa_id", usuarioData.empresa_id).single();
      if (configData) {
        setOpcoesAdicionaisHabilitado(configData.opcoes_adicionais || false);
      }
    } catch (error) {
      console.error("Erro ao carregar configuração de opções adicionais:", error);
    }
  };
  const loadUnidadesMedida = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data, error } = await supabase.from("unidade_medida").select("*").eq("empresa_id", usuarioData.empresa_id).order("sigla", { ascending: true });
      if (error) throw error;
      setUnidadesMedida(data || []);
      setLoadingStates((prev) => ({ ...prev, unidades: false }));
    } catch (error) {
      console.error("Erro ao carregar unidades de medida:", error);
      showMessage("error", "Erro ao carregar unidades de medida");
      setLoadingStates((prev) => ({ ...prev, unidades: false }));
    }
  };
  const handleOpcaoToggle = (opcaoId) => {
    setSelectedOpcoes((prev) => {
      if (prev.includes(opcaoId)) {
        return prev.filter((id2) => id2 !== opcaoId);
      } else {
        return [...prev, opcaoId];
      }
    });
  };
  const toggleOpcaoExpansion = (opcaoId) => {
    setExpandedOpcoesForm((prev) => ({
      ...prev,
      [opcaoId]: !prev[opcaoId]
    }));
  };
  const handleSubmitUnidadeMedida = async (e) => {
    e.preventDefault();
    if (!novaUnidadeMedida.sigla || !novaUnidadeMedida.nome) {
      showMessage("error", "Preencha todos os campos obrigatórios");
      return;
    }
    try {
      setIsLoadingUnidadeMedida(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const { data, error } = await supabase.from("unidade_medida").insert({
        sigla: novaUnidadeMedida.sigla,
        nome: novaUnidadeMedida.nome,
        empresa_id: usuarioData.empresa_id
      }).select();
      if (error) throw error;
      if (data && data.length > 0) {
        setUnidadesMedida([...unidadesMedida, data[0]]);
        setNovoProduto({ ...novoProduto, unidade_medida_id: data[0].id });
        setNovaUnidadeMedida({ sigla: "", nome: "" });
        setShowUnidadeMedidaForm(false);
        showMessage("success", "Unidade de medida criada com sucesso");
      }
    } catch (error) {
      console.error("Erro ao salvar unidade de medida:", error);
      showMessage("error", "Erro ao salvar unidade de medida");
    } finally {
      setIsLoadingUnidadeMedida(false);
    }
  };
  const loadTipoControleEstoque = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data, error } = await supabase.from("tipo_controle_estoque_config").select("*").eq("empresa_id", usuarioData.empresa_id).single();
      if (error) {
        if (error.code === "PGRST116") {
          const { data: insertData, error: insertError } = await supabase.from("tipo_controle_estoque_config").insert({
            empresa_id: usuarioData.empresa_id,
            tipo_controle: "pedidos",
            bloqueia_sem_estoque: false
          }).select().single();
          if (insertError) {
            setTipoControleEstoque("pedidos");
            setLoadingStates((prev) => ({ ...prev, estoqueConfig: false }));
            return;
          }
          setTipoControleEstoque("pedidos");
          setLoadingStates((prev) => ({ ...prev, estoqueConfig: false }));
          return;
        } else {
          setTipoControleEstoque("pedidos");
          setLoadingStates((prev) => ({ ...prev, estoqueConfig: false }));
          return;
        }
      }
      if (data) {
        const novoTipoControle = data.tipo_controle;
        setTipoControleEstoque(novoTipoControle);
        if (novoTipoControle === "faturamento") {
          setTipoVisualizacaoEstoque("total");
        }
      } else {
        setTipoControleEstoque("pedidos");
      }
      setLoadingStates((prev) => ({ ...prev, estoqueConfig: false }));
    } catch (error) {
      setTipoControleEstoque("pedidos");
      setLoadingStates((prev) => ({ ...prev, estoqueConfig: false }));
    }
  };
  const loadProdutosEstoque = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: produtosData, error: produtosError } = await supabase.from("produtos").select("id").eq("empresa_id", usuarioData.empresa_id).eq("deletado", false);
      if (produtosError) throw produtosError;
      if (!produtosData || produtosData.length === 0) return;
      const estoqueInfo = {};
      for (const produto of produtosData) {
        const { data: movimentosData, error: movimentosError } = await supabase.from("produto_estoque").select("tipo_movimento, quantidade").eq("produto_id", produto.id).eq("empresa_id", usuarioData.empresa_id).order("data_hora_movimento", { ascending: true });
        if (movimentosError) {
          console.error(`Erro ao carregar movimentos do produto ${produto.id}:`, movimentosError);
          continue;
        }
        let estoqueCalculado = 0;
        if (movimentosData) {
          movimentosData.forEach((movimento) => {
            if (movimento.tipo_movimento === "entrada") {
              estoqueCalculado += parseFloat(movimento.quantidade);
            } else {
              estoqueCalculado -= parseFloat(movimento.quantidade);
            }
          });
        }
        const { data: pedidosData, error: pedidosError } = await supabase.from("pedidos_itens").select(`
            quantidade,
            pedido:pedido_id (
              status
            )
          `).eq("produto_id", produto.id).eq("empresa_id", usuarioData.empresa_id);
        if (pedidosError) {
          continue;
        }
        let quantidadeNaoFaturada = 0;
        if (pedidosData && pedidosData.length > 0) {
          pedidosData.forEach((item) => {
            if (item.pedido && item.pedido.status !== "faturado") {
              quantidadeNaoFaturada += parseFloat(item.quantidade);
            }
          });
        }
        estoqueInfo[produto.id] = {
          total: estoqueCalculado,
          // Agora usa o valor calculado das movimentações
          naoFaturado: quantidadeNaoFaturada
        };
      }
      setProdutosEstoque(estoqueInfo);
    } catch (error) {
      console.error("Erro ao carregar estoque dos produtos:", error);
    }
  };
  const loadAvailableOpcoes = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: opcoesData } = await supabase.from("opcoes_adicionais").select(`
          *,
          itens:opcoes_adicionais_itens(*)
        `).eq("empresa_id", usuarioData.empresa_id).order("nome");
      const opcoesComItens = (opcoesData || []).filter(
        (opcao) => opcao.itens && opcao.itens.length > 0
      );
      setAvailableOpcoes(opcoesComItens);
      setLoadingStates((prev) => ({ ...prev, opcoes: false }));
    } catch (error) {
      console.error("Error loading available options:", error);
      setLoadingStates((prev) => ({ ...prev, opcoes: false }));
    }
  };
  const loadGrupos = async () => {
    await withSessionCheck(async () => {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData, error: usuarioError } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (usuarioError) throw usuarioError;
      const { data: gruposData, error: gruposError } = await supabase.from("grupos").select("*").eq("empresa_id", usuarioData.empresa_id).eq("deletado", false);
      if (gruposError) throw gruposError;
      const { data: produtosData, error: produtosError } = await supabase.from("produtos").select(`
          *,
          unidade_medida:unidade_medida (
            id,
            sigla,
            nome
          )
        `).eq("deletado", false).eq("empresa_id", usuarioData.empresa_id);
      if (produtosError) throw produtosError;
      const { data: produtoOpcoesData, error: produtoOpcoesError } = await supabase.from("produtos_opcoes_adicionais").select(`
          produto_id,
          opcao:opcoes_adicionais (
            id,
            nome,
            itens:opcoes_adicionais_itens (*)
          )
        `).eq("deletado", false);
      if (produtoOpcoesError) throw produtoOpcoesError;
      const opcoesMap = {};
      produtoOpcoesData == null ? void 0 : produtoOpcoesData.forEach((po) => {
        if (!opcoesMap[po.produto_id]) {
          opcoesMap[po.produto_id] = [];
        }
        if (po.opcao) {
          opcoesMap[po.produto_id].push(po.opcao);
        }
      });
      setProdutoOpcoes(opcoesMap);
      const gruposWithProdutos = gruposData.map((grupo) => ({
        ...grupo,
        produtos: produtosData.filter((produto) => produto.grupo_id === grupo.id) || []
      }));
      setGrupos(gruposWithProdutos);
      setLoadingStates((prev) => ({ ...prev, grupos: false }));
    });
  };
  const getNextAvailableCode = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData, error: usuarioError } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (usuarioError) throw usuarioError;
      const { data: produtos } = await supabase.from("produtos").select("codigo").eq("deletado", false).eq("empresa_id", usuarioData.empresa_id).order("codigo");
      if (!produtos || produtos.length === 0) return "1";
      const codes = produtos.map((p2) => parseInt(p2.codigo)).filter((c2) => !isNaN(c2));
      if (codes.length === 0) return "1";
      let nextCode = 1;
      while (codes.includes(nextCode)) {
        nextCode++;
      }
      return nextCode.toString();
    } catch (error) {
      console.error("Error getting next code:", error);
      return "1";
    }
  };
  const formatarPreco2 = (valor) => {
    if (valor === null || valor === void 0) {
      return "0,00";
    }
    return valor.toLocaleString("pt-BR", {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });
  };
  const desformatarPreco = (valorFormatado) => {
    const semRS = valorFormatado.replace(/R\$\s?/g, "");
    const valorLimpo = semRS.replace(/[^\d,]/g, "").replace(",", ".");
    return parseFloat(valorLimpo) || 0;
  };
  const calcularValorFinal = (preco, tipoDesconto, valorDesconto) => {
    if (tipoDesconto === "percentual") {
      return preco - preco * (valorDesconto / 100);
    } else {
      return Math.max(0, preco - valorDesconto);
    }
  };
  const handleAddGrupo = () => {
    setIsGrupoForm(true);
    setSelectedGrupo(null);
    setNovoGrupoNome("");
    setShowSidebar(true);
  };
  const handleEditGrupo = (grupo) => {
    setIsGrupoForm(true);
    setSelectedGrupo(grupo);
    setNovoGrupoNome(grupo.nome);
    setShowSidebar(true);
  };
  const handleAddProduto = async (grupo) => {
    setIsGrupoForm(false);
    setSelectedGrupo(grupo);
    setEditingProduto(null);
    setSelectedOpcoes([]);
    const nextCode = await getNextAvailableCode();
    const unidadeMedidaId = void 0;
    setNovoProduto({
      nome: "",
      preco: 0,
      descricao: "",
      codigo: nextCode,
      codigo_barras: "",
      promocao: false,
      tipo_desconto: "percentual",
      valor_desconto: 0,
      ativo: true,
      unidade_medida_id: unidadeMedidaId,
      desconto_quantidade: false,
      quantidade_minima: 5,
      tipo_desconto_quantidade: "percentual",
      percentual_desconto_quantidade: 10,
      valor_desconto_quantidade: 0,
      estoque_inicial: 0,
      estoque_minimo: 0,
      estoque_minimo_ativo: false,
      // Campos fiscais NFe com valores padrão
      ncm: "",
      cfop: "5102",
      origem_produto: 0,
      situacao_tributaria: "tributado_integral",
      cst_icms: "",
      csosn_icms: "",
      cst_pis: "01",
      cst_cofins: "01",
      aliquota_icms: 0,
      aliquota_pis: 1.65,
      aliquota_cofins: 7.6,
      cest: "",
      peso_liquido: 0
    });
    setPrecoFormatado(formatarPreco2(0));
    setDescontoFormatado("0");
    setDescontoQuantidadeFormatado("10");
    setEstoqueInputVazio(false);
    setFormularioResetado(false);
    setNcmValidacao({
      validando: false,
      valido: null,
      descricao: "",
      erro: ""
    });
    setShowSidebar(true);
  };
  const loadEstoqueMovimentos = async (produtoId) => {
    if (!produtoId) return;
    setIsLoadingEstoque(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData, error: usuarioError } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (usuarioError) throw usuarioError;
      const { data: produtoData, error: produtoError } = await supabase.from("produtos").select("estoque_atual").eq("id", produtoId).eq("empresa_id", usuarioData.empresa_id).single();
      if (produtoError) throw produtoError;
      const { data: movimentosData, error: movimentosError } = await supabase.from("produto_estoque").select(`
          id,
          tipo_movimento,
          quantidade,
          data_hora_movimento,
          observacao,
          usuario:usuario_id (nome)
        `).eq("produto_id", produtoId).eq("empresa_id", usuarioData.empresa_id).order("data_hora_movimento", { ascending: false });
      if (movimentosError) throw movimentosError;
      const estoqueAtualDB = parseFloat(produtoData.estoque_atual || "0");
      const movimentosOrdenados = [...movimentosData].reverse();
      let saldoAcumulado = 0;
      const movimentosComSaldoCorreto = movimentosOrdenados.map((movimento) => {
        if (movimento.tipo_movimento === "entrada") {
          saldoAcumulado += parseFloat(movimento.quantidade);
        } else {
          saldoAcumulado -= parseFloat(movimento.quantidade);
        }
        return {
          ...movimento,
          saldo: saldoAcumulado
        };
      });
      const movimentosComSaldo = movimentosComSaldoCorreto.reverse();
      const { data: pedidosData, error: pedidosError } = await supabase.from("pedidos_itens").select(`
          quantidade,
          pedido:pedido_id (
            status
          )
        `).eq("produto_id", produtoId).eq("empresa_id", usuarioData.empresa_id);
      if (pedidosError) throw pedidosError;
      let quantidadeNaoFaturada = 0;
      if (pedidosData && pedidosData.length > 0) {
        pedidosData.forEach((item) => {
          if (item.pedido && item.pedido.status !== "faturado") {
            quantidadeNaoFaturada += parseFloat(item.quantidade);
          }
        });
      }
      setEstoqueMovimentos(movimentosComSaldo);
      setEstoqueAtual(estoqueAtualDB);
      setEstoqueNaoFaturado(quantidadeNaoFaturada);
    } catch (error) {
      showMessage("error", "Erro ao carregar movimentos de estoque: " + error.message);
    } finally {
      setIsLoadingEstoque(false);
    }
  };
  const handleEditProduto = async (grupo, produto) => {
    setIsGrupoForm(false);
    setSelectedGrupo(grupo);
    setEditingProduto(produto);
    const produtoState = {
      nome: produto.nome,
      preco: produto.preco,
      descricao: produto.descricao,
      codigo: produto.codigo,
      codigo_barras: produto.codigo_barras || "",
      promocao: produto.promocao || false,
      tipo_desconto: produto.tipo_desconto || "percentual",
      valor_desconto: produto.valor_desconto || 0,
      ativo: produto.ativo !== false,
      // Se não estiver definido, assume true
      unidade_medida_id: produto.unidade_medida_id,
      desconto_quantidade: produto.desconto_quantidade || false,
      quantidade_minima: produto.quantidade_minima || 5,
      tipo_desconto_quantidade: produto.tipo_desconto_quantidade || "percentual",
      percentual_desconto_quantidade: produto.percentual_desconto_quantidade || 10,
      valor_desconto_quantidade: produto.valor_desconto_quantidade || 0,
      estoque_inicial: produto.estoque_inicial || 0,
      estoque_minimo: produto.estoque_minimo || 0,
      estoque_minimo_ativo: produto.estoque_minimo_ativo || false,
      // Campos fiscais NFe
      ncm: produto.ncm || "",
      cfop: produto.cfop || "5102",
      origem_produto: produto.origem_produto || 0,
      situacao_tributaria: produto.situacao_tributaria || "tributado_integral",
      cst_icms: produto.cst_icms || "",
      csosn_icms: produto.csosn_icms || "",
      cst_pis: produto.cst_pis || "01",
      cst_cofins: produto.cst_cofins || "01",
      aliquota_icms: produto.aliquota_icms || 0,
      aliquota_pis: produto.aliquota_pis || 1.65,
      aliquota_cofins: produto.aliquota_cofins || 7.6,
      cest: produto.cest || "",
      peso_liquido: produto.peso_liquido || 0
    };
    setNovoProduto(produtoState);
    setPrecoFormatado(formatarPreco2(produto.preco));
    if (produto.valor_desconto !== void 0) {
      if (produto.tipo_desconto === "percentual") {
        setDescontoFormatado(produto.valor_desconto.toString());
      } else {
        setDescontoFormatado(formatarPreco2(produto.valor_desconto));
      }
    }
    if (produto.tipo_desconto_quantidade === "percentual" && produto.percentual_desconto_quantidade !== void 0) {
      setDescontoQuantidadeFormatado(produto.percentual_desconto_quantidade.toString());
    } else if (produto.tipo_desconto_quantidade === "valor" && produto.valor_desconto_quantidade !== void 0) {
      setDescontoQuantidadeFormatado(formatarPreco2(produto.valor_desconto_quantidade));
    }
    if (produto.ncm && produto.ncm.length === 8) {
      validarNCM(produto.ncm);
    } else {
      setNcmValidacao({
        validando: false,
        valido: null,
        descricao: "",
        erro: ""
      });
    }
    setShowSidebar(true);
    try {
      const { data: opcoesData } = await supabase.from("produtos_opcoes_adicionais").select("opcao_id").eq("produto_id", produto.id);
      setSelectedOpcoes((opcoesData || []).map((o) => o.opcao_id));
      await loadProdutoFotos(produto.id);
      await loadEstoqueMovimentos(produto.id);
    } catch (error) {
      console.error("Error loading product options:", error);
    }
  };
  const loadProdutoFotos = async (produtoId) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData, error: usuarioError } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (usuarioError) throw usuarioError;
      const { data: fotosData, error } = await supabase.from("produto_fotos").select("*").eq("produto_id", produtoId).eq("empresa_id", usuarioData.empresa_id).order("principal", { ascending: false });
      if (error) throw error;
      setProdutoFotos(fotosData || []);
    } catch (error) {
      console.error("Erro ao carregar fotos do produto:", error);
      showMessage("error", "Erro ao carregar fotos do produto");
    }
  };
  const handleFileUpload = async (event) => {
    const files = event.target.files;
    if (!files || files.length === 0 || !editingProduto) return;
    if (produtoFotos.length >= 3) {
      showMessage("error", "Limite máximo de 3 fotos por produto");
      return;
    }
    setIsUploadingFoto(true);
    try {
      const file = files[0];
      const fileExt = file.name.split(".").pop();
      const fileName = `${Date.now()}.${fileExt}`;
      const filePath = `produtos/${editingProduto.id}/${fileName}`;
      const { error: uploadError } = await supabase.storage.from("fotos").upload(filePath, file);
      if (uploadError) throw uploadError;
      const { data: urlData } = supabase.storage.from("fotos").getPublicUrl(filePath);
      if (!urlData) throw new Error("Erro ao obter URL da imagem");
      const isPrincipal = produtoFotos.length === 0;
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData, error: usuarioError } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (usuarioError) throw usuarioError;
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const fotoObj = {
        produto_id: editingProduto.id,
        url: urlData.publicUrl,
        storage_path: filePath,
        principal: isPrincipal,
        empresa_id: usuarioData.empresa_id
      };
      const { data: fotoData, error: fotoError } = await supabase.from("produto_fotos").insert(fotoObj).select().single();
      if (fotoError) throw fotoError;
      setProdutoFotos((prev) => [...prev, fotoData]);
      if ((isPrincipal || produtoFotos.length === 0) && editingProduto) {
        setProdutosFotosPrincipais((prev) => ({
          ...prev,
          [editingProduto.id]: fotoData
        }));
        setProdutosFotosCount((prev) => ({
          ...prev,
          [editingProduto.id]: (prev[editingProduto.id] || 0) + 1
        }));
        const grupoAtual = grupos.find((g2) => g2.id === editingProduto.grupo_id);
        if (grupoAtual) {
          const gruposAtualizados = grupos.map((g2) => {
            if (g2.id === grupoAtual.id) {
              const produtosAtualizados = g2.produtos.map((p2) => {
                if (p2.id === editingProduto.id) {
                  return { ...p2 };
                }
                return p2;
              });
              return { ...g2, produtos: produtosAtualizados };
            }
            return g2;
          });
          setGrupos([...gruposAtualizados]);
        }
      } else if (editingProduto) {
        setProdutosFotosCount((prev) => ({
          ...prev,
          [editingProduto.id]: (prev[editingProduto.id] || 0) + 1
        }));
      }
      localStorage.setItem("produto_atualizado", JSON.stringify({
        timestamp: (/* @__PURE__ */ new Date()).getTime(),
        produto_id: editingProduto.id,
        acao: "foto_adicionada"
      }));
      showMessage("success", "Foto adicionada com sucesso");
    } catch (error) {
      console.error("Erro ao fazer upload da foto:", error);
      showMessage("error", `Erro ao fazer upload da foto: ${error.message}`);
    } finally {
      setIsUploadingFoto(false);
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
    }
  };
  const handleSetFotoPrincipal = async (fotoId) => {
    if (!editingProduto) return;
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData, error: usuarioError } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (usuarioError) throw usuarioError;
      await supabase.from("produto_fotos").update({ principal: false }).eq("produto_id", editingProduto.id).eq("empresa_id", usuarioData.empresa_id);
      const { error } = await supabase.from("produto_fotos").update({ principal: true }).eq("id", fotoId).eq("empresa_id", usuarioData.empresa_id);
      if (error) throw error;
      await loadProdutoFotos(editingProduto.id);
      const fotoPrincipalAtualizada = await getProdutoFotoPrincipal(editingProduto.id);
      if (fotoPrincipalAtualizada) {
        setProdutosFotosPrincipais((prev) => ({
          ...prev,
          [editingProduto.id]: fotoPrincipalAtualizada
        }));
        const grupoAtual = grupos.find((g2) => g2.id === editingProduto.grupo_id);
        if (grupoAtual) {
          const gruposAtualizados = grupos.map((g2) => {
            if (g2.id === grupoAtual.id) {
              const produtosAtualizados = g2.produtos.map((p2) => {
                if (p2.id === editingProduto.id) {
                  return { ...p2 };
                }
                return p2;
              });
              return { ...g2, produtos: produtosAtualizados };
            }
            return g2;
          });
          setGrupos([...gruposAtualizados]);
        }
      }
      localStorage.setItem("produto_atualizado", JSON.stringify({
        timestamp: (/* @__PURE__ */ new Date()).getTime(),
        produto_id: editingProduto.id,
        acao: "foto_principal_alterada"
      }));
      showMessage("success", "Foto principal definida com sucesso");
    } catch (error) {
      console.error("Erro ao definir foto principal:", error);
      showMessage("error", `Erro ao definir foto principal: ${error.message}`);
    }
  };
  const handleConfirmDeleteFoto = (foto) => {
    setDeleteConfirmation({
      isOpen: true,
      type: "foto",
      id: foto.id,
      fotoPath: foto.storage_path,
      title: "Excluir Foto",
      message: "Tem certeza que deseja excluir esta foto? Esta ação não poderá ser desfeita."
    });
  };
  const handleOpenGaleria = (index2) => {
    setCurrentFotoIndex(index2);
    setIsGaleriaOpen(true);
  };
  const handleRegistrarMovimentoEstoque = async (e) => {
    e.preventDefault();
    if (!editingProduto) return;
    if (novoMovimento.quantidade <= 0) {
      showMessage("error", "A quantidade deve ser maior que zero");
      return;
    }
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData, error: usuarioError } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (usuarioError) throw usuarioError;
      if (novoMovimento.tipo === "saida" && novoMovimento.quantidade > estoqueAtual) {
        showMessage("error", "Estoque insuficiente para esta saída");
        return;
      }
      const novoEstoque = novoMovimento.tipo === "entrada" ? estoqueAtual + parseFloat(novoMovimento.quantidade.toString()) : estoqueAtual - parseFloat(novoMovimento.quantidade.toString());
      const { error: movimentoError } = await supabase.from("produto_estoque").insert([{
        empresa_id: usuarioData.empresa_id,
        usuario_id: userData.user.id,
        produto_id: editingProduto.id,
        tipo_movimento: novoMovimento.tipo,
        quantidade: novoMovimento.quantidade,
        data_hora_movimento: (/* @__PURE__ */ new Date()).toISOString(),
        observacao: novoMovimento.observacao || (novoMovimento.tipo === "entrada" ? "Entrada de estoque" : "Saída de estoque")
      }]);
      if (movimentoError) throw movimentoError;
      const { error: updateError } = await supabase.from("produtos").update({ estoque_atual: novoEstoque }).eq("id", editingProduto.id).eq("empresa_id", usuarioData.empresa_id);
      if (updateError) throw updateError;
      setEstoqueAtual(novoEstoque);
      await loadEstoqueMovimentos(editingProduto.id);
      await loadProdutosEstoque();
      setNovoMovimento({
        tipo: "entrada",
        quantidade: 0,
        observacao: ""
      });
      setQuantidadeMovimentoVazia(false);
      showMessage("success", `${novoMovimento.tipo === "entrada" ? "Entrada" : "Saída"} de estoque registrada com sucesso!`);
    } catch (error) {
      console.error("Erro ao registrar movimento de estoque:", error);
      showMessage("error", "Erro ao registrar movimento de estoque: " + error.message);
    }
  };
  const handleDeleteFoto = async () => {
    if (!deleteConfirmation.id || !deleteConfirmation.fotoPath) return;
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData, error: usuarioError } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (usuarioError) throw usuarioError;
      const { error: dbError } = await supabase.from("produto_fotos").delete().eq("id", deleteConfirmation.id).eq("empresa_id", usuarioData.empresa_id);
      if (dbError) throw dbError;
      const { error: storageError } = await supabase.storage.from("fotos").remove([deleteConfirmation.fotoPath]);
      if (storageError) throw storageError;
      if (editingProduto) {
        const fotoDeletada = produtoFotos.find((f2) => f2.id === deleteConfirmation.id);
        const eraPrincipal = (fotoDeletada == null ? void 0 : fotoDeletada.principal) || false;
        await loadProdutoFotos(editingProduto.id);
        setProdutosFotosCount((prev) => ({
          ...prev,
          [editingProduto.id]: Math.max(0, (prev[editingProduto.id] || 1) - 1)
        }));
        if (eraPrincipal) {
          await loadProdutoFotos(editingProduto.id);
          const fotosRestantes = produtoFotos.filter((f2) => f2.id !== deleteConfirmation.id);
          if (fotosRestantes.length > 0) {
            const novaFotoPrincipal = fotosRestantes[0];
            await handleSetFotoPrincipal(novaFotoPrincipal.id);
          } else {
            setProdutosFotosPrincipais((prev) => ({
              ...prev,
              [editingProduto.id]: null
            }));
          }
        }
        const grupoAtual = grupos.find((g2) => g2.id === editingProduto.grupo_id);
        if (grupoAtual) {
          const gruposAtualizados = grupos.map((g2) => {
            if (g2.id === grupoAtual.id) {
              const produtosAtualizados = g2.produtos.map((p2) => {
                if (p2.id === editingProduto.id) {
                  return { ...p2 };
                }
                return p2;
              });
              return { ...g2, produtos: produtosAtualizados };
            }
            return g2;
          });
          setGrupos([...gruposAtualizados]);
        }
      }
      localStorage.setItem("produto_atualizado", JSON.stringify({
        timestamp: (/* @__PURE__ */ new Date()).getTime(),
        produto_id: editingProduto.id,
        acao: "foto_excluida"
      }));
      showMessage("success", "Foto excluída com sucesso");
    } catch (error) {
      console.error("Erro ao excluir foto:", error);
      showMessage("error", `Erro ao excluir foto: ${error.message}`);
    } finally {
      setDeleteConfirmation((prev) => ({ ...prev, isOpen: false }));
    }
  };
  const handleSubmitGrupo = async (e) => {
    e.preventDefault();
    if (!novoGrupoNome.trim()) return;
    setIsLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData, error: usuarioError } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (usuarioError) throw usuarioError;
      if (selectedGrupo) {
        const { data, error } = await supabase.from("grupos").update({ nome: novoGrupoNome }).eq("id", selectedGrupo.id).select().single();
        if (error) throw error;
        setGrupos(grupos.map(
          (grupo) => grupo.id === selectedGrupo.id ? { ...data, produtos: grupo.produtos } : grupo
        ));
        showMessage("success", "Grupo atualizado com sucesso!");
      } else {
        const { data, error } = await supabase.from("grupos").insert([{
          nome: novoGrupoNome,
          empresa_id: usuarioData.empresa_id
        }]).select().single();
        if (error) throw error;
        setGrupos([...grupos, { ...data, produtos: [] }]);
        showMessage("success", "Grupo criado com sucesso!");
      }
      setShowSidebar(false);
    } catch (error) {
      showMessage("error", `Erro ao ${selectedGrupo ? "atualizar" : "criar"} grupo: ` + error.message);
    } finally {
      setIsLoading(false);
    }
  };
  const handleSubmitProduto = async (e) => {
    e.preventDefault();
    if (!selectedGrupo || !novoProduto.nome || !novoProduto.preco || !novoProduto.codigo || !novoProduto.unidade_medida_id) {
      showMessage("error", "Preencha todos os campos obrigatórios");
      return;
    }
    const nomeValidation = validarNomeProduto(novoProduto.nome || "");
    if (!nomeValidation.isValid) {
      setNfeValidationModal({
        isOpen: true,
        campo: "Nome do Produto",
        valor: novoProduto.nome || "",
        validationResult: nomeValidation
      });
      return;
    }
    if (novoProduto.descricao && novoProduto.descricao.trim() !== "") {
      const descricaoValidation = validarDescricaoProduto(novoProduto.descricao);
      if (!descricaoValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Descrição do Produto",
          valor: novoProduto.descricao,
          validationResult: descricaoValidation
        });
        return;
      }
    }
    if (novoProduto.promocao) {
      if (!novoProduto.valor_desconto || novoProduto.valor_desconto <= 0) {
        showMessage("error", "Para produtos em promoção, é necessário informar um valor de desconto maior que zero");
        return;
      }
    }
    if (novoProduto.desconto_quantidade) {
      if (novoProduto.tipo_desconto_quantidade === "percentual" && (!novoProduto.percentual_desconto_quantidade || novoProduto.percentual_desconto_quantidade <= 0) || novoProduto.tipo_desconto_quantidade === "valor" && (!novoProduto.valor_desconto_quantidade || novoProduto.valor_desconto_quantidade <= 0)) {
        showMessage("error", "Para produtos com desconto por quantidade, é necessário informar um valor de desconto maior que zero");
        return;
      }
      if (!novoProduto.quantidade_minima || novoProduto.quantidade_minima <= 0) {
        showMessage("error", "Para produtos com desconto por quantidade, é necessário informar uma quantidade mínima maior que zero");
        return;
      }
    }
    if (novoProduto.estoque_minimo_ativo) {
      if (!novoProduto.estoque_minimo || novoProduto.estoque_minimo <= 0) {
        showMessage("error", "Para produtos com controle de estoque mínimo ativo, é necessário informar uma quantidade mínima maior que zero");
        return;
      }
    }
    setIsLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      let query = supabase.from("produtos").select("id, nome, codigo, codigo_barras").eq("empresa_id", usuarioData.empresa_id).eq("deletado", false);
      if (editingProduto) {
        query = query.neq("id", editingProduto.id);
      }
      const { data: produtosExistentes, error: queryError } = await query;
      if (queryError) throw queryError;
      const duplicatas = [];
      const nomeDuplicado = produtosExistentes == null ? void 0 : produtosExistentes.find(
        (p2) => {
          var _a2;
          return p2.nome.toLowerCase().trim() === ((_a2 = novoProduto.nome) == null ? void 0 : _a2.toLowerCase().trim());
        }
      );
      if (nomeDuplicado) {
        duplicatas.push("Nome do produto");
      }
      const codigoDuplicado = produtosExistentes == null ? void 0 : produtosExistentes.find(
        (p2) => p2.codigo === novoProduto.codigo
      );
      if (codigoDuplicado) {
        duplicatas.push("Código do produto");
      }
      if (novoProduto.codigo_barras && novoProduto.codigo_barras.trim() !== "") {
        const codigoBarrasDuplicado = produtosExistentes == null ? void 0 : produtosExistentes.find(
          (p2) => p2.codigo_barras && p2.codigo_barras === novoProduto.codigo_barras
        );
        if (codigoBarrasDuplicado) {
          duplicatas.push("Código de barras");
        }
      }
      if (duplicatas.length > 0) {
        const mensagem = duplicatas.length === 1 ? `${duplicatas[0]} já existe em outro produto. Por favor, corrija antes de continuar.` : `Os seguintes campos já existem em outros produtos: ${duplicatas.join(", ")}. Por favor, corrija antes de continuar.`;
        showMessage("error", mensagem);
        setIsLoading(false);
        return;
      }
      let productId;
      if (editingProduto) {
        const updateData = {
          nome: novoProduto.nome,
          preco: novoProduto.preco,
          descricao: novoProduto.descricao,
          codigo: novoProduto.codigo,
          codigo_barras: novoProduto.codigo_barras,
          promocao: novoProduto.promocao,
          tipo_desconto: novoProduto.promocao ? novoProduto.tipo_desconto : null,
          valor_desconto: novoProduto.promocao ? novoProduto.valor_desconto : null,
          ativo: novoProduto.ativo,
          unidade_medida_id: novoProduto.unidade_medida_id,
          desconto_quantidade: novoProduto.desconto_quantidade,
          quantidade_minima: novoProduto.desconto_quantidade ? novoProduto.quantidade_minima : null,
          tipo_desconto_quantidade: novoProduto.desconto_quantidade ? novoProduto.tipo_desconto_quantidade : null,
          valor_desconto_quantidade: novoProduto.desconto_quantidade && novoProduto.tipo_desconto_quantidade === "valor" ? novoProduto.valor_desconto_quantidade : null,
          percentual_desconto_quantidade: novoProduto.desconto_quantidade && novoProduto.tipo_desconto_quantidade === "percentual" ? novoProduto.percentual_desconto_quantidade : null,
          // Incluir os campos de estoque mínimo
          estoque_minimo: novoProduto.estoque_minimo_ativo ? novoProduto.estoque_minimo || 0 : 0,
          estoque_minimo_ativo: novoProduto.estoque_minimo_ativo || false,
          // CAMPOS FISCAIS NFe - ERAM ESTES QUE ESTAVAM FALTANDO!
          ncm: novoProduto.ncm,
          cfop: novoProduto.cfop,
          origem_produto: novoProduto.origem_produto,
          situacao_tributaria: novoProduto.situacao_tributaria,
          cst_icms: novoProduto.cst_icms,
          csosn_icms: novoProduto.csosn_icms,
          aliquota_icms: novoProduto.aliquota_icms,
          cst_pis: novoProduto.cst_pis,
          aliquota_pis: novoProduto.aliquota_pis,
          cst_cofins: novoProduto.cst_cofins,
          aliquota_cofins: novoProduto.aliquota_cofins,
          empresa_id: usuarioData.empresa_id
        };
        console.log("=== SALVANDO DADOS FISCAIS (EDIÇÃO) ===");
        console.log("NCM:", updateData.ncm);
        console.log("CFOP:", updateData.cfop);
        console.log("Origem:", updateData.origem_produto);
        console.log("CST ICMS:", updateData.cst_icms);
        console.log("CSOSN ICMS:", updateData.csosn_icms);
        console.log("Alíquota ICMS:", updateData.aliquota_icms);
        const { data, error } = await supabase.from("produtos").update(updateData).eq("id", editingProduto.id).select().single();
        if (error) throw error;
        productId = data.id;
        await supabase.from("produtos_opcoes_adicionais").delete().eq("produto_id", productId);
      } else {
        const produtoData = {
          ...novoProduto,
          grupo_id: selectedGrupo.id,
          empresa_id: usuarioData.empresa_id,
          // Garantir que os campos de desconto por quantidade sejam null quando não habilitados
          quantidade_minima: novoProduto.desconto_quantidade ? novoProduto.quantidade_minima : null,
          tipo_desconto_quantidade: novoProduto.desconto_quantidade ? novoProduto.tipo_desconto_quantidade : null,
          valor_desconto_quantidade: novoProduto.desconto_quantidade && novoProduto.tipo_desconto_quantidade === "valor" ? novoProduto.valor_desconto_quantidade : null,
          percentual_desconto_quantidade: novoProduto.desconto_quantidade && novoProduto.tipo_desconto_quantidade === "percentual" ? novoProduto.percentual_desconto_quantidade : null,
          // Garantir que os campos de promoção sejam null quando não habilitados
          tipo_desconto: novoProduto.promocao ? novoProduto.tipo_desconto : null,
          valor_desconto: novoProduto.promocao ? novoProduto.valor_desconto : null,
          // Incluir o estoque inicial e definir o estoque atual como 0 (será atualizado pela movimentação)
          estoque_inicial: novoProduto.estoque_inicial || 0,
          estoque_atual: 0,
          // Incluir os campos de estoque mínimo
          estoque_minimo: novoProduto.estoque_minimo_ativo ? novoProduto.estoque_minimo || 0 : 0,
          estoque_minimo_ativo: novoProduto.estoque_minimo_ativo || false
        };
        console.log("=== SALVANDO DADOS FISCAIS (CRIAÇÃO) ===");
        console.log("NCM:", produtoData.ncm);
        console.log("CFOP:", produtoData.cfop);
        console.log("Origem:", produtoData.origem_produto);
        console.log("CST ICMS:", produtoData.cst_icms);
        console.log("CSOSN ICMS:", produtoData.csosn_icms);
        console.log("Alíquota ICMS:", produtoData.aliquota_icms);
        const { data, error } = await supabase.from("produtos").insert([produtoData]).select().single();
        if (error) throw error;
        productId = data.id;
        if (novoProduto.estoque_inicial && novoProduto.estoque_inicial > 0) {
          const { error: estoqueError } = await supabase.from("produto_estoque").insert([{
            empresa_id: usuarioData.empresa_id,
            usuario_id: userData.user.id,
            produto_id: productId,
            tipo_movimento: "entrada",
            quantidade: novoProduto.estoque_inicial,
            data_hora_movimento: (/* @__PURE__ */ new Date()).toISOString(),
            observacao: "Estoque inicial"
          }]);
          if (estoqueError) {
            console.error("Erro ao registrar estoque inicial:", estoqueError);
          } else {
            const { error: updateEstoqueError } = await supabase.from("produtos").update({ estoque_atual: novoProduto.estoque_inicial }).eq("id", productId).eq("empresa_id", usuarioData.empresa_id);
            if (updateEstoqueError) {
              console.error("Erro ao atualizar estoque atual:", updateEstoqueError);
            }
          }
        }
      }
      if (selectedOpcoes.length > 0) {
        const opcoesInsert = selectedOpcoes.map((opcaoId) => ({
          produto_id: productId,
          opcao_id: opcaoId,
          empresa_id: usuarioData.empresa_id
        }));
        const { error: opcoesError } = await supabase.from("produtos_opcoes_adicionais").insert(opcoesInsert);
        if (opcoesError) throw opcoesError;
      }
      await loadGrupos();
      await loadProdutosEstoque();
      if (!editingProduto && novoProduto.estoque_inicial && novoProduto.estoque_inicial > 0) {
        setProdutosEstoque((prev) => ({
          ...prev,
          [productId]: {
            total: novoProduto.estoque_inicial,
            naoFaturado: 0
          }
        }));
      }
      localStorage.setItem("produto_atualizado", JSON.stringify({
        timestamp: (/* @__PURE__ */ new Date()).getTime(),
        produto_id: productId,
        acao: editingProduto ? "atualizado" : "criado"
      }));
      console.log(`Produto ${editingProduto ? "atualizado" : "criado"} com sucesso! Sinalizador definido para versão mobile.`);
      if (editingProduto) {
        showMessage("success", "Produto atualizado com sucesso!");
        setShowSidebar(false);
      } else {
        showMessage("success", "Produto adicionado com sucesso! Agora você pode adicionar fotos.");
        const novoProdutoCriado = {
          ...novoProduto,
          id: productId,
          grupo_id: selectedGrupo.id,
          empresa_id: usuarioData.empresa_id,
          created_at: (/* @__PURE__ */ new Date()).toISOString()
        };
        setEditingProduto(novoProdutoCriado);
        await loadEstoqueMovimentos(productId);
        setActiveTab("fotos");
      }
    } catch (error) {
      console.error("=== ERRO NO SUBMIT ===");
      console.error("Erro completo:", error);
      console.error("Mensagem do erro:", error.message);
      console.error("Stack trace:", error.stack);
      showMessage("error", `Erro ao ${editingProduto ? "atualizar" : "criar"} produto: ` + error.message);
    } finally {
      console.log("=== FINALIZANDO SUBMIT ===");
      setIsLoading(false);
    }
  };
  const handleDeleteGrupo = async (grupoId) => {
    const grupo = grupos.find((g2) => g2.id === grupoId);
    if (!grupo) return;
    if (grupo.produtos.length > 0) {
      setWarningMessage("Não é possível excluir este grupo pois ele contém produtos. Remova todos os produtos primeiro.");
      setShowWarning(true);
      return;
    }
    setDeleteConfirmation({
      isOpen: true,
      type: "grupo",
      id: grupoId,
      title: "Excluir Grupo",
      message: "Tem certeza que deseja excluir este grupo? Você poderá restaurá-lo posteriormente se necessário."
    });
  };
  const handleDeleteProduto = async (produtoId, grupoId) => {
    const { data: addons } = await supabase.from("produtos_opcoes_adicionais").select("id").eq("produto_id", produtoId);
    if (addons && addons.length > 0) {
      setWarningMessage("Este produto possui opções adicionais vinculadas. Remova todas as opções adicionais primeiro.");
      setShowWarning(true);
      return;
    }
    setDeleteConfirmation({
      isOpen: true,
      type: "produto",
      id: produtoId,
      grupoId,
      title: "Excluir Produto",
      message: "Tem certeza que deseja excluir este produto? Você poderá restaurá-lo posteriormente se necessário."
    });
  };
  const handleConfirmDelete = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const now2 = (/* @__PURE__ */ new Date()).toISOString();
      if (deleteConfirmation.type === "grupo") {
        const { error } = await supabase.from("grupos").update({
          deletado: true,
          deletado_em: now2,
          deletado_por: userData.user.id
        }).eq("id", deleteConfirmation.id);
        if (error) throw error;
        setGrupos(grupos.filter((g2) => g2.id !== deleteConfirmation.id));
        showMessage("success", "Grupo excluído com sucesso!");
      } else if (deleteConfirmation.type === "produto") {
        const { error } = await supabase.from("produtos").update({
          deletado: true,
          deletado_em: now2,
          deletado_por: userData.user.id
        }).eq("id", deleteConfirmation.id);
        if (error) throw error;
        setGrupos(grupos.map(
          (grupo) => grupo.id === deleteConfirmation.grupoId ? { ...grupo, produtos: grupo.produtos.filter((p2) => p2.id !== deleteConfirmation.id) } : grupo
        ));
        localStorage.setItem("produto_atualizado", JSON.stringify({
          timestamp: (/* @__PURE__ */ new Date()).getTime(),
          produto_id: deleteConfirmation.id,
          acao: "excluido"
        }));
        console.log(`Produto excluído com sucesso! Sinalizador definido para versão mobile.`);
        showMessage("success", "Produto excluído com sucesso!");
      } else if (deleteConfirmation.type === "foto") {
        await handleDeleteFoto();
      }
    } catch (error) {
      showMessage("error", `Erro ao excluir ${deleteConfirmation.type}: ` + error.message);
    } finally {
      setDeleteConfirmation((prev) => ({ ...prev, isOpen: false }));
    }
  };
  const handleRemoveAdicional = async (produtoId, opcaoId) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const now2 = (/* @__PURE__ */ new Date()).toISOString();
      const { error } = await supabase.from("produtos_opcoes_adicionais").update({
        deletado: true,
        deletado_em: now2,
        deletado_por: userData.user.id
      }).eq("produto_id", produtoId).eq("opcao_id", opcaoId);
      if (error) throw error;
      setProdutoOpcoes((prev) => ({
        ...prev,
        [produtoId]: prev[produtoId].filter((opcao) => opcao.id !== opcaoId)
      }));
      showMessage("success", "Adicional removido com sucesso!");
    } catch (error) {
      showMessage("error", "Erro ao remover adicional: " + error.message);
    }
  };
  const toggleOpcao = (produtoId, opcaoId) => {
    const key = `${produtoId}-${opcaoId}`;
    setExpandedOpcoes((prev) => ({
      ...prev,
      [key]: !prev[key]
    }));
  };
  const toggleSortOrder = () => {
    setSortOrder((prev) => prev === "asc" ? "desc" : "asc");
  };
  const handleProductSearch = (grupoId, searchTerm2) => {
    setProductSearchTerms((prev) => ({
      ...prev,
      [grupoId]: searchTerm2
    }));
  };
  const toggleProductSortOrder = (grupoId) => {
    setProductSortOrders((prev) => ({
      ...prev,
      [grupoId]: (prev[grupoId] || "asc") === "asc" ? "desc" : "asc"
    }));
  };
  const resetFormularioProduto = () => {
    setPrecoFormatado(formatarPreco2(0));
    setDescontoFormatado("0");
    setDescontoQuantidadeFormatado("10");
    setEstoqueInputVazio(false);
    setQuantidadeMinimaVazia(false);
    setEstoqueMinimoVazio(false);
    setEditingProduto(null);
    setSelectedOpcoes([]);
    setActiveTab("dados");
    setProdutoFotos([]);
    setNcmValidacao({
      validando: false,
      valido: null,
      descricao: "",
      erro: ""
    });
    setFormularioResetado(true);
  };
  const filteredAndSortedGrupos = grupos.filter(
    (grupo) => grupo.nome.toLowerCase().includes(searchTerm.toLowerCase())
  ).sort((a, b2) => {
    const comparison = a.nome.localeCompare(b2.nome);
    return sortOrder === "asc" ? comparison : -comparison;
  });
  const getFilteredAndSortedProducts = (grupo) => {
    const searchTerm2 = productSearchTerms[grupo.id] || "";
    const sortOrder2 = productSortOrders[grupo.id] || "asc";
    return grupo.produtos.filter(
      (produto) => produto.nome.toLowerCase().includes(searchTerm2.toLowerCase()) || produto.codigo.toLowerCase().includes(searchTerm2.toLowerCase()) || produto.codigo_barras && produto.codigo_barras.toLowerCase().includes(searchTerm2.toLowerCase())
    ).sort((a, b2) => {
      const comparison = a.nome.localeCompare(b2.nome);
      return sortOrder2 === "asc" ? comparison : -comparison;
    });
  };
  const renderProdutoOpcoes = (produto) => {
    var _a2;
    if (!((_a2 = produtoOpcoes[produto.id]) == null ? void 0 : _a2.length)) return null;
    return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-2 pt-2 border-t border-gray-700/50", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs font-medium text-gray-400 mb-1.5", children: "Adicionais:" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-1.5", children: produtoOpcoes[produto.id].map((opcao) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          className: "bg-gray-700/30 rounded overflow-hidden",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: "flex items-center justify-between p-1.5 cursor-pointer hover:bg-gray-700/50 transition-colors",
                onClick: () => toggleOpcao(produto.id, opcao.id),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1.5", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-white font-medium", children: opcao.nome }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-xs text-gray-400", children: [
                      "(",
                      opcao.itens.length,
                      " ",
                      opcao.itens.length === 1 ? "item" : "itens",
                      ")"
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: (e) => {
                          e.stopPropagation();
                          handleRemoveAdicional(produto.id, opcao.id);
                        },
                        className: "text-red-400 hover:text-red-300 p-0.5",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 12 })
                      }
                    ),
                    expandedOpcoes[`${produto.id}-${opcao.id}`] ? /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronUp, { size: 14, className: "text-gray-400" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronDown, { size: 14, className: "text-gray-400" })
                  ] })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: expandedOpcoes[`${produto.id}-${opcao.id}`] && /* @__PURE__ */ jsxRuntimeExports.jsx(
              motion.div,
              {
                initial: { height: 0, opacity: 0 },
                animate: { height: "auto", opacity: 1 },
                exit: { height: 0, opacity: 0 },
                transition: { duration: 0.2 },
                className: "border-t border-gray-700",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-1.5 space-y-0.5", children: opcao.itens.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "div",
                  {
                    className: "flex items-center justify-between px-1.5 py-0.5 rounded bg-gray-700/30",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-gray-300", children: item.nome }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-primary-400 font-medium", children: formatarPreco2(item.preco) })
                    ]
                  },
                  item.id
                )) })
              }
            ) })
          ]
        },
        opcao.id
      )) })
    ] });
  };
  const getProdutoFotoPrincipal = async (produtoId) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return null;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return null;
      const { data: fotosData } = await supabase.from("produto_fotos").select("*").eq("produto_id", produtoId).eq("empresa_id", usuarioData.empresa_id).eq("principal", true).limit(1);
      return fotosData && fotosData.length > 0 ? fotosData[0] : null;
    } catch (error) {
      console.error("Erro ao buscar foto principal:", error);
      return null;
    }
  };
  const [produtosFotosPrincipais, setProdutosFotosPrincipais] = reactExports.useState({});
  const [produtosFotosCount, setProdutosFotosCount] = reactExports.useState({});
  const loadProdutosFotosPrincipais = async (produtos) => {
    const fotosMap = {};
    for (const produto of produtos) {
      const foto = await getProdutoFotoPrincipal(produto.id);
      fotosMap[produto.id] = foto;
    }
    setProdutosFotosPrincipais(fotosMap);
  };
  const loadProdutosFotosCount = async (produtos) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: fotosData } = await supabase.from("produto_fotos").select("produto_id").eq("empresa_id", usuarioData.empresa_id);
      if (!fotosData) return;
      const fotosCount = {};
      produtos.forEach((produto) => {
        const count = fotosData.filter((f2) => f2.produto_id === produto.id).length;
        fotosCount[produto.id] = count;
      });
      setProdutosFotosCount(fotosCount);
    } catch (error) {
      console.error("Erro ao carregar contagem de fotos dos produtos:", error);
    }
  };
  reactExports.useEffect(() => {
    const allProdutos = grupos.flatMap((grupo) => grupo.produtos);
    if (allProdutos.length > 0) {
      loadProdutosFotosPrincipais(allProdutos);
      loadProdutosFotosCount(allProdutos);
    }
  }, [grupos]);
  const handleOpenProdutoGaleria = async (produto) => {
    await loadProdutoFotos(produto.id);
    if (produtoFotos.length > 0) {
      setCurrentFotoIndex(0);
      setIsGaleriaOpen(true);
    } else {
      showMessage("info", "Este produto não possui fotos");
    }
  };
  const formatarEstoque = (valor, produto) => {
    const unidadeMedida = unidadesMedida.find((u2) => u2.id === produto.unidade_medida_id);
    if ((unidadeMedida == null ? void 0 : unidadeMedida.sigla) === "KG") {
      return valor.toFixed(3);
    } else {
      return Math.floor(valor).toString();
    }
  };
  const renderProduto = (grupo, produto) => {
    const fotoPrincipal = produtosFotosPrincipais[produto.id];
    const unidadeMedida = unidadesMedida.find((u2) => u2.id === produto.unidade_medida_id);
    let valorFinal = produto.preco;
    let descontoExibicao = "";
    if (produto.promocao && produto.tipo_desconto && produto.valor_desconto !== void 0) {
      valorFinal = calcularValorFinal(
        produto.preco,
        produto.tipo_desconto,
        produto.valor_desconto
      );
      if (produto.tipo_desconto === "percentual") {
        descontoExibicao = `${produto.valor_desconto}% OFF`;
      } else {
        descontoExibicao = `- R$ ${formatarPreco2(produto.valor_desconto)}`;
      }
    }
    const estoqueInfo = produtosEstoque[produto.id] || { total: 0, naoFaturado: 0 };
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: `p-2.5 bg-gray-800/50 rounded ${produto.ativo === false ? "opacity-60" : ""}`,
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-3 flex-1 min-w-0", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "div",
                {
                  className: "w-16 h-16 rounded overflow-hidden bg-gray-700 flex-shrink-0 cursor-pointer relative",
                  onClick: () => handleOpenProdutoGaleria(produto),
                  children: [
                    fotoPrincipal ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "img",
                      {
                        src: fotoPrincipal.url,
                        alt: produto.nome,
                        className: "w-full h-full object-cover"
                      }
                    ) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-full flex items-center justify-center text-gray-500", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Image, { size: 16 }) }),
                    produtosFotosCount[produto.id] > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-0.5 right-0.5 bg-background-dark px-1 py-0.5 rounded-full text-xs font-medium text-white", children: produtosFotosCount[produto.id] })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 min-w-0", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium text-sm truncate", children: produto.nome }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-xs text-gray-400 mt-0.5", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                    "Código ",
                    produto.codigo
                  ] }),
                  produto.codigo_barras && produto.codigo_barras.trim() !== "" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(QrCode, { size: 10, className: "text-gray-500" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: produto.codigo_barras })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-1 mt-1", children: [
                  produto.promocao && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-1.5 py-0.5 text-xs font-medium bg-green-500/20 text-green-400 rounded-full", children: "Promoção" }),
                  produto.ativo === false && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-1.5 py-0.5 text-xs font-medium bg-red-500/20 text-red-400 rounded-full", children: "Inativo" })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 min-w-0", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-2 mb-0.5", children: produto.promocao && produto.tipo_desconto && produto.valor_desconto !== void 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-gray-400 line-through", children: [
                    "R$ ",
                    produto.preco.toFixed(2)
                  ] }),
                  unidadeMedida && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-1.5 py-0.5 text-xs font-medium bg-primary-500/10 text-primary-400 rounded-full", children: unidadeMedida.sigla })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-1.5 py-0.5 text-xs font-medium bg-green-500/20 text-green-400 rounded-full", children: descontoExibicao })
              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-primary-400 font-medium", children: [
                  "R$ ",
                  produto.preco.toFixed(2)
                ] }),
                unidadeMedida && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-1.5 py-0.5 text-xs font-medium bg-primary-500/10 text-primary-400 rounded-full", children: unidadeMedida.sigla })
              ] }) }),
              produto.promocao && produto.tipo_desconto && produto.valor_desconto !== void 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 mb-0.5", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-green-400 font-medium", children: [
                  "Valor final: R$ ",
                  valorFinal.toFixed(2)
                ] }),
                unidadeMedida && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-1.5 py-0.5 text-xs font-medium bg-primary-500/10 text-primary-400 rounded-full", children: unidadeMedida.sigla })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-wrap items-center gap-1 mb-0.5", children: produto.desconto_quantidade && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "px-1.5 py-0.5 text-xs font-medium bg-blue-500/20 text-blue-400 rounded-full", children: [
                "Desconto ",
                produto.quantidade_minima,
                "+"
              ] }) }),
              estoqueInfo && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap items-center gap-1 mb-0.5", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-xs px-1.5 py-0.5 rounded-full bg-gray-700 text-gray-300", children: [
                  "Estoque: ",
                  formatarEstoque(estoqueInfo.total, produto)
                ] }),
                tipoControleEstoque === "pedidos" && estoqueInfo.naoFaturado > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-xs px-1.5 py-0.5 rounded-full bg-yellow-900/30 text-yellow-400", children: [
                  "Não Faturado: ",
                  formatarEstoque(estoqueInfo.naoFaturado, produto)
                ] })
              ] }),
              produto.descricao && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-400 truncate", children: produto.descricao })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  className: "p-1.5 text-gray-400 hover:text-white transition-colors rounded",
                  onClick: () => {
                    console.log("Botão de edição clicado para produto:", produto);
                    handleEditProduto(grupo, produto);
                  },
                  title: "Editar produto",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Pencil, { size: 14 })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  className: "p-1.5 text-red-400 hover:text-red-300 transition-colors rounded",
                  onClick: () => handleDeleteProduto(produto.id, grupo.id),
                  title: "Excluir produto",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 14 })
                }
              )
            ] })
          ] }),
          renderProdutoOpcoes(produto)
        ]
      },
      produto.id
    );
  };
  const renderSkeletonGroups = () => {
    return Array(3).fill(0).map((_2, groupIndex) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 border-b border-gray-800 flex items-center justify-between", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-6 w-32 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-8 w-28 bg-gray-700 rounded animate-pulse" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-8 w-8 bg-gray-700 rounded animate-pulse" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-8 w-8 bg-gray-700 rounded animate-pulse" })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4 flex gap-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 relative", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 w-full bg-gray-700 rounded-lg animate-pulse" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 w-16 bg-gray-700 rounded animate-pulse" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-3", children: Array(groupIndex === 0 ? 3 : groupIndex === 1 ? 2 : 1).fill(0).map((_22, productIndex) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-3 bg-gray-800/50 rounded-lg", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-24 h-24 bg-gray-700 rounded-lg animate-pulse flex-shrink-0" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-1", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `h-5 bg-gray-700 rounded animate-pulse ${productIndex % 3 === 0 ? "w-32" : productIndex % 3 === 1 ? "w-40" : "w-28"}` }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-12 bg-gray-600 rounded animate-pulse" }),
                productIndex % 2 === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-5 w-16 bg-gray-600 rounded-full animate-pulse" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-8 w-8 bg-gray-700 rounded animate-pulse" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-8 w-8 bg-gray-700 rounded animate-pulse" })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-6 w-20 bg-gray-600 rounded animate-pulse" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-16 bg-gray-600 rounded animate-pulse" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2 mb-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-24 bg-gray-600 rounded-full animate-pulse" }),
              productIndex % 3 === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-20 bg-gray-600 rounded-full animate-pulse" })
            ] }),
            productIndex % 2 === 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-full bg-gray-700 rounded animate-pulse" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-3/4 bg-gray-700 rounded animate-pulse" })
            ] })
          ] })
        ] }) }, productIndex)) })
      ] })
    ] }, groupIndex));
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full px-4 py-1", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-3", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-xl font-semibold text-white", children: "Produtos" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          type: "button",
          variant: "primary",
          onClick: handleAddGrupo,
          disabled: !isDataReady,
          children: "+ Adicionar Grupo"
        }
      )
    ] }),
    !isDataReady ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 flex gap-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 relative", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 w-full bg-gray-700 rounded-lg animate-pulse" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 w-16 bg-gray-700 rounded animate-pulse" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-4", children: renderSkeletonGroups() })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 flex gap-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 relative", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              placeholder: "Buscar grupos...",
              value: searchTerm,
              onChange: (e) => setSearchTerm(e.target.value),
              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18, className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Button,
          {
            type: "button",
            variant: "text",
            className: "flex items-center gap-2",
            onClick: toggleSortOrder,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowUpDown, { size: 18 }),
              sortOrder === "asc" ? "A-Z" : "Z-A"
            ]
          }
        )
      ] }),
      filteredAndSortedGrupos.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg p-8 text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: searchTerm ? "Nenhum grupo encontrado" : "Nenhum grupo cadastrado" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: searchTerm ? "Tente buscar com outros termos" : "Crie seu primeiro grupo de produtos para começar." }),
        !searchTerm && /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            type: "button",
            variant: "primary",
            className: "mx-auto",
            onClick: handleAddGrupo,
            children: "+ Adicionar Grupo"
          }
        )
      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-4", children: filteredAndSortedGrupos.map((grupo) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          className: "bg-background-card rounded border border-gray-800",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-3 border-b border-gray-800 flex items-center justify-between", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-base font-medium text-white", children: grupo.nome }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "button",
                  {
                    onClick: () => handleAddProduto(grupo),
                    className: "flex items-center gap-1 px-2 py-1 text-sm bg-primary-500/10 rounded text-primary-400 hover:text-primary-300 hover:bg-primary-500/20 transition-colors",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 12 }),
                      "Adicionar Produto"
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    className: "p-1 text-gray-400 hover:text-white transition-colors",
                    onClick: () => handleEditGrupo(grupo),
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Pencil, { size: 14 })
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    className: "p-1 text-red-400 hover:text-red-300 transition-colors",
                    onClick: () => handleDeleteGrupo(grupo.id),
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 14 })
                  }
                )
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 flex gap-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 relative", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      placeholder: "Buscar produtos por nome, código ou código de barras...",
                      value: productSearchTerms[grupo.id] || "",
                      onChange: (e) => handleProductSearch(grupo.id, e.target.value),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18, className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    className: "flex items-center gap-2",
                    onClick: () => toggleProductSortOrder(grupo.id),
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowUpDown, { size: 18 }),
                      (productSortOrders[grupo.id] || "asc") === "asc" ? "A-Z" : "Z-A"
                    ]
                  }
                )
              ] }),
              getFilteredAndSortedProducts(grupo).length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center py-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: productSearchTerms[grupo.id] ? "Nenhum produto encontrado" : "Nenhum produto neste grupo" }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: getFilteredAndSortedProducts(grupo).map((produto) => renderProduto(grupo, produto)) })
            ] })
          ]
        },
        grupo.id
      )) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showSidebar && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { opacity: 0 },
          animate: { opacity: 1 },
          exit: { opacity: 0 },
          className: "fixed inset-0 bg-black/50 z-40",
          onClick: () => {
            resetFormularioProduto();
            setShowSidebar(false);
          }
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { x: "100%" },
          animate: { x: 0 },
          exit: { x: "100%" },
          transition: { type: "tween", duration: 0.3 },
          className: "fixed right-0 top-0 h-screen w-full max-w-xl bg-background-card border-l border-gray-800 z-50 overflow-y-auto",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: isGrupoForm ? selectedGrupo ? "Editar Grupo" : "Novo Grupo" : editingProduto ? `Editar Produto em ${selectedGrupo == null ? void 0 : selectedGrupo.nome}` : `Novo Produto em ${selectedGrupo == null ? void 0 : selectedGrupo.nome}` }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => {
                    resetFormularioProduto();
                    setShowSidebar(false);
                  },
                  className: "text-gray-400 hover:text-white transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 24 })
                }
              )
            ] }),
            isGrupoForm ? /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmitGrupo, className: "space-y-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Nome do Grupo" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: novoGrupoNome,
                    onChange: (e) => setNovoGrupoNome(e.target.value),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Digite o nome do grupo"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    className: "flex-1",
                    onClick: () => setShowSidebar(false),
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    variant: "primary",
                    className: "flex-1",
                    disabled: isLoading,
                    children: isLoading ? "Salvando..." : selectedGrupo ? "Salvar" : "Criar"
                  }
                )
              ] })
            ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex border-b border-gray-700 mb-6", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    className: `px-4 py-2 font-medium text-sm ${activeTab === "dados" ? "text-primary-500 border-b-2 border-primary-500" : "text-gray-400 hover:text-white"}`,
                    onClick: () => setActiveTab("dados"),
                    children: "Dados Gerais"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "button",
                  {
                    className: `px-4 py-2 font-medium text-sm ${activeTab === "fotos" ? "text-primary-500 border-b-2 border-primary-500" : editingProduto ? "text-gray-400 hover:text-white" : "text-gray-600 cursor-not-allowed"}`,
                    onClick: () => {
                      if (editingProduto) {
                        setActiveTab("fotos");
                      } else {
                        showMessage("info", "Salve o produto primeiro para adicionar fotos");
                      }
                    },
                    children: [
                      "Fotos ",
                      !editingProduto && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { title: "Salve o produto primeiro", children: "🔒" })
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "button",
                  {
                    className: `px-4 py-2 font-medium text-sm ${activeTab === "estoque" ? "text-primary-500 border-b-2 border-primary-500" : editingProduto ? "text-gray-400 hover:text-white" : "text-gray-600 cursor-not-allowed"}`,
                    onClick: () => {
                      if (editingProduto) {
                        loadEstoqueMovimentos(editingProduto.id);
                        setActiveTab("estoque");
                      } else {
                        showMessage("info", "Salve o produto primeiro para gerenciar o estoque");
                      }
                    },
                    children: [
                      "Estoque ",
                      !editingProduto && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { title: "Salve o produto primeiro", children: "🔒" })
                    ]
                  }
                ),
                opcoesAdicionaisHabilitado && /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    className: `px-4 py-2 font-medium text-sm ${activeTab === "adicionais" ? "text-primary-500 border-b-2 border-primary-500" : "text-gray-400 hover:text-white"}`,
                    onClick: () => setActiveTab("adicionais"),
                    children: "Adicionais"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    className: `px-4 py-2 font-medium text-sm ${activeTab === "impostos" ? "text-primary-500 border-b-2 border-primary-500" : "text-gray-400 hover:text-white"}`,
                    onClick: () => setActiveTab("impostos"),
                    children: "Impostos"
                  }
                )
              ] }),
              activeTab === "dados" && /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmitProduto, className: "space-y-6", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "checkbox",
                      id: "ativo",
                      checked: novoProduto.ativo,
                      onChange: (e) => setNovoProduto({ ...novoProduto, ativo: e.target.checked }),
                      className: "mr-3 rounded border-gray-700 text-primary-500 focus:ring-primary-500/20"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "ativo", className: "text-sm font-medium text-white cursor-pointer", children: "Produto Ativo" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Código do Produto" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: novoProduto.codigo,
                      onChange: (e) => setNovoProduto({ ...novoProduto, codigo: e.target.value }),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "Código do produto",
                      required: true
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Código de Barras (EAN-13)" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: novoProduto.codigo_barras || "",
                      onChange: (e) => {
                        const valor = e.target.value.replace(/\D/g, "").slice(0, 13);
                        setNovoProduto({ ...novoProduto, codigo_barras: valor });
                      },
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "1234567890123 (13 dígitos)",
                      maxLength: 13
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "EAN-13: Apenas números, máximo 13 dígitos" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                    "Nome do Produto ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: novoProduto.nome,
                      onChange: (e) => {
                        const valor = e.target.value;
                        setNovoProduto({ ...novoProduto, nome: valor });
                        if (valor.trim() !== "") {
                          const validation = validarNomeProduto(valor);
                          if (!validation.isValid) {
                            e.target.classList.add("border-red-500");
                          } else {
                            e.target.classList.remove("border-red-500");
                          }
                        }
                      },
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "Digite o nome do produto (sem espaços extras ou caracteres especiais)",
                      maxLength: 120
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "⚠️ Evite espaços no início/fim, espaços duplicados e caracteres especiais" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                    "Unidade de Medida ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "select",
                      {
                        value: novoProduto.unidade_medida_id || "",
                        onChange: (e) => {
                          const novaUnidadeId = e.target.value;
                          const novaUnidade = unidadesMedida.find((u2) => u2.id === novaUnidadeId);
                          const isKG = (novaUnidade == null ? void 0 : novaUnidade.sigla) === "KG";
                          let novoEstoqueInicial = novoProduto.estoque_inicial || 0;
                          if (!isKG && novoEstoqueInicial % 1 !== 0) {
                            novoEstoqueInicial = Math.floor(novoEstoqueInicial);
                          }
                          setNovoProduto({
                            ...novoProduto,
                            unidade_medida_id: novaUnidadeId,
                            estoque_inicial: novoEstoqueInicial
                          });
                        },
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20 dark-select",
                        required: true,
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "", disabled: true, children: "Selecione uma unidade de medida" }),
                          unidadesMedida.map((unidade) => /* @__PURE__ */ jsxRuntimeExports.jsxs("option", { value: unidade.id, children: [
                            unidade.sigla,
                            " - ",
                            unidade.nome
                          ] }, unidade.id))
                        ]
                      }
                    ) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        type: "button",
                        onClick: () => {
                          setNovaUnidadeMedida({ sigla: "", nome: "" });
                          setShowUnidadeMedidaForm(true);
                        },
                        className: "bg-primary-500 hover:bg-primary-600 text-white rounded-lg p-2 flex items-center justify-center transition-colors",
                        title: "Adicionar nova unidade de medida",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 20 })
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Preço" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "absolute inset-y-0 left-0 flex items-center pl-3 text-gray-400", children: "R$" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "text",
                        value: precoFormatado,
                        onChange: (e) => {
                          setPrecoFormatado(e.target.value);
                          const valorNumerico = desformatarPreco(e.target.value);
                          setNovoProduto({ ...novoProduto, preco: valorNumerico });
                        },
                        onFocus: () => {
                          setPrecoFormatado("");
                        },
                        onBlur: () => {
                          const valorNumerico = desformatarPreco(precoFormatado);
                          setPrecoFormatado(formatarPreco2(valorNumerico));
                        },
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-8 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                        placeholder: "0,00"
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Descrição Adicional" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "textarea",
                    {
                      value: novoProduto.descricao,
                      onChange: (e) => {
                        const valor = e.target.value;
                        setNovoProduto({ ...novoProduto, descricao: valor });
                        if (valor.trim() !== "") {
                          const validation = validarDescricaoProduto(valor);
                          if (!validation.isValid) {
                            e.target.classList.add("border-red-500");
                          } else {
                            e.target.classList.remove("border-red-500");
                          }
                        }
                      },
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20 resize-none",
                      rows: 4,
                      placeholder: "Digite a descrição adicional do produto (sem quebras de linha ou caracteres especiais)",
                      maxLength: 500
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "⚠️ Evite quebras de linha, espaços extras e caracteres especiais" })
                ] }),
                !editingProduto && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Estoque Inicial" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: novoProduto.estoque_inicial === 0 && estoqueInputVazio ? "" : novoProduto.estoque_inicial,
                      onChange: (e) => {
                        if (e.target.value === "") {
                          setEstoqueInputVazio(true);
                          setNovoProduto({ ...novoProduto, estoque_inicial: 0 });
                          return;
                        }
                        setEstoqueInputVazio(false);
                        const valorLimpo = e.target.value.replace(/[^\d.,]/g, "").replace(",", ".");
                        if (isNaN(parseFloat(valorLimpo))) {
                          return;
                        }
                        let valor = parseFloat(valorLimpo);
                        const unidadeSelecionada = unidadesMedida.find((u2) => u2.id === novoProduto.unidade_medida_id);
                        const isKG = (unidadeSelecionada == null ? void 0 : unidadeSelecionada.sigla) === "KG";
                        if (!isKG) {
                          valor = Math.floor(valor);
                        }
                        setNovoProduto({ ...novoProduto, estoque_inicial: valor >= 0 ? valor : 0 });
                      },
                      onBlur: () => {
                        if (estoqueInputVazio) {
                          setEstoqueInputVazio(false);
                        }
                      },
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "0"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: (() => {
                    const unidadeSelecionada = unidadesMedida.find((u2) => u2.id === novoProduto.unidade_medida_id);
                    return (unidadeSelecionada == null ? void 0 : unidadeSelecionada.sigla) === "KG" ? "Valores fracionados permitidos para KG (ex: 0,5)" : "Apenas valores inteiros permitidos para esta unidade";
                  })() })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6 border border-gray-700 rounded-lg p-4 bg-gray-800/30", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center mb-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "checkbox",
                        id: "promocao",
                        checked: novoProduto.promocao,
                        onChange: (e) => {
                          const isChecked = e.target.checked;
                          if (isChecked && (!novoProduto.valor_desconto || novoProduto.valor_desconto <= 0)) {
                            setNovoProduto({
                              ...novoProduto,
                              promocao: isChecked,
                              tipo_desconto: "percentual",
                              valor_desconto: 10
                            });
                            setDescontoFormatado("10");
                          } else {
                            setNovoProduto({ ...novoProduto, promocao: isChecked });
                          }
                        },
                        className: "mr-3 rounded border-gray-700 text-primary-500 focus:ring-primary-500/20"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "promocao", className: "text-sm font-medium text-white cursor-pointer", children: "Produto em Promoção" })
                  ] }),
                  novoProduto.promocao && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "pl-7 border-l-2 border-primary-500/30 ml-1.5", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                        "Tipo de Desconto ",
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "input",
                            {
                              type: "radio",
                              id: "percentual",
                              name: "tipo_desconto",
                              value: "percentual",
                              checked: novoProduto.tipo_desconto === "percentual",
                              onChange: () => {
                                const novoValorDesconto = !novoProduto.tipo_desconto || novoProduto.tipo_desconto !== "percentual" ? 10 : novoProduto.valor_desconto;
                                setNovoProduto({
                                  ...novoProduto,
                                  tipo_desconto: "percentual",
                                  valor_desconto: novoValorDesconto || 10
                                });
                                setDescontoFormatado((novoValorDesconto || 10).toString());
                              },
                              className: "mr-2 rounded-full border-gray-700 text-primary-500 focus:ring-primary-500/20",
                              required: true
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "percentual", className: "text-sm text-white cursor-pointer", children: "Percentual (%)" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "input",
                            {
                              type: "radio",
                              id: "valor",
                              name: "tipo_desconto",
                              value: "valor",
                              checked: novoProduto.tipo_desconto === "valor",
                              onChange: () => {
                                let novoValorDesconto = novoProduto.valor_desconto;
                                if (!novoProduto.tipo_desconto || novoProduto.tipo_desconto !== "valor") {
                                  novoValorDesconto = novoProduto.preco * 0.1;
                                }
                                setNovoProduto({
                                  ...novoProduto,
                                  tipo_desconto: "valor",
                                  valor_desconto: novoValorDesconto || novoProduto.preco * 0.1
                                });
                                setDescontoFormatado(formatarPreco2(novoValorDesconto || novoProduto.preco * 0.1));
                              },
                              className: "mr-2 rounded-full border-gray-700 text-primary-500 focus:ring-primary-500/20",
                              required: true
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "valor", className: "text-sm text-white cursor-pointer", children: "Valor (R$)" })
                        ] })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                        novoProduto.tipo_desconto === "percentual" ? "Percentual de Desconto (%)" : "Valor do Desconto (R$)",
                        " ",
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                        novoProduto.tipo_desconto === "valor" && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "absolute inset-y-0 left-0 flex items-center pl-3 text-gray-400", children: "R$" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            value: descontoFormatado,
                            onChange: (e) => {
                              setDescontoFormatado(e.target.value);
                              const valorNumerico = desformatarPreco(e.target.value);
                              setNovoProduto({ ...novoProduto, valor_desconto: valorNumerico });
                            },
                            onFocus: () => {
                              setDescontoFormatado("");
                            },
                            onBlur: () => {
                              const valorNumerico = desformatarPreco(descontoFormatado);
                              if (novoProduto.tipo_desconto === "percentual") {
                                setDescontoFormatado(valorNumerico.toString());
                              } else {
                                setDescontoFormatado(formatarPreco2(valorNumerico));
                              }
                            },
                            className: `w-full bg-gray-800/50 border ${!novoProduto.valor_desconto || novoProduto.valor_desconto <= 0 ? "border-red-500 focus:border-red-500 focus:ring-red-500/20" : "border-gray-700 focus:border-primary-500 focus:ring-primary-500/20"} rounded-lg py-2 ${novoProduto.tipo_desconto === "valor" ? "pl-8" : "pl-3"} pr-3 text-white focus:outline-none focus:ring-1`,
                            placeholder: novoProduto.tipo_desconto === "percentual" ? "10" : "0,00",
                            required: true
                          }
                        ),
                        novoProduto.tipo_desconto === "percentual" && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400", children: "%" })
                      ] }),
                      (!novoProduto.valor_desconto || novoProduto.valor_desconto <= 0) && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 text-xs mt-1", children: "É necessário informar um valor de desconto maior que zero" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-2", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Valor Final" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "absolute inset-y-0 left-0 flex items-center pl-3 text-gray-400", children: "R$" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            value: valorFinalFormatado,
                            className: "w-full bg-gray-700/50 border border-gray-700 rounded-lg py-2 pl-8 pr-3 text-white focus:outline-none",
                            readOnly: true
                          }
                        )
                      ] })
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6 border border-gray-700 rounded-lg p-4 bg-gray-800/30", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center mb-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "checkbox",
                        id: "desconto_quantidade",
                        checked: novoProduto.desconto_quantidade,
                        onChange: (e) => {
                          const isChecked = e.target.checked;
                          if (isChecked && (!novoProduto.valor_desconto_quantidade || novoProduto.valor_desconto_quantidade <= 0)) {
                            setNovoProduto({
                              ...novoProduto,
                              desconto_quantidade: isChecked,
                              quantidade_minima: 5,
                              tipo_desconto_quantidade: "percentual",
                              percentual_desconto_quantidade: 10,
                              valor_desconto_quantidade: 0
                            });
                            setDescontoQuantidadeFormatado("10");
                          } else {
                            setNovoProduto({ ...novoProduto, desconto_quantidade: isChecked });
                          }
                        },
                        className: "mr-3 rounded border-gray-700 text-primary-500 focus:ring-primary-500/20"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "desconto_quantidade", className: "text-sm font-medium text-white cursor-pointer", children: "Desconto por Quantidade Mínima" })
                  ] }),
                  novoProduto.desconto_quantidade && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "pl-7 border-l-2 border-primary-500/30 ml-1.5", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                        "Quantidade Mínima ",
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          type: "text",
                          value: novoProduto.quantidade_minima === 0 && quantidadeMinimaVazia ? "" : novoProduto.quantidade_minima,
                          onChange: (e) => {
                            if (e.target.value === "") {
                              setQuantidadeMinimaVazia(true);
                              setNovoProduto({ ...novoProduto, quantidade_minima: 0 });
                              return;
                            }
                            setQuantidadeMinimaVazia(false);
                            const valorLimpo = e.target.value.replace(/[^\d]/g, "");
                            if (isNaN(parseInt(valorLimpo))) {
                              return;
                            }
                            const valor = parseInt(valorLimpo);
                            setNovoProduto({ ...novoProduto, quantidade_minima: valor > 0 ? valor : 0 });
                          },
                          onBlur: () => {
                            if (!quantidadeMinimaVazia && novoProduto.quantidade_minima === 0) {
                              setNovoProduto({ ...novoProduto, quantidade_minima: 1 });
                            }
                          },
                          className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                          placeholder: "5",
                          required: true
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                        "Tipo de Desconto por Quantidade ",
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "input",
                            {
                              type: "radio",
                              id: "percentual_quantidade",
                              name: "tipo_desconto_quantidade",
                              value: "percentual",
                              checked: novoProduto.tipo_desconto_quantidade === "percentual",
                              onChange: () => {
                                const novoPercentualDesconto = !novoProduto.tipo_desconto_quantidade || novoProduto.tipo_desconto_quantidade !== "percentual" ? 10 : novoProduto.percentual_desconto_quantidade;
                                setNovoProduto({
                                  ...novoProduto,
                                  tipo_desconto_quantidade: "percentual",
                                  percentual_desconto_quantidade: novoPercentualDesconto || 10
                                });
                                setDescontoQuantidadeFormatado((novoPercentualDesconto || 10).toString());
                              },
                              className: "mr-2 rounded-full border-gray-700 text-primary-500 focus:ring-primary-500/20",
                              required: true
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "percentual_quantidade", className: "text-sm text-white cursor-pointer", children: "Percentual (%)" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "input",
                            {
                              type: "radio",
                              id: "valor_quantidade",
                              name: "tipo_desconto_quantidade",
                              value: "valor",
                              checked: novoProduto.tipo_desconto_quantidade === "valor",
                              onChange: () => {
                                let novoValorDesconto = novoProduto.valor_desconto_quantidade;
                                if (!novoProduto.tipo_desconto_quantidade || novoProduto.tipo_desconto_quantidade !== "valor") {
                                  novoValorDesconto = novoProduto.preco * 0.1;
                                }
                                setNovoProduto({
                                  ...novoProduto,
                                  tipo_desconto_quantidade: "valor",
                                  valor_desconto_quantidade: novoValorDesconto || novoProduto.preco * 0.1
                                });
                                setDescontoQuantidadeFormatado(formatarPreco2(novoValorDesconto || novoProduto.preco * 0.1));
                              },
                              className: "mr-2 rounded-full border-gray-700 text-primary-500 focus:ring-primary-500/20",
                              required: true
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "valor_quantidade", className: "text-sm text-white cursor-pointer", children: "Valor (R$)" })
                        ] })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-2", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                        novoProduto.tipo_desconto_quantidade === "percentual" ? "Percentual de Desconto (%)" : "Valor do Desconto (R$)",
                        " ",
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                        novoProduto.tipo_desconto_quantidade === "valor" && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "absolute inset-y-0 left-0 flex items-center pl-3 text-gray-400", children: "R$" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            value: descontoQuantidadeFormatado,
                            onChange: (e) => {
                              setDescontoQuantidadeFormatado(e.target.value);
                              const valorNumerico = desformatarPreco(e.target.value);
                              if (novoProduto.tipo_desconto_quantidade === "percentual") {
                                setNovoProduto({ ...novoProduto, percentual_desconto_quantidade: valorNumerico });
                              } else {
                                setNovoProduto({ ...novoProduto, valor_desconto_quantidade: valorNumerico });
                              }
                            },
                            onFocus: () => {
                              setDescontoQuantidadeFormatado("");
                            },
                            onBlur: () => {
                              const valorNumerico = desformatarPreco(descontoQuantidadeFormatado);
                              if (novoProduto.tipo_desconto_quantidade === "percentual") {
                                setDescontoQuantidadeFormatado(valorNumerico.toString());
                              } else {
                                setDescontoQuantidadeFormatado(formatarPreco2(valorNumerico));
                              }
                            },
                            className: `w-full bg-gray-800/50 border ${novoProduto.tipo_desconto_quantidade === "percentual" && (!novoProduto.percentual_desconto_quantidade || novoProduto.percentual_desconto_quantidade <= 0) || novoProduto.tipo_desconto_quantidade === "valor" && (!novoProduto.valor_desconto_quantidade || novoProduto.valor_desconto_quantidade <= 0) ? "border-red-500 focus:border-red-500 focus:ring-red-500/20" : "border-gray-700 focus:border-primary-500 focus:ring-primary-500/20"} rounded-lg py-2 ${novoProduto.tipo_desconto_quantidade === "valor" ? "pl-8" : "pl-3"} pr-3 text-white focus:outline-none focus:ring-1`,
                            placeholder: novoProduto.tipo_desconto_quantidade === "percentual" ? "10" : "0,00",
                            required: true
                          }
                        ),
                        novoProduto.tipo_desconto_quantidade === "percentual" && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400", children: "%" })
                      ] }),
                      (novoProduto.tipo_desconto_quantidade === "percentual" && (!novoProduto.percentual_desconto_quantidade || novoProduto.percentual_desconto_quantidade <= 0) || novoProduto.tipo_desconto_quantidade === "valor" && (!novoProduto.valor_desconto_quantidade || novoProduto.valor_desconto_quantidade <= 0)) && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 text-xs mt-1", children: "É necessário informar um valor de desconto maior que zero" })
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "button",
                      variant: "text",
                      className: "flex-1",
                      onClick: () => {
                        resetFormularioProduto();
                        setShowSidebar(false);
                      },
                      children: "Cancelar"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "submit",
                      variant: "primary",
                      className: "flex-1",
                      disabled: isLoading,
                      children: isLoading ? "Salvando..." : editingProduto ? "Salvar" : "Criar"
                    }
                  )
                ] })
              ] }),
              activeTab === "fotos" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-6", children: !editingProduto ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-8", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCircle, { size: 32, className: "mx-auto text-gray-500 mb-2" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Salve o produto primeiro para adicionar fotos" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => setActiveTab("dados"),
                    className: "mt-4 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors",
                    children: "Voltar para Dados Gerais"
                  }
                )
              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 border border-gray-700 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: "Fotos do Produto" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-gray-400", children: [
                      produtoFotos.length,
                      "/3 fotos"
                    ] })
                  ] }),
                  produtoFotos.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-6", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Image, { size: 32, className: "mx-auto text-gray-500 mb-2" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-4", children: "Nenhuma foto adicionada" })
                  ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-3 gap-4", children: produtoFotos.map((foto) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "div",
                    {
                      className: `relative rounded-lg overflow-hidden border-2 ${foto.principal ? "border-primary-500" : "border-gray-700"}`,
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "img",
                          {
                            src: foto.url,
                            alt: "Foto do produto",
                            className: "w-full h-32 object-cover cursor-pointer",
                            onClick: () => handleOpenGaleria(index)
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute inset-0 bg-black/60 opacity-0 hover:opacity-100 transition-opacity flex flex-col items-center justify-center gap-2", children: [
                          !foto.principal && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              type: "button",
                              onClick: () => handleSetFotoPrincipal(foto.id),
                              className: "p-1.5 bg-primary-500 rounded-full text-white hover:bg-primary-600 transition-colors",
                              title: "Definir como principal",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(Star, { size: 16 })
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              type: "button",
                              onClick: () => handleConfirmDeleteFoto(foto),
                              className: "p-1.5 bg-red-500 rounded-full text-white hover:bg-red-600 transition-colors",
                              title: "Excluir foto",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 16 })
                            }
                          )
                        ] }),
                        foto.principal && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-1 right-1 bg-primary-500 text-white text-xs px-1.5 py-0.5 rounded", children: "Principal" })
                      ]
                    },
                    foto.id
                  )) }),
                  produtoFotos.length < 3 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "file",
                        ref: fileInputRef,
                        onChange: handleFileUpload,
                        accept: "image/*",
                        className: "hidden",
                        disabled: isUploadingFoto
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        type: "button",
                        onClick: () => {
                          var _a2;
                          return (_a2 = fileInputRef.current) == null ? void 0 : _a2.click();
                        },
                        disabled: isUploadingFoto,
                        className: "w-full py-2 px-4 border border-dashed border-gray-600 rounded-lg flex items-center justify-center gap-2 text-gray-400 hover:text-white hover:border-gray-500 transition-colors disabled:opacity-70 disabled:cursor-not-allowed",
                        children: isUploadingFoto ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-gray-500 border-t-white rounded-full animate-spin" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Enviando..." })
                        ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(Upload, { size: 18 }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Adicionar Foto" })
                        ] })
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "button",
                      variant: "text",
                      className: "flex-1",
                      onClick: () => setActiveTab("dados"),
                      children: "Voltar"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "button",
                      variant: "primary",
                      className: "flex-1",
                      onClick: async () => {
                        const fakeEvent = { preventDefault: () => {
                        } };
                        await handleSubmitProduto(fakeEvent);
                      },
                      disabled: isLoading,
                      children: isLoading ? "Salvando..." : "Concluir"
                    }
                  )
                ] })
              ] }) }),
              activeTab === "estoque" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-6", children: !editingProduto ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-8", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCircle, { size: 32, className: "mx-auto text-gray-500 mb-2" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Salve o produto primeiro para gerenciar o estoque" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => setActiveTab("dados"),
                    className: "mt-4 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors",
                    children: "Voltar para Dados Gerais"
                  }
                )
              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 border border-gray-700 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col md:flex-row md:items-center justify-between mb-4 gap-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col md:flex-row md:items-center gap-3", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-gray-400 bg-gray-900/50 border border-gray-800 rounded-lg p-2 px-3", children: [
                    "Estoque Atual: ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-semibold text-white", children: editingProduto ? formatarEstoque(estoqueAtual, editingProduto) : estoqueAtual.toFixed(2) })
                  ] }) }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6 bg-gray-900/50 border border-gray-800 rounded-lg p-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium mb-4", children: "Configuração de Estoque Mínimo" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "checkbox",
                            id: "estoque_minimo_ativo",
                            checked: novoProduto.estoque_minimo_ativo,
                            onChange: (e) => setNovoProduto({ ...novoProduto, estoque_minimo_ativo: e.target.checked }),
                            className: "mr-3 rounded border-gray-700 text-primary-500 focus:ring-primary-500/20"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "estoque_minimo_ativo", className: "text-sm font-medium text-white cursor-pointer", children: "Ativar controle de estoque mínimo" })
                      ] }),
                      novoProduto.estoque_minimo_ativo && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Quantidade Mínima" }),
                        (() => {
                          const unidadeSelecionada = unidadesMedida.find((u2) => u2.id === novoProduto.unidade_medida_id);
                          const isKG = (unidadeSelecionada == null ? void 0 : unidadeSelecionada.sigla) === "KG";
                          const placeholder = isKG ? "0,000" : "0";
                          return /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "input",
                            {
                              type: "text",
                              value: novoProduto.estoque_minimo === 0 && estoqueMinimoVazio ? "" : novoProduto.estoque_minimo,
                              onChange: (e) => {
                                if (e.target.value === "") {
                                  setEstoqueMinimoVazio(true);
                                  setNovoProduto({ ...novoProduto, estoque_minimo: 0 });
                                  return;
                                }
                                setEstoqueMinimoVazio(false);
                                const valorLimpo = e.target.value.replace(/[^\d.,]/g, "").replace(",", ".");
                                if (isNaN(parseFloat(valorLimpo))) {
                                  return;
                                }
                                const valor = parseFloat(valorLimpo);
                                const valorFinal = !isKG && valor % 1 !== 0 ? Math.floor(valor) : valor;
                                setNovoProduto({
                                  ...novoProduto,
                                  estoque_minimo: valorFinal >= 0 ? valorFinal : 0
                                });
                              },
                              onFocus: () => {
                                if (novoProduto.estoque_minimo === 0) {
                                  setEstoqueMinimoVazio(true);
                                }
                              },
                              onBlur: () => {
                                if (estoqueMinimoVazio) {
                                  setEstoqueMinimoVazio(false);
                                } else {
                                  const casasDecimais = isKG ? 3 : 0;
                                  setNovoProduto({
                                    ...novoProduto,
                                    estoque_minimo: parseFloat(novoProduto.estoque_minimo.toFixed(casasDecimais))
                                  });
                                }
                              },
                              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                              placeholder
                            }
                          );
                        })(),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: (() => {
                          const unidadeSelecionada = unidadesMedida.find((u2) => u2.id === novoProduto.unidade_medida_id);
                          return (unidadeSelecionada == null ? void 0 : unidadeSelecionada.sigla) === "KG" ? "Valores fracionados permitidos para KG (ex: 0,5)" : "Apenas valores inteiros permitidos para esta unidade";
                        })() })
                      ] })
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleRegistrarMovimentoEstoque, className: "bg-gray-900/50 border border-gray-800 rounded-lg p-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium mb-4", children: "Registrar Movimentação" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Tipo de Movimento" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-6", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "input",
                              {
                                type: "radio",
                                id: "tipo_entrada",
                                name: "tipo_movimento",
                                value: "entrada",
                                checked: novoMovimento.tipo === "entrada",
                                onChange: () => setNovoMovimento({ ...novoMovimento, tipo: "entrada" }),
                                className: "mr-2 rounded-full border-gray-700 text-primary-500 focus:ring-primary-500/20"
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "tipo_entrada", className: "text-sm text-white cursor-pointer", children: "Entrada" })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "input",
                              {
                                type: "radio",
                                id: "tipo_saida",
                                name: "tipo_movimento",
                                value: "saida",
                                checked: novoMovimento.tipo === "saida",
                                onChange: () => setNovoMovimento({ ...novoMovimento, tipo: "saida" }),
                                className: "mr-2 rounded-full border-gray-700 text-primary-500 focus:ring-primary-500/20"
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "tipo_saida", className: "text-sm text-white cursor-pointer", children: "Saída" })
                          ] })
                        ] })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Quantidade" }),
                        (() => {
                          const unidadeSelecionada = unidadesMedida.find((u2) => u2.id === (editingProduto == null ? void 0 : editingProduto.unidade_medida_id));
                          const isKG = (unidadeSelecionada == null ? void 0 : unidadeSelecionada.sigla) === "KG";
                          const placeholder = isKG ? "0,000" : "0";
                          return /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "input",
                            {
                              type: "text",
                              value: novoMovimento.quantidade === 0 && quantidadeMovimentoVazia ? "" : novoMovimento.quantidade,
                              onChange: (e) => {
                                if (e.target.value === "") {
                                  setQuantidadeMovimentoVazia(true);
                                  setNovoMovimento({
                                    ...novoMovimento,
                                    quantidade: 0
                                  });
                                  return;
                                }
                                setQuantidadeMovimentoVazia(false);
                                const valorLimpo = e.target.value.replace(/[^\d.,]/g, "").replace(",", ".");
                                if (isNaN(parseFloat(valorLimpo))) {
                                  return;
                                }
                                const valor = parseFloat(valorLimpo);
                                const valorFinal = !isKG && valor % 1 !== 0 ? Math.floor(valor) : valor;
                                setNovoMovimento({
                                  ...novoMovimento,
                                  quantidade: valorFinal >= 0 ? valorFinal : 0
                                });
                              },
                              onFocus: () => {
                                if (novoMovimento.quantidade === 0) {
                                  setQuantidadeMovimentoVazia(true);
                                }
                              },
                              onBlur: () => {
                                if (!quantidadeMovimentoVazia) {
                                  const casasDecimais = isKG ? 3 : 0;
                                  setNovoMovimento({
                                    ...novoMovimento,
                                    quantidade: parseFloat(novoMovimento.quantidade.toFixed(casasDecimais))
                                  });
                                }
                              },
                              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                              placeholder,
                              required: true
                            }
                          );
                        })()
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Observação" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            value: novoMovimento.observacao,
                            onChange: (e) => setNovoMovimento({ ...novoMovimento, observacao: e.target.value }),
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                            placeholder: "Motivo da movimentação"
                          }
                        )
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-end mt-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Button,
                      {
                        type: "submit",
                        variant: "primary",
                        disabled: novoMovimento.quantidade <= 0 || isLoadingEstoque,
                        children: isLoadingEstoque ? "Registrando..." : "Registrar Movimento"
                      }
                    ) })
                  ] }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Histórico de Movimentações" }) }),
                    isLoadingEstoque ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-8", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 border-2 border-gray-500 border-t-white rounded-full animate-spin mx-auto mb-2" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Carregando movimentações..." })
                    ] }) : estoqueMovimentos.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center py-8", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhuma movimentação registrada" }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "border border-gray-800 rounded-lg overflow-hidden", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "overflow-y-auto max-h-[300px] custom-scrollbar", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("table", { className: "w-full text-sm text-left text-gray-300", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { className: "text-xs uppercase bg-gray-900/50 text-gray-400 sticky top-0", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { scope: "col", className: "px-1 py-2 w-[110px]", children: "Data" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { scope: "col", className: "px-1 py-2 w-[70px]", children: "Tipo" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { scope: "col", className: "px-1 py-2 w-[50px] text-center", children: "Qtde" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { scope: "col", className: "px-1 py-2 w-[60px] text-center", children: "Saldo" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { scope: "col", className: "px-1 py-2 w-[80px]", children: "Usuário" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { scope: "col", className: "px-1 py-2", children: "Obs" })
                      ] }) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { children: estoqueMovimentos.map((movimento) => {
                        var _a2, _b2;
                        return /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "border-b border-gray-800 hover:bg-gray-800/30", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-1 py-1.5 w-[110px] text-xs", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col leading-none", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-200 text-[11px]", children: new Date(movimento.data_hora_movimento).toLocaleDateString("pt-BR") }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-[9px] mt-0.5", children: new Date(movimento.data_hora_movimento).toLocaleTimeString("pt-BR", { hour: "2-digit", minute: "2-digit" }) })
                          ] }) }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-1 py-1.5 w-[70px]", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `px-1 py-0.5 rounded text-[9px] font-medium ${movimento.tipo_movimento === "entrada" ? "bg-green-900/30 text-green-400" : "bg-red-900/30 text-red-400"}`, children: movimento.tipo_movimento === "entrada" ? "Entrada" : "Saída" }) }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-1 py-1.5 w-[50px] font-medium text-center text-xs", children: editingProduto ? formatarEstoque(parseFloat(movimento.quantidade), editingProduto) : parseFloat(movimento.quantidade).toFixed(2) }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-1 py-1.5 font-bold w-[60px] text-white text-center text-xs", children: editingProduto ? formatarEstoque(parseFloat(movimento.saldo), editingProduto) : parseFloat(movimento.saldo).toFixed(2) }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-1 py-1.5 w-[80px] text-gray-300 text-[10px] truncate", title: ((_a2 = movimento.usuario) == null ? void 0 : _a2.nome) || "Sistema", children: ((_b2 = movimento.usuario) == null ? void 0 : _b2.nome) || "Sistema" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-1 py-1.5 text-gray-300 text-[10px] break-words", children: movimento.observacao || "-" })
                        ] }, movimento.id);
                      }) })
                    ] }) }) })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "button",
                      variant: "text",
                      className: "flex-1",
                      onClick: () => setActiveTab("dados"),
                      children: "Voltar"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "button",
                      variant: "primary",
                      className: "flex-1",
                      onClick: async () => {
                        const fakeEvent = { preventDefault: () => {
                        } };
                        await handleSubmitProduto(fakeEvent);
                      },
                      disabled: isLoading,
                      children: isLoading ? "Salvando..." : "Concluir"
                    }
                  )
                ] })
              ] }) }),
              activeTab === "adicionais" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 border border-gray-700 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium mb-4", children: "Opções Adicionais" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mb-4", children: "Selecione as opções adicionais que estarão disponíveis para este produto." }),
                  availableOpcoes.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-8", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-700/50 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 24, className: "text-gray-400" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-4", children: "Nenhuma opção adicional cadastrada" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-500", children: "Cadastre opções adicionais primeiro para poder vinculá-las aos produtos." })
                  ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-3", children: availableOpcoes.map((opcao) => {
                    var _a2, _b2;
                    return /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        className: "border border-gray-700 rounded-lg overflow-hidden",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between p-3 bg-gray-800/30", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  type: "checkbox",
                                  id: `opcao-${opcao.id}`,
                                  checked: selectedOpcoes.includes(opcao.id),
                                  onChange: () => handleOpcaoToggle(opcao.id),
                                  className: "w-4 h-4 text-primary-500 border-gray-600 rounded focus:ring-primary-500 focus:ring-opacity-25 bg-gray-700"
                                }
                              ),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "label",
                                {
                                  htmlFor: `opcao-${opcao.id}`,
                                  className: "text-white font-medium cursor-pointer",
                                  children: opcao.nome
                                }
                              ),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-xs text-gray-400 bg-gray-700 px-2 py-1 rounded", children: [
                                ((_a2 = opcao.itens) == null ? void 0 : _a2.length) || 0,
                                " ",
                                (((_b2 = opcao.itens) == null ? void 0 : _b2.length) || 0) === 1 ? "item" : "itens"
                              ] })
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "button",
                              {
                                type: "button",
                                onClick: () => toggleOpcaoExpansion(opcao.id),
                                className: "p-1 text-gray-400 hover:text-white transition-colors",
                                children: expandedOpcoesForm[opcao.id] ? /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronUp, { size: 16 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronDown, { size: 16 })
                              }
                            )
                          ] }),
                          expandedOpcoesForm[opcao.id] && opcao.itens && opcao.itens.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-3 bg-gray-900/30 border-t border-gray-700", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-sm font-medium text-gray-300 mb-2", children: "Itens disponíveis:" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 gap-2", children: opcao.itens.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "div",
                              {
                                className: "flex items-center justify-between p-2 bg-gray-800/50 rounded",
                                children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-white", children: item.nome }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-primary-400", children: item.preco > 0 ? `+R$ ${item.preco.toFixed(2)}` : "Grátis" })
                                ]
                              },
                              item.id
                            )) })
                          ] })
                        ]
                      },
                      opcao.id
                    );
                  }) })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "button",
                      variant: "text",
                      className: "flex-1",
                      onClick: () => setActiveTab("dados"),
                      children: "Voltar"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "button",
                      variant: "primary",
                      className: "flex-1",
                      onClick: async () => {
                        const fakeEvent = { preventDefault: () => {
                        } };
                        await handleSubmitProduto(fakeEvent);
                      },
                      disabled: isLoading,
                      children: isLoading ? "Salvando..." : "Concluir"
                    }
                  )
                ] })
              ] }),
              activeTab === "impostos" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 border border-gray-700 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "text-white font-medium mb-4 flex items-center gap-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "18", height: "18", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "text-primary-400", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("polyline", { points: "14,2 14,8 20,8" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "16", y1: "13", x2: "8", y2: "13" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "16", y1: "17", x2: "8", y2: "17" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("polyline", { points: "10,9 9,9 8,9" })
                    ] }),
                    "Dados Fiscais (NFe)"
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mb-6", children: "Configure os dados fiscais necessários para emissão de NFe. Os códigos CST/CSOSN são definidos automaticamente baseados no regime tributário da empresa." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                        "NCM (Nomenclatura Comum do Mercosul) ",
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            value: aplicarMascaraNCM(novoProduto.ncm || ""),
                            onChange: (e) => {
                              const apenasNumeros = e.target.value.replace(/\D/g, "").slice(0, 8);
                              setNovoProduto({ ...novoProduto, ncm: apenasNumeros });
                              if (apenasNumeros.length === 8) {
                                debounceValidarNCM(apenasNumeros);
                              } else {
                                setNcmValidacao({
                                  validando: false,
                                  valido: null,
                                  descricao: "",
                                  erro: ""
                                });
                              }
                            },
                            className: `w-full bg-gray-800/50 border rounded-lg py-2 px-3 pr-10 text-white focus:outline-none focus:ring-1 focus:ring-primary-500/20 ${ncmValidacao.valido === true ? "border-green-500 focus:border-green-500" : ncmValidacao.valido === false ? "border-red-500 focus:border-red-500" : "border-gray-700 focus:border-primary-500"}`,
                            placeholder: "0000.00.00",
                            maxLength: 10,
                            required: true
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute inset-y-0 right-0 flex items-center pr-3", children: [
                          ncmValidacao.validando && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500" }),
                          !ncmValidacao.validando && ncmValidacao.valido === true && /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "text-green-500", children: /* @__PURE__ */ jsxRuntimeExports.jsx("polyline", { points: "20 6 9 17 4 12" }) }),
                          !ncmValidacao.validando && ncmValidacao.valido === false && /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "text-red-500", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "18", y1: "6", x2: "6", y2: "18" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "6", y1: "6", x2: "18", y2: "18" })
                          ] })
                        ] })
                      ] }),
                      ncmValidacao.valido === true && ncmValidacao.descricao && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-2 p-2 bg-green-900/20 border border-green-700/50 rounded text-xs", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-green-300 font-medium", children: "✓ NCM válido" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-green-200 mt-1 line-clamp-2", children: ncmValidacao.descricao.length > 100 ? `${ncmValidacao.descricao.substring(0, 100)}...` : ncmValidacao.descricao })
                      ] }),
                      ncmValidacao.valido === false && ncmValidacao.erro && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-2 p-2 bg-red-900/20 border border-red-700/50 rounded text-xs", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-300 font-medium", children: "✗ NCM inválido" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-200 mt-1", children: ncmValidacao.erro })
                      ] }),
                      !ncmValidacao.validando && ncmValidacao.valido === null && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Digite o código NCM de 8 dígitos para validação automática" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                        "CFOP (Código Fiscal de Operações) ",
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "select",
                        {
                          value: novoProduto.cfop || "5102",
                          onChange: (e) => {
                            const newCfop = e.target.value;
                            let newSituacaoTributaria = novoProduto.situacao_tributaria;
                            let newAliquotaIcms = novoProduto.aliquota_icms;
                            if (newCfop === "5102" || newCfop === "5101") {
                              newSituacaoTributaria = "tributado_integral";
                              if (newCfop === "5102") {
                                newAliquotaIcms = 18;
                              }
                            } else if (newCfop === "5405" || newCfop === "5401" || newCfop === "5403") {
                              newSituacaoTributaria = "tributado_st";
                              newAliquotaIcms = 0;
                            } else {
                              newAliquotaIcms = 0;
                            }
                            if (newCfop !== "5405") {
                              setNovoProduto({
                                ...novoProduto,
                                cfop: newCfop,
                                cest: "",
                                situacao_tributaria: newSituacaoTributaria,
                                aliquota_icms: newAliquotaIcms
                              });
                            } else {
                              setNovoProduto({
                                ...novoProduto,
                                cfop: newCfop,
                                situacao_tributaria: newSituacaoTributaria,
                                aliquota_icms: newAliquotaIcms
                              });
                            }
                          },
                          className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                          style: {
                            maxWidth: "100%",
                            overflow: "hidden",
                            textOverflow: "ellipsis",
                            whiteSpace: "nowrap"
                          },
                          required: true,
                          title: `${novoProduto.cfop || "5102"} - ${novoProduto.cfop === "5102" ? "Venda de mercadoria adquirida ou recebida de terceiros" : novoProduto.cfop === "5101" ? "Venda de produção do estabelecimento" : novoProduto.cfop === "5405" ? "Venda de mercadoria adquirida ou recebida de terceiros (ST)" : novoProduto.cfop === "5401" ? "Venda de produção do estabelecimento (ST)" : novoProduto.cfop === "5403" ? "Venda de mercadoria adquirida ou recebida de terceiros, sujeita ao regime de substituição tributária" : "Código CFOP selecionado"}`,
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "5102", title: "5102 - Venda de mercadoria adquirida ou recebida de terceiros", children: "5102 - Venda de mercadoria de terceiros" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "5101", title: "5101 - Venda de produção do estabelecimento", children: "5101 - Venda de produção própria" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "5405", title: "5405 - Venda de mercadoria adquirida ou recebida de terceiros (ST)", children: "5405 - Venda de mercadoria de terceiros (ST)" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "5401", title: "5401 - Venda de produção do estabelecimento (ST)", children: "5401 - Venda de produção própria (ST)" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "5403", title: "5403 - Venda de mercadoria adquirida ou recebida de terceiros, sujeita ao regime de substituição tributária", children: "5403 - Venda com substituição tributária" })
                          ]
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Passe o mouse sobre as opções para ver a descrição completa" }),
                      ["5102", "5101", "5405", "5401", "5403"].includes(novoProduto.cfop || "") && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-2 p-2 bg-yellow-900/20 border border-yellow-700/50 rounded text-xs", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-yellow-300 font-medium", children: "⚠️ Regra Fiscal Aplicada" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-yellow-200 mt-1", children: [
                          (novoProduto.cfop === "5102" || novoProduto.cfop === "5101") && 'CFOP requer situação tributária "Tributada integralmente" (CST 00/CSOSN 102)',
                          (novoProduto.cfop === "5405" || novoProduto.cfop === "5401" || novoProduto.cfop === "5403") && 'CFOP requer situação tributária "ICMS por substituição tributária" (CST 60/CSOSN 500)'
                        ] }),
                        novoProduto.cfop === "5102" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-yellow-200 mt-1 text-xs", children: "💡 CFOP 5102 sugere alíquota ICMS de 18% (varia por estado)" })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                        "Origem do Produto ",
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "select",
                        {
                          value: novoProduto.origem_produto || 0,
                          onChange: (e) => setNovoProduto({ ...novoProduto, origem_produto: parseInt(e.target.value) }),
                          className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                          style: {
                            maxWidth: "100%",
                            overflow: "hidden",
                            textOverflow: "ellipsis",
                            whiteSpace: "nowrap"
                          },
                          required: true,
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 0, title: "0 - Nacional, exceto as indicadas nos códigos 3, 4, 5 e 8", children: "0 - Nacional (padrão)" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 1, title: "1 - Estrangeira - Importação direta, exceto a indicada no código 6", children: "1 - Estrangeira - Importação direta" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 2, title: "2 - Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7", children: "2 - Estrangeira - Mercado interno" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 3, title: "3 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40% e inferior ou igual a 70%", children: "3 - Nacional - Conteúdo importação 40-70%" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 4, title: "4 - Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos", children: "4 - Nacional - Processos produtivos básicos" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 5, title: "5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%", children: "5 - Nacional - Conteúdo importação ≤40%" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 6, title: "6 - Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX e gás natural", children: "6 - Estrangeira - Sem similar nacional" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 7, title: "7 - Estrangeira - Adquirida no mercado interno, sem similar nacional, constante lista CAMEX e gás natural", children: "7 - Estrangeira - Mercado interno sem similar" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 8, title: "8 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%", children: "8 - Nacional - Conteúdo importação >70%" })
                          ]
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Passe o mouse sobre as opções para ver a descrição completa" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                        "Situação Tributária ",
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "select",
                        {
                          value: novoProduto.situacao_tributaria || "tributado_integral",
                          onChange: (e) => setNovoProduto({ ...novoProduto, situacao_tributaria: e.target.value }),
                          disabled: ["5102", "5101", "5405", "5401", "5403"].includes(novoProduto.cfop || ""),
                          className: `w-full border rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-primary-500/20 ${["5102", "5101", "5405", "5401", "5403"].includes(novoProduto.cfop || "") ? "bg-gray-700/50 border-gray-600 cursor-not-allowed opacity-75" : "bg-gray-800/50 border-gray-700 focus:border-primary-500"}`,
                          style: {
                            maxWidth: "100%",
                            overflow: "hidden",
                            textOverflow: "ellipsis",
                            whiteSpace: "nowrap"
                          },
                          required: true,
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "option",
                              {
                                value: "tributado_integral",
                                title: regimeTributario === 1 || regimeTributario === 2 ? "102 - Tributada sem permissão de crédito (Simples Nacional)" : "00 - Tributada integralmente (Regime Normal)",
                                children: regimeTributario === 1 || regimeTributario === 2 ? "102 - Tributada sem permissão de crédito" : "00 - Tributada integralmente"
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "option",
                              {
                                value: "tributado_st",
                                title: regimeTributario === 1 || regimeTributario === 2 ? "500 - ICMS cobrado por substituição tributária (Simples Nacional)" : "60 - ICMS cobrado por substituição tributária (Regime Normal)",
                                children: regimeTributario === 1 || regimeTributario === 2 ? "500 - ICMS por substituição tributária" : "60 - ICMS por substituição tributária"
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "option",
                              {
                                value: "isento",
                                title: regimeTributario === 1 || regimeTributario === 2 ? "300 - Imune/Não tributada/Isenta (Simples Nacional)" : "40 - Isenta/Imune/Não tributada (Regime Normal)",
                                children: regimeTributario === 1 || regimeTributario === 2 ? "300 - Imune/Não tributada/Isenta" : "40 - Isenta/Imune/Não tributada"
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "option",
                              {
                                value: "nao_tributado",
                                title: regimeTributario === 1 || regimeTributario === 2 ? "400 - Não tributada pelo Simples Nacional" : "41 - Não tributada (Regime Normal)",
                                children: regimeTributario === 1 || regimeTributario === 2 ? "400 - Não tributada pelo Simples" : "41 - Não tributada"
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "option",
                              {
                                value: "suspenso",
                                title: regimeTributario === 1 || regimeTributario === 2 ? "103 - Tributada com permissão de crédito (Simples Nacional)" : "50 - Suspensão (Regime Normal)",
                                children: regimeTributario === 1 || regimeTributario === 2 ? "103 - Tributada com permissão de crédito" : "50 - Suspensão"
                              }
                            )
                          ]
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: ["5102", "5101", "5405", "5401", "5403"].includes(novoProduto.cfop || "") ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-yellow-400", children: "🔒 Campo bloqueado - Situação tributária definida automaticamente pelo CFOP selecionado" }) : regimeTributario === 1 || regimeTributario === 2 ? "Códigos CSOSN para Simples Nacional. Passe o mouse sobre as opções para ver detalhes." : "Códigos CST para Regime Normal. Passe o mouse sobre as opções para ver detalhes." })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Alíquota ICMS (%)" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "number",
                            value: novoProduto.aliquota_icms || 0,
                            onChange: (e) => setNovoProduto({ ...novoProduto, aliquota_icms: parseFloat(e.target.value) || 0 }),
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                            placeholder: "18.00",
                            step: "0.01",
                            min: "0",
                            max: "100"
                          }
                        ),
                        novoProduto.cfop === "5102" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-blue-400 mt-1", children: "💡 CFOP 5102 sugere alíquota ICMS de 18% (pode variar por estado - ajuste conforme necessário)" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Alíquota PIS (%)" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "number",
                            value: novoProduto.aliquota_pis || 1.65,
                            onChange: (e) => setNovoProduto({ ...novoProduto, aliquota_pis: parseFloat(e.target.value) || 0 }),
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                            placeholder: "1.65",
                            step: "0.01",
                            min: "0",
                            max: "100"
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Alíquota COFINS (%)" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "number",
                            value: novoProduto.aliquota_cofins || 7.6,
                            onChange: (e) => setNovoProduto({ ...novoProduto, aliquota_cofins: parseFloat(e.target.value) || 0 }),
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                            placeholder: "7.60",
                            step: "0.01",
                            min: "0",
                            max: "100"
                          }
                        )
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
                      novoProduto.cfop === "5405" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                          "CEST (Código Especificador ST) ",
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            value: novoProduto.cest || "",
                            onChange: (e) => {
                              const valor = e.target.value.replace(/\D/g, "").slice(0, 7);
                              setNovoProduto({ ...novoProduto, cest: valor });
                            },
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                            placeholder: "1234567 (7 dígitos)",
                            maxLength: 7,
                            required: true
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Obrigatório para CFOP 5405 - Venda de mercadoria sujeita à Substituição Tributária." })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Peso Líquido (kg)" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "number",
                            value: novoProduto.peso_liquido || 0,
                            onChange: (e) => setNovoProduto({ ...novoProduto, peso_liquido: parseFloat(e.target.value) || 0 }),
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                            placeholder: "0.000",
                            step: "0.001",
                            min: "0"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Peso líquido do produto em quilogramas." })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-blue-900/20 border border-blue-700/50 rounded-lg p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-3", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-blue-500/20 rounded-full p-1 mt-0.5", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "14", height: "14", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "text-blue-400", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "12", cy: "12", r: "10" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "l9 12 2 2 4-4" })
                      ] }) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-blue-300 font-medium text-sm mb-1", children: "Regime Tributário da Empresa" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-blue-200 text-xs", children: [
                          regimeTributario === 1 && "Simples Nacional - Utiliza códigos CSOSN (Código de Situação da Operação no Simples Nacional).",
                          regimeTributario === 2 && "Simples Nacional (Excesso) - Utiliza códigos CSOSN (Código de Situação da Operação no Simples Nacional).",
                          regimeTributario === 3 && "Regime Normal - Utiliza códigos CST (Código de Situação Tributária)."
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-blue-200 text-xs mt-1", children: regimeTributario === 1 || regimeTributario === 2 ? "Se a empresa mudar para Regime Normal, os códigos CSOSN serão convertidos automaticamente para CST." : "Se a empresa mudar para Simples Nacional, os códigos CST serão convertidos automaticamente para CSOSN." })
                      ] })
                    ] }) })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "button",
                      variant: "text",
                      className: "flex-1",
                      onClick: () => setActiveTab("dados"),
                      children: "Voltar"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "button",
                      variant: "primary",
                      className: "flex-1",
                      onClick: async () => {
                        if (!novoProduto.ncm || novoProduto.ncm.length !== 8) {
                          showMessage("error", "NCM é obrigatório e deve ter 8 dígitos");
                          return;
                        }
                        if (ncmValidacao.valido === false) {
                          showMessage("error", "NCM inválido. Verifique o código informado.");
                          return;
                        }
                        if (ncmValidacao.validando) {
                          showMessage("warning", "Aguarde a validação do NCM...");
                          return;
                        }
                        if (novoProduto.cfop === "5405") {
                          if (!novoProduto.cest || novoProduto.cest.length !== 7) {
                            showMessage("error", "CEST é obrigatório e deve ter 7 dígitos para CFOP 5405");
                            return;
                          }
                        }
                        const fakeEvent = { preventDefault: () => {
                        } };
                        await handleSubmitProduto(fakeEvent);
                      },
                      disabled: isLoading,
                      children: isLoading ? "Salvando..." : "Concluir"
                    }
                  )
                ] })
              ] })
            ] })
          ] })
        }
      )
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      NFeValidationModal,
      {
        isOpen: nfeValidationModal.isOpen,
        onClose: () => setNfeValidationModal((prev) => ({ ...prev, isOpen: false })),
        campo: nfeValidationModal.campo,
        valor: nfeValidationModal.valor,
        validationResult: nfeValidationModal.validationResult,
        onCorrect: (newValue) => {
          if (nfeValidationModal.campo === "Nome do Produto") {
            setNovoProduto((prev) => ({ ...prev, nome: newValue }));
          } else if (nfeValidationModal.campo === "Descrição do Produto") {
            setNovoProduto((prev) => ({ ...prev, descricao: newValue }));
          }
          setNfeValidationModal((prev) => ({ ...prev, isOpen: false }));
        }
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      DeleteConfirmation$5,
      {
        isOpen: deleteConfirmation.isOpen,
        onClose: () => setDeleteConfirmation((prev) => ({ ...prev, isOpen: false })),
        onConfirm: handleConfirmDelete,
        title: deleteConfirmation.title,
        message: deleteConfirmation.message
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      WarningModal,
      {
        isOpen: showWarning,
        onClose: () => setShowWarning(false),
        message: warningMessage
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      FotoGaleria,
      {
        fotos: produtoFotos,
        isOpen: isGaleriaOpen,
        onClose: () => setIsGaleriaOpen(false),
        initialFotoIndex: currentFotoIndex
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showUnidadeMedidaForm && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        exit: { opacity: 0 },
        className: "fixed inset-0 bg-black/50 flex items-center justify-end z-50",
        onClick: () => setShowUnidadeMedidaForm(false),
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          motion.div,
          {
            initial: { x: "100%" },
            animate: { x: 0 },
            exit: { x: "100%" },
            transition: { type: "spring", damping: 25, stiffness: 300 },
            className: "bg-background-dark h-full w-full max-w-md overflow-y-auto custom-scrollbar",
            onClick: (e) => e.stopPropagation(),
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Nova Unidade de Medida" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => setShowUnidadeMedidaForm(false),
                    className: "text-gray-400 hover:text-white transition-colors",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 24 })
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmitUnidadeMedida, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                      "Sigla ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "text",
                        value: novaUnidadeMedida.sigla,
                        onChange: (e) => setNovaUnidadeMedida({ ...novaUnidadeMedida, sigla: e.target.value.toUpperCase() }),
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                        placeholder: "Ex: KG, UN, CX",
                        required: true
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                      "Nome ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "text",
                        value: novaUnidadeMedida.nome,
                        onChange: (e) => setNovaUnidadeMedida({ ...novaUnidadeMedida, nome: e.target.value }),
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                        placeholder: "Ex: Quilograma, Unidade, Caixa",
                        required: true
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-8", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    variant: "primary",
                    fullWidth: true,
                    isLoading: isLoadingUnidadeMedida,
                    children: "Salvar"
                  }
                ) })
              ] })
            ] })
          }
        )
      }
    ) })
  ] });
};
const DeleteConfirmation$4 = ({
  isOpen,
  onClose,
  onConfirm,
  title,
  message
}) => {
  if (!isOpen) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    motion.div,
    {
      initial: { opacity: 0 },
      animate: { opacity: 1 },
      exit: { opacity: 0 },
      className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        motion.div,
        {
          initial: { scale: 0.95, opacity: 0 },
          animate: { scale: 1, opacity: 1 },
          exit: { scale: 0.95, opacity: 0 },
          className: "bg-background-card p-6 rounded-lg shadow-xl max-w-sm mx-4 w-full",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold text-white mb-2", children: title }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: message }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "button",
                  variant: "text",
                  className: "flex-1",
                  onClick: onClose,
                  children: "Cancelar"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "button",
                  variant: "primary",
                  className: "flex-1 !bg-red-500 hover:!bg-red-600",
                  onClick: onConfirm,
                  children: "Excluir"
                }
              )
            ] })
          ]
        }
      )
    }
  );
};
const AdicionaisPage = () => {
  const [showSidebar, setShowSidebar] = reactExports.useState(false);
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [isDataReady, setIsDataReady] = reactExports.useState(false);
  const [opcoes, setOpcoes] = reactExports.useState([]);
  const [editingOpcao, setEditingOpcao] = reactExports.useState(null);
  const [novaOpcao, setNovaOpcao] = reactExports.useState({ nome: "", quantidade_minima: 0 });
  const [quantidadeMinimaInput, setQuantidadeMinimaInput] = reactExports.useState("");
  const [novoItem, setNovoItem] = reactExports.useState({ nome: "", preco: "" });
  const [precoFormatado, setPrecoFormatado] = reactExports.useState("");
  const [isAddingItem, setIsAddingItem] = reactExports.useState(false);
  const [editingItem, setEditingItem] = reactExports.useState(null);
  const [deleteConfirmation, setDeleteConfirmation] = reactExports.useState({
    isOpen: false,
    itemId: "",
    itemType: "opcao",
    title: "",
    message: ""
  });
  reactExports.useEffect(() => {
    loadData();
  }, []);
  const formatarValorMonetario = (valor) => {
    let valorLimpo = valor.replace(/\D/g, "");
    if (!valorLimpo) return "";
    const valorNumerico = parseInt(valorLimpo) / 100;
    return valorNumerico.toLocaleString("pt-BR", {
      style: "currency",
      currency: "BRL"
    });
  };
  const desformatarValorMonetario = (valorFormatado) => {
    const valorLimpo = valorFormatado.replace(/[^\d,\.]/g, "");
    const valorComPonto = valorLimpo.replace(",", ".");
    const valorNumerico = parseFloat(valorComPonto);
    return isNaN(valorNumerico) ? 0 : valorNumerico;
  };
  const handlePrecoChange = (e) => {
    const valor = e.target.value;
    if (!valor) {
      setPrecoFormatado("");
      setNovoItem({ ...novoItem, preco: "" });
      return;
    }
    const valorFormatado = formatarValorMonetario(valor);
    setPrecoFormatado(valorFormatado);
    const valorNumerico = desformatarValorMonetario(valorFormatado);
    setNovoItem({ ...novoItem, preco: valorNumerico.toString() });
  };
  const handleQuantidadeMinimaChange = (e) => {
    const valor = e.target.value;
    setQuantidadeMinimaInput(valor);
    if (valor === "") {
      setNovaOpcao({ ...novaOpcao, quantidade_minima: 0 });
      return;
    }
    const valorNumerico = parseInt(valor);
    if (!isNaN(valorNumerico) && valorNumerico >= 0) {
      setNovaOpcao({ ...novaOpcao, quantidade_minima: valorNumerico });
    }
  };
  const loadData = async () => {
    try {
      setIsLoading(true);
      await new Promise((resolve2) => setTimeout(resolve2, 300));
      const { data: userData, error: userError } = await supabase.auth.getUser();
      if (userError) {
        console.error("Erro ao obter usuário:", userError);
        showMessage("error", "Erro de autenticação");
        return;
      }
      if (!userData.user) {
        console.error("Usuário não autenticado");
        showMessage("error", "Usuário não autenticado");
        return;
      }
      console.log("Usuário logado:", userData.user.id);
      const { data: usuarioData, error: usuarioError } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (usuarioError) {
        console.error("Erro ao buscar dados do usuário:", usuarioError);
        showMessage("error", "Erro ao buscar dados do usuário");
        return;
      }
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        console.error("Empresa não encontrada para o usuário");
        showMessage("error", "Empresa não encontrada");
        return;
      }
      console.log("Empresa ID:", usuarioData.empresa_id);
      const { data: opcoesData, error: opcoesError } = await supabase.from("opcoes_adicionais").select(`
          *,
          itens:opcoes_adicionais_itens(*)
        `).eq("empresa_id", usuarioData.empresa_id).eq("deletado", false).order("nome");
      if (opcoesError) {
        console.error("Erro ao carregar opções adicionais:", opcoesError);
        showMessage("error", "Erro ao carregar opções adicionais");
        return;
      }
      console.log("Dados brutos das opções:", opcoesData);
      const opcoesFiltered = (opcoesData == null ? void 0 : opcoesData.map((opcao) => {
        var _a2;
        return {
          ...opcao,
          itens: ((_a2 = opcao.itens) == null ? void 0 : _a2.filter((item) => !item.deletado)) || []
        };
      })) || [];
      console.log("Opções filtradas:", opcoesFiltered);
      setOpcoes(opcoesFiltered);
      if (opcoesFiltered.length === 0) {
        console.log("Nenhuma opção adicional encontrada para esta empresa");
      }
    } catch (error) {
      console.error("Error loading data:", error);
      showMessage("error", "Erro ao carregar dados: " + error.message);
    } finally {
      setIsDataReady(true);
      setIsLoading(false);
    }
  };
  const handleSubmitOpcao = async (e) => {
    e.preventDefault();
    if (!novaOpcao.nome.trim()) return;
    setIsLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      if (editingOpcao) {
        const { error } = await supabase.from("opcoes_adicionais").update({
          nome: novaOpcao.nome,
          quantidade_minima: novaOpcao.quantidade_minima
        }).eq("id", editingOpcao.id);
        if (error) throw error;
        showMessage("success", "Opção atualizada com sucesso!");
      } else {
        const { error } = await supabase.from("opcoes_adicionais").insert([{
          nome: novaOpcao.nome,
          quantidade_minima: novaOpcao.quantidade_minima,
          empresa_id: usuarioData.empresa_id
        }]);
        if (error) throw error;
        showMessage("success", "Opção criada com sucesso!");
      }
      setNovaOpcao({ nome: "", quantidade_minima: 0 });
      setQuantidadeMinimaInput("");
      setEditingOpcao(null);
      setShowSidebar(false);
      loadData();
    } catch (error) {
      showMessage("error", "Erro ao salvar opção: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };
  const handleSubmitItem = async (e) => {
    e.preventDefault();
    if (!novoItem.nome.trim()) return;
    const preco = novoItem.preco === "" ? 0 : parseFloat(novoItem.preco);
    if (isNaN(preco)) return;
    setIsLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      if (editingItem) {
        const { error } = await supabase.from("opcoes_adicionais_itens").update({
          nome: novoItem.nome,
          preco
        }).eq("id", editingItem.id);
        if (error) throw error;
        setNovoItem({ nome: "", preco: "" });
        setPrecoFormatado("");
        setEditingItem(null);
        setIsAddingItem(false);
        setEditingOpcao(null);
        setShowSidebar(false);
        loadData();
        showMessage("success", "Item atualizado com sucesso!");
      } else {
        const { error } = await supabase.from("opcoes_adicionais_itens").insert([{
          nome: novoItem.nome,
          preco,
          opcao_id: editingOpcao.id,
          empresa_id: usuarioData.empresa_id
        }]);
        if (error) throw error;
        setNovoItem({ nome: "", preco: "" });
        setPrecoFormatado("");
        setIsAddingItem(false);
        setEditingOpcao(null);
        setShowSidebar(false);
        loadData();
        showMessage("success", "Item adicionado com sucesso!");
      }
    } catch (error) {
      showMessage("error", `Erro ao ${editingItem ? "atualizar" : "adicionar"} item: ` + error.message);
    } finally {
      setIsLoading(false);
    }
  };
  const handleEditItem = (item, opcao) => {
    setEditingOpcao(opcao);
    setEditingItem(item);
    setNovoItem({
      nome: item.nome,
      preco: item.preco.toString()
    });
    const precoFormatado2 = (item.preco * 100).toString().padStart(3, "0");
    setPrecoFormatado(formatarValorMonetario(precoFormatado2));
    setIsAddingItem(true);
    setShowSidebar(true);
  };
  const handleDelete = async (id2, type, nome) => {
    setDeleteConfirmation({
      isOpen: true,
      itemId: id2,
      itemType: type,
      title: `Excluir ${type === "opcao" ? "Opção" : "Item"}`,
      message: `Tem certeza que deseja excluir ${type === "opcao" ? "a opção" : "o item"} "${nome}"? Você poderá restaurá-${type === "opcao" ? "la" : "lo"} posteriormente se necessário.`
    });
  };
  const handleConfirmDelete = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const now2 = (/* @__PURE__ */ new Date()).toISOString();
      const { itemId, itemType } = deleteConfirmation;
      const table = itemType === "opcao" ? "opcoes_adicionais" : "opcoes_adicionais_itens";
      const { error } = await supabase.from(table).update({
        deletado: true,
        deletado_em: now2,
        deletado_por: userData.user.id
      }).eq("id", itemId);
      if (error) throw error;
      await loadData();
      showMessage("success", `${itemType === "opcao" ? "Opção" : "Item"} excluído com sucesso!`);
    } catch (error) {
      showMessage("error", "Erro ao excluir item: " + error.message);
    } finally {
      setDeleteConfirmation((prev) => ({ ...prev, isOpen: false }));
    }
  };
  const renderSkeletonCards = () => {
    return Array(3).fill(0).map((_2, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: "bg-background-card rounded-lg border border-gray-800",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 border-b border-gray-800 flex items-center justify-between", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `h-6 bg-gray-700 rounded animate-pulse mb-2 ${index2 % 3 === 0 ? "w-32" : index2 % 3 === 1 ? "w-40" : "w-28"}` }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-20 bg-gray-600 rounded animate-pulse" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-8 w-24 bg-gray-700 rounded animate-pulse" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-gray-700 rounded animate-pulse" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-gray-700 rounded animate-pulse" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-3", children: Array(2).fill(0).map((_22, itemIndex) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "div",
            {
              className: "flex items-center justify-between p-3 bg-gray-800/50 rounded-lg",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `h-4 bg-gray-700 rounded animate-pulse ${itemIndex % 2 === 0 ? "w-24" : "w-32"}` }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-16 bg-gray-700 rounded animate-pulse" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-gray-700 rounded animate-pulse" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-gray-700 rounded animate-pulse" })
                ] })
              ]
            },
            itemIndex
          )) }) })
        ]
      },
      index2
    ));
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "max-w-6xl mx-auto", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl font-semibold text-white", children: "Opções Adicionais" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mt-1", children: "Gerencie as opções adicionais dos produtos" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          type: "button",
          variant: "primary",
          onClick: () => {
            setEditingOpcao(null);
            setNovaOpcao({ nome: "", quantidade_minima: 0 });
            setQuantidadeMinimaInput("");
            setIsAddingItem(false);
            setShowSidebar(true);
          },
          children: "+ Adicionar Opção"
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-6", children: !isDataReady ? renderSkeletonCards() : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      opcoes.map((opcao) => {
        var _a2;
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "div",
          {
            className: "bg-background-card rounded-lg border border-gray-800",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 border-b border-gray-800 flex items-center justify-between", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white", children: opcao.nome }),
                  opcao.quantidade_minima > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-primary-400 mt-1", children: [
                    "Mínimo: ",
                    opcao.quantidade_minima,
                    " ",
                    opcao.quantidade_minima === 1 ? "item" : "itens"
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "button",
                    {
                      onClick: () => {
                        setEditingOpcao(opcao);
                        setNovoItem({ nome: "", preco: "" });
                        setPrecoFormatado("");
                        setIsAddingItem(true);
                        setEditingItem(null);
                        setShowSidebar(true);
                      },
                      className: "flex items-center gap-1 px-3 py-1.5 text-sm bg-primary-500/10 rounded-md text-primary-400 hover:text-primary-300 hover:bg-primary-500/20 transition-colors",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 14 }),
                        "Adicionar Item"
                      ]
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      onClick: () => {
                        setEditingOpcao(opcao);
                        setNovaOpcao({
                          nome: opcao.nome,
                          quantidade_minima: opcao.quantidade_minima || 0
                        });
                        setQuantidadeMinimaInput(opcao.quantidade_minima > 0 ? opcao.quantidade_minima.toString() : "");
                        setIsAddingItem(false);
                        setShowSidebar(true);
                      },
                      className: "p-1 text-gray-400 hover:text-white transition-colors",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Pencil, { size: 16 })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      onClick: () => handleDelete(opcao.id, "opcao", opcao.nome),
                      className: "p-1 text-red-400 hover:text-red-300 transition-colors",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 16 })
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4", children: ((_a2 = opcao.itens) == null ? void 0 : _a2.length) > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-3", children: opcao.itens.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "div",
                {
                  className: "flex items-center justify-between p-3 bg-gray-800/50 rounded-lg",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: item.nome }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-primary-400", children: [
                        "R$ ",
                        item.preco.toFixed(2)
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => handleEditItem(item, opcao),
                          className: "p-1 text-gray-400 hover:text-white transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Pencil, { size: 16 })
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => handleDelete(item.id, "item", item.nome),
                          className: "text-red-400 hover:text-red-300 transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 16 })
                        }
                      )
                    ] })
                  ]
                },
                item.id
              )) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center py-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhum item cadastrado" }) }) })
            ]
          },
          opcao.id
        );
      }),
      opcoes.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg p-8 text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: "Nenhuma opção cadastrada" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: "Crie sua primeira opção adicional para começar." }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            type: "button",
            variant: "primary",
            className: "mx-auto",
            onClick: () => {
              setEditingOpcao(null);
              setNovaOpcao({ nome: "", quantidade_minima: 0 });
              setQuantidadeMinimaInput("");
              setIsAddingItem(false);
              setShowSidebar(true);
            },
            children: "+ Adicionar Opção"
          }
        )
      ] })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showSidebar && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { opacity: 0 },
          animate: { opacity: 1 },
          exit: { opacity: 0 },
          className: "fixed inset-0 bg-black/50 z-40",
          onClick: () => {
            setShowSidebar(false);
            setIsAddingItem(false);
            setEditingItem(null);
            setPrecoFormatado("");
            setQuantidadeMinimaInput("");
          }
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { x: "100%" },
          animate: { x: 0 },
          exit: { x: "100%" },
          transition: { type: "tween", duration: 0.3 },
          className: "fixed right-0 top-0 h-screen w-full max-w-md bg-background-card border-l border-gray-800 z-50 overflow-y-auto custom-scrollbar",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: editingOpcao ? isAddingItem ? editingItem ? "Editar Item" : "Novo Item" : "Editar Opção" : "Nova Opção" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => {
                    setShowSidebar(false);
                    setIsAddingItem(false);
                    setEditingItem(null);
                    setPrecoFormatado("");
                    setQuantidadeMinimaInput("");
                  },
                  className: "text-gray-400 hover:text-white transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 24 })
                }
              )
            ] }),
            (!editingOpcao || editingOpcao && !isAddingItem) && /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmitOpcao, className: "space-y-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Nome da Opção" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: novaOpcao.nome,
                    onChange: (e) => setNovaOpcao({ ...novaOpcao, nome: e.target.value }),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Digite o nome da opção"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mt-4 mb-2", children: "Quantidade Mínima" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: quantidadeMinimaInput,
                    onChange: handleQuantidadeMinimaChange,
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "0"
                  }
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-400 mt-1", children: "Se maior que 0, o cliente deverá selecionar pelo menos esta quantidade de itens desta opção." })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    className: "flex-1",
                    onClick: () => {
                      setShowSidebar(false);
                      setIsAddingItem(false);
                      setEditingItem(null);
                      setQuantidadeMinimaInput("");
                    },
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    variant: "primary",
                    className: "flex-1",
                    disabled: isLoading,
                    children: isLoading ? "Salvando..." : editingOpcao ? "Salvar" : "Criar"
                  }
                )
              ] })
            ] }),
            editingOpcao && isAddingItem && /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmitItem, className: "space-y-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Nome do Item" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: novoItem.nome,
                    onChange: (e) => setNovoItem({ ...novoItem, nome: e.target.value }),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Digite o nome do item"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Preço" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: precoFormatado,
                    onChange: handlePrecoChange,
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "R$ 0,00"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    className: "flex-1",
                    onClick: () => {
                      setShowSidebar(false);
                      setIsAddingItem(false);
                      setEditingItem(null);
                      setPrecoFormatado("");
                    },
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    variant: "primary",
                    className: "flex-1",
                    disabled: isLoading,
                    children: isLoading ? "Salvando..." : editingItem ? "Salvar Item" : "Adicionar Item"
                  }
                )
              ] })
            ] })
          ] })
        }
      )
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      DeleteConfirmation$4,
      {
        isOpen: deleteConfirmation.isOpen,
        onClose: () => setDeleteConfirmation((prev) => ({ ...prev, isOpen: false })),
        onConfirm: handleConfirmDelete,
        title: deleteConfirmation.title,
        message: deleteConfirmation.message
      }
    )
  ] });
};
const DeleteConfirmation$3 = ({
  isOpen,
  onClose,
  onConfirm,
  title,
  message
}) => {
  if (!isOpen) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
    motion.div,
    {
      initial: { opacity: 0, scale: 0.9 },
      animate: { opacity: 1, scale: 1 },
      exit: { opacity: 0, scale: 0.9 },
      className: "bg-background-card p-6 rounded-lg shadow-lg max-w-md w-full",
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white mb-2", children: title }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: message }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              type: "button",
              variant: "text",
              className: "flex-1",
              onClick: onClose,
              children: "Cancelar"
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              type: "button",
              variant: "danger",
              className: "flex-1",
              onClick: onConfirm,
              children: "Excluir"
            }
          )
        ] })
      ]
    }
  ) });
};
const UnidadeMedidaPage = () => {
  const [showSidebar, setShowSidebar] = reactExports.useState(false);
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [isDataReady, setIsDataReady] = reactExports.useState(false);
  const [unidades, setUnidades] = reactExports.useState([]);
  const [editingUnidade, setEditingUnidade] = reactExports.useState(null);
  const [formData, setFormData] = reactExports.useState({
    sigla: "",
    nome: ""
  });
  const [deleteConfirmation, setDeleteConfirmation] = reactExports.useState({
    isOpen: false,
    id: "",
    title: "",
    message: ""
  });
  reactExports.useEffect(() => {
    loadUnidades();
  }, []);
  const loadUnidades = async () => {
    try {
      await new Promise((resolve2) => setTimeout(resolve2, 800));
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data, error } = await supabase.from("unidade_medida").select("*").eq("empresa_id", usuarioData.empresa_id).order("sigla", { ascending: true });
      if (error) throw error;
      setUnidades(data || []);
    } catch (error) {
      console.error("Erro ao carregar unidades de medida:", error);
      showMessage("error", "Erro ao carregar unidades de medida");
    } finally {
      setIsDataReady(true);
    }
  };
  const handleEditUnidade = (unidade) => {
    setEditingUnidade(unidade);
    setFormData({
      sigla: unidade.sigla,
      nome: unidade.nome
    });
    setShowSidebar(true);
  };
  const handleDeleteClick = (unidade) => {
    setDeleteConfirmation({
      isOpen: true,
      id: unidade.id,
      title: "Excluir Unidade de Medida",
      message: `Tem certeza que deseja excluir a unidade "${unidade.sigla} - ${unidade.nome}"? Esta ação não pode ser desfeita.`
    });
  };
  const handleConfirmDelete = async () => {
    try {
      setIsLoading(true);
      const { error } = await supabase.from("unidade_medida").delete().eq("id", deleteConfirmation.id);
      if (error) throw error;
      setUnidades(unidades.filter((u2) => u2.id !== deleteConfirmation.id));
      showMessage("success", "Unidade de medida excluída com sucesso");
    } catch (error) {
      console.error("Erro ao excluir unidade de medida:", error);
      showMessage("error", "Erro ao excluir unidade de medida");
    } finally {
      setIsLoading(false);
      setDeleteConfirmation((prev) => ({ ...prev, isOpen: false }));
    }
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formData.sigla || !formData.nome) {
      showMessage("error", "Preencha todos os campos obrigatórios");
      return;
    }
    try {
      setIsLoading(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      if (editingUnidade) {
        const { error } = await supabase.from("unidade_medida").update({
          sigla: formData.sigla,
          nome: formData.nome
        }).eq("id", editingUnidade.id);
        if (error) throw error;
        setUnidades(unidades.map(
          (u2) => u2.id === editingUnidade.id ? { ...u2, sigla: formData.sigla, nome: formData.nome } : u2
        ));
        showMessage("success", "Unidade de medida atualizada com sucesso");
      } else {
        const { data, error } = await supabase.from("unidade_medida").insert({
          sigla: formData.sigla,
          nome: formData.nome,
          empresa_id: usuarioData.empresa_id
        }).select();
        if (error) throw error;
        if (data && data.length > 0) {
          setUnidades([...unidades, data[0]]);
        }
        showMessage("success", "Unidade de medida criada com sucesso");
      }
      setShowSidebar(false);
      setFormData({ sigla: "", nome: "" });
      setEditingUnidade(null);
    } catch (error) {
      console.error("Erro ao salvar unidade de medida:", error);
      showMessage("error", "Erro ao salvar unidade de medida");
    } finally {
      setIsLoading(false);
    }
  };
  const renderSkeletonCards = () => {
    return Array(4).fill(0).map((_2, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        className: "bg-background-card p-4 rounded-lg border border-gray-800",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-2 rounded-lg bg-gray-700 animate-pulse", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-5 h-5 bg-gray-600 rounded" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `h-5 bg-gray-700 rounded animate-pulse mb-1 ${index2 % 3 === 0 ? "w-12" : index2 % 3 === 1 ? "w-16" : "w-10"}` }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `h-4 bg-gray-600 rounded animate-pulse ${index2 % 3 === 0 ? "w-24" : index2 % 3 === 1 ? "w-32" : "w-20"}` })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-9 h-9 bg-gray-700 rounded-lg animate-pulse" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-9 h-9 bg-gray-700 rounded-lg animate-pulse" })
          ] })
        ] })
      },
      index2
    ));
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "max-w-6xl mx-auto", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl font-semibold text-white", children: "Unidades de Medida" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mt-1", children: "Gerencie as unidades de medida para seus produtos" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          type: "button",
          variant: "primary",
          onClick: () => {
            setEditingUnidade(null);
            setFormData({ sigla: "", nome: "" });
            setShowSidebar(true);
          },
          children: "+ Adicionar Unidade"
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid gap-6", children: !isDataReady ? renderSkeletonCards() : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      unidades.map((unidade) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          className: "bg-background-card p-4 rounded-lg border border-gray-800",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-2 rounded-lg bg-primary-500/10", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Ruler, { size: 20, className: "text-primary-400" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: unidade.sigla }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: unidade.nome })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => handleEditUnidade(unidade),
                  className: "p-2 rounded-lg hover:bg-gray-800 text-gray-400 hover:text-white transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Pencil, { size: 18 })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => handleDeleteClick(unidade),
                  className: "p-2 rounded-lg hover:bg-gray-800 text-gray-400 hover:text-white transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 18 })
                }
              )
            ] })
          ] })
        },
        unidade.id
      )),
      unidades.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg p-8 text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-primary-500/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Ruler, { size: 24, className: "text-primary-400" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: "Nenhuma unidade de medida cadastrada" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: "Cadastre sua primeira unidade de medida para começar." }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            type: "button",
            variant: "primary",
            className: "mx-auto",
            onClick: () => {
              setEditingUnidade(null);
              setFormData({ sigla: "", nome: "" });
              setShowSidebar(true);
            },
            children: "+ Adicionar Unidade"
          }
        )
      ] })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showSidebar && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          className: "fixed inset-0 bg-black/50 z-40",
          onClick: () => setShowSidebar(false)
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { x: "100%" },
          animate: { x: 0 },
          exit: { x: "100%" },
          transition: { duration: 0.3, ease: "easeInOut" },
          className: "fixed right-0 top-0 h-full w-full max-w-md bg-background-card border-l border-gray-800 z-50 overflow-y-auto custom-scrollbar",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: editingUnidade ? "Editar Unidade" : "Nova Unidade" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => setShowSidebar(false),
                  className: "p-2 rounded-lg hover:bg-gray-800 text-gray-400 hover:text-white transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("form", { onSubmit: handleSubmit, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                  "Sigla ",
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: formData.sigla,
                    onChange: (e) => setFormData({ ...formData, sigla: e.target.value }),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Ex: KG, UN, CX",
                    required: true
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                  "Nome ",
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: formData.nome,
                    onChange: (e) => setFormData({ ...formData, nome: e.target.value }),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Ex: Quilograma, Unidade, Caixa",
                    required: true
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    className: "flex-1",
                    onClick: () => setShowSidebar(false),
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    variant: "primary",
                    className: "flex-1",
                    disabled: isLoading,
                    children: isLoading ? "Salvando..." : editingUnidade ? "Salvar" : "Criar"
                  }
                )
              ] })
            ] }) })
          ] })
        }
      )
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      DeleteConfirmation$3,
      {
        isOpen: deleteConfirmation.isOpen,
        onClose: () => setDeleteConfirmation((prev) => ({ ...prev, isOpen: false })),
        onConfirm: handleConfirmDelete,
        title: deleteConfirmation.title,
        message: deleteConfirmation.message
      }
    )
  ] });
};
const ClientesPage = () => {
  const [isLoading, setIsLoading] = reactExports.useState(true);
  const [clientes, setClientes] = reactExports.useState([]);
  const [filteredClientes, setFilteredClientes] = reactExports.useState([]);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [showFilters, setShowFilters] = reactExports.useState(false);
  const [empresaFilter, setEmpresaFilter] = reactExports.useState("todas");
  const [tipoClienteFilter, setTipoClienteFilter] = reactExports.useState("todos");
  const [empresas, setEmpresas] = reactExports.useState([]);
  const [showSidebar, setShowSidebar] = reactExports.useState(false);
  const [editingCliente, setEditingCliente] = reactExports.useState(null);
  const [isCnpjLoading, setIsCnpjLoading] = reactExports.useState(false);
  const [formData, setFormData] = reactExports.useState({
    tipo_documento: "CNPJ",
    documento: "",
    razao_social: "",
    nome_fantasia: "",
    nome: "",
    telefones: [],
    emails: [],
    cep: "",
    endereco: "",
    numero: "",
    complemento: "",
    bairro: "",
    cidade: "",
    estado: "",
    empresa_id: "",
    indicador_ie: 9,
    codigo_municipio: "",
    inscricao_estadual: "",
    // Tipos de cliente
    is_cliente: true,
    is_funcionario: false,
    is_vendedor: false,
    is_fornecedor: false,
    is_transportadora: false,
    // Observações
    observacao_nfe: "",
    observacao_interna: ""
  });
  const [activeTab, setActiveTab] = reactExports.useState("dados-gerais");
  const [descontosPrazo, setDescontosPrazo] = reactExports.useState([]);
  const [descontosValor, setDescontosValor] = reactExports.useState([]);
  const [novoDescontoPrazo, setNovoDescontoPrazo] = reactExports.useState({
    prazo_dias: 30,
    percentual: 0,
    tipo: "desconto"
  });
  const [prazoPercentualInput, setPrazoPercentualInput] = reactExports.useState("0");
  const [prazoDiasInput, setPrazoDiasInput] = reactExports.useState("30");
  const [novoDescontoValor, setNovoDescontoValor] = reactExports.useState({
    valor_minimo: 0,
    percentual: 0,
    tipo: "desconto"
  });
  const [valorPercentualInput, setValorPercentualInput] = reactExports.useState("0");
  const [valorMinimoInput, setValorMinimoInput] = reactExports.useState("0");
  const [novoTelefone, setNovoTelefone] = reactExports.useState({
    numero: "",
    tipo: "Celular",
    whatsapp: false
  });
  const [novoEmail, setNovoEmail] = reactExports.useState("");
  const [formErrors, setFormErrors] = reactExports.useState({
    nome: "",
    telefone: "",
    email: ""
  });
  const [isSubmitting, setIsSubmitting] = reactExports.useState(false);
  const [temPedidosVinculados, setTemPedidosVinculados] = reactExports.useState(false);
  const [nfeValidationModal, setNfeValidationModal] = reactExports.useState({
    isOpen: false,
    campo: "",
    valor: "",
    validationResult: { isValid: true, errors: [] }
  });
  reactExports.useEffect(() => {
    loadClientes();
    loadEmpresas();
  }, []);
  reactExports.useEffect(() => {
    if (empresas.length > 0 && !formData.empresa_id) {
      setFormData((prev) => ({
        ...prev,
        empresa_id: empresas[0].id
      }));
    }
  }, [empresas]);
  reactExports.useEffect(() => {
    applyFilters();
  }, [clientes, searchTerm, empresaFilter, tipoClienteFilter]);
  const loadEmpresas = async () => {
    try {
      const { data: empresasData } = await supabase.from("empresas").select("id, nome").order("nome");
      if (empresasData) {
        setEmpresas(empresasData);
      }
    } catch (error) {
      console.error("Erro ao carregar empresas:", error);
    }
  };
  const loadClientes = async () => {
    try {
      setIsLoading(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: clientesData, error } = await supabase.from("clientes").select("*").eq("empresa_id", usuarioData.empresa_id).or("deletado.is.null,deletado.eq.false").order("nome");
      console.log("Clientes encontrados:", clientesData == null ? void 0 : clientesData.length);
      if (error) throw error;
      if (clientesData && clientesData.length > 0) {
        const { data: empresasData } = await supabase.from("empresas").select("id, nome");
        const empresasMap = /* @__PURE__ */ new Map();
        if (empresasData) {
          empresasData.forEach((empresa) => {
            empresasMap.set(empresa.id, empresa.nome);
          });
        }
        const formattedClientes = clientesData.map((cliente) => ({
          ...cliente,
          empresa_nome: empresasMap.get(cliente.empresa_id) || "Empresa não encontrada"
        }));
        setClientes(formattedClientes);
        setFilteredClientes(formattedClientes);
      } else {
        setClientes([]);
        setFilteredClientes([]);
      }
    } catch (error) {
      console.error("Erro ao carregar clientes:", error);
      B.error("Erro ao carregar clientes");
    } finally {
      setIsLoading(false);
    }
  };
  const applyFilters = () => {
    let filtered = [...clientes];
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase();
      filtered = filtered.filter(
        (cliente) => {
          var _a2, _b2, _c;
          return ((_a2 = cliente.nome) == null ? void 0 : _a2.toLowerCase().includes(searchLower)) || ((_b2 = cliente.telefone) == null ? void 0 : _b2.toLowerCase().includes(searchLower)) || cliente.emails && cliente.emails.some((email) => email.toLowerCase().includes(searchLower)) || ((_c = cliente.endereco) == null ? void 0 : _c.toLowerCase().includes(searchLower));
        }
      );
    }
    if (empresaFilter !== "todas") {
      filtered = filtered.filter((cliente) => cliente.empresa_id === empresaFilter);
    }
    if (tipoClienteFilter !== "todos") {
      filtered = filtered.filter((cliente) => {
        switch (tipoClienteFilter) {
          case "cliente":
            return cliente.is_cliente === true;
          case "funcionario":
            return cliente.is_funcionario === true;
          case "vendedor":
            return cliente.is_vendedor === true;
          case "fornecedor":
            return cliente.is_fornecedor === true;
          case "transportadora":
            return cliente.is_transportadora === true;
          default:
            return true;
        }
      });
    }
    setFilteredClientes(filtered);
  };
  const formatarTelefone2 = (telefone, tipo) => {
    if (!telefone) return "";
    const numeroLimpo = telefone.replace(/\D/g, "");
    if (tipo === "Fixo") {
      return numeroLimpo.replace(/^(\d{0,2})(\d{0,4})(\d{0,4}).*/, (_2, ddd, parte1, parte2) => {
        let resultado = "";
        if (ddd) resultado += `(${ddd}`;
        if (ddd && (parte1 || parte2)) resultado += ") ";
        if (parte1) resultado += parte1;
        if (parte1 && parte2) resultado += "-";
        if (parte2) resultado += parte2;
        return resultado;
      });
    } else if (tipo === "Celular") {
      return numeroLimpo.replace(/^(\d{0,2})(\d{0,1})(\d{0,4})(\d{0,4}).*/, (_2, ddd, digito9, parte1, parte2) => {
        let resultado = "";
        if (ddd) resultado += `(${ddd}`;
        if (ddd && (digito9 || parte1 || parte2)) resultado += ") ";
        if (digito9) resultado += `${digito9} `;
        if (parte1) resultado += parte1;
        if (parte1 && parte2) resultado += "-";
        if (parte2) resultado += parte2;
        return resultado;
      });
    } else {
      if (numeroLimpo.length <= 10) {
        return numeroLimpo.replace(/(\d{2})(\d{4})(\d{4})/, "($1) $2-$3");
      } else {
        return numeroLimpo.replace(/(\d{2})(\d{1})(\d{4})(\d{4})/, "($1) $2 $3-$4");
      }
    }
  };
  const handleNovoTelefoneChange = (e) => {
    const valor = e.target.value;
    setNovoTelefone({
      ...novoTelefone,
      numero: formatarTelefone2(valor, novoTelefone.tipo)
    });
  };
  const handleTipoTelefoneChange = (tipo) => {
    setNovoTelefone({
      ...novoTelefone,
      tipo,
      numero: novoTelefone.numero ? formatarTelefone2(novoTelefone.numero.replace(/\D/g, ""), tipo) : ""
    });
  };
  const handleWhatsappChange = (e) => {
    setNovoTelefone({
      ...novoTelefone,
      whatsapp: e.target.checked
    });
  };
  const adicionarTelefone = () => {
    if (!novoTelefone.numero) {
      B.error("Digite um número de telefone");
      return;
    }
    const numeroLimpo = novoTelefone.numero.replace(/\D/g, "");
    if (novoTelefone.tipo === "Fixo" && numeroLimpo.length !== 10 || novoTelefone.tipo === "Celular" && numeroLimpo.length !== 11) {
      B.error(`Número de ${novoTelefone.tipo.toLowerCase()} inválido`);
      return;
    }
    setFormData({
      ...formData,
      telefones: [...formData.telefones, { ...novoTelefone }]
    });
    setNovoTelefone({
      numero: "",
      tipo: "Celular",
      whatsapp: false
    });
  };
  const removerTelefone = (index2) => {
    const novosTelefones = [...formData.telefones];
    novosTelefones.splice(index2, 1);
    setFormData({
      ...formData,
      telefones: novosTelefones
    });
  };
  const validarEmail = (email) => {
    const emailRegex = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/;
    return emailRegex.test(email);
  };
  const adicionarEmail = () => {
    if (!novoEmail.trim()) {
      B.error("Digite um email");
      return;
    }
    if (!validarEmail(novoEmail)) {
      B.error("Email inválido");
      return;
    }
    if (formData.emails.includes(novoEmail.toLowerCase())) {
      B.error("Este email já foi adicionado");
      return;
    }
    setFormData({
      ...formData,
      emails: [...formData.emails, novoEmail.toLowerCase()]
    });
    setNovoEmail("");
  };
  const removerEmail = (index2) => {
    const novosEmails = [...formData.emails];
    novosEmails.splice(index2, 1);
    setFormData({
      ...formData,
      emails: novosEmails
    });
  };
  const formatarCNPJ = (cnpj) => {
    if (!cnpj) return "";
    const numeroLimpo = cnpj.replace(/\D/g, "");
    return numeroLimpo.replace(/^(\d{2})(\d)/, "$1.$2").replace(/^(\d{2})\.(\d{3})(\d)/, "$1.$2.$3").replace(/\.(\d{3})(\d)/, ".$1/$2").replace(/(\d{4})(\d)/, "$1-$2").substring(0, 18);
  };
  const formatarCPF = (cpf) => {
    if (!cpf) return "";
    const numeroLimpo = cpf.replace(/\D/g, "");
    return numeroLimpo.replace(/(\d{3})(\d)/, "$1.$2").replace(/(\d{3})(\d)/, "$1.$2").replace(/(\d{3})(\d{1,2})/, "$1-$2").substring(0, 14);
  };
  const handleDocumentoChange = (e) => {
    const valor = e.target.value;
    const formatado = formData.tipo_documento === "CNPJ" ? formatarCNPJ(valor) : formatarCPF(valor);
    setFormData({
      ...formData,
      documento: formatado
    });
  };
  const handleTipoDocumentoChange = (tipo) => {
    const indicadorIE = tipo === "CPF" ? 9 : 1;
    setFormData({
      ...formData,
      tipo_documento: tipo,
      documento: "",
      // Limpar documento ao mudar tipo
      indicador_ie: indicadorIE,
      inscricao_estadual: tipo === "CPF" ? "" : formData.inscricao_estadual
      // Limpar IE se for CPF
    });
  };
  const validarCNPJ = (cnpj) => {
    cnpj = cnpj.replace(/[^\d]+/g, "");
    if (cnpj === "") return false;
    if (cnpj.length !== 14) return false;
    if (cnpj === "00000000000000" || cnpj === "11111111111111" || cnpj === "22222222222222" || cnpj === "33333333333333" || cnpj === "44444444444444" || cnpj === "55555555555555" || cnpj === "66666666666666" || cnpj === "77777777777777" || cnpj === "88888888888888" || cnpj === "99999999999999") {
      return false;
    }
    let tamanho = cnpj.length - 2;
    let numeros = cnpj.substring(0, tamanho);
    const digitos = cnpj.substring(tamanho);
    let soma = 0;
    let pos = tamanho - 7;
    for (let i = tamanho; i >= 1; i--) {
      soma += parseInt(numeros.charAt(tamanho - i)) * pos--;
      if (pos < 2) pos = 9;
    }
    let resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
    if (resultado !== parseInt(digitos.charAt(0))) return false;
    tamanho = tamanho + 1;
    numeros = cnpj.substring(0, tamanho);
    soma = 0;
    pos = tamanho - 7;
    for (let i = tamanho; i >= 1; i--) {
      soma += parseInt(numeros.charAt(tamanho - i)) * pos--;
      if (pos < 2) pos = 9;
    }
    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
    if (resultado !== parseInt(digitos.charAt(1))) return false;
    return true;
  };
  const validarCPF = (cpf) => {
    cpf = cpf.replace(/[^\d]+/g, "");
    if (cpf === "") return false;
    if (cpf.length !== 11) return false;
    if (cpf === "00000000000" || cpf === "11111111111" || cpf === "22222222222" || cpf === "33333333333" || cpf === "44444444444" || cpf === "55555555555" || cpf === "66666666666" || cpf === "77777777777" || cpf === "88888888888" || cpf === "99999999999") {
      return false;
    }
    let add = 0;
    for (let i = 0; i < 9; i++) {
      add += parseInt(cpf.charAt(i)) * (10 - i);
    }
    let rev = 11 - add % 11;
    if (rev === 10 || rev === 11) rev = 0;
    if (rev !== parseInt(cpf.charAt(9))) return false;
    add = 0;
    for (let i = 0; i < 10; i++) {
      add += parseInt(cpf.charAt(i)) * (11 - i);
    }
    rev = 11 - add % 11;
    if (rev === 10 || rev === 11) rev = 0;
    if (rev !== parseInt(cpf.charAt(10))) return false;
    return true;
  };
  const buscarCodigoIBGE = async (cidade, estado) => {
    try {
      if (!cidade || !estado) return null;
      const response = await fetch(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${estado}/municipios`);
      const municipios = await response.json();
      const municipio = municipios.find(
        (m2) => m2.nome.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "") === cidade.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "")
      );
      return municipio ? municipio.id.toString() : null;
    } catch (error) {
      console.error("Erro ao buscar código IBGE:", error);
      return null;
    }
  };
  const buscarCNPJ = async () => {
    try {
      const cnpjLimpo = formData.documento.replace(/\D/g, "");
      if (cnpjLimpo.length !== 14) {
        B.error("CNPJ inválido. O CNPJ deve conter 14 dígitos.");
        return;
      }
      if (!validarCNPJ(cnpjLimpo)) {
        B.error("CNPJ inválido. Verifique os dígitos informados.");
        return;
      }
      setIsCnpjLoading(true);
      const response = await fetch(`https://brasilapi.com.br/api/cnpj/v1/${cnpjLimpo}`);
      const data = await response.json();
      if (response.ok) {
        const codigoIBGE = await buscarCodigoIBGE(data.municipio, data.uf);
        const indicadorIE = formData.tipo_documento === "CPF" ? 9 : 1;
        setFormData({
          ...formData,
          razao_social: data.razao_social || "",
          nome_fantasia: data.nome_fantasia || "",
          nome: data.nome_fantasia || data.razao_social || "",
          cep: data.cep ? data.cep.replace(/(\d{5})(\d{3})/, "$1-$2") : "",
          endereco: data.logradouro || "",
          numero: data.numero || "",
          complemento: data.complemento || "",
          bairro: data.bairro || "",
          cidade: data.municipio || "",
          estado: data.uf || "",
          codigo_municipio: codigoIBGE || "",
          indicador_ie: indicadorIE
        });
        if (codigoIBGE) {
          B.success("Dados do CNPJ e código IBGE carregados com sucesso!");
        } else {
          B.success("Dados do CNPJ carregados! Código IBGE não encontrado automaticamente.");
        }
      } else {
        B.error(data.message || "CNPJ não encontrado");
      }
    } catch (error) {
      console.error("Erro ao buscar CNPJ:", error);
      B.error("Erro ao buscar CNPJ. Tente novamente.");
    } finally {
      setIsCnpjLoading(false);
    }
  };
  const formatarCep = (cep) => {
    const numeroLimpo = cep.replace(/\D/g, "");
    return numeroLimpo.replace(/^(\d{2})(\d{3})(\d{3})$/, "$1.$2-$3");
  };
  const handleCepChange = (e) => {
    const valor = e.target.value;
    setFormData({
      ...formData,
      cep: formatarCep(valor)
    });
  };
  const buscarCep = async () => {
    try {
      const cepLimpo = formData.cep.replace(/\D/g, "");
      if (cepLimpo.length !== 8) {
        B.error("CEP inválido. O CEP deve conter 8 dígitos.");
        return;
      }
      const response = await fetch(`https://viacep.com.br/ws/${cepLimpo}/json/`);
      const data = await response.json();
      if (data.erro) {
        B.error("CEP não encontrado.");
        return;
      }
      const codigoIBGE = await buscarCodigoIBGE(data.localidade, data.uf);
      setFormData({
        ...formData,
        endereco: data.logradouro || "",
        bairro: data.bairro || "",
        cidade: data.localidade || "",
        estado: data.uf || "",
        codigo_municipio: codigoIBGE || ""
      });
      if (codigoIBGE) {
        B.success("Endereço e código IBGE encontrados com sucesso!");
      } else {
        B.success("Endereço encontrado! Código IBGE não encontrado automaticamente.");
      }
    } catch (error) {
      console.error("Erro ao buscar CEP:", error);
      B.error("Erro ao buscar CEP. Tente novamente.");
    }
  };
  const formatarData = (dataString) => {
    const data = new Date(dataString);
    return data.toLocaleDateString("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      year: "2-digit"
    });
  };
  const validateForm = () => {
    let valid = true;
    const errors = {
      nome: "",
      telefone: "",
      email: ""
    };
    if (!formData.nome.trim()) {
      errors.nome = "Nome é obrigatório";
      valid = false;
    }
    if (formData.telefones.length === 0) {
      errors.telefone = "Adicione pelo menos um telefone";
      valid = false;
    }
    if (formData.emails.length > 0) {
      const emailsInvalidos = formData.emails.filter((email) => !validarEmail(email));
      if (emailsInvalidos.length > 0) {
        errors.email = "Um ou mais emails são inválidos";
        valid = false;
      }
    }
    setFormErrors(errors);
    return valid;
  };
  const handleSubmit = async (e) => {
    var _a2;
    e.preventDefault();
    if (!validateForm()) return;
    if (formData.nome && formData.nome.trim() !== "") {
      const nomeValidation = validarNomeCliente(formData.nome);
      if (!nomeValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Nome do Cliente",
          valor: formData.nome,
          validationResult: nomeValidation
        });
        return;
      }
    }
    if (formData.tipo_documento === "CNPJ" && formData.razao_social && formData.razao_social.trim() !== "") {
      const razaoValidation = validarRazaoSocial(formData.razao_social);
      if (!razaoValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Razão Social",
          valor: formData.razao_social,
          validationResult: razaoValidation
        });
        return;
      }
    }
    if (formData.nome_fantasia && formData.nome_fantasia.trim() !== "") {
      const fantasiaValidation = validarNomeFantasia(formData.nome_fantasia);
      if (!fantasiaValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Nome Fantasia",
          valor: formData.nome_fantasia,
          validationResult: fantasiaValidation
        });
        return;
      }
    }
    if (formData.observacao_nfe && formData.observacao_nfe.trim() !== "") {
      const observacaoValidation = validarObservacaoNFe(formData.observacao_nfe);
      if (!observacaoValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Observação NFe",
          valor: formData.observacao_nfe,
          validationResult: observacaoValidation
        });
        return;
      }
    }
    if (formData.endereco && formData.endereco.trim() !== "") {
      const enderecoValidation = validarEndereco(formData.endereco, "Endereço");
      if (!enderecoValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Endereço",
          valor: formData.endereco,
          validationResult: enderecoValidation
        });
        return;
      }
    }
    if (formData.bairro && formData.bairro.trim() !== "") {
      const bairroValidation = validarBairro(formData.bairro);
      if (!bairroValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Bairro",
          valor: formData.bairro,
          validationResult: bairroValidation
        });
        return;
      }
    }
    if (formData.cidade && formData.cidade.trim() !== "") {
      const cidadeValidation = validarCidade(formData.cidade);
      if (!cidadeValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Cidade",
          valor: formData.cidade,
          validationResult: cidadeValidation
        });
        return;
      }
    }
    if (formData.complemento && formData.complemento.trim() !== "") {
      const complementoValidation = validarComplemento(formData.complemento);
      if (!complementoValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Complemento",
          valor: formData.complemento,
          validationResult: complementoValidation
        });
        return;
      }
    }
    setIsSubmitting(true);
    try {
      if (formData.documento) {
        const documentoLimpo = formData.documento.replace(/\D/g, "");
        if (formData.tipo_documento === "CNPJ") {
          if (!validarCNPJ(documentoLimpo)) {
            B.error("CNPJ inválido. Verifique os dígitos informados.");
            setIsSubmitting(false);
            return;
          }
        } else {
          if (!validarCPF(documentoLimpo)) {
            B.error("CPF inválido. Verifique os dígitos informados.");
            setIsSubmitting(false);
            return;
          }
        }
      }
      const telefonesParaSalvar = formData.telefones.map((tel) => ({
        ...tel,
        numero: tel.numero.replace(/\D/g, "")
      }));
      const telefonePrincipal = telefonesParaSalvar.length > 0 ? telefonesParaSalvar[0].numero : "";
      const clienteData = {
        tipo_documento: formData.tipo_documento,
        documento: formData.documento ? formData.documento.replace(/\D/g, "") : null,
        razao_social: formData.tipo_documento === "CNPJ" ? formData.razao_social || null : null,
        nome_fantasia: formData.nome_fantasia || null,
        nome: formData.nome,
        telefone: telefonePrincipal,
        telefones: telefonesParaSalvar,
        emails: formData.emails.length > 0 ? formData.emails : [],
        // Salvar cada campo de endereço separadamente
        endereco: formData.endereco || null,
        numero: formData.numero || null,
        complemento: formData.complemento || null,
        bairro: formData.bairro || null,
        cidade: formData.cidade || null,
        estado: formData.estado || null,
        cep: formData.cep ? formData.cep.replace(/\D/g, "") : null,
        // Campos NFe
        indicador_ie: formData.indicador_ie,
        // Tipos de cliente
        is_cliente: formData.is_cliente,
        is_funcionario: formData.is_funcionario,
        is_vendedor: formData.is_vendedor,
        is_fornecedor: formData.is_fornecedor,
        is_transportadora: formData.is_transportadora,
        codigo_municipio: formData.codigo_municipio || null,
        inscricao_estadual: formData.inscricao_estadual || null,
        // Observações
        observacao_nfe: formData.observacao_nfe || null,
        observacao_interna: formData.observacao_interna || null,
        empresa_id: formData.empresa_id,
        usuario_id: (_a2 = (await supabase.auth.getUser()).data.user) == null ? void 0 : _a2.id
      };
      let clienteId;
      if (editingCliente) {
        const { error } = await supabase.from("clientes").update(clienteData).eq("id", editingCliente.id);
        if (error) throw error;
        clienteId = editingCliente.id;
        const { data: pedidosComDesconto, error: checkError } = await supabase.from("pedidos").select("id, desconto_prazo_id").eq("cliente_id", clienteId).not("desconto_prazo_id", "is", null);
        if (checkError) throw checkError;
        if (!pedidosComDesconto || pedidosComDesconto.length === 0) {
          const { error: deleteDescontosPrazoError } = await supabase.from("cliente_descontos_prazo").delete().eq("cliente_id", clienteId);
          if (deleteDescontosPrazoError) throw deleteDescontosPrazoError;
        }
        const { error: deleteDescontosValorError } = await supabase.from("cliente_descontos_valor").delete().eq("cliente_id", clienteId);
        if (deleteDescontosValorError) throw deleteDescontosValorError;
        B.success("Cliente atualizado com sucesso!");
      } else {
        const { data: novoCliente, error } = await supabase.from("clientes").insert(clienteData).select("id").single();
        if (error) throw error;
        if (!novoCliente) throw new Error("Erro ao obter ID do cliente criado");
        clienteId = novoCliente.id;
        B.success("Cliente cadastrado com sucesso!");
      }
      if (descontosPrazo.length > 0) {
        let podeInserirDescontos = true;
        if (editingCliente) {
          const { data: pedidosComDesconto } = await supabase.from("pedidos").select("id").eq("cliente_id", clienteId).not("desconto_prazo_id", "is", null);
          podeInserirDescontos = !pedidosComDesconto || pedidosComDesconto.length === 0;
        }
        if (podeInserirDescontos) {
          const descontosPrazoData = descontosPrazo.map((desconto) => ({
            cliente_id: clienteId,
            empresa_id: formData.empresa_id,
            prazo_dias: desconto.prazo_dias,
            percentual: desconto.percentual,
            tipo: desconto.tipo
          }));
          const { error: descontosPrazoError } = await supabase.from("cliente_descontos_prazo").insert(descontosPrazoData);
          if (descontosPrazoError) throw descontosPrazoError;
        } else {
          B.warning("Descontos por prazo não foram atualizados pois há pedidos vinculados a eles.");
        }
      }
      if (descontosValor.length > 0) {
        const descontosValorData = descontosValor.map((desconto) => ({
          cliente_id: clienteId,
          empresa_id: formData.empresa_id,
          valor_minimo: desconto.valor_minimo,
          percentual: desconto.percentual,
          tipo: desconto.tipo
        }));
        const { error: descontosValorError } = await supabase.from("cliente_descontos_valor").insert(descontosValorData);
        if (descontosValorError) throw descontosValorError;
      }
      loadClientes();
      setShowSidebar(false);
      resetForm();
    } catch (error) {
      console.error("Erro ao salvar cliente:", error);
      B.error(`Erro ao salvar cliente: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };
  const handleEdit = async (cliente) => {
    console.log("Editando cliente:", cliente);
    let cep = cliente.cep || "";
    if (cep && /^\d+$/.test(cep)) {
      cep = formatarCep(cep);
    }
    let endereco = cliente.endereco || "";
    let numero = cliente.numero || "";
    let complemento = cliente.complemento || "";
    let bairro = cliente.bairro || "";
    let cidade = cliente.cidade || "";
    let estado = cliente.estado || "";
    let tipoDocumento = "CNPJ";
    let documento = cliente.documento || "";
    let razaoSocial = cliente.razao_social || "";
    let nomeFantasia = cliente.nome_fantasia || "";
    if (documento.replace(/\D/g, "").length === 11) {
      tipoDocumento = "CPF";
      documento = formatarCPF(documento);
    } else if (documento) {
      documento = formatarCNPJ(documento);
    }
    setEditingCliente(cliente);
    let telefones = [];
    if (cliente.telefones && cliente.telefones.length > 0) {
      telefones = cliente.telefones.map((tel) => ({
        ...tel,
        numero: formatarTelefone2(tel.numero, tel.tipo)
      }));
    } else if (cliente.telefone) {
      const ehCelular = cliente.telefone.replace(/\D/g, "").length === 11;
      telefones = [{
        numero: formatarTelefone2(cliente.telefone, ehCelular ? "Celular" : "Fixo"),
        tipo: ehCelular ? "Celular" : "Fixo",
        whatsapp: ehCelular
        // Assume que celulares têm WhatsApp por padrão
      }];
    }
    setFormData({
      tipo_documento: tipoDocumento,
      documento,
      razao_social: razaoSocial,
      nome_fantasia: nomeFantasia,
      nome: cliente.nome,
      telefones,
      emails: cliente.emails || [],
      cep,
      endereco,
      numero,
      complemento,
      bairro,
      cidade,
      estado,
      empresa_id: cliente.empresa_id,
      indicador_ie: cliente.indicador_ie || 9,
      codigo_municipio: cliente.codigo_municipio || "",
      inscricao_estadual: cliente.inscricao_estadual || "",
      // Tipos de cliente
      is_cliente: cliente.is_cliente ?? true,
      is_funcionario: cliente.is_funcionario ?? false,
      is_vendedor: cliente.is_vendedor ?? false,
      is_fornecedor: cliente.is_fornecedor ?? false,
      is_transportadora: cliente.is_transportadora ?? false,
      // Observações
      observacao_nfe: cliente.observacao_nfe || "",
      observacao_interna: cliente.observacao_interna || ""
    });
    await loadDescontos(cliente.id);
    setShowSidebar(true);
  };
  const handleDelete = async (id2) => {
    if (!window.confirm("Tem certeza que deseja excluir este cliente?")) return;
    try {
      const { error } = await supabase.from("clientes").delete().eq("id", id2);
      if (error) throw error;
      B.success("Cliente excluído com sucesso!");
      loadClientes();
    } catch (error) {
      console.error("Erro ao excluir cliente:", error);
      B.error(`Erro ao excluir cliente: ${error.message}`);
    }
  };
  const resetForm = () => {
    const currentEmpresaId = formData.empresa_id || (empresas.length > 0 ? empresas[0].id : "");
    setFormData({
      tipo_documento: "CNPJ",
      documento: "",
      razao_social: "",
      nome_fantasia: "",
      nome: "",
      telefones: [],
      emails: [],
      cep: "",
      endereco: "",
      numero: "",
      complemento: "",
      bairro: "",
      cidade: "",
      estado: "",
      empresa_id: currentEmpresaId,
      indicador_ie: 9,
      codigo_municipio: "",
      inscricao_estadual: "",
      // Tipos de cliente
      is_cliente: true,
      is_funcionario: false,
      is_vendedor: false,
      is_fornecedor: false,
      is_transportadora: false,
      // Observações
      observacao_nfe: "",
      observacao_interna: ""
    });
    setNovoTelefone({
      numero: "",
      tipo: "Celular",
      whatsapp: false
    });
    setFormErrors({
      nome: "",
      telefone: "",
      email: ""
    });
    setDescontosPrazo([]);
    setDescontosValor([]);
    setNovoDescontoPrazo({
      prazo_dias: 30,
      percentual: 0,
      tipo: "desconto"
    });
    setNovoDescontoValor({
      valor_minimo: 0,
      percentual: 0,
      tipo: "desconto"
    });
    setPrazoPercentualInput("0");
    setPrazoDiasInput("30");
    setValorPercentualInput("0");
    setValorMinimoInput("0");
    setActiveTab("dados-gerais");
    setEditingCliente(null);
    setTemPedidosVinculados(false);
  };
  const loadDescontos = async (clienteId) => {
    try {
      const { data: descontosPrazoData, error: descontosPrazoError } = await supabase.from("cliente_descontos_prazo").select("*").eq("cliente_id", clienteId).order("prazo_dias");
      if (descontosPrazoError) throw descontosPrazoError;
      setDescontosPrazo(descontosPrazoData || []);
      const { data: descontosValorData, error: descontosValorError } = await supabase.from("cliente_descontos_valor").select("*").eq("cliente_id", clienteId).order("valor_minimo");
      if (descontosValorError) throw descontosValorError;
      setDescontosValor(descontosValorData || []);
      const { data: pedidosComDesconto, error: checkError } = await supabase.from("pedidos").select("id").eq("cliente_id", clienteId).not("desconto_prazo_id", "is", null);
      if (checkError) throw checkError;
      setTemPedidosVinculados(pedidosComDesconto && pedidosComDesconto.length > 0);
      setPrazoPercentualInput("0");
      setPrazoDiasInput("30");
      setValorPercentualInput("0");
      setValorMinimoInput("0");
    } catch (error) {
      console.error("Erro ao carregar descontos:", error);
      B.error("Erro ao carregar descontos do cliente");
    }
  };
  const adicionarDescontoPrazo = () => {
    if (novoDescontoPrazo.prazo_dias <= 0) {
      B.error("O prazo deve ser maior que zero");
      return;
    }
    if (novoDescontoPrazo.percentual <= 0) {
      B.error("O percentual deve ser maior que zero");
      return;
    }
    const existente = descontosPrazo.find((d2) => d2.prazo_dias === novoDescontoPrazo.prazo_dias);
    if (existente) {
      B.error(`Já existe um ${existente.tipo} para o prazo de ${existente.prazo_dias} dias`);
      return;
    }
    setDescontosPrazo([...descontosPrazo, { ...novoDescontoPrazo }]);
    setNovoDescontoPrazo({
      prazo_dias: 30,
      percentual: 0,
      tipo: "desconto"
    });
    setPrazoPercentualInput("0");
    setPrazoDiasInput("30");
  };
  const removerDescontoPrazo = (index2) => {
    const novosDescontos = [...descontosPrazo];
    novosDescontos.splice(index2, 1);
    setDescontosPrazo(novosDescontos);
  };
  const adicionarDescontoValor = () => {
    if (novoDescontoValor.valor_minimo <= 0) {
      B.error("O valor mínimo deve ser maior que zero");
      return;
    }
    if (novoDescontoValor.percentual <= 0) {
      B.error("O percentual deve ser maior que zero");
      return;
    }
    const existente = descontosValor.find((d2) => d2.valor_minimo === novoDescontoValor.valor_minimo);
    if (existente) {
      B.error(`Já existe um ${existente.tipo} para o valor mínimo de ${formatarPreco2(existente.valor_minimo)}`);
      return;
    }
    setDescontosValor([...descontosValor, { ...novoDescontoValor }]);
    setNovoDescontoValor({
      valor_minimo: 0,
      percentual: 0,
      tipo: "desconto"
    });
    setValorPercentualInput("0");
    setValorMinimoInput("0");
  };
  const removerDescontoValor = (index2) => {
    const novosDescontos = [...descontosValor];
    novosDescontos.splice(index2, 1);
    setDescontosValor(novosDescontos);
  };
  const formatarPreco2 = (valor) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(valor);
  };
  const handleAddNew = () => {
    resetForm();
    setShowSidebar(true);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "container mx-auto px-4 py-1", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center mb-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-xl font-semibold text-white", children: "Clientes" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => setShowFilters(!showFilters),
            className: `p-2 rounded-lg transition-colors flex items-center gap-1 ${showFilters ? "bg-primary-500/20 text-primary-400 border border-primary-500/30" : "bg-gray-800 text-gray-400 hover:text-white border border-gray-700"}`,
            title: "Filtros",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Filter, { size: 18 })
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-2", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setTipoClienteFilter("todos"),
            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors flex items-center gap-2 ${tipoClienteFilter === "todos" ? "bg-primary-500 text-white" : "bg-gray-800 text-gray-300 hover:bg-gray-700 border border-gray-700"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
              "Todos"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setTipoClienteFilter("cliente"),
            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors flex items-center gap-2 ${tipoClienteFilter === "cliente" ? "bg-blue-500 text-white" : "bg-blue-500/10 text-blue-400 hover:bg-blue-500/20 border border-blue-500/30"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
              "Cliente"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setTipoClienteFilter("funcionario"),
            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors flex items-center gap-2 ${tipoClienteFilter === "funcionario" ? "bg-green-500 text-white" : "bg-green-500/10 text-green-400 hover:bg-green-500/20 border border-green-500/30"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
              "Funcionário"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setTipoClienteFilter("vendedor"),
            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors flex items-center gap-2 ${tipoClienteFilter === "vendedor" ? "bg-purple-500 text-white" : "bg-purple-500/10 text-purple-400 hover:bg-purple-500/20 border border-purple-500/30"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
              "Vendedor"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setTipoClienteFilter("fornecedor"),
            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors flex items-center gap-2 ${tipoClienteFilter === "fornecedor" ? "bg-orange-500 text-white" : "bg-orange-500/10 text-orange-400 hover:bg-orange-500/20 border border-orange-500/30"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
              "Fornecedor"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setTipoClienteFilter("transportadora"),
            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors flex items-center gap-2 ${tipoClienteFilter === "transportadora" ? "bg-red-500 text-white" : "bg-red-500/10 text-red-400 hover:bg-red-500/20 border border-red-500/30"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
              "Transportadora"
            ]
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-3 mb-3", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            type: "text",
            placeholder: "Buscar por nome, telefone ou email...",
            value: searchTerm,
            onChange: (e) => setSearchTerm(e.target.value),
            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18, className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showFilters && /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { height: 0, opacity: 0 },
          animate: { height: "auto", opacity: 1 },
          exit: { height: 0, opacity: 0 },
          className: "overflow-hidden mt-2",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800/50 border border-gray-700 rounded p-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-xs font-medium text-gray-400 mb-2", children: "Filtrar por Empresa" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-1.5", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => setEmpresaFilter("todas"),
                  className: `px-2.5 py-1 rounded-full text-xs font-medium transition-colors ${empresaFilter === "todas" ? "bg-primary-500 text-white" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`,
                  children: "Todas"
                }
              ),
              empresas.map((empresa) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => setEmpresaFilter(empresa.id),
                  className: `px-2.5 py-1 rounded-full text-xs font-medium transition-colors ${empresaFilter === empresa.id ? "bg-primary-500 text-white" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`,
                  children: empresa.nome
                },
                empresa.id
              ))
            ] })
          ] }) })
        }
      ) })
    ] }),
    isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-3", children: [1, 2, 3].map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 bg-background-card rounded-lg border border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-start", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 w-2/3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-5 w-32 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-40 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-36 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-48 bg-gray-700 rounded animate-pulse" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 w-1/3 flex flex-col items-end", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-24 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-8 w-20 bg-gray-700 rounded animate-pulse" })
      ] })
    ] }) }, item)) }) : filteredClientes.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-8 text-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCircle, { size: 32, className: "text-gray-500 mx-auto mb-3" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: "Nenhum cliente encontrado" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-4", children: searchTerm || empresaFilter !== "todas" ? "Tente ajustar os filtros de busca" : "Você ainda não possui clientes cadastrados" })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 gap-2", children: filteredClientes.map((cliente) => /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0, y: 20 },
        animate: { opacity: 1, y: 0 },
        className: "p-2.5 bg-background-card rounded border border-gray-800",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 min-w-0", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium text-base truncate", children: cliente.nome }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-0.5 mt-0.5", children: [
              cliente.telefones && cliente.telefones.length > 0 ? cliente.telefones.slice(0, 2).map((tel, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-gray-400 text-xs", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Phone, { size: 12, className: tel.whatsapp ? "text-green-500" : "" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                  formatarTelefone2(tel.numero, tel.tipo),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-xs ml-1", children: [
                    "(",
                    tel.tipo,
                    tel.whatsapp ? " - WhatsApp" : "",
                    ")"
                  ] })
                ] })
              ] }, index2)) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-gray-400 text-xs", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Phone, { size: 12 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: formatarTelefone2(cliente.telefone) })
              ] }),
              cliente.telefones && cliente.telefones.length > 2 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500", children: [
                "+",
                cliente.telefones.length - 2,
                " telefone(s)"
              ] })
            ] }),
            cliente.emails && cliente.emails.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-0.5 mt-0.5", children: [
              cliente.emails.slice(0, 2).map((email, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-gray-400 text-xs", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Mail, { size: 12 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "truncate", children: email })
              ] }, index2)),
              cliente.emails.length > 2 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500", children: [
                "+",
                cliente.emails.length - 2,
                " email(s)"
              ] })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 min-w-0", children: [
            (cliente.endereco || cliente.bairro || cliente.cidade) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-1 text-gray-400 text-xs mb-0.5", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(MapPin, { size: 12, className: "mt-0.5 flex-shrink-0" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "min-w-0", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "truncate", children: cliente.endereco && `${cliente.endereco}${cliente.numero ? `, ${cliente.numero}` : ""}` }),
                (cliente.bairro || cliente.cidade) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "truncate", children: [
                  cliente.bairro && `${cliente.bairro}`,
                  cliente.cidade && (cliente.bairro ? `, ${cliente.cidade}` : cliente.cidade),
                  cliente.estado && `/${cliente.estado}`
                ] })
              ] })
            ] }),
            cliente.empresa_nome && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-gray-500 text-xs mb-0.5", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Building, { size: 12 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "truncate", children: cliente.empresa_nome })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500", children: [
              "Cadastrado em: ",
              formatarData(cliente.created_at)
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1 flex-shrink-0", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => handleEdit(cliente),
                className: "p-1.5 rounded bg-blue-500/10 text-blue-400 hover:bg-blue-500/20 transition-colors",
                title: "Editar",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(SquarePen, { size: 14 })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => handleDelete(cliente.id),
                className: "p-1.5 rounded bg-red-500/10 text-red-400 hover:bg-red-500/20 transition-colors",
                title: "Excluir",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 14 })
              }
            )
          ] })
        ] })
      },
      cliente.id
    )) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showSidebar && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { opacity: 0 },
          animate: { opacity: 1 },
          exit: { opacity: 0 },
          className: "fixed inset-0 bg-black/50 z-40",
          onClick: () => setShowSidebar(false)
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { x: "100%" },
          animate: { x: 0 },
          exit: { x: "100%" },
          transition: { type: "tween", duration: 0.3 },
          className: "fixed right-0 top-0 h-screen w-full max-w-lg bg-background-card border-l border-gray-800 z-50 overflow-y-auto custom-scrollbar",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: editingCliente ? "Editar Cliente" : "Novo Cliente" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => setShowSidebar(false),
                  className: "text-gray-400 hover:text-white transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 24 })
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, className: "space-y-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex border-b border-gray-700 mb-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => setActiveTab("dados-gerais"),
                    className: `py-2 px-2 font-medium text-xs border-b-2 flex-1 text-center ${activeTab === "dados-gerais" ? "border-primary-500 text-primary-500" : "border-transparent text-gray-400 hover:text-white"} transition-colors`,
                    children: "Dados Gerais"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => setActiveTab("descontos"),
                    className: `py-2 px-2 font-medium text-xs border-b-2 flex-1 text-center ${activeTab === "descontos" ? "border-primary-500 text-primary-500" : "border-transparent text-gray-400 hover:text-white"} transition-colors`,
                    children: "Descontos"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => setActiveTab("financeiro"),
                    className: `py-2 px-2 font-medium text-xs border-b-2 flex-1 text-center ${activeTab === "financeiro" ? "border-primary-500 text-primary-500" : "border-transparent text-gray-400 hover:text-white"} transition-colors`,
                    children: "Financeiro"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => setActiveTab("observacao"),
                    className: `py-2 px-2 font-medium text-xs border-b-2 flex-1 text-center ${activeTab === "observacao" ? "border-primary-500 text-primary-500" : "border-transparent text-gray-400 hover:text-white"} transition-colors`,
                    children: "Observação"
                  }
                )
              ] }),
              activeTab === "dados-gerais" ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Tipo de Documento" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 mb-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          type: "radio",
                          checked: formData.tipo_documento === "CNPJ",
                          onChange: () => handleTipoDocumentoChange("CNPJ"),
                          className: "mr-2 text-primary-500 focus:ring-primary-500/20"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "CNPJ" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          type: "radio",
                          checked: formData.tipo_documento === "CPF",
                          onChange: () => handleTipoDocumentoChange("CPF"),
                          className: "mr-2 text-primary-500 focus:ring-primary-500/20"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "CPF" })
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: formData.tipo_documento }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { size: 18, className: "text-gray-500" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "text",
                        value: formData.documento,
                        onChange: handleDocumentoChange,
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-10 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                        placeholder: formData.tipo_documento === "CNPJ" ? "XX.XXX.XXX/XXXX-XX" : "XXX.XXX.XXX-XX"
                      }
                    ),
                    formData.tipo_documento === "CNPJ" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        type: "button",
                        onClick: buscarCNPJ,
                        disabled: isCnpjLoading,
                        className: "absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed",
                        children: isCnpjLoading ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-gray-400/30 border-t-gray-400 rounded-full animate-spin" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18 })
                      }
                    )
                  ] })
                ] }),
                formData.tipo_documento === "CNPJ" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Razão Social" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: formData.razao_social,
                      onChange: (e) => setFormData({ ...formData, razao_social: e.target.value }),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "Razão Social"
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Nome Fantasia" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: formData.nome_fantasia,
                      onChange: (e) => setFormData({ ...formData, nome_fantasia: e.target.value }),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "Nome Fantasia"
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: [
                    "Nome ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 18, className: "text-gray-500" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "text",
                        value: formData.nome,
                        onChange: (e) => setFormData({ ...formData, nome: e.target.value }),
                        className: `w-full bg-gray-800/50 border ${formErrors.nome ? "border-red-500" : "border-gray-700"} rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20`,
                        placeholder: "Nome completo"
                      }
                    )
                  ] }),
                  formErrors.nome && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 text-xs mt-1", children: formErrors.nome })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: [
                    "Telefones ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                  ] }),
                  formData.telefones.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-3 space-y-2", children: formData.telefones.map((tel, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "div",
                    {
                      className: "flex items-center justify-between bg-gray-800/70 rounded-lg p-2 border border-gray-700",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(Phone, { size: 18, className: tel.whatsapp ? "text-green-500" : "text-gray-500" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: tel.numero }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-gray-400", children: [
                              tel.tipo,
                              tel.whatsapp ? " - WhatsApp" : ""
                            ] })
                          ] })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            type: "button",
                            onClick: () => removerTelefone(index2),
                            className: "text-red-400 hover:text-red-300 p-1",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                          }
                        )
                      ]
                    },
                    index2
                  )) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3 bg-gray-800/30 p-3 rounded-lg border border-gray-700", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-sm font-medium text-gray-300", children: "Adicionar telefone" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "radio",
                            checked: novoTelefone.tipo === "Celular",
                            onChange: () => handleTipoTelefoneChange("Celular"),
                            className: "mr-2 text-primary-500 focus:ring-primary-500/20"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "Celular" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "radio",
                            checked: novoTelefone.tipo === "Fixo",
                            onChange: () => handleTipoTelefoneChange("Fixo"),
                            className: "mr-2 text-primary-500 focus:ring-primary-500/20"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "Fixo" })
                      ] })
                    ] }),
                    novoTelefone.tipo === "Celular" && /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          type: "checkbox",
                          checked: novoTelefone.whatsapp,
                          onChange: handleWhatsappChange,
                          className: "mr-2 text-primary-500 focus:ring-primary-500/20"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "Este número tem WhatsApp" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative flex-1", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Phone, { size: 18, className: "text-gray-500" }) }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            value: novoTelefone.numero,
                            onChange: handleNovoTelefoneChange,
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                            placeholder: novoTelefone.tipo === "Celular" ? "(00) 0 0000-0000" : "(00) 0000-0000"
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          type: "button",
                          onClick: adicionarTelefone,
                          className: "bg-primary-500 hover:bg-primary-600 text-white px-3 py-2 rounded-lg transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 18 })
                        }
                      )
                    ] })
                  ] }),
                  formErrors.telefone && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 text-xs mt-1", children: formErrors.telefone })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: [
                    "Emails ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
                  ] }),
                  formData.emails.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-3 space-y-2", children: formData.emails.map((email, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "div",
                    {
                      className: "flex items-center justify-between bg-gray-800/70 rounded-lg p-2 border border-gray-700",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(Mail, { size: 18, className: "text-gray-500" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: email }) })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            type: "button",
                            onClick: () => removerEmail(index2),
                            className: "text-red-400 hover:text-red-300 p-1",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                          }
                        )
                      ]
                    },
                    index2
                  )) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3 bg-gray-800/30 p-3 rounded-lg border border-gray-700", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-sm font-medium text-gray-300", children: "Adicionar email" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative flex-1", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Mail, { size: 18, className: "text-gray-500" }) }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "email",
                            value: novoEmail,
                            onChange: (e) => setNovoEmail(e.target.value),
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                            placeholder: "email@exemplo.com",
                            onKeyPress: (e) => {
                              if (e.key === "Enter") {
                                e.preventDefault();
                                adicionarEmail();
                              }
                            }
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          type: "button",
                          onClick: adicionarEmail,
                          className: "bg-primary-500 hover:bg-primary-600 text-white px-3 py-2 rounded-lg transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 18 })
                        }
                      )
                    ] })
                  ] }),
                  formErrors.email && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 text-xs mt-1", children: formErrors.email })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: [
                    "CEP ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(MapPin, { size: 18, className: "text-gray-500" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "text",
                        value: formData.cep,
                        onChange: handleCepChange,
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-10 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                        placeholder: "XX.XXX-XXX"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        type: "button",
                        onClick: buscarCep,
                        className: "absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-white",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18 })
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: [
                    "Endereço ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(MapPin, { size: 18, className: "text-gray-500" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "text",
                        value: formData.endereco,
                        onChange: (e) => setFormData({ ...formData, endereco: e.target.value }),
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                        placeholder: "Avenida, rua"
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: [
                      "Número ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "text",
                        value: formData.numero,
                        onChange: (e) => setFormData({ ...formData, numero: e.target.value }),
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                        placeholder: "Número"
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: [
                      "Complemento ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "text",
                        value: formData.complemento,
                        onChange: (e) => setFormData({ ...formData, complemento: e.target.value }),
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                        placeholder: "Apto, sala, etc."
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: [
                    "Bairro ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: formData.bairro,
                      onChange: (e) => setFormData({ ...formData, bairro: e.target.value }),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "Bairro"
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: [
                      "Cidade ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "text",
                        value: formData.cidade,
                        onChange: (e) => setFormData({ ...formData, cidade: e.target.value }),
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                        placeholder: "Cidade"
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: [
                      "Estado ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "text",
                        value: formData.estado,
                        onChange: (e) => setFormData({ ...formData, estado: e.target.value }),
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                        placeholder: "UF",
                        maxLength: 2
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: [
                    "Código do Município (IBGE) ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(NFe)" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "text",
                        value: formData.codigo_municipio,
                        onChange: (e) => setFormData({ ...formData, codigo_municipio: e.target.value }),
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-3 pr-10 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                        placeholder: "3525904 (7 dígitos)",
                        maxLength: 7,
                        pattern: "[0-9]{7}"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        type: "button",
                        onClick: async () => {
                          if (formData.cidade && formData.estado) {
                            const codigoIBGE = await buscarCodigoIBGE(formData.cidade, formData.estado);
                            if (codigoIBGE) {
                              setFormData((prev) => ({ ...prev, codigo_municipio: codigoIBGE }));
                              B.success("Código IBGE encontrado!");
                            } else {
                              B.error("Código IBGE não encontrado para esta cidade/estado.");
                            }
                          } else {
                            B.error("Preencha cidade e estado primeiro.");
                          }
                        },
                        className: "absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white",
                        title: "Buscar código IBGE automaticamente",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18 })
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Preenchido automaticamente ao buscar por CNPJ ou CEP" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: [
                    "Indicador de Inscrição Estadual ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(NFe)" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "select",
                    {
                      value: formData.indicador_ie,
                      onChange: (e) => setFormData({ ...formData, indicador_ie: parseInt(e.target.value) }),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 1, children: "1 - Contribuinte ICMS" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 2, children: "2 - Contribuinte isento de IE" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 9, children: "9 - Não contribuinte" })
                      ]
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Automaticamente definido: CPF = Não contribuinte, CNPJ = Contribuinte" })
                ] }),
                formData.indicador_ie === 1 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: [
                    "Inscrição Estadual ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: formData.inscricao_estadual,
                      onChange: (e) => {
                        const numbersOnly = e.target.value.replace(/\D/g, "").slice(0, 12);
                        setFormData({ ...formData, inscricao_estadual: numbersOnly });
                      },
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "123456789012 (12 dígitos)",
                      maxLength: 12,
                      pattern: "[0-9]{12}",
                      required: formData.indicador_ie === 1
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Apenas números, exatamente 12 dígitos" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/30 rounded-lg border border-gray-700 p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium mb-4", children: "Tipos de Cliente" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mb-4", children: "Selecione os tipos que se aplicam a este cliente. Você pode marcar múltiplas opções." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between bg-gray-800/50 rounded-lg p-3 border border-gray-700 min-h-[60px]", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 flex-1 min-w-0", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 16, className: "text-blue-400" }) }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium whitespace-nowrap", children: "Cliente" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "relative inline-flex items-center cursor-pointer flex-shrink-0 ml-3", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "checkbox",
                            checked: formData.is_cliente,
                            onChange: (e) => setFormData({ ...formData, is_cliente: e.target.checked }),
                            className: "sr-only peer"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500" })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between bg-gray-800/50 rounded-lg p-3 border border-gray-700 min-h-[60px]", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 flex-1 min-w-0", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-green-500/20 rounded-lg flex items-center justify-center flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 16, className: "text-green-400" }) }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium whitespace-nowrap", children: "Funcionário" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "relative inline-flex items-center cursor-pointer flex-shrink-0 ml-3", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "checkbox",
                            checked: formData.is_funcionario,
                            onChange: (e) => setFormData({ ...formData, is_funcionario: e.target.checked }),
                            className: "sr-only peer"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500" })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between bg-gray-800/50 rounded-lg p-3 border border-gray-700 min-h-[60px]", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 flex-1 min-w-0", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-purple-500/20 rounded-lg flex items-center justify-center flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 16, className: "text-purple-400" }) }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium whitespace-nowrap", children: "Vendedor" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "relative inline-flex items-center cursor-pointer flex-shrink-0 ml-3", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "checkbox",
                            checked: formData.is_vendedor,
                            onChange: (e) => setFormData({ ...formData, is_vendedor: e.target.checked }),
                            className: "sr-only peer"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500" })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between bg-gray-800/50 rounded-lg p-3 border border-gray-700 min-h-[60px]", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 flex-1 min-w-0", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-orange-500/20 rounded-lg flex items-center justify-center flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 16, className: "text-orange-400" }) }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium whitespace-nowrap", children: "Fornecedor" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "relative inline-flex items-center cursor-pointer flex-shrink-0 ml-3", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "checkbox",
                            checked: formData.is_fornecedor,
                            onChange: (e) => setFormData({ ...formData, is_fornecedor: e.target.checked }),
                            className: "sr-only peer"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500" })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between bg-gray-800/50 rounded-lg p-3 border border-gray-700 min-h-[60px]", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 flex-1 min-w-0", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-red-500/20 rounded-lg flex items-center justify-center flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 16, className: "text-red-400" }) }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium whitespace-nowrap", children: "Transportadora" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "relative inline-flex items-center cursor-pointer flex-shrink-0 ml-3", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "checkbox",
                            checked: formData.is_transportadora,
                            onChange: (e) => setFormData({ ...formData, is_transportadora: e.target.checked }),
                            className: "sr-only peer"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500" })
                      ] })
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("input", { type: "hidden", value: formData.empresa_id })
              ] }) : activeTab === "descontos" ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: "Descontos por Prazo de Faturamento" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: "Configure descontos ou acréscimos de acordo com o prazo de faturamento." }),
                  descontosPrazo.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2 mb-4", children: descontosPrazo.map((desconto, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "div",
                    {
                      className: "flex items-center justify-between bg-gray-800/70 rounded-lg p-3 border border-gray-700",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white font-medium", children: [
                              desconto.prazo_dias,
                              " dias"
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `text-xs px-2 py-0.5 rounded-full ${desconto.tipo === "desconto" ? "bg-green-500/20 text-green-400" : "bg-red-500/20 text-red-400"}`, children: desconto.tipo === "desconto" ? "Desconto" : "Acréscimo" })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400", children: [
                            desconto.percentual,
                            "% de ",
                            desconto.tipo
                          ] })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            type: "button",
                            onClick: () => removerDescontoPrazo(index2),
                            className: "text-red-400 hover:text-red-300 p-1",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                          }
                        )
                      ]
                    },
                    index2
                  )) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3 bg-gray-800/30 p-4 rounded-lg border border-gray-700", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-sm font-medium text-gray-300", children: "Adicionar desconto por prazo" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-3", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Prazo (dias)" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            inputMode: "numeric",
                            value: prazoDiasInput,
                            onChange: (e) => {
                              const value = e.target.value;
                              if (value === "" || /^[0-9]*$/.test(value)) {
                                setPrazoDiasInput(value);
                                const numValue = value === "" ? 0 : parseInt(value);
                                setNovoDescontoPrazo({
                                  ...novoDescontoPrazo,
                                  prazo_dias: numValue
                                });
                              }
                            },
                            placeholder: "30",
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Percentual (%)" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            inputMode: "decimal",
                            value: prazoPercentualInput,
                            onChange: (e) => {
                              const value = e.target.value;
                              if (value === "" || /^[0-9]*[.]?[0-9]*$/.test(value)) {
                                setPrazoPercentualInput(value);
                                const numValue = value === "" ? 0 : parseFloat(value);
                                setNovoDescontoPrazo({
                                  ...novoDescontoPrazo,
                                  percentual: numValue
                                });
                              }
                            },
                            placeholder: "0,00",
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                          }
                        )
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Tipo" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "input",
                            {
                              type: "radio",
                              checked: novoDescontoPrazo.tipo === "desconto",
                              onChange: () => setNovoDescontoPrazo({
                                ...novoDescontoPrazo,
                                tipo: "desconto"
                              }),
                              className: "mr-2 text-primary-500 focus:ring-primary-500/20"
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "Desconto" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "input",
                            {
                              type: "radio",
                              checked: novoDescontoPrazo.tipo === "acrescimo",
                              onChange: () => setNovoDescontoPrazo({
                                ...novoDescontoPrazo,
                                tipo: "acrescimo"
                              }),
                              className: "mr-2 text-primary-500 focus:ring-primary-500/20"
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "Acréscimo" })
                        ] })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "button",
                      {
                        type: "button",
                        onClick: adicionarDescontoPrazo,
                        className: "w-full mt-2 bg-primary-500 hover:bg-primary-600 text-white py-2 px-4 rounded-lg transition-colors flex items-center justify-center gap-2",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 16 }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Adicionar" })
                        ]
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4 mt-8", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: "Descontos por Valor do Pedido" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: "Configure descontos ou acréscimos de acordo com o valor total do pedido." }),
                  descontosValor.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2 mb-4", children: descontosValor.map((desconto, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "div",
                    {
                      className: "flex items-center justify-between bg-gray-800/70 rounded-lg p-3 border border-gray-700",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white font-medium", children: [
                              "A partir de ",
                              formatarPreco2(desconto.valor_minimo)
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `text-xs px-2 py-0.5 rounded-full ${desconto.tipo === "desconto" ? "bg-green-500/20 text-green-400" : "bg-red-500/20 text-red-400"}`, children: desconto.tipo === "desconto" ? "Desconto" : "Acréscimo" })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400", children: [
                            desconto.percentual,
                            "% de ",
                            desconto.tipo
                          ] })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            type: "button",
                            onClick: () => removerDescontoValor(index2),
                            className: "text-red-400 hover:text-red-300 p-1",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                          }
                        )
                      ]
                    },
                    index2
                  )) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3 bg-gray-800/30 p-4 rounded-lg border border-gray-700", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-sm font-medium text-gray-300", children: "Adicionar desconto por valor" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-3", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Valor Mínimo (R$)" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            inputMode: "decimal",
                            value: valorMinimoInput,
                            onChange: (e) => {
                              const value = e.target.value;
                              if (value === "" || /^[0-9]*[.]?[0-9]*$/.test(value)) {
                                setValorMinimoInput(value);
                                const numValue = value === "" ? 0 : parseFloat(value);
                                setNovoDescontoValor({
                                  ...novoDescontoValor,
                                  valor_minimo: numValue
                                });
                              }
                            },
                            placeholder: "0,00",
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Percentual (%)" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            inputMode: "decimal",
                            value: valorPercentualInput,
                            onChange: (e) => {
                              const value = e.target.value;
                              if (value === "" || /^[0-9]*[.]?[0-9]*$/.test(value)) {
                                setValorPercentualInput(value);
                                const numValue = value === "" ? 0 : parseFloat(value);
                                setNovoDescontoValor({
                                  ...novoDescontoValor,
                                  percentual: numValue
                                });
                              }
                            },
                            placeholder: "0,00",
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                          }
                        )
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Tipo" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "input",
                            {
                              type: "radio",
                              checked: novoDescontoValor.tipo === "desconto",
                              onChange: () => setNovoDescontoValor({
                                ...novoDescontoValor,
                                tipo: "desconto"
                              }),
                              className: "mr-2 text-primary-500 focus:ring-primary-500/20"
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "Desconto" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "input",
                            {
                              type: "radio",
                              checked: novoDescontoValor.tipo === "acrescimo",
                              onChange: () => setNovoDescontoValor({
                                ...novoDescontoValor,
                                tipo: "acrescimo"
                              }),
                              className: "mr-2 text-primary-500 focus:ring-primary-500/20"
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "Acréscimo" })
                        ] })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "button",
                      {
                        type: "button",
                        onClick: adicionarDescontoValor,
                        className: "w-full mt-2 bg-primary-500 hover:bg-primary-600 text-white py-2 px-4 rounded-lg transition-colors flex items-center justify-center gap-2",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 16 }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Adicionar" })
                        ]
                      }
                    )
                  ] })
                ] })
              ] }) : activeTab === "financeiro" ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-8", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: "Aba Financeiro" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Esta funcionalidade será implementada em breve." })
              ] }) }) : activeTab === "observacao" ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Observação NFe" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "textarea",
                    {
                      value: formData.observacao_nfe,
                      onChange: (e) => setFormData({ ...formData, observacao_nfe: e.target.value }),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20 resize-none",
                      placeholder: "Observações que aparecerão na NFe...",
                      rows: 4
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Esta observação será incluída na NFe quando emitida para este cliente." })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Observação Interna" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "textarea",
                    {
                      value: formData.observacao_interna,
                      onChange: (e) => setFormData({ ...formData, observacao_interna: e.target.value }),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20 resize-none",
                      placeholder: "Observações internas sobre o cliente...",
                      rows: 4
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Esta observação é apenas para uso interno e não aparecerá em documentos." })
                ] })
              ] }) : null,
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => setShowSidebar(false),
                    className: "flex-1 px-4 py-2 rounded-lg bg-gray-800 text-white hover:bg-gray-700 transition-colors",
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "submit",
                    disabled: isSubmitting,
                    className: "flex-1 px-4 py-2 rounded-lg bg-primary-500 text-white hover:bg-primary-600 transition-colors flex items-center justify-center gap-2 disabled:opacity-70 disabled:cursor-not-allowed",
                    children: isSubmitting ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Salvando..." })
                    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 18 }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Salvar" })
                    ] })
                  }
                )
              ] })
            ] })
          ] })
        }
      )
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      NFeValidationModal,
      {
        isOpen: nfeValidationModal.isOpen,
        onClose: () => setNfeValidationModal((prev) => ({ ...prev, isOpen: false })),
        campo: nfeValidationModal.campo,
        valor: nfeValidationModal.valor,
        validationResult: nfeValidationModal.validationResult,
        onCorrect: (newValue) => {
          if (nfeValidationModal.campo === "Nome do Cliente") {
            setFormData((prev) => ({ ...prev, nome: newValue }));
          } else if (nfeValidationModal.campo === "Razão Social") {
            setFormData((prev) => ({ ...prev, razao_social: newValue }));
          } else if (nfeValidationModal.campo === "Nome Fantasia") {
            setFormData((prev) => ({ ...prev, nome_fantasia: newValue }));
          } else if (nfeValidationModal.campo === "Observação NFe") {
            setFormData((prev) => ({ ...prev, observacao_nfe: newValue }));
          } else if (nfeValidationModal.campo === "Endereço") {
            setFormData((prev) => ({ ...prev, endereco: newValue }));
          } else if (nfeValidationModal.campo === "Bairro") {
            setFormData((prev) => ({ ...prev, bairro: newValue }));
          } else if (nfeValidationModal.campo === "Cidade") {
            setFormData((prev) => ({ ...prev, cidade: newValue }));
          } else if (nfeValidationModal.campo === "Complemento") {
            setFormData((prev) => ({ ...prev, complemento: newValue }));
          }
          setNfeValidationModal((prev) => ({ ...prev, isOpen: false }));
        }
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "button",
      {
        onClick: handleAddNew,
        className: "fixed bottom-6 right-6 bg-primary-500 hover:bg-primary-600 text-white p-4 rounded-full shadow-lg transition-all duration-300 hover:scale-110 z-30",
        title: "Novo Cliente",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 24 })
      }
    )
  ] });
};
const VendedoresPage = () => {
  const [isLoading, setIsLoading] = reactExports.useState(true);
  const [vendedores, setVendedores] = reactExports.useState([]);
  const [filteredVendedores, setFilteredVendedores] = reactExports.useState([]);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [showFilters, setShowFilters] = reactExports.useState(false);
  const [empresaFilter, setEmpresaFilter] = reactExports.useState("todas");
  const [statusFilter, setStatusFilter] = reactExports.useState("todos");
  const [empresas, setEmpresas] = reactExports.useState([]);
  const [showSidebar, setShowSidebar] = reactExports.useState(false);
  const [editingVendedor, setEditingVendedor] = reactExports.useState(null);
  const [formData, setFormData] = reactExports.useState({
    tipo_documento: "CPF",
    documento: "",
    razao_social: "",
    nome_fantasia: "",
    nome: "",
    telefones: [],
    emails: [],
    cep: "",
    endereco: "",
    numero: "",
    complemento: "",
    bairro: "",
    cidade: "",
    estado: "",
    empresa_id: "",
    comissao_percentual: 0,
    meta_mensal: 0,
    ativo: true,
    // Tipos de pessoa
    is_cliente: false,
    is_funcionario: false,
    is_vendedor: true,
    is_fornecedor: false,
    is_transportadora: false,
    // Observações
    observacao_nfe: "",
    observacao_interna: ""
  });
  const [novoTelefone, setNovoTelefone] = reactExports.useState({
    numero: "",
    tipo: "Celular",
    whatsapp: false
  });
  const [novoEmail, setNovoEmail] = reactExports.useState("");
  const [isSubmitting, setIsSubmitting] = reactExports.useState(false);
  reactExports.useEffect(() => {
    loadVendedores();
    loadEmpresas();
  }, []);
  reactExports.useEffect(() => {
    if (empresas.length > 0 && !formData.empresa_id) {
      setFormData((prev) => ({
        ...prev,
        empresa_id: empresas[0].id
      }));
    }
  }, [empresas]);
  reactExports.useEffect(() => {
    applyFilters();
  }, [vendedores, searchTerm, empresaFilter, statusFilter]);
  const loadEmpresas = async () => {
    try {
      const { data: empresasData } = await supabase.from("empresas").select("id, nome").order("nome");
      if (empresasData) {
        setEmpresas(empresasData);
      }
    } catch (error) {
      console.error("Erro ao carregar empresas:", error);
    }
  };
  const loadVendedores = async () => {
    try {
      setIsLoading(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: vendedoresData, error } = await supabase.from("clientes").select("*").eq("empresa_id", usuarioData.empresa_id).eq("is_vendedor", true).or("deletado.is.null,deletado.eq.false").order("nome");
      console.log("Vendedores encontrados:", vendedoresData == null ? void 0 : vendedoresData.length);
      if (error) throw error;
      if (vendedoresData && vendedoresData.length > 0) {
        const { data: empresasData } = await supabase.from("empresas").select("id, nome");
        const empresasMap = /* @__PURE__ */ new Map();
        if (empresasData) {
          empresasData.forEach((empresa) => {
            empresasMap.set(empresa.id, empresa.nome);
          });
        }
        const formattedVendedores = vendedoresData.map((vendedor) => ({
          ...vendedor,
          empresa_nome: empresasMap.get(vendedor.empresa_id) || "Empresa não encontrada"
        }));
        setVendedores(formattedVendedores);
        setFilteredVendedores(formattedVendedores);
      } else {
        setVendedores([]);
        setFilteredVendedores([]);
      }
    } catch (error) {
      console.error("Erro ao carregar vendedores:", error);
      B.error("Erro ao carregar vendedores");
    } finally {
      setIsLoading(false);
    }
  };
  const applyFilters = () => {
    let filtered = [...vendedores];
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase();
      filtered = filtered.filter(
        (vendedor) => {
          var _a2, _b2, _c;
          return ((_a2 = vendedor.nome) == null ? void 0 : _a2.toLowerCase().includes(searchLower)) || ((_b2 = vendedor.telefone) == null ? void 0 : _b2.toLowerCase().includes(searchLower)) || vendedor.emails && vendedor.emails.some((email) => email.toLowerCase().includes(searchLower)) || ((_c = vendedor.endereco) == null ? void 0 : _c.toLowerCase().includes(searchLower));
        }
      );
    }
    if (empresaFilter !== "todas") {
      filtered = filtered.filter((vendedor) => vendedor.empresa_id === empresaFilter);
    }
    if (statusFilter !== "todos") {
      filtered = filtered.filter((vendedor) => {
        if (statusFilter === "ativo") {
          return vendedor.ativo !== false;
        } else if (statusFilter === "inativo") {
          return vendedor.ativo === false;
        }
        return true;
      });
    }
    setFilteredVendedores(filtered);
  };
  const resetForm = () => {
    setFormData({
      tipo_documento: "CPF",
      documento: "",
      razao_social: "",
      nome_fantasia: "",
      nome: "",
      telefones: [],
      emails: [],
      cep: "",
      endereco: "",
      numero: "",
      complemento: "",
      bairro: "",
      cidade: "",
      estado: "",
      empresa_id: empresas.length > 0 ? empresas[0].id : "",
      comissao_percentual: 0,
      meta_mensal: 0,
      ativo: true,
      is_cliente: false,
      is_funcionario: false,
      is_vendedor: true,
      is_fornecedor: false,
      is_transportadora: false,
      observacao_nfe: "",
      observacao_interna: ""
    });
    setEditingVendedor(null);
  };
  const handleEdit = (vendedor) => {
    setEditingVendedor(vendedor);
    setFormData({
      tipo_documento: vendedor.tipo_documento || "CPF",
      documento: vendedor.documento || "",
      razao_social: vendedor.razao_social || "",
      nome_fantasia: vendedor.nome_fantasia || "",
      nome: vendedor.nome,
      telefones: vendedor.telefones || [],
      emails: vendedor.emails || [],
      cep: vendedor.cep || "",
      endereco: vendedor.endereco || "",
      numero: vendedor.numero || "",
      complemento: vendedor.complemento || "",
      bairro: vendedor.bairro || "",
      cidade: vendedor.cidade || "",
      estado: vendedor.estado || "",
      empresa_id: vendedor.empresa_id,
      comissao_percentual: vendedor.comissao_percentual || 0,
      meta_mensal: vendedor.meta_mensal || 0,
      ativo: vendedor.ativo !== false,
      is_cliente: false,
      is_funcionario: false,
      is_vendedor: true,
      is_fornecedor: false,
      is_transportadora: false,
      observacao_nfe: "",
      observacao_interna: ""
    });
    setShowSidebar(true);
  };
  const handleDelete = async (vendedor) => {
    if (!confirm(`Tem certeza que deseja excluir o vendedor ${vendedor.nome}?`)) {
      return;
    }
    try {
      const { error } = await supabase.from("clientes").update({ deletado: true }).eq("id", vendedor.id);
      if (error) throw error;
      B.success("Vendedor excluído com sucesso!");
      loadVendedores();
    } catch (error) {
      console.error("Erro ao excluir vendedor:", error);
      B.error("Erro ao excluir vendedor");
    }
  };
  if (isLoading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-center h-64", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500" }) });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl font-bold text-white", children: "Vendedores" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Gerencie os vendedores da empresa" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "button",
        {
          onClick: () => {
            resetForm();
            setShowSidebar(true);
          },
          className: "flex items-center gap-2 bg-primary-500 hover:bg-primary-600 text-white px-4 py-2 rounded-lg transition-colors",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 20 }),
            "Novo Vendedor"
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg p-4 border border-gray-800", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col lg:flex-row gap-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400", size: 20 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              placeholder: "Buscar vendedores...",
              value: searchTerm,
              onChange: (e) => setSearchTerm(e.target.value),
              className: "w-full pl-10 pr-4 py-2 bg-gray-800/50 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
            }
          )
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setShowFilters(!showFilters),
            className: "flex items-center gap-2 px-4 py-2 bg-background-secondary border border-gray-700 rounded-lg text-gray-300 hover:text-white transition-colors",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Filter, { size: 20 }),
              "Filtros"
            ]
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showFilters && /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { opacity: 0, height: 0 },
          animate: { opacity: 1, height: "auto" },
          exit: { opacity: 0, height: 0 },
          className: "mt-4 pt-4 border-t border-gray-700",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Empresa" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "select",
                {
                  value: empresaFilter,
                  onChange: (e) => setEmpresaFilter(e.target.value),
                  className: "w-full px-3 py-2 bg-background-secondary border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "todas", children: "Todas as empresas" }),
                    empresas.map((empresa) => /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: empresa.id, children: empresa.nome }, empresa.id))
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Status" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "select",
                {
                  value: statusFilter,
                  onChange: (e) => setStatusFilter(e.target.value),
                  className: "w-full px-3 py-2 bg-background-secondary border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "todos", children: "Todos" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "ativo", children: "Ativos" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "inativo", children: "Inativos" })
                  ]
                }
              )
            ] })
          ] })
        }
      ) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6", children: filteredVendedores.map((vendedor) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
      motion.div,
      {
        initial: { opacity: 0, y: 20 },
        animate: { opacity: 1, y: 0 },
        className: "bg-background-card rounded-lg p-6 border border-gray-800 hover:border-gray-700 transition-colors",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start justify-between mb-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-12 h-12 bg-primary-500/20 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { className: "text-primary-400", size: 24 }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-semibold text-white", children: vendedor.nome }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: vendedor.empresa_nome })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => handleEdit(vendedor),
                  className: "p-2 text-gray-400 hover:text-primary-400 transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(SquarePen, { size: 16 })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => handleDelete(vendedor),
                  className: "p-2 text-gray-400 hover:text-red-400 transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 16 })
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2", children: [
            vendedor.telefone && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-sm text-gray-300", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Phone, { size: 16, className: "text-gray-400" }),
              vendedor.telefone
            ] }),
            vendedor.emails && vendedor.emails.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-sm text-gray-300", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Mail, { size: 16, className: "text-gray-400" }),
              vendedor.emails[0]
            ] }),
            vendedor.endereco && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-sm text-gray-300", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(MapPin, { size: 16, className: "text-gray-400" }),
              vendedor.endereco
            ] }),
            vendedor.comissao_percentual && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-2 text-sm text-gray-300", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-green-400", children: [
              "Comissão: ",
              vendedor.comissao_percentual,
              "%"
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between pt-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `px-2 py-1 rounded-full text-xs ${vendedor.ativo !== false ? "bg-green-500/20 text-green-400" : "bg-red-500/20 text-red-400"}`, children: vendedor.ativo !== false ? "Ativo" : "Inativo" }) })
          ] })
        ]
      },
      vendedor.id
    )) }),
    filteredVendedores.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-12", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(User, { className: "mx-auto h-12 w-12 text-gray-400 mb-4" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: "Nenhum vendedor encontrado" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-4", children: searchTerm || empresaFilter !== "todas" || statusFilter !== "todos" ? "Tente ajustar os filtros de busca" : "Comece adicionando seu primeiro vendedor" }),
      !searchTerm && empresaFilter === "todas" && statusFilter === "todos" && /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          onClick: () => {
            resetForm();
            setShowSidebar(true);
          },
          className: "bg-primary-500 hover:bg-primary-600 text-white px-4 py-2 rounded-lg transition-colors",
          children: "Adicionar Vendedor"
        }
      )
    ] })
  ] });
};
const atualizarEstoqueProduto = async (supabase2, empresaId, usuarioId, produtoId, quantidade, tipoMovimento, observacao) => {
  try {
    const { data: configData, error: configError } = await supabase2.from("tipo_controle_estoque_config").select("bloqueia_sem_estoque").eq("empresa_id", empresaId).single();
    const bloqueiaEstoque = (configData == null ? void 0 : configData.bloqueia_sem_estoque) || false;
    const { data: produtoData, error: produtoError } = await supabase2.from("produtos").select("estoque_atual").eq("id", produtoId).eq("empresa_id", empresaId).single();
    if (produtoError) {
      console.error("Erro ao buscar estoque do produto:", produtoError);
      return { success: false, message: "Erro ao buscar estoque do produto" };
    }
    const estoqueAtual = parseFloat(produtoData.estoque_atual || "0");
    const novoEstoque = tipoMovimento === "entrada" ? estoqueAtual + quantidade : estoqueAtual - quantidade;
    if (bloqueiaEstoque && tipoMovimento === "saida" && novoEstoque < 0) {
      return { success: false, message: "Estoque insuficiente para esta operação" };
    }
    const { error: movimentoError } = await supabase2.from("produto_estoque").insert([{
      empresa_id: empresaId,
      usuario_id: usuarioId,
      produto_id: produtoId,
      tipo_movimento: tipoMovimento,
      quantidade,
      data_hora_movimento: (/* @__PURE__ */ new Date()).toISOString(),
      observacao
    }]);
    if (movimentoError) {
      console.error("Erro ao registrar movimento de estoque:", movimentoError);
      return { success: false, message: "Erro ao registrar movimento de estoque" };
    }
    const { error: updateError } = await supabase2.from("produtos").update({ estoque_atual: novoEstoque }).eq("id", produtoId).eq("empresa_id", empresaId);
    if (updateError) {
      console.error("Erro ao atualizar estoque do produto:", updateError);
      return { success: false, message: "Erro ao atualizar estoque do produto" };
    }
    return { success: true, message: "Estoque atualizado com sucesso" };
  } catch (error) {
    console.error("Erro ao atualizar estoque:", error);
    return { success: false, message: `Erro ao atualizar estoque: ${error.message}` };
  }
};
const verificarTipoControleEstoque = async (supabase2, empresaId) => {
  try {
    const { data, error } = await supabase2.from("tipo_controle_estoque_config").select("tipo_controle").eq("empresa_id", empresaId).single();
    if (error) {
      console.error("Erro ao verificar tipo de controle de estoque:", error);
      return "pedidos";
    }
    return (data == null ? void 0 : data.tipo_controle) || "pedidos";
  } catch (error) {
    console.error("Erro ao verificar tipo de controle de estoque:", error);
    return "pedidos";
  }
};
const atualizarEstoquePorPedido = async (supabase2, pedidoId, empresaId, usuarioId, tipoMovimento, origem) => {
  try {
    const { data: itensPedido, error: itensError } = await supabase2.from("pedidos_itens").select(`
        id,
        produto_id,
        quantidade
      `).eq("pedido_id", pedidoId);
    if (itensError) {
      console.error("Erro ao buscar itens do pedido:", itensError);
      return { success: false, message: "Erro ao buscar itens do pedido" };
    }
    if (!itensPedido || itensPedido.length === 0) {
      return { success: false, message: "Pedido não possui itens" };
    }
    const { data: configData, error: configError } = await supabase2.from("tipo_controle_estoque_config").select("bloqueia_sem_estoque").eq("empresa_id", empresaId).single();
    const bloqueiaEstoque = (configData == null ? void 0 : configData.bloqueia_sem_estoque) || false;
    let erros = [];
    for (const item of itensPedido) {
      const observacao = origem === "pedido" ? "pedido" : "faturamento";
      const resultado = await atualizarEstoqueProduto(
        supabase2,
        empresaId,
        usuarioId,
        item.produto_id,
        item.quantidade,
        tipoMovimento,
        observacao
      );
      if (!resultado.success && bloqueiaEstoque) {
        return resultado;
      } else if (!resultado.success) {
        erros.push(resultado.message);
        console.warn(`Aviso: ${resultado.message} para o produto ID ${item.produto_id}`);
      }
    }
    if (erros.length > 0) {
      return {
        success: true,
        message: `Estoque atualizado com avisos: ${erros.join(", ")}. Alguns produtos ficaram com estoque negativo.`
      };
    }
    return { success: true, message: "Estoque atualizado com sucesso para todos os itens" };
  } catch (error) {
    console.error("Erro ao atualizar estoque por pedido:", error);
    return { success: false, message: `Erro ao atualizar estoque por pedido: ${error.message}` };
  }
};
const FaturamentoPage = () => {
  var _a2;
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = reactExports.useState(true);
  const [pedidos, setPedidos] = reactExports.useState([]);
  const [filteredPedidos, setFilteredPedidos] = reactExports.useState([]);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [showFilters, setShowFilters] = reactExports.useState(false);
  const [statusFilter, setStatusFilter] = reactExports.useState("todos");
  const [dataInicioFilter, setDataInicioFilter] = reactExports.useState("");
  const [dataFimFilter, setDataFimFilter] = reactExports.useState("");
  const [vendedorFilter, setVendedorFilter] = reactExports.useState("todos");
  const [vendedores, setVendedores] = reactExports.useState([]);
  const [showModal, setShowModal] = reactExports.useState(false);
  const [pedidoSelecionado, setPedidoSelecionado] = reactExports.useState(null);
  const [isFaturando, setIsFaturando] = reactExports.useState(false);
  const [observacaoFaturamento, setObservacaoFaturamento] = reactExports.useState("");
  reactExports.useEffect(() => {
    loadPedidos();
    loadVendedores();
  }, []);
  reactExports.useEffect(() => {
    applyFilters();
  }, [pedidos, searchTerm, statusFilter, dataInicioFilter, dataFimFilter, vendedorFilter]);
  const loadVendedores = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data, error } = await supabase.from("usuarios").select(`
          id,
          nome,
          tipo_user_config:tipo_user_config_id(tipo)
        `).eq("empresa_id", usuarioData.empresa_id).order("nome");
      if (error) throw error;
      setVendedores(data || []);
    } catch (error) {
      console.error("Erro ao carregar vendedores:", error);
    }
  };
  const loadPedidos = async () => {
    try {
      setIsLoading(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: pedidosData, error } = await supabase.from("pedidos").select(`
          *,
          empresa:empresas(nome),
          cliente:clientes(nome, telefone)
        `).eq("empresa_id", usuarioData.empresa_id).order("created_at", { ascending: false });
      if (error) throw error;
      if (!pedidosData || pedidosData.length === 0) {
        setPedidos([]);
        setFilteredPedidos([]);
        return;
      }
      const usuarioIds = [...new Set(pedidosData.filter((p2) => p2.usuario_id).map((p2) => p2.usuario_id))];
      let usuariosMap = {};
      if (usuarioIds.length > 0) {
        const { data: usuariosData, error: usuariosError } = await supabase.from("usuarios").select("id, nome").in("id", usuarioIds);
        if (!usuariosError && usuariosData) {
          usuariosMap = usuariosData.reduce((acc, user) => {
            acc[user.id] = user.nome;
            return acc;
          }, {});
        }
      }
      const formattedPedidos = pedidosData.map((pedido) => {
        var _a3;
        return {
          ...pedido,
          usuario_nome: usuarioIds.includes(pedido.usuario_id) ? usuariosMap[pedido.usuario_id] : void 0,
          empresa_nome: (_a3 = pedido.empresa) == null ? void 0 : _a3.nome
        };
      });
      setPedidos(formattedPedidos);
      setFilteredPedidos(formattedPedidos);
    } catch (error) {
      console.error("Erro ao carregar pedidos:", error);
      B.error("Erro ao carregar pedidos");
    } finally {
      setIsLoading(false);
    }
  };
  const applyFilters = () => {
    let filtered = [...pedidos];
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase();
      filtered = filtered.filter(
        (pedido) => {
          var _a3, _b2, _c, _d;
          return ((_b2 = (_a3 = pedido.cliente) == null ? void 0 : _a3.nome) == null ? void 0 : _b2.toLowerCase().includes(searchLower)) || ((_c = pedido.numero) == null ? void 0 : _c.toLowerCase().includes(searchLower)) || ((_d = pedido.usuario_nome) == null ? void 0 : _d.toLowerCase().includes(searchLower));
        }
      );
    }
    if (statusFilter !== "todos") {
      if (statusFilter === "faturado") {
        filtered = filtered.filter((pedido) => pedido.status === "entregue" && pedido.data_faturamento);
      } else if (statusFilter === "pendente") {
        filtered = filtered.filter(
          (pedido) => pedido.status === "pendente" || pedido.status === "confirmado" || pedido.status === "em_preparo" || pedido.status === "em_entrega" || pedido.status === "entregue" && !pedido.data_faturamento
        );
      } else if (statusFilter === "cancelado") {
        filtered = filtered.filter((pedido) => pedido.status === "cancelado");
      }
    }
    if (dataInicioFilter) {
      const dataInicio = new Date(dataInicioFilter);
      dataInicio.setHours(0, 0, 0, 0);
      filtered = filtered.filter((pedido) => new Date(pedido.created_at) >= dataInicio);
    }
    if (dataFimFilter) {
      const dataFim = new Date(dataFimFilter);
      dataFim.setHours(23, 59, 59, 999);
      filtered = filtered.filter((pedido) => new Date(pedido.created_at) <= dataFim);
    }
    if (vendedorFilter !== "todos") {
      filtered = filtered.filter((pedido) => pedido.usuario_id === vendedorFilter);
    }
    setFilteredPedidos(filtered);
  };
  const formatCurrency = (value) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(value);
  };
  const formatDate = (dateString) => {
    if (!dateString) return "";
    const date = new Date(dateString);
    return date.toLocaleDateString("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      year: "2-digit"
    });
  };
  const formatTime = (dateString) => {
    if (!dateString) return "";
    const date = new Date(dateString);
    return date.toLocaleTimeString("pt-BR", {
      hour: "2-digit",
      minute: "2-digit"
    });
  };
  const getStatusColor = (status, dataFaturamento) => {
    if (dataFaturamento) {
      return "bg-green-500/10 text-green-500";
    }
    if (status === "faturado") {
      return "bg-green-500/10 text-green-500";
    }
    switch (status) {
      case "pendente":
        return "bg-yellow-500/10 text-yellow-500";
      case "confirmado":
        return "bg-blue-500/10 text-blue-500";
      case "em_preparo":
        return "bg-orange-500/10 text-orange-500";
      case "em_entrega":
        return "bg-purple-500/10 text-purple-500";
      case "entregue":
        return "bg-teal-500/10 text-teal-500";
      case "cancelado":
        return "bg-red-500/10 text-red-500";
      default:
        return "bg-gray-500/10 text-gray-500";
    }
  };
  const getStatusText = (status, dataFaturamento) => {
    if (dataFaturamento) {
      return "FATURADO";
    }
    if (status === "faturado") {
      return "FATURADO";
    }
    switch (status) {
      case "pendente":
        return "Pendente";
      case "confirmado":
        return "Confirmado";
      case "em_preparo":
        return "Em Preparo";
      case "em_entrega":
        return "Em Entrega";
      case "entregue":
        return "Entregue";
      case "cancelado":
        return "Cancelado";
      default:
        return "Pendente";
    }
  };
  const handleFaturar = (pedido) => {
    setPedidoSelecionado(pedido);
    setObservacaoFaturamento("");
    setShowModal(true);
  };
  const handleEditar = async (pedido) => {
    try {
      navigate(`/dashboard/editar-pedido/${pedido.id}`);
    } catch (error) {
      console.error("Erro ao abrir pedido para edição:", error);
      B.error(`Erro ao abrir pedido: ${error.message}`);
    }
  };
  const handleConfirmarFaturamento = async () => {
    if (!pedidoSelecionado) return;
    setIsFaturando(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const dataFaturamento = (/* @__PURE__ */ new Date()).toISOString();
      const { error } = await supabase.from("pedidos").update({
        status: "faturado",
        data_faturamento: dataFaturamento,
        observacao_faturamento: observacaoFaturamento || null
      }).eq("id", pedidoSelecionado.id);
      if (error) throw error;
      const tipoControle = await verificarTipoControleEstoque(supabase, pedidoSelecionado.empresa_id);
      if (tipoControle === "faturamento") {
        const resultado = await atualizarEstoquePorPedido(
          supabase,
          pedidoSelecionado.id,
          pedidoSelecionado.empresa_id,
          userData.user.id,
          "saida",
          "faturamento"
        );
        if (!resultado.success) {
          console.warn("Aviso ao atualizar estoque:", resultado.message);
          B.warning(resultado.message);
        }
      }
      B.success("Pedido faturado com sucesso!");
      setShowModal(false);
      loadPedidos();
    } catch (error) {
      console.error("Erro ao faturar pedido:", error);
      B.error(`Erro ao faturar pedido: ${error.message}`);
    } finally {
      setIsFaturando(false);
    }
  };
  const calcularTotalFiltrado = () => {
    return filteredPedidos.reduce((total, pedido) => total + pedido.valor_total, 0);
  };
  const gerarLinkPedido = async (pedido) => {
    try {
      const { data: empresaData, error: empresaError } = await supabase.from("empresas").select("documento").eq("id", pedido.empresa_id).single();
      if (empresaError || !empresaData || !empresaData.documento) {
        throw new Error("Não foi possível obter o CNPJ da empresa");
      }
      const cnpjLimpo = empresaData.documento.replace(/[^\d]/g, "");
      const codigoPedido = `${cnpjLimpo}${pedido.numero}`;
      const baseUrl = window.location.origin;
      const url = `${baseUrl}/pedido/${codigoPedido}`;
      return url;
    } catch (error) {
      console.error("Erro ao gerar link do pedido:", error);
      B.error(`Erro ao gerar link: ${error.message}`);
      return null;
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "container mx-auto px-4 py-8", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center mb-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl font-semibold text-white", children: "Faturamento" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-lg font-medium text-primary-400", children: [
        "Total: ",
        formatCurrency(calcularTotalFiltrado())
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6 mb-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col md:flex-row gap-4 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative flex-1", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              placeholder: "Buscar por cliente, número do pedido ou vendedor...",
              value: searchTerm,
              onChange: (e) => setSearchTerm(e.target.value),
              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18, className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setShowFilters(!showFilters),
            className: "px-4 py-2 rounded-lg bg-gray-800 text-gray-400 hover:text-white transition-colors flex items-center gap-2",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Filter, { size: 18 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Filtros" })
            ]
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showFilters && /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { height: 0, opacity: 0 },
          animate: { height: "auto", opacity: 1 },
          exit: { height: 0, opacity: 0 },
          className: "overflow-hidden",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800/50 border border-gray-700 rounded-lg p-4 space-y-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Status" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "select",
                {
                  value: statusFilter,
                  onChange: (e) => setStatusFilter(e.target.value),
                  className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "todos", children: "Todas" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "faturado", children: "Faturado" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "pendente", children: "Pendentes" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "cancelado", children: "Cancelados" })
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Data Inicial" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "date",
                  value: dataInicioFilter,
                  onChange: (e) => setDataInicioFilter(e.target.value),
                  className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Data Final" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "date",
                  value: dataFimFilter,
                  onChange: (e) => setDataFimFilter(e.target.value),
                  className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Vendedor" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "select",
                {
                  value: vendedorFilter,
                  onChange: (e) => setVendedorFilter(e.target.value),
                  className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "todos", children: "Todos" }),
                    vendedores.map((vendedor) => /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: vendedor.id, children: vendedor.nome }, vendedor.id))
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-end gap-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => {
                  setStatusFilter("todos");
                  setDataInicioFilter("");
                  setDataFimFilter("");
                  setVendedorFilter("todos");
                },
                className: "px-4 py-2 rounded-lg bg-gray-700 text-white hover:bg-gray-600 transition-colors",
                children: "Limpar Filtros"
              }
            ) })
          ] }) })
        }
      ) })
    ] }),
    isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-4", children: [1, 2, 3, 4].map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 bg-background-card rounded-lg border border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-start", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 w-2/3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-5 w-32 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-40 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-36 bg-gray-700 rounded animate-pulse" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 w-1/3 flex flex-col items-end", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-5 w-20 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-28 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-8 w-24 bg-gray-700 rounded animate-pulse" })
      ] })
    ] }) }, item)) }) : filteredPedidos.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-8 text-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCircle, { size: 32, className: "text-gray-500 mx-auto mb-3" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: "Nenhum pedido encontrado" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-4", children: "Tente ajustar os filtros de busca" })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-4 max-h-[calc(100vh-350px)] overflow-y-auto custom-scrollbar pr-2", children: filteredPedidos.map((pedido) => {
      var _a3;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { opacity: 0, y: 20 },
          animate: { opacity: 1, y: 0 },
          className: "p-4 bg-background-card rounded-lg border border-gray-800",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col md:flex-row justify-between items-start gap-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 mb-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white font-medium", children: [
                  "#",
                  pedido.numero
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `px-2 py-0.5 rounded-full text-xs font-medium ${getStatusColor(pedido.status, pedido.data_faturamento)}`, children: getStatusText(pedido.status, pedido.data_faturamento) })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-gray-400 text-sm", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                  "Cliente: ",
                  ((_a3 = pedido.cliente) == null ? void 0 : _a3.nome) || "Cliente"
                ] })
              ] }),
              pedido.usuario_nome && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-gray-400 text-sm mt-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                  "Vendedor: ",
                  pedido.usuario_nome
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-gray-500 text-xs mt-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Calendar, { size: 12 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: formatDate(pedido.created_at) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Clock, { size: 12, className: "ml-1" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: formatTime(pedido.created_at) })
              ] }),
              pedido.data_faturamento && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-green-500 text-xs mt-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { size: 12 }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                  "Faturado em: ",
                  formatDate(pedido.data_faturamento),
                  " às ",
                  formatTime(pedido.data_faturamento)
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-end", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-primary-400 font-medium text-lg", children: formatCurrency(pedido.valor_total) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2 mt-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "button",
                  {
                    onClick: () => handleEditar(pedido),
                    className: "px-3 py-1.5 rounded-lg bg-blue-500 text-white hover:bg-blue-600 transition-colors flex items-center gap-1.5",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(SquarePen, { size: 16 }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Editar" })
                    ]
                  }
                ),
                pedido.status === "entregue" && !pedido.data_faturamento && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "button",
                  {
                    onClick: () => handleFaturar(pedido),
                    className: "px-3 py-1.5 rounded-lg bg-green-500 text-white hover:bg-green-600 transition-colors flex items-center gap-1.5",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(DollarSign, { size: 16 }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Faturar" })
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "button",
                  {
                    onClick: async () => {
                      const url = await gerarLinkPedido(pedido);
                      if (url) {
                        window.open(url, "_blank");
                      }
                    },
                    className: "px-3 py-1.5 rounded-lg bg-purple-500 text-white hover:bg-purple-600 transition-colors flex items-center gap-1.5",
                    title: "Abrir nota de pedido em nova página",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { size: 16 }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "hidden sm:inline", children: "Abrir" })
                    ]
                  }
                )
              ] })
            ] })
          ] })
        },
        pedido.id
      );
    }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showModal && pedidoSelecionado && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        exit: { opacity: 0 },
        className: "fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4",
        onClick: () => setShowModal(false),
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          motion.div,
          {
            initial: { scale: 0.9, opacity: 0 },
            animate: { scale: 1, opacity: 1 },
            exit: { scale: 0.9, opacity: 0 },
            className: "bg-background-card rounded-lg p-6 w-full max-w-md",
            onClick: (e) => e.stopPropagation(),
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center mb-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Confirmar Faturamento" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => setShowModal(false),
                    className: "text-gray-400 hover:text-white",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-300 mb-2", children: "Você está prestes a faturar o pedido:" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 p-3 rounded-lg", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-white", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Pedido:" }),
                    " #",
                    pedidoSelecionado.numero
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-white", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Cliente:" }),
                    " ",
                    ((_a2 = pedidoSelecionado.cliente) == null ? void 0 : _a2.nome) || "Cliente"
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-white", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Valor:" }),
                    " ",
                    formatCurrency(pedidoSelecionado.valor_total)
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Observação (opcional)" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "textarea",
                  {
                    value: observacaoFaturamento,
                    onChange: (e) => setObservacaoFaturamento(e.target.value),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    rows: 3,
                    placeholder: "Adicione uma observação sobre este faturamento"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-end gap-3", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => setShowModal(false),
                    className: "px-4 py-2 rounded-lg bg-gray-800 text-white hover:bg-gray-700 transition-colors",
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: handleConfirmarFaturamento,
                    disabled: isFaturando,
                    className: "px-4 py-2 rounded-lg bg-green-500 text-white hover:bg-green-600 transition-colors flex items-center gap-2 disabled:opacity-70 disabled:cursor-not-allowed",
                    children: isFaturando ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Processando..." })
                    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(DollarSign, { size: 18 }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Confirmar Faturamento" })
                    ] })
                  }
                )
              ] })
            ]
          }
        )
      }
    ) })
  ] });
};
const ProdutoSeletorModal = ({
  isOpen,
  onClose,
  onSelect,
  empresaId
}) => {
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [produtos, setProdutos] = reactExports.useState([]);
  const [filteredProdutos, setFilteredProdutos] = reactExports.useState([]);
  const [grupos, setGrupos] = reactExports.useState([]);
  const [selectedGrupo, setSelectedGrupo] = reactExports.useState(null);
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [fotoAmpliada, setFotoAmpliada] = reactExports.useState(null);
  const [produtoEmVisualizacao, setProdutoEmVisualizacao] = reactExports.useState(null);
  const [fotoAtualIndex, setFotoAtualIndex] = reactExports.useState(0);
  const [produtosEstoque, setProdutosEstoque] = reactExports.useState({});
  const [unidadesMedida, setUnidadesMedida] = reactExports.useState([]);
  const searchInputRef = reactExports.useRef(null);
  const modalRef = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (isOpen && empresaId) {
      loadGrupos();
      loadProdutos();
      loadUnidadesMedida();
      loadProdutosEstoque();
      setTimeout(() => {
        if (searchInputRef.current) {
          searchInputRef.current.focus();
        }
      }, 100);
    }
  }, [isOpen, empresaId]);
  reactExports.useEffect(() => {
    if (!produtos.length) return;
    let filtered = [...produtos];
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      filtered = filtered.filter(
        (produto) => produto.nome.toLowerCase().includes(term) || produto.codigo.toLowerCase().includes(term) || produto.descricao && produto.descricao.toLowerCase().includes(term)
      );
    }
    if (selectedGrupo) {
      filtered = filtered.filter((produto) => produto.grupo_id === selectedGrupo);
    }
    setFilteredProdutos(filtered);
  }, [searchTerm, selectedGrupo, produtos]);
  reactExports.useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === "Escape") {
        if (fotoAmpliada) {
          setFotoAmpliada(null);
        } else if (produtoEmVisualizacao) {
          setProdutoEmVisualizacao(null);
          setFotoAtualIndex(0);
        } else {
          e.preventDefault();
          onClose();
        }
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [onClose, fotoAmpliada, produtoEmVisualizacao]);
  const loadGrupos = async () => {
    try {
      const { data, error } = await supabase.from("grupos").select("id, nome").eq("empresa_id", empresaId).eq("deletado", false).order("nome");
      if (error) throw error;
      setGrupos(data || []);
    } catch (error) {
      console.error("Erro ao carregar grupos:", error);
    }
  };
  const loadProdutos = async () => {
    try {
      setIsLoading(true);
      const { data: produtosData, error: produtosError } = await supabase.from("produtos").select(`
          id,
          nome,
          preco,
          codigo,
          codigo_barras,
          descricao,
          grupo_id,
          promocao,
          tipo_desconto,
          valor_desconto,
          estoque_inicial,
          desconto_quantidade,
          quantidade_minima,
          tipo_desconto_quantidade,
          valor_desconto_quantidade,
          unidade_medida_id,
          ncm,
          cfop,
          origem_produto,
          situacao_tributaria,
          cst_icms,
          csosn_icms,
          cst_pis,
          cst_cofins,
          cst_ipi,
          aliquota_icms,
          aliquota_pis,
          aliquota_cofins,
          aliquota_ipi,
          valor_ipi,
          cest,
          peso_liquido,
          unidade_medida:unidade_medida_id (
            id,
            sigla,
            nome
          )
        `).eq("empresa_id", empresaId).eq("ativo", true).eq("deletado", false).order("nome");
      if (produtosError) {
        console.error("Erro ao buscar produtos:", produtosError);
        throw produtosError;
      }
      const { data: fotosData, error: fotosError } = await supabase.from("produto_fotos").select("id, produto_id, url, principal").eq("empresa_id", empresaId);
      if (fotosError) throw fotosError;
      const produtosComFotos = (produtosData == null ? void 0 : produtosData.map((produto) => {
        const fotosDoProduto = (fotosData == null ? void 0 : fotosData.filter((foto) => foto.produto_id === produto.id)) || [];
        return {
          ...produto,
          fotos: fotosDoProduto
        };
      })) || [];
      setProdutos(produtosComFotos);
      setFilteredProdutos(produtosComFotos);
    } catch (error) {
      console.error("Erro ao carregar produtos:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const loadUnidadesMedida = async () => {
    try {
      const { data, error } = await supabase.from("unidade_medida").select("id, sigla, nome").eq("empresa_id", empresaId).order("nome");
      if (error) throw error;
      setUnidadesMedida(data || []);
    } catch (error) {
      console.error("Erro ao carregar unidades de medida:", error);
    }
  };
  const loadProdutosEstoque = async () => {
    try {
      const { data: produtosData, error: produtosError } = await supabase.from("produtos").select("id").eq("empresa_id", empresaId).eq("deletado", false).eq("ativo", true);
      if (produtosError) throw produtosError;
      if (!produtosData || produtosData.length === 0) return;
      const estoqueInfo = {};
      for (const produto of produtosData) {
        const { data: movimentosData, error: movimentosError } = await supabase.from("produto_estoque").select("tipo_movimento, quantidade").eq("produto_id", produto.id).eq("empresa_id", empresaId);
        if (movimentosError) {
          console.error(`Erro ao carregar movimentos do produto ${produto.id}:`, movimentosError);
          continue;
        }
        let saldoTotal = 0;
        if (movimentosData) {
          movimentosData.forEach((movimento) => {
            if (movimento.tipo_movimento === "entrada") {
              saldoTotal += parseFloat(movimento.quantidade);
            } else {
              saldoTotal -= parseFloat(movimento.quantidade);
            }
          });
        }
        const { data: pedidosData, error: pedidosError } = await supabase.from("pedidos_itens").select(`
            quantidade,
            pedido:pedido_id (
              status
            )
          `).eq("produto_id", produto.id);
        if (pedidosError) {
          console.error(`Erro ao carregar pedidos do produto ${produto.id}:`, pedidosError);
          continue;
        }
        let quantidadeNaoFaturada = 0;
        if (pedidosData && pedidosData.length > 0) {
          pedidosData.forEach((item) => {
            if (item.pedido && item.pedido.status !== "faturado") {
              quantidadeNaoFaturada += parseFloat(item.quantidade);
            }
          });
        }
        estoqueInfo[produto.id] = {
          total: saldoTotal,
          naoFaturado: quantidadeNaoFaturada
        };
      }
      setProdutosEstoque(estoqueInfo);
    } catch (error) {
      console.error("Erro ao carregar estoque dos produtos:", error);
    }
  };
  const formatarEstoque = (valor, produto) => {
    var _a2;
    if (((_a2 = produto.unidade_medida) == null ? void 0 : _a2.sigla) === "KG") {
      return valor.toFixed(3);
    } else {
      return Math.floor(valor).toString();
    }
  };
  const handleSelectProduto = (produto) => {
    onSelect(produto);
    setTimeout(() => {
      onClose();
    }, 0);
  };
  const handleGrupoClick = (grupoId) => {
    setSelectedGrupo(selectedGrupo === grupoId ? null : grupoId);
  };
  const handleNextFoto = () => {
    var _a2;
    if (!((_a2 = produtoEmVisualizacao == null ? void 0 : produtoEmVisualizacao.fotos) == null ? void 0 : _a2.length)) return;
    setFotoAtualIndex((prev) => (prev + 1) % produtoEmVisualizacao.fotos.length);
  };
  const handlePrevFoto = () => {
    var _a2;
    if (!((_a2 = produtoEmVisualizacao == null ? void 0 : produtoEmVisualizacao.fotos) == null ? void 0 : _a2.length)) return;
    setFotoAtualIndex((prev) => (prev - 1 + produtoEmVisualizacao.fotos.length) % produtoEmVisualizacao.fotos.length);
  };
  const getFotoPrincipal = (produto) => {
    if (!produto.fotos || produto.fotos.length === 0) return null;
    const fotoPrincipal = produto.fotos.find((foto) => foto.principal);
    return fotoPrincipal || produto.fotos[0];
  };
  const calcularPrecoFinal = (produto) => {
    if (!produto.promocao || !produto.valor_desconto) return produto.preco;
    if (produto.tipo_desconto === "percentual") {
      return produto.preco * (1 - produto.valor_desconto / 100);
    } else {
      return produto.preco - produto.valor_desconto;
    }
  };
  const formatarPreco2 = (valor) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(valor);
  };
  if (!isOpen) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "div",
    {
      className: "fixed inset-0 z-50 bg-black/80 flex items-center justify-center",
      onClick: (e) => e.stopPropagation(),
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "div",
          {
            ref: modalRef,
            className: "w-full h-full bg-gray-900 flex flex-col",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 border-b border-gray-800 flex items-center justify-between", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: (e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      onClose();
                    },
                    type: "button",
                    className: "p-2 rounded-full bg-gray-800 text-gray-400 hover:text-white",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Selecionar Produto" })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 overflow-hidden flex flex-col", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 border-b border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18, className: "text-gray-500" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      ref: searchInputRef,
                      type: "text",
                      value: searchTerm,
                      onChange: (e) => setSearchTerm(e.target.value),
                      className: "w-full bg-gray-800 border border-gray-700 rounded-lg py-3 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "Buscar produto por nome ou código..."
                    }
                  )
                ] }) }),
                grupos.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 border-b border-gray-800 overflow-x-auto custom-scrollbar", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex gap-2", children: grupos.map((grupo) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => handleGrupoClick(grupo.id),
                    className: `px-3 py-1.5 rounded-full text-sm font-medium whitespace-nowrap ${selectedGrupo === grupo.id ? "bg-primary-500 text-white" : "bg-gray-800 text-gray-300 hover:bg-gray-700"}`,
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1.5", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Tag, { size: 14 }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: grupo.nome })
                    ] })
                  },
                  grupo.id
                )) }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-y-auto custom-scrollbar p-4", children: isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-center h-full", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 border-2 border-primary-500/30 border-t-primary-500 rounded-full animate-spin" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "ml-2 text-gray-400", children: "Carregando produtos..." })
                ] }) : filteredProdutos.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center justify-center h-full text-gray-400", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(ShoppingBag, { size: 48, className: "mb-2 opacity-50" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Nenhum produto encontrado" }),
                  searchTerm && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm mt-1", children: "Tente outro termo de busca" }),
                  selectedGrupo && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm mt-1", children: "Ou selecione outro grupo" })
                ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-2", children: filteredProdutos.map((produto) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "div",
                  {
                    onClick: () => handleSelectProduto(produto),
                    className: "bg-gray-800 rounded-lg overflow-hidden border border-gray-700 hover:border-gray-600 transition-colors cursor-pointer flex flex-col h-full",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "aspect-square bg-gray-900 relative h-24", children: [
                        getFotoPrincipal(produto) ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "img",
                          {
                            src: getFotoPrincipal(produto).url,
                            alt: produto.nome,
                            className: "w-full h-full object-cover"
                          }
                        ) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Image, { size: 24, className: "text-gray-700" }) }),
                        produto.promocao && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-1 right-1 bg-red-500 text-white text-xs font-bold px-1 py-0.5 rounded", children: produto.tipo_desconto === "percentual" ? `-${produto.valor_desconto}%` : formatarPreco2(produto.valor_desconto || 0) })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-2 flex-1 flex flex-col", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white text-sm font-medium line-clamp-1", children: produto.nome }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-xs", children: produto.codigo }),
                          produto.unidade_medida && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs px-2 py-0.5 rounded-full bg-gray-700 text-gray-300", children: produto.unidade_medida.sigla })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-1", children: produto.promocao ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400 line-through text-xs", children: formatarPreco2(produto.preco) }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 font-bold text-sm ml-1", children: formatarPreco2(calcularPrecoFinal(produto)) })
                        ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 font-bold text-sm", children: formatarPreco2(produto.preco) }) }),
                        produtosEstoque[produto.id] && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-1 text-xs text-gray-300", children: [
                          "Estoque: ",
                          formatarEstoque(produtosEstoque[produto.id].total, produto)
                        ] }),
                        produto.desconto_quantidade && produto.quantidade_minima && (produto.tipo_desconto_quantidade === "percentual" && produto.percentual_desconto_quantidade || produto.tipo_desconto_quantidade === "valor" && produto.valor_desconto_quantidade) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-1 text-xs text-green-400", children: [
                          produto.quantidade_minima,
                          "+ unid:",
                          produto.tipo_desconto_quantidade === "percentual" ? ` -${produto.percentual_desconto_quantidade}%` : ` -${formatarPreco2(produto.valor_desconto_quantidade)}`
                        ] })
                      ] })
                    ]
                  },
                  produto.id
                )) }) })
              ] })
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: produtoEmVisualizacao && /* @__PURE__ */ jsxRuntimeExports.jsxs(
          motion.div,
          {
            initial: { opacity: 0 },
            animate: { opacity: 1 },
            exit: { opacity: 0 },
            className: "fixed inset-0 z-50 bg-black/90 flex flex-col",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 flex items-center justify-between", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: (e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      setProdutoEmVisualizacao(null);
                    },
                    type: "button",
                    className: "p-2 rounded-full bg-gray-800 text-gray-400 hover:text-white",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronLeft, { size: 20 })
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: produtoEmVisualizacao.nome }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10" }),
                " "
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 flex flex-col", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "relative flex-1 flex items-center justify-center", children: produtoEmVisualizacao.fotos && produtoEmVisualizacao.fotos.length > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "div",
                    {
                      className: "w-full h-full flex items-center justify-center",
                      onClick: () => setFotoAmpliada(produtoEmVisualizacao.fotos[fotoAtualIndex].url),
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "img",
                        {
                          src: produtoEmVisualizacao.fotos[fotoAtualIndex].url,
                          alt: produtoEmVisualizacao.nome,
                          className: "max-w-full max-h-full object-contain"
                        }
                      )
                    }
                  ),
                  produtoEmVisualizacao.fotos.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: (e) => {
                          e.stopPropagation();
                          handlePrevFoto();
                        },
                        className: "absolute left-4 p-2 rounded-full bg-black/50 text-white hover:bg-black/70",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronLeft, { size: 24 })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: (e) => {
                          e.stopPropagation();
                          handleNextFoto();
                        },
                        className: "absolute right-4 p-2 rounded-full bg-black/50 text-white hover:bg-black/70",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronLeft, { size: 24, className: "transform rotate-180" })
                      }
                    )
                  ] }),
                  produtoEmVisualizacao.fotos.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute bottom-4 left-0 right-0 flex justify-center gap-2", children: produtoEmVisualizacao.fotos.map((_2, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      onClick: (e) => {
                        e.stopPropagation();
                        setFotoAtualIndex(index2);
                      },
                      className: `w-2 h-2 rounded-full ${index2 === fotoAtualIndex ? "bg-white" : "bg-white/30"}`
                    },
                    index2
                  )) })
                ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Image, { size: 64, className: "text-gray-700 mx-auto mb-4" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Sem imagens disponíveis" })
                ] }) }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 bg-gray-900 border-t border-gray-800", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-start mb-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-400 text-sm", children: [
                          "Código: ",
                          produtoEmVisualizacao.codigo
                        ] }),
                        produtoEmVisualizacao.unidade_medida && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs px-2 py-0.5 rounded-full bg-gray-700 text-gray-300", children: produtoEmVisualizacao.unidade_medida.sigla })
                      ] }),
                      produtosEstoque[produtoEmVisualizacao.id] && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap items-center gap-2 mt-2", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "px-2 py-0.5 text-xs font-medium bg-gray-700 text-gray-300 rounded-full flex items-center gap-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(Package, { size: 12 }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                            "Estoque: ",
                            formatarEstoque(produtosEstoque[produtoEmVisualizacao.id].total, produtoEmVisualizacao)
                          ] })
                        ] }),
                        produtosEstoque[produtoEmVisualizacao.id].naoFaturado > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "px-2 py-0.5 text-xs font-medium bg-yellow-900/30 text-yellow-400 rounded-full flex items-center gap-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCircle, { size: 12 }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                            "Pendente: ",
                            formatarEstoque(produtosEstoque[produtoEmVisualizacao.id].naoFaturado, produtoEmVisualizacao)
                          ] })
                        ] })
                      ] }),
                      produtoEmVisualizacao.desconto_quantidade && produtoEmVisualizacao.quantidade_minima && produtoEmVisualizacao.valor_desconto_quantidade && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-2 text-sm text-green-400 bg-green-900/20 px-2 py-1 rounded flex items-center gap-1", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Percent, { size: 14 }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                          "Desconto para ",
                          produtoEmVisualizacao.quantidade_minima,
                          "+ unidades:",
                          produtoEmVisualizacao.tipo_desconto_quantidade === "percentual" ? ` ${produtoEmVisualizacao.valor_desconto_quantidade}%` : ` ${formatarPreco2(produtoEmVisualizacao.valor_desconto_quantidade)}`
                        ] })
                      ] }),
                      produtoEmVisualizacao.descricao && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-300 mt-2", children: produtoEmVisualizacao.descricao })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-right", children: produtoEmVisualizacao.promocao ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 line-through", children: formatarPreco2(produtoEmVisualizacao.preco) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-primary-400 text-xl font-bold", children: formatarPreco2(calcularPrecoFinal(produtoEmVisualizacao)) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-green-400", children: produtoEmVisualizacao.tipo_desconto === "percentual" ? `${produtoEmVisualizacao.valor_desconto}% de desconto` : `${formatarPreco2(produtoEmVisualizacao.valor_desconto || 0)} de desconto` })
                    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-primary-400 text-xl font-bold", children: formatarPreco2(produtoEmVisualizacao.preco) }) })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "button",
                    {
                      onClick: (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        handleSelectProduto(produtoEmVisualizacao);
                      },
                      type: "button",
                      className: "w-full py-3 bg-primary-500 hover:bg-primary-600 text-white rounded-lg font-medium flex items-center justify-center gap-2",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 20 }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Selecionar Produto" })
                      ]
                    }
                  )
                ] })
              ] })
            ]
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: fotoAmpliada && /* @__PURE__ */ jsxRuntimeExports.jsxs(
          motion.div,
          {
            initial: { opacity: 0 },
            animate: { opacity: 1 },
            exit: { opacity: 0 },
            className: "fixed inset-0 z-50 bg-black/95 flex items-center justify-center",
            onClick: () => setFotoAmpliada(null),
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    setFotoAmpliada(null);
                  },
                  type: "button",
                  className: "absolute top-4 right-4 p-2 rounded-full bg-black/50 text-white hover:bg-black/70",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 24 })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "img",
                {
                  src: fotoAmpliada,
                  alt: "Foto ampliada",
                  className: "max-w-full max-h-full object-contain"
                }
              )
            ]
          }
        ) })
      ]
    }
  );
};
const EditarPedidoPage = () => {
  var _a2;
  const navigate = useNavigate();
  const { id: id2 } = useParams();
  const [isLoading, setIsLoading] = reactExports.useState(true);
  const [isSaving, setIsSaving] = reactExports.useState(false);
  const [pedido, setPedido] = reactExports.useState(null);
  const [produtos, setProdutos] = reactExports.useState([]);
  const [empresaId, setEmpresaId] = reactExports.useState("");
  const [clienteId, setClienteId] = reactExports.useState("");
  const [clienteData, setClienteData] = reactExports.useState(null);
  const [itensPedido, setItensPedido] = reactExports.useState([]);
  const [produtoSelecionado, setProdutoSelecionado] = reactExports.useState("");
  const [produtoSelecionadoObj, setProdutoSelecionadoObj] = reactExports.useState(null);
  const [quantidade, setQuantidade] = reactExports.useState(1);
  const [quantidadeVazia, setQuantidadeVazia] = reactExports.useState(false);
  const [observacao, setObservacao] = reactExports.useState("");
  const [valorTotal, setValorTotal] = reactExports.useState(0);
  const [valorSubtotal, setValorSubtotal] = reactExports.useState(0);
  const [valorDesconto, setValorDesconto] = reactExports.useState(0);
  const [valorAcrescimo, setValorAcrescimo] = reactExports.useState(0);
  const [isProdutoModalOpen, setIsProdutoModalOpen] = reactExports.useState(false);
  const [descontosPrazo, setDescontosPrazo] = reactExports.useState([]);
  const [descontosValor, setDescontosValor] = reactExports.useState([]);
  const [descontoPrazoSelecionado, setDescontoPrazoSelecionado] = reactExports.useState(null);
  const [descontoValorSelecionado, setDescontoValorSelecionado] = reactExports.useState(null);
  const [descontoPrazoObj, setDescontoPrazoObj] = reactExports.useState(null);
  const [descontoValorObj, setDescontoValorObj] = reactExports.useState(null);
  const [formasPagamento, setFormasPagamento] = reactExports.useState([]);
  const [formaPagamentoSelecionada, setFormaPagamentoSelecionada] = reactExports.useState(null);
  const [status, setStatus] = reactExports.useState("pendente");
  const [dataFaturamento, setDataFaturamento] = reactExports.useState(null);
  const [copiedFields, setCopiedFields] = reactExports.useState({});
  const [showReverterModal, setShowReverterModal] = reactExports.useState(false);
  reactExports.useEffect(() => {
    if (id2) {
      loadPedido(id2);
    }
  }, [id2]);
  reactExports.useEffect(() => {
    const subtotal = itensPedido.reduce((acc, item) => acc + item.valorTotal, 0);
    setValorSubtotal(subtotal);
    const total = subtotal + valorAcrescimo - valorDesconto;
    setValorTotal(total > 0 ? total : 0);
  }, [itensPedido, valorDesconto, valorAcrescimo]);
  reactExports.useEffect(() => {
    const subtotal = itensPedido.reduce((acc, item) => acc + item.valorTotal, 0);
    let novoValorDesconto = 0;
    let novoValorAcrescimo = 0;
    if (descontoPrazoObj) {
      const valor = subtotal * (descontoPrazoObj.percentual / 100);
      if (descontoPrazoObj.tipo === "desconto") {
        novoValorDesconto += valor;
      } else {
        novoValorAcrescimo += valor;
      }
    }
    if (descontoValorObj && subtotal >= descontoValorObj.valor_minimo) {
      const valor = subtotal * (descontoValorObj.percentual / 100);
      if (descontoValorObj.tipo === "desconto") {
        novoValorDesconto += valor;
      } else {
        novoValorAcrescimo += valor;
      }
    }
    setValorDesconto(novoValorDesconto);
    setValorAcrescimo(novoValorAcrescimo);
  }, [itensPedido, descontoPrazoObj, descontoValorObj]);
  const loadPedido = async (pedidoId) => {
    try {
      setIsLoading(true);
      const { data: pedidoData, error: pedidoError } = await supabase.from("pedidos").select(`
          *,
          itens:pedidos_itens(
            *,
            produto:produtos(*)
          )
        `).eq("id", pedidoId).single();
      if (pedidoError) throw pedidoError;
      if (!pedidoData) throw new Error("Pedido não encontrado");
      setPedido(pedidoData);
      setEmpresaId(pedidoData.empresa_id);
      setClienteId(pedidoData.cliente_id || "");
      setStatus(pedidoData.status || "pendente");
      setDataFaturamento(pedidoData.data_faturamento || null);
      setDescontoPrazoSelecionado(pedidoData.desconto_prazo_id || null);
      setDescontoValorSelecionado(pedidoData.desconto_valor_id || null);
      setFormaPagamentoSelecionada(pedidoData.forma_pagamento_id || null);
      const itens = pedidoData.itens.map((item) => {
        const valorOriginal = item.produto.preco;
        const temDesconto = item.valor_unitario < valorOriginal;
        let tipoDesconto = "";
        if (temDesconto) {
          if (item.produto.desconto_quantidade && item.produto.quantidade_minima && item.quantidade >= item.produto.quantidade_minima) {
            tipoDesconto = "quantidade";
          } else if (item.produto.promocao) {
            tipoDesconto = "promocao";
          }
        }
        return {
          id: item.id,
          produto: item.produto,
          quantidade: item.quantidade,
          observacao: item.observacao || "",
          valorUnitario: item.valor_unitario,
          valorTotal: item.valor_total,
          valorOriginal: temDesconto ? valorOriginal : void 0,
          temDesconto,
          tipoDesconto
        };
      });
      setItensPedido(itens);
      await loadProdutos(pedidoData.empresa_id);
      await loadFormasPagamento(pedidoData.empresa_id);
      if (pedidoData.cliente_id) {
        await loadDescontos(pedidoData.cliente_id, pedidoData.empresa_id);
        await loadClienteData(pedidoData.cliente_id);
      }
    } catch (error) {
      console.error("Erro ao carregar pedido:", error);
      B.error("Erro ao carregar pedido: " + error.message);
      navigate("/dashboard/faturamento");
    } finally {
      setIsLoading(false);
    }
  };
  const loadProdutos = async (empresaId2) => {
    try {
      const { data: produtosData } = await supabase.from("produtos").select(`
          id,
          nome,
          preco,
          codigo,
          descricao,
          promocao,
          tipo_desconto,
          valor_desconto,
          desconto_quantidade,
          quantidade_minima,
          tipo_desconto_quantidade,
          valor_desconto_quantidade,
          unidade_medida_id,
          unidade_medida:unidade_medida_id (
            id,
            sigla,
            nome
          )
        `).eq("empresa_id", empresaId2).eq("ativo", true).eq("deletado", false).order("nome");
      if (produtosData) {
        setProdutos(produtosData);
      }
    } catch (error) {
      console.error("Erro ao carregar produtos:", error);
    }
  };
  const loadFormasPagamento = async (empresaId2) => {
    try {
      console.log("Iniciando carregamento de formas de pagamento...");
      const { data: formasPagamentoData, error } = await supabase.from("forma_pagamento_opcoes").select("id, nome, tipo, max_parcelas").eq("ativo", true).order("nome");
      if (error) {
        console.error("Erro ao carregar formas de pagamento:", error);
        B.error("Erro ao carregar formas de pagamento");
        return;
      }
      if (formasPagamentoData && formasPagamentoData.length > 0) {
        console.log("Formas de pagamento carregadas com sucesso:", formasPagamentoData);
        setFormasPagamento(formasPagamentoData);
      } else {
        console.warn("Nenhuma forma de pagamento encontrada");
        B.warning("Nenhuma forma de pagamento encontrada");
      }
    } catch (error) {
      console.error("Erro ao carregar formas de pagamento:", error);
      B.error("Erro ao carregar formas de pagamento");
    }
  };
  const loadClienteData = async (clienteId2) => {
    try {
      console.log("Carregando dados do cliente ID:", clienteId2);
      const { data: clienteData2, error: clienteError } = await supabase.from("clientes").select("*").eq("id", clienteId2).single();
      if (clienteError) {
        console.error("Erro ao carregar dados do cliente:", clienteError);
        return;
      }
      if (clienteData2) {
        console.log("Dados do cliente carregados:", clienteData2);
        setClienteData(clienteData2);
      }
    } catch (error) {
      console.error("Erro ao carregar dados do cliente:", error);
    }
  };
  const loadDescontos = async (clienteId2, empresaId2) => {
    try {
      const { data: descontosPrazoData } = await supabase.from("cliente_descontos_prazo").select("id, prazo_dias, percentual, tipo").eq("cliente_id", clienteId2).eq("empresa_id", empresaId2).order("prazo_dias");
      if (descontosPrazoData) {
        setDescontosPrazo(descontosPrazoData);
        if (descontoPrazoSelecionado) {
          const desconto = descontosPrazoData.find((d2) => d2.id === descontoPrazoSelecionado);
          if (desconto) setDescontoPrazoObj(desconto);
        }
      }
      const { data: descontosValorData } = await supabase.from("cliente_descontos_valor").select("id, valor_minimo, percentual, tipo").eq("cliente_id", clienteId2).eq("empresa_id", empresaId2).order("valor_minimo");
      if (descontosValorData) {
        setDescontosValor(descontosValorData);
        if (descontoValorSelecionado) {
          const desconto = descontosValorData.find((d2) => d2.id === descontoValorSelecionado);
          if (desconto) setDescontoValorObj(desconto);
        }
      }
    } catch (error) {
      console.error("Erro ao carregar descontos:", error);
    }
  };
  const verificarEstoqueSuficiente = async (produtoId, quantidade2, quantidadeAtual = 0) => {
    try {
      const { data: configData, error: configError } = await supabase.from("tipo_controle_estoque_config").select("tipo_controle, bloqueia_sem_estoque").eq("empresa_id", empresaId).single();
      if (configError) {
        console.error("Erro ao verificar configurações de estoque:", configError);
        return true;
      }
      if (!(configData == null ? void 0 : configData.bloqueia_sem_estoque)) {
        return true;
      }
      if (configData.tipo_controle !== "pedidos") {
        return true;
      }
      const { data: movimentosData, error: movimentosError } = await supabase.from("produto_estoque").select("tipo_movimento, quantidade").eq("produto_id", produtoId).eq("empresa_id", empresaId);
      if (movimentosError) {
        console.error("Erro ao verificar estoque do produto:", movimentosError);
        B.error("Erro ao verificar estoque do produto");
        return true;
      }
      let saldoTotal = 0;
      if (movimentosData) {
        movimentosData.forEach((movimento) => {
          if (movimento.tipo_movimento === "entrada") {
            saldoTotal += parseFloat(movimento.quantidade);
          } else if (movimento.tipo_movimento === "saida" || movimento.tipo_movimento === "faturado") {
            saldoTotal -= parseFloat(movimento.quantidade);
          }
        });
      }
      const { data: pedidosData, error: pedidosError } = await supabase.from("pedidos_itens").select(`
          quantidade,
          pedido:pedidos(status)
        `).eq("produto_id", produtoId).eq("empresa_id", empresaId);
      if (pedidosError) {
        console.error("Erro ao verificar pedidos pendentes:", pedidosError);
        return true;
      }
      let quantidadeNaoFaturada = 0;
      if (pedidosData && pedidosData.length > 0) {
        pedidosData.forEach((item) => {
          if (item.pedido && item.pedido.status !== "faturado") {
            quantidadeNaoFaturada += parseFloat(item.quantidade);
          }
        });
      }
      quantidadeNaoFaturada -= quantidadeAtual;
      const estoqueDisponivel = saldoTotal - quantidadeNaoFaturada;
      if (estoqueDisponivel < quantidade2) {
        if (configData == null ? void 0 : configData.bloqueia_sem_estoque) {
          B.error(`Estoque insuficiente. Disponível: ${estoqueDisponivel.toFixed(2)}`);
          return false;
        } else {
          B.warning(`Estoque insuficiente (${estoqueDisponivel.toFixed(2)}), mas a operação será permitida. O estoque ficará negativo.`);
          return true;
        }
      }
      return true;
    } catch (error) {
      console.error("Erro ao verificar estoque:", error);
      return true;
    }
  };
  const calcularPrecoUnitario = (produto, quantidade2) => {
    let valorUnitario = produto.preco;
    let temDesconto = false;
    let valorOriginal = produto.preco;
    let tipoDesconto = "";
    if (produto.desconto_quantidade && produto.quantidade_minima && quantidade2 >= produto.quantidade_minima) {
      temDesconto = true;
      tipoDesconto = produto.tipo_desconto_quantidade || "";
      if (produto.tipo_desconto_quantidade === "percentual" && produto.percentual_desconto_quantidade) {
        valorUnitario = valorOriginal * (1 - produto.percentual_desconto_quantidade / 100);
      } else if (produto.tipo_desconto_quantidade === "valor" && produto.valor_desconto_quantidade) {
        valorUnitario = valorOriginal - produto.valor_desconto_quantidade;
      }
    } else if (produto.promocao) {
      temDesconto = true;
      tipoDesconto = produto.tipo_desconto || "";
      if (produto.tipo_desconto === "percentual" && produto.valor_desconto) {
        valorUnitario = valorOriginal * (1 - produto.valor_desconto / 100);
      } else if (produto.tipo_desconto === "valor" && produto.valor_desconto) {
        valorUnitario = valorOriginal - produto.valor_desconto;
      }
    }
    return {
      valorUnitario: Math.max(valorUnitario, 0),
      // Garantir que o valor não seja negativo
      temDesconto,
      valorOriginal,
      tipoDesconto
    };
  };
  const handleAddItem = async () => {
    if (!produtoSelecionadoObj || quantidade <= 0) return;
    try {
      const temEstoqueSuficiente = await verificarEstoqueSuficiente(produtoSelecionadoObj.id, quantidade);
      if (!temEstoqueSuficiente) {
        return;
      }
      const { data: configData, error: configError } = await supabase.from("pedidos_config").select("agrupar_itens").eq("empresa_id", empresaId).single();
      const { valorUnitario, temDesconto, valorOriginal, tipoDesconto } = calcularPrecoUnitario(produtoSelecionadoObj, quantidade);
      const valorTotal2 = valorUnitario * quantidade;
      const agruparItens = (configData == null ? void 0 : configData.agrupar_itens) === true;
      const itemExistente = agruparItens ? itensPedido.find(
        (item) => item.produto.id === produtoSelecionadoObj.id && item.observacao === observacao
      ) : null;
      if (agruparItens && itemExistente) {
        setItensPedido(itensPedido.map((item) => {
          if (item.id === itemExistente.id) {
            const novaQuantidade = item.quantidade + quantidade;
            const { valorUnitario: novoValorUnitario, temDesconto: novoTemDesconto, valorOriginal: novoValorOriginal, tipoDesconto: novoTipoDesconto } = calcularPrecoUnitario(item.produto, novaQuantidade);
            const novoValorTotal = novoValorUnitario * novaQuantidade;
            B.info(`Quantidade do item "${item.produto.nome}" atualizada para ${novaQuantidade}`);
            return {
              ...item,
              quantidade: novaQuantidade,
              valorUnitario: novoValorUnitario,
              valorTotal: novoValorTotal,
              valorOriginal: novoValorOriginal,
              temDesconto: novoTemDesconto,
              tipoDesconto: novoTipoDesconto
            };
          }
          return item;
        }));
      } else {
        const novoItem = {
          id: Date.now().toString(),
          // ID temporário
          produto: produtoSelecionadoObj,
          quantidade,
          observacao,
          valorUnitario,
          valorTotal: valorTotal2,
          valorOriginal,
          temDesconto,
          tipoDesconto
        };
        setItensPedido([...itensPedido, novoItem]);
      }
      setProdutoSelecionado("");
      setProdutoSelecionadoObj(null);
      setQuantidade(1);
      setQuantidadeVazia(false);
      setObservacao("");
    } catch (error) {
      console.error("Erro ao adicionar item:", error);
      B.error("Erro ao adicionar item ao pedido");
    }
  };
  const handleRemoveItem = (id22) => {
    setItensPedido(itensPedido.filter((item) => item.id !== id22));
  };
  const formatarPreco2 = (valor) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(valor);
  };
  const handleUpdateQuantidade = async (id22, novaQuantidade) => {
    if (novaQuantidade <= 0) return;
    try {
      const itemAtual = itensPedido.find((item) => item.id === id22);
      if (!itemAtual) return;
      if (novaQuantidade > itemAtual.quantidade) {
        const temEstoqueSuficiente = await verificarEstoqueSuficiente(
          itemAtual.produto.id,
          novaQuantidade,
          itemAtual.quantidade
        );
        if (!temEstoqueSuficiente) {
          return;
        }
      }
      setItensPedido(itensPedido.map((item) => {
        if (item.id === id22) {
          const { valorUnitario, temDesconto, valorOriginal, tipoDesconto } = calcularPrecoUnitario(item.produto, novaQuantidade);
          const valorTotal2 = valorUnitario * novaQuantidade;
          if (item.valorUnitario !== valorUnitario) {
            if (valorUnitario < item.valorUnitario) {
              B.info(`Desconto aplicado! Preço unitário: ${formatarPreco2(valorUnitario)}`);
            } else if (item.temDesconto) {
              B.info(`Desconto removido. Preço unitário: ${formatarPreco2(valorUnitario)}`);
            }
          }
          return {
            ...item,
            quantidade: novaQuantidade,
            valorUnitario,
            valorTotal: valorTotal2,
            valorOriginal,
            temDesconto,
            tipoDesconto
          };
        }
        return item;
      }));
    } catch (error) {
      console.error("Erro ao atualizar quantidade:", error);
      B.error("Erro ao atualizar quantidade do item");
    }
  };
  const handleSalvarPedido = async () => {
    if (itensPedido.length === 0) {
      B.error("Adicione pelo menos um item ao pedido");
      return;
    }
    try {
      setIsSaving(true);
      const subtotal = itensPedido.reduce((acc, item) => acc + item.valorTotal, 0);
      const { error: pedidoError } = await supabase.from("pedidos").update({
        // Mantemos apenas o cliente_id, não mais os campos cliente_nome e cliente_telefone
        valor_subtotal: subtotal,
        valor_desconto: valorDesconto,
        valor_acrescimo: valorAcrescimo,
        valor_total: valorTotal,
        status,
        // Manter o status atual
        desconto_prazo_id: descontoPrazoSelecionado,
        desconto_valor_id: descontoValorSelecionado,
        forma_pagamento_id: formaPagamentoSelecionada
      }).eq("id", id2);
      if (pedidoError) throw pedidoError;
      const { error: deleteError } = await supabase.from("pedidos_itens").delete().eq("pedido_id", id2);
      if (deleteError) throw deleteError;
      const itensPedidoData = itensPedido.map((item) => ({
        pedido_id: id2,
        produto_id: item.produto.id,
        quantidade: item.quantidade,
        valor_unitario: item.valorUnitario,
        valor_total: item.valorTotal,
        observacao: item.observacao,
        empresa_id: empresaId
      }));
      const { error: itensError } = await supabase.from("pedidos_itens").insert(itensPedidoData);
      if (itensError) throw itensError;
      B.success("Pedido atualizado com sucesso!");
      navigate("/dashboard/faturamento");
    } catch (error) {
      console.error("Erro ao atualizar pedido:", error);
      B.error("Erro ao atualizar pedido: " + error.message);
    } finally {
      setIsSaving(false);
    }
  };
  const handleFaturarPedido = async () => {
    if (itensPedido.length === 0) {
      B.error("Adicione pelo menos um item ao pedido");
      return;
    }
    try {
      setIsSaving(true);
      const subtotal = itensPedido.reduce((acc, item) => acc + item.valorTotal, 0);
      const dataFaturamento2 = (/* @__PURE__ */ new Date()).toISOString();
      const { error: pedidoError } = await supabase.from("pedidos").update({
        valor_subtotal: subtotal,
        valor_desconto: valorDesconto,
        valor_acrescimo: valorAcrescimo,
        valor_total: valorTotal,
        status: "faturado",
        data_faturamento: dataFaturamento2,
        desconto_prazo_id: descontoPrazoSelecionado,
        desconto_valor_id: descontoValorSelecionado,
        forma_pagamento_id: formaPagamentoSelecionada
      }).eq("id", id2);
      if (pedidoError) throw pedidoError;
      const { error: deleteError } = await supabase.from("pedidos_itens").delete().eq("pedido_id", id2);
      if (deleteError) throw deleteError;
      const itensPedidoData = itensPedido.map((item) => ({
        pedido_id: id2,
        produto_id: item.produto.id,
        quantidade: item.quantidade,
        valor_unitario: item.valorUnitario,
        valor_total: item.valorTotal,
        observacao: item.observacao,
        empresa_id: empresaId
      }));
      const { error: itensError } = await supabase.from("pedidos_itens").insert(itensPedidoData);
      if (itensError) throw itensError;
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const tipoControle = await verificarTipoControleEstoque(supabase, empresaId);
      if (tipoControle === "faturamento") {
        const resultado = await atualizarEstoquePorPedido(
          supabase,
          id2,
          empresaId,
          userData.user.id,
          "saida",
          "faturamento"
        );
        if (!resultado.success) {
          console.warn("Aviso ao atualizar estoque:", resultado.message);
          B.warning(resultado.message);
        }
      }
      B.success("Pedido faturado com sucesso!");
      navigate("/dashboard/faturamento");
    } catch (error) {
      console.error("Erro ao faturar pedido:", error);
      B.error("Erro ao faturar pedido: " + error.message);
    } finally {
      setIsSaving(false);
    }
  };
  const handleCancelarPedido = async () => {
    if (!confirm("Tem certeza que deseja cancelar este pedido?")) {
      return;
    }
    try {
      setIsSaving(true);
      const { error } = await supabase.from("pedidos").update({
        status: "cancelado",
        data_faturamento: null
        // Remover data de faturamento se existir
      }).eq("id", id2);
      if (error) throw error;
      B.success("Pedido cancelado com sucesso!");
      navigate("/dashboard/faturamento");
    } catch (error) {
      console.error("Erro ao cancelar pedido:", error);
      B.error("Erro ao cancelar pedido: " + error.message);
    } finally {
      setIsSaving(false);
    }
  };
  const handleReverterParaPendente = () => {
    setShowReverterModal(true);
  };
  const confirmarReverterParaPendente = async () => {
    try {
      setIsSaving(true);
      const { error } = await supabase.from("pedidos").update({
        status: "pendente",
        data_faturamento: null
      }).eq("id", id2);
      if (error) throw error;
      setStatus("pendente");
      setDataFaturamento(null);
      setShowReverterModal(false);
      B.success("Pedido revertido para pendente com sucesso!");
    } catch (error) {
      console.error("Erro ao reverter pedido:", error);
      B.error("Erro ao reverter pedido: " + error.message);
    } finally {
      setIsSaving(false);
    }
  };
  const handleCopyToClipboard = (text, fieldId) => {
    navigator.clipboard.writeText(text).then(() => {
      setCopiedFields((prev) => ({ ...prev, [fieldId]: true }));
      setTimeout(() => {
        setCopiedFields((prev) => ({ ...prev, [fieldId]: false }));
      }, 2e3);
      B.success("Texto copiado!", {
        position: "top-center",
        autoClose: 1500,
        hideProgressBar: true,
        closeOnClick: true,
        pauseOnHover: false,
        draggable: true
      });
    }).catch((err) => {
      console.error("Erro ao copiar texto: ", err);
      B.error("Erro ao copiar texto");
    });
  };
  const gerarLinkPedido = async () => {
    try {
      if (!pedido) return null;
      const { data: empresaData, error: empresaError } = await supabase.from("empresas").select("documento").eq("id", pedido.empresa_id).single();
      if (empresaError || !empresaData || !empresaData.documento) {
        throw new Error("Não foi possível obter o CNPJ da empresa");
      }
      const cnpjLimpo = empresaData.documento.replace(/[^\d]/g, "");
      const codigoPedido = `${cnpjLimpo}${pedido.numero}`;
      const baseUrl = window.location.origin;
      const url = `${baseUrl}/pedido/${codigoPedido}`;
      return url;
    } catch (error) {
      console.error("Erro ao gerar link do pedido:", error);
      B.error(`Erro ao gerar link: ${error.message}`);
      return null;
    }
  };
  const formatarTelefone2 = (telefone, tipo) => {
    if (!telefone) return "";
    const numeroLimpo = telefone.replace(/\D/g, "");
    if (numeroLimpo.length === 11 || tipo && tipo.toLowerCase() === "celular") {
      return numeroLimpo.replace(/^(\d{2})(\d)(\d{4})(\d{4})$/, "($1) $2 $3-$4");
    } else if (numeroLimpo.length === 10 || tipo && tipo.toLowerCase() === "fixo") {
      return numeroLimpo.replace(/^(\d{2})(\d{4})(\d{4})$/, "($1) $2-$3");
    }
    return telefone;
  };
  if (isLoading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "container mx-auto px-4 py-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 mb-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => navigate("/dashboard/faturamento"),
            className: "p-2 rounded-lg bg-gray-800 text-gray-400 hover:text-white transition-colors",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowLeft, { size: 18 })
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl font-semibold text-white", children: "Carregando pedido..." })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-4", children: [1, 2, 3].map((item) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 bg-background-card rounded-lg border border-gray-800", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-6 w-40 bg-gray-700 rounded animate-pulse mb-3" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-60 bg-gray-700 rounded animate-pulse mb-2" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-32 bg-gray-700 rounded animate-pulse" })
      ] }, item)) })
    ] });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "container mx-auto px-4 py-8", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => navigate("/dashboard/faturamento"),
            className: "p-2 rounded-lg bg-gray-800 text-gray-400 hover:text-white transition-colors",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowLeft, { size: 18 })
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("h1", { className: "text-2xl font-semibold text-white", children: [
          "Editar Pedido #",
          pedido == null ? void 0 : pedido.numero
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
        dataFaturamento ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: handleReverterParaPendente,
            disabled: isSaving,
            className: "px-4 py-2 rounded-lg bg-yellow-500 text-white hover:bg-yellow-600 transition-colors flex items-center gap-2 disabled:opacity-70 disabled:cursor-not-allowed",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowLeft, { size: 18 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Reverter para Pendente" })
            ]
          }
        ) }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              onClick: handleSalvarPedido,
              disabled: isSaving,
              className: "px-4 py-2 rounded-lg bg-blue-500 text-white hover:bg-blue-600 transition-colors flex items-center gap-2 disabled:opacity-70 disabled:cursor-not-allowed",
              children: isSaving ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Salvando..." })
              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Save, { size: 18 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Salvar Alterações" })
              ] })
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: handleFaturarPedido,
              disabled: isSaving,
              className: "px-4 py-2 rounded-lg bg-green-500 text-white hover:bg-green-600 transition-colors flex items-center gap-2 disabled:opacity-70 disabled:cursor-not-allowed",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(DollarSign, { size: 18 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Faturar" })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: handleCancelarPedido,
              disabled: isSaving,
              className: "px-4 py-2 rounded-lg bg-red-500 text-white hover:bg-red-600 transition-colors flex items-center gap-2 disabled:opacity-70 disabled:cursor-not-allowed",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(XCircle, { size: 18 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Cancelar" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: async () => {
              const url = await gerarLinkPedido();
              if (url) {
                window.open(url, "_blank");
              }
            },
            disabled: isSaving,
            className: "px-4 py-2 rounded-lg bg-purple-500 text-white hover:bg-purple-600 transition-colors flex items-center gap-2 disabled:opacity-70 disabled:cursor-not-allowed",
            title: "Abrir nota de pedido em nova página",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { size: 18 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Abrir Nota" })
            ]
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-2 space-y-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white mb-4", children: "Dados do Cliente" }),
          clienteData ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/30 p-4 rounded-lg", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium mb-2", children: "Informações Básicas" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Nome" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: clienteData.nome }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => handleCopyToClipboard(clienteData.nome, "nome"),
                        className: "ml-2 p-1 rounded-full hover:bg-gray-700 text-gray-400 hover:text-white",
                        title: "Copiar nome",
                        children: copiedFields["nome"] ? /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 14, className: "text-green-500" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 14 })
                      }
                    )
                  ] })
                ] }),
                clienteData.email && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Email" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: clienteData.email }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => handleCopyToClipboard(clienteData.email, "email"),
                        className: "ml-2 p-1 rounded-full hover:bg-gray-700 text-gray-400 hover:text-white",
                        title: "Copiar email",
                        children: copiedFields["email"] ? /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 14, className: "text-green-500" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 14 })
                      }
                    )
                  ] })
                ] }),
                clienteData.documento && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: clienteData.tipo_documento === "CNPJ" ? "CNPJ" : "CPF" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: clienteData.tipo_documento === "CNPJ" ? clienteData.documento.replace(/^(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})$/, "$1.$2.$3/$4-$5") : clienteData.documento.replace(/^(\d{3})(\d{3})(\d{3})(\d{2})$/, "$1.$2.$3-$4") }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => handleCopyToClipboard(
                          clienteData.tipo_documento === "CNPJ" ? clienteData.documento.replace(/^(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})$/, "$1.$2.$3/$4-$5") : clienteData.documento.replace(/^(\d{3})(\d{3})(\d{3})(\d{2})$/, "$1.$2.$3-$4"),
                          "documento"
                        ),
                        className: "ml-2 p-1 rounded-full hover:bg-gray-700 text-gray-400 hover:text-white",
                        title: "Copiar documento",
                        children: copiedFields["documento"] ? /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 14, className: "text-green-500" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 14 })
                      }
                    )
                  ] })
                ] }),
                clienteData.tipo_documento === "CNPJ" && clienteData.razao_social && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Razão Social" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: clienteData.razao_social }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => handleCopyToClipboard(clienteData.razao_social, "razao_social"),
                        className: "ml-2 p-1 rounded-full hover:bg-gray-700 text-gray-400 hover:text-white",
                        title: "Copiar razão social",
                        children: copiedFields["razao_social"] ? /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 14, className: "text-green-500" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 14 })
                      }
                    )
                  ] })
                ] }),
                clienteData.nome_fantasia && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Nome Fantasia" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: clienteData.nome_fantasia }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => handleCopyToClipboard(clienteData.nome_fantasia, "nome_fantasia"),
                        className: "ml-2 p-1 rounded-full hover:bg-gray-700 text-gray-400 hover:text-white",
                        title: "Copiar nome fantasia",
                        children: copiedFields["nome_fantasia"] ? /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 14, className: "text-green-500" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 14 })
                      }
                    )
                  ] })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/30 p-4 rounded-lg", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium mb-2", children: "Telefones" }),
              clienteData.telefones && Array.isArray(clienteData.telefones) && clienteData.telefones.length > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: clienteData.telefones.map((telefone, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `w-2 h-2 rounded-full ${telefone.whatsapp ? "bg-green-500" : "bg-blue-500"}` }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-white", children: [
                  formatarTelefone2(telefone.numero, telefone.tipo),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-gray-400 text-sm ml-2", children: [
                    "(",
                    telefone.tipo === "celular" ? "Celular" : "Fixo",
                    telefone.whatsapp ? " - WhatsApp" : "",
                    ")"
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => handleCopyToClipboard(telefone.numero, `telefone_${index2}`),
                    className: "ml-2 p-1 rounded-full hover:bg-gray-700 text-gray-400 hover:text-white",
                    title: "Copiar telefone",
                    children: copiedFields[`telefone_${index2}`] ? /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 14, className: "text-green-500" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 14 })
                  }
                )
              ] }, index2)) }) : clienteData.telefone ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: formatarTelefone2(clienteData.telefone) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => handleCopyToClipboard(clienteData.telefone, "telefone"),
                    className: "ml-2 p-1 rounded-full hover:bg-gray-700 text-gray-400 hover:text-white",
                    title: "Copiar telefone",
                    children: copiedFields["telefone"] ? /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 14, className: "text-green-500" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 14 })
                  }
                )
              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhum telefone cadastrado" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/30 p-4 rounded-lg", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium mb-2", children: "Endereço" }),
              clienteData.endereco ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-white", children: [
                    clienteData.endereco,
                    clienteData.numero ? `, ${clienteData.numero}` : "",
                    clienteData.complemento ? `, ${clienteData.complemento}` : ""
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      onClick: () => handleCopyToClipboard(
                        `${clienteData.endereco}${clienteData.numero ? `, ${clienteData.numero}` : ""}${clienteData.complemento ? `, ${clienteData.complemento}` : ""}`,
                        "endereco_completo"
                      ),
                      className: "ml-2 p-1 rounded-full hover:bg-gray-700 text-gray-400 hover:text-white",
                      title: "Copiar endereço",
                      children: copiedFields["endereco_completo"] ? /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 14, className: "text-green-500" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 14 })
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-400 text-sm", children: [
                    clienteData.bairro ? `${clienteData.bairro} - ` : "",
                    clienteData.cidade || "",
                    clienteData.estado ? `/${clienteData.estado}` : ""
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      onClick: () => handleCopyToClipboard(
                        `${clienteData.bairro ? `${clienteData.bairro} - ` : ""}${clienteData.cidade || ""}${clienteData.estado ? `/${clienteData.estado}` : ""}`,
                        "bairro_cidade"
                      ),
                      className: "ml-2 p-1 rounded-full hover:bg-gray-700 text-gray-400 hover:text-white",
                      title: "Copiar bairro/cidade",
                      children: copiedFields["bairro_cidade"] ? /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 14, className: "text-green-500" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 14 })
                    }
                  )
                ] }),
                clienteData.cep && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-400 text-sm", children: [
                    "CEP: ",
                    clienteData.cep.replace(/^(\d{5})(\d{3})$/, "$1-$2")
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      onClick: () => handleCopyToClipboard(
                        clienteData.cep.replace(/^(\d{5})(\d{3})$/, "$1-$2"),
                        "cep"
                      ),
                      className: "ml-2 p-1 rounded-full hover:bg-gray-700 text-gray-400 hover:text-white",
                      title: "Copiar CEP",
                      children: copiedFields["cep"] ? /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 14, className: "text-green-500" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 14 })
                    }
                  )
                ] })
              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhum endereço cadastrado" })
            ] })
          ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center py-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Carregando dados do cliente..." }) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white mb-4", children: "Status do Pedido" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Status" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white", children: [
              status === "pendente" && "Pendente",
              status === "confirmado" && "Confirmado",
              status === "em_preparo" && "Em Preparo",
              status === "em_entrega" && "Em Entrega",
              status === "entregue" && "Entregue",
              status === "cancelado" && "Cancelado"
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white mb-4", children: "Itens do Pedido" }),
          itensPedido.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center py-6 bg-gray-800/30 rounded-lg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhum item no pedido" }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-3 mb-6 max-h-64 overflow-y-auto custom-scrollbar pr-2", children: itensPedido.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 bg-gray-800/30 rounded-lg", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-start", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: item.produto.nome }),
                item.temDesconto && item.valorOriginal ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400 line-through", children: formatarPreco2(item.valorOriginal) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 ml-2", children: formatarPreco2(item.valorUnitario) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-gray-400", children: [
                      " x ",
                      item.quantidade,
                      " = ",
                      formatarPreco2(item.valorTotal)
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-green-400", children: item.tipoDesconto === "quantidade" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    "Desconto por quantidade:",
                    item.produto.tipo_desconto_quantidade === "percentual" ? ` ${item.produto.percentual_desconto_quantidade}%` : ` ${formatarPreco2(item.produto.valor_desconto_quantidade || 0)}`
                  ] }) : "Produto em promoção" })
                ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-primary-400", children: [
                  formatarPreco2(item.valorUnitario),
                  " x ",
                  item.quantidade,
                  " = ",
                  formatarPreco2(item.valorTotal)
                ] }),
                item.observacao && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-gray-400 mt-1", children: [
                  "Obs: ",
                  item.observacao
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                dataFaturamento ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-3 py-1 bg-gray-800 text-white", children: item.quantidade }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      onClick: () => handleUpdateQuantidade(item.id, item.quantidade - 1),
                      className: "p-1 rounded-l-lg bg-gray-700 text-gray-300 hover:bg-gray-600",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Minus, { size: 16 })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-3 py-1 bg-gray-800 text-white", children: item.quantidade }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      onClick: () => handleUpdateQuantidade(item.id, item.quantidade + 1),
                      className: "p-1 rounded-r-lg bg-gray-700 text-gray-300 hover:bg-gray-600",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 16 })
                    }
                  )
                ] }),
                !dataFaturamento && /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => handleRemoveItem(item.id),
                    className: "p-2 ml-6 rounded-lg bg-red-500/10 text-red-500 hover:bg-red-500/20",
                    title: "Remover item",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 18 })
                  }
                )
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-end mt-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-primary-400 font-medium", children: formatarPreco2(item.valorTotal) }) })
          ] }, item.id)) }),
          !dataFaturamento && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/30 rounded-lg p-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium mb-3", children: "Adicionar Item" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Produto" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "button",
                  {
                    onClick: () => setIsProdutoModalOpen(true),
                    className: "w-full flex items-center justify-between bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: produtoSelecionadoObj ? "text-white" : "text-gray-500", children: produtoSelecionadoObj ? produtoSelecionadoObj.nome : "Selecione um produto" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18, className: "text-gray-500" })
                    ]
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-3", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Quantidade" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "number",
                      min: "1",
                      value: quantidade,
                      onChange: (e) => setQuantidade(parseInt(e.target.value) || 1),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                    }
                  ),
                  produtoSelecionadoObj && produtoSelecionadoObj.desconto_quantidade && produtoSelecionadoObj.quantidade_minima && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-1 text-xs text-green-400", children: produtoSelecionadoObj.tipo_desconto_quantidade === "percentual" ? /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                    "Desconto para ",
                    produtoSelecionadoObj.quantidade_minima,
                    "+ unidades: ",
                    produtoSelecionadoObj.percentual_desconto_quantidade,
                    "%"
                  ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                    "Desconto para ",
                    produtoSelecionadoObj.quantidade_minima,
                    "+ unidades: ",
                    formatarPreco2(produtoSelecionadoObj.valor_desconto_quantidade || 0)
                  ] }) }),
                  produtoSelecionadoObj && produtoSelecionadoObj.quantidade_minima && quantidade < produtoSelecionadoObj.quantidade_minima && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-1 text-xs text-gray-400", children: [
                    "Min. ",
                    produtoSelecionadoObj.quantidade_minima,
                    " para desconto"
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Observação" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: observacao,
                      onChange: (e) => setObservacao(e.target.value),
                      placeholder: "Opcional",
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "button",
                {
                  onClick: handleAddItem,
                  disabled: !produtoSelecionadoObj,
                  className: "w-full flex items-center justify-center gap-2 bg-primary-500 hover:bg-primary-600 text-white py-2 px-4 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 18 }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Adicionar Item" })
                  ]
                }
              )
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6 sticky top-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white mb-4", children: "Resumo do Pedido" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Subtotal:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: formatarPreco2(valorSubtotal) })
          ] }),
          valorDesconto > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-green-400", children: "Desconto:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-green-400", children: [
              "-",
              formatarPreco2(valorDesconto)
            ] })
          ] }),
          valorAcrescimo > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-400", children: "Acréscimo:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-red-400", children: [
              "+",
              formatarPreco2(valorAcrescimo)
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "border-t border-gray-700 my-2" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium", children: "Total:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xl font-semibold text-primary-400", children: formatarPreco2(valorTotal) })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-6", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Forma de Pagamento" }),
          dataFaturamento ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white", children: ((_a2 = formasPagamento.find((f2) => f2.id === formaPagamentoSelecionada)) == null ? void 0 : _a2.nome) || "Não especificada" }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "select",
            {
              value: formaPagamentoSelecionada || "",
              onChange: (e) => setFormaPagamentoSelecionada(e.target.value || null),
              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "", children: "Selecione" }),
                formasPagamento.map((forma) => /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: forma.id, children: forma.nome }, forma.id))
              ]
            }
          )
        ] }),
        descontosPrazo.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Desconto por Prazo" }),
          dataFaturamento ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white", children: descontoPrazoObj ? `${descontoPrazoObj.prazo_dias} dias - ${descontoPrazoObj.percentual}% de ${descontoPrazoObj.tipo === "desconto" ? "desconto" : "acréscimo"}` : "Nenhum" }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "select",
            {
              value: descontoPrazoSelecionado || "",
              onChange: (e) => {
                const id22 = e.target.value || null;
                setDescontoPrazoSelecionado(id22);
                setDescontoPrazoObj(id22 ? descontosPrazo.find((d2) => d2.id === id22) || null : null);
              },
              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "", children: "Nenhum" }),
                descontosPrazo.map((desconto) => /* @__PURE__ */ jsxRuntimeExports.jsxs("option", { value: desconto.id, children: [
                  desconto.prazo_dias,
                  " dias - ",
                  desconto.percentual,
                  "% de ",
                  desconto.tipo === "desconto" ? "desconto" : "acréscimo"
                ] }, desconto.id))
              ]
            }
          )
        ] }),
        descontosValor.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Desconto por Valor" }),
          dataFaturamento ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white", children: descontoValorObj ? `${formatarPreco2(descontoValorObj.valor_minimo)} - ${descontoValorObj.percentual}% de ${descontoValorObj.tipo === "desconto" ? "desconto" : "acréscimo"}` : "Nenhum" }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "select",
            {
              value: descontoValorSelecionado || "",
              onChange: (e) => {
                const id22 = e.target.value || null;
                setDescontoValorSelecionado(id22);
                setDescontoValorObj(id22 ? descontosValor.find((d2) => d2.id === id22) || null : null);
              },
              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "", children: "Nenhum" }),
                descontosValor.map((desconto) => /* @__PURE__ */ jsxRuntimeExports.jsxs("option", { value: desconto.id, children: [
                  formatarPreco2(desconto.valor_minimo),
                  " - ",
                  desconto.percentual,
                  "% de ",
                  desconto.tipo === "desconto" ? "desconto" : "acréscimo"
                ] }, desconto.id))
              ]
            }
          )
        ] })
      ] }) })
    ] }),
    isProdutoModalOpen && /* @__PURE__ */ jsxRuntimeExports.jsx(
      ProdutoSeletorModal,
      {
        isOpen: isProdutoModalOpen,
        onClose: () => setIsProdutoModalOpen(false),
        onSelect: (produto) => {
          setProdutoSelecionado(produto.id);
          setProdutoSelecionadoObj(produto);
          setIsProdutoModalOpen(false);
        },
        empresaId
      }
    ),
    showReverterModal && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: "bg-background-card rounded-lg p-6 w-full max-w-md border border-gray-700 shadow-xl",
        onClick: (e) => e.stopPropagation(),
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center mb-4 text-yellow-500", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(AlertTriangle, { size: 24, className: "mr-2" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold", children: "Reverter para Pendente" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white mb-2", children: "Tem certeza que deseja reverter este pedido para pendente?" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Esta ação removerá o status de faturado e permitirá a edição do pedido." })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-end gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => setShowReverterModal(false),
                className: "px-4 py-2 rounded-lg bg-gray-700 text-white hover:bg-gray-600 transition-colors",
                children: "Cancelar"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: confirmarReverterParaPendente,
                disabled: isSaving,
                className: "px-4 py-2 rounded-lg bg-yellow-500 text-white hover:bg-yellow-600 transition-colors flex items-center gap-2 disabled:opacity-70 disabled:cursor-not-allowed",
                children: isSaving ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Processando..." })
                ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowLeft, { size: 18 }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Confirmar" })
                ] })
              }
            )
          ] })
        ]
      }
    ) })
  ] });
};
const statusLabels = {
  "aguardando": { full: "Aguardando", short: "Aguard." },
  "preparando": { full: "Em Preparação", short: "Prepar." },
  "pronto": { full: "Pronto p/ Envio", short: "Pronto" },
  "enviado": { full: "Saiu p/ Entrega", short: "Enviado" },
  "entregue": { full: "Entregue", short: "Entreg." },
  "recusado": { full: "Recusado", short: "Recus." }
};
const statusOrder = ["aguardando", "preparando", "pronto", "enviado", "entregue", "recusado"];
const statusColors = {
  "aguardando": {
    bg: "bg-yellow-500/10",
    text: "text-yellow-500",
    border: "border-yellow-500/20"
  },
  "preparando": {
    bg: "bg-blue-500/10",
    text: "text-blue-500",
    border: "border-blue-500/20"
  },
  "pronto": {
    bg: "bg-purple-500/10",
    text: "text-purple-500",
    border: "border-purple-500/20"
  },
  "enviado": {
    bg: "bg-orange-500/10",
    text: "text-orange-500",
    border: "border-orange-500/20"
  },
  "entregue": {
    bg: "bg-green-500/10",
    text: "text-green-500",
    border: "border-green-500/20"
  },
  "recusado": {
    bg: "bg-red-500/10",
    text: "text-red-500",
    border: "border-red-500/20"
  }
};
const GestorPage = () => {
  const [pedidos, setPedidos] = reactExports.useState([]);
  const [expandedPedidos, setExpandedPedidos] = reactExports.useState({});
  const [isSmallScreen, setIsSmallScreen] = reactExports.useState(false);
  reactExports.useEffect(() => {
    loadPedidos();
    const interval = setInterval(loadPedidos, 3e4);
    const handleResize = () => {
      setIsSmallScreen(window.innerWidth < 1280);
    };
    handleResize();
    window.addEventListener("resize", handleResize);
    return () => {
      clearInterval(interval);
      window.removeEventListener("resize", handleResize);
    };
  }, []);
  const loadPedidos = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: pedidosData, error } = await supabase.from("pedidos").select(`
          *,
          itens:pedidos_itens (
            *,
            produto:produtos (nome),
            adicionais:pedidos_itens_adicionais (
              *,
              item_adicional:opcoes_adicionais_itens (nome)
            )
          )
        `).eq("empresa_id", usuarioData.empresa_id).not("status", "eq", "recusado").order("created_at", { ascending: false });
      if (error) throw error;
      setPedidos(pedidosData || []);
    } catch (error) {
      console.error("Erro ao carregar pedidos:", error);
      showMessage("error", "Erro ao carregar pedidos");
    }
  };
  const handleStatusChange = async (pedidoId, newStatus) => {
    try {
      const { error } = await supabase.from("pedidos").update({ status: newStatus }).eq("id", pedidoId);
      if (error) throw error;
      setPedidos(pedidos.map(
        (pedido) => pedido.id === pedidoId ? { ...pedido, status: newStatus } : pedido
      ));
      showMessage("success", "Status atualizado com sucesso!");
    } catch (error) {
      console.error("Erro ao atualizar status:", error);
      showMessage("error", "Erro ao atualizar status");
    }
  };
  const togglePedidoExpanded = (pedidoId) => {
    setExpandedPedidos((prev) => ({
      ...prev,
      [pedidoId]: !prev[pedidoId]
    }));
  };
  const formatDateTime = (dateString) => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      hour: "2-digit",
      minute: "2-digit"
    }).format(date);
  };
  const renderPedidoCard = (pedido) => {
    const isExpanded = expandedPedidos[pedido.id];
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0, y: 20 },
        animate: { opacity: 1, y: 0 },
        className: "bg-background-card rounded-lg border border-gray-800 overflow-hidden",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start justify-between mb-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white font-medium", children: [
                "Pedido #",
                pedido.numero
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mt-1", children: pedido.cliente_nome })
            ] }),
            pedido.status === "aguardando" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => handleStatusChange(pedido.id, "preparando"),
                  className: "p-1 rounded-full bg-green-500/10 text-green-500 hover:bg-green-500/20",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 18 })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => handleStatusChange(pedido.id, "recusado"),
                  className: "p-1 rounded-full bg-red-500/10 text-red-500 hover:bg-red-500/20",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 18 })
                }
              )
            ] }),
            pedido.status !== "aguardando" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex gap-2", children: statusOrder.indexOf(pedido.status) < statusOrder.indexOf("entregue") && /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => handleStatusChange(pedido.id, statusOrder[statusOrder.indexOf(pedido.status) + 1]),
                className: "px-3 py-1 rounded-lg bg-primary-500/10 text-primary-400 text-sm hover:bg-primary-500/20",
                children: "Avançar"
              }
            ) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-3 mb-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-gray-400", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Clock, { size: 16 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: formatDateTime(pedido.created_at) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-gray-400", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Phone, { size: 16 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: pedido.cliente_telefone })
            ] }),
            pedido.bairro && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-gray-400", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(MapPin, { size: 16 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: pedido.bairro })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-gray-400", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(DollarSign, { size: 16 }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-sm", children: [
                "R$ ",
                pedido.valor_total.toFixed(2),
                pedido.valor_entrega && ` + ${pedido.valor_entrega.toFixed(2)}`
              ] })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => togglePedidoExpanded(pedido.id),
              className: "w-full flex items-center justify-between px-3 py-2 rounded-lg bg-gray-800/50 hover:bg-gray-800/70 transition-colors",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400", children: isExpanded ? "Ocultar detalhes" : "Ver detalhes" }),
                isExpanded ? /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronUp, { size: 16, className: "text-gray-400" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronDown, { size: 16, className: "text-gray-400" })
              ]
            }
          ),
          isExpanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-3 space-y-3", children: pedido.itens.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800/30 rounded-lg p-3", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start justify-between", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Package, { size: 16, className: "text-gray-400" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white", children: [
                  item.quantidade,
                  "x ",
                  item.produto.nome
                ] })
              ] }),
              item.observacao && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400 mt-1 ml-6", children: [
                "Obs: ",
                item.observacao
              ] }),
              item.adicionais.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-2 ml-6 space-y-1", children: item.adicionais.map((adicional) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "div",
                {
                  className: "flex items-center justify-between text-sm",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-gray-400", children: [
                      adicional.quantidade,
                      "x ",
                      adicional.item_adicional.nome
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-primary-400", children: [
                      "+ R$ ",
                      (adicional.quantidade * adicional.valor_unitario).toFixed(2)
                    ] })
                  ]
                },
                adicional.id
              )) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-primary-400 ml-4", children: [
              "R$ ",
              (item.quantidade * item.valor_unitario).toFixed(2)
            ] })
          ] }) }, item.id)) })
        ] })
      },
      pedido.id
    );
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-[calc(100vh-4rem)] grid grid-cols-5 gap-2", children: statusOrder.map((status) => {
    if (status === "recusado") return null;
    const statusPedidos = pedidos.filter((p2) => p2.status === status);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: `flex flex-col rounded-lg ${statusColors[status].bg}`,
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 border-b border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: `text-lg font-medium ${statusColors[status].text} whitespace-nowrap`, children: isSmallScreen ? statusLabels[status].short : statusLabels[status].full }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `ml-2 px-3 py-1 rounded-full text-sm font-medium ${statusColors[status].bg} ${statusColors[status].text} border ${statusColors[status].border}`, children: statusPedidos.length })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-y-auto custom-scrollbar p-4 space-y-4", children: statusPedidos.map((pedido) => renderPedidoCard(pedido)) })
        ]
      },
      status
    );
  }) });
};
const DeleteConfirmation$2 = ({
  isOpen,
  onClose,
  onConfirm,
  title,
  message
}) => {
  if (!isOpen) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    motion.div,
    {
      initial: { opacity: 0 },
      animate: { opacity: 1 },
      exit: { opacity: 0 },
      className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        motion.div,
        {
          initial: { scale: 0.95, opacity: 0 },
          animate: { scale: 1, opacity: 1 },
          exit: { scale: 0.95, opacity: 0 },
          className: "bg-background-card p-6 rounded-lg shadow-xl max-w-sm mx-4 w-full",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold text-white mb-2", children: title }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: message }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "button",
                  variant: "text",
                  className: "flex-1",
                  onClick: onClose,
                  children: "Cancelar"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "button",
                  variant: "primary",
                  className: "flex-1 !bg-red-500 hover:!bg-red-600",
                  onClick: onConfirm,
                  children: "Excluir"
                }
              )
            ] })
          ]
        }
      )
    }
  );
};
const EntregadorPage = () => {
  const [showSidebar, setShowSidebar] = reactExports.useState(false);
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [entregadores, setEntregadores] = reactExports.useState([]);
  const [editingEntregador, setEditingEntregador] = reactExports.useState(null);
  const [novoEntregador, setNovoEntregador] = reactExports.useState({ nome: "", comissao: "" });
  const [deleteConfirmation, setDeleteConfirmation] = reactExports.useState({
    isOpen: false,
    id: "",
    title: "",
    message: ""
  });
  reactExports.useEffect(() => {
    loadData();
  }, []);
  const loadData = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: entregadoresData } = await supabase.from("entregadores").select("*").eq("empresa_id", usuarioData.empresa_id).order("nome");
      setEntregadores(entregadoresData || []);
    } catch (error) {
      console.error("Error loading data:", error);
      showMessage("error", "Erro ao carregar entregadores");
    }
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!novoEntregador.nome.trim() || !novoEntregador.comissao) return;
    setIsLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      if (editingEntregador) {
        const { error } = await supabase.from("entregadores").update({
          nome: novoEntregador.nome,
          comissao: parseFloat(novoEntregador.comissao)
        }).eq("id", editingEntregador.id);
        if (error) throw error;
        showMessage("success", "Entregador atualizado com sucesso!");
      } else {
        const { error } = await supabase.from("entregadores").insert([{
          nome: novoEntregador.nome,
          comissao: parseFloat(novoEntregador.comissao),
          empresa_id: usuarioData.empresa_id
        }]);
        if (error) throw error;
        showMessage("success", "Entregador cadastrado com sucesso!");
      }
      setNovoEntregador({ nome: "", comissao: "" });
      setEditingEntregador(null);
      setShowSidebar(false);
      loadData();
    } catch (error) {
      showMessage("error", "Erro ao salvar entregador: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };
  const handleDelete = async (id2, nome) => {
    setDeleteConfirmation({
      isOpen: true,
      id: id2,
      title: "Excluir Entregador",
      message: `Tem certeza que deseja excluir o entregador "${nome}"? Esta ação não pode ser desfeita.`
    });
  };
  const handleConfirmDelete = async () => {
    try {
      const { error } = await supabase.from("entregadores").delete().eq("id", deleteConfirmation.id);
      if (error) throw error;
      await loadData();
      showMessage("success", "Entregador excluído com sucesso!");
    } catch (error) {
      showMessage("error", "Erro ao excluir entregador: " + error.message);
    } finally {
      setDeleteConfirmation((prev) => ({ ...prev, isOpen: false }));
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "max-w-6xl mx-auto", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl font-semibold text-white", children: "Entregadores" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mt-1", children: "Gerencie seus entregadores" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          type: "button",
          variant: "primary",
          onClick: () => {
            setEditingEntregador(null);
            setNovoEntregador({ nome: "", comissao: "" });
            setShowSidebar(true);
          },
          children: "+ Adicionar Entregador"
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid gap-6", children: [
      entregadores.map((entregador) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          className: "bg-background-card p-4 rounded-lg border border-gray-800",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-2 rounded-lg bg-primary-500/10", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Bike, { size: 20, className: "text-primary-400" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: entregador.nome }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-primary-400", children: [
                  "Comissão: ",
                  entregador.comissao,
                  "%"
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => {
                    setEditingEntregador(entregador);
                    setNovoEntregador({
                      nome: entregador.nome,
                      comissao: entregador.comissao.toString()
                    });
                    setShowSidebar(true);
                  },
                  className: "p-2 text-gray-400 hover:text-white transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Pencil, { size: 16 })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => handleDelete(entregador.id, entregador.nome),
                  className: "p-2 text-red-400 hover:text-red-300 transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 16 })
                }
              )
            ] })
          ] })
        },
        entregador.id
      )),
      entregadores.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg p-8 text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-primary-500/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Bike, { size: 24, className: "text-primary-400" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: "Nenhum entregador cadastrado" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: "Cadastre seu primeiro entregador para começar." }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            type: "button",
            variant: "primary",
            className: "mx-auto",
            onClick: () => {
              setEditingEntregador(null);
              setNovoEntregador({ nome: "", comissao: "" });
              setShowSidebar(true);
            },
            children: "+ Adicionar Entregador"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showSidebar && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { opacity: 0 },
          animate: { opacity: 1 },
          exit: { opacity: 0 },
          className: "fixed inset-0 bg-black/50 z-40",
          onClick: () => setShowSidebar(false)
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { x: "100%" },
          animate: { x: 0 },
          exit: { x: "100%" },
          transition: { type: "tween", duration: 0.3 },
          className: "fixed right-0 top-0 h-screen w-full max-w-md bg-background-card border-l border-gray-800 z-50 overflow-y-auto",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: editingEntregador ? "Editar Entregador" : "Novo Entregador" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => setShowSidebar(false),
                  className: "text-gray-400 hover:text-white transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 24 })
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, className: "space-y-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Nome do Entregador" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: novoEntregador.nome,
                    onChange: (e) => setNovoEntregador({ ...novoEntregador, nome: e.target.value }),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Digite o nome do entregador"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Comissão (%)" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "number",
                    step: "0.01",
                    value: novoEntregador.comissao,
                    onChange: (e) => setNovoEntregador({ ...novoEntregador, comissao: e.target.value }),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "0.00"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    className: "flex-1",
                    onClick: () => setShowSidebar(false),
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    variant: "primary",
                    className: "flex-1",
                    disabled: isLoading,
                    children: isLoading ? "Salvando..." : editingEntregador ? "Salvar" : "Criar"
                  }
                )
              ] })
            ] })
          ] })
        }
      )
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      DeleteConfirmation$2,
      {
        isOpen: deleteConfirmation.isOpen,
        onClose: () => setDeleteConfirmation((prev) => ({ ...prev, isOpen: false })),
        onConfirm: handleConfirmDelete,
        title: deleteConfirmation.title,
        message: deleteConfirmation.message
      }
    )
  ] });
};
const DeleteConfirmation$1 = ({
  isOpen,
  onClose,
  onConfirm,
  title,
  message
}) => {
  if (!isOpen) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    motion.div,
    {
      initial: { opacity: 0 },
      animate: { opacity: 1 },
      exit: { opacity: 0 },
      className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        motion.div,
        {
          initial: { scale: 0.95, opacity: 0 },
          animate: { scale: 1, opacity: 1 },
          exit: { scale: 0.95, opacity: 0 },
          className: "bg-background-card p-6 rounded-lg shadow-xl max-w-sm mx-4 w-full",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold text-white mb-2", children: title }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: message }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "button",
                  variant: "text",
                  className: "flex-1",
                  onClick: onClose,
                  children: "Cancelar"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "button",
                  variant: "primary",
                  className: "flex-1 !bg-red-500 hover:!bg-red-600",
                  onClick: onConfirm,
                  children: "Excluir"
                }
              )
            ] })
          ]
        }
      )
    }
  );
};
const TaxaEntregaPage = () => {
  const [showSidebar, setShowSidebar] = reactExports.useState(false);
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [isDataReady, setIsDataReady] = reactExports.useState(false);
  const [taxas, setTaxas] = reactExports.useState([]);
  const [editingTaxa, setEditingTaxa] = reactExports.useState(null);
  const [taxaMode, setTaxaMode] = reactExports.useState("bairro");
  const [formData, setFormData] = reactExports.useState({
    cep: "",
    bairro: "",
    valor: "",
    km: "",
    tempo_entrega: ""
  });
  const [deleteConfirmation, setDeleteConfirmation] = reactExports.useState({
    isOpen: false,
    id: "",
    title: "",
    message: ""
  });
  reactExports.useEffect(() => {
    loadTaxas();
    loadTaxaMode();
  }, []);
  const loadTaxaMode = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: configData, error } = await supabase.from("configuracoes").select("taxa_modo").eq("empresa_id", usuarioData.empresa_id).single();
      console.log("Config data:", configData);
      console.log("Config error:", error);
      if (configData) {
        setTaxaMode(configData.taxa_modo);
      }
    } catch (error) {
      console.error("Error loading taxa mode:", error);
      showMessage("error", "Erro ao carregar configurações");
    }
  };
  const loadTaxas = async () => {
    try {
      await new Promise((resolve2) => setTimeout(resolve2, 800));
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: taxasData } = await supabase.from("taxa_entrega").select("*").eq("empresa_id", usuarioData.empresa_id).order("created_at", { ascending: false });
      setTaxas(taxasData || []);
    } catch (error) {
      console.error("Error loading taxas:", error);
      showMessage("error", "Erro ao carregar taxas");
    } finally {
      setIsDataReady(true);
    }
  };
  const formatCEP = (value) => {
    return value.replace(/\D/g, "").replace(/^(\d{2})(\d{3})(\d{3})$/, "$1.$2-$3").substring(0, 10);
  };
  const handleCEPChange = async (e) => {
    const cep = e.target.value;
    setFormData((prev) => ({ ...prev, cep: formatCEP(cep) }));
    if (cep.replace(/\D/g, "").length === 8) {
      try {
        const response = await fetch(`https://viacep.com.br/ws/${cep.replace(/\D/g, "")}/json/`);
        const data = await response.json();
        if (!data.erro) {
          setFormData((prev) => ({
            ...prev,
            bairro: data.bairro
          }));
        }
      } catch (error) {
        console.error("Error fetching CEP:", error);
      }
    }
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (taxaMode === "bairro" && (!formData.cep.trim() || !formData.valor || !formData.tempo_entrega)) return;
    if (taxaMode === "distancia" && (!formData.km.trim() || !formData.valor || !formData.tempo_entrega)) return;
    setIsLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      if (editingTaxa) {
        const { error } = await supabase.from("taxa_entrega").update({
          cep: taxaMode === "bairro" ? formData.cep : null,
          bairro: taxaMode === "bairro" ? formData.bairro : null,
          km: taxaMode === "distancia" ? parseFloat(formData.km) : null,
          valor: parseFloat(formData.valor),
          tempo_entrega: parseInt(formData.tempo_entrega)
        }).eq("id", editingTaxa.id);
        if (error) throw error;
        showMessage("success", "Taxa atualizada com sucesso!");
      } else {
        const { error } = await supabase.from("taxa_entrega").insert([{
          cep: taxaMode === "bairro" ? formData.cep : null,
          bairro: taxaMode === "bairro" ? formData.bairro : null,
          km: taxaMode === "distancia" ? parseFloat(formData.km) : null,
          valor: parseFloat(formData.valor),
          tempo_entrega: parseInt(formData.tempo_entrega),
          empresa_id: usuarioData.empresa_id
        }]);
        if (error) throw error;
        showMessage("success", "Taxa cadastrada com sucesso!");
      }
      setFormData({ cep: "", bairro: "", valor: "", km: "", tempo_entrega: "" });
      setEditingTaxa(null);
      setShowSidebar(false);
      loadTaxas();
    } catch (error) {
      showMessage("error", "Erro ao salvar taxa: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };
  const handleDelete = async (id2, identifier) => {
    setDeleteConfirmation({
      isOpen: true,
      id: id2,
      title: "Excluir Taxa",
      message: `Tem certeza que deseja excluir a taxa para ${identifier}? Esta ação não pode ser desfeita.`
    });
  };
  const handleConfirmDelete = async () => {
    try {
      const { error } = await supabase.from("taxa_entrega").delete().eq("id", deleteConfirmation.id);
      if (error) throw error;
      await loadTaxas();
      showMessage("success", "Taxa excluída com sucesso!");
    } catch (error) {
      showMessage("error", "Erro ao excluir taxa: " + error.message);
    } finally {
      setDeleteConfirmation((prev) => ({ ...prev, isOpen: false }));
    }
  };
  const renderSkeletonCards = () => {
    return Array(3).fill(0).map((_2, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        className: "bg-background-card p-4 rounded-lg border border-gray-800",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-2 rounded-lg bg-gray-700 animate-pulse", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-5 h-5 bg-gray-600 rounded" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `h-5 bg-gray-700 rounded animate-pulse mb-1 ${index2 % 3 === 0 ? "w-24" : index2 % 3 === 1 ? "w-32" : "w-20"}` }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `h-4 bg-gray-600 rounded animate-pulse mb-2 ${index2 % 3 === 0 ? "w-20" : index2 % 3 === 1 ? "w-28" : "w-16"}` }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-16 bg-gray-600 rounded animate-pulse mb-1" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-20 bg-gray-600 rounded animate-pulse" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-9 h-9 bg-gray-700 rounded-lg animate-pulse" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-9 h-9 bg-gray-700 rounded-lg animate-pulse" })
          ] })
        ] })
      },
      index2
    ));
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "max-w-6xl mx-auto", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl font-semibold text-white", children: "Taxa de Entrega" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mt-1", children: "Gerencie suas taxas de entrega" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          type: "button",
          variant: "primary",
          onClick: () => {
            setEditingTaxa(null);
            setFormData({ cep: "", bairro: "", valor: "", km: "", tempo_entrega: "" });
            setShowSidebar(true);
          },
          children: "+ Adicionar Taxa"
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid gap-6", children: !isDataReady ? renderSkeletonCards() : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      taxas.map((taxa) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          className: "bg-background-card p-4 rounded-lg border border-gray-800",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-2 rounded-lg bg-primary-500/10", children: /* @__PURE__ */ jsxRuntimeExports.jsx(MapPin, { size: 20, className: "text-primary-400" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                taxaMode === "bairro" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: taxa.bairro }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400", children: [
                    "CEP: ",
                    taxa.cep
                  ] })
                ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "text-white font-medium", children: [
                  "Até ",
                  taxa.km,
                  "km"
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-primary-400", children: [
                    "R$ ",
                    taxa.valor.toFixed(2)
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-gray-400", children: [
                    "Tempo: ",
                    taxa.tempo_entrega,
                    " min"
                  ] })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => {
                    var _a2, _b2;
                    setEditingTaxa(taxa);
                    setFormData({
                      cep: taxa.cep || "",
                      bairro: taxa.bairro || "",
                      valor: taxa.valor.toString(),
                      km: ((_a2 = taxa.km) == null ? void 0 : _a2.toString()) || "",
                      tempo_entrega: ((_b2 = taxa.tempo_entrega) == null ? void 0 : _b2.toString()) || ""
                    });
                    setShowSidebar(true);
                  },
                  className: "p-2 text-gray-400 hover:text-white transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Pencil, { size: 16 })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => handleDelete(taxa.id, taxaMode === "bairro" ? taxa.bairro : `${taxa.km}km`),
                  className: "p-2 text-red-400 hover:text-red-300 transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 16 })
                }
              )
            ] })
          ] })
        },
        taxa.id
      )),
      taxas.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg p-8 text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-primary-500/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(MapPin, { size: 24, className: "text-primary-400" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: "Nenhuma taxa cadastrada" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: "Cadastre sua primeira taxa de entrega para começar." }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            type: "button",
            variant: "primary",
            className: "mx-auto",
            onClick: () => {
              setEditingTaxa(null);
              setFormData({ cep: "", bairro: "", valor: "", km: "", tempo_entrega: "" });
              setShowSidebar(true);
            },
            children: "+ Adicionar Taxa"
          }
        )
      ] })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showSidebar && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { opacity: 0 },
          animate: { opacity: 1 },
          exit: { opacity: 0 },
          className: "fixed inset-0 bg-black/50 z-40",
          onClick: () => setShowSidebar(false)
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { x: "100%" },
          animate: { x: 0 },
          exit: { x: "100%" },
          transition: { type: "tween", duration: 0.3 },
          className: "fixed right-0 top-0 h-screen w-full max-w-md bg-background-card border-l border-gray-800 z-50 overflow-y-auto custom-scrollbar",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: editingTaxa ? "Editar Taxa" : "Nova Taxa" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => setShowSidebar(false),
                  className: "text-gray-400 hover:text-white transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 24 })
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, className: "space-y-6", children: [
              taxaMode === "bairro" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "CEP" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "text",
                        value: formData.cep,
                        onChange: handleCEPChange,
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-3 pr-10 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                        placeholder: "00.000-000"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        type: "button",
                        onClick: () => handleCEPChange({ target: { value: formData.cep } }),
                        className: "absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18 })
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Bairro" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: formData.bairro,
                      readOnly: true,
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "Digite o bairro"
                    }
                  )
                ] })
              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Distância (KM)" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "number",
                    step: "0.1",
                    value: formData.km,
                    onChange: (e) => setFormData((prev) => ({ ...prev, km: e.target.value })),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Digite a distância"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Valor" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "number",
                    step: "0.01",
                    value: formData.valor,
                    onChange: (e) => setFormData((prev) => ({ ...prev, valor: e.target.value })),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "0.00"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Tempo de Entrega (minutos)" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "number",
                    min: "1",
                    value: formData.tempo_entrega,
                    onChange: (e) => setFormData((prev) => ({ ...prev, tempo_entrega: e.target.value })),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "30",
                    required: true
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    className: "flex-1",
                    onClick: () => setShowSidebar(false),
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    variant: "primary",
                    className: "flex-1",
                    disabled: isLoading,
                    children: isLoading ? "Salvando..." : editingTaxa ? "Salvar" : "Criar"
                  }
                )
              ] })
            ] })
          ] })
        }
      )
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      DeleteConfirmation$1,
      {
        isOpen: deleteConfirmation.isOpen,
        onClose: () => setDeleteConfirmation((prev) => ({ ...prev, isOpen: false })),
        onConfirm: handleConfirmDelete,
        title: deleteConfirmation.title,
        message: deleteConfirmation.message
      }
    )
  ] });
};
const SearchableSelect = ({
  options,
  value,
  onChange,
  placeholder = "Selecione uma opção",
  label,
  required = false,
  className = ""
}) => {
  const [isOpen, setIsOpen] = reactExports.useState(false);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [filteredOptions, setFilteredOptions] = reactExports.useState(options);
  const dropdownRef = reactExports.useRef(null);
  const searchInputRef = reactExports.useRef(null);
  const selectedOption = options.find((option) => option.value === value);
  reactExports.useEffect(() => {
    if (searchTerm.trim() === "") {
      setFilteredOptions(options);
    } else {
      const filtered = options.filter(
        (option) => option.label.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setFilteredOptions(filtered);
    }
  }, [searchTerm, options]);
  reactExports.useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
        setSearchTerm("");
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);
  reactExports.useEffect(() => {
    if (isOpen && searchInputRef.current) {
      searchInputRef.current.focus();
    }
  }, [isOpen]);
  const handleSelect = (option) => {
    onChange(option.value);
    setIsOpen(false);
    setSearchTerm("");
  };
  const handleClear = (e) => {
    e.stopPropagation();
    onChange("");
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `relative ${className}`, children: [
    label && /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
      label,
      required && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500 ml-1", children: "*" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { ref: dropdownRef, className: "relative", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          onClick: () => setIsOpen(!isOpen),
          className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white cursor-pointer flex items-center justify-between",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: selectedOption ? "text-white" : "text-gray-400", children: selectedOption ? selectedOption.label : placeholder }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
              selectedOption && /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  type: "button",
                  onClick: handleClear,
                  className: "mr-1 text-gray-400 hover:text-white",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                ChevronDown,
                {
                  size: 18,
                  className: `text-gray-400 transition-transform ${isOpen ? "rotate-180" : ""}`
                }
              )
            ] })
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: isOpen && /* @__PURE__ */ jsxRuntimeExports.jsxs(
        motion.div,
        {
          initial: { opacity: 0, y: -10 },
          animate: { opacity: 1, y: 0 },
          exit: { opacity: 0, y: -10 },
          transition: { duration: 0.2 },
          className: "absolute z-50 mt-1 w-full bg-gray-800 border border-gray-700 rounded-lg shadow-lg overflow-hidden",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-2 border-b border-gray-700", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 16, className: "text-gray-500" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  ref: searchInputRef,
                  type: "text",
                  value: searchTerm,
                  onChange: (e) => setSearchTerm(e.target.value),
                  className: "w-full bg-gray-700/50 border border-gray-600 rounded-lg py-2 pl-10 pr-3 text-white text-sm focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                  placeholder: "Buscar..."
                }
              )
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "max-h-60 overflow-y-auto", children: filteredOptions.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 text-center text-gray-400", children: "Nenhuma opção encontrada" }) : filteredOptions.map((option) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              "div",
              {
                className: `px-3 py-2 cursor-pointer transition-colors ${option.value === value ? "bg-primary-500/20 text-primary-400" : "text-white hover:bg-gray-700"}`,
                onClick: () => handleSelect(option),
                children: option.label
              },
              option.value
            )) })
          ]
        }
      ) })
    ] })
  ] });
};
const checkCertificateExpiry = (validityDate) => {
  if (!validityDate) return {
    status: "unknown",
    message: "Data de validade não disponível",
    color: "red",
    daysRemaining: null
  };
  const now2 = /* @__PURE__ */ new Date();
  const validity = new Date(validityDate);
  const daysRemaining = Math.ceil((validity.getTime() - now2.getTime()) / (1e3 * 60 * 60 * 24));
  if (daysRemaining < 0) {
    return {
      status: "expired",
      message: "VENCIDO",
      daysRemaining,
      color: "red"
    };
  } else if (daysRemaining <= 30) {
    return {
      status: "expiring",
      message: `Vence em ${daysRemaining} dias`,
      daysRemaining,
      color: "yellow"
    };
  } else {
    return {
      status: "valid",
      message: `${daysRemaining} dias restantes`,
      daysRemaining,
      color: "green"
    };
  }
};
const checkCertificateStatus = async (empresaId) => {
  try {
    const getBackendUrl2 = () => {
      const origin = window.location.origin;
      return `${origin}/backend/public`;
    };
    const response = await fetch(`${getBackendUrl2()}/check-certificado.php?empresa_id=${empresaId}`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Erro ao verificar status do certificado:", error);
    return {
      success: false,
      exists: false,
      error: error.message
    };
  }
};
const getBackendUrl = () => {
  const origin = window.location.origin;
  return `${origin}/backend/public`;
};
const useCertificateUpload = () => {
  const [isUploading, setIsUploading] = reactExports.useState(false);
  const uploadCertificateLocal = async (file, password, empresaId) => {
    var _a2;
    setIsUploading(true);
    try {
      if (!file || !password.trim() || !empresaId) {
        throw new Error("Arquivo, senha e ID da empresa são obrigatórios");
      }
      const allowedExtensions = ["pfx", "p12"];
      const fileExtension = (_a2 = file.name.split(".").pop()) == null ? void 0 : _a2.toLowerCase();
      if (!fileExtension || !allowedExtensions.includes(fileExtension)) {
        throw new Error("Arquivo deve ser .pfx ou .p12");
      }
      if (file.size > 5 * 1024 * 1024) {
        throw new Error("Arquivo muito grande. Máximo 5MB");
      }
      const formData = new FormData();
      formData.append("certificado", file);
      formData.append("senha", password);
      formData.append("empresa_id", empresaId);
      const backendUrl = `${getBackendUrl()}/upload-certificado.php`;
      console.log("🔗 Fazendo upload para:", backendUrl);
      console.log("🌐 Origin atual:", window.location.origin);
      const response = await fetch(backendUrl, {
        method: "POST",
        body: formData
      });
      const result = await response.json();
      if (!result.success) {
        throw new Error(result.error || "Erro ao enviar certificado");
      }
      const { error: updateError } = await supabase.from("empresas").update({
        certificado_digital_path: result.data.path,
        certificado_digital_senha: password,
        // Em produção, considere criptografar
        certificado_digital_validade: result.data.validade,
        certificado_digital_status: "ativo",
        certificado_digital_nome: result.data.nome_certificado,
        certificado_digital_uploaded_at: (/* @__PURE__ */ new Date()).toISOString(),
        certificado_digital_local: true
        // Flag para indicar que está no storage local
      }).eq("id", empresaId);
      if (updateError) {
        console.warn("Erro ao atualizar metadados no Supabase:", updateError);
      }
      showMessage("success", "Certificado digital enviado com sucesso!");
      return {
        success: true,
        data: result.data
      };
    } catch (error) {
      console.error("❌ Erro no upload do certificado:", error);
      let errorMessage = error.message;
      if (error.message.includes("Senha") || error.message.includes("senha")) {
        errorMessage = "🔐 Senha do certificado incorreta. Verifique e tente novamente.";
      } else if (error.message.includes("arquivo")) {
        errorMessage = "📄 Erro no arquivo do certificado. Verifique se é um arquivo .pfx ou .p12 válido.";
      }
      showMessage("error", errorMessage);
      return {
        success: false,
        error: errorMessage
      };
    } finally {
      setIsUploading(false);
    }
  };
  const removeCertificateLocal = async (empresaId) => {
    try {
      const backendUrl = `${getBackendUrl()}/remove-certificado.php`;
      const response = await fetch(backendUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          empresa_id: empresaId
        })
      });
      const result = await response.json();
      if (!result.success) {
        throw new Error(result.error || "Erro ao remover certificado");
      }
      const { error: updateError } = await supabase.from("empresas").update({
        certificado_digital_path: null,
        certificado_digital_senha: null,
        certificado_digital_validade: null,
        certificado_digital_status: null,
        certificado_digital_nome: null,
        certificado_digital_uploaded_at: null,
        certificado_digital_local: null
      }).eq("id", empresaId);
      if (updateError) {
        console.warn("Erro ao limpar metadados no Supabase:", updateError);
      }
      showMessage("success", "Certificado removido com sucesso!");
      return true;
    } catch (error) {
      console.error("❌ Erro ao remover certificado:", error);
      showMessage("error", "Erro ao remover certificado: " + error.message);
      return false;
    }
  };
  const checkCertificateStatus2 = async (empresaId) => {
    try {
      const backendUrl = `${getBackendUrl()}/check-certificado.php?empresa_id=${empresaId}`;
      const response = await fetch(backendUrl);
      const result = await response.json();
      return result;
    } catch (error) {
      console.error("❌ Erro ao verificar status do certificado:", error);
      return { success: false, error: "Erro ao verificar certificado" };
    }
  };
  return {
    uploadCertificateLocal,
    removeCertificateLocal,
    checkCertificateStatus: checkCertificateStatus2,
    isUploading
  };
};
const ConfigSkeletonLoader = () => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6 animate-pulse", children: [
  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-8 bg-gray-700 rounded-lg w-1/3" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 bg-gray-700 rounded w-2/3" })
  ] }),
  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 bg-gray-700 rounded w-1/4" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 bg-gray-700 rounded-lg" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 bg-gray-700 rounded w-1/4" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 bg-gray-700 rounded-lg" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 bg-gray-700 rounded w-1/4" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 bg-gray-700 rounded-lg" })
    ] })
  ] }),
  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-32 bg-gray-700 rounded-lg" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-32 bg-gray-700 rounded-lg" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-32 bg-gray-700 rounded-lg" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-32 bg-gray-700 rounded-lg" })
  ] }),
  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 bg-gray-700 rounded-lg w-24" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 bg-gray-700 rounded-lg w-20" })
  ] })
] });
const DeleteConfirmation = ({
  isOpen,
  onClose,
  onConfirm,
  title,
  message
}) => {
  if (!isOpen) return null;
  const isToggleStatus = title.includes("Bloquear") || title.includes("Desbloquear");
  const buttonText = isToggleStatus ? "Confirmar" : "Excluir";
  const buttonClass = isToggleStatus ? "flex-1 !bg-blue-500 hover:!bg-blue-600" : "flex-1 !bg-red-500 hover:!bg-red-600";
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    motion.div,
    {
      initial: { opacity: 0 },
      animate: { opacity: 1 },
      exit: { opacity: 0 },
      className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        motion.div,
        {
          initial: { scale: 0.95, opacity: 0 },
          animate: { scale: 1, opacity: 1 },
          exit: { scale: 0.95, opacity: 0 },
          className: "bg-background-card p-6 rounded-lg shadow-xl max-w-sm mx-4 w-full",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold text-white mb-2", children: title }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: message }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "button",
                  variant: "text",
                  className: "flex-1",
                  onClick: onClose,
                  children: "Cancelar"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "button",
                  variant: "primary",
                  className: buttonClass,
                  onClick: onConfirm,
                  children: buttonText
                }
              )
            ] })
          ]
        }
      )
    }
  );
};
const segmentos = [
  "Bar",
  "Restaurante",
  "Pizzaria",
  "Padaria",
  "Lanchonete",
  "Hamburgueria",
  "Cafeteria",
  "Sorveteria",
  "Doceria",
  "Açaí",
  "Pastelaria",
  "Marmitaria",
  "Churrascaria",
  "Sushi",
  "Outros"
];
const tiposPagamento = [
  { value: "Dinheiro", label: "Dinheiro" },
  { value: "Debito", label: "Débito" },
  { value: "Credito", label: "Crédito" },
  { value: "PIX", label: "PIX" },
  { value: "Vale Alimentacao", label: "Vale Alimentação" }
];
const ConfiguracoesPage = () => {
  const { withSessionCheck } = useAuthSession();
  const { uploadCertificateLocal, removeCertificateLocal, isUploading: isUploadingLocal } = useCertificateUpload();
  const [showSidebar, setShowSidebar] = reactExports.useState(false);
  const [activeSection, setActiveSection] = reactExports.useState("geral");
  const [usuarios, setUsuarios] = reactExports.useState([]);
  const [perfis, setPerfis] = reactExports.useState([]);
  const [empresa, setEmpresa] = reactExports.useState(null);
  const [formasPagamento, setFormasPagamento] = reactExports.useState([]);
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [isCnpjLoading, setIsCnpjLoading] = reactExports.useState(false);
  const [sectionLoading, setSectionLoading] = reactExports.useState(false);
  const [isFirstLoad, setIsFirstLoad] = reactExports.useState(true);
  const [isCepLoading, setIsCepLoading] = reactExports.useState(false);
  const [usuarioLogado, setUsuarioLogado] = reactExports.useState(null);
  const [copiedFields, setCopiedFields] = reactExports.useState({});
  const [selectedTipo, setSelectedTipo] = reactExports.useState("");
  const [storeStatus, setStoreStatus] = reactExports.useState({ modo_operacao: "manual" });
  const [usuarioForm, setUsuarioForm] = reactExports.useState({
    id: "",
    nome: "",
    email: "",
    senha: "",
    confirmarSenha: "",
    tipo_user_config_id: "",
    serie_nfce: 1,
    // ✅ NOVO: Série da NFC-e para o usuário
    // Campos de comissão para vendedores
    tipo_comissao: "total_venda",
    // 'total_venda' ou 'grupos'
    percentual_comissao: 0,
    grupos_comissao: []
    // IDs dos grupos selecionados
  });
  const [tiposUsuario, setTiposUsuario] = reactExports.useState([]);
  const [grupos, setGrupos] = reactExports.useState([]);
  const [mostrarSenha, setMostrarSenha] = reactExports.useState(false);
  const [mostrarConfirmarSenha, setMostrarConfirmarSenha] = reactExports.useState(false);
  const [formErrors, setFormErrors] = reactExports.useState({
    senha: "",
    email: "",
    serie_nfce: ""
    // ✅ NOVO: Erro para série da NFC-e
  });
  const [isEditingUsuario, setIsEditingUsuario] = reactExports.useState(false);
  const [taxaMode, setTaxaMode] = reactExports.useState("bairro");
  const [horarios, setHorarios] = reactExports.useState([]);
  const [tipoControleEstoque, setTipoControleEstoque] = reactExports.useState("pedidos");
  const [bloqueiaSemEstoque, setBloqueiaSemEstoque] = reactExports.useState(false);
  const [agruparItens, setAgruparItens] = reactExports.useState(false);
  const [opcoesAdicionais, setOpcoesAdicionais] = reactExports.useState(false);
  const [taxaEntregaHabilitada, setTaxaEntregaHabilitada] = reactExports.useState(false);
  const [tipoTaxaEntrega, setTipoTaxaEntrega] = reactExports.useState("distancia");
  const [conexaoConfig, setConexaoConfig] = reactExports.useState({
    habilita_conexao_whatsapp: false
  });
  const [pdvConfig, setPdvConfig] = reactExports.useState({
    comandas: false,
    mesas: false,
    vendedor: false,
    exibe_foto_item: false,
    seleciona_clientes: false,
    controla_caixa: false,
    agrupa_itens: false,
    delivery: false,
    cardapio_digital: false,
    delivery_chat_ia: false,
    baixa_estoque_pdv: false,
    venda_codigo_barras: false,
    forca_venda_fiscal_cartao: false,
    observacao_no_item: false,
    desconto_no_item: false,
    editar_nome_produto: false,
    fiado: false,
    ocultar_finalizar_com_impressao: false,
    ocultar_finalizar_sem_impressao: false,
    ocultar_nfce_com_impressao: false,
    ocultar_nfce_sem_impressao: false,
    ocultar_nfce_producao: false,
    ocultar_producao: false
  });
  const [horarioForm, setHorarioForm] = reactExports.useState({
    id: "",
    dia_semana: "0",
    hora_abertura: "08:00",
    hora_fechamento: "18:00"
  });
  const [isEditingHorario, setIsEditingHorario] = reactExports.useState(false);
  const [deleteConfirmation, setDeleteConfirmation] = reactExports.useState({
    isOpen: false,
    itemId: "",
    itemType: "usuario",
    title: "",
    message: ""
  });
  const [empresaForm, setEmpresaForm] = reactExports.useState({
    segmento: "",
    tipo_documento: "CNPJ",
    documento: "",
    razao_social: "",
    nome_fantasia: "",
    nome_proprietario: "",
    whatsapp: "",
    cep: "",
    endereco: "",
    numero: "",
    complemento: "",
    bairro: "",
    cidade: "",
    estado: "",
    inscricao_estadual: "",
    regime_tributario: 3,
    codigo_municipio: "",
    email: ""
  });
  const [showDeleteAccountModal, setShowDeleteAccountModal] = reactExports.useState(false);
  const [devPassword, setDevPassword] = reactExports.useState("");
  const [isDeletingAccount, setIsDeletingAccount] = reactExports.useState(false);
  const [certificadoFile, setCertificadoFile] = reactExports.useState(null);
  const [certificadoSenha, setCertificadoSenha] = reactExports.useState("");
  const [certificadoValidade, setCertificadoValidade] = reactExports.useState("");
  const [certificadoInfo, setCertificadoInfo] = reactExports.useState(null);
  const [isUploadingCertificado, setIsUploadingCertificado] = reactExports.useState(false);
  const [showRemoveCertificadoModal, setShowRemoveCertificadoModal] = reactExports.useState(false);
  const [ambienteNFe, setAmbienteNFe] = reactExports.useState("2");
  const [mostrarSenhaCertificado, setMostrarSenhaCertificado] = reactExports.useState(false);
  const [cscHomologacao, setCscHomologacao] = reactExports.useState("");
  const [cscIdHomologacao, setCscIdHomologacao] = reactExports.useState("");
  const [cscProducao, setCscProducao] = reactExports.useState("");
  const [cscIdProducao, setCscIdProducao] = reactExports.useState("");
  const [isSavingCsc, setIsSavingCsc] = reactExports.useState(false);
  const [nfeValidationModal, setNfeValidationModal] = reactExports.useState({
    isOpen: false,
    campo: "",
    valor: "",
    validationResult: { isValid: true, errors: [] }
  });
  reactExports.useEffect(() => {
    const loadDataWithLoading = async () => {
      await loadData();
      setSectionLoading(false);
      if (isFirstLoad) {
        setIsFirstLoad(false);
      }
    };
    loadDataWithLoading();
  }, [activeSection]);
  const loadData = async () => {
    await withSessionCheck(async () => {
      var _a2, _b2, _c, _d, _e;
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select(`
          id,
          empresa_id,
          tipo_user_config:tipo_user_config_id(tipo)
        `).eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      setUsuarioLogado({
        id: usuarioData.id,
        tipo: ((_a2 = usuarioData.tipo_user_config) == null ? void 0 : _a2.tipo) || "user"
        // Valor padrão 'user' caso não tenha tipo definido
      });
      if (activeSection === "usuarios") {
        const { data: tiposData, error: tiposError } = await supabase.from("tipo_user_config").select("*").eq("ativo", true).order("tipo");
        if (tiposError) {
          console.error("Erro ao carregar tipos de usuário:", tiposError);
          showMessage("error", "Erro ao carregar tipos de usuário");
        } else {
          setTiposUsuario(tiposData || []);
        }
        const { data: gruposData, error: gruposError } = await supabase.from("grupos").select("id, nome").eq("empresa_id", usuarioData.empresa_id).or("deletado.is.null,deletado.eq.false").order("nome");
        if (gruposError) {
          console.error("Erro ao carregar grupos:", gruposError);
        } else {
          setGrupos(gruposData || []);
        }
        let query = supabase.from("usuarios").select(`
            *,
            perfil:perfis_acesso(nome),
            tipo_user_config:tipo_user_config_id(id, tipo, descricao)
          `).eq("empresa_id", usuarioData.empresa_id).order("nome");
        if (((_b2 = usuarioData.tipo_user_config) == null ? void 0 : _b2.tipo) === "user") {
          query = query.eq("id", usuarioData.id);
        }
        const { data: usuariosData, error: usuariosError } = await query;
        if (usuariosError) {
          console.error("Erro ao carregar usuários:", usuariosError);
          showMessage("error", "Erro ao carregar lista de usuários");
          return;
        }
        console.log(`Carregados ${(usuariosData == null ? void 0 : usuariosData.length) || 0} usuários. Usuário logado é ${(_c = usuarioData.tipo_user_config) == null ? void 0 : _c.tipo}`);
        setUsuarios(usuariosData || []);
      }
      if (activeSection === "perfis") {
        const { data: perfisData } = await supabase.from("perfis_acesso").select("*").eq("empresa_id", usuarioData.empresa_id);
        setPerfis(perfisData || []);
      }
      if (activeSection === "geral") {
        const { data: empresaData } = await supabase.from("empresas").select("*").eq("id", usuarioData.empresa_id).single();
        setEmpresa(empresaData);
        if (empresaData) {
          setEmpresaForm(empresaData);
        }
      }
      if (activeSection === "pagamentos") {
        const { data: pagamentosData } = await supabase.from("formas_pagamento").select("*").eq("empresa_id", usuarioData.empresa_id);
        setFormasPagamento(pagamentosData || []);
      }
      if (activeSection === "status") {
        const { data: statusData } = await supabase.from("status_loja").select("*").eq("empresa_id", usuarioData.empresa_id).single();
        if (statusData) {
          setStoreStatus(statusData);
        }
      }
      if (activeSection === "taxa") {
        const { data: configData, error: configError } = await supabase.from("configuracoes").select("taxa_modo").eq("empresa_id", usuarioData.empresa_id).single();
        console.log("Taxa config data:", configData);
        if (configData && configData.taxa_modo) {
          setTaxaMode(configData.taxa_modo);
        }
      }
      if (activeSection === "horarios") {
        const { data: horariosData, error: horariosError } = await supabase.from("horario_atendimento").select("*").eq("empresa_id", usuarioData.empresa_id).order("dia_semana");
        if (horariosError) {
          console.error("Erro ao carregar horários:", horariosError);
          showMessage("error", "Erro ao carregar horários de atendimento");
        } else {
          setHorarios(horariosData || []);
        }
      }
      if (activeSection === "estoque") {
        try {
          const { data: estoqueConfigData, error: estoqueConfigError } = await supabase.from("tipo_controle_estoque_config").select("*").eq("empresa_id", usuarioData.empresa_id).single();
          if (estoqueConfigError) {
            if (estoqueConfigError.code === "PGRST116") {
              console.log("Configuração de estoque não encontrada, criando uma nova...");
              const { error: insertError, data: insertData } = await supabase.from("tipo_controle_estoque_config").insert({
                empresa_id: usuarioData.empresa_id,
                tipo_controle: "pedidos",
                bloqueia_sem_estoque: false
              }).select();
              console.log("Nova configuração criada:", insertData);
              if (insertError) {
                throw insertError;
              }
              setTipoControleEstoque("pedidos");
              setBloqueiaSemEstoque(false);
            } else {
              console.error("Erro ao carregar configuração de estoque:", estoqueConfigError);
              showMessage("error", "Erro ao carregar configuração de controle de estoque");
            }
          } else if (estoqueConfigData) {
            console.log("Configuração de estoque encontrada:", estoqueConfigData);
            if (estoqueConfigData.tipo_controle) {
              setTipoControleEstoque(estoqueConfigData.tipo_controle);
            } else {
              console.log('tipo_controle não definido, usando padrão "pedidos"');
              setTipoControleEstoque("pedidos");
              await supabase.from("tipo_controle_estoque_config").update({ tipo_controle: "pedidos" }).eq("id", estoqueConfigData.id);
            }
            const bloqueiaEstoque = estoqueConfigData.bloqueia_sem_estoque === true;
            console.log("Valor de bloqueia_sem_estoque:", bloqueiaEstoque);
            setBloqueiaSemEstoque(bloqueiaEstoque);
          }
        } catch (error) {
          console.error("Erro ao processar configuração de estoque:", error);
          showMessage("error", "Erro ao processar configuração de controle de estoque");
        }
      }
      if (activeSection === "taxaentrega") {
        try {
          const { data: taxaEntregaConfigData, error: taxaEntregaConfigError } = await supabase.from("taxa_entrega_config").select("*").eq("empresa_id", usuarioData.empresa_id).single();
          if (taxaEntregaConfigError) {
            if (taxaEntregaConfigError.code === "PGRST116") {
              console.log("Configuração de taxa de entrega não encontrada, criando uma nova...");
              const { error: insertError, data: insertData } = await supabase.from("taxa_entrega_config").insert({
                empresa_id: usuarioData.empresa_id,
                habilitado: false,
                tipo: "distancia"
              }).select();
              console.log("Nova configuração de taxa de entrega criada:", insertData);
              if (insertError) {
                throw insertError;
              }
              setTaxaEntregaHabilitada(false);
              setTipoTaxaEntrega("distancia");
            } else {
              console.error("Erro ao carregar configuração de taxa de entrega:", taxaEntregaConfigError);
              showMessage("error", "Erro ao carregar configuração de taxa de entrega");
            }
          } else if (taxaEntregaConfigData) {
            console.log("Configuração de taxa de entrega encontrada:", taxaEntregaConfigData);
            setTaxaEntregaHabilitada(taxaEntregaConfigData.habilitado || false);
            setTipoTaxaEntrega(taxaEntregaConfigData.tipo || "distancia");
          }
        } catch (error) {
          console.error("Erro ao processar configuração de taxa de entrega:", error);
          showMessage("error", "Erro ao processar configuração de taxa de entrega");
        }
      }
      if (activeSection === "pedidos") {
        try {
          const { data: pedidosConfigData, error: pedidosConfigError } = await supabase.from("pedidos_config").select("*").eq("empresa_id", usuarioData.empresa_id).single();
          if (pedidosConfigError) {
            if (pedidosConfigError.code === "PGRST116") {
              console.log("Configuração de pedidos não encontrada, criando uma nova...");
              const { error: insertError, data: insertData } = await supabase.from("pedidos_config").insert({
                empresa_id: usuarioData.empresa_id,
                agrupar_itens: false
              }).select();
              console.log("Nova configuração de pedidos criada:", insertData);
              if (insertError) {
                throw insertError;
              }
              setAgruparItens(false);
            } else {
              console.error("Erro ao carregar configuração de pedidos:", pedidosConfigError);
              showMessage("error", "Erro ao carregar configuração de pedidos");
            }
          } else if (pedidosConfigData) {
            console.log("Configuração de pedidos encontrada:", pedidosConfigData);
            const agruparItensValue = pedidosConfigData.agrupar_itens === true;
            console.log("Valor de agrupar_itens:", agruparItensValue);
            setAgruparItens(agruparItensValue);
          }
        } catch (error) {
          console.error("Erro ao processar configuração de pedidos:", error);
          showMessage("error", "Erro ao processar configuração de pedidos");
        }
      }
      if (activeSection === "produtos") {
        try {
          const { data: produtosConfigData, error: produtosConfigError } = await supabase.from("produtos_config").select("*").eq("empresa_id", usuarioData.empresa_id).single();
          if (produtosConfigError) {
            if (produtosConfigError.code === "PGRST116") {
              console.log("Configuração de produtos não encontrada, criando uma nova...");
              const { error: insertError, data: insertData } = await supabase.from("produtos_config").insert({
                empresa_id: usuarioData.empresa_id,
                opcoes_adicionais: false
              }).select();
              console.log("Nova configuração de produtos criada:", insertData);
              if (insertError) {
                throw insertError;
              }
              setOpcoesAdicionais(false);
            } else {
              console.error("Erro ao carregar configuração de produtos:", produtosConfigError);
              showMessage("error", "Erro ao carregar configuração de produtos");
            }
          } else if (produtosConfigData) {
            console.log("Configuração de produtos encontrada:", produtosConfigData);
            const opcoesAdicionaisValue = produtosConfigData.opcoes_adicionais === true;
            console.log("Valor de opcoes_adicionais:", opcoesAdicionaisValue);
            setOpcoesAdicionais(opcoesAdicionaisValue);
          }
        } catch (error) {
          console.error("Erro ao processar configuração de produtos:", error);
          showMessage("error", "Erro ao processar configuração de produtos");
        }
      }
      if (activeSection === "conexao") {
        try {
          const { data: conexaoConfigData, error: conexaoConfigError } = await supabase.from("conexao_config").select("*").eq("empresa_id", usuarioData.empresa_id).single();
          if (conexaoConfigError) {
            if (conexaoConfigError.code === "PGRST116") {
              console.log("Configuração de conexão não encontrada, criando uma nova...");
              const { error: insertError, data: insertData } = await supabase.from("conexao_config").insert({
                empresa_id: usuarioData.empresa_id,
                habilita_conexao_whatsapp: false
              }).select();
              console.log("Nova configuração de conexão criada:", insertData);
              if (insertError) {
                throw insertError;
              }
              setConexaoConfig({
                habilita_conexao_whatsapp: false
              });
            } else {
              console.error("Erro ao carregar configuração de conexão:", conexaoConfigError);
              showMessage("error", "Erro ao carregar configuração de conexão");
            }
          } else if (conexaoConfigData) {
            console.log("Configuração de conexão encontrada:", conexaoConfigData);
            setConexaoConfig({
              habilita_conexao_whatsapp: conexaoConfigData.habilita_conexao_whatsapp || false
            });
          }
        } catch (error) {
          console.error("Erro ao processar configuração de conexão:", error);
          showMessage("error", "Erro ao processar configuração de conexão");
        }
      }
      if (activeSection === "pdv") {
        carregarConfiguracoesPdv();
      }
      if (activeSection === "certificado") {
        try {
          const certificadoStatus = await checkCertificateStatus(usuarioData.empresa_id);
          if (certificadoStatus.success && certificadoStatus.data) {
            setCertificadoInfo({
              certificado_digital_path: certificadoStatus.data.path || "local_storage",
              certificado_digital_senha: "",
              // Não retornar senha por segurança
              certificado_digital_validade: certificadoStatus.data.validade,
              certificado_digital_status: certificadoStatus.data.status || "ativo",
              certificado_digital_nome: certificadoStatus.data.nome_certificado,
              certificado_digital_uploaded_at: certificadoStatus.data.uploaded_at
            });
          } else {
            setCertificadoInfo(null);
          }
        } catch (error) {
          console.error("Erro ao carregar status do certificado:", error);
          setCertificadoInfo(null);
        }
        const { data: nfeConfigData } = await supabase.from("nfe_config").select("ambiente").eq("empresa_id", usuarioData.empresa_id).single();
        if (nfeConfigData) {
          setAmbienteNFe(nfeConfigData.ambiente === "producao" ? "1" : "2");
        } else {
          const { error: insertError } = await supabase.from("nfe_config").insert({
            empresa_id: usuarioData.empresa_id,
            ambiente: "homologacao"
          });
          if (!insertError) {
            setAmbienteNFe("2");
          }
        }
        const { data: empresaData } = await supabase.from("empresas").select("csc_homologacao, csc_id_homologacao, csc_producao, csc_id_producao").eq("id", usuarioData.empresa_id).single();
        if (empresaData) {
          setCscHomologacao(empresaData.csc_homologacao || "");
          setCscIdHomologacao(((_d = empresaData.csc_id_homologacao) == null ? void 0 : _d.toString()) || "");
          setCscProducao(empresaData.csc_producao || "");
          setCscIdProducao(((_e = empresaData.csc_id_producao) == null ? void 0 : _e.toString()) || "");
        } else {
          setCscHomologacao("");
          setCscIdHomologacao("");
          setCscProducao("");
          setCscIdProducao("");
        }
      }
    });
  };
  const handleSectionChange = async (section) => {
    if (activeSection === section) return;
    if (!isFirstLoad) {
      setSectionLoading(true);
    }
    setActiveSection(section);
  };
  const handleSubmitPagamento = async (e) => {
    e.preventDefault();
    if (!selectedTipo) return;
    setIsLoading(true);
    await withSessionCheck(async () => {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const { error } = await supabase.from("formas_pagamento").insert([{
        tipo: selectedTipo,
        empresa_id: usuarioData.empresa_id
      }]);
      if (error) throw error;
      setSelectedTipo("");
      setShowSidebar(false);
      loadData();
      showMessage("success", "Forma de pagamento adicionada com sucesso!");
    });
    setIsLoading(false);
  };
  const handleSubmitEmpresa = async (e) => {
    e.preventDefault();
    if (empresaForm.razao_social && empresaForm.razao_social.trim() !== "") {
      const razaoValidation = validarRazaoSocialEmpresa(empresaForm.razao_social);
      if (!razaoValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Razão Social da Empresa",
          valor: empresaForm.razao_social,
          validationResult: razaoValidation
        });
        return;
      }
    }
    if (empresaForm.nome_fantasia && empresaForm.nome_fantasia.trim() !== "") {
      const fantasiaValidation = validarNomeFantasiaEmpresa(empresaForm.nome_fantasia);
      if (!fantasiaValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Nome Fantasia da Empresa",
          valor: empresaForm.nome_fantasia,
          validationResult: fantasiaValidation
        });
        return;
      }
    }
    if (empresaForm.nome_proprietario && empresaForm.nome_proprietario.trim() !== "") {
      const proprietarioValidation = validarNomeProprietario(empresaForm.nome_proprietario);
      if (!proprietarioValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Nome do Proprietário",
          valor: empresaForm.nome_proprietario,
          validationResult: proprietarioValidation
        });
        return;
      }
    }
    if (empresaForm.endereco && empresaForm.endereco.trim() !== "") {
      const enderecoValidation = validarEndereco(empresaForm.endereco, "Endereço da Empresa");
      if (!enderecoValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Endereço da Empresa",
          valor: empresaForm.endereco,
          validationResult: enderecoValidation
        });
        return;
      }
    }
    if (empresaForm.bairro && empresaForm.bairro.trim() !== "") {
      const bairroValidation = validarBairro(empresaForm.bairro);
      if (!bairroValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Bairro da Empresa",
          valor: empresaForm.bairro,
          validationResult: bairroValidation
        });
        return;
      }
    }
    if (empresaForm.cidade && empresaForm.cidade.trim() !== "") {
      const cidadeValidation = validarCidade(empresaForm.cidade);
      if (!cidadeValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Cidade da Empresa",
          valor: empresaForm.cidade,
          validationResult: cidadeValidation
        });
        return;
      }
    }
    if (empresaForm.complemento && empresaForm.complemento.trim() !== "") {
      const complementoValidation = validarComplemento(empresaForm.complemento);
      if (!complementoValidation.isValid) {
        setNfeValidationModal({
          isOpen: true,
          campo: "Complemento da Empresa",
          valor: empresaForm.complemento,
          validationResult: complementoValidation
        });
        return;
      }
    }
    setIsLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const { error } = await supabase.from("empresas").update(empresaForm).eq("id", usuarioData.empresa_id);
      if (error) throw error;
      showMessage("success", "Dados da empresa atualizados com sucesso!");
      setShowSidebar(false);
      loadData();
    } catch (error) {
      showMessage("error", "Erro ao atualizar dados: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };
  const handleDeleteAccount = async () => {
    {
      showMessage("error", "Senha de desenvolvedor não configurada");
      return;
    }
  };
  const handleDelete = async (id2, type, nome) => {
    let title, message;
    if (type === "usuario") {
      title = "Excluir Usuário";
      message = `Tem certeza que deseja excluir o usuário "${nome}"? Esta ação não pode ser desfeita.`;
    } else if (type === "perfil") {
      title = "Excluir Perfil";
      message = `Tem certeza que deseja excluir o perfil "${nome}"? Esta ação não pode ser desfeita.`;
    } else if (type === "pagamento") {
      title = "Excluir Forma de Pagamento";
      message = `Tem certeza que deseja excluir a forma de pagamento "${nome}"? Esta ação não pode ser desfeita.`;
    } else if (type === "horario") {
      title = "Excluir Horário de Atendimento";
      message = `Tem certeza que deseja excluir o horário de atendimento para ${nome}? Esta ação não pode ser desfeita.`;
    }
    setDeleteConfirmation({
      isOpen: true,
      itemId: id2,
      itemType: type,
      title,
      message
    });
  };
  const handleConfirmDelete = async () => {
    try {
      const { itemId, itemType } = deleteConfirmation;
      let table;
      if (itemType === "usuario") {
        table = "usuarios";
      } else if (itemType === "perfil") {
        table = "perfis_acesso";
      } else if (itemType === "pagamento") {
        table = "formas_pagamento";
      } else if (itemType === "horario") {
        table = "horario_atendimento";
      }
      const { error } = await supabase.from(table).delete().eq("id", itemId);
      if (error) throw error;
      await loadData();
      let successMessage;
      if (itemType === "usuario") {
        successMessage = "Usuário excluído com sucesso!";
      } else if (itemType === "perfil") {
        successMessage = "Perfil excluído com sucesso!";
      } else if (itemType === "pagamento") {
        successMessage = "Forma de pagamento excluída com sucesso!";
      } else if (itemType === "horario") {
        successMessage = "Horário de atendimento excluído com sucesso!";
      }
      showMessage("success", successMessage);
    } catch (error) {
      showMessage("error", "Erro ao excluir item: " + error.message);
    } finally {
      setDeleteConfirmation((prev) => ({ ...prev, isOpen: false }));
    }
  };
  const handleToggleUserStatus = async (userId, userName, currentStatus) => {
    const action = currentStatus ? "bloquear" : "desbloquear";
    const title = `${action.charAt(0).toUpperCase() + action.slice(1)} Usuário`;
    const message = `Tem certeza que deseja ${action} o usuário "${userName}"?`;
    setDeleteConfirmation({
      isOpen: true,
      itemId: userId,
      itemType: "toggle_status",
      title,
      message
    });
  };
  const handleConfirmToggleStatus = async () => {
    try {
      const userId = deleteConfirmation.itemId;
      const { data: userData, error: fetchError } = await supabase.from("usuarios").select("status").eq("id", userId).single();
      if (fetchError) throw fetchError;
      const newStatus = !(userData == null ? void 0 : userData.status);
      const { error: updateError } = await supabase.from("usuarios").update({ status: newStatus }).eq("id", userId);
      if (updateError) throw updateError;
      await loadData();
      const actionDone = newStatus ? "desbloqueado" : "bloqueado";
      showMessage("success", `Usuário ${actionDone} com sucesso!`);
    } catch (error) {
      showMessage("error", `Erro ao alterar status do usuário: ${error.message}`);
    } finally {
      setDeleteConfirmation((prev) => ({ ...prev, isOpen: false }));
    }
  };
  const handleEditHorario = (horario) => {
    setHorarioForm({
      id: horario.id,
      dia_semana: horario.dia_semana.toString(),
      hora_abertura: horario.hora_abertura.substring(0, 5),
      hora_fechamento: horario.hora_fechamento.substring(0, 5)
    });
    setIsEditingHorario(true);
    setShowSidebar(true);
  };
  const handleEditUsuario = async (usuario) => {
    setFormErrors({
      senha: "",
      email: "",
      serie_nfce: ""
    });
    const tipoSelecionado = tiposUsuario.find((tipo) => tipo.id === usuario.tipo_user_config_id);
    let comissaoData = {
      tipo_comissao: "total_venda",
      percentual_comissao: 0,
      grupos_comissao: []
    };
    if ((tipoSelecionado == null ? void 0 : tipoSelecionado.tipo) === "vendedor") {
      comissaoData = await carregarComissaoVendedor(usuario.id);
    }
    setUsuarioForm({
      id: usuario.id,
      nome: usuario.nome,
      email: usuario.email,
      senha: "",
      // Campos de senha vazios na edição
      confirmarSenha: "",
      tipo_user_config_id: usuario.tipo_user_config_id || "",
      serie_nfce: usuario.serie_nfce || 1,
      // ✅ NOVO: Carregar série da NFC-e
      // Campos de comissão para vendedores
      tipo_comissao: comissaoData.tipo_comissao,
      percentual_comissao: comissaoData.percentual_comissao,
      grupos_comissao: comissaoData.grupos_comissao
    });
    setIsEditingUsuario(true);
    setActiveSection("usuarios");
    setShowSidebar(true);
  };
  const handleSubmitHorario = async (e) => {
    e.preventDefault();
    const abertura = /* @__PURE__ */ new Date(`2000-01-01T${horarioForm.hora_abertura}`);
    const fechamento = /* @__PURE__ */ new Date(`2000-01-01T${horarioForm.hora_fechamento}`);
    if (fechamento <= abertura) {
      showMessage("error", "O horário de fechamento deve ser maior que o horário de abertura.");
      return;
    }
    setIsLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      if (isEditingHorario) {
        const { error } = await supabase.from("horario_atendimento").update({
          hora_abertura: horarioForm.hora_abertura,
          hora_fechamento: horarioForm.hora_fechamento
        }).eq("id", horarioForm.id);
        if (error) throw error;
        setIsEditingHorario(false);
        setShowSidebar(false);
        loadData();
        showMessage("success", "Horário de atendimento atualizado com sucesso!");
      } else {
        const { data: existingHorario } = await supabase.from("horario_atendimento").select("id").eq("empresa_id", usuarioData.empresa_id).eq("dia_semana", parseInt(horarioForm.dia_semana)).maybeSingle();
        if (existingHorario) {
          showMessage("error", "Já existe um horário cadastrado para este dia da semana. Edite-o ou remova-o primeiro para adicionar um novo.");
          setIsLoading(false);
          return;
        }
        const { error } = await supabase.from("horario_atendimento").insert([{
          empresa_id: usuarioData.empresa_id,
          dia_semana: parseInt(horarioForm.dia_semana),
          hora_abertura: horarioForm.hora_abertura,
          hora_fechamento: horarioForm.hora_fechamento
        }]);
        if (error) throw error;
        const nextDay = (parseInt(horarioForm.dia_semana) + 1) % 7;
        setHorarioForm({
          id: "",
          dia_semana: nextDay.toString(),
          hora_abertura: "08:00",
          hora_fechamento: "18:00"
        });
        setShowSidebar(false);
        loadData();
        showMessage("success", "Horário de atendimento adicionado com sucesso!");
      }
    } catch (error) {
      showMessage("error", `Erro ao ${isEditingHorario ? "atualizar" : "adicionar"} horário de atendimento: ` + error.message);
    } finally {
      setIsLoading(false);
    }
  };
  const handleOperationModeChange = async (mode) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { error } = await supabase.from("status_loja").update({ modo_operacao: mode }).eq("empresa_id", usuarioData.empresa_id);
      if (error) throw error;
      setStoreStatus((prev) => ({ ...prev, modo_operacao: mode }));
      showMessage("success", "Modo de operação atualizado com sucesso!");
    } catch (error) {
      showMessage("error", "Erro ao atualizar modo de operação");
    }
  };
  const handleTaxaModeChange = async (mode) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        showMessage("error", "Usuário não autenticado");
        return;
      }
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        showMessage("error", "Empresa não encontrada");
        return;
      }
      const { data: taxasData, error: taxasError } = await supabase.from("taxa_entrega").select("id").eq("empresa_id", usuarioData.empresa_id);
      if (taxasError) throw taxasError;
      if (taxasData && taxasData.length > 0) {
        showMessage(
          "error",
          `Não é possível alterar o modo de taxa de entrega porque existem ${taxasData.length} taxa(s) cadastrada(s). Remova todas as taxas de entrega existentes antes de alterar o modo.`
        );
        return;
      }
      setTaxaMode(mode);
      const { data: configData } = await supabase.from("configuracoes").select("id, taxa_modo").eq("empresa_id", usuarioData.empresa_id).single();
      let error;
      if (configData) {
        if (configData.taxa_modo === mode) {
          console.log(`Modo de taxa já está configurado como ${mode}`);
          return;
        }
        ({ error } = await supabase.from("configuracoes").update({ taxa_modo: mode }).eq("id", configData.id));
      } else {
        ({ error } = await supabase.from("configuracoes").insert([{
          empresa_id: usuarioData.empresa_id,
          taxa_modo: mode
        }]));
      }
      if (error) throw error;
      console.log(`Modo de taxa de entrega atualizado para: ${mode}`);
      showMessage("success", "Modo de taxa de entrega atualizado com sucesso!");
    } catch (error) {
      console.error("Erro ao atualizar modo de taxa:", error);
      showMessage("error", `Erro ao atualizar modo de taxa de entrega: ${error.message}`);
    }
  };
  const handleTipoControleEstoqueChange = async (tipo) => {
    console.log("Alterando tipo de controle de estoque para:", tipo);
    setIsLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      console.log("Empresa ID:", usuarioData.empresa_id);
      const { data: existingConfig } = await supabase.from("tipo_controle_estoque_config").select("id").eq("empresa_id", usuarioData.empresa_id).single();
      let error;
      if (existingConfig) {
        const { error: updateError } = await supabase.from("tipo_controle_estoque_config").update({
          tipo_controle: tipo,
          // Manter o valor atual de bloqueia_sem_estoque
          bloqueia_sem_estoque: bloqueiaSemEstoque
        }).eq("id", existingConfig.id);
        error = updateError;
      } else {
        const { error: insertError } = await supabase.from("tipo_controle_estoque_config").insert({
          empresa_id: usuarioData.empresa_id,
          tipo_controle: tipo,
          bloqueia_sem_estoque: bloqueiaSemEstoque
        });
        error = insertError;
      }
      if (error) throw error;
      setTipoControleEstoque(tipo);
      showMessage("success", "Configuração de controle de estoque atualizada com sucesso!");
    } catch (error) {
      showMessage("error", "Erro ao atualizar configuração de estoque: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };
  const handleBloqueiaSemEstoqueChange = async (bloqueia) => {
    console.log("Alterando configuração de bloqueio de estoque para:", bloqueia);
    setIsLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      console.log("Empresa ID:", usuarioData.empresa_id);
      const { data: existingConfig } = await supabase.from("tipo_controle_estoque_config").select("id").eq("empresa_id", usuarioData.empresa_id).single();
      let error;
      if (existingConfig) {
        console.log("Atualizando configuração existente:", existingConfig.id);
        const { error: updateError, data: updateData } = await supabase.from("tipo_controle_estoque_config").update({
          bloqueia_sem_estoque: bloqueia,
          // Manter o valor atual de tipo_controle
          tipo_controle: tipoControleEstoque
        }).eq("id", existingConfig.id).select();
        console.log("Resultado da atualização:", updateData);
        error = updateError;
      } else {
        console.log("Criando nova configuração para empresa:", usuarioData.empresa_id);
        const { error: insertError, data: insertData } = await supabase.from("tipo_controle_estoque_config").insert({
          empresa_id: usuarioData.empresa_id,
          tipo_controle: tipoControleEstoque,
          bloqueia_sem_estoque: bloqueia
        }).select();
        console.log("Resultado da inserção:", insertData);
        error = insertError;
      }
      if (error) {
        console.error("Erro ao salvar configuração:", error);
        throw error;
      }
      setBloqueiaSemEstoque(bloqueia);
      showMessage("success", "Configuração de bloqueio de estoque atualizada com sucesso!");
    } catch (error) {
      console.error("Exceção ao atualizar configuração de bloqueio de estoque:", error);
      showMessage("error", "Erro ao atualizar configuração de bloqueio de estoque: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };
  const handleAgruparItensChange = async (agrupar) => {
    console.log("Alterando configuração de agrupar itens para:", agrupar);
    setIsLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      console.log("Empresa ID:", usuarioData.empresa_id);
      const { data: existingConfig } = await supabase.from("pedidos_config").select("id").eq("empresa_id", usuarioData.empresa_id).single();
      let error;
      if (existingConfig) {
        console.log("Atualizando configuração existente:", existingConfig.id);
        const { error: updateError, data: updateData } = await supabase.from("pedidos_config").update({
          agrupar_itens: agrupar
        }).eq("id", existingConfig.id).select();
        console.log("Resultado da atualização:", updateData);
        error = updateError;
      } else {
        console.log("Criando nova configuração para empresa:", usuarioData.empresa_id);
        const { error: insertError, data: insertData } = await supabase.from("pedidos_config").insert({
          empresa_id: usuarioData.empresa_id,
          agrupar_itens: agrupar
        }).select();
        console.log("Resultado da inserção:", insertData);
        error = insertError;
      }
      if (error) {
        console.error("Erro ao salvar configuração:", error);
        throw error;
      }
      setAgruparItens(agrupar);
      showMessage("success", "Configuração de agrupar itens atualizada com sucesso!");
    } catch (error) {
      console.error("Exceção ao atualizar configuração de agrupar itens:", error);
      showMessage("error", "Erro ao atualizar configuração de agrupar itens: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };
  const formatCNPJ = (value) => {
    return value.replace(/\D/g, "").replace(/^(\d{2})(\d)/, "$1.$2").replace(/^(\d{2})\.(\d{3})(\d)/, "$1.$2.$3").replace(/\.(\d{3})(\d)/, ".$1/$2").replace(/(\d{4})(\d)/, "$1-$2").substring(0, 18);
  };
  const formatCPF = (value) => {
    return value.replace(/\D/g, "").replace(/(\d{3})(\d)/, "$1.$2").replace(/(\d{3})(\d)/, "$1.$2").replace(/(\d{3})(\d{1,2})/, "$1-$2").substring(0, 14);
  };
  const formatCEP = (value) => {
    return value.replace(/\D/g, "").replace(/^(\d{5})(\d)/, "$1-$2").substring(0, 9);
  };
  const formatWhatsapp = (value) => {
    return value.replace(/\D/g, "").replace(/^(\d{2})(\d)/, "($1) $2").replace(/(\d{5})(\d)/, "$1-$2").substring(0, 15);
  };
  const salvarComissaoVendedor = async (usuarioId, empresaId) => {
    try {
      await supabase.from("vendedor_comissao").update({ ativo: false }).eq("usuario_id", usuarioId);
      const { error } = await supabase.from("vendedor_comissao").insert({
        usuario_id: usuarioId,
        empresa_id: empresaId,
        tipo_comissao: usuarioForm.tipo_comissao,
        percentual_comissao: usuarioForm.tipo_comissao === "total_venda" ? usuarioForm.percentual_comissao : 0,
        grupos_selecionados: usuarioForm.tipo_comissao === "grupos" ? usuarioForm.grupos_comissao : [],
        ativo: true
      });
      if (error) throw error;
    } catch (error) {
      console.error("Erro ao salvar comissão do vendedor:", error);
      throw error;
    }
  };
  const desativarComissaoVendedor = async (usuarioId) => {
    try {
      await supabase.from("vendedor_comissao").update({ ativo: false }).eq("usuario_id", usuarioId);
    } catch (error) {
      console.error("Erro ao desativar comissão do vendedor:", error);
    }
  };
  const carregarComissaoVendedor = async (usuarioId) => {
    try {
      const { data, error } = await supabase.from("vendedor_comissao").select("*").eq("usuario_id", usuarioId).eq("ativo", true).single();
      if (error && error.code !== "PGRST116") {
        throw error;
      }
      if (data) {
        return {
          tipo_comissao: data.tipo_comissao,
          percentual_comissao: data.percentual_comissao || 0,
          grupos_comissao: data.grupos_selecionados || []
        };
      }
      return {
        tipo_comissao: "total_venda",
        percentual_comissao: 0,
        grupos_comissao: []
      };
    } catch (error) {
      console.error("Erro ao carregar comissão do vendedor:", error);
      return {
        tipo_comissao: "total_venda",
        percentual_comissao: 0,
        grupos_comissao: []
      };
    }
  };
  const handleSubmitUsuario = async (e) => {
    e.preventDefault();
    setFormErrors({
      senha: "",
      email: ""
    });
    if (!usuarioForm.nome) {
      showMessage("error", "O nome é obrigatório");
      return;
    }
    if (!isEditingUsuario && !usuarioForm.email) {
      showMessage("error", "O email é obrigatório");
      return;
    }
    if (!isEditingUsuario && (!usuarioForm.senha || !usuarioForm.confirmarSenha)) {
      showMessage("error", "A senha e a confirmação são obrigatórias para novos usuários");
      return;
    }
    if (!usuarioForm.tipo_user_config_id) {
      showMessage("error", "O tipo de usuário é obrigatório");
      return;
    }
    if (usuarioForm.senha && usuarioForm.senha !== usuarioForm.confirmarSenha) {
      setFormErrors((prev) => ({ ...prev, senha: "As senhas não coincidem" }));
      return;
    }
    if (usuarioForm.senha && usuarioForm.senha.length < 6) {
      setFormErrors((prev) => ({ ...prev, senha: "A senha deve ter pelo menos 6 caracteres" }));
      return;
    }
    if (!isEditingUsuario) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(usuarioForm.email)) {
        setFormErrors((prev) => ({ ...prev, email: "Email inválido" }));
        return;
      }
    }
    setIsLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const { data: serieExistente } = await supabase.from("usuarios").select("id").eq("empresa_id", usuarioData.empresa_id).eq("serie_nfce", usuarioForm.serie_nfce).neq("id", usuarioForm.id || "").maybeSingle();
      if (serieExistente) {
        setFormErrors((prev) => ({ ...prev, serie_nfce: `A série ${usuarioForm.serie_nfce} já está sendo usada por outro usuário desta empresa` }));
        setIsLoading(false);
        return;
      }
      if (isEditingUsuario) {
        const { error: updateError } = await supabase.from("usuarios").update({
          nome: usuarioForm.nome,
          tipo_user_config_id: usuarioForm.tipo_user_config_id,
          serie_nfce: usuarioForm.serie_nfce
          // ✅ NOVO: Atualizar série da NFC-e
        }).eq("id", usuarioForm.id);
        if (updateError) throw updateError;
        if (usuarioForm.senha) {
          const { error: passwordError } = await supabase.auth.updateUser({
            password: usuarioForm.senha
          });
          if (passwordError) throw passwordError;
        }
        const tipoSelecionado = tiposUsuario.find((tipo) => tipo.id === usuarioForm.tipo_user_config_id);
        if ((tipoSelecionado == null ? void 0 : tipoSelecionado.tipo) === "vendedor") {
          await salvarComissaoVendedor(usuarioForm.id, usuarioData.empresa_id);
        } else {
          await desativarComissaoVendedor(usuarioForm.id);
        }
        showMessage("success", "Usuário atualizado com sucesso!");
      } else {
        const { data: emailExistente } = await supabase.from("usuarios").select("id").eq("email", usuarioForm.email).eq("empresa_id", usuarioData.empresa_id).maybeSingle();
        if (emailExistente) {
          setFormErrors((prev) => ({ ...prev, email: "Este email já está cadastrado nesta empresa" }));
          setIsLoading(false);
          return;
        }
        const { data: currentSession } = await supabase.auth.getSession();
        if (!(currentSession == null ? void 0 : currentSession.session)) {
          throw new Error("Sessão atual não encontrada");
        }
        const { data: authData, error: authError } = await supabase.auth.signUp({
          email: usuarioForm.email,
          password: usuarioForm.senha,
          options: {
            emailRedirectTo: window.location.origin
          }
        });
        if (authError) {
          if (authError.message.includes("email already registered")) {
            setFormErrors((prev) => ({ ...prev, email: "Este email já está cadastrado no sistema" }));
            setIsLoading(false);
            return;
          }
          throw authError;
        }
        if (!authData.user) throw new Error("Erro ao criar usuário");
        await supabase.auth.setSession({
          access_token: currentSession.session.access_token,
          refresh_token: currentSession.session.refresh_token
        });
        const { error: insertError } = await supabase.from("usuarios").insert([{
          id: authData.user.id,
          nome: usuarioForm.nome,
          email: usuarioForm.email,
          empresa_id: usuarioData.empresa_id,
          tipo_user_config_id: usuarioForm.tipo_user_config_id,
          serie_nfce: usuarioForm.serie_nfce,
          // ✅ NOVO: Incluir série da NFC-e
          status: true
          // Definir o status como ativo por padrão
        }]);
        if (insertError) throw insertError;
        const tipoSelecionado = tiposUsuario.find((tipo) => tipo.id === usuarioForm.tipo_user_config_id);
        if ((tipoSelecionado == null ? void 0 : tipoSelecionado.tipo) === "vendedor") {
          await salvarComissaoVendedor(authData.user.id, usuarioData.empresa_id);
        }
        showMessage("success", "Usuário adicionado com sucesso!");
      }
      setUsuarioForm({
        id: "",
        nome: "",
        email: "",
        senha: "",
        confirmarSenha: "",
        tipo_user_config_id: "",
        serie_nfce: 1,
        tipo_comissao: "total_venda",
        percentual_comissao: 0,
        grupos_comissao: []
      });
      setIsEditingUsuario(false);
      setShowSidebar(false);
      loadData();
    } catch (error) {
      showMessage("error", `Erro ao ${isEditingUsuario ? "atualizar" : "adicionar"} usuário: ${translateErrorMessage(error)}`);
    } finally {
      setIsLoading(false);
    }
  };
  const handleDocumentoChange = (e) => {
    const value = e.target.value;
    const formattedValue = empresaForm.tipo_documento === "CNPJ" ? formatCNPJ(value) : formatCPF(value);
    setEmpresaForm((prev) => ({
      ...prev,
      documento: formattedValue
    }));
  };
  const formatInscricaoEstadual = (value) => {
    const numbersOnly = value.replace(/\D/g, "");
    return numbersOnly.slice(0, 12);
  };
  const handleInscricaoEstadualChange = (e) => {
    const value = e.target.value;
    const formattedValue = formatInscricaoEstadual(value);
    setEmpresaForm((prev) => ({
      ...prev,
      inscricao_estadual: formattedValue
    }));
  };
  const buscarCNPJ = async () => {
    const cnpj = empresaForm.documento.replace(/\D/g, "");
    if (cnpj.length !== 14) {
      showMessage("error", "CNPJ inválido. O CNPJ deve conter 14 dígitos.");
      return;
    }
    try {
      setIsCnpjLoading(true);
      const response = await fetch(`https://brasilapi.com.br/api/cnpj/v1/${cnpj}`);
      const data = await response.json();
      if (response.ok) {
        const codigoIBGE = await buscarCodigoIBGE(data.municipio, data.uf);
        setEmpresaForm((prev) => ({
          ...prev,
          razao_social: data.razao_social || "",
          nome_fantasia: data.nome_fantasia || "",
          cep: formatCEP(data.cep || ""),
          endereco: data.logradouro || "",
          numero: data.numero || "",
          complemento: data.complemento || "",
          bairro: data.bairro || "",
          cidade: data.municipio || "",
          estado: data.uf || "",
          codigo_municipio: codigoIBGE || ""
        }));
        if (codigoIBGE) {
          showMessage("success", "Dados do CNPJ e código IBGE carregados com sucesso!");
        } else {
          showMessage("success", "Dados do CNPJ carregados! Código IBGE não encontrado automaticamente.");
        }
      } else {
        showMessage("error", data.message || "CNPJ não encontrado");
      }
    } catch (error) {
      console.error("Erro ao buscar CNPJ:", error);
      showMessage("error", "Erro ao buscar CNPJ. Tente novamente.");
    } finally {
      setIsCnpjLoading(false);
    }
  };
  const buscarCodigoIBGE = async (cidade, estado) => {
    try {
      if (!cidade || !estado) return null;
      const response = await fetch(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${estado}/municipios`);
      const municipios = await response.json();
      const municipio = municipios.find(
        (m2) => m2.nome.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "") === cidade.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "")
      );
      return municipio ? municipio.id.toString() : null;
    } catch (error) {
      console.error("Erro ao buscar código IBGE:", error);
      return null;
    }
  };
  const handleUploadCertificado = async () => {
    if (!certificadoFile || !certificadoSenha.trim()) {
      showMessage("error", "Selecione um arquivo de certificado e informe a senha");
      return;
    }
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const result = await uploadCertificateLocal(
        certificadoFile,
        certificadoSenha,
        usuarioData.empresa_id
      );
      if (result.success) {
        setCertificadoFile(null);
        setCertificadoSenha("");
        loadData();
      }
    } catch (error) {
      limparCamposCertificado();
      console.error("❌ Erro no upload:", error);
    }
  };
  const limparCamposCertificado = () => {
    setCertificadoFile(null);
    setCertificadoSenha("");
    setCertificadoInfo(null);
    const fileInput = document.querySelector('input[type="file"][accept=".p12,.pfx"]');
    if (fileInput) {
      fileInput.value = "";
    }
  };
  const handleRemoverCertificado = async () => {
    if (!(certificadoInfo == null ? void 0 : certificadoInfo.certificado_digital_path)) return;
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const success = await removeCertificateLocal(usuarioData.empresa_id);
      if (success) {
        limparCamposCertificado();
        setShowRemoveCertificadoModal(false);
        loadData();
      }
    } catch (error) {
      console.error("❌ Erro ao remover certificado:", error);
      showMessage("error", "Erro ao remover certificado: " + error.message);
      setShowRemoveCertificadoModal(false);
    }
  };
  const handleSalvarAmbienteNFe = async (novoAmbiente) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const ambienteTexto = novoAmbiente === "1" ? "producao" : "homologacao";
      const { data: existingConfig } = await supabase.from("nfe_config").select("id").eq("empresa_id", usuarioData.empresa_id).single();
      if (existingConfig) {
        const { error } = await supabase.from("nfe_config").update({ ambiente: ambienteTexto }).eq("empresa_id", usuarioData.empresa_id);
        if (error) throw error;
      } else {
        const { error } = await supabase.from("nfe_config").insert({
          empresa_id: usuarioData.empresa_id,
          ambiente: ambienteTexto
        });
        if (error) throw error;
      }
      setAmbienteNFe(novoAmbiente);
      showMessage("success", `Ambiente alterado para ${novoAmbiente === "1" ? "Produção" : "Homologação"}`);
    } catch (error) {
      console.error("Erro ao salvar ambiente NFe:", error);
      showMessage("error", "Erro ao salvar ambiente NFe");
    }
  };
  const handleSalvarCscNfce = async () => {
    try {
      setIsSavingCsc(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      if (cscHomologacao && !cscIdHomologacao) {
        showMessage("error", "CSC ID de homologação é obrigatório quando CSC de homologação for informado");
        return;
      }
      if (cscProducao && !cscIdProducao) {
        showMessage("error", "CSC ID de produção é obrigatório quando CSC de produção for informado");
        return;
      }
      const cscData = {
        csc_homologacao: cscHomologacao || null,
        csc_id_homologacao: cscIdHomologacao ? parseInt(cscIdHomologacao) : null,
        csc_producao: cscProducao || null,
        csc_id_producao: cscIdProducao ? parseInt(cscIdProducao) : null
      };
      const { error } = await supabase.from("empresas").update(cscData).eq("id", usuarioData.empresa_id);
      if (error) throw error;
      showMessage("success", "Configuração CSC para NFCe salva com sucesso!");
    } catch (error) {
      console.error("Erro ao salvar CSC NFCe:", error);
      showMessage("error", "Erro ao salvar configuração CSC");
    } finally {
      setIsSavingCsc(false);
    }
  };
  const buscarCEP = async () => {
    const cep = empresaForm.cep.replace(/\D/g, "");
    if (cep.length !== 8) return;
    try {
      setIsCepLoading(true);
      const response = await fetch(`https://viacep.com.br/ws/${cep}/json/`);
      const data = await response.json();
      if (!data.erro) {
        const codigoIBGE = await buscarCodigoIBGE(data.localidade, data.uf);
        setEmpresaForm((prev) => ({
          ...prev,
          endereco: data.logradouro,
          bairro: data.bairro,
          cidade: data.localidade,
          estado: data.uf,
          codigo_municipio: codigoIBGE || ""
        }));
        if (codigoIBGE) {
          showMessage("success", "Endereço e código IBGE carregados com sucesso!");
        } else {
          showMessage("success", "Endereço carregado! Código IBGE não encontrado automaticamente.");
        }
      } else {
        showMessage("error", "CEP não encontrado");
      }
    } catch (error) {
      console.error("Erro ao buscar CEP:", error);
      showMessage("error", "Erro ao buscar CEP. Tente novamente.");
    } finally {
      setIsCepLoading(false);
    }
  };
  const handleCopyToClipboard = (text, fieldId) => {
    navigator.clipboard.writeText(text).then(() => {
      setCopiedFields((prev) => ({ ...prev, [fieldId]: true }));
      setTimeout(() => {
        setCopiedFields((prev) => ({ ...prev, [fieldId]: false }));
      }, 2e3);
      showMessage("success", "Texto copiado!");
    }).catch((err) => {
      console.error("Erro ao copiar texto: ", err);
      showMessage("error", "Erro ao copiar texto");
    });
  };
  const carregarConfiguracoesPdv = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: config } = await supabase.from("pdv_config").select("*").eq("empresa_id", usuarioData.empresa_id).single();
      if (config) {
        setPdvConfig({
          comandas: config.comandas || false,
          mesas: config.mesas || false,
          vendedor: config.vendedor || false,
          exibe_foto_item: config.exibe_foto_item || false,
          seleciona_clientes: config.seleciona_clientes || false,
          controla_caixa: config.controla_caixa || false,
          agrupa_itens: config.agrupa_itens || false,
          delivery: config.delivery || false,
          cardapio_digital: config.cardapio_digital || false,
          delivery_chat_ia: config.delivery_chat_ia || false,
          baixa_estoque_pdv: config.baixa_estoque_pdv || false,
          venda_codigo_barras: config.venda_codigo_barras || false,
          forca_venda_fiscal_cartao: config.forca_venda_fiscal_cartao || false,
          observacao_no_item: config.observacao_no_item || false,
          desconto_no_item: config.desconto_no_item || false,
          editar_nome_produto: config.editar_nome_produto || false,
          fiado: config.fiado || false,
          ocultar_finalizar_com_impressao: config.ocultar_finalizar_com_impressao || false,
          ocultar_finalizar_sem_impressao: config.ocultar_finalizar_sem_impressao || false,
          ocultar_nfce_com_impressao: config.ocultar_nfce_com_impressao || false,
          ocultar_nfce_sem_impressao: config.ocultar_nfce_sem_impressao || false,
          ocultar_nfce_producao: config.ocultar_nfce_producao || false,
          ocultar_producao: config.ocultar_producao || false
        });
      } else {
        setPdvConfig({
          comandas: false,
          mesas: false,
          vendedor: false,
          exibe_foto_item: false,
          seleciona_clientes: false,
          controla_caixa: false,
          agrupa_itens: false,
          delivery: false,
          cardapio_digital: false,
          delivery_chat_ia: false,
          baixa_estoque_pdv: false,
          venda_codigo_barras: false,
          forca_venda_fiscal_cartao: false,
          observacao_no_item: false,
          desconto_no_item: false,
          editar_nome_produto: false,
          fiado: false,
          ocultar_finalizar_com_impressao: false,
          ocultar_finalizar_sem_impressao: false,
          ocultar_nfce_com_impressao: false,
          ocultar_nfce_sem_impressao: false,
          ocultar_nfce_producao: false,
          ocultar_producao: false
        });
      }
    } catch (error) {
      console.error("Erro ao carregar configurações do PDV:", error);
      setPdvConfig({
        comandas: false,
        mesas: false,
        vendedor: false,
        exibe_foto_item: false,
        seleciona_clientes: false,
        controla_caixa: false,
        agrupa_itens: false,
        delivery: false,
        cardapio_digital: false,
        delivery_chat_ia: false,
        baixa_estoque_pdv: false,
        venda_codigo_barras: false,
        forca_venda_fiscal_cartao: false,
        observacao_no_item: false,
        desconto_no_item: false,
        editar_nome_produto: false,
        fiado: false,
        ocultar_finalizar_com_impressao: false,
        ocultar_finalizar_sem_impressao: false,
        ocultar_nfce_com_impressao: false,
        ocultar_nfce_sem_impressao: false,
        ocultar_nfce_producao: false,
        ocultar_producao: false
      });
    }
  };
  const handleOpcoesAdicionaisChange = async (value) => {
    try {
      setOpcoesAdicionais(value);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: existingConfig } = await supabase.from("produtos_config").select("id").eq("empresa_id", usuarioData.empresa_id).single();
      const configData = {
        empresa_id: usuarioData.empresa_id,
        opcoes_adicionais: value
      };
      if (existingConfig) {
        const { error } = await supabase.from("produtos_config").update(configData).eq("empresa_id", usuarioData.empresa_id);
        if (error) throw error;
      } else {
        const { error } = await supabase.from("produtos_config").insert([configData]);
        if (error) throw error;
      }
      console.log("Disparando evento opcoesAdicionaisChanged com valor:", value);
      window.dispatchEvent(new CustomEvent("opcoesAdicionaisChanged", {
        detail: { opcoesAdicionais: value }
      }));
      const status = value ? "habilitadas" : "desabilitadas";
      showMessage("success", `Opções Adicionais ${status} com sucesso!`);
    } catch (error) {
      setOpcoesAdicionais(!value);
      console.error("Erro ao salvar configuração de produtos:", error);
      showMessage("error", "Erro ao salvar configuração: " + error.message);
    }
  };
  const handleSalvarTaxaEntrega = async () => {
    try {
      setIsLoading(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: existingConfig } = await supabase.from("taxa_entrega_config").select("id").eq("empresa_id", usuarioData.empresa_id).single();
      if (existingConfig) {
        const { error } = await supabase.from("taxa_entrega_config").update({
          habilitado: taxaEntregaHabilitada,
          tipo: tipoTaxaEntrega
        }).eq("empresa_id", usuarioData.empresa_id);
        if (error) throw error;
      } else {
        const { error } = await supabase.from("taxa_entrega_config").insert({
          empresa_id: usuarioData.empresa_id,
          habilitado: taxaEntregaHabilitada,
          tipo: tipoTaxaEntrega
        });
        if (error) throw error;
      }
      console.log("📡 Disparando evento taxaEntregaChanged com valor:", taxaEntregaHabilitada);
      window.dispatchEvent(new CustomEvent("taxaEntregaChanged", {
        detail: {
          taxaEntregaHabilitada,
          tipo: tipoTaxaEntrega
        }
      }));
      showMessage("success", "Configuração de taxa de entrega salva com sucesso!");
    } catch (error) {
      console.error("Erro ao salvar configuração de taxa de entrega:", error);
      showMessage("error", "Erro ao salvar configuração de taxa de entrega");
    } finally {
      setIsLoading(false);
    }
  };
  const handleConexaoConfigChange = async (field, value) => {
    try {
      setConexaoConfig((prev) => ({ ...prev, [field]: value }));
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: existingConfig } = await supabase.from("conexao_config").select("id").eq("empresa_id", usuarioData.empresa_id).single();
      const configData = {
        empresa_id: usuarioData.empresa_id,
        habilita_conexao_whatsapp: field === "habilita_conexao_whatsapp" ? value : conexaoConfig.habilita_conexao_whatsapp
      };
      if (existingConfig) {
        const { error } = await supabase.from("conexao_config").update(configData).eq("empresa_id", usuarioData.empresa_id);
        if (error) throw error;
      } else {
        const { error } = await supabase.from("conexao_config").insert([configData]);
        if (error) throw error;
      }
      window.dispatchEvent(new CustomEvent("conexaoChanged", {
        detail: { conexaoHabilitada: value }
      }));
      const status = value ? "habilitada" : "desabilitada";
      showMessage("success", `Conexão com WhatsApp ${status} com sucesso!`);
    } catch (error) {
      setConexaoConfig((prev) => ({ ...prev, [field]: !value }));
      console.error("Erro ao salvar configuração de conexão:", error);
      showMessage("error", "Erro ao salvar configuração: " + error.message);
    }
  };
  const handlePdvConfigChange = async (field, value) => {
    try {
      setPdvConfig((prev) => ({ ...prev, [field]: value }));
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        throw new Error("Empresa não encontrada");
      }
      const { data: existingConfig } = await supabase.from("pdv_config").select("id").eq("empresa_id", usuarioData.empresa_id).single();
      const configData = {
        empresa_id: usuarioData.empresa_id,
        comandas: field === "comandas" ? value : pdvConfig.comandas,
        mesas: field === "mesas" ? value : pdvConfig.mesas,
        vendedor: field === "vendedor" ? value : pdvConfig.vendedor,
        exibe_foto_item: field === "exibe_foto_item" ? value : pdvConfig.exibe_foto_item,
        seleciona_clientes: field === "seleciona_clientes" ? value : pdvConfig.seleciona_clientes,
        controla_caixa: field === "controla_caixa" ? value : pdvConfig.controla_caixa,
        agrupa_itens: field === "agrupa_itens" ? value : pdvConfig.agrupa_itens,
        delivery: field === "delivery" ? value : pdvConfig.delivery,
        cardapio_digital: field === "cardapio_digital" ? value : pdvConfig.cardapio_digital,
        delivery_chat_ia: field === "delivery_chat_ia" ? value : pdvConfig.delivery_chat_ia,
        baixa_estoque_pdv: field === "baixa_estoque_pdv" ? value : pdvConfig.baixa_estoque_pdv,
        venda_codigo_barras: field === "venda_codigo_barras" ? value : pdvConfig.venda_codigo_barras,
        forca_venda_fiscal_cartao: field === "forca_venda_fiscal_cartao" ? value : pdvConfig.forca_venda_fiscal_cartao,
        observacao_no_item: field === "observacao_no_item" ? value : pdvConfig.observacao_no_item,
        desconto_no_item: field === "desconto_no_item" ? value : pdvConfig.desconto_no_item,
        editar_nome_produto: field === "editar_nome_produto" ? value : pdvConfig.editar_nome_produto,
        ocultar_finalizar_com_impressao: field === "ocultar_finalizar_com_impressao" ? value : pdvConfig.ocultar_finalizar_com_impressao,
        ocultar_finalizar_sem_impressao: field === "ocultar_finalizar_sem_impressao" ? value : pdvConfig.ocultar_finalizar_sem_impressao,
        ocultar_nfce_com_impressao: field === "ocultar_nfce_com_impressao" ? value : pdvConfig.ocultar_nfce_com_impressao,
        ocultar_nfce_sem_impressao: field === "ocultar_nfce_sem_impressao" ? value : pdvConfig.ocultar_nfce_sem_impressao,
        ocultar_nfce_producao: field === "ocultar_nfce_producao" ? value : pdvConfig.ocultar_nfce_producao,
        ocultar_producao: field === "ocultar_producao" ? value : pdvConfig.ocultar_producao
      };
      if (existingConfig) {
        const { error } = await supabase.from("pdv_config").update(configData).eq("empresa_id", usuarioData.empresa_id);
        if (error) throw error;
      } else {
        const { error } = await supabase.from("pdv_config").insert([configData]);
        if (error) throw error;
      }
      const pdvConfigEvent = new CustomEvent("pdvConfigChanged", {
        detail: {
          field,
          value,
          config: configData
        }
      });
      window.dispatchEvent(pdvConfigEvent);
      const fieldNames = {
        comandas: "Comandas",
        mesas: "Mesas",
        vendedor: "Vendedor",
        exibe_foto_item: "Exibe foto no item lançado",
        seleciona_clientes: "Seleciona clientes",
        controla_caixa: "Controla caixa",
        agrupa_itens: "Agrupa itens",
        delivery: "Delivery",
        cardapio_digital: "Cardápio digital",
        delivery_chat_ia: "Delivery como chat IA",
        baixa_estoque_pdv: "Baixa estoque na venda do PDV",
        venda_codigo_barras: "Venda de produtos por Código de barras",
        forca_venda_fiscal_cartao: "Força venda fiscal nos cartões",
        observacao_no_item: "Observação no Item",
        desconto_no_item: "Desconto no Item",
        editar_nome_produto: "Editar nome do produto na venda",
        fiado: "Fiado",
        ocultar_finalizar_com_impressao: 'Ocultar "Finalizar com Impressão"',
        ocultar_finalizar_sem_impressao: 'Ocultar "Finalizar sem Impressão"',
        ocultar_nfce_com_impressao: 'Ocultar "NFC-e com Impressão"',
        ocultar_nfce_sem_impressao: 'Ocultar "NFC-e sem Impressão"',
        ocultar_nfce_producao: 'Ocultar "NFC-e + Produção"',
        ocultar_producao: 'Ocultar "Produção"'
      };
      const fieldName = fieldNames[field] || field;
      const status = value ? "habilitada" : "desabilitada";
      showMessage("success", `${fieldName} ${status} com sucesso!`);
    } catch (error) {
      setPdvConfig((prev) => ({ ...prev, [field]: !value }));
      showMessage("Erro ao salvar configuração: " + error.message, "error");
    }
  };
  const renderContent = () => {
    switch (activeSection) {
      case "pagamentos":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Formas de Pagamento" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                type: "button",
                variant: "primary",
                onClick: () => setShowSidebar(true),
                children: "+ Adicionar Forma de Pagamento"
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
            formasPagamento.map((forma) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              "div",
              {
                className: "bg-background-card p-4 rounded-lg border border-gray-800",
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(CreditCard, { className: "text-primary-400", size: 20 }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: forma.tipo })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      onClick: () => handleDelete(forma.id, "pagamento", forma.tipo),
                      className: "p-2 text-red-400 hover:text-red-300 transition-colors",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 16 })
                    }
                  )
                ] })
              },
              forma.id
            )),
            formasPagamento.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center py-8 bg-background-card rounded-lg border border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhuma forma de pagamento cadastrada" }) })
          ] })
        ] });
      case "usuarios":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Usuários" }),
              (usuarioLogado == null ? void 0 : usuarioLogado.tipo) === "admin" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm mt-1", children: "Listando todos os usuários da empresa" })
            ] }),
            (usuarioLogado == null ? void 0 : usuarioLogado.tipo) === "admin" && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                type: "button",
                variant: "primary",
                onClick: () => setShowSidebar(true),
                children: "+ Adicionar Usuário"
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-4", children: usuarios.length > 0 ? usuarios.map((usuario) => {
            var _a2;
            return /* @__PURE__ */ jsxRuntimeExports.jsx(
              "div",
              {
                className: "bg-background-card p-4 rounded-lg border border-gray-800",
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: usuario.nome }),
                      usuario.tipo !== "admin" && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `inline-block px-2 py-0.5 rounded-full text-xs font-medium ${usuario.status ? "bg-green-500/10 text-green-400" : "bg-red-500/10 text-red-400"}`, children: usuario.status ? "Ativo" : "Bloqueado" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: usuario.email }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-blue-400 text-sm", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "Série NFC-e:" }),
                      " #",
                      usuario.serie_nfce || 1
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-2 mt-2", children: [
                      usuario.tipo_user_config && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "inline-block px-3 py-1 rounded-full text-xs font-medium bg-green-500/10 text-green-400", children: usuario.tipo_user_config.tipo.charAt(0).toUpperCase() + usuario.tipo_user_config.tipo.slice(1) }),
                      usuario.perfil && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "inline-block px-3 py-1 rounded-full text-xs font-medium bg-primary-500/10 text-primary-400", children: usuario.perfil.nome })
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                    ((usuarioLogado == null ? void 0 : usuarioLogado.tipo) === "admin" || (usuarioLogado == null ? void 0 : usuarioLogado.id) === usuario.id) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => handleEditUsuario(usuario),
                        className: "p-2 text-gray-400 hover:text-white transition-colors",
                        title: "Editar usuário",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Pencil, { size: 16 })
                      }
                    ),
                    (usuarioLogado == null ? void 0 : usuarioLogado.tipo) === "admin" && ((_a2 = usuario.tipo_user_config) == null ? void 0 : _a2.tipo) !== "admin" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => handleToggleUserStatus(usuario.id, usuario.nome, usuario.status),
                        className: `p-2 ${usuario.status ? "text-green-400 hover:text-green-300" : "text-red-400 hover:text-red-300"} transition-colors`,
                        title: usuario.status ? "Bloquear usuário" : "Desbloquear usuário",
                        children: usuario.status ? /* @__PURE__ */ jsxRuntimeExports.jsx(Lock, { size: 16 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Unlock, { size: 16 })
                      }
                    ),
                    (usuarioLogado == null ? void 0 : usuarioLogado.tipo) === "admin" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => handleDelete(usuario.id, "usuario", usuario.nome),
                        className: "p-2 text-red-400 hover:text-red-300 transition-colors",
                        title: "Excluir usuário",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 16 })
                      }
                    )
                  ] })
                ] })
              },
              usuario.id
            );
          }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-8 bg-background-card rounded-lg border border-gray-800", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhum usuário encontrado" }),
            (usuarioLogado == null ? void 0 : usuarioLogado.tipo) === "admin" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-500 text-sm mt-2", children: 'Clique em "Adicionar Usuário" para cadastrar um novo usuário' })
          ] }) })
        ] });
      case "perfis":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Perfis de Acesso" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                type: "button",
                variant: "primary",
                onClick: () => setShowSidebar(true),
                children: "+ Adicionar Perfil"
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-4", children: perfis.map((perfil) => /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              className: "bg-background-card p-4 rounded-lg border border-gray-800",
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: perfil.nome }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      onClick: () => {
                      },
                      className: "p-2 text-gray-400 hover:text-white transition-colors",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Pencil, { size: 16 })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      onClick: () => handleDelete(perfil.id, "perfil", perfil.nome),
                      className: "p-2 text-red-400 hover:text-red-300 transition-colors",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 16 })
                    }
                  )
                ] })
              ] })
            },
            perfil.id
          )) })
        ] });
      case "status":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Status da Loja" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card p-6 rounded-lg border border-gray-800", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Modo de Operação" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "radio",
                    name: "operation_mode",
                    checked: storeStatus.modo_operacao === "manual",
                    onChange: () => handleOperationModeChange("manual"),
                    className: "mr-3"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Manual" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Você controla manualmente quando a loja está aberta ou fechada." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "radio",
                    name: "operation_mode",
                    checked: storeStatus.modo_operacao === "automatico",
                    onChange: () => handleOperationModeChange("automatico"),
                    className: "mr-3"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Automático" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "A loja abre e fecha automaticamente de acordo com os horários de funcionamento configurados." })
                ] })
              ] })
            ] })
          ] })
        ] });
      case "taxa":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Taxa de Entrega" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card p-6 rounded-lg border border-gray-800", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Modo de Cálculo" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "radio",
                    name: "taxa_mode",
                    checked: taxaMode === "distancia",
                    onChange: () => handleTaxaModeChange("distancia"),
                    className: "mr-3"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Por Distância (KM)" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Calcular a taxa de entrega com base na distância em quilômetros." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "radio",
                    name: "taxa_mode",
                    checked: taxaMode === "bairro",
                    onChange: () => handleTaxaModeChange("bairro"),
                    className: "mr-3"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Por Bairro" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Definir taxas fixas para cada bairro de entrega." })
                ] })
              ] })
            ] })
          ] })
        ] });
      case "horarios":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Horários de Atendimento" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mt-1", children: "Defina os horários de funcionamento para cada dia da semana" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                type: "button",
                variant: "primary",
                onClick: () => setShowSidebar(true),
                children: "+ Adicionar Horário"
              }
            )
          ] }),
          horarios.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card p-6 rounded-lg border border-gray-800 text-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhum horário de atendimento cadastrado." }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-500 text-sm mt-2", children: "Adicione horários para cada dia da semana em que sua loja estará aberta." })
          ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: horarios.map((horario) => {
            const diasSemana = ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado"];
            const diaNome = diasSemana[horario.dia_semana];
            const horaAbertura = horario.hora_abertura.substring(0, 5);
            const horaFechamento = horario.hora_fechamento.substring(0, 5);
            return /* @__PURE__ */ jsxRuntimeExports.jsx(
              "div",
              {
                className: "bg-background-card p-4 rounded-lg border border-gray-800",
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: diaNome }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400 mt-1", children: [
                      horaAbertura,
                      " às ",
                      horaFechamento
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => handleEditHorario(horario),
                        className: "p-2 text-blue-400 hover:text-blue-300 transition-colors",
                        title: "Editar horário",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Pencil, { size: 16 })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => handleDelete(horario.id, "horario", diaNome),
                        className: "p-2 text-red-400 hover:text-red-300 transition-colors",
                        title: "Remover horário",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 16 })
                      }
                    )
                  ] })
                ] })
              },
              horario.id
            );
          }) }),
          storeStatus.modo_operacao === "automatico" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-yellow-900/20 border border-yellow-900/30 rounded-lg p-4 mt-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-yellow-400 text-sm", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Nota:" }),
            ' Sua loja está configurada para abrir e fechar automaticamente de acordo com estes horários. Você pode alterar este comportamento na seção "Status Loja".'
          ] }) })
        ] });
      case "geral":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Dados da Empresa" }),
            (usuarioLogado == null ? void 0 : usuarioLogado.tipo) === "admin" && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                type: "button",
                variant: "primary",
                onClick: () => {
                  setEmpresaForm(empresa || {
                    segmento: "",
                    tipo_documento: "CNPJ",
                    documento: "",
                    razao_social: "",
                    nome_fantasia: "",
                    nome_proprietario: "",
                    whatsapp: "",
                    cep: "",
                    endereco: "",
                    numero: "",
                    complemento: "",
                    bairro: "",
                    cidade: "",
                    estado: "",
                    inscricao_estadual: "",
                    regime_tributario: 3,
                    codigo_municipio: "",
                    email: ""
                  });
                  setShowSidebar(true);
                },
                children: "Editar Dados"
              }
            )
          ] }),
          empresa && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card p-6 rounded-lg border border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Dados Gerais" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "ID da Empresa" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: empresa.id }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => handleCopyToClipboard(empresa.id, "empresa_id"),
                        className: "ml-2 p-1 rounded-full hover:bg-gray-700 text-gray-400 hover:text-white",
                        title: "Copiar ID da empresa",
                        children: copiedFields["empresa_id"] ? /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 14, className: "text-green-500" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 14 })
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Segmento" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: empresa.segmento || "-" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: empresa.tipo_documento }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: empresa.documento || "-" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Inscrição Estadual" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: empresa.inscricao_estadual || "-" })
                  ] })
                ] }),
                empresa.tipo_documento === "CNPJ" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Razão Social" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: empresa.razao_social || "-" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Nome Fantasia" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: empresa.nome_fantasia || "-" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Nome do Proprietário" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: empresa.nome_proprietario || "-" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "WhatsApp" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: empresa.whatsapp || "-" })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Endereço" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "CEP" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: empresa.cep || "-" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Endereço" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-white", children: [
                    empresa.endereco,
                    empresa.numero && `, ${empresa.numero}`,
                    empresa.complemento && ` - ${empresa.complemento}`
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Bairro" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: empresa.bairro || "-" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Cidade/Estado" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-white", children: [
                    empresa.cidade,
                    empresa.estado && `/${empresa.estado}`
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Código do Município (IBGE)" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: empresa.codigo_municipio || "-" })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Dados Fiscais" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Email da Empresa" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: empresa.email || "-" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Regime Tributário" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-white", children: [
                    empresa.regime_tributario === 1 && "1 - Simples Nacional",
                    empresa.regime_tributario === 2 && "2 - Simples Nacional - Excesso",
                    empresa.regime_tributario === 3 && "3 - Regime Normal",
                    !empresa.regime_tributario && "-"
                  ] })
                ] })
              ] })
            ] })
          ] }) })
        ] });
      case "estoque":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Configurações de Estoque" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card p-6 rounded-lg border border-gray-800", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Tipo de Controle de Estoque" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "radio",
                    name: "tipo_controle_estoque",
                    checked: tipoControleEstoque === "pedidos",
                    onChange: () => handleTipoControleEstoqueChange("pedidos"),
                    className: "mr-3"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Controle por Pedidos" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "O estoque é atualizado quando um pedido é criado, permitindo reservar produtos antes do faturamento." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "radio",
                    name: "tipo_controle_estoque",
                    checked: tipoControleEstoque === "pdv",
                    onChange: () => handleTipoControleEstoqueChange("pdv"),
                    className: "mr-3"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Controle de baixa por venda no PDV" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "O estoque é atualizado automaticamente quando uma venda é finalizada no PDV, ideal para controle em tempo real." })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-6 border-t border-gray-800 pt-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Controle de Estoque" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 bg-gray-800/50 rounded-lg", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      id: "bloqueia_sem_estoque",
                      type: "checkbox",
                      checked: bloqueiaSemEstoque,
                      onChange: (e) => handleBloqueiaSemEstoqueChange(e.target.checked),
                      className: "w-5 h-5 text-primary-500 border-gray-600 rounded focus:ring-primary-500 focus:ring-opacity-25 bg-gray-700"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { htmlFor: "bloqueia_sem_estoque", className: "ml-3 cursor-pointer", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Bloquear pedidos sem estoque suficiente" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Quando ativado, não permite que sejam feitos pedidos de produtos sem estoque suficiente disponível." })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-3 text-xs text-gray-400 flex items-center", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "inline-block w-3 h-3 rounded-full bg-gray-600 mr-2" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                    "Status atual: ",
                    bloqueiaSemEstoque ? "Ativado" : "Desativado"
                  ] })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 p-4 bg-blue-900/20 border border-blue-800/30 rounded-lg", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "20", height: "20", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "text-blue-400 mr-3 mt-0.5", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "12", cy: "12", r: "10" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 16v-4" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 8h.01" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-blue-300 font-medium", children: "Informação" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-blue-200/70 mt-1", children: 'Esta configuração afeta como o estoque é gerenciado em todo o sistema. "Controle por Pedidos" reserva estoque ao criar pedidos, "Controle de baixa por venda no PDV" atualiza estoque automaticamente nas vendas do PDV em tempo real.' })
              ] })
            ] }) })
          ] })
        ] });
      case "pedidos":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Configurações de Pedidos" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card p-6 rounded-lg border border-gray-800", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Opções de Pedidos" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 bg-gray-800/50 rounded-lg", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    id: "agrupar_itens",
                    type: "checkbox",
                    checked: agruparItens,
                    onChange: (e) => handleAgruparItensChange(e.target.checked),
                    className: "w-5 h-5 text-primary-500 border-gray-600 rounded focus:ring-primary-500 focus:ring-opacity-25 bg-gray-700"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { htmlFor: "agrupar_itens", className: "ml-3 cursor-pointer", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Agrupar itens" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Quando ativado, ao adicionar um produto que já existe no pedido, a quantidade será somada ao item existente em vez de criar um novo item." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-3 text-xs text-gray-400 flex items-center", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "inline-block w-3 h-3 rounded-full bg-gray-600 mr-2" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                  "Status atual: ",
                  agruparItens ? "Ativado" : "Desativado"
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 p-4 bg-blue-900/20 border border-blue-800/30 rounded-lg", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "20", height: "20", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "text-blue-400 mr-3 mt-0.5", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "12", cy: "12", r: "10" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 16v-4" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 8h.01" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-blue-300 font-medium", children: "Informação" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-blue-200/70 mt-1", children: "Esta configuração afeta como os itens são adicionados aos pedidos. Quando ativada, produtos idênticos serão agrupados automaticamente, facilitando a visualização e o gerenciamento dos pedidos. Esta opção se aplica tanto à versão web quanto à versão mobile." })
              ] })
            ] }) })
          ] })
        ] });
      case "produtos":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Configurações de Produtos" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card p-6 rounded-lg border border-gray-800", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Opções de Produtos" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 bg-gray-800/50 rounded-lg", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    id: "opcoes_adicionais",
                    type: "checkbox",
                    checked: opcoesAdicionais,
                    onChange: (e) => handleOpcoesAdicionaisChange(e.target.checked),
                    className: "w-5 h-5 text-primary-500 border-gray-600 rounded focus:ring-primary-500 focus:ring-opacity-25 bg-gray-700"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { htmlFor: "opcoes_adicionais", className: "ml-3 cursor-pointer", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Opções Adicionais" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Quando ativado, permite adicionar opções adicionais aos produtos durante a criação de pedidos, como ingredientes extras, tamanhos, sabores, etc." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-3 text-xs text-gray-400 flex items-center", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "inline-block w-3 h-3 rounded-full bg-gray-600 mr-2" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                  "Status atual: ",
                  opcoesAdicionais ? "Ativado" : "Desativado"
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 p-4 bg-blue-900/20 border border-blue-800/30 rounded-lg", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "20", height: "20", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "text-blue-400 mr-3 mt-0.5", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "12", cy: "12", r: "10" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 16v-4" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 8h.01" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-blue-300 font-medium", children: "Informação" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-blue-200/70 mt-1", children: 'Esta configuração permite que os produtos tenham opções adicionais configuráveis. Quando ativada, durante a criação de pedidos, será possível selecionar opções extras para cada produto, como ingredientes adicionais, tamanhos diferentes, sabores, etc. As opções adicionais devem ser configuradas na página "Adicionais" do menu principal.' })
              ] })
            ] }) })
          ] })
        ] });
      case "pdv":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Configurações do PDV" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mt-1", children: "Configure as funcionalidades do Ponto de Venda" })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card p-6 rounded-lg border border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.comandas,
                    onChange: (e) => handlePdvConfigChange("comandas", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Comandas" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Permite controlar vendas por comandas numeradas para organização de pedidos." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.mesas,
                    onChange: (e) => handlePdvConfigChange("mesas", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Mesas" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Habilita o controle de mesas para restaurantes e estabelecimentos com atendimento no local." })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.vendedor,
                    onChange: (e) => handlePdvConfigChange("vendedor", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Vendedor" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Permite associar vendedores às vendas para controle de comissões e relatórios." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.exibe_foto_item,
                    onChange: (e) => handlePdvConfigChange("exibe_foto_item", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Exibe foto no item lançado" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Mostra a foto do produto no carrinho para facilitar a identificação visual." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.seleciona_clientes,
                    onChange: (e) => handlePdvConfigChange("seleciona_clientes", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Seleciona clientes" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Permite vincular clientes às vendas para histórico e fidelização." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.controla_caixa,
                    onChange: (e) => handlePdvConfigChange("controla_caixa", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Controla Caixa" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Habilita controle de abertura e fechamento de caixa com relatórios financeiros." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.agrupa_itens,
                    onChange: (e) => handlePdvConfigChange("agrupa_itens", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Agrupa Itens" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Agrupa automaticamente itens idênticos no carrinho para melhor organização." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.delivery,
                    onChange: (e) => handlePdvConfigChange("delivery", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Delivery" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Habilita funcionalidades de entrega com controle de endereços e taxas." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.cardapio_digital,
                    onChange: (e) => handlePdvConfigChange("cardapio_digital", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Cardápio Digital" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Disponibiliza cardápio digital para clientes fazerem pedidos via QR Code." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.delivery_chat_ia,
                    onChange: (e) => handlePdvConfigChange("delivery_chat_ia", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Delivery como chat IA" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Integra inteligência artificial para atendimento automatizado via chat." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.venda_codigo_barras,
                    onChange: (e) => handlePdvConfigChange("venda_codigo_barras", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Venda de produtos por Código de barras" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Permite adicionar produtos ao carrinho digitando números mesmo sem focar no campo de busca." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.forca_venda_fiscal_cartao,
                    onChange: (e) => handlePdvConfigChange("forca_venda_fiscal_cartao", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Força venda fiscal nos cartões" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Quando habilitado, vendas com cartão só podem ser finalizadas com NFC-e, desabilitando as opções de finalização simples e produção." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.observacao_no_item,
                    onChange: (e) => handlePdvConfigChange("observacao_no_item", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Observação no Item" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Permite adicionar observações personalizadas aos itens durante a venda no PDV." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.desconto_no_item,
                    onChange: (e) => handlePdvConfigChange("desconto_no_item", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Desconto no Item" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Permite aplicar desconto individual em cada item durante a venda no PDV." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.fiado,
                    onChange: (e) => handlePdvConfigChange("fiado", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Fiado" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Habilita a opção de venda fiado no PDV." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: pdvConfig.editar_nome_produto,
                    onChange: (e) => handlePdvConfigChange("editar_nome_produto", e.target.checked),
                    className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                    style: { borderRadius: "50%" }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Editar nome do produto na venda" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Permite editar o nome do produto durante a venda no PDV para personalização." })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "border-t border-gray-700/50 pt-6", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "text-lg font-medium text-white mb-4 flex items-center gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Receipt, { size: 18, className: "text-blue-400" }),
                  "Controle de Botões de Finalização"
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400 mb-6", children: [
                  "Configure quais botões de finalização devem ser ",
                  /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "ocultados" }),
                  " no PDV. Marque as opções que você ",
                  /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "NÃO" }),
                  " quer exibir na tela de finalização."
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "checkbox",
                      checked: pdvConfig.ocultar_finalizar_com_impressao,
                      onChange: (e) => handlePdvConfigChange("ocultar_finalizar_com_impressao", e.target.checked),
                      className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                      style: { borderRadius: "50%" }
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: 'Ocultar "Finalizar com Impressão"' }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Remove o botão de finalização simples com impressão da tela de finalização." })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "checkbox",
                      checked: pdvConfig.ocultar_finalizar_sem_impressao,
                      onChange: (e) => handlePdvConfigChange("ocultar_finalizar_sem_impressao", e.target.checked),
                      className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                      style: { borderRadius: "50%" }
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: 'Ocultar "Finalizar sem Impressão"' }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Remove o botão de finalização simples sem impressão da tela de finalização." })
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "checkbox",
                      checked: pdvConfig.ocultar_nfce_com_impressao,
                      onChange: (e) => handlePdvConfigChange("ocultar_nfce_com_impressao", e.target.checked),
                      className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                      style: { borderRadius: "50%" }
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: 'Ocultar "NFC-e com Impressão"' }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Remove o botão de emissão de NFC-e com impressão da tela de finalização." })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-start p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "checkbox",
                      checked: pdvConfig.ocultar_nfce_sem_impressao,
                      onChange: (e) => handlePdvConfigChange("ocultar_nfce_sem_impressao", e.target.checked),
                      className: "w-5 h-5 text-primary-500 bg-gray-800 border-gray-600 rounded-full focus:ring-primary-500 focus:ring-2 mt-0.5 mr-3",
                      style: { borderRadius: "50%" }
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: 'Ocultar "NFC-e sem Impressão"' }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Remove o botão de emissão de NFC-e sem impressão da tela de finalização." })
                  ] })
                ] })
              ] }),
              false
            ] })
          ] }) })
        ] });
      case "taxaentrega":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Configurações de Taxa de Entrega" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card p-6 rounded-lg border border-gray-800", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Taxa de Entrega" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 bg-gray-800/50 rounded-lg mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  id: "habilitar_taxa_entrega",
                  type: "checkbox",
                  checked: taxaEntregaHabilitada,
                  onChange: (e) => setTaxaEntregaHabilitada(e.target.checked),
                  className: "w-5 h-5 text-primary-500 border-gray-600 rounded focus:ring-primary-500 focus:ring-opacity-25 bg-gray-700"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { htmlFor: "habilitar_taxa_entrega", className: "ml-3 cursor-pointer", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Habilitar Taxa de Entrega" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Quando ativado, permite configurar e cobrar taxas de entrega nos pedidos." })
              ] })
            ] }) }),
            taxaEntregaHabilitada && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "border-t border-gray-800 pt-6 mb-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Tipo de Taxa" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "radio",
                      name: "tipo_taxa_entrega",
                      checked: tipoTaxaEntrega === "distancia",
                      onChange: () => setTipoTaxaEntrega("distancia"),
                      className: "mr-3"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Por Distância (KM)" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "A taxa de entrega é calculada com base na distância em quilômetros do estabelecimento até o destino." })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center p-4 bg-gray-800/50 rounded-lg cursor-pointer hover:bg-gray-800/70 transition-colors", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "radio",
                      name: "tipo_taxa_entrega",
                      checked: tipoTaxaEntrega === "bairro",
                      onChange: () => setTipoTaxaEntrega("bairro"),
                      className: "mr-3"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Por Bairro" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "A taxa de entrega é calculada com base no bairro de destino do pedido." })
                  ] })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-end", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                type: "button",
                variant: "primary",
                onClick: handleSalvarTaxaEntrega,
                disabled: isLoading,
                className: "min-w-[120px]",
                children: isLoading ? "Salvando..." : "Gravar"
              }
            ) })
          ] })
        ] });
      case "conexao":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Conexão" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card p-6 rounded-lg border border-gray-800", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Configurações de Conexão" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between p-4 bg-gray-800/50 rounded-lg", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(MessageSquare, { className: "text-green-400", size: 20 }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: "Habilita Conexão com WhatsApp" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: "Permite integração com WhatsApp para comunicação com clientes." })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "checkbox",
                    checked: conexaoConfig.habilita_conexao_whatsapp,
                    onChange: (e) => handleConexaoConfigChange("habilita_conexao_whatsapp", e.target.checked),
                    className: "sr-only peer"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500" })
              ] })
            ] }) })
          ] })
        ] });
      case "certificado":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Certificado Digital" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card p-6 rounded-lg border border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
            (certificadoInfo == null ? void 0 : certificadoInfo.certificado_digital_path) ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-green-500/10 border border-green-500/20 rounded-lg p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-green-500/20 rounded-full flex items-center justify-center flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "text-green-400", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 12l2 2 4-4" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "12", cy: "12", r: "10" })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-green-400 font-medium mb-3", children: "Certificado Digital Configurado" }),
                certificadoInfo.certificado_digital_validade ? (() => {
                  const expiryCheck = checkCertificateExpiry(certificadoInfo.certificado_digital_validade);
                  const colorClasses = {
                    red: "bg-red-500/10 border-red-500/20 text-red-400",
                    yellow: "bg-yellow-500/10 border-yellow-500/20 text-yellow-400",
                    green: "bg-blue-500/10 border-blue-500/20 text-blue-400"
                  };
                  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `${colorClasses[expiryCheck.color]} rounded-lg p-3 mb-3`, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: `text-${expiryCheck.color}-400`, children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { x: "3", y: "4", width: "18", height: "18", rx: "2", ry: "2" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "16", y1: "2", x2: "16", y2: "6" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "8", y1: "2", x2: "8", y2: "6" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "3", y1: "10", x2: "21", y2: "10" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `text-${expiryCheck.color}-400 font-medium`, children: "Válido até:" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-bold text-lg", children: new Date(certificadoInfo.certificado_digital_validade).toLocaleDateString("pt-BR") }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: `text-${expiryCheck.color}-400 font-medium ml-2`, children: [
                        expiryCheck.status === "expired" && "⚠️ ",
                        expiryCheck.status === "expiring" && "⚠️ ",
                        expiryCheck.status === "valid" && "✅ ",
                        expiryCheck.message
                      ] })
                    ] }),
                    expiryCheck.status === "expired" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-red-300 mt-1 font-medium", children: "🚨 CERTIFICADO VENCIDO! Renove imediatamente para continuar emitindo NFe." }),
                    expiryCheck.status === "expiring" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-yellow-300 mt-1 font-medium", children: "⚠️ Certificado próximo do vencimento! Providencie a renovação." })
                  ] });
                })() : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-red-500/10 border border-red-500/20 rounded-lg p-3 mb-3", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "text-red-400", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "12", y1: "9", x2: "12", y2: "13" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "12", y1: "17", x2: "12.01", y2: "17" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-400 font-medium", children: "⚠️ ATENÇÃO: Data de validade não extraída" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-red-300 mt-1 font-medium", children: "🚨 CRÍTICO: Sem a data de validade, não podemos alertar sobre vencimento! Verifique manualmente e considere reenviar o certificado." })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1 text-sm text-gray-300", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Nome:" }),
                    " ",
                    certificadoInfo.certificado_digital_nome
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Status:" }),
                    " ",
                    certificadoInfo.certificado_digital_status === "ativo" ? "Ativo" : "Inativo"
                  ] }),
                  certificadoInfo.certificado_digital_uploaded_at && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Enviado em:" }),
                    " ",
                    new Date(certificadoInfo.certificado_digital_uploaded_at).toLocaleDateString("pt-BR")
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "primary",
                    onClick: () => setShowRemoveCertificadoModal(true),
                    className: "!bg-red-500 hover:!bg-red-600 !border-red-500 text-sm",
                    children: "🗑️ Remover Certificado"
                  }
                ) })
              ] })
            ] }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-yellow-500/20 rounded-full flex items-center justify-center flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "text-yellow-400", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "12", y1: "9", x2: "12", y2: "13" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "12", y1: "17", x2: "12.01", y2: "17" })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-yellow-400 font-medium mb-1", children: "Certificado Digital Não Configurado" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-300 text-sm", children: "Para emitir NFe, é necessário configurar um certificado digital válido." })
              ] })
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: (certificadoInfo == null ? void 0 : certificadoInfo.certificado_digital_path) ? "Substituir Certificado Digital" : "Configurar Certificado Digital" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Arquivo do Certificado (.p12 ou .pfx)" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "file",
                      accept: ".p12,.pfx",
                      onChange: (e) => {
                        var _a2;
                        return setCertificadoFile(((_a2 = e.target.files) == null ? void 0 : _a2[0]) || null);
                      },
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Selecione o arquivo do certificado digital (.p12 ou .pfx)" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Senha do Certificado" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: mostrarSenhaCertificado ? "text" : "password",
                        value: certificadoSenha,
                        onChange: (e) => setCertificadoSenha(e.target.value),
                        className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-3 pr-10 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                        placeholder: "Digite a senha do certificado"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        type: "button",
                        onClick: () => setMostrarSenhaCertificado(!mostrarSenhaCertificado),
                        className: "absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white transition-colors",
                        children: mostrarSenhaCertificado ? /* @__PURE__ */ jsxRuntimeExports.jsx(EyeOff, { size: 18 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Eye, { size: 18 })
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Senha utilizada para proteger o certificado digital" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "pt-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "primary",
                    onClick: handleUploadCertificado,
                    disabled: isUploadingLocal || !certificadoFile || !certificadoSenha.trim(),
                    className: "w-full",
                    children: isUploadingLocal ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2" }),
                      "Enviando..."
                    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      "📤 ",
                      (certificadoInfo == null ? void 0 : certificadoInfo.certificado_digital_path) ? "Substituir" : "Enviar",
                      " Certificado"
                    ] })
                  }
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-blue-500/10 border border-blue-500/20 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-blue-400 font-medium mb-2", children: "ℹ️ Informações Importantes" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "text-sm text-gray-300 space-y-1", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• O certificado deve estar válido e dentro do prazo de validade" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Formatos aceitos: .p12 ou .pfx" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• A senha será criptografada e armazenada com segurança" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• O sistema extrairá automaticamente a data de validade" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Você será notificado quando o certificado estiver próximo do vencimento" })
                  ] })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-8", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "CSC para NFCe" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-blue-500/10 border border-blue-500/20 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-blue-400 font-medium mb-2", children: "ℹ️ Sobre o CSC (Código de Segurança do Contribuinte)" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "text-sm text-gray-300 space-y-1", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
                      "• O CSC é ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "obrigatório" }),
                      " para emissão de NFCe (modelo 65)"
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Deve ser solicitado na SEFAZ do seu estado" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Códigos diferentes para homologação e produção" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Usado para gerar o QR Code da NFCe automaticamente" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Formato: até 36 caracteres alfanuméricos" })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-orange-400 font-medium mb-3", children: "🧪 CSC para Homologação" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "CSC Homologação" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          type: "text",
                          value: cscHomologacao,
                          onChange: (e) => setCscHomologacao(e.target.value.slice(0, 36)),
                          className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                          placeholder: "Digite o CSC de homologação",
                          maxLength: 36
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-gray-500 mt-1", children: [
                        "Máximo 36 caracteres (",
                        cscHomologacao.length,
                        "/36)"
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "CSC ID Homologação" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          type: "number",
                          value: cscIdHomologacao,
                          onChange: (e) => setCscIdHomologacao(e.target.value),
                          className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                          placeholder: "Ex: 1",
                          min: "1",
                          max: "999"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Identificador numérico (1-999)" })
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-green-400 font-medium mb-3", children: "🚀 CSC para Produção" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "CSC Produção" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          type: "text",
                          value: cscProducao,
                          onChange: (e) => setCscProducao(e.target.value.slice(0, 36)),
                          className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                          placeholder: "Digite o CSC de produção",
                          maxLength: 36
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-gray-500 mt-1", children: [
                        "Máximo 36 caracteres (",
                        cscProducao.length,
                        "/36)"
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "CSC ID Produção" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          type: "number",
                          value: cscIdProducao,
                          onChange: (e) => setCscIdProducao(e.target.value),
                          className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                          placeholder: "Ex: 1",
                          min: "1",
                          max: "999"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Identificador numérico (1-999)" })
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "pt-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "primary",
                    onClick: handleSalvarCscNfce,
                    disabled: isSavingCsc,
                    className: "w-full md:w-auto",
                    children: isSavingCsc ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2" }),
                      "Salvando..."
                    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: "💾 Salvar Configuração CSC" })
                  }
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-yellow-400 font-medium mb-2", children: "⚠️ Importante" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "text-sm text-gray-300 space-y-1", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
                      "• Configure primeiro o CSC de ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "homologação" }),
                      " para testes"
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
                      "• Só configure o CSC de ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "produção" }),
                      " quando estiver pronto para emitir NFCe oficiais"
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Mantenha esses códigos em segurança - são únicos da sua empresa" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Em caso de dúvidas, consulte a SEFAZ do seu estado" })
                  ] })
                ] })
              ] }) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-8", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Ambiente NFe" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-3", children: "Selecione o ambiente para emissão de NFe" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        onClick: () => handleSalvarAmbienteNFe("2"),
                        className: `p-4 rounded-lg border-2 cursor-pointer transition-all ${ambienteNFe === "2" ? "border-orange-500 bg-orange-500/10" : "border-gray-700 bg-gray-800/50 hover:border-gray-600"}`,
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-2", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: `font-medium ${ambienteNFe === "2" ? "text-orange-400" : "text-white"}`, children: "🧪 Homologação" }),
                            ambienteNFe === "2" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-5 h-5 rounded-full bg-orange-500 flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-3 h-3 text-white", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { fillRule: "evenodd", d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z", clipRule: "evenodd" }) }) })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: "Para testes e desenvolvimento. NFe emitidas não têm valor fiscal." }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-2 text-xs text-orange-400 font-medium", children: "Recomendado para testes" })
                        ]
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        onClick: () => handleSalvarAmbienteNFe("1"),
                        className: `p-4 rounded-lg border-2 cursor-pointer transition-all ${ambienteNFe === "1" ? "border-green-500 bg-green-500/10" : "border-gray-700 bg-gray-800/50 hover:border-gray-600"}`,
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-2", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: `font-medium ${ambienteNFe === "1" ? "text-green-400" : "text-white"}`, children: "🚀 Produção" }),
                            ambienteNFe === "1" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-5 h-5 rounded-full bg-green-500 flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-3 h-3 text-white", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { fillRule: "evenodd", d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z", clipRule: "evenodd" }) }) })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: "Para emissão oficial. NFe têm valor fiscal e são enviadas à SEFAZ." }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-2 text-xs text-green-400 font-medium", children: "Ambiente oficial" })
                        ]
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-yellow-400 font-medium mb-2", children: "⚠️ Importante" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "text-sm text-gray-300 space-y-1", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
                      "• ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Homologação:" }),
                      " Use para testes. NFe não têm valor fiscal"
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
                      "• ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Produção:" }),
                      " Use apenas quando tudo estiver funcionando perfeitamente"
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Você pode alternar entre os ambientes a qualquer momento" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• O certificado digital deve ser válido para ambos os ambientes" })
                  ] })
                ] })
              ] }) })
            ] })
          ] }) })
        ] });
      case "conta":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Gerenciar Conta" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card p-6 rounded-lg border border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: "Zona de Perigo" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm mb-4", children: "Esta ação irá deletar permanentemente toda a empresa, incluindo todos os dados, usuários, pedidos, produtos e configurações. Esta ação não pode ser desfeita." }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                type: "button",
                variant: "primary",
                onClick: () => setShowDeleteAccountModal(true),
                className: "!bg-red-500 hover:!bg-red-600 !border-red-500",
                children: "🗑️ Deletar Empresa Completa"
              }
            )
          ] }) }) })
        ] });
      default:
        return null;
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex min-h-[calc(100vh-120px)] gap-6", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 bg-background-card rounded-lg border border-gray-800 p-4 flex flex-col overflow-hidden h-full", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white mb-2", children: "Configurações" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Gerencie as configurações do seu sistema" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("nav", { className: "space-y-2 flex-1 overflow-y-auto custom-scrollbar", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xs font-medium text-gray-500 uppercase tracking-wider mb-2", children: "Empresa" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleSectionChange("geral"),
              className: `w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors text-left ${activeSection === "geral" ? "bg-primary-500/10 text-primary-400 border border-primary-500/20" : "text-gray-400 hover:text-white hover:bg-gray-800/50"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Settings, { size: 18 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: "Dados da Empresa" })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleSectionChange("usuarios"),
              className: `w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors text-left ${activeSection === "usuarios" ? "bg-primary-500/10 text-primary-400 border border-primary-500/20" : "text-gray-400 hover:text-white hover:bg-gray-800/50"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Users, { size: 18 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: "Usuários" })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleSectionChange("horarios"),
              className: `w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors text-left ${activeSection === "horarios" ? "bg-primary-500/10 text-primary-400 border border-primary-500/20" : "text-gray-400 hover:text-white hover:bg-gray-800/50"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Clock, { size: 18 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: "Horário de Funcionamento" })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleSectionChange("conexao"),
              className: `w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors text-left ${activeSection === "conexao" ? "bg-primary-500/10 text-primary-400 border border-primary-500/20" : "text-gray-400 hover:text-white hover:bg-gray-800/50"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(MessageSquare, { size: 18 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: "Conexão" })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleSectionChange("certificado"),
              className: `w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors text-left ${activeSection === "certificado" ? "bg-primary-500/10 text-primary-400 border border-primary-500/20" : "text-gray-400 hover:text-white hover:bg-gray-800/50"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "18", height: "18", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "14", height: "20", x: "5", y: "2", rx: "2", ry: "2" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 22v-4h6v4" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M8 6h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M16 6h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 6h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 10h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 14h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M16 10h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M16 14h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M8 10h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M8 14h.01" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: "Certificado Digital" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xs font-medium text-gray-500 uppercase tracking-wider mb-2", children: "Operações" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleSectionChange("estoque"),
              className: `w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors text-left ${activeSection === "estoque" ? "bg-primary-500/10 text-primary-400 border border-primary-500/20" : "text-gray-400 hover:text-white hover:bg-gray-800/50"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "18", height: "18", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M2 20h20" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M5 20V7a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v13" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M13 20V3a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v17" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: "Estoque" })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleSectionChange("pedidos"),
              className: `w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors text-left ${activeSection === "pedidos" ? "bg-primary-500/10 text-primary-400 border border-primary-500/20" : "text-gray-400 hover:text-white hover:bg-gray-800/50"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "18", height: "18", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M16 4h2a2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { x: "8", y: "2", width: "8", height: "4", rx: "1", ry: "1" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 12h6" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 16h6" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: "Pedidos" })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleSectionChange("pdv"),
              className: `w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors text-left ${activeSection === "pdv" ? "bg-primary-500/10 text-primary-400 border border-primary-500/20" : "text-gray-400 hover:text-white hover:bg-gray-800/50"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(ShoppingCart, { size: 18 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: "PDV" })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleSectionChange("produtos"),
              className: `w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors text-left ${activeSection === "produtos" ? "bg-primary-500/10 text-primary-400 border border-primary-500/20" : "text-gray-400 hover:text-white hover:bg-gray-800/50"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", width: "18", height: "18", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3 3h18v18H3zM9 9h6v6H9z" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: "Produtos" })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleSectionChange("taxaentrega"),
              className: `w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors text-left ${activeSection === "taxaentrega" ? "bg-primary-500/10 text-primary-400 border border-primary-500/20" : "text-gray-400 hover:text-white hover:bg-gray-800/50"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Truck, { size: 18 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: "Taxa de Entrega" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xs font-medium text-gray-500 uppercase tracking-wider mb-2", children: "Sistema" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleSectionChange("conta"),
              className: `w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors text-left ${activeSection === "conta" ? "bg-primary-500/10 text-primary-400 border border-primary-500/20" : "text-gray-400 hover:text-white hover:bg-gray-800/50"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "18", height: "18", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "12", cy: "7", r: "4" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: "Conta" })
              ]
            }
          )
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 bg-background-card rounded-lg border border-gray-800 overflow-hidden", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full overflow-y-auto custom-scrollbar", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-6", children: sectionLoading ? /* @__PURE__ */ jsxRuntimeExports.jsx(ConfigSkeletonLoader, {}) : renderContent() }) }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showSidebar && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { opacity: 0 },
          animate: { opacity: 1 },
          exit: { opacity: 0 },
          className: "fixed inset-0 bg-black/50 z-40",
          onClick: () => setShowSidebar(false)
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { x: "100%" },
          animate: { x: 0 },
          exit: { x: "100%" },
          transition: { type: "tween", duration: 0.3 },
          className: "fixed right-0 top-0 h-screen w-full max-w-md bg-background-card border-l border-gray-800 z-50 overflow-y-auto",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("h2", { className: "text-xl font-semibold text-white", children: [
                activeSection === "pagamentos" && "Nova Forma de Pagamento",
                activeSection === "usuarios" && (isEditingUsuario ? "Editar Usuário" : "Novo Usuário"),
                activeSection === "perfis" && "Novo Perfil",
                activeSection === "geral" && "Editar Dados da Empresa",
                activeSection === "horarios" && (isEditingHorario ? "Editar Horário de Atendimento" : "Novo Horário de Atendimento")
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => {
                    setShowSidebar(false);
                    if (activeSection === "horarios" && isEditingHorario) {
                      setIsEditingHorario(false);
                      setHorarioForm({
                        id: "",
                        dia_semana: "0",
                        hora_abertura: "08:00",
                        hora_fechamento: "18:00"
                      });
                    }
                    if (activeSection === "usuarios") {
                      setFormErrors({
                        senha: "",
                        email: "",
                        serie_nfce: ""
                      });
                      setUsuarioForm({
                        id: "",
                        nome: "",
                        email: "",
                        senha: "",
                        confirmarSenha: "",
                        tipo_user_config_id: "",
                        serie_nfce: 1
                      });
                      setIsEditingUsuario(false);
                    }
                  },
                  className: "text-gray-400 hover:text-white transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 24 })
                }
              )
            ] }),
            activeSection === "pagamentos" && /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmitPagamento, className: "space-y-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Tipo de Pagamento" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "select",
                  {
                    value: selectedTipo,
                    onChange: (e) => setSelectedTipo(e.target.value),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "", children: "Selecione um tipo" }),
                      tiposPagamento.map((tipo) => /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: tipo.value, children: tipo.label }, tipo.value))
                    ]
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    className: "flex-1",
                    onClick: () => setShowSidebar(false),
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    variant: "primary",
                    className: "flex-1",
                    disabled: isLoading || !selectedTipo,
                    children: isLoading ? "Salvando..." : "Salvar"
                  }
                )
              ] })
            ] }),
            activeSection === "usuarios" && /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmitUsuario, className: "space-y-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Nome" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: usuarioForm.nome,
                    onChange: (e) => setUsuarioForm((prev) => ({ ...prev, nome: e.target.value })),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Digite o nome completo",
                    required: true
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                SearchableSelect,
                {
                  label: "Tipo de Usuário",
                  options: tiposUsuario.map((tipo) => ({
                    value: tipo.id,
                    label: `${tipo.tipo.charAt(0).toUpperCase() + tipo.tipo.slice(1)} - ${tipo.descricao || ""}`
                  })),
                  value: usuarioForm.tipo_user_config_id,
                  onChange: (value) => setUsuarioForm((prev) => ({ ...prev, tipo_user_config_id: value })),
                  placeholder: "Selecione o tipo de usuário",
                  required: true
                }
              ) }),
              (() => {
                const tipoSelecionado = tiposUsuario.find((tipo) => tipo.id === usuarioForm.tipo_user_config_id);
                return (tipoSelecionado == null ? void 0 : tipoSelecionado.tipo) === "vendedor";
              })() && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4 p-4 bg-gray-800/30 rounded-lg border border-gray-700", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-sm font-medium text-gray-300", children: "Configurações de Comissão" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Tipo de Comissão" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          type: "radio",
                          name: "tipo_comissao",
                          value: "total_venda",
                          checked: usuarioForm.tipo_comissao === "total_venda",
                          onChange: (e) => setUsuarioForm((prev) => ({ ...prev, tipo_comissao: e.target.value })),
                          className: "mr-2 text-primary-500 focus:ring-primary-500"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-300", children: "Total da Venda" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          type: "radio",
                          name: "tipo_comissao",
                          value: "grupos",
                          checked: usuarioForm.tipo_comissao === "grupos",
                          onChange: (e) => setUsuarioForm((prev) => ({ ...prev, tipo_comissao: e.target.value })),
                          className: "mr-2 text-primary-500 focus:ring-primary-500"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-300", children: "Grupos" })
                    ] })
                  ] })
                ] }),
                usuarioForm.tipo_comissao === "total_venda" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Percentual de Comissão (%)" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "number",
                      min: "0",
                      max: "100",
                      step: "0.01",
                      value: usuarioForm.percentual_comissao,
                      onChange: (e) => setUsuarioForm((prev) => ({ ...prev, percentual_comissao: parseFloat(e.target.value) || 0 })),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "Ex: 5.00"
                    }
                  )
                ] }),
                usuarioForm.tipo_comissao === "grupos" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Grupos de Produtos" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 max-h-40 overflow-y-auto", children: [
                    grupos.map((grupo) => /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          type: "checkbox",
                          checked: usuarioForm.grupos_comissao.includes(grupo.id),
                          onChange: (e) => {
                            if (e.target.checked) {
                              setUsuarioForm((prev) => ({
                                ...prev,
                                grupos_comissao: [...prev.grupos_comissao, grupo.id]
                              }));
                            } else {
                              setUsuarioForm((prev) => ({
                                ...prev,
                                grupos_comissao: prev.grupos_comissao.filter((id2) => id2 !== grupo.id)
                              }));
                            }
                          },
                          className: "mr-2 text-primary-500 focus:ring-primary-500"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-300", children: grupo.nome })
                    ] }, grupo.id)),
                    grupos.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-500 text-sm", children: "Nenhum grupo de produtos encontrado" })
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Email" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "email",
                    value: usuarioForm.email,
                    onChange: (e) => {
                      setUsuarioForm((prev) => ({ ...prev, email: e.target.value }));
                      if (formErrors.email) {
                        setFormErrors((prev) => ({ ...prev, email: "" }));
                      }
                    },
                    className: `w-full bg-gray-800/50 border ${formErrors.email ? "border-red-500" : "border-gray-700"} rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20`,
                    placeholder: "Digite o email",
                    required: !isEditingUsuario,
                    disabled: isEditingUsuario,
                    readOnly: isEditingUsuario
                  }
                ),
                formErrors.email && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 text-sm mt-1", children: formErrors.email }),
                isEditingUsuario && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-blue-400 text-xs mt-1", children: "O email não pode ser alterado" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Série NFC-e" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "number",
                    value: usuarioForm.serie_nfce,
                    onChange: (e) => {
                      const valor = parseInt(e.target.value) || 1;
                      setUsuarioForm((prev) => ({ ...prev, serie_nfce: valor }));
                      if (formErrors.serie_nfce) {
                        setFormErrors((prev) => ({ ...prev, serie_nfce: "" }));
                      }
                    },
                    className: `w-full bg-gray-800/50 border ${formErrors.serie_nfce ? "border-red-500" : "border-gray-700"} rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20`,
                    placeholder: "Digite a série da NFC-e",
                    min: "1",
                    max: "999",
                    required: true
                  }
                ),
                formErrors.serie_nfce && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 text-sm mt-1", children: formErrors.serie_nfce }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-blue-400 text-xs mt-1", children: "Cada usuário deve ter uma série única para evitar conflitos na numeração das NFC-e" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                  "Senha ",
                  isEditingUsuario && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: mostrarSenha ? "text" : "password",
                      value: usuarioForm.senha,
                      onChange: (e) => {
                        setUsuarioForm((prev) => ({ ...prev, senha: e.target.value }));
                        if (formErrors.senha) {
                          setFormErrors((prev) => ({ ...prev, senha: "" }));
                        }
                      },
                      className: `w-full bg-gray-800/50 border ${formErrors.senha ? "border-red-500" : "border-gray-700"} rounded-lg py-2 pl-3 pr-10 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20`,
                      placeholder: isEditingUsuario ? "Digite para alterar a senha" : "Digite a senha",
                      required: !isEditingUsuario
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      type: "button",
                      onClick: () => setMostrarSenha(!mostrarSenha),
                      className: "absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white",
                      children: mostrarSenha ? /* @__PURE__ */ jsxRuntimeExports.jsx(EyeOff, { size: 18 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Eye, { size: 18 })
                    }
                  )
                ] }),
                isEditingUsuario && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-blue-400 text-xs mt-1", children: "Deixe em branco para manter a senha atual" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                  "Confirmar Senha ",
                  isEditingUsuario && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: mostrarConfirmarSenha ? "text" : "password",
                      value: usuarioForm.confirmarSenha,
                      onChange: (e) => {
                        setUsuarioForm((prev) => ({ ...prev, confirmarSenha: e.target.value }));
                        if (formErrors.senha) {
                          setFormErrors((prev) => ({ ...prev, senha: "" }));
                        }
                      },
                      className: `w-full bg-gray-800/50 border ${formErrors.senha ? "border-red-500" : "border-gray-700"} rounded-lg py-2 pl-3 pr-10 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20`,
                      placeholder: isEditingUsuario ? "Confirme a nova senha" : "Confirme a senha",
                      required: !isEditingUsuario,
                      disabled: isEditingUsuario && !usuarioForm.senha
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      type: "button",
                      onClick: () => setMostrarConfirmarSenha(!mostrarConfirmarSenha),
                      className: "absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white",
                      children: mostrarConfirmarSenha ? /* @__PURE__ */ jsxRuntimeExports.jsx(EyeOff, { size: 18 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Eye, { size: 18 })
                    }
                  )
                ] }),
                formErrors.senha && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 text-sm mt-1", children: formErrors.senha })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    className: "flex-1",
                    onClick: () => {
                      setShowSidebar(false);
                      setFormErrors({
                        senha: "",
                        email: "",
                        serie_nfce: ""
                      });
                      setUsuarioForm({
                        id: "",
                        nome: "",
                        email: "",
                        senha: "",
                        confirmarSenha: "",
                        tipo_user_config_id: "",
                        serie_nfce: 1,
                        tipo_comissao: "total_venda",
                        percentual_comissao: 0,
                        grupos_comissao: []
                      });
                      setIsEditingUsuario(false);
                    },
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    variant: "primary",
                    className: "flex-1",
                    disabled: isLoading,
                    children: isLoading ? isEditingUsuario ? "Salvando..." : "Criando..." : isEditingUsuario ? "Salvar Alterações" : "Criar Usuário"
                  }
                )
              ] })
            ] }),
            activeSection === "horarios" && /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmitHorario, className: "space-y-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Dia da Semana" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "select",
                  {
                    value: horarioForm.dia_semana,
                    onChange: (e) => setHorarioForm((prev) => ({ ...prev, dia_semana: e.target.value })),
                    className: `w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20 ${isEditingHorario ? "opacity-60" : ""}`,
                    disabled: isEditingHorario,
                    required: true,
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "0", children: "Domingo" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "1", children: "Segunda-feira" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "2", children: "Terça-feira" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "3", children: "Quarta-feira" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "4", children: "Quinta-feira" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "5", children: "Sexta-feira" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "6", children: "Sábado" })
                    ]
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Horário de Abertura" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "time",
                    value: horarioForm.hora_abertura,
                    onChange: (e) => setHorarioForm((prev) => ({ ...prev, hora_abertura: e.target.value })),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    required: true
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Horário de Fechamento" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "time",
                    value: horarioForm.hora_fechamento,
                    onChange: (e) => setHorarioForm((prev) => ({ ...prev, hora_fechamento: e.target.value })),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    required: true
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 p-4 rounded-lg mt-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-yellow-400", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Importante:" }),
                  " O horário de fechamento deve ser maior que o horário de abertura. Caso contrário, não será possível salvar."
                ] }),
                isEditingHorario && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-blue-400 mt-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Modo de edição:" }),
                  " Você está editando o horário para ",
                  ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado"][parseInt(horarioForm.dia_semana)],
                  "."
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    className: "flex-1",
                    onClick: () => {
                      setShowSidebar(false);
                      if (isEditingHorario) {
                        setIsEditingHorario(false);
                        setHorarioForm({
                          id: "",
                          dia_semana: "0",
                          hora_abertura: "08:00",
                          hora_fechamento: "18:00"
                        });
                      }
                    },
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    variant: "primary",
                    className: "flex-1",
                    disabled: isLoading,
                    children: isLoading ? "Salvando..." : "Salvar"
                  }
                )
              ] })
            ] }),
            activeSection === "geral" && /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmitEmpresa, className: "space-y-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                SearchableSelect,
                {
                  label: "Segmento",
                  value: empresaForm.segmento,
                  onChange: (value) => setEmpresaForm((prev) => ({ ...prev, segmento: value })),
                  options: segmentos.map((segmento) => ({ value: segmento, label: segmento })),
                  placeholder: "Selecione um segmento"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Tipo de Documento" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 mb-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "radio",
                        checked: empresaForm.tipo_documento === "CNPJ",
                        onChange: () => setEmpresaForm((prev) => ({ ...prev, tipo_documento: "CNPJ", documento: "" })),
                        className: "mr-2"
                      }
                    ),
                    "CNPJ"
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "radio",
                        checked: empresaForm.tipo_documento === "CPF",
                        onChange: () => setEmpresaForm((prev) => ({ ...prev, tipo_documento: "CPF", documento: "" })),
                        className: "mr-2"
                      }
                    ),
                    "CPF"
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: empresaForm.documento,
                      onChange: handleDocumentoChange,
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-3 pr-10 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: `Digite o ${empresaForm.tipo_documento}`
                    }
                  ),
                  empresaForm.tipo_documento === "CNPJ" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      type: "button",
                      onClick: buscarCNPJ,
                      disabled: isCnpjLoading,
                      className: "absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white disabled:opacity-50",
                      children: isCnpjLoading ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-gray-400/30 border-t-gray-400 rounded-full animate-spin" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18 })
                    }
                  )
                ] })
              ] }),
              empresaForm.tipo_documento === "CNPJ" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Razão Social" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: empresaForm.razao_social,
                    onChange: (e) => setEmpresaForm((prev) => ({ ...prev, razao_social: e.target.value })),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Digite a razão social"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Nome Fantasia" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: empresaForm.nome_fantasia,
                    onChange: (e) => setEmpresaForm((prev) => ({ ...prev, nome_fantasia: e.target.value })),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Digite o nome fantasia"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Nome do Proprietário" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: empresaForm.nome_proprietario,
                    onChange: (e) => setEmpresaForm((prev) => ({ ...prev, nome_proprietario: e.target.value })),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Digite o nome do proprietário"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "WhatsApp" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: empresaForm.whatsapp,
                    onChange: (e) => setEmpresaForm((prev) => ({ ...prev, whatsapp: formatWhatsapp(e.target.value) })),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "(00) 0 0000-0000"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "CEP" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: empresaForm.cep,
                      onChange: (e) => setEmpresaForm((prev) => ({ ...prev, cep: formatCEP(e.target.value) })),
                      onBlur: buscarCEP,
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-3 pr-10 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "00000-000"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      type: "button",
                      onClick: buscarCEP,
                      disabled: isCepLoading,
                      className: "absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white disabled:opacity-50",
                      children: isCepLoading ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-gray-400/30 border-t-gray-400 rounded-full animate-spin" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18 })
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Endereço" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: empresaForm.endereco,
                    onChange: (e) => setEmpresaForm((prev) => ({ ...prev, endereco: e.target.value })),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Digite o endereço"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Número" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: empresaForm.numero,
                      onChange: (e) => setEmpresaForm((prev) => ({ ...prev, numero: e.target.value })),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "Nº"
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Complemento" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: empresaForm.complemento,
                      onChange: (e) => setEmpresaForm((prev) => ({ ...prev, complemento: e.target.value })),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "Complemento"
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Bairro" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: empresaForm.bairro,
                    onChange: (e) => setEmpresaForm((prev) => ({ ...prev, bairro: e.target.value })),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Digite o bairro"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Cidade" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: empresaForm.cidade,
                      onChange: (e) => setEmpresaForm((prev) => ({ ...prev, cidade: e.target.value })),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "Digite a cidade"
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Estado" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: empresaForm.estado,
                      onChange: (e) => setEmpresaForm((prev) => ({ ...prev, estado: e.target.value })),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "UF",
                      maxLength: 2
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Código do Município (IBGE) *" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: empresaForm.codigo_municipio,
                      onChange: (e) => setEmpresaForm((prev) => ({ ...prev, codigo_municipio: e.target.value })),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-3 pr-10 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "3525904 (7 dígitos)",
                      maxLength: 7,
                      pattern: "[0-9]{7}",
                      required: true
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      type: "button",
                      onClick: async () => {
                        if (empresaForm.cidade && empresaForm.estado) {
                          const codigoIBGE = await buscarCodigoIBGE(empresaForm.cidade, empresaForm.estado);
                          if (codigoIBGE) {
                            setEmpresaForm((prev) => ({ ...prev, codigo_municipio: codigoIBGE }));
                            showMessage("success", "Código IBGE encontrado!");
                          } else {
                            showMessage("error", "Código IBGE não encontrado para esta cidade/estado.");
                          }
                        } else {
                          showMessage("error", "Preencha cidade e estado primeiro.");
                        }
                      },
                      className: "absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white",
                      title: "Buscar código IBGE automaticamente",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18 })
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Código IBGE de 7 dígitos do município (obrigatório para NFe). Preenchido automaticamente ao buscar por CNPJ ou CEP." })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Email da Empresa *" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "email",
                      value: empresaForm.email,
                      onChange: (e) => setEmpresaForm((prev) => ({ ...prev, email: e.target.value })),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "contato@empresa.com.br",
                      required: true
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Inscrição Estadual *" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "text",
                      value: empresaForm.inscricao_estadual,
                      onChange: handleInscricaoEstadualChange,
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                      placeholder: "123456789012 (12 dígitos)",
                      maxLength: 12,
                      pattern: "[0-9]{12}",
                      required: true
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Apenas números, exatamente 12 dígitos" })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Regime Tributário *" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "select",
                  {
                    value: empresaForm.regime_tributario,
                    onChange: (e) => setEmpresaForm((prev) => ({ ...prev, regime_tributario: parseInt(e.target.value) })),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    required: true,
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 1, children: "1 - Simples Nacional" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 2, children: "2 - Simples Nacional - Excesso" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: 3, children: "3 - Regime Normal" })
                    ]
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    className: "flex-1",
                    onClick: () => setShowSidebar(false),
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    variant: "primary",
                    className: "flex-1",
                    disabled: isLoading,
                    children: isLoading ? "Salvando..." : "Salvar"
                  }
                )
              ] })
            ] })
          ] })
        }
      )
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      DeleteConfirmation,
      {
        isOpen: deleteConfirmation.isOpen,
        onClose: () => setDeleteConfirmation((prev) => ({ ...prev, isOpen: false })),
        onConfirm: deleteConfirmation.itemType === "toggle_status" ? handleConfirmToggleStatus : handleConfirmDelete,
        title: deleteConfirmation.title,
        message: deleteConfirmation.message
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showDeleteAccountModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        exit: { opacity: 0 },
        className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          motion.div,
          {
            initial: { scale: 0.95, opacity: 0 },
            animate: { scale: 1, opacity: 1 },
            exit: { scale: 0.95, opacity: 0 },
            className: "bg-background-card p-6 rounded-lg shadow-xl max-w-md mx-4 w-full border border-red-500/20",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center mb-6", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-16 h-16 bg-red-500/10 rounded-full flex items-center justify-center mx-auto mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "text-red-500", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3 6h18" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "10", y1: "11", x2: "10", y2: "17" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "14", y1: "11", x2: "14", y2: "17" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold text-white mb-2", children: "⚠️ DELETAR EMPRESA COMPLETA" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-400 text-sm", children: [
                  "Esta ação irá deletar ",
                  /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "PERMANENTEMENTE" }),
                  " toda a empresa e todos os dados associados:"
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "text-left text-gray-400 text-sm mt-3 space-y-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Todos os usuários e contas" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Todos os pedidos e histórico" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Todos os produtos e estoque" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Todos os clientes" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Todas as configurações" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-400 text-sm mt-3 font-medium", children: "Esta ação NÃO PODE ser desfeita!" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Senha de Desenvolvedor" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "password",
                      value: devPassword,
                      onChange: (e) => setDevPassword(e.target.value),
                      className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-red-500 focus:ring-1 focus:ring-red-500/20",
                      placeholder: "Digite a senha de desenvolvedor",
                      autoFocus: true
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-500 text-xs mt-1", children: "Esta senha é necessária para confirmar a exclusão da empresa." })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 pt-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "button",
                      variant: "text",
                      className: "flex-1",
                      onClick: () => {
                        setShowDeleteAccountModal(false);
                        setDevPassword("");
                      },
                      disabled: isDeletingAccount,
                      children: "Cancelar"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "button",
                      variant: "primary",
                      className: "flex-1 !bg-red-500 hover:!bg-red-600 !border-red-500",
                      onClick: handleDeleteAccount,
                      disabled: isDeletingAccount || !devPassword.trim(),
                      children: isDeletingAccount ? "Deletando..." : "DELETAR EMPRESA"
                    }
                  )
                ] })
              ] })
            ]
          }
        )
      }
    ) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showRemoveCertificadoModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        exit: { opacity: 0 },
        className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          motion.div,
          {
            initial: { scale: 0.95, opacity: 0 },
            animate: { scale: 1, opacity: 1 },
            exit: { scale: 0.95, opacity: 0 },
            className: "bg-background-card p-6 rounded-lg shadow-xl max-w-md mx-4 w-full border border-red-500/20",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center mb-6", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "text-red-400", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "14", height: "20", x: "5", y: "2", rx: "2", ry: "2" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 22v-4h6v4" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M8 6h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M16 6h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 6h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 10h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 14h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M16 10h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M16 14h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M8 10h.01" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M8 14h.01" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold text-white mb-2", children: "Remover Certificado Digital" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-4", children: "Tem certeza que deseja remover o certificado digital? Esta ação irá impedir a emissão de NFe até que um novo certificado seja configurado." }),
                (certificadoInfo == null ? void 0 : certificadoInfo.certificado_digital_nome) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 border border-gray-700 rounded-lg p-3 mb-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-300", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Certificado:" }),
                    " ",
                    certificadoInfo.certificado_digital_nome
                  ] }),
                  certificadoInfo.certificado_digital_validade && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-300", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Validade:" }),
                    " ",
                    new Date(certificadoInfo.certificado_digital_validade).toLocaleDateString("pt-BR")
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "text",
                    className: "flex-1",
                    onClick: () => setShowRemoveCertificadoModal(false),
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "button",
                    variant: "primary",
                    className: "flex-1 !bg-red-500 hover:!bg-red-600 !border-red-500",
                    onClick: handleRemoverCertificado,
                    children: "🗑️ Remover Certificado"
                  }
                )
              ] })
            ]
          }
        )
      }
    ) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      NFeValidationModal,
      {
        isOpen: nfeValidationModal.isOpen,
        onClose: () => setNfeValidationModal((prev) => ({ ...prev, isOpen: false })),
        campo: nfeValidationModal.campo,
        valor: nfeValidationModal.valor,
        validationResult: nfeValidationModal.validationResult,
        onCorrect: (newValue) => {
          if (nfeValidationModal.campo === "Razão Social da Empresa") {
            setEmpresaForm((prev) => ({ ...prev, razao_social: newValue }));
          } else if (nfeValidationModal.campo === "Nome Fantasia da Empresa") {
            setEmpresaForm((prev) => ({ ...prev, nome_fantasia: newValue }));
          } else if (nfeValidationModal.campo === "Nome do Proprietário") {
            setEmpresaForm((prev) => ({ ...prev, nome_proprietario: newValue }));
          } else if (nfeValidationModal.campo === "Endereço da Empresa") {
            setEmpresaForm((prev) => ({ ...prev, endereco: newValue }));
          } else if (nfeValidationModal.campo === "Bairro da Empresa") {
            setEmpresaForm((prev) => ({ ...prev, bairro: newValue }));
          } else if (nfeValidationModal.campo === "Cidade da Empresa") {
            setEmpresaForm((prev) => ({ ...prev, cidade: newValue }));
          } else if (nfeValidationModal.campo === "Complemento da Empresa") {
            setEmpresaForm((prev) => ({ ...prev, complemento: newValue }));
          }
          setNfeValidationModal((prev) => ({ ...prev, isOpen: false }));
        }
      }
    )
  ] });
};
const formatarPreco = (valor) => {
  return valor.toLocaleString("pt-BR", {
    style: "currency",
    currency: "BRL",
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });
};
const formatarDocumento = (documento, tipo) => {
  const apenasNumeros = documento.replace(/\D/g, "");
  if (tipo === "cpf") {
    return apenasNumeros.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, "$1.$2.$3-$4");
  } else {
    return apenasNumeros.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, "$1.$2.$3/$4-$5");
  }
};
const formatarTelefone = (telefone) => {
  const apenasNumeros = telefone.replace(/\D/g, "");
  if (apenasNumeros.length === 11) {
    return apenasNumeros.replace(/(\d{2})(\d{1})(\d{4})(\d{4})/, "($1) $2 $3-$4");
  } else if (apenasNumeros.length === 10) {
    return apenasNumeros.replace(/(\d{2})(\d{4})(\d{4})/, "($1) $2-$3");
  }
  return telefone;
};
const formatarDataHora = (data) => {
  if (!data) {
    return "Data não disponível";
  }
  try {
    const dataObj = typeof data === "string" ? new Date(data) : data;
    if (isNaN(dataObj.getTime())) {
      return "Data inválida";
    }
    return dataObj.toLocaleString("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit"
    });
  } catch (error) {
    console.error("Erro ao formatar data e hora:", error, data);
    return "Erro ao formatar data";
  }
};
const EVENT_TYPES = {
  PEDIDO_CRIADO: "pedido:criado",
  PEDIDO_ATUALIZADO: "pedido:atualizado",
  PEDIDO_CANCELADO: "pedido:cancelado",
  PEDIDO_FATURADO: "pedido:faturado",
  PEDIDOS_RECARREGAR: "pedidos:recarregar"
};
const dispatchPedidoCriado = (data) => {
  const event = new CustomEvent(EVENT_TYPES.PEDIDO_CRIADO, {
    detail: { ...data, action: "created" }
  });
  window.dispatchEvent(event);
};
const dispatchPedidoAtualizado = (data) => {
  const event = new CustomEvent(EVENT_TYPES.PEDIDO_ATUALIZADO, {
    detail: { ...data, action: "updated" }
  });
  window.dispatchEvent(event);
};
const contarPedidosPendentes = async (empresaId) => {
  try {
    const { supabase: supabase2 } = await __vitePreload(async () => {
      const { supabase: supabase3 } = await Promise.resolve().then(() => supabase$1);
      return { supabase: supabase3 };
    }, true ? void 0 : void 0);
    const { count, error } = await supabase2.from("pedidos").select("*", { count: "exact", head: true }).eq("empresa_id", empresaId).eq("status", "pendente").eq("deletado", false);
    if (error) {
      console.error("Erro ao contar pedidos pendentes:", error);
      return 0;
    }
    return count || 0;
  } catch (error) {
    console.error("Erro ao contar pedidos pendentes:", error);
    return 0;
  }
};
const OpcoesAdicionaisModal = ({
  isOpen,
  onClose,
  produto,
  onConfirm
}) => {
  const [opcoes, setOpcoes] = reactExports.useState([]);
  const [itensSelecionados, setItensSelecionados] = reactExports.useState([]);
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [opcaoExpandida, setOpcaoExpandida] = reactExports.useState(null);
  reactExports.useEffect(() => {
    if (isOpen && produto.id) {
      loadOpcoesAdicionais();
    }
  }, [isOpen, produto.id]);
  reactExports.useEffect(() => {
    if (!isOpen) {
      setItensSelecionados([]);
      setOpcaoExpandida(null);
    }
  }, [isOpen]);
  const loadOpcoesAdicionais = async () => {
    try {
      setIsLoading(true);
      const { data: produtoOpcoesData, error: produtoOpcoesError } = await supabase.from("produtos_opcoes_adicionais").select(`
          opcao:opcoes_adicionais (
            id,
            nome,
            quantidade_minima,
            itens:opcoes_adicionais_itens (
              id,
              nome,
              preco,
              opcao_id
            )
          )
        `).eq("produto_id", produto.id).eq("deletado", false);
      if (produtoOpcoesError) {
        console.error("Erro ao carregar opções adicionais:", produtoOpcoesError);
        showMessage("error", "Erro ao carregar opções adicionais");
        return;
      }
      const opcoesFormatadas = (produtoOpcoesData || []).map((item) => item.opcao).filter((opcao) => opcao && opcao.itens && opcao.itens.length > 0).map((opcao) => ({
        ...opcao,
        itens: opcao.itens.filter((item) => item && item.nome && item.preco !== void 0)
      }));
      setOpcoes(opcoesFormatadas);
      if (opcoesFormatadas.length === 1) {
        setOpcaoExpandida(opcoesFormatadas[0].id);
      }
    } catch (error) {
      console.error("Erro ao carregar opções adicionais:", error);
      showMessage("error", "Erro ao carregar opções adicionais");
    } finally {
      setIsLoading(false);
    }
  };
  const toggleOpcao = (opcaoId) => {
    setOpcaoExpandida(opcaoExpandida === opcaoId ? null : opcaoId);
  };
  const adicionarItem = (item) => {
    setItensSelecionados((prev) => {
      const itemExistente = prev.find((i) => i.item.id === item.id);
      if (itemExistente) {
        return prev.map(
          (i) => i.item.id === item.id ? { ...i, quantidade: i.quantidade + 1 } : i
        );
      } else {
        return [...prev, { item, quantidade: 1 }];
      }
    });
  };
  const removerItem = (itemId) => {
    setItensSelecionados((prev) => {
      const itemExistente = prev.find((i) => i.item.id === itemId);
      if (itemExistente && itemExistente.quantidade > 1) {
        return prev.map(
          (i) => i.item.id === itemId ? { ...i, quantidade: i.quantidade - 1 } : i
        );
      } else {
        return prev.filter((i) => i.item.id !== itemId);
      }
    });
  };
  const getQuantidadeItem = (itemId) => {
    const item = itensSelecionados.find((i) => i.item.id === itemId);
    return item ? item.quantidade : 0;
  };
  const calcularTotal = () => {
    return itensSelecionados.reduce((total, item) => {
      return total + item.item.preco * item.quantidade;
    }, 0);
  };
  const verificarQuantidadeMinima = () => {
    const opcoesInvalidas = [];
    for (const opcao of opcoes) {
      if (!opcao.quantidade_minima || opcao.quantidade_minima <= 0) continue;
      const quantidadeSelecionada = itensSelecionados.filter((item) => opcao.itens.some((opcaoItem) => opcaoItem.id === item.item.id)).reduce((total, item) => total + item.quantidade, 0);
      if (quantidadeSelecionada > 0 && quantidadeSelecionada < opcao.quantidade_minima) {
        opcoesInvalidas.push({
          nome: opcao.nome,
          selecionada: quantidadeSelecionada,
          minima: opcao.quantidade_minima
        });
      }
    }
    return {
      valido: opcoesInvalidas.length === 0,
      opcoesInvalidas
    };
  };
  const getQuantidadeSelecionadaPorOpcao = (opcaoId) => {
    const opcao = opcoes.find((o) => o.id === opcaoId);
    if (!opcao) return 0;
    return itensSelecionados.filter((item) => opcao.itens.some((opcaoItem) => opcaoItem.id === item.item.id)).reduce((total, item) => total + item.quantidade, 0);
  };
  const handleConfirmar = () => {
    const validacao = verificarQuantidadeMinima();
    if (!validacao.valido) {
      const mensagem = `Quantidade mínima não atingida para: ${validacao.opcoesInvalidas.map(
        (opcao) => `${opcao.nome} (${opcao.selecionada}/${opcao.minima})`
      ).join(", ")}`;
      showMessage("error", mensagem);
      return;
    }
    onConfirm(itensSelecionados);
    onClose();
  };
  const formatCurrency = (value) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(value);
  };
  if (!isOpen) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 z-50 bg-black/80 flex items-center justify-center p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full max-w-2xl bg-gray-900 rounded-lg flex flex-col max-h-[90vh]", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 border-b border-gray-800 flex items-center justify-between", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Opções Adicionais" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: produto.nome })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          onClick: onClose,
          className: "p-2 rounded-full bg-gray-800 text-gray-400 hover:text-white transition-colors",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-y-auto p-4", children: isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-center py-8", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-gray-400", children: "Carregando opções..." }) }) : opcoes.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-center py-8", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center text-gray-400", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-lg font-medium mb-2", children: "Nenhuma opção adicional" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm", children: "Este produto não possui opções adicionais configuradas" })
    ] }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-4", children: opcoes.map((opcao) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 rounded-lg overflow-hidden", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "button",
        {
          onClick: () => toggleOpcao(opcao.id),
          className: "w-full p-3 text-left flex items-center justify-between hover:bg-gray-700/50 transition-colors",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: opcao.nome }),
                opcao.quantidade_minima && opcao.quantidade_minima > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-1", children: (() => {
                  const quantidadeSelecionada = getQuantidadeSelecionadaPorOpcao(opcao.id);
                  const atingiuMinimo = quantidadeSelecionada >= opcao.quantidade_minima;
                  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: `text-xs px-2 py-1 rounded-full font-medium ${atingiuMinimo ? "bg-green-500/20 text-green-400" : "bg-yellow-500/20 text-yellow-400"}`, children: [
                      quantidadeSelecionada,
                      "/",
                      opcao.quantidade_minima
                    ] }),
                    atingiuMinimo && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-green-400 text-sm", children: "✓" })
                  ] });
                })() })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400", children: [
                opcao.itens.length,
                " ",
                opcao.itens.length === 1 ? "opção" : "opções",
                opcao.quantidade_minima && opcao.quantidade_minima > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "ml-2 text-yellow-400", children: [
                  "(Mín: ",
                  opcao.quantidade_minima,
                  ")"
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-gray-400", children: opcaoExpandida === opcao.id ? "−" : "+" })
          ]
        }
      ),
      opcaoExpandida === opcao.id && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "border-t border-gray-700 p-3 space-y-2", children: opcao.itens.map((item) => {
        const quantidade = getQuantidadeItem(item.id);
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "div",
          {
            className: "flex items-center justify-between p-2 bg-gray-700/30 rounded-lg",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white font-medium", children: item.nome }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: item.preco > 0 ? `+ ${formatCurrency(item.preco)}` : "Grátis" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                quantidade > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      onClick: () => removerItem(item.id),
                      className: "w-8 h-8 rounded-full bg-red-600 text-white flex items-center justify-center hover:bg-red-700 transition-colors",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Minus, { size: 16 })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium w-8 text-center", children: quantidade })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => adicionarItem(item),
                    className: "w-8 h-8 rounded-full bg-primary-600 text-white flex items-center justify-center hover:bg-primary-700 transition-colors",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 16 })
                  }
                )
              ] })
            ]
          },
          item.id
        );
      }) })
    ] }, opcao.id)) }) }),
    opcoes.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 border-t border-gray-800", children: [
      itensSelecionados.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 p-3 bg-gray-800/50 rounded-lg", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mb-2", children: "Itens selecionados:" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-1", children: itensSelecionados.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between text-sm", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white", children: [
            item.quantidade,
            "x ",
            item.item.nome
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400", children: formatCurrency(item.item.preco * item.quantidade) })
        ] }, item.item.id)) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "border-t border-gray-700 mt-2 pt-2 flex justify-between font-medium", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "Total dos adicionais:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400", children: formatCurrency(calcularTotal()) })
        ] })
      ] }),
      (() => {
        const validacao = verificarQuantidadeMinima();
        if (validacao.valido) return null;
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 p-3 bg-yellow-500/10 border border-yellow-500/20 rounded-lg", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-yellow-400", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: "⚠️" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm font-medium", children: "Quantidade mínima não atingida" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-yellow-300 mt-1", children: validacao.opcoesInvalidas.map(
            (opcao) => `${opcao.nome}: ${opcao.selecionada}/${opcao.minima}`
          ).join(" • ") })
        ] });
      })(),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: onClose,
            className: "flex-1 px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors",
            children: "Cancelar"
          }
        ),
        (() => {
          const validacao = verificarQuantidadeMinima();
          return /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              onClick: handleConfirmar,
              disabled: !validacao.valido,
              className: `flex-1 px-4 py-2 rounded-lg transition-colors ${validacao.valido ? "bg-primary-600 text-white hover:bg-primary-700" : "bg-gray-600 text-gray-400 cursor-not-allowed"}`,
              title: !validacao.valido ? `Quantidade mínima não atingida para: ${validacao.opcoesInvalidas.map((opcao) => `${opcao.nome} (${opcao.selecionada}/${opcao.minima})`).join(", ")}` : "",
              children: "Confirmar"
            }
          );
        })()
      ] })
    ] })
  ] }) });
};
const PDVPage = () => {
  var _a2, _b2, _c, _d, _e, _f, _g;
  const { withSessionCheck } = useAuthSession();
  useNavigate();
  const { isExpanded, toggle } = useSidebarStore();
  const { enterFullscreen, exitFullscreen, isFullscreen } = useFullscreen();
  const [produtos, setProdutos] = reactExports.useState([]);
  const [grupos, setGrupos] = reactExports.useState([]);
  const [carrinho, setCarrinho] = reactExports.useState([]);
  const [grupoSelecionado, setGrupoSelecionado] = reactExports.useState("todos");
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [isLoading, setIsLoading] = reactExports.useState(true);
  const [showClienteModal, setShowClienteModal] = reactExports.useState(false);
  const [clienteSelecionado, setClienteSelecionado] = reactExports.useState(null);
  const [clientes, setClientes] = reactExports.useState([]);
  const [showPagamentoModal, setShowPagamentoModal] = reactExports.useState(false);
  const [showConfirmModal, setShowConfirmModal] = reactExports.useState(false);
  const [itemParaRemover, setItemParaRemover] = reactExports.useState(null);
  const [showLimparCarrinhoModal, setShowLimparCarrinhoModal] = reactExports.useState(false);
  const [currentDateTime, setCurrentDateTime] = reactExports.useState(/* @__PURE__ */ new Date());
  const [showGaleriaModal, setShowGaleriaModal] = reactExports.useState(false);
  const [produtoSelecionadoGaleria, setProdutoSelecionadoGaleria] = reactExports.useState(null);
  const [fotoAtualIndex, setFotoAtualIndex] = reactExports.useState(0);
  const [produtosEstoque, setProdutosEstoque] = reactExports.useState({});
  const [pdvConfig, setPdvConfig] = reactExports.useState(null);
  const [showPedidosModal, setShowPedidosModal] = reactExports.useState(false);
  const [showMesasModal, setShowMesasModal] = reactExports.useState(false);
  const [showComandasModal, setShowComandasModal] = reactExports.useState(false);
  const [showSangriaModal, setShowSangriaModal] = reactExports.useState(false);
  const [showSuprimentoModal, setShowSuprimentoModal] = reactExports.useState(false);
  const [showPagamentosModal, setShowPagamentosModal] = reactExports.useState(false);
  const [showFiadosModal, setShowFiadosModal] = reactExports.useState(false);
  const [showMovimentosModal, setShowMovimentosModal] = reactExports.useState(false);
  const [vendas, setVendas] = reactExports.useState([]);
  const [loadingVendas, setLoadingVendas] = reactExports.useState(false);
  const [showEditarNfceModal, setShowEditarNfceModal] = reactExports.useState(false);
  const [vendaParaEditarNfce, setVendaParaEditarNfce] = reactExports.useState(null);
  const [itensNfceEdicao, setItensNfceEdicao] = reactExports.useState([]);
  const [loadingItensNfce, setLoadingItensNfce] = reactExports.useState(false);
  const [reprocessandoNfce, setReprocessandoNfce] = reactExports.useState(false);
  const [editandoNumeroNfce, setEditandoNumeroNfce] = reactExports.useState(false);
  const [numeroNfceEditavel, setNumeroNfceEditavel] = reactExports.useState("");
  const [serieNfce, setSerieNfce] = reactExports.useState(1);
  const [cpfCnpjModalItens, setCpfCnpjModalItens] = reactExports.useState("");
  const [tipoDocumentoModalItens, setTipoDocumentoModalItens] = reactExports.useState("cpf");
  const [erroValidacaoModalItens, setErroValidacaoModalItens] = reactExports.useState("");
  const [emitindoNfceModalItens, setEmitindoNfceModalItens] = reactExports.useState(false);
  const [showFiltrosVendas, setShowFiltrosVendas] = reactExports.useState(false);
  const [filtroStatus, setFiltroStatus] = reactExports.useState("todas");
  const [filtroNfce, setFiltroNfce] = reactExports.useState("todas");
  const [filtroDataInicio, setFiltroDataInicio] = reactExports.useState("");
  const [filtroDataFim, setFiltroDataFim] = reactExports.useState("");
  const [filtroNumeroPedido, setFiltroNumeroPedido] = reactExports.useState("");
  const [filtroNumeroVenda, setFiltroNumeroVenda] = reactExports.useState("");
  const [showCancelamentoModal, setShowCancelamentoModal] = reactExports.useState(false);
  const [vendaParaCancelar, setVendaParaCancelar] = reactExports.useState(null);
  const [motivoCancelamento, setMotivoCancelamento] = reactExports.useState("");
  const [showItensVendaModal, setShowItensVendaModal] = reactExports.useState(false);
  const [vendaParaExibirItens, setVendaParaExibirItens] = reactExports.useState(null);
  const [itensVenda, setItensVenda] = reactExports.useState([]);
  const [loadingItensVenda, setLoadingItensVenda] = reactExports.useState(false);
  const [showAreaProdutos, setShowAreaProdutos] = reactExports.useState(false);
  const [pedidos, setPedidos] = reactExports.useState([]);
  const [loadingPedidos, setLoadingPedidos] = reactExports.useState(false);
  const [searchPedidos, setSearchPedidos] = reactExports.useState("");
  const [pedidosFiltrados, setPedidosFiltrados] = reactExports.useState([]);
  const [contadorPedidosPendentes, setContadorPedidosPendentes] = reactExports.useState(0);
  const [contadorNfcePendentes, setContadorNfcePendentes] = reactExports.useState(0);
  const [statusFilterPedidos, setStatusFilterPedidos] = reactExports.useState("pendente");
  const [showFiltersPedidos, setShowFiltersPedidos] = reactExports.useState(false);
  const [pedidoDetalhado, setPedidoDetalhado] = reactExports.useState(null);
  const [showDetalhePedido, setShowDetalhePedido] = reactExports.useState(false);
  const [showDescontoModal, setShowDescontoModal] = reactExports.useState(false);
  const [itemParaDesconto, setItemParaDesconto] = reactExports.useState(null);
  const [tipoDesconto, setTipoDesconto] = reactExports.useState("percentual");
  const [valorDesconto, setValorDesconto] = reactExports.useState("");
  const [novoValor, setNovoValor] = reactExports.useState(0);
  const PDV_STORAGE_KEY = "nexo-pdv-state";
  const [tipoPagamento, setTipoPagamento] = reactExports.useState("vista");
  const [formasPagamento, setFormasPagamento] = reactExports.useState([]);
  const [formaPagamentoSelecionada, setFormaPagamentoSelecionada] = reactExports.useState(null);
  const [valorParcial, setValorParcial] = reactExports.useState("");
  const [pagamentosParciais, setPagamentosParciais] = reactExports.useState([]);
  const [trocoCalculado, setTrocoCalculado] = reactExports.useState(0);
  const [showConfirmRemoveAll, setShowConfirmRemoveAll] = reactExports.useState(false);
  const [showConfirmRemoveItem, setShowConfirmRemoveItem] = reactExports.useState(false);
  const [itemToRemove, setItemToRemove] = reactExports.useState(null);
  const [showProcessandoVenda, setShowProcessandoVenda] = reactExports.useState(false);
  const [etapaProcessamento, setEtapaProcessamento] = reactExports.useState("");
  const [vendaProcessadaId, setVendaProcessadaId] = reactExports.useState(null);
  const [numeroVendaProcessada, setNumeroVendaProcessada] = reactExports.useState("");
  const [statusProcessamento, setStatusProcessamento] = reactExports.useState("processando");
  const [dadosImpressao, setDadosImpressao] = reactExports.useState(null);
  const [tipoFinalizacaoAtual, setTipoFinalizacaoAtual] = reactExports.useState("");
  const [erroProcessamento, setErroProcessamento] = reactExports.useState("");
  const [numeroDocumentoReservado, setNumeroDocumentoReservado] = reactExports.useState(null);
  const [serieDocumentoReservado, setSerieDocumentoReservado] = reactExports.useState(null);
  const [showFinalizacaoFinal, setShowFinalizacaoFinal] = reactExports.useState(false);
  const [showFinalizacaoNaAreaPagamento, setShowFinalizacaoNaAreaPagamento] = reactExports.useState(false);
  const [cpfCnpjNota, setCpfCnpjNota] = reactExports.useState("");
  const [clienteEncontrado, setClienteEncontrado] = reactExports.useState(null);
  const [tipoDocumento, setTipoDocumento] = reactExports.useState("cpf");
  const [erroValidacao, setErroValidacao] = reactExports.useState("");
  const [showConfirmLimparCarrinho, setShowConfirmLimparCarrinho] = reactExports.useState(false);
  const [showConfirmLimparTudoPDV, setShowConfirmLimparTudoPDV] = reactExports.useState(false);
  const [showProdutoNaoEncontrado, setShowProdutoNaoEncontrado] = reactExports.useState(false);
  const [produtoNaoEncontradoTermo, setProdutoNaoEncontradoTermo] = reactExports.useState("");
  const [userData, setUserData] = reactExports.useState(null);
  const [showMenuPDV, setShowMenuPDV] = reactExports.useState(false);
  const [menuStartIndex, setMenuStartIndex] = reactExports.useState(0);
  const [visibleMenuItems, setVisibleMenuItems] = reactExports.useState(9);
  const [pedidosImportados, setPedidosImportados] = reactExports.useState([]);
  const [showConfirmRemovePedidoImportado, setShowConfirmRemovePedidoImportado] = reactExports.useState(false);
  const [pedidoParaRemover, setPedidoParaRemover] = reactExports.useState(null);
  const [showConfirmImportarPedido, setShowConfirmImportarPedido] = reactExports.useState(false);
  const [pedidoParaImportar, setPedidoParaImportar] = reactExports.useState(null);
  const [descontosCliente, setDescontosCliente] = reactExports.useState({ prazo: [], valor: [] });
  const [descontoPrazoSelecionado, setDescontoPrazoSelecionado] = reactExports.useState(null);
  const [showOpcoesAdicionaisModal, setShowOpcoesAdicionaisModal] = reactExports.useState(false);
  const [produtoParaAdicionais, setProdutoParaAdicionais] = reactExports.useState(null);
  const [itemCarrinhoParaAdicionais, setItemCarrinhoParaAdicionais] = reactExports.useState(null);
  const [itemEditandoNome, setItemEditandoNome] = reactExports.useState(null);
  const [nomeEditando, setNomeEditando] = reactExports.useState("");
  const [showObservacaoModal, setShowObservacaoModal] = reactExports.useState(false);
  const [itemParaObservacao, setItemParaObservacao] = reactExports.useState(null);
  const [observacaoTexto, setObservacaoTexto] = reactExports.useState("");
  const [itemEditandoObservacao, setItemEditandoObservacao] = reactExports.useState(null);
  const [observacaoEditando, setObservacaoEditando] = reactExports.useState("");
  const savePDVState = () => {
    try {
      const pdvState = {
        carrinho,
        clienteSelecionado,
        pedidosImportados,
        showFinalizacaoFinal,
        tipoPagamento,
        formaPagamentoSelecionada,
        valorParcial,
        pagamentosParciais,
        trocoCalculado,
        descontoPrazoSelecionado,
        itemEditandoNome,
        nomeEditando,
        itemEditandoObservacao,
        observacaoEditando,
        timestamp: Date.now()
      };
      localStorage.setItem(PDV_STORAGE_KEY, JSON.stringify(pdvState));
    } catch (error) {
      console.error("Erro ao salvar estado do PDV:", error);
    }
  };
  const loadPDVState = () => {
    try {
      const savedState = localStorage.getItem(PDV_STORAGE_KEY);
      if (savedState) {
        const pdvState = JSON.parse(savedState);
        const isStateValid = pdvState.timestamp && Date.now() - pdvState.timestamp < 24 * 60 * 60 * 1e3;
        if (isStateValid) {
          if (pdvState.carrinho) setCarrinho(pdvState.carrinho);
          if (pdvState.clienteSelecionado) setClienteSelecionado(pdvState.clienteSelecionado);
          if (pdvState.pedidosImportados) setPedidosImportados(pdvState.pedidosImportados);
          if (pdvState.pedidoImportado && !pdvState.pedidosImportados) {
            setPedidosImportados([pdvState.pedidoImportado]);
          }
          if (pdvState.showFinalizacaoFinal !== void 0) setShowFinalizacaoFinal(pdvState.showFinalizacaoFinal);
          if (pdvState.tipoPagamento) setTipoPagamento(pdvState.tipoPagamento);
          if (pdvState.formaPagamentoSelecionada) setFormaPagamentoSelecionada(pdvState.formaPagamentoSelecionada);
          if (pdvState.valorParcial) setValorParcial(pdvState.valorParcial);
          if (pdvState.pagamentosParciais && Array.isArray(pdvState.pagamentosParciais)) {
            const pagamentosValidos = pdvState.pagamentosParciais.filter((p2) => {
              return p2.forma && typeof p2.forma === "string" && p2.forma.length > 10;
            });
            setPagamentosParciais(pagamentosValidos);
          }
          if (pdvState.trocoCalculado) setTrocoCalculado(pdvState.trocoCalculado);
          if (pdvState.descontoPrazoSelecionado) setDescontoPrazoSelecionado(pdvState.descontoPrazoSelecionado);
          if (pdvState.itemEditandoNome) setItemEditandoNome(pdvState.itemEditandoNome);
          if (pdvState.nomeEditando) setNomeEditando(pdvState.nomeEditando);
          if (pdvState.itemEditandoObservacao) setItemEditandoObservacao(pdvState.itemEditandoObservacao);
          if (pdvState.observacaoEditando) setObservacaoEditando(pdvState.observacaoEditando);
        } else {
          clearPDVState();
        }
      }
    } catch (error) {
      console.error("Erro ao carregar estado do PDV:", error);
      clearPDVState();
    }
  };
  const clearPDVState = () => {
    try {
      localStorage.removeItem(PDV_STORAGE_KEY);
    } catch (error) {
      console.error("Erro ao limpar estado do PDV:", error);
    }
  };
  const removerPedidoImportado = () => {
    if (!pedidoParaRemover) return;
    const itensDoCarrinho = carrinho.filter((item) => item.pedido_origem_id === pedidoParaRemover.id);
    const itensRestantes = carrinho.filter((item) => item.pedido_origem_id !== pedidoParaRemover.id);
    const totalItensRemovidos = itensDoCarrinho.reduce((total, item) => total + item.quantidade, 0);
    const totalProdutosRemovidos = itensDoCarrinho.length;
    setCarrinho(itensRestantes);
    setPedidosImportados((prev) => prev.filter((p2) => p2.id !== pedidoParaRemover.id));
    const pedidosRestantes = pedidosImportados.filter((p2) => p2.id !== pedidoParaRemover.id);
    if (pedidosRestantes.length === 0) {
      setClienteSelecionado(null);
      setDescontoPrazoSelecionado(null);
      setDescontosCliente({ prazo: [], valor: [] });
      setCpfCnpjNota("");
      setClienteEncontrado(null);
    }
    setShowConfirmRemovePedidoImportado(false);
    setPedidoParaRemover(null);
    if (totalProdutosRemovidos > 0) {
      B.success(`Pedido #${pedidoParaRemover.numero} removido! ${totalProdutosRemovidos} produto(s) e ${totalItensRemovidos} item(s) foram removidos do carrinho.`);
    } else {
      B.success(`Pedido #${pedidoParaRemover.numero} removido com sucesso!`);
    }
  };
  const limparTudoPDV = () => {
    setCarrinho([]);
    setClienteSelecionado(null);
    setPedidosImportados([]);
    setDescontosCliente({ prazo: [], valor: [] });
    setDescontoPrazoSelecionado(null);
    setTipoPagamento("vista");
    setFormaPagamentoSelecionada(null);
    setValorParcial("");
    setPagamentosParciais([]);
    setTrocoCalculado(0);
    setShowFinalizacaoFinal(false);
    setCpfCnpjNota("");
    setClienteEncontrado(null);
    setTipoDocumento("cpf");
    setErroValidacao("");
    setItemEditandoNome(null);
    setNomeEditando("");
    setItemEditandoObservacao(null);
    setObservacaoEditando("");
    clearPDVState();
    setShowConfirmLimparTudoPDV(false);
    B.success("PDV limpo com sucesso! Todos os dados foram removidos.");
  };
  const loadUserData = async () => {
    try {
      const { data: authData } = await supabase.auth.getUser();
      if (!authData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("nome").eq("id", authData.user.id).single();
      if (usuarioData) {
        setUserData({ nome: usuarioData.nome });
      }
    } catch (error) {
      console.error("Erro ao carregar dados do usuário:", error);
    }
  };
  const carregarDescontosCliente = async (clienteId) => {
    try {
      const { data: userData2 } = await supabase.auth.getUser();
      if (!userData2.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: descontosPrazo, error: errorPrazo } = await supabase.from("cliente_descontos_prazo").select("id, prazo_dias, percentual, tipo").eq("cliente_id", clienteId).eq("empresa_id", usuarioData.empresa_id).order("prazo_dias");
      const { data: descontosValor, error: errorValor } = await supabase.from("cliente_descontos_valor").select("valor_minimo, percentual, tipo").eq("cliente_id", clienteId).eq("empresa_id", usuarioData.empresa_id).order("valor_minimo");
      if (errorPrazo) throw errorPrazo;
      if (errorValor) throw errorValor;
      setDescontosCliente({
        prazo: descontosPrazo || [],
        valor: descontosValor || []
      });
    } catch (error) {
      console.error("Erro ao carregar descontos do cliente:", error);
      setDescontosCliente({ prazo: [], valor: [] });
    }
  };
  const calcularDescontoPorValor = (valorTotal) => {
    if (!descontosCliente.valor.length) return null;
    const descontoAplicavel = descontosCliente.valor.filter((d2) => d2.valor_minimo <= valorTotal).sort((a, b2) => b2.valor_minimo - a.valor_minimo)[0];
    if (!descontoAplicavel) return null;
    const valorDesconto2 = valorTotal * descontoAplicavel.percentual / 100;
    return {
      tipo: descontoAplicavel.tipo,
      percentual: descontoAplicavel.percentual,
      valor: valorDesconto2,
      valorMinimo: descontoAplicavel.valor_minimo
    };
  };
  const getDescontosPrazoDisponiveis = () => {
    return descontosCliente.prazo.map((d2) => ({
      id: d2.id,
      prazo_dias: d2.prazo_dias,
      percentual: d2.percentual,
      tipo: d2.tipo,
      valor: calcularTotal() * d2.percentual / 100
    }));
  };
  const calcularDescontoPrazo = () => {
    if (!descontoPrazoSelecionado) return 0;
    const desconto = descontosCliente.prazo.find((d2) => d2.id === descontoPrazoSelecionado);
    if (!desconto) return 0;
    const subtotal = carrinho.reduce((acc, item) => acc + item.subtotal, 0);
    const valorDesconto2 = subtotal * desconto.percentual / 100;
    return desconto.tipo === "desconto" ? valorDesconto2 : -valorDesconto2;
  };
  const confirmarImportarPedido = () => {
    if (pedidoParaImportar) {
      const itensDeOutrosPedidos = carrinho.filter((item) => item.pedido_origem_id);
      setCarrinho(itensDeOutrosPedidos);
      executarImportacaoPedido(pedidoParaImportar);
      setShowConfirmImportarPedido(false);
      setPedidoParaImportar(null);
      setShowPedidosModal(false);
    }
  };
  const getStatusColor = (status) => {
    switch (status) {
      case "pendente":
        return "text-yellow-400";
      case "confirmado":
        return "text-blue-400";
      case "preparando":
        return "text-orange-400";
      case "pronto":
        return "text-green-400";
      case "entregue":
        return "text-green-500";
      case "faturado":
        return "text-green-600";
      case "cancelado":
        return "text-red-400";
      default:
        return "text-gray-400";
    }
  };
  const getStatusText = (status) => {
    switch (status) {
      case "pendente":
        return "Pendente";
      case "confirmado":
        return "Confirmado";
      case "preparando":
        return "Em Preparação";
      case "pronto":
        return "Pronto";
      case "entregue":
        return "Entregue";
      case "faturado":
        return "Faturado";
      case "cancelado":
        return "Cancelado";
      default:
        return status;
    }
  };
  const formatarDataHora2 = (data) => {
    return new Date(data).toLocaleString("pt-BR");
  };
  reactExports.useEffect(() => {
    loadData();
    loadPDVState();
    loadContadorPedidos();
    loadContadorNfcePendentes();
    loadUserData();
    const handleBeforeUnload = () => {
      savePDVState();
    };
    window.addEventListener("beforeunload", handleBeforeUnload);
    return () => {
      window.removeEventListener("beforeunload", handleBeforeUnload);
      if (isFullscreen) {
        exitFullscreen().catch((error) => {
          console.log("PDV: Erro ao sair do fullscreen:", error);
        });
      }
    };
  }, []);
  reactExports.useEffect(() => {
    const handlePedidoCriado = (event) => {
      const { empresaId } = event.detail;
      checkEmpresaAndUpdateCounter(empresaId);
      const modalElement = document.querySelector('[data-modal="pedidos"]');
      if (modalElement) {
        loadPedidos();
      }
    };
    const handlePedidoAtualizado = (event) => {
      const { empresaId } = event.detail;
      checkEmpresaAndUpdateCounter(empresaId);
      const modalElement = document.querySelector('[data-modal="pedidos"]');
      if (modalElement) {
        loadPedidos();
      }
    };
    const handlePedidoCancelado = (event) => {
      const { empresaId } = event.detail;
      checkEmpresaAndUpdateCounter(empresaId);
      const modalElement = document.querySelector('[data-modal="pedidos"]');
      if (modalElement) {
        loadPedidos();
      }
    };
    const handlePedidoFaturado = (event) => {
      const { empresaId } = event.detail;
      checkEmpresaAndUpdateCounter(empresaId);
      const modalElement = document.querySelector('[data-modal="pedidos"]');
      if (modalElement) {
        loadPedidos();
      }
    };
    const handlePedidosRecarregar = (event) => {
      const { empresaId } = event.detail;
      checkEmpresaAndUpdateCounter(empresaId);
      const modalElement = document.querySelector('[data-modal="pedidos"]');
      if (modalElement) {
        loadPedidos();
      }
    };
    window.addEventListener(EVENT_TYPES.PEDIDO_CRIADO, handlePedidoCriado);
    window.addEventListener(EVENT_TYPES.PEDIDO_ATUALIZADO, handlePedidoAtualizado);
    window.addEventListener(EVENT_TYPES.PEDIDO_CANCELADO, handlePedidoCancelado);
    window.addEventListener(EVENT_TYPES.PEDIDO_FATURADO, handlePedidoFaturado);
    window.addEventListener(EVENT_TYPES.PEDIDOS_RECARREGAR, handlePedidosRecarregar);
    return () => {
      window.removeEventListener(EVENT_TYPES.PEDIDO_CRIADO, handlePedidoCriado);
      window.removeEventListener(EVENT_TYPES.PEDIDO_ATUALIZADO, handlePedidoAtualizado);
      window.removeEventListener(EVENT_TYPES.PEDIDO_CANCELADO, handlePedidoCancelado);
      window.removeEventListener(EVENT_TYPES.PEDIDO_FATURADO, handlePedidoFaturado);
      window.removeEventListener(EVENT_TYPES.PEDIDOS_RECARREGAR, handlePedidosRecarregar);
    };
  }, []);
  reactExports.useEffect(() => {
    if (produtos.length > 0) {
      savePDVState();
    }
  }, [
    carrinho,
    clienteSelecionado,
    pedidosImportados,
    showFinalizacaoFinal,
    tipoPagamento,
    formaPagamentoSelecionada,
    valorParcial,
    pagamentosParciais,
    trocoCalculado,
    descontoPrazoSelecionado,
    itemEditandoNome,
    nomeEditando,
    itemEditandoObservacao,
    observacaoEditando,
    produtos.length
    // Garante que só salva depois de carregar os produtos
  ]);
  reactExports.useEffect(() => {
    if (itemParaDesconto && valorDesconto) {
      const item = carrinho.find((i) => i.id === itemParaDesconto);
      if (item) {
        const valor = parseFloat(valorDesconto.replace(",", "."));
        if (!isNaN(valor) && valor >= 0) {
          const novoPreco = calcularNovoValor(item, tipoDesconto, valor);
          setNovoValor(novoPreco);
        }
      }
    } else {
      setNovoValor(0);
    }
  }, [itemParaDesconto, valorDesconto, tipoDesconto, carrinho]);
  const allMenuPDVItems = [
    {
      id: "produtos",
      icon: Package,
      label: "Produtos",
      color: "primary",
      onClick: async (e) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        if (showAreaProdutos) {
          setShowAreaProdutos(false);
        } else {
          await abrirModalProdutos();
        }
      }
    },
    {
      id: "pedidos",
      icon: ShoppingBag,
      label: "Pedidos",
      color: "primary",
      onClick: async (e) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        try {
          if (!isFullscreen) {
            await enterFullscreen();
            console.log("Fullscreen ativado para modal de pedidos");
          }
        } catch (error) {
          console.log("Erro ao ativar fullscreen para modal de pedidos:", error);
        }
        setShowPedidosModal(true);
        setSearchPedidos("");
        if (pedidos.length === 0) {
          setTimeout(() => {
            loadPedidos();
          }, 100);
        }
      }
    },
    {
      id: "cardapio-digital",
      icon: BookOpen,
      label: "Cardápio Digital",
      color: "primary",
      onClick: (e) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        B.info("Funcionalidade do Cardápio Digital em desenvolvimento");
      }
    },
    {
      id: "whatsapp",
      icon: MessageCircle,
      label: "WhatsApp",
      color: "primary",
      onClick: (e) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        B.info("Funcionalidade do WhatsApp em desenvolvimento");
      }
    },
    {
      id: "mesas",
      icon: Table,
      label: "Mesas",
      color: "primary",
      onClick: (e) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowMesasModal(true);
      }
    },
    {
      id: "comandas",
      icon: FileText,
      label: "Comandas",
      color: "primary",
      onClick: (e) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowComandasModal(true);
      }
    },
    {
      id: "delivery",
      icon: Bike,
      label: "Delivery",
      color: "primary",
      onClick: (e) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        B.info("Funcionalidade do Delivery em desenvolvimento");
      }
    },
    {
      id: "sangria",
      icon: TrendingDown,
      label: "Sangria",
      color: "red",
      onClick: (e) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowSangriaModal(true);
      }
    },
    {
      id: "suprimento",
      icon: TrendingUp,
      label: "Suprimento",
      color: "green",
      onClick: (e) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowSuprimentoModal(true);
      }
    },
    {
      id: "pagamentos",
      icon: CreditCard,
      label: "Pagamentos",
      color: "blue",
      onClick: (e) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowPagamentosModal(true);
      }
    },
    {
      id: "fiados",
      icon: Clock,
      label: "Fiados",
      color: "yellow",
      onClick: (e) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowFiadosModal(true);
      }
    },
    {
      id: "movimentos",
      icon: ArrowUpDown,
      label: "Movimentos",
      color: "purple",
      onClick: async (e) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        try {
          if (!isFullscreen) {
            await enterFullscreen();
            console.log("Fullscreen ativado para modal de movimentos");
          }
        } catch (error) {
          console.log("Erro ao ativar fullscreen para modal de movimentos:", error);
        }
        setShowMovimentosModal(true);
        loadVendas();
        loadContadorNfcePendentes();
      }
    }
  ];
  const getFilteredMenuItems = () => {
    return allMenuPDVItems.filter((item) => {
      if (item.id === "comandas") {
        return (pdvConfig == null ? void 0 : pdvConfig.comandas) === true;
      }
      if (item.id === "mesas") {
        return (pdvConfig == null ? void 0 : pdvConfig.mesas) === true;
      }
      if (item.id === "delivery") {
        return (pdvConfig == null ? void 0 : pdvConfig.delivery) === true;
      }
      if (item.id === "cardapio-digital") {
        return (pdvConfig == null ? void 0 : pdvConfig.cardapio_digital) === true;
      }
      if (item.id === "whatsapp") {
        return (pdvConfig == null ? void 0 : pdvConfig.delivery_chat_ia) === true;
      }
      if (item.id === "fiados") {
        return (pdvConfig == null ? void 0 : pdvConfig.fiado) === true;
      }
      if (["sangria", "suprimento", "pagamentos"].includes(item.id)) {
        return (pdvConfig == null ? void 0 : pdvConfig.controla_caixa) === true;
      }
      return true;
    });
  };
  const menuPDVItems = getFilteredMenuItems();
  const getColorClasses = (color2) => {
    const colorMap = {
      primary: "hover:text-primary-400 hover:bg-primary-500/10",
      red: "hover:text-red-400 hover:bg-red-500/10",
      green: "hover:text-green-400 hover:bg-green-500/10",
      blue: "hover:text-blue-400 hover:bg-blue-500/10",
      yellow: "hover:text-yellow-400 hover:bg-yellow-500/10",
      purple: "hover:text-purple-400 hover:bg-purple-500/10"
    };
    return colorMap[color2] || colorMap.primary;
  };
  const calcularItensVisiveis = () => {
    if (typeof window === "undefined") return 9;
    const larguraTela = window.innerWidth;
    const larguraBotaoNavegacao = 40;
    const larguraMinimaBotao = 120;
    const larguraAreaPrincipal = carrinho.length > 0 ? larguraTela * 0.67 : larguraTela;
    const larguraDisponivel = larguraAreaPrincipal - (menuStartIndex > 0 || menuStartIndex + visibleMenuItems < menuPDVItems.length ? larguraBotaoNavegacao * 2 : 0);
    const itensPossiveis = Math.floor(larguraDisponivel / larguraMinimaBotao);
    return Math.max(1, Math.min(itensPossiveis, menuPDVItems.length));
  };
  const navegarMenuAnterior = () => {
    setMenuStartIndex(Math.max(0, menuStartIndex - 1));
  };
  const navegarMenuProximo = () => {
    const maxIndex = Math.max(0, menuPDVItems.length - visibleMenuItems);
    setMenuStartIndex(Math.min(maxIndex, menuStartIndex + 1));
  };
  reactExports.useEffect(() => {
    const handleResize = () => {
      const novosItensVisiveis = calcularItensVisiveis();
      setVisibleMenuItems(novosItensVisiveis);
      const maxIndex = Math.max(0, menuPDVItems.length - novosItensVisiveis);
      if (menuStartIndex > maxIndex) {
        setMenuStartIndex(maxIndex);
      }
    };
    handleResize();
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, [menuStartIndex, menuPDVItems.length, carrinho.length]);
  reactExports.useEffect(() => {
    aplicarFiltrosPedidos();
  }, [pedidos, searchPedidos, statusFilterPedidos]);
  reactExports.useEffect(() => {
    const handlePdvConfigChange = (event) => {
      const { field, value, config } = event.detail;
      setPdvConfig(config);
      console.log(`Configuração PDV atualizada: ${field} = ${value}`);
    };
    const handlePedidoStatusChange = (event) => {
      const { pedidosIds, novoStatus, numeroVenda } = event.detail;
      console.log(`Status dos pedidos ${pedidosIds.join(", ")} atualizado para: ${novoStatus} (Venda: ${numeroVenda})`);
      setTimeout(() => {
        loadContadorPedidos();
        const modalElement = document.querySelector('[data-modal="pedidos"]');
        if (modalElement) {
          loadPedidos();
        }
      }, 1e3);
    };
    const handleVendaCancelada = (event) => {
      const {
        vendaId,
        numeroVenda,
        motivoCancelamento: motivoCancelamento2,
        canceladaEm,
        canceladaPorUsuarioId,
        nomeUsuarioCancelamento
      } = event.detail;
      setVendas(
        (prevVendas) => prevVendas.map(
          (venda) => venda.id === vendaId ? {
            ...venda,
            status_venda: "cancelada",
            cancelada_em: canceladaEm,
            motivo_cancelamento: motivoCancelamento2,
            cancelada_por_usuario_id: canceladaPorUsuarioId,
            usuario_cancelamento: { nome: nomeUsuarioCancelamento }
          } : venda
        )
      );
    };
    window.addEventListener("pdvConfigChanged", handlePdvConfigChange);
    window.addEventListener("pedidoStatusChanged", handlePedidoStatusChange);
    window.addEventListener("vendaCancelada", handleVendaCancelada);
    return () => {
      window.removeEventListener("pdvConfigChanged", handlePdvConfigChange);
      window.removeEventListener("pedidoStatusChanged", handlePedidoStatusChange);
      window.removeEventListener("vendaCancelada", handleVendaCancelada);
    };
  }, []);
  reactExports.useEffect(() => {
    const timer = setInterval(() => {
      setCurrentDateTime(/* @__PURE__ */ new Date());
    }, 1e3);
    return () => clearInterval(timer);
  }, []);
  reactExports.useEffect(() => {
    if (showMovimentosModal) {
      const timeoutId2 = setTimeout(() => {
        loadVendas();
      }, 300);
      return () => clearTimeout(timeoutId2);
    }
  }, [filtroStatus, filtroNfce, filtroDataInicio, filtroDataFim, filtroNumeroVenda, filtroNumeroPedido, showMovimentosModal]);
  const [codigoBarrasBuffer, setCodigoBarrasBuffer] = reactExports.useState("");
  const [timeoutId, setTimeoutId] = reactExports.useState(null);
  reactExports.useEffect(() => {
    const handleKeyPress = (event) => {
      if (event.key.startsWith("F") && event.key.length <= 3) {
        const fNumber = parseInt(event.key.substring(1));
        if (fNumber >= 1 && fNumber <= 9) {
          event.preventDefault();
          const menuIndex = fNumber - 1;
          if (menuPDVItems[menuIndex]) {
            menuPDVItems[menuIndex].onClick();
          }
          return;
        }
      }
      if (event.key === "Escape" && showAreaProdutos) {
        event.preventDefault();
        setShowAreaProdutos(false);
        return;
      }
      if (!(pdvConfig == null ? void 0 : pdvConfig.venda_codigo_barras)) return;
      const target = event.target;
      if (target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.contentEditable === "true" || target.closest('[contenteditable="true"]')) {
        return;
      }
      if (!/^\d$/.test(event.key)) {
        if (event.key === "Enter" && codigoBarrasBuffer.length > 0) {
          processarCodigoBarras(codigoBarrasBuffer);
          setCodigoBarrasBuffer("");
          if (timeoutId) {
            clearTimeout(timeoutId);
            setTimeoutId(null);
          }
        }
        return;
      }
      const novoBuffer = codigoBarrasBuffer + event.key;
      setCodigoBarrasBuffer(novoBuffer);
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      const novoTimeoutId = setTimeout(() => {
        setCodigoBarrasBuffer("");
        setTimeoutId(null);
      }, 2e3);
      setTimeoutId(novoTimeoutId);
      event.preventDefault();
    };
    document.addEventListener("keydown", handleKeyPress);
    return () => {
      document.removeEventListener("keydown", handleKeyPress);
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, [pdvConfig == null ? void 0 : pdvConfig.venda_codigo_barras, codigoBarrasBuffer, timeoutId, showAreaProdutos, menuPDVItems]);
  const processarCodigoBarras = (codigo) => {
    const produto = produtos.find((p2) => p2.codigo_barras === codigo);
    if (produto) {
      adicionarAoCarrinho(produto);
      B.success(`${produto.nome} adicionado ao carrinho!`);
    } else {
      const produtoPorCodigo = produtos.find((p2) => p2.codigo === codigo);
      if (produtoPorCodigo) {
        adicionarAoCarrinho(produtoPorCodigo);
        B.success(`${produtoPorCodigo.nome} adicionado ao carrinho!`);
      } else {
        B.error(`Produto não encontrado para o código: ${codigo}`);
      }
    }
  };
  const loadContadorPedidos = async () => {
    await withSessionCheck(async () => {
      try {
        const { data: userData2 } = await supabase.auth.getUser();
        if (!userData2.user) return;
        const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
        if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
        const contador = await contarPedidosPendentes(usuarioData.empresa_id);
        setContadorPedidosPendentes(contador);
      } catch (error) {
        console.error("Erro ao carregar contador de pedidos:", error);
      }
    });
  };
  const loadContadorNfcePendentes = async () => {
    await withSessionCheck(async () => {
      try {
        const { data: userData2 } = await supabase.auth.getUser();
        if (!userData2.user) return;
        const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
        if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
        const { count, error } = await supabase.from("pdv").select("*", { count: "exact", head: true }).eq("empresa_id", usuarioData.empresa_id).eq("status_fiscal", "pendente").eq("tentativa_nfce", true);
        if (error) {
          console.error("Erro ao contar NFC-e pendentes:", error);
          return;
        }
        setContadorNfcePendentes(count || 0);
      } catch (error) {
        console.error("Erro ao carregar contador de NFC-e pendentes:", error);
      }
    });
  };
  reactExports.useEffect(() => {
    let subscription = null;
    let pollingInterval = null;
    const setupRealtimeSubscription = async () => {
      try {
        const { data: userData2 } = await supabase.auth.getUser();
        if (!userData2.user) return;
        const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
        if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
        subscription = supabase.channel(`pedidos-realtime-${usuarioData.empresa_id}`).on(
          "postgres_changes",
          {
            event: "INSERT",
            schema: "public",
            table: "pedidos",
            filter: `empresa_id=eq.${usuarioData.empresa_id}`
          },
          (payload) => {
            loadContadorPedidos();
          }
        ).on(
          "postgres_changes",
          {
            event: "UPDATE",
            schema: "public",
            table: "pedidos",
            filter: `empresa_id=eq.${usuarioData.empresa_id}`
          },
          (payload) => {
            loadContadorPedidos();
          }
        ).on(
          "postgres_changes",
          {
            event: "DELETE",
            schema: "public",
            table: "pedidos",
            filter: `empresa_id=eq.${usuarioData.empresa_id}`
          },
          (payload) => {
            loadContadorPedidos();
          }
        ).subscribe((status) => {
          if (status === "CHANNEL_ERROR") {
            setupPolling();
          }
        });
      } catch (error) {
        setupPolling();
      }
    };
    const setupPolling = () => {
      pollingInterval = setInterval(() => {
        loadContadorPedidos();
        loadContadorNfcePendentes();
      }, 8e3);
    };
    setupRealtimeSubscription();
    setupPolling();
    return () => {
      if (subscription) {
        subscription.unsubscribe();
      }
      if (pollingInterval) {
        clearInterval(pollingInterval);
      }
    };
  }, []);
  const checkEmpresaAndUpdateCounter = async (empresaId) => {
    await withSessionCheck(async () => {
      try {
        const { data: userData2 } = await supabase.auth.getUser();
        if (!userData2.user) return;
        const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
        if ((usuarioData == null ? void 0 : usuarioData.empresa_id) === empresaId) {
          const contador = await contarPedidosPendentes(empresaId);
          setContadorPedidosPendentes(contador);
        }
      } catch (error) {
        console.error("Erro ao verificar empresa e atualizar contador:", error);
      }
    });
  };
  const loadData = async () => {
    await withSessionCheck(async () => {
      try {
        setIsLoading(true);
        await Promise.all([
          loadProdutos(),
          loadGrupos(),
          loadClientes(),
          loadEstoque(),
          loadPdvConfig(),
          loadFormasPagamento()
        ]);
      } catch (error) {
        console.error("Erro ao carregar dados:", error);
        B.error("Erro ao carregar dados do PDV");
      } finally {
        setIsLoading(false);
      }
    });
  };
  const loadProdutos = async () => {
    const { data: userData2 } = await supabase.auth.getUser();
    if (!userData2.user) return;
    const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
    if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
    const { data, error } = await supabase.from("produtos").select(`
        id,
        nome,
        preco,
        codigo,
        codigo_barras,
        descricao,
        promocao,
        tipo_desconto,
        valor_desconto,
        desconto_quantidade,
        quantidade_minima,
        tipo_desconto_quantidade,
        valor_desconto_quantidade,
        percentual_desconto_quantidade,
        unidade_medida_id,
        grupo_id,
        estoque_inicial,
        ncm,
        cfop,
        cst_icms,
        cst_pis,
        cst_cofins,
        grupo:grupos(nome),
        unidade_medida:unidade_medida_id (
          id,
          sigla,
          nome
        ),
        produto_fotos(url, principal)
      `).eq("empresa_id", usuarioData.empresa_id).eq("ativo", true).eq("deletado", false).order("nome");
    if (error) throw error;
    setProdutos(data || []);
  };
  const loadGrupos = async () => {
    const { data: userData2 } = await supabase.auth.getUser();
    if (!userData2.user) return;
    const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
    if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
    const { data, error } = await supabase.from("grupos").select("*").eq("empresa_id", usuarioData.empresa_id).order("nome");
    if (error) throw error;
    setGrupos(data || []);
  };
  const loadClientes = async () => {
    const { data: userData2 } = await supabase.auth.getUser();
    if (!userData2.user) return;
    const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
    if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
    const { data, error } = await supabase.from("clientes").select("id, nome, telefone").eq("empresa_id", usuarioData.empresa_id).order("nome").limit(50);
    if (error) throw error;
    setClientes(data || []);
  };
  const loadEstoque = async () => {
    const { data: userData2 } = await supabase.auth.getUser();
    if (!userData2.user) return;
    const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
    if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
    try {
      const { data: estoqueData, error } = await supabase.from("produto_estoque").select("produto_id, quantidade, tipo_movimento").eq("empresa_id", usuarioData.empresa_id);
      if (error) {
        console.error("Erro ao carregar estoque:", error);
        return;
      }
      const estoqueProcessado = {};
      if (estoqueData) {
        estoqueData.forEach((item) => {
          if (!estoqueProcessado[item.produto_id]) {
            estoqueProcessado[item.produto_id] = { total: 0, naoFaturado: 0 };
          }
          if (item.tipo_movimento === "entrada") {
            estoqueProcessado[item.produto_id].total += item.quantidade;
          } else if (item.tipo_movimento === "saida") {
            estoqueProcessado[item.produto_id].total -= item.quantidade;
          }
        });
      }
      setProdutosEstoque(estoqueProcessado);
    } catch (error) {
      console.error("Erro ao processar estoque:", error);
    }
  };
  const loadPdvConfig = async () => {
    const { data: userData2 } = await supabase.auth.getUser();
    if (!userData2.user) return;
    const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
    if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
    const { data, error } = await supabase.from("pdv_config").select("*").eq("empresa_id", usuarioData.empresa_id).single();
    if (error && error.code !== "PGRST116") {
      console.error("Erro ao carregar configurações do PDV:", error);
      return;
    }
    if (!data) {
      setPdvConfig({
        seleciona_clientes: false,
        comandas: false,
        mesas: false,
        vendedor: false,
        exibe_foto_item: false,
        controla_caixa: false,
        agrupa_itens: false,
        delivery: false,
        cardapio_digital: false,
        delivery_chat_ia: false,
        baixa_estoque_pdv: false,
        venda_codigo_barras: false,
        forca_venda_fiscal_cartao: false,
        observacao_no_item: false,
        desconto_no_item: false,
        editar_nome_produto: false,
        fiado: false,
        ocultar_finalizar_com_impressao: false,
        ocultar_finalizar_sem_impressao: false,
        ocultar_nfce_com_impressao: false,
        ocultar_nfce_sem_impressao: false,
        ocultar_nfce_producao: false,
        ocultar_producao: false
      });
    } else {
      setPdvConfig(data);
    }
  };
  const loadFormasPagamento = async () => {
    try {
      const { data, error } = await supabase.from("formas_pag_pdv").select("*").eq("ativo", true).order("ordem");
      if (error) throw error;
      setFormasPagamento(data || []);
      if (data && data.length > 0) {
        setFormaPagamentoSelecionada(data[0].id);
      }
    } catch (error) {
      console.error("Erro ao carregar formas de pagamento:", error);
    }
  };
  const loadPedidos = async () => {
    const { data: userData2 } = await supabase.auth.getUser();
    if (!userData2.user) return;
    const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
    if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
    try {
      const { data, error } = await supabase.from("pedidos").select(`
          id,
          numero,
          created_at,
          status,
          valor_total,
          empresa_id,
          desconto_prazo_id,
          desconto_valor_id,
          usuario_id,
          cliente:clientes(id, nome, telefone),
          pedidos_itens(
            id,
            quantidade,
            valor_unitario,
            valor_total,
            produto:produtos(
              id,
              nome,
              preco,
              codigo,
              codigo_barras,
              descricao,
              promocao,
              tipo_desconto,
              valor_desconto,
              unidade_medida_id,
              grupo_id,
              ncm,
              cfop,
              cst_icms,
              cst_pis,
              cst_cofins,
              produto_fotos(url, principal)
            )
          )
        `).eq("empresa_id", usuarioData.empresa_id).eq("deletado", false).order("created_at", { ascending: false }).limit(100);
      if (error) throw error;
      let pedidosData = data || [];
      if (pedidosData.length > 0) {
        const usuarioIds = [...new Set(pedidosData.filter((p2) => p2.usuario_id).map((p2) => p2.usuario_id))];
        if (usuarioIds.length > 0) {
          const { data: usuariosData } = await supabase.from("usuarios").select("id, nome").in("id", usuarioIds);
          if (usuariosData) {
            const usuariosMap = usuariosData.reduce((acc, user) => {
              acc[user.id] = user.nome;
              return acc;
            }, {});
            pedidosData = pedidosData.map((pedido) => ({
              ...pedido,
              usuario: pedido.usuario_id ? {
                id: pedido.usuario_id,
                nome: usuariosMap[pedido.usuario_id] || "Usuário não encontrado"
              } : null
            }));
          }
        }
      }
      setPedidos(pedidosData);
      aplicarFiltrosPedidos(pedidosData);
      const pedidosPendentes = pedidosData.filter((p2) => p2.status === "pendente");
      setContadorPedidosPendentes(pedidosPendentes.length);
    } catch (error) {
      console.error("Erro ao carregar pedidos:", error);
      B.error("Erro ao carregar pedidos");
    }
  };
  const aplicarFiltrosPedidos = (pedidosParaFiltrar = pedidos) => {
    let filtered = [...pedidosParaFiltrar];
    if (statusFilterPedidos !== "todos") {
      filtered = filtered.filter((pedido) => pedido.status === statusFilterPedidos);
    }
    if (searchPedidos.trim()) {
      const termoLower = searchPedidos.toLowerCase();
      filtered = filtered.filter(
        (pedido) => {
          var _a3, _b3, _c2, _d2;
          return pedido.numero.toString().includes(termoLower) || ((_b3 = (_a3 = pedido.cliente) == null ? void 0 : _a3.nome) == null ? void 0 : _b3.toLowerCase().includes(termoLower)) || ((_d2 = (_c2 = pedido.cliente) == null ? void 0 : _c2.telefone) == null ? void 0 : _d2.includes(searchPedidos));
        }
      );
    }
    setPedidosFiltrados(filtered);
  };
  const filtrarPedidos = (termo) => {
    setSearchPedidos(termo);
    aplicarFiltrosPedidos();
  };
  const filtrarPedidosPorStatus = (status) => {
    setStatusFilterPedidos(status);
    aplicarFiltrosPedidos();
  };
  const importarPedidoParaCarrinho = (pedido) => {
    if (!pedido.pedidos_itens || pedido.pedidos_itens.length === 0) {
      B.error("Este pedido não possui itens");
      setShowPedidosModal(false);
      return;
    }
    const jaImportado = pedidosImportados.some((p2) => p2.id === pedido.id);
    if (jaImportado) {
      B.warning(`Pedido #${pedido.numero} já foi importado!`);
      setShowPedidosModal(false);
      return;
    }
    const clienteAtual = clienteSelecionado;
    const clienteDoPedido = pedido.cliente;
    if (clienteAtual && clienteDoPedido && clienteAtual.id !== clienteDoPedido.id) {
      B.error("Não é possível importar pedido de cliente diferente. Limpe o carrinho primeiro.");
      setShowPedidosModal(false);
      return;
    }
    const temItensDeOutrosPedidos = carrinho.some((item) => !item.pedido_origem_id);
    if (temItensDeOutrosPedidos) {
      setPedidoParaImportar(pedido);
      setShowConfirmImportarPedido(true);
    } else {
      executarImportacaoPedido(pedido);
    }
  };
  const loadVendas = async () => {
    try {
      setLoadingVendas(true);
      const { data: userData2, error: userError } = await supabase.auth.getUser();
      if (userError || !userData2.user) {
        throw new Error("Usuário não autenticado");
      }
      const { data: usuarioData, error: usuarioError } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
      if (usuarioError || !usuarioData) {
        throw new Error("Dados do usuário não encontrados");
      }
      let query = supabase.from("pdv").select(`
          id,
          numero_venda,
          data_venda,
          created_at,
          status_venda,
          valor_total,
          valor_subtotal,
          valor_desconto,
          valor_acrescimo,
          nome_cliente,
          documento_cliente,
          telefone_cliente,
          pedidos_importados,
          cancelada_em,
          motivo_cancelamento,
          cancelada_por_usuario_id,
          protocolo_cancelamento,
          empresa_id,
          usuario_id,
          tentativa_nfce,
          status_fiscal,
          erro_fiscal,
          modelo_documento,
          numero_documento,
          chave_nfe,
          protocolo_nfe
        `).eq("empresa_id", usuarioData.empresa_id).or("modelo_documento.is.null,modelo_documento.eq.65");
      if (filtroStatus === "canceladas") {
        query = query.eq("status_venda", "cancelada");
      } else if (filtroStatus === "finalizadas") {
        query = query.eq("status_venda", "finalizada");
      } else if (filtroStatus === "pedidos") {
        query = query.not("pedidos_importados", "is", null);
      }
      if (filtroNfce === "pendentes") {
        query = query.eq("modelo_documento", 65).eq("status_fiscal", "pendente");
      } else if (filtroNfce === "autorizadas") {
        query = query.eq("modelo_documento", 65).eq("status_fiscal", "autorizada");
      } else if (filtroNfce === "canceladas") {
        query = query.eq("modelo_documento", 65).eq("status_fiscal", "cancelada");
      }
      if (filtroDataInicio) {
        const dataInicio = new Date(filtroDataInicio);
        query = query.gte("created_at", dataInicio.toISOString());
      }
      if (filtroDataFim) {
        const dataFim = new Date(filtroDataFim);
        query = query.lte("created_at", dataFim.toISOString());
      }
      if (filtroNumeroVenda) {
        query = query.ilike("numero_venda", `%${filtroNumeroVenda}%`);
      }
      const { data, error } = await query.order("created_at", { ascending: false }).limit(100);
      if (error) {
        throw error;
      }
      const vendasData = data || [];
      const usuariosIds = [
        .../* @__PURE__ */ new Set([
          ...vendasData.map((v2) => v2.usuario_id).filter(Boolean),
          ...vendasData.map((v2) => v2.cancelada_por_usuario_id).filter(Boolean)
        ])
      ];
      let usuariosMap = /* @__PURE__ */ new Map();
      if (usuariosIds.length > 0) {
        const { data: usuariosData } = await supabase.from("usuarios").select("id, nome").in("id", usuariosIds);
        if (usuariosData) {
          usuariosData.forEach((usuario) => {
            usuariosMap.set(usuario.id, usuario);
          });
        }
      }
      const vendasProcessadas = await Promise.all(vendasData.map(async (venda) => {
        const temPedidosImportados = venda.pedidos_importados && Array.isArray(venda.pedidos_importados) && venda.pedidos_importados.length > 0;
        const valorTotal = Number(venda.valor_total) || 0;
        const valorDesconto2 = Number(venda.valor_desconto) || 0;
        const valorAcrescimo = Number(venda.valor_acrescimo) || 0;
        const valorFinal = valorTotal - valorDesconto2 + valorAcrescimo;
        let pedidosOrigem = null;
        if (temPedidosImportados) {
          try {
            const { data: pedidosData, error: pedidosError } = await supabase.from("pedidos").select("id, numero").in("id", venda.pedidos_importados);
            if (!pedidosError && pedidosData) {
              pedidosOrigem = pedidosData.map((p2) => p2.numero);
            }
          } catch (error2) {
            console.error("Erro ao buscar números dos pedidos:", error2);
            pedidosOrigem = venda.pedidos_importados;
          }
        }
        return {
          ...venda,
          numero_venda: venda.numero_venda || venda.id,
          // Usar numero_venda ou ID como fallback
          created_at: new Date(venda.data_venda || venda.created_at).toLocaleString("pt-BR"),
          data_venda_formatada: new Date(venda.data_venda || venda.created_at).toLocaleString("pt-BR"),
          cancelada_em_formatada: venda.cancelada_em ? new Date(venda.cancelada_em).toLocaleString("pt-BR") : null,
          valor_total: valorTotal,
          valor_final: valorFinal,
          desconto_total: valorDesconto2,
          acrescimo_total: valorAcrescimo,
          // Se tem pedidos importados, mostrar números dos pedidos
          pedidos_origem: pedidosOrigem,
          vendas_pdv_itens: [],
          // Será carregado separadamente se necessário
          vendas_pdv_pagamentos: [],
          // Será carregado separadamente se necessário
          cliente: venda.nome_cliente ? {
            nome: venda.nome_cliente,
            documento: venda.documento_cliente,
            telefone: venda.telefone_cliente
          } : null,
          // Dados do usuário que fez a venda
          usuario_venda: venda.usuario_id ? usuariosMap.get(venda.usuario_id) : null,
          // Dados do usuário que cancelou (se aplicável)
          usuario_cancelamento: venda.cancelada_por_usuario_id ? usuariosMap.get(venda.cancelada_por_usuario_id) : null,
          status: venda.status_venda || "finalizada"
        };
      }));
      let vendasFiltradas = vendasProcessadas;
      if (filtroNumeroPedido) {
        vendasFiltradas = vendasProcessadas.filter((venda) => {
          if (venda.pedidos_origem && Array.isArray(venda.pedidos_origem)) {
            return venda.pedidos_origem.some(
              (numeroPedido) => numeroPedido.toString().toLowerCase().includes(filtroNumeroPedido.toLowerCase())
            );
          }
          return false;
        });
      }
      setVendas(vendasFiltradas);
    } catch (error) {
      console.error("Erro ao carregar vendas:", error);
      B.error(`Erro ao carregar vendas: ${error.message}`);
    } finally {
      setLoadingVendas(false);
    }
  };
  const cancelarVenda = async () => {
    if (!vendaParaCancelar) {
      B.error("Venda não selecionada");
      return;
    }
    if (motivoCancelamento.trim().length < 15) {
      B.error("Motivo do cancelamento deve ter pelo menos 15 caracteres");
      return;
    }
    vendaParaCancelar.modelo_documento === 65 && vendaParaCancelar.status_fiscal === "autorizada" && vendaParaCancelar.chave_nfe && vendaParaCancelar.protocolo_nfe;
    try {
      const { data: userData2 } = await supabase.auth.getUser();
      if (!userData2.user) {
        B.error("Usuário não autenticado");
        return;
      }
      const isNFCeAutorizada2 = vendaParaCancelar.modelo_documento === 65 && vendaParaCancelar.status_fiscal === "autorizada" && vendaParaCancelar.chave_nfe && vendaParaCancelar.protocolo_nfe;
      if (isNFCeAutorizada2) {
        console.log("🚫 FRONTEND: Iniciando cancelamento fiscal da NFC-e");
        const dataEmissao = new Date(vendaParaCancelar.data_emissao_nfe || vendaParaCancelar.finalizada_em);
        const agora = /* @__PURE__ */ new Date();
        const diferencaMinutos = (agora.getTime() - dataEmissao.getTime()) / (1e3 * 60);
        if (diferencaMinutos > 15) {
          B.error("NFC-e não pode ser cancelada fiscalmente. Prazo de 15 minutos expirado.");
          return;
        }
        const cancelamentoData = {
          chave_nfe: vendaParaCancelar.chave_nfe,
          motivo: motivoCancelamento.trim(),
          protocolo_nfe: vendaParaCancelar.protocolo_nfe
        };
        console.log("📡 FRONTEND: Enviando cancelamento fiscal:", cancelamentoData);
        const cancelamentoResponse = await fetch("http://31.97.166.71/backend/public/cancelar-nfce.php", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(cancelamentoData)
        });
        if (!cancelamentoResponse.ok) {
          const errorText = await cancelamentoResponse.text();
          console.error("❌ FRONTEND: Erro no cancelamento fiscal:", errorText);
          throw new Error("Erro no cancelamento fiscal da NFC-e");
        }
        const cancelamentoResult = await cancelamentoResponse.json();
        if (!cancelamentoResult.success) {
          throw new Error(cancelamentoResult.error || "Erro no cancelamento fiscal");
        }
        console.log("✅ FRONTEND: NFC-e cancelada fiscalmente com sucesso");
        B.success("NFC-e cancelada fiscalmente com sucesso!");
      } else {
        console.log("📋 FRONTEND: Cancelamento apenas no sistema (não fiscal)");
        const { error } = await supabase.from("pdv").update({
          status_venda: "cancelada",
          cancelada_em: (/* @__PURE__ */ new Date()).toISOString(),
          motivo_cancelamento: motivoCancelamento.trim(),
          cancelada_por_usuario_id: userData2.user.id
        }).eq("id", vendaParaCancelar.id);
        if (error) {
          throw error;
        }
        B.success(`Venda #${vendaParaCancelar.numero_venda} cancelada com sucesso`);
      }
      const { data: usuarioCancelamento } = await supabase.from("usuarios").select("nome").eq("id", userData2.user.id).single();
      const vendaCanceladaEvent = new CustomEvent("vendaCancelada", {
        detail: {
          vendaId: vendaParaCancelar.id,
          numeroVenda: vendaParaCancelar.numero_venda,
          motivoCancelamento: motivoCancelamento.trim(),
          canceladaEm: (/* @__PURE__ */ new Date()).toISOString(),
          canceladaPorUsuarioId: userData2.user.id,
          nomeUsuarioCancelamento: (usuarioCancelamento == null ? void 0 : usuarioCancelamento.nome) || "Usuário não identificado"
        }
      });
      window.dispatchEvent(vendaCanceladaEvent);
      setShowCancelamentoModal(false);
      setVendaParaCancelar(null);
      setMotivoCancelamento("");
    } catch (error) {
      console.error("Erro ao cancelar venda:", error);
      B.error(`Erro ao cancelar venda: ${error.message}`);
    }
  };
  const carregarItensVenda = async (vendaId) => {
    try {
      setLoadingItensVenda(true);
      const { data: userData2 } = await supabase.auth.getUser();
      if (!userData2.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const { data: empresaData } = await supabase.from("empresas").select("regime_tributario").eq("id", usuarioData.empresa_id).single();
      const regimeTributario = (empresaData == null ? void 0 : empresaData.regime_tributario) || 1;
      const { data: itensData, error: itensError } = await supabase.from("pdv_itens").select(`
          id,
          produto_id,
          codigo_produto,
          nome_produto,
          descricao_produto,
          quantidade,
          valor_unitario,
          valor_subtotal,
          valor_total_item,
          tem_desconto,
          tipo_desconto,
          percentual_desconto,
          valor_desconto_aplicado,
          origem_item,
          pedido_origem_numero,
          observacao_item,
          cfop,
          cst_icms,
          csosn_icms,
          produto:produtos(
            id,
            codigo,
            codigo_barras,
            nome,
            ncm,
            unidade_medida_id,
            unidade_medida:unidade_medida(
              id,
              nome,
              sigla
            )
          ),
          pdv_itens_adicionais (
            id,
            nome_adicional,
            quantidade,
            valor_unitario,
            valor_total
          )
        `).eq("pdv_id", vendaId).order("created_at", { ascending: true });
      if (itensError) {
        throw itensError;
      }
      const itensProcessados = (itensData || []).map((item, index2) => {
        var _a3;
        return {
          ...item,
          sequencia: index2 + 1,
          cfop_editavel: item.cfop || "5102",
          cst_editavel: item.cst_icms || "00",
          csosn_editavel: item.csosn_icms || "102",
          ncm_editavel: ((_a3 = item.produto) == null ? void 0 : _a3.ncm) || "00000000",
          regime_tributario: regimeTributario,
          editando_cfop: false,
          editando_cst: false,
          editando_csosn: false,
          editando_ncm: false
        };
      });
      setItensVenda(itensProcessados);
    } catch (error) {
      console.error("Erro ao carregar itens da venda:", error);
      B.error("Erro ao carregar itens da venda");
    } finally {
      setLoadingItensVenda(false);
    }
  };
  const carregarItensParaEdicaoNfce = async (vendaId) => {
    try {
      setLoadingItensNfce(true);
      const { data: userData2 } = await supabase.auth.getUser();
      if (!userData2.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const { data: empresaData } = await supabase.from("empresas").select("regime_tributario").eq("id", usuarioData.empresa_id).single();
      const regimeTributario = (empresaData == null ? void 0 : empresaData.regime_tributario) || 3;
      const { data: itensData, error: itensError } = await supabase.from("pdv_itens").select(`
          id,
          produto_id,
          codigo_produto,
          nome_produto,
          quantidade,
          valor_unitario,
          valor_total_item,
          cfop,
          cst_icms,
          csosn_icms,
          produto:produtos(
            id,
            codigo,
            codigo_barras,
            nome,
            ncm,
            unidade_medida_id
          )
        `).eq("pdv_id", vendaId).order("created_at", { ascending: true });
      if (itensError) {
        console.error("Erro na query Supabase:", itensError);
        throw itensError;
      }
      const itensProcessados = (itensData || []).map((item, index2) => {
        var _a3;
        return {
          ...item,
          sequencia: index2 + 1,
          cfop_editavel: item.cfop || "5102",
          // CFOP da venda ou padrão
          cst_editavel: item.cst_icms || "00",
          // CST da venda ou padrão
          csosn_editavel: item.csosn_icms || "102",
          // CSOSN da venda ou padrão
          ncm_editavel: ((_a3 = item.produto) == null ? void 0 : _a3.ncm) || "00000000",
          // ✅ NOVO: NCM editável
          regime_tributario: regimeTributario,
          // ✅ NOVO: Regime real da empresa
          editando_cfop: false,
          editando_cst: false,
          editando_csosn: false,
          editando_ncm: false
          // ✅ NOVO: Estado de edição do NCM
        };
      });
      console.log("✅ Itens carregados para edição NFC-e:", itensProcessados);
      console.log("✅ Regime tributário da empresa:", regimeTributario);
      setItensNfceEdicao(itensProcessados);
    } catch (error) {
      console.error("Erro ao carregar itens para edição NFC-e:", error);
      B.error(`Erro ao carregar itens: ${error.message || "Erro desconhecido"}`);
    } finally {
      setLoadingItensNfce(false);
    }
  };
  const habilitarEdicaoCampo = (itemIndex, campo) => {
    setItensNfceEdicao((prev) => prev.map(
      (item, index2) => index2 === itemIndex ? { ...item, [`editando_${campo}`]: true } : item
    ));
  };
  const salvarEdicaoCampo = (itemIndex, campo, novoValor2) => {
    setItensNfceEdicao((prev) => prev.map(
      (item, index2) => index2 === itemIndex ? {
        ...item,
        [`${campo}_editavel`]: novoValor2,
        [`editando_${campo}`]: false
      } : item
    ));
  };
  const cancelarEdicaoCampo = (itemIndex, campo) => {
    setItensNfceEdicao((prev) => prev.map(
      (item, index2) => index2 === itemIndex ? { ...item, [`editando_${campo}`]: false } : item
    ));
  };
  const habilitarEdicaoCampoModalItens = (itemIndex, campo) => {
    setItensVenda((prev) => prev.map(
      (item, index2) => index2 === itemIndex ? { ...item, [`editando_${campo}`]: true } : item
    ));
  };
  const salvarEdicaoCampoModalItens = (itemIndex, campo, novoValor2) => {
    setItensVenda((prev) => prev.map(
      (item, index2) => index2 === itemIndex ? {
        ...item,
        [`${campo}_editavel`]: novoValor2,
        [`editando_${campo}`]: false
      } : item
    ));
  };
  const cancelarEdicaoCampoModalItens = (itemIndex, campo) => {
    setItensVenda((prev) => prev.map(
      (item, index2) => index2 === itemIndex ? { ...item, [`editando_${campo}`]: false } : item
    ));
  };
  const reprocessarNfce = async () => {
    if (!vendaParaEditarNfce) return;
    try {
      setReprocessandoNfce(true);
      console.log("💾 FRONTEND: Salvando modificações dos itens...");
      console.log("📋 FRONTEND: Itens para salvar:", itensNfceEdicao.map((item) => ({
        id: item.id,
        produto: item.nome_produto,
        cfop: item.cfop_editavel,
        cst: item.cst_editavel,
        csosn: item.csosn_editavel
      })));
      for (const item of itensNfceEdicao) {
        const { error: updateError2 } = await supabase.from("pdv_itens").update({
          cfop: item.cfop_editavel,
          cst_icms: item.regime_tributario === 1 ? null : item.cst_editavel,
          // ✅ CORREÇÃO: 1 = Simples Nacional (CSOSN)
          csosn_icms: item.regime_tributario === 1 ? item.csosn_editavel : null
          // ✅ CORREÇÃO: 1 = Simples Nacional (CSOSN)
        }).eq("id", item.id);
        if (updateError2) {
          console.error("Erro ao atualizar item:", updateError2);
          throw new Error(`Erro ao salvar modificações do item ${item.nome_produto}`);
        }
      }
      if (vendaParaEditarNfce.numero_documento) {
        console.log("💾 FRONTEND: Salvando número da NFC-e editado...");
        const { error: updateNumeroError } = await supabase.from("pdv").update({
          numero_documento: vendaParaEditarNfce.numero_documento
        }).eq("id", vendaParaEditarNfce.id);
        if (updateNumeroError) {
          console.error("Erro ao atualizar número da NFC-e:", updateNumeroError);
          throw new Error("Erro ao salvar número da NFC-e editado");
        }
      }
      console.log("✅ FRONTEND: Modificações salvas, iniciando retransmissão...");
      B.success("Modificações salvas! Iniciando retransmissão...");
      const itensAtualizados = itensNfceEdicao.map((item) => {
        var _a3, _b3, _c2, _d2;
        return {
          codigo: ((_a3 = item.produto) == null ? void 0 : _a3.codigo) || item.codigo_produto,
          descricao: item.nome_produto,
          quantidade: item.quantidade,
          valor_unitario: item.valor_unitario,
          unidade: ((_c2 = (_b3 = item.produto) == null ? void 0 : _b3.unidade_medida) == null ? void 0 : _c2.sigla) || "UN",
          ncm: item.ncm_editavel || "00000000",
          // ✅ CORREÇÃO: Usar NCM editável
          cfop: item.cfop_editavel,
          cst_icms: item.regime_tributario === 1 ? void 0 : item.cst_editavel,
          // ✅ CORREÇÃO: 1 = Simples Nacional (CSOSN)
          csosn_icms: item.regime_tributario === 1 ? item.csosn_editavel : void 0,
          // ✅ CORREÇÃO: 1 = Simples Nacional (CSOSN)
          codigo_barras: (_d2 = item.produto) == null ? void 0 : _d2.codigo_barras
        };
      });
      const { data: userData2 } = await supabase.auth.getUser();
      if (!userData2.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id, serie_nfce").eq("id", userData2.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const serieUsuario = usuarioData.serie_nfce || 1;
      const { data: empresaData } = await supabase.from("empresas").select("*").eq("id", usuarioData.empresa_id).single();
      const { data: nfeConfigData } = await supabase.from("nfe_config").select("ambiente").eq("empresa_id", usuarioData.empresa_id).single();
      if (!empresaData || !nfeConfigData) {
        throw new Error("Dados da empresa ou configuração NFe não encontrados");
      }
      const nfceData = {
        empresa: {
          razao_social: empresaData.razao_social,
          cnpj: empresaData.documento,
          nome_fantasia: empresaData.nome_fantasia,
          inscricao_estadual: empresaData.inscricao_estadual,
          regime_tributario: empresaData.regime_tributario || 1,
          uf: empresaData.estado,
          codigo_municipio: parseInt(empresaData.codigo_municipio) || 3524402,
          codigo_uf: getCodigoUF(empresaData.estado),
          endereco: {
            logradouro: empresaData.endereco,
            numero: empresaData.numero,
            bairro: empresaData.bairro,
            cidade: empresaData.cidade,
            cep: empresaData.cep
          },
          csc_homologacao: empresaData.csc_homologacao,
          csc_id_homologacao: empresaData.csc_id_homologacao,
          csc_producao: empresaData.csc_producao,
          csc_id_producao: empresaData.csc_id_producao
        },
        ambiente: nfeConfigData.ambiente,
        identificacao: {
          numero: vendaParaEditarNfce.numero_documento || await gerarProximoNumeroNFCe(usuarioData.empresa_id),
          // ✅ Usa número editado
          serie: serieUsuario,
          // ✅ NOVO: Série individual do usuário logado
          codigo_numerico: Math.floor(Math.random() * 99999999).toString().padStart(8, "0"),
          natureza_operacao: "Venda de mercadoria"
        },
        // ✅ CORREÇÃO: Incluir documento mesmo se nome não estiver preenchido
        destinatario: (() => {
          if (vendaParaEditarNfce.documento_cliente && vendaParaEditarNfce.nome_cliente) {
            return {
              documento: vendaParaEditarNfce.documento_cliente,
              nome: vendaParaEditarNfce.nome_cliente
            };
          }
          if (vendaParaEditarNfce.documento_cliente) {
            return {
              documento: vendaParaEditarNfce.documento_cliente,
              nome: "CONSUMIDOR"
            };
          }
          return {};
        })(),
        produtos: itensAtualizados
      };
      const response = await fetch("/backend/public/emitir-nfce.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          empresa_id: usuarioData.empresa_id,
          nfce_data: nfceData
        })
      });
      if (!response.ok) {
        const errorResponse = await response.text();
        try {
          const errorJson = JSON.parse(errorResponse);
          throw new Error(errorJson.error || "Erro no reprocessamento");
        } catch {
          throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
        }
      }
      const result = await response.json();
      if (!result.success) {
        throw new Error(result.error || "Erro no reprocessamento");
      }
      const { error: updateError } = await supabase.from("pdv").update({
        modelo_documento: 65,
        numero_documento: result.data.numero,
        // ✅ Confirmar número retornado pelo SEFAZ
        serie_documento: result.data.serie,
        chave_nfe: result.data.chave,
        protocolo_nfe: result.data.protocolo,
        status_fiscal: "autorizada",
        erro_fiscal: null,
        data_emissao_nfe: result.data.data_autorizacao
      }).eq("id", vendaParaEditarNfce.id);
      if (updateError) {
        console.error("Erro ao atualizar venda:", updateError);
      }
      B.success("NFC-e reprocessada e autorizada com sucesso!");
      setShowEditarNfceModal(false);
      loadVendas();
      loadContadorNfcePendentes();
    } catch (error) {
      console.error("Erro no reprocessamento:", error);
      B.error(`Erro no reprocessamento: ${error.message}`);
    } finally {
      setReprocessandoNfce(false);
    }
  };
  const getCodigoUF = (estado) => {
    const codigosUF = {
      "AC": 12,
      "AL": 17,
      "AP": 16,
      "AM": 13,
      "BA": 29,
      "CE": 23,
      "DF": 53,
      "ES": 32,
      "GO": 52,
      "MA": 21,
      "MT": 51,
      "MS": 50,
      "MG": 31,
      "PA": 15,
      "PB": 25,
      "PR": 41,
      "PE": 26,
      "PI": 22,
      "RJ": 33,
      "RN": 24,
      "RS": 43,
      "RO": 11,
      "RR": 14,
      "SC": 42,
      "SP": 35,
      "SE": 28,
      "TO": 27
    };
    return codigosUF[estado] || 35;
  };
  const gerarLinkPedido = async (pedido) => {
    try {
      console.log("Pedido recebido:", pedido);
      console.log("empresa_id:", pedido.empresa_id);
      let empresaId = pedido.empresa_id;
      if (!empresaId) {
        const { data: userData2 } = await supabase.auth.getUser();
        if (!userData2.user) throw new Error("Usuário não autenticado");
        const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
        if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa do usuário não encontrada");
        empresaId = usuarioData.empresa_id;
      }
      const { data: empresaData, error: empresaError } = await supabase.from("empresas").select("documento").eq("id", empresaId).single();
      if (empresaError || !empresaData || !empresaData.documento) {
        throw new Error("Não foi possível obter o CNPJ da empresa");
      }
      const cnpjLimpo = empresaData.documento.replace(/[^\d]/g, "");
      const codigoPedido = `${cnpjLimpo}${pedido.numero}`;
      const baseUrl = window.location.origin;
      const url = `${baseUrl}/pedido/${codigoPedido}`;
      return url;
    } catch (error) {
      console.error("Erro ao gerar link do pedido:", error);
      B.error(`Erro ao gerar link: ${error.message}`);
      return null;
    }
  };
  const executarImportacaoPedido = (pedido) => {
    const novoPedidoImportado = {
      numero: pedido.numero,
      id: pedido.id,
      cliente: pedido.cliente,
      created_at: pedido.created_at,
      valor_total: pedido.valor_total,
      desconto_prazo_id: pedido.desconto_prazo_id,
      desconto_valor_id: pedido.desconto_valor_id,
      usuario: pedido.usuario
      // Incluir informações do vendedor
    };
    setPedidosImportados((prev) => [...prev, novoPedidoImportado]);
    if (pedido.cliente && !clienteSelecionado) {
      setClienteSelecionado({
        id: pedido.cliente.id,
        nome: pedido.cliente.nome,
        telefone: pedido.cliente.telefone
      });
      carregarDescontosCliente(pedido.cliente.id);
    } else if (pedido.cliente && clienteSelecionado && clienteSelecionado.id === pedido.cliente.id) {
      if (descontosCliente.prazo.length === 0 && descontosCliente.valor.length === 0) {
        carregarDescontosCliente(pedido.cliente.id);
      }
    } else if (pedido.cliente) {
      carregarDescontosCliente(pedido.cliente.id);
    }
    if (pedido.desconto_prazo_id) {
      setDescontoPrazoSelecionado(pedido.desconto_prazo_id);
    }
    const novosItens = pedido.pedidos_itens.map((item) => {
      var _a3, _b3;
      const temDesconto = ((_a3 = item.produto) == null ? void 0 : _a3.preco) && item.valor_unitario < item.produto.preco;
      const precoOriginal = ((_b3 = item.produto) == null ? void 0 : _b3.preco) || item.valor_unitario;
      let descontoInfo = void 0;
      if (temDesconto) {
        const valorDesconto2 = precoOriginal - item.valor_unitario;
        const percentualDesconto = valorDesconto2 / precoOriginal * 100;
        descontoInfo = {
          tipo: "valor",
          valor: valorDesconto2,
          valorDesconto: valorDesconto2,
          precoOriginal,
          precoComDesconto: item.valor_unitario,
          percentualDesconto,
          origemPedido: true
          // Marcar que veio de um pedido importado
        };
      }
      return {
        id: `${item.produto.id}-${Date.now()}-${Math.random()}`,
        produto: item.produto,
        quantidade: item.quantidade,
        subtotal: item.quantidade * item.valor_unitario,
        pedido_origem_id: pedido.id,
        // Marcar de qual pedido veio
        pedido_origem_numero: pedido.numero,
        desconto: descontoInfo
        // Preservar informações de desconto
      };
    });
    if (pdvConfig == null ? void 0 : pdvConfig.agrupa_itens) {
      const carrinhoAtualizado = [...carrinho];
      novosItens.forEach((novoItem) => {
        const itemExistente = carrinhoAtualizado.find(
          (item) => item.produto.id === novoItem.produto.id && item.subtotal / item.quantidade === novoItem.subtotal / novoItem.quantidade
          // Mesmo preço unitário
        );
        if (itemExistente) {
          itemExistente.quantidade += novoItem.quantidade;
          itemExistente.subtotal = itemExistente.quantidade * (itemExistente.subtotal / (itemExistente.quantidade - novoItem.quantidade));
          if (!itemExistente.pedidos_origem) {
            itemExistente.pedidos_origem = [];
          }
          itemExistente.pedidos_origem.push({
            id: pedido.id,
            numero: pedido.numero,
            quantidade: novoItem.quantidade
          });
        } else {
          carrinhoAtualizado.push(novoItem);
        }
      });
      setCarrinho(carrinhoAtualizado);
    } else {
      setCarrinho((prev) => [...prev, ...novosItens]);
    }
    setShowPedidosModal(false);
    B.success(`Pedido #${pedido.numero} importado com sucesso! ${novosItens.length} produto(s) adicionado(s).`);
  };
  const produtosFiltrados = produtos.filter((produto) => {
    let termoBusca = searchTerm;
    if (searchTerm.includes("*")) {
      const partes = searchTerm.split("*");
      if (partes.length >= 2) {
        termoBusca = partes.slice(1).join("*").trim();
      }
    }
    const matchesSearch = produto.nome.toLowerCase().includes(termoBusca.toLowerCase()) || produto.codigo.toLowerCase().includes(termoBusca.toLowerCase()) || produto.codigo_barras && produto.codigo_barras.toLowerCase().includes(termoBusca.toLowerCase());
    const matchesGrupo = grupoSelecionado === "todos" || produto.grupo_id === grupoSelecionado;
    return matchesSearch && matchesGrupo;
  });
  const verificarOpcoesAdicionais = async (produtoId) => {
    try {
      const { data, error } = await supabase.from("produtos_opcoes_adicionais").select("id").eq("produto_id", produtoId).eq("deletado", false).limit(1);
      if (error) {
        console.error("Erro ao verificar opções adicionais:", error);
        return false;
      }
      return data && data.length > 0;
    } catch (error) {
      console.error("Erro ao verificar opções adicionais:", error);
      return false;
    }
  };
  const adicionarAoCarrinho = async (produto, quantidadePersonalizada) => {
    let quantidadeParaAdicionar = 1;
    if (searchTerm.includes("*")) {
      const [qtdStr] = searchTerm.split("*");
      const qtdParsed = parseInt(qtdStr.trim());
      if (!isNaN(qtdParsed) && qtdParsed > 0) {
        quantidadeParaAdicionar = qtdParsed;
        setSearchTerm("");
      }
    }
    const temOpcoesAdicionais = await verificarOpcoesAdicionais(produto.id);
    const precoFinal = calcularPrecoFinal(produto);
    const novoItem = {
      id: `${produto.id}-${Date.now()}-${Math.random()}`,
      // ID único
      produto,
      quantidade: quantidadeParaAdicionar,
      subtotal: precoFinal * quantidadeParaAdicionar,
      temOpcoesAdicionais
    };
    setCarrinho((prev) => {
      const deveAgrupar = (pdvConfig == null ? void 0 : pdvConfig.agrupa_itens) === true;
      if (deveAgrupar) {
        const itemExistente = prev.find((item) => item.produto.id === produto.id);
        if (itemExistente) {
          return prev.map(
            (item) => item.produto.id === produto.id ? {
              ...item,
              quantidade: item.quantidade + quantidadeParaAdicionar,
              subtotal: (item.quantidade + quantidadeParaAdicionar) * precoFinal,
              temOpcoesAdicionais
            } : item
          );
        } else {
          return [...prev, novoItem];
        }
      } else {
        return [...prev, novoItem];
      }
    });
  };
  const confirmarRemocao = (itemId) => {
    setItemParaRemover(itemId);
    setShowConfirmModal(true);
  };
  const cancelarRemocao = () => {
    setShowConfirmModal(false);
    setItemParaRemover(null);
  };
  const removerDoCarrinho = (itemId) => {
    const itemRemovido = carrinho.find((item) => item.id === itemId);
    const novoCarrinho = carrinho.filter((item) => item.id !== itemId);
    setCarrinho(novoCarrinho);
    if (novoCarrinho.length === 0) {
      setClienteSelecionado(null);
      setPedidosImportados([]);
      setDescontoPrazoSelecionado(null);
      setDescontosCliente({ prazo: [], valor: [] });
      setCpfCnpjNota("");
      setClienteEncontrado(null);
      setTipoDocumento("cpf");
      setErroValidacao("");
      limparPagamentosParciaisSilencioso();
    }
    setShowConfirmModal(false);
    setItemParaRemover(null);
    if (itemRemovido) {
      B.success(`${itemRemovido.produto.nome} removido com sucesso!`);
    }
  };
  const alterarQuantidade = (itemId, novaQuantidade) => {
    if (novaQuantidade <= 0) {
      confirmarRemocao(itemId);
      return;
    }
    setCarrinho(
      (prev) => prev.map((item) => {
        if (item.id === itemId) {
          const precoUnitario = item.desconto ? item.desconto.precoComDesconto : calcularPrecoFinal(item.produto);
          return {
            ...item,
            quantidade: novaQuantidade,
            subtotal: novaQuantidade * precoUnitario
          };
        }
        return item;
      })
    );
  };
  const abrirModalDesconto = (itemId) => {
    setItemParaDesconto(itemId);
    setTipoDesconto("percentual");
    setValorDesconto("");
    setNovoValor(0);
    setShowDescontoModal(true);
  };
  const calcularNovoValor = (item, tipo, valor) => {
    const precoBase = calcularPrecoFinal(item.produto);
    if (tipo === "percentual") {
      const desconto = precoBase * valor / 100;
      return Math.max(0, precoBase - desconto);
    } else {
      return Math.max(0, precoBase - valor);
    }
  };
  const aplicarDesconto = () => {
    if (!itemParaDesconto || !valorDesconto) return;
    const valor = parseFloat(valorDesconto.replace(",", "."));
    if (isNaN(valor) || valor < 0) {
      B.error("Valor de desconto inválido");
      return;
    }
    setCarrinho(
      (prev) => prev.map((item) => {
        if (item.id === itemParaDesconto) {
          const precoBase = calcularPrecoFinal(item.produto);
          const precoComDesconto = calcularNovoValor(item, tipoDesconto, valor);
          if (tipoDesconto === "percentual" && valor > 100) {
            B.error("Desconto não pode ser maior que 100%");
            return item;
          }
          if (tipoDesconto === "valor" && valor > precoBase) {
            B.error("Desconto não pode ser maior que o preço do produto");
            return item;
          }
          const valorDesconto2 = precoBase - precoComDesconto;
          return {
            ...item,
            desconto: {
              tipo: tipoDesconto,
              valor,
              valorDesconto: valorDesconto2,
              precoOriginal: precoBase,
              // Usar o preço final como "original" para o desconto
              precoComDesconto,
              percentualDesconto: tipoDesconto === "percentual" ? valor : void 0
            },
            subtotal: item.quantidade * precoComDesconto
          };
        }
        return item;
      })
    );
    setShowDescontoModal(false);
    setItemParaDesconto(null);
    setValorDesconto("");
    B.success("Desconto aplicado com sucesso!");
  };
  const removerDesconto = (itemId) => {
    setCarrinho(
      (prev) => prev.map((item) => {
        if (item.id === itemId && item.desconto) {
          const precoFinal = calcularPrecoFinal(item.produto);
          return {
            ...item,
            desconto: void 0,
            subtotal: item.quantidade * precoFinal
          };
        }
        return item;
      })
    );
    B.success("Desconto removido com sucesso!");
  };
  const abrirOpcoesAdicionais = (item) => {
    setProdutoParaAdicionais(item.produto);
    setItemCarrinhoParaAdicionais(item.id);
    setShowOpcoesAdicionaisModal(true);
  };
  const iniciarEdicaoNome = (itemId, nomeAtual) => {
    setItemEditandoNome(itemId);
    setNomeEditando(nomeAtual);
  };
  const finalizarEdicaoNome = (itemId) => {
    if (nomeEditando.trim() === "") {
      cancelarEdicaoNome();
      return;
    }
    setCarrinho((prev) => prev.map(
      (item) => item.id === itemId ? { ...item, produto: { ...item.produto, nome: nomeEditando.trim() } } : item
    ));
    setItemEditandoNome(null);
    setNomeEditando("");
  };
  const cancelarEdicaoNome = () => {
    setItemEditandoNome(null);
    setNomeEditando("");
  };
  const abrirModalObservacao = (itemId) => {
    const item = carrinho.find((i) => i.id === itemId);
    setItemParaObservacao(itemId);
    setObservacaoTexto((item == null ? void 0 : item.observacao) || "");
    setShowObservacaoModal(true);
  };
  const salvarObservacao = () => {
    if (!itemParaObservacao) return;
    setCarrinho((prev) => prev.map(
      (item) => item.id === itemParaObservacao ? { ...item, observacao: observacaoTexto.trim() || void 0 } : item
    ));
    setShowObservacaoModal(false);
    setItemParaObservacao(null);
    setObservacaoTexto("");
    B.success("Observação salva com sucesso!");
  };
  const iniciarEdicaoObservacao = (itemId, observacaoAtual) => {
    setItemEditandoObservacao(itemId);
    setObservacaoEditando(observacaoAtual);
  };
  const finalizarEdicaoObservacao = (itemId) => {
    if (observacaoEditando.trim() === "") {
      setCarrinho((prev) => prev.map(
        (item) => item.id === itemId ? { ...item, observacao: void 0 } : item
      ));
    } else {
      setCarrinho((prev) => prev.map(
        (item) => item.id === itemId ? { ...item, observacao: observacaoEditando.trim() } : item
      ));
    }
    setItemEditandoObservacao(null);
    setObservacaoEditando("");
  };
  const cancelarEdicaoObservacao = () => {
    setItemEditandoObservacao(null);
    setObservacaoEditando("");
  };
  const confirmarOpcoesAdicionais = (itensSelecionados) => {
    if (!itemCarrinhoParaAdicionais) return;
    const adicionaisFormatados = itensSelecionados.map((itemSelecionado) => ({
      id: itemSelecionado.item.id,
      nome: itemSelecionado.item.nome,
      preco: itemSelecionado.item.preco,
      quantidade: itemSelecionado.quantidade
    }));
    setCarrinho(
      (prev) => prev.map((item) => {
        if (item.id === itemCarrinhoParaAdicionais) {
          const adicionaisExistentes = item.adicionais || [];
          const todosAdicionais = [...adicionaisExistentes, ...adicionaisFormatados];
          const valorAdicionais = todosAdicionais.reduce(
            (total, adicional) => total + adicional.preco * adicional.quantidade,
            0
          );
          const precoUnitario = item.desconto ? item.desconto.precoComDesconto : calcularPrecoFinal(item.produto);
          const novoSubtotal = precoUnitario * item.quantidade + valorAdicionais;
          return {
            ...item,
            adicionais: todosAdicionais,
            subtotal: novoSubtotal
          };
        }
        return item;
      })
    );
    const totalAdicionais = adicionaisFormatados.length;
    if (totalAdicionais > 0) {
      B.success(`${totalAdicionais} ${totalAdicionais === 1 ? "adicional selecionado" : "adicionais selecionados"}!`);
    }
    setShowOpcoesAdicionaisModal(false);
    setProdutoParaAdicionais(null);
    setItemCarrinhoParaAdicionais(null);
  };
  const removerAdicional = (itemId, adicionalIndex) => {
    setCarrinho(
      (prev) => prev.map((item) => {
        var _a3;
        if (item.id === itemId) {
          const novosAdicionais = ((_a3 = item.adicionais) == null ? void 0 : _a3.filter((_2, index2) => index2 !== adicionalIndex)) || [];
          const valorAdicionais = novosAdicionais.reduce(
            (total, adicional) => total + adicional.preco * adicional.quantidade,
            0
          );
          const precoBase = item.desconto ? item.desconto.precoComDesconto : calcularPrecoFinal(item.produto);
          const novoSubtotal = precoBase * item.quantidade + valorAdicionais;
          return {
            ...item,
            adicionais: novosAdicionais,
            subtotal: novoSubtotal
          };
        }
        return item;
      })
    );
    B.success("Adicional removido com sucesso!");
  };
  const alterarQuantidadeAdicional = (itemId, adicionalIndex, novaQuantidade) => {
    if (novaQuantidade <= 0) {
      removerAdicional(itemId, adicionalIndex);
      return;
    }
    setCarrinho(
      (prev) => prev.map((item) => {
        var _a3;
        if (item.id === itemId) {
          const novosAdicionais = ((_a3 = item.adicionais) == null ? void 0 : _a3.map(
            (adicional, index2) => index2 === adicionalIndex ? { ...adicional, quantidade: novaQuantidade } : adicional
          )) || [];
          const valorAdicionais = novosAdicionais.reduce(
            (total, adicional) => total + adicional.preco * adicional.quantidade,
            0
          );
          const precoBase = item.desconto ? item.desconto.precoComDesconto : calcularPrecoFinal(item.produto);
          const novoSubtotal = precoBase * item.quantidade + valorAdicionais;
          return {
            ...item,
            adicionais: novosAdicionais,
            subtotal: novoSubtotal
          };
        }
        return item;
      })
    );
  };
  const calcularTotal = () => {
    return carrinho.reduce((total, item) => total + item.subtotal, 0);
  };
  const calcularTotalComDesconto = () => {
    let subtotal = calcularTotal();
    if (descontoPrazoSelecionado) {
      const descontoPrazo = descontosCliente.prazo.find((d2) => d2.id === descontoPrazoSelecionado);
      if (descontoPrazo) {
        const valorDescontoPrazo = subtotal * descontoPrazo.percentual / 100;
        if (descontoPrazo.tipo === "desconto") {
          subtotal = subtotal - valorDescontoPrazo;
        } else {
          subtotal = subtotal + valorDescontoPrazo;
        }
      }
    }
    const descontoValor = calcularDescontoPorValor(subtotal);
    if (!descontoValor) return subtotal;
    return descontoValor.tipo === "desconto" ? subtotal - descontoValor.valor : subtotal + descontoValor.valor;
  };
  const formatCurrency = (value) => {
    return formatarPreco(value);
  };
  const formatCurrencyWithoutSymbol = (value) => {
    return value.toLocaleString("pt-BR", {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });
  };
  const formatDateTime = (date) => {
    const diasSemana = ["dom", "seg", "ter", "qua", "qui", "sex", "sáb"];
    const diaSemana = diasSemana[date.getDay()];
    const dia = date.getDate().toString().padStart(2, "0");
    const mes = (date.getMonth() + 1).toString().padStart(2, "0");
    const ano = date.getFullYear().toString().slice(-2);
    const horas = date.getHours().toString().padStart(2, "0");
    const minutos = date.getMinutes().toString().padStart(2, "0");
    const segundos = date.getSeconds().toString().padStart(2, "0");
    return `${diaSemana}, ${dia}/${mes}/${ano} ${horas}:${minutos}:${segundos}`;
  };
  const formatarEstoque = (quantidade, produto) => {
    var _a3;
    if (((_a3 = produto.unidade_medida) == null ? void 0 : _a3.sigla) === "KG") {
      return quantidade.toFixed(3).replace(".", ",");
    }
    return quantidade.toString();
  };
  const calcularPrecoFinal = (produto) => {
    if (!produto.promocao || !produto.valor_desconto) return produto.preco;
    if (produto.tipo_desconto === "percentual") {
      return produto.preco * (1 - produto.valor_desconto / 100);
    } else {
      return produto.preco - produto.valor_desconto;
    }
  };
  const getFotoPrincipal = (produto) => {
    if (!produto.produto_fotos || produto.produto_fotos.length === 0) return null;
    const fotoPrincipal = produto.produto_fotos.find((foto) => foto.principal);
    return fotoPrincipal || produto.produto_fotos[0];
  };
  const abrirGaleria = (produto, event) => {
    event.stopPropagation();
    if (produto.produto_fotos && produto.produto_fotos.length > 0) {
      const fotoPrincipalIndex = produto.produto_fotos.findIndex((foto) => foto.principal);
      const indexInicial = fotoPrincipalIndex !== -1 ? fotoPrincipalIndex : 0;
      setProdutoSelecionadoGaleria(produto);
      setFotoAtualIndex(indexInicial);
      setShowGaleriaModal(true);
    }
  };
  const proximaFoto = () => {
    if (produtoSelecionadoGaleria == null ? void 0 : produtoSelecionadoGaleria.produto_fotos) {
      setFotoAtualIndex(
        (prev) => prev < produtoSelecionadoGaleria.produto_fotos.length - 1 ? prev + 1 : 0
      );
    }
  };
  const fotoAnterior = () => {
    if (produtoSelecionadoGaleria == null ? void 0 : produtoSelecionadoGaleria.produto_fotos) {
      setFotoAtualIndex(
        (prev) => prev > 0 ? prev - 1 : produtoSelecionadoGaleria.produto_fotos.length - 1
      );
    }
  };
  const fecharGaleria = () => {
    setShowGaleriaModal(false);
    setProdutoSelecionadoGaleria(null);
    setFotoAtualIndex(0);
  };
  const limparCarrinho = () => {
    var _a3;
    const totalItens = carrinho.reduce((total, item) => total + item.quantidade, 0);
    const totalProdutos = carrinho.length;
    const primeiroProduto = (_a3 = carrinho[0]) == null ? void 0 : _a3.produto.nome;
    setCarrinho([]);
    setClienteSelecionado(null);
    setPedidosImportados([]);
    setDescontoPrazoSelecionado(null);
    setDescontosCliente({ prazo: [], valor: [] });
    setCpfCnpjNota("");
    setClienteEncontrado(null);
    setTipoDocumento("cpf");
    setErroValidacao("");
    limparPagamentosParciaisSilencioso();
    setShowLimparCarrinhoModal(false);
    if (totalProdutos > 0) {
      if (totalProdutos === 1) {
        B.success(`${primeiroProduto} removido com sucesso!`);
      } else {
        B.success(`${totalProdutos} produtos removidos com sucesso! (${totalItens} itens)`);
      }
    }
  };
  const formatCurrencyInput = (value) => {
    const numbers2 = value.replace(/\D/g, "");
    const amount = parseFloat(numbers2) / 100;
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(amount);
  };
  const parseCurrencyToNumber = (value) => {
    return parseFloat(value.replace(/[R$\s.]/g, "").replace(",", ".")) || 0;
  };
  const calcularTotalPago = () => {
    return pagamentosParciais.reduce((total, pagamento) => total + pagamento.valor, 0);
  };
  const calcularRestante = () => {
    const restante = calcularTotalComDesconto() - calcularTotalPago();
    return restante < 0 ? 0 : restante;
  };
  const adicionarPagamentoParcial = (formaId, formaNome, tipo) => {
    let valor = parseCurrencyToNumber(valorParcial);
    const totalVenda = calcularTotalComDesconto();
    const totalPago = calcularTotalPago();
    const restanteReal = totalVenda - totalPago;
    if (valor <= 0) {
      valor = restanteReal > 0 ? restanteReal : 0;
      if (valor > 0) {
        B.info(`Valor automático: ${formatCurrency(valor)}`);
      }
    }
    if (valor <= 0) {
      B.error("Não há valor restante para pagamento");
      return;
    }
    if (tipo === "eletronico" && valor > restanteReal) {
      B.error("O valor parcial não pode ultrapassar o valor restante para formas eletrônicas");
      return;
    }
    if (tipo === "dinheiro" && valor > restanteReal) {
      const troco = valor - restanteReal;
      setTrocoCalculado(troco);
      B.success(`Troco: ${formatCurrency(troco)}`);
    } else {
      setTrocoCalculado(0);
    }
    const pagamentoExistente = pagamentosParciais.find((p2) => p2.forma === formaId);
    if (pagamentoExistente) {
      setPagamentosParciais(
        (prev) => prev.map(
          (p2) => p2.forma === formaId ? { ...p2, valor: p2.valor + valor } : p2
        )
      );
      B.success(`${formaNome}: ${formatCurrency(valor)} adicionado (Total: ${formatCurrency(pagamentoExistente.valor + valor)})`);
    } else {
      const novoPagamento = {
        id: Date.now(),
        forma: formaId,
        valor,
        tipo
      };
      setPagamentosParciais((prev) => [...prev, novoPagamento]);
      B.success(`${formaNome}: ${formatCurrency(valor)} adicionado`);
    }
    setValorParcial("");
  };
  const confirmarRemocaoItem = (id2) => {
    setItemToRemove(id2);
    setShowConfirmRemoveItem(true);
  };
  const removerPagamentoParcial = (id2) => {
    setPagamentosParciais((prev) => prev.filter((p2) => p2.id !== id2));
    setTrocoCalculado(0);
    setShowConfirmRemoveItem(false);
    setItemToRemove(null);
    B.success("Pagamento removido");
  };
  const confirmarLimparTodos = () => {
    setShowConfirmRemoveAll(true);
  };
  const limparPagamentosParciais = () => {
    setPagamentosParciais([]);
    setTrocoCalculado(0);
    setValorParcial("");
    setShowConfirmRemoveAll(false);
    B.success("Todos os pagamentos removidos");
  };
  const limparPagamentosParciaisSilencioso = () => {
    setPagamentosParciais([]);
    setTrocoCalculado(0);
    setValorParcial("");
    setShowConfirmRemoveAll(false);
  };
  const verificarVendaNoBanco = async (vendaId, numeroVenda, totalItensEsperados, tipoControle) => {
    try {
      setEtapaProcessamento("Verificando venda no banco de dados...");
      await new Promise((resolve2) => setTimeout(resolve2, 1e3));
      const { data: vendaData, error: vendaError } = await supabase.from("pdv").select("id, numero_venda, status_venda, valor_total").eq("id", vendaId).single();
      if (vendaError || !vendaData) {
        console.error("Venda não encontrada no banco:", vendaError);
        return false;
      }
      setEtapaProcessamento("Verificando itens da venda...");
      const { data: itensData, error: itensError } = await supabase.from("pdv_itens").select("id, produto_id, quantidade").eq("pdv_id", vendaId);
      if (itensError) {
        console.error("Erro ao verificar itens:", itensError);
        return false;
      }
      const totalItensInseridos = (itensData == null ? void 0 : itensData.length) || 0;
      if (totalItensInseridos !== totalItensEsperados) {
        console.error(`Número de itens incorreto. Esperado: ${totalItensEsperados}, Inserido: ${totalItensInseridos}`);
        return false;
      }
      const { data: userData2 } = await supabase.auth.getUser();
      if (!userData2.user) return false;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return false;
      if (tipoControle === "pdv") {
        setEtapaProcessamento("Verificando baixa de estoque...");
        const produtosAgrupados = carrinho.reduce((acc, item) => {
          const produtoId = item.produto.id;
          if (!acc[produtoId]) {
            acc[produtoId] = {
              produto: item.produto,
              quantidadeTotal: 0
            };
          }
          acc[produtoId].quantidadeTotal += item.quantidade;
          return acc;
        }, {});
        for (const [produtoId, dadosProduto] of Object.entries(produtosAgrupados)) {
          console.log(`🔍 FRONTEND: Verificando movimentações de estoque para produto ${produtoId}, venda ${numeroVenda}`);
          const cincoMinutosAtras = new Date(Date.now() - 5 * 60 * 1e3).toISOString();
          console.log(`⏰ FRONTEND: Filtrando movimentações após: ${cincoMinutosAtras}`);
          const { data: movimentacaoEstoque, error: estoqueError } = await supabase.from("produto_estoque").select("id, tipo_movimento, quantidade, observacao, data_hora_movimento").eq("produto_id", produtoId).eq("tipo_movimento", "saida").ilike("observacao", `%Venda PDV #${numeroVenda}%`).gte("data_hora_movimento", cincoMinutosAtras).order("data_hora_movimento", { ascending: false });
          console.log(`📊 FRONTEND: Query executada - Produto: ${produtoId}, Venda: ${numeroVenda}`);
          console.log(`📊 FRONTEND: Movimentações encontradas (${(movimentacaoEstoque == null ? void 0 : movimentacaoEstoque.length) || 0}):`, movimentacaoEstoque);
          if (movimentacaoEstoque && movimentacaoEstoque.length > 0) {
            movimentacaoEstoque.forEach((mov, index2) => {
              console.log(`📋 FRONTEND: Movimentação ${index2 + 1}:`, {
                id: mov.id,
                quantidade: mov.quantidade,
                observacao: mov.observacao,
                data_hora: mov.data_hora_movimento
              });
            });
          }
          if (estoqueError) {
            console.error("Erro ao verificar movimentação de estoque:", estoqueError);
            return false;
          }
          if (!movimentacaoEstoque || movimentacaoEstoque.length === 0) {
            console.error(`❌ Movimentação de estoque não encontrada para produto ${dadosProduto.produto.nome} (ID: ${produtoId})`);
            console.error(`   Esperado: Saída de ${dadosProduto.quantidadeTotal} unidades com observação "Venda PDV #${numeroVenda}"`);
            return false;
          }
          const quantidadeMovimentada = movimentacaoEstoque.reduce((total, mov) => total + parseFloat(mov.quantidade), 0);
          if (quantidadeMovimentada !== dadosProduto.quantidadeTotal) {
            console.error(`❌ Quantidade incorreta na movimentação de estoque para produto ${dadosProduto.produto.nome}`);
            console.error(`   Esperado: ${dadosProduto.quantidadeTotal}, Encontrado: ${quantidadeMovimentada}`);
            console.error(`   Movimentações encontradas:`, movimentacaoEstoque);
            return false;
          }
          console.log(`✅ Estoque verificado para ${dadosProduto.produto.nome}: ${quantidadeMovimentada} unidades baixadas`);
        }
        console.log("✅ Baixa de estoque verificada com sucesso para todos os itens");
      }
      setEtapaProcessamento("Verificando opções adicionais...");
      const itensComAdicionais = carrinho.filter((item) => item.adicionais && item.adicionais.length > 0);
      if (itensComAdicionais.length > 0) {
        const { data: adicionaisData, error: adicionaisError } = await supabase.from("pdv_itens_adicionais").select("id").in("pdv_item_id", itensData.map((item) => item.id));
        if (adicionaisError) {
          console.error("Erro ao verificar adicionais:", adicionaisError);
          return false;
        }
        const totalAdicionaisEsperados = itensComAdicionais.reduce(
          (total, item) => {
            var _a3;
            return total + (((_a3 = item.adicionais) == null ? void 0 : _a3.length) || 0);
          },
          0
        );
        const totalAdicionaisInseridos = (adicionaisData == null ? void 0 : adicionaisData.length) || 0;
        if (totalAdicionaisInseridos !== totalAdicionaisEsperados) {
          console.error(`Número de adicionais incorreto. Esperado: ${totalAdicionaisEsperados}, Inserido: ${totalAdicionaisInseridos}`);
          return false;
        }
      }
      setEtapaProcessamento("Venda verificada com sucesso!");
      return true;
    } catch (error) {
      console.error("Erro na verificação da venda:", error);
      return false;
    }
  };
  const formatCpf = (value) => {
    const numbers2 = value.replace(/\D/g, "").slice(0, 11);
    return numbers2.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, "$1.$2.$3-$4");
  };
  const formatCnpj = (value) => {
    const numbers2 = value.replace(/\D/g, "").slice(0, 14);
    return numbers2.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, "$1.$2.$3/$4-$5");
  };
  const formatDocumento = (value) => {
    if (tipoDocumento === "cpf") {
      return formatCpf(value);
    } else {
      return formatCnpj(value);
    }
  };
  const validarCpf = (cpf) => {
    const numbers2 = cpf.replace(/\D/g, "");
    if (numbers2.length !== 11) return false;
    if (/^(\d)\1{10}$/.test(numbers2)) return false;
    let sum = 0;
    for (let i = 0; i < 9; i++) {
      sum += parseInt(numbers2[i]) * (10 - i);
    }
    let digit1 = 11 - sum % 11;
    if (digit1 >= 10) digit1 = 0;
    sum = 0;
    for (let i = 0; i < 10; i++) {
      sum += parseInt(numbers2[i]) * (11 - i);
    }
    let digit2 = 11 - sum % 11;
    if (digit2 >= 10) digit2 = 0;
    return parseInt(numbers2[9]) === digit1 && parseInt(numbers2[10]) === digit2;
  };
  const validarCnpj = (cnpj) => {
    const numbers2 = cnpj.replace(/\D/g, "");
    if (numbers2.length !== 14) return false;
    if (/^(\d)\1{13}$/.test(numbers2)) return false;
    const weights1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
    let sum = 0;
    for (let i = 0; i < 12; i++) {
      sum += parseInt(numbers2[i]) * weights1[i];
    }
    let digit1 = sum % 11;
    digit1 = digit1 < 2 ? 0 : 11 - digit1;
    const weights2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
    sum = 0;
    for (let i = 0; i < 13; i++) {
      sum += parseInt(numbers2[i]) * weights2[i];
    }
    let digit2 = sum % 11;
    digit2 = digit2 < 2 ? 0 : 11 - digit2;
    return parseInt(numbers2[12]) === digit1 && parseInt(numbers2[13]) === digit2;
  };
  const buscarClientePorDocumento = async (documento) => {
    const numbers2 = documento.replace(/\D/g, "");
    if (numbers2.length < 11) return;
    try {
      const { data: userData2 } = await supabase.auth.getUser();
      if (!userData2.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data, error } = await supabase.from("clientes").select("id, nome, telefone").eq("empresa_id", usuarioData.empresa_id).or(`cpf.eq.${numbers2},cnpj.eq.${numbers2}`).single();
      if (error && error.code !== "PGRST116") {
        console.error("Erro ao buscar cliente:", error);
        return;
      }
      if (data) {
        setClienteEncontrado(data);
      } else {
        setClienteEncontrado(null);
      }
    } catch (error) {
      console.error("Erro ao buscar cliente:", error);
    }
  };
  const handleCpfCnpjChange = (value) => {
    const formatted = formatDocumento(value);
    setCpfCnpjNota(formatted);
    const numbers2 = value.replace(/\D/g, "");
    const expectedLength = tipoDocumento === "cpf" ? 11 : 14;
    if (numbers2.length === expectedLength) {
      const isValid = tipoDocumento === "cpf" ? validarCpf(formatted) : validarCnpj(formatted);
      if (isValid) {
        buscarClientePorDocumento(formatted);
      } else {
        setClienteEncontrado(null);
      }
    } else {
      setClienteEncontrado(null);
    }
  };
  const handleTipoDocumentoChange = (tipo) => {
    setTipoDocumento(tipo);
    setCpfCnpjNota("");
    setClienteEncontrado(null);
    setErroValidacao("");
  };
  const validarDocumentoOnBlur = () => {
    if (!cpfCnpjNota.trim()) {
      setErroValidacao("");
      return;
    }
    const numbers2 = cpfCnpjNota.replace(/\D/g, "");
    const expectedLength = tipoDocumento === "cpf" ? 11 : 14;
    if (numbers2.length !== expectedLength) {
      setErroValidacao(`${tipoDocumento.toUpperCase()} deve ter ${expectedLength} dígitos`);
      return;
    }
    const isValid = tipoDocumento === "cpf" ? validarCpf(cpfCnpjNota) : validarCnpj(cpfCnpjNota);
    if (!isValid) {
      setErroValidacao(`${tipoDocumento.toUpperCase()} inválido`);
    } else {
      setErroValidacao("");
    }
  };
  const isDocumentoInvalido = () => {
    if (!cpfCnpjNota.trim()) return false;
    const numbers2 = cpfCnpjNota.replace(/\D/g, "");
    const expectedLength = tipoDocumento === "cpf" ? 11 : 14;
    if (numbers2.length !== expectedLength) return true;
    const isValid = tipoDocumento === "cpf" ? validarCpf(cpfCnpjNota) : validarCnpj(cpfCnpjNota);
    return !isValid;
  };
  const handleCpfCnpjModalItensChange = (value) => {
    const formatted = formatDocumento(value);
    setCpfCnpjModalItens(formatted);
    const numbers2 = value.replace(/\D/g, "");
    const expectedLength = tipoDocumentoModalItens === "cpf" ? 11 : 14;
    if (numbers2.length === expectedLength) {
      const isValid = tipoDocumentoModalItens === "cpf" ? validarCpf(formatted) : validarCnpj(formatted);
      if (!isValid) {
        setErroValidacaoModalItens(`${tipoDocumentoModalItens.toUpperCase()} inválido`);
      } else {
        setErroValidacaoModalItens("");
      }
    } else {
      setErroValidacaoModalItens("");
    }
  };
  const validarDocumentoModalItensOnBlur = () => {
    if (!cpfCnpjModalItens.trim()) {
      setErroValidacaoModalItens("");
      return;
    }
    const numbers2 = cpfCnpjModalItens.replace(/\D/g, "");
    const expectedLength = tipoDocumentoModalItens === "cpf" ? 11 : 14;
    if (numbers2.length !== expectedLength) {
      setErroValidacaoModalItens(`${tipoDocumentoModalItens.toUpperCase()} deve ter ${expectedLength} dígitos`);
      return;
    }
    const isValid = tipoDocumentoModalItens === "cpf" ? validarCpf(cpfCnpjModalItens) : validarCnpj(cpfCnpjModalItens);
    if (!isValid) {
      setErroValidacaoModalItens(`${tipoDocumentoModalItens.toUpperCase()} inválido`);
    } else {
      setErroValidacaoModalItens("");
    }
  };
  const isDocumentoModalItensInvalido = () => {
    if (!cpfCnpjModalItens.trim()) return false;
    const numbers2 = cpfCnpjModalItens.replace(/\D/g, "");
    const expectedLength = tipoDocumentoModalItens === "cpf" ? 11 : 14;
    if (numbers2.length !== expectedLength) return true;
    const isValid = tipoDocumentoModalItens === "cpf" ? validarCpf(cpfCnpjModalItens) : validarCnpj(cpfCnpjModalItens);
    return !isValid;
  };
  const emitirNfceModalItens = async () => {
    if (!vendaParaExibirItens) return;
    if (cpfCnpjModalItens.trim() && isDocumentoModalItensInvalido()) {
      B.error("CPF/CNPJ inválido");
      return;
    }
    try {
      setEmitindoNfceModalItens(true);
      const { data: userData2 } = await supabase.auth.getUser();
      if (!userData2.user) {
        B.error("Usuário não autenticado");
        return;
      }
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id, serie_nfce").eq("id", userData2.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        B.error("Empresa não encontrada");
        return;
      }
      const { data: empresaData } = await supabase.from("empresas").select("*").eq("id", usuarioData.empresa_id).single();
      if (!empresaData) {
        B.error("Dados da empresa não encontrados");
        return;
      }
      const { data: nfeConfigData } = await supabase.from("nfe_config").select("ambiente").eq("empresa_id", usuarioData.empresa_id).single();
      if (!nfeConfigData) {
        B.error("Configuração NFe não encontrada");
        return;
      }
      if (!itensVenda || itensVenda.length === 0) {
        throw new Error("Nenhum item encontrado na venda. Reabra o modal.");
      }
      console.log("✅ Usando itens já carregados com dados fiscais:", itensVenda);
      const proximoNumero = await gerarProximoNumeroNFCe(usuarioData.empresa_id);
      const serieUsuario = usuarioData.serie_nfce || 1;
      const getCodigoUF2 = (estado) => {
        const codigosUF = {
          "AC": 12,
          "AL": 17,
          "AP": 16,
          "AM": 13,
          "BA": 29,
          "CE": 23,
          "DF": 53,
          "ES": 32,
          "GO": 52,
          "MA": 21,
          "MT": 51,
          "MS": 50,
          "MG": 31,
          "PA": 15,
          "PB": 25,
          "PR": 41,
          "PE": 26,
          "PI": 22,
          "RJ": 33,
          "RN": 24,
          "RS": 43,
          "RO": 11,
          "RR": 14,
          "SC": 42,
          "SP": 35,
          "SE": 28,
          "TO": 27
        };
        return codigosUF[estado] || 35;
      };
      const nfceData = {
        empresa: {
          razao_social: empresaData.razao_social,
          cnpj: empresaData.documento,
          nome_fantasia: empresaData.nome_fantasia,
          inscricao_estadual: empresaData.inscricao_estadual,
          regime_tributario: empresaData.regime_tributario || 1,
          uf: empresaData.estado,
          codigo_municipio: parseInt(empresaData.codigo_municipio) || 3524402,
          codigo_uf: getCodigoUF2(empresaData.estado),
          endereco: {
            logradouro: empresaData.endereco,
            numero: empresaData.numero,
            bairro: empresaData.bairro,
            cidade: empresaData.cidade,
            cep: empresaData.cep
          },
          csc_homologacao: empresaData.csc_homologacao,
          csc_id_homologacao: empresaData.csc_id_homologacao,
          csc_producao: empresaData.csc_producao,
          csc_id_producao: empresaData.csc_id_producao
        },
        ambiente: nfeConfigData.ambiente,
        identificacao: {
          numero: proximoNumero,
          serie: serieUsuario,
          codigo_numerico: Math.floor(1e7 + Math.random() * 9e7).toString(),
          natureza_operacao: "Venda de mercadoria"
        },
        destinatario: cpfCnpjModalItens.trim() ? {
          documento: cpfCnpjModalItens.replace(/\D/g, ""),
          nome: "CONSUMIDOR"
        } : {},
        produtos: itensVenda.map((item) => {
          var _a3, _b3, _c2, _d2, _e2;
          return {
            codigo: ((_a3 = item.produto) == null ? void 0 : _a3.codigo) || item.codigo_produto,
            descricao: item.nome_produto,
            quantidade: item.quantidade,
            valor_unitario: item.valor_unitario,
            unidade: ((_c2 = (_b3 = item.produto) == null ? void 0 : _b3.unidade_medida) == null ? void 0 : _c2.sigla) || "UN",
            ncm: item.ncm_editavel || ((_d2 = item.produto) == null ? void 0 : _d2.ncm) || "00000000",
            cfop: item.cfop_editavel || item.cfop || "5102",
            cst_icms: empresaData.regime_tributario === 1 ? void 0 : item.cst_editavel || item.cst_icms || "00",
            csosn_icms: empresaData.regime_tributario === 1 ? item.csosn_editavel || item.csosn_icms || "102" : void 0,
            codigo_barras: (_e2 = item.produto) == null ? void 0 : _e2.codigo_barras
          };
        })
      };
      const response = await fetch("/backend/public/emitir-nfce.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          empresa_id: usuarioData.empresa_id,
          nfce_data: nfceData
        })
      });
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText);
      }
      const result = await response.json();
      if (!result.success) {
        throw new Error(result.error || "Erro na emissão da NFC-e");
      }
      const updateData = {
        modelo_documento: 65,
        numero_documento: proximoNumero,
        serie_documento: serieUsuario,
        chave_nfe: result.data.chave,
        protocolo_nfe: result.data.protocolo,
        status_fiscal: "autorizada",
        erro_fiscal: null,
        data_emissao_nfe: result.data.data_autorizacao,
        tentativa_nfce: true
      };
      if (cpfCnpjModalItens.trim()) {
        updateData.documento_cliente = cpfCnpjModalItens.replace(/\D/g, "");
        updateData.tipo_documento_cliente = tipoDocumentoModalItens;
      }
      const { error: updateError } = await supabase.from("pdv").update(updateData).eq("id", vendaParaExibirItens.id);
      if (updateError) {
        console.error("Erro ao atualizar venda:", updateError);
      }
      B.success("NFC-e emitida com sucesso!");
      setCpfCnpjModalItens("");
      setErroValidacaoModalItens("");
      setShowItensVendaModal(false);
      loadVendas();
    } catch (error) {
      console.error("Erro ao emitir NFC-e:", error);
      B.error(`Erro ao emitir NFC-e: ${error.message}`);
    } finally {
      setEmitindoNfceModalItens(false);
    }
  };
  const temBotaoNfceAtivo = () => {
    return !(pdvConfig == null ? void 0 : pdvConfig.ocultar_nfce_com_impressao) || !(pdvConfig == null ? void 0 : pdvConfig.ocultar_nfce_sem_impressao) || !(pdvConfig == null ? void 0 : pdvConfig.ocultar_nfce_producao);
  };
  const temPagamentoCartao = () => {
    if (tipoPagamento === "vista" && formaPagamentoSelecionada) {
      const forma = formasPagamento.find((f2) => f2.id === formaPagamentoSelecionada);
      return forma && (forma.nome === "Crédito" || forma.nome === "Débito");
    }
    if (tipoPagamento === "parcial") {
      return pagamentosParciais.some((p2) => {
        const forma = formasPagamento.find((f2) => f2.id === p2.forma);
        return forma && (forma.nome === "Crédito" || forma.nome === "Débito");
      });
    }
    return false;
  };
  const deveOcultarFinalizacaoSimples = () => {
    return (pdvConfig == null ? void 0 : pdvConfig.forca_venda_fiscal_cartao) && temPagamentoCartao();
  };
  const gerarNumeroVenda = async (empresaId) => {
    try {
      console.log("🔢 FRONTEND: Gerando número de venda para empresa:", empresaId);
      const { data, error } = await supabase.from("pdv").select("numero_venda").eq("empresa_id", empresaId).not("numero_venda", "is", null).order("numero_venda", { ascending: false }).limit(1);
      if (error && error.code !== "PGRST116") {
        console.error("❌ FRONTEND: Erro ao buscar último número de venda:", error);
        const fallbackNumero = `PDV-${Date.now()}`;
        console.log("🔄 FRONTEND: Usando fallback:", fallbackNumero);
        return fallbackNumero;
      }
      console.log("📊 FRONTEND: Dados encontrados:", data);
      console.log("📊 FRONTEND: Quantidade de registros:", (data == null ? void 0 : data.length) || 0);
      let proximoNumero = 1;
      if (data && data.length > 0 && data[0].numero_venda) {
        const ultimoNumero = data[0].numero_venda.replace("PDV-", "");
        proximoNumero = parseInt(ultimoNumero) + 1;
        console.log(`📊 FRONTEND: Último número encontrado: ${data[0].numero_venda}`);
        console.log(`➕ FRONTEND: Incrementando para: ${proximoNumero}`);
      } else {
        console.log("📊 FRONTEND: Nenhum registro encontrado, iniciando do número 1");
      }
      const novoNumero = `PDV-${proximoNumero.toString().padStart(6, "0")}`;
      console.log(`🎯 FRONTEND: Novo número de venda gerado: ${novoNumero}`);
      return novoNumero;
    } catch (error) {
      console.error("❌ FRONTEND: Erro ao gerar número de venda:", error);
      const fallbackNumero = `PDV-${Date.now()}`;
      console.log("🔄 FRONTEND: Usando fallback por erro:", fallbackNumero);
      return fallbackNumero;
    }
  };
  const gerarProximoNumeroNFCe = async (empresaId) => {
    try {
      console.log("🔢 FRONTEND: Gerando próximo número NFC-e para empresa:", empresaId);
      console.log("🔍 FRONTEND: Consultando último número NFC-e no banco...");
      const { data, error } = await supabase.from("pdv").select("numero_documento").eq("empresa_id", empresaId).eq("modelo_documento", 65).not("numero_documento", "is", null).order("numero_documento", { ascending: false }).limit(1);
      if (error) {
        console.error("❌ FRONTEND: Erro ao buscar último número NFC-e:", error);
        console.error("❌ FRONTEND: Detalhes do erro:", error.message, error.details);
        console.log("🔄 FRONTEND: Usando fallback - número 1");
        return 1;
      }
      console.log("📋 FRONTEND: Dados encontrados na tabela PDV para NFC-e:", data);
      console.log("📊 FRONTEND: Quantidade de registros encontrados:", (data == null ? void 0 : data.length) || 0);
      let proximoNumero = 1;
      if (data && data.length > 0 && data[0].numero_documento) {
        proximoNumero = data[0].numero_documento + 1;
        console.log(`📊 FRONTEND: Último número NFC-e encontrado: ${data[0].numero_documento}`);
        console.log(`➕ FRONTEND: Incrementando para: ${proximoNumero}`);
      } else {
        console.log("📊 FRONTEND: Nenhum registro NFC-e encontrado, iniciando do número 1");
      }
      console.log(`🎯 FRONTEND: Próximo número NFC-e definido: ${proximoNumero}`);
      return proximoNumero;
    } catch (error) {
      console.error("❌ FRONTEND: Erro geral ao buscar próximo número NFC-e:", error);
      console.error("❌ FRONTEND: Stack trace:", error.stack);
      console.log("🔄 FRONTEND: Usando fallback - número 1");
      return 1;
    }
  };
  const finalizarVendaCompleta = async (tipoFinalizacao = "finalizar_sem_impressao") => {
    var _a3, _b3;
    const executionId = Date.now();
    console.log(`🚀 FRONTEND: INICIANDO finalizarVendaCompleta - ID: ${executionId}, Tipo: ${tipoFinalizacao}`);
    console.log(`🚀 FRONTEND: showProcessandoVenda atual: ${showProcessandoVenda}`);
    if (carrinho.length === 0) {
      console.log(`❌ FRONTEND: Carrinho vazio - ID: ${executionId}`);
      B.error("Carrinho vazio! Adicione itens antes de finalizar.");
      return;
    }
    console.log(`📋 FRONTEND: Abrindo modal de processamento - ID: ${executionId}`);
    setShowProcessandoVenda(true);
    setEtapaProcessamento("Iniciando processamento da venda...");
    setVendaProcessadaId(null);
    setNumeroVendaProcessada("");
    setStatusProcessamento("processando");
    setErroProcessamento("");
    setNumeroDocumentoReservado(null);
    setSerieDocumentoReservado(null);
    setTipoFinalizacaoAtual(tipoFinalizacao);
    setDadosImpressao(null);
    try {
      setEtapaProcessamento("Validando usuário...");
      const { data: userData2 } = await supabase.auth.getUser();
      if (!userData2.user) {
        setEtapaProcessamento("Erro: Usuário não autenticado");
        await new Promise((resolve2) => setTimeout(resolve2, 2e3));
        setShowProcessandoVenda(false);
        B.error("Usuário não autenticado");
        return;
      }
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        setEtapaProcessamento("Erro: Empresa não encontrada");
        await new Promise((resolve2) => setTimeout(resolve2, 2e3));
        setShowProcessandoVenda(false);
        B.error("Empresa não encontrada");
        return;
      }
      setEtapaProcessamento("Gerando número da venda...");
      const numeroVenda = await gerarNumeroVenda(usuarioData.empresa_id);
      setNumeroVendaProcessada(numeroVenda);
      setEtapaProcessamento("Calculando valores da venda...");
      const valorSubtotal = carrinho.reduce((acc, item) => acc + item.subtotal, 0);
      const valorDescontoPrazo = descontoPrazoSelecionado ? calcularDescontoPrazo() : 0;
      const valorTotal = valorSubtotal - valorDescontoPrazo;
      const valorDesconto2 = Math.abs(valorDescontoPrazo);
      setEtapaProcessamento("Preparando dados do cliente...");
      let clienteData = null;
      if (clienteSelecionado) {
        clienteData = {
          cliente_id: clienteSelecionado.id,
          nome_cliente: clienteSelecionado.nome,
          telefone_cliente: clienteSelecionado.telefone,
          documento_cliente: clienteSelecionado.documento,
          tipo_documento_cliente: clienteSelecionado.tipo_documento
        };
      } else if (pedidosImportados.length > 0 && ((_a3 = pedidosImportados[0]) == null ? void 0 : _a3.cliente)) {
        const cliente = pedidosImportados[0].cliente;
        clienteData = {
          cliente_id: cliente.id,
          nome_cliente: cliente.nome,
          telefone_cliente: cliente.telefone,
          documento_cliente: cliente.documento,
          tipo_documento_cliente: cliente.tipo_documento
        };
      } else if (cpfCnpjNota && clienteEncontrado) {
        clienteData = {
          cliente_id: clienteEncontrado.id,
          nome_cliente: clienteEncontrado.nome,
          telefone_cliente: clienteEncontrado.telefone,
          documento_cliente: clienteEncontrado.documento,
          tipo_documento_cliente: clienteEncontrado.tipo_documento
        };
      } else if (cpfCnpjNota && cpfCnpjNota.trim()) {
        clienteData = {
          documento_cliente: cpfCnpjNota.replace(/\D/g, ""),
          // Apenas números
          tipo_documento_cliente: tipoDocumento
        };
      }
      setEtapaProcessamento("Preparando dados de pagamento...");
      let pagamentoData = {};
      if (tipoPagamento === "vista" && formaPagamentoSelecionada) {
        pagamentoData = {
          tipo_pagamento: "vista",
          forma_pagamento_id: formaPagamentoSelecionada,
          valor_pago: valorTotal,
          valor_troco: 0
        };
      } else if (tipoPagamento === "parcial" && pagamentosParciais.length > 0) {
        const totalPago = calcularTotalPago();
        pagamentoData = {
          tipo_pagamento: "parcial",
          formas_pagamento: pagamentosParciais,
          valor_pago: totalPago,
          valor_troco: trocoCalculado
        };
      }
      setEtapaProcessamento("Verificando configuração de estoque...");
      const { data: estoqueConfig } = await supabase.from("tipo_controle_estoque_config").select("tipo_controle").eq("empresa_id", usuarioData.empresa_id).single();
      const tipoControle = (estoqueConfig == null ? void 0 : estoqueConfig.tipo_controle) || "pedidos";
      setEtapaProcessamento("Preparando dados da venda...");
      let numeroDocumentoNfce = null;
      if (tipoFinalizacao.startsWith("nfce_")) {
        setEtapaProcessamento("Reservando número da NFC-e...");
        numeroDocumentoNfce = await gerarProximoNumeroNFCe(usuarioData.empresa_id);
        console.log("🔢 FRONTEND: Número NFC-e reservado:", numeroDocumentoNfce);
        setNumeroDocumentoReservado(numeroDocumentoNfce);
        const { data: usuarioSerieData } = await supabase.from("usuarios").select("serie_nfce").eq("id", userData2.user.id).single();
        const serieUsuario = (usuarioSerieData == null ? void 0 : usuarioSerieData.serie_nfce) || 1;
        setSerieDocumentoReservado(serieUsuario);
        console.log("🔢 FRONTEND: Série NFC-e do usuário:", serieUsuario);
      }
      const vendaData = {
        empresa_id: usuarioData.empresa_id,
        usuario_id: userData2.user.id,
        numero_venda: numeroVenda,
        data_venda: (/* @__PURE__ */ new Date()).toISOString(),
        status_venda: "finalizada",
        valor_subtotal: valorSubtotal,
        valor_desconto: valorDesconto2,
        valor_total: valorTotal,
        desconto_prazo_id: descontoPrazoSelecionado,
        pedidos_importados: pedidosImportados.length > 0 ? pedidosImportados.map((p2) => p2.id) : null,
        finalizada_em: (/* @__PURE__ */ new Date()).toISOString(),
        // ✅ NOVO: Marcar tentativa de NFC-e e salvar número reservado
        tentativa_nfce: tipoFinalizacao.startsWith("nfce_"),
        status_fiscal: tipoFinalizacao.startsWith("nfce_") ? "processando" : "nao_fiscal",
        // ✅ NOVO: Salvar dados fiscais já no início
        modelo_documento: tipoFinalizacao.startsWith("nfce_") ? 65 : null,
        numero_documento: numeroDocumentoNfce,
        serie_documento: tipoFinalizacao.startsWith("nfce_") ? 1 : null,
        ...clienteData,
        ...pagamentoData
      };
      setEtapaProcessamento("Salvando venda no banco de dados...");
      const { data: vendaInserida, error: vendaError } = await supabase.from("pdv").insert(vendaData).select("id").single();
      if (vendaError) {
        console.error("Erro ao inserir venda:", vendaError);
        setEtapaProcessamento("Erro ao salvar venda: " + vendaError.message);
        await new Promise((resolve2) => setTimeout(resolve2, 3e3));
        setShowProcessandoVenda(false);
        B.error("Erro ao salvar venda: " + vendaError.message);
        return;
      }
      const vendaId = vendaInserida.id;
      setVendaProcessadaId(vendaId);
      setEtapaProcessamento("Preparando itens da venda...");
      const itensParaInserir = carrinho.map((item) => {
        var _a4, _b4, _c2;
        const precoUnitario = item.desconto ? item.desconto.precoComDesconto : item.subtotal / item.quantidade;
        return {
          empresa_id: usuarioData.empresa_id,
          usuario_id: userData2.user.id,
          pdv_id: vendaId,
          produto_id: item.produto.id,
          codigo_produto: item.produto.codigo,
          nome_produto: item.produto.nome,
          descricao_produto: item.produto.descricao,
          quantidade: item.quantidade,
          valor_unitario: precoUnitario,
          valor_subtotal: item.subtotal,
          valor_total_item: item.subtotal,
          tem_desconto: !!item.desconto,
          tipo_desconto: ((_a4 = item.desconto) == null ? void 0 : _a4.tipo) || null,
          percentual_desconto: ((_b4 = item.desconto) == null ? void 0 : _b4.percentualDesconto) || null,
          valor_desconto_aplicado: ((_c2 = item.desconto) == null ? void 0 : _c2.valorDesconto) || 0,
          origem_desconto: item.desconto ? "manual" : null,
          origem_item: item.pedido_origem_numero ? "pedido_importado" : "manual",
          pedido_origem_id: item.pedido_origem_id || null,
          pedido_origem_numero: item.pedido_origem_numero || null,
          observacao_item: item.observacao || null
        };
      });
      setEtapaProcessamento("Salvando itens da venda...");
      const { error: itensError } = await supabase.from("pdv_itens").insert(itensParaInserir);
      if (itensError) {
        console.error("Erro ao inserir itens:", itensError);
        setEtapaProcessamento("Erro ao salvar itens: " + itensError.message);
        await new Promise((resolve2) => setTimeout(resolve2, 3e3));
        setShowProcessandoVenda(false);
        B.error("Erro ao salvar itens: " + itensError.message);
        return;
      }
      const itensComAdicionais = carrinho.filter((item) => item.adicionais && item.adicionais.length > 0);
      if (itensComAdicionais.length > 0) {
        setEtapaProcessamento("Salvando opções adicionais...");
        for (const item of itensComAdicionais) {
          const { data: itemInserido } = await supabase.from("pdv_itens").select("id").eq("pdv_id", vendaId).eq("produto_id", item.produto.id).single();
          if (itemInserido && item.adicionais) {
            const adicionaisParaInserir = item.adicionais.map((adicional) => ({
              empresa_id: usuarioData.empresa_id,
              usuario_id: userData2.user.id,
              pdv_item_id: itemInserido.id,
              item_adicional_id: adicional.id,
              nome_adicional: adicional.nome,
              quantidade: adicional.quantidade,
              valor_unitario: adicional.preco,
              valor_total: adicional.preco * adicional.quantidade,
              origem_adicional: "manual"
            }));
            const { error: adicionaisError } = await supabase.from("pdv_itens_adicionais").insert(adicionaisParaInserir);
            if (adicionaisError) {
              console.error("Erro ao inserir adicionais:", adicionaisError);
              setEtapaProcessamento("Erro ao salvar adicionais: " + adicionaisError.message);
              await new Promise((resolve2) => setTimeout(resolve2, 3e3));
              setShowProcessandoVenda(false);
              B.error("Erro ao salvar adicionais: " + adicionaisError.message);
              return;
            }
          }
        }
      }
      if (tipoControle === "pdv") {
        setEtapaProcessamento("Atualizando estoque...");
        console.log("🔄 FRONTEND: Iniciando baixa de estoque para venda:", numeroVenda);
        console.log("🔄 FRONTEND: Tipo de controle:", tipoControle);
        console.log("🔄 FRONTEND: Itens do carrinho:", carrinho.length);
        for (const item of carrinho) {
          console.log(`🔄 FRONTEND: Baixando estoque - Produto: ${item.produto.nome}, Quantidade: ${item.quantidade}`);
          const { error: estoqueError } = await supabase.rpc("atualizar_estoque_produto", {
            p_produto_id: item.produto.id,
            p_quantidade: -item.quantidade,
            // Quantidade negativa para baixa
            p_tipo_operacao: "venda_pdv",
            p_observacao: `Venda PDV #${numeroVenda}`
          });
          if (estoqueError) {
            console.error("❌ FRONTEND: Erro ao atualizar estoque:", estoqueError);
            setEtapaProcessamento("ERRO: Falha na baixa de estoque: " + estoqueError.message);
            await new Promise((resolve2) => setTimeout(resolve2, 3e3));
            setShowProcessandoVenda(false);
            B.error("ERRO: Falha na baixa de estoque: " + estoqueError.message);
            return;
          } else {
            console.log(`✅ FRONTEND: Estoque baixado com sucesso - Produto: ${item.produto.nome}`);
          }
        }
        console.log("✅ FRONTEND: Baixa de estoque concluída para todos os itens");
        await new Promise((resolve2) => setTimeout(resolve2, 1e3));
      }
      const vendaVerificada = await verificarVendaNoBanco(vendaId, numeroVenda, carrinho.length, tipoControle);
      if (!vendaVerificada) {
        setEtapaProcessamento("ERRO: Venda não foi salva corretamente!");
        await new Promise((resolve2) => setTimeout(resolve2, 3e3));
        setShowProcessandoVenda(false);
        B.error("ERRO: Venda não foi salva corretamente no banco de dados!");
        return;
      }
      if (pedidosImportados.length > 0) {
        setEtapaProcessamento("Atualizando status dos pedidos...");
        try {
          const dataFaturamento = (/* @__PURE__ */ new Date()).toISOString();
          for (const pedido of pedidosImportados) {
            const { error: pedidoError } = await supabase.from("pedidos").update({
              status: "faturado",
              data_faturamento: dataFaturamento,
              observacao_faturamento: `Faturado via PDV - Venda #${numeroVenda}`
            }).eq("id", pedido.id);
            if (pedidoError) {
              console.error(`Erro ao atualizar pedido ${pedido.numero}:`, pedidoError);
            } else {
              console.log(`✅ Pedido ${pedido.numero} atualizado para 'faturado' com sucesso`);
            }
          }
          for (const pedido of pedidosImportados) {
            window.dispatchEvent(new CustomEvent(EVENT_TYPES.PEDIDO_FATURADO, {
              detail: {
                pedidoId: pedido.id,
                numero: pedido.numero,
                status: "faturado",
                empresaId: usuarioData.empresa_id,
                valorTotal: pedido.valor_total || 0,
                clienteNome: (_b3 = pedido.cliente) == null ? void 0 : _b3.nome,
                action: "invoiced"
              }
            }));
          }
          window.dispatchEvent(new CustomEvent("pedidoStatusChanged", {
            detail: {
              pedidosIds: pedidosImportados.map((p2) => p2.id),
              novoStatus: "faturado",
              numeroVenda
            }
          }));
        } catch (error) {
          console.error("Erro ao atualizar status dos pedidos:", error);
        }
      }
      if (tipoFinalizacao.startsWith("nfce_")) {
        console.log("🚀 FRONTEND: Iniciando processo de emissão NFC-e");
        console.log("📋 FRONTEND: Tipo finalização:", tipoFinalizacao);
        console.log("👤 FRONTEND: Empresa ID:", usuarioData.empresa_id);
        setEtapaProcessamento("Carregando dados da empresa...");
        console.log("🏢 FRONTEND: Buscando dados da empresa...");
        const { data: empresaData } = await supabase.from("empresas").select("*").eq("id", usuarioData.empresa_id).single();
        if (!empresaData) {
          throw new Error("Dados da empresa não encontrados");
        }
        console.log("✅ FRONTEND: Dados da empresa carregados:", empresaData.razao_social);
        console.log("🔢 FRONTEND: Buscando série da NFC-e do usuário...");
        const { data: usuarioSerieData } = await supabase.from("usuarios").select("serie_nfce").eq("id", userData2.user.id).single();
        const serieUsuario = (usuarioSerieData == null ? void 0 : usuarioSerieData.serie_nfce) || 1;
        console.log("✅ FRONTEND: Série da NFC-e do usuário:", serieUsuario);
        console.log("⚙️ FRONTEND: Buscando configuração NFe...");
        const { data: nfeConfigData, error: nfeConfigError } = await supabase.from("nfe_config").select("ambiente").eq("empresa_id", usuarioData.empresa_id).single();
        if (nfeConfigError) {
          console.error("❌ FRONTEND: Erro na consulta nfe_config:", nfeConfigError);
          throw new Error(`Erro ao buscar configuração NFe: ${nfeConfigError.message}`);
        }
        if (!nfeConfigData) {
          throw new Error("Configuração NFe não encontrada");
        }
        console.log("✅ FRONTEND: Configuração NFe carregada:", nfeConfigData.ambiente);
        setEtapaProcessamento("Preparando dados para NFC-e...");
        try {
          setEtapaProcessamento("Validando numeração da NFC-e...");
          console.log("🔍 FRONTEND: Validando número NFC-e salvo para venda:", vendaId);
          const { data: vendaSalva, error: validacaoError } = await supabase.from("pdv").select("numero_documento, modelo_documento").eq("id", vendaId).single();
          if (validacaoError || !vendaSalva) {
            throw new Error("Erro ao validar venda salva");
          }
          if (!vendaSalva.numero_documento) {
            throw new Error("Número da NFC-e não foi reservado corretamente");
          }
          console.log("✅ FRONTEND: Número NFC-e validado:", vendaSalva.numero_documento);
          const proximoNumero = vendaSalva.numero_documento;
          const codigoNumerico2 = Math.floor(1e7 + Math.random() * 9e7).toString();
          console.log("🔢 FRONTEND: Código numérico gerado:", codigoNumerico2);
          const getCodigoUF2 = (estado) => {
            const codigosUF = {
              "AC": 12,
              "AL": 17,
              "AP": 16,
              "AM": 13,
              "BA": 29,
              "CE": 23,
              "DF": 53,
              "ES": 32,
              "GO": 52,
              "MA": 21,
              "MT": 51,
              "MS": 50,
              "MG": 31,
              "PA": 15,
              "PB": 25,
              "PR": 41,
              "PE": 26,
              "PI": 22,
              "RJ": 33,
              "RN": 24,
              "RS": 43,
              "RO": 11,
              "RR": 14,
              "SC": 42,
              "SP": 35,
              "SE": 28,
              "TO": 27
            };
            return codigosUF[estado] || 35;
          };
          const nfceData = {
            // ✅ CORREÇÃO: Adicionar dados da empresa (igual à NFe que funciona)
            empresa: {
              razao_social: empresaData.razao_social,
              cnpj: empresaData.documento,
              // Campo correto é 'documento'
              nome_fantasia: empresaData.nome_fantasia,
              inscricao_estadual: empresaData.inscricao_estadual,
              regime_tributario: empresaData.regime_tributario || 1,
              uf: empresaData.estado,
              // Campo correto é 'estado'
              codigo_municipio: parseInt(empresaData.codigo_municipio) || 3524402,
              // Converter para int
              codigo_uf: getCodigoUF2(empresaData.estado),
              // ✅ CORREÇÃO: Calcular a partir do estado
              endereco: {
                logradouro: empresaData.endereco,
                numero: empresaData.numero,
                bairro: empresaData.bairro,
                cidade: empresaData.cidade,
                cep: empresaData.cep
              },
              // Campos CSC para NFC-e
              csc_homologacao: empresaData.csc_homologacao,
              csc_id_homologacao: empresaData.csc_id_homologacao,
              csc_producao: empresaData.csc_producao,
              csc_id_producao: empresaData.csc_id_producao
            },
            // ✅ CORREÇÃO: Adicionar ambiente (igual à NFe que funciona)
            ambiente: nfeConfigData.ambiente,
            // 'producao' ou 'homologacao'
            identificacao: {
              numero: proximoNumero,
              serie: serieUsuario,
              // ✅ NOVO: Série individual do usuário logado
              codigo_numerico: codigoNumerico2,
              natureza_operacao: "Venda de mercadoria"
            },
            // ✅ CORREÇÃO: Usar CPF/CNPJ digitado mesmo se cliente não foi encontrado
            destinatario: (() => {
              if (clienteData) {
                return {
                  documento: clienteData.documento_cliente,
                  nome: clienteData.nome_cliente
                };
              }
              if (cpfCnpjNota && cpfCnpjNota.trim()) {
                return {
                  documento: cpfCnpjNota.replace(/\D/g, ""),
                  // Apenas números
                  nome: "CONSUMIDOR"
                };
              }
              return {};
            })(),
            produtos: carrinho.map((item) => {
              var _a4;
              return {
                codigo: item.produto.codigo,
                // Código real do produto (SEM FALLBACK)
                descricao: item.produto.nome,
                quantidade: item.quantidade,
                valor_unitario: item.produto.preco,
                unidade: (_a4 = item.produto.unidade_medida) == null ? void 0 : _a4.sigla,
                // Unidade real do produto (SEM FALLBACK)
                ncm: item.produto.ncm,
                // NCM real do produto (SEM FALLBACK)
                cfop: item.produto.cfop,
                // CFOP real do produto (SEM FALLBACK)
                codigo_barras: item.produto.codigo_barras
                // Código de barras real (SEM FALLBACK)
              };
            })
          };
          console.log("📋 FRONTEND: Dados NFC-e preparados:", nfceData);
          console.log("📦 FRONTEND: Total de produtos:", nfceData.produtos.length);
          console.log("👤 FRONTEND: Destinatário:", nfceData.destinatario);
          setEtapaProcessamento("Emitindo NFC-e na SEFAZ...");
          console.log("📡 FRONTEND: Enviando dados para backend...");
          const requestData = {
            empresa_id: usuarioData.empresa_id,
            nfce_data: nfceData
          };
          console.log("📡 FRONTEND: Dados da requisição:", requestData);
          const nfceResponse = await fetch("/backend/public/emitir-nfce.php", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify(requestData)
          });
          console.log("📡 FRONTEND: Resposta recebida - Status:", nfceResponse.status);
          if (!nfceResponse.ok) {
            console.error("❌ FRONTEND: Erro HTTP:", nfceResponse.status, nfceResponse.statusText);
            let errorResponse;
            try {
              errorResponse = await nfceResponse.text();
              console.error("📋 FRONTEND: Resposta de erro do backend:", errorResponse);
              console.error("🔍 FRONTEND: Status HTTP recebido:", nfceResponse.status);
              console.error("🔍 FRONTEND: Headers da resposta:", Object.fromEntries(nfceResponse.headers.entries()));
            } catch (textError) {
              console.error("❌ FRONTEND: Erro ao capturar resposta de erro:", textError);
              throw new Error(`Erro HTTP ${nfceResponse.status}: ${nfceResponse.statusText}`);
            }
            try {
              const errorJson = JSON.parse(errorResponse);
              console.error("📋 FRONTEND: Erro JSON do backend:", errorJson);
              console.error("🔍 FRONTEND: Campos do erro JSON:", Object.keys(errorJson));
              const mensagemErro = errorJson.error || errorJson.message || "Erro desconhecido do backend";
              console.error("🔍 FRONTEND: Mensagem de erro extraída:", mensagemErro);
              throw new Error(mensagemErro);
            } catch (jsonError) {
              console.error("❌ FRONTEND: Erro ao fazer parse do JSON de erro:", jsonError);
              console.error("🔍 FRONTEND: Tipo do erro JSON:", typeof jsonError);
              console.error("🔍 FRONTEND: Conteúdo do jsonError:", jsonError);
              if (jsonError instanceof Error && jsonError.message.includes("Status")) {
                console.error("🔍 FRONTEND: Re-lançando erro específico da SEFAZ");
                throw jsonError;
              }
              if (errorResponse.includes("ERRO:") || errorResponse.includes("Status")) {
                console.error("🔍 FRONTEND: Resposta contém erro específico, usando resposta bruta");
                throw new Error(errorResponse);
              }
              const mensagemErro = errorResponse.length > 200 ? errorResponse.substring(0, 200) + "..." : errorResponse;
              throw new Error(`Erro de comunicação: ${mensagemErro}`);
            }
          }
          const nfceResult = await nfceResponse.json();
          console.log("📋 FRONTEND: Resultado da emissão:", nfceResult);
          if (!nfceResult.success) {
            console.error("❌ FRONTEND: Erro na emissão:", nfceResult.error);
            throw new Error(nfceResult.error || "Erro desconhecido na emissão da NFC-e");
          }
          console.log("✅ FRONTEND: NFC-e emitida com sucesso!");
          console.log("🔑 FRONTEND: Chave:", nfceResult.data.chave);
          console.log("📋 FRONTEND: Protocolo:", nfceResult.data.protocolo);
          setStatusProcessamento("sucesso");
          setEtapaProcessamento("NFC-e emitida com sucesso!");
          console.log("💾 FRONTEND: Atualizando registro da venda...");
          const updateData = {
            // ✅ NOVO: Não atualizar numero_documento - já foi salvo no início
            chave_nfe: nfceResult.data.chave,
            protocolo_nfe: nfceResult.data.protocolo,
            status_fiscal: "autorizada",
            // ✅ NFC-e autorizada com sucesso
            erro_fiscal: null,
            // ✅ Limpar qualquer erro anterior
            data_emissao_nfe: nfceResult.data.data_autorizacao
            // ✅ CORREÇÃO: xml_path e pdf_path removidos - arquivos salvos localmente em /root/nexo-pedidos/backend/storage
          };
          console.log("💾 FRONTEND: Dados para atualização:", updateData);
          const { error: updateError } = await supabase.from("pdv").update(updateData).eq("id", vendaId);
          if (updateError) {
            console.error("❌ FRONTEND: Erro ao atualizar venda:", updateError);
          } else {
            console.log("✅ FRONTEND: Venda atualizada com dados da NFC-e");
          }
          console.log("⏱️ FRONTEND: Aguardando 2 segundos antes de fechar...");
          await new Promise((resolve2) => setTimeout(resolve2, 2e3));
        } catch (nfceError) {
          console.error("❌ FRONTEND: Erro na emissão da NFC-e:", nfceError);
          console.error("❌ FRONTEND: Stack trace:", nfceError.stack);
          setStatusProcessamento("erro");
          const mensagemErroEspecifica = nfceError.message;
          console.log("🔍 FRONTEND: Mensagem de erro capturada:", mensagemErroEspecifica);
          try {
            const { error: updateError } = await supabase.from("pdv").update({
              status_fiscal: "pendente",
              // ✅ Marcar como pendente para correção
              erro_fiscal: mensagemErroEspecifica
              // ✅ Salvar erro para análise
            }).eq("id", vendaId);
            if (updateError) {
              console.error("❌ FRONTEND: Erro ao atualizar status da venda:", updateError);
            } else {
              console.log("✅ FRONTEND: Venda marcada como pendente devido ao erro na NFC-e");
            }
          } catch (updateError) {
            console.error("❌ FRONTEND: Erro ao atualizar venda com erro:", updateError);
          }
          setErroProcessamento(mensagemErroEspecifica);
          setEtapaProcessamento(`Erro na NFC-e: ${mensagemErroEspecifica}`);
          setStatusProcessamento("erro");
          console.log("🛑 FRONTEND: Erro na NFC-e - mostrando modal de erro e limpando carrinho silenciosamente");
          setCarrinho([]);
          setClienteSelecionado(null);
          setShowFinalizacaoFinal(false);
          limparPagamentosParciaisSilencioso();
          setCpfCnpjNota("");
          setClienteEncontrado(null);
          setTipoDocumento("cpf");
          setPedidosImportados([]);
          setDescontoPrazoSelecionado(null);
          clearPDVState();
          loadContadorNfcePendentes();
          return;
        }
      }
      if (tipoFinalizacao === "finalizar_com_impressao") {
        console.log("🖨️ FRONTEND: Preparando dados para impressão");
        setEtapaProcessamento("Carregando dados da empresa...");
        try {
          const { data: empresaData } = await supabase.from("empresas").select("*").eq("id", usuarioData.empresa_id).single();
          if (!empresaData) {
            throw new Error("Dados da empresa não encontrados para impressão");
          }
          console.log("🏢 FRONTEND: Dados da empresa carregados para impressão:", empresaData.razao_social);
          setEtapaProcessamento("Preparando cupom para impressão...");
          const dadosImpressaoCompletos = {
            venda: {
              id: vendaId,
              numero: numeroVenda,
              data: (/* @__PURE__ */ new Date()).toLocaleString("pt-BR"),
              valor_total: valorTotal,
              valor_subtotal: valorSubtotal,
              valor_desconto: valorDesconto2
            },
            empresa: {
              razao_social: empresaData.razao_social,
              nome_fantasia: empresaData.nome_fantasia,
              cnpj: empresaData.documento,
              inscricao_estadual: empresaData.inscricao_estadual,
              endereco: `${empresaData.endereco}, ${empresaData.numero}`,
              bairro: empresaData.bairro,
              cidade: empresaData.cidade,
              uf: empresaData.estado,
              cep: empresaData.cep,
              telefone: empresaData.telefone
            },
            cliente: clienteData || {},
            itens: carrinho.map((item) => ({
              codigo: item.produto.codigo,
              nome: item.produto.nome,
              quantidade: item.quantidade,
              valor_unitario: item.produto.preco,
              valor_total: item.subtotal
            })),
            pagamento: pagamentoData,
            timestamp: (/* @__PURE__ */ new Date()).toISOString(),
            tipo: "cupom_nao_fiscal"
            // Identificar tipo
          };
          setDadosImpressao(dadosImpressaoCompletos);
          console.log("🖨️ FRONTEND: Dados preparados, aguardando ação do usuário");
          setEtapaProcessamento("Venda finalizada com sucesso! Deseja imprimir o cupom?");
          setStatusProcessamento("aguardando_impressao");
          return;
        } catch (impressaoError) {
          console.error("❌ FRONTEND: Erro na preparação da impressão:", impressaoError);
          setEtapaProcessamento("Erro na preparação da impressão, mas venda foi salva com sucesso");
          await new Promise((resolve2) => setTimeout(resolve2, 2e3));
        }
      }
      if (tipoFinalizacao === "nfce_com_impressao") {
        console.log("🖨️ FRONTEND: NFC-e emitida com sucesso, preparando dados para impressão");
        setEtapaProcessamento("Carregando dados da empresa para impressão...");
        try {
          const { data: empresaData } = await supabase.from("empresas").select("*").eq("id", usuarioData.empresa_id).single();
          if (!empresaData) {
            throw new Error("Dados da empresa não encontrados para impressão");
          }
          console.log("🏢 FRONTEND: Dados da empresa carregados para impressão da NFC-e:", empresaData.razao_social);
          setEtapaProcessamento("Preparando cupom da NFC-e para impressão...");
          const { data: vendaAtualizada } = await supabase.from("pdv").select("*").eq("id", vendaId).single();
          const dadosImpressaoNfce = {
            venda: {
              id: vendaId,
              numero: numeroVenda,
              data: (/* @__PURE__ */ new Date()).toLocaleString("pt-BR"),
              valor_total: valorTotal,
              valor_subtotal: valorSubtotal,
              valor_desconto: valorDesconto2,
              chave_nfe: (vendaAtualizada == null ? void 0 : vendaAtualizada.chave_nfe) || null
            },
            empresa: {
              razao_social: empresaData.razao_social,
              nome_fantasia: empresaData.nome_fantasia,
              cnpj: empresaData.documento,
              inscricao_estadual: empresaData.inscricao_estadual,
              endereco: `${empresaData.endereco}, ${empresaData.numero}`,
              bairro: empresaData.bairro,
              cidade: empresaData.cidade,
              uf: empresaData.estado,
              cep: empresaData.cep,
              telefone: empresaData.telefone
            },
            cliente: clienteData || {},
            itens: carrinho.map((item) => ({
              codigo: item.produto.codigo,
              nome: item.produto.nome,
              quantidade: item.quantidade,
              valor_unitario: item.produto.preco,
              valor_total: item.subtotal
            })),
            pagamento: pagamentoData,
            timestamp: (/* @__PURE__ */ new Date()).toISOString(),
            tipo: "nfce"
            // Identificar que é NFC-e
          };
          setDadosImpressao(dadosImpressaoNfce);
          console.log("🖨️ FRONTEND: Dados da NFC-e preparados, aguardando ação do usuário");
          setEtapaProcessamento("NFC-e emitida com sucesso! Deseja imprimir o cupom fiscal?");
          setStatusProcessamento("aguardando_impressao");
          return;
        } catch (impressaoError) {
          console.error("❌ FRONTEND: Erro na preparação da impressão da NFC-e:", impressaoError);
          setEtapaProcessamento("NFC-e emitida com sucesso, mas erro na preparação da impressão");
          await new Promise((resolve2) => setTimeout(resolve2, 2e3));
        }
      }
      const mensagemSucesso = (() => {
        if (tipoFinalizacao === "nfce_com_impressao") {
          return "Venda finalizada e NFC-e emitida com sucesso!";
        } else if (tipoFinalizacao.startsWith("nfce_")) {
          return "Venda finalizada e NFC-e emitida com sucesso!";
        } else if (tipoFinalizacao === "finalizar_com_impressao") {
          return "Venda finalizada e impressa com sucesso!";
        } else {
          return "Venda finalizada com sucesso!";
        }
      })();
      setEtapaProcessamento(mensagemSucesso);
      await new Promise((resolve2) => setTimeout(resolve2, 1500));
      setShowProcessandoVenda(false);
      const toastMessage = (() => {
        if (tipoFinalizacao === "nfce_com_impressao") {
          return `Venda #${numeroVenda} finalizada e NFC-e emitida com sucesso!`;
        } else if (tipoFinalizacao.startsWith("nfce_")) {
          return `Venda #${numeroVenda} finalizada e NFC-e emitida com sucesso!`;
        } else if (tipoFinalizacao === "finalizar_com_impressao") {
          return `Venda #${numeroVenda} finalizada e impressa com sucesso!`;
        } else {
          return `Venda #${numeroVenda} finalizada com sucesso!`;
        }
      })();
      B.success(toastMessage);
      window.dispatchEvent(new CustomEvent("vendaPdvFinalizada", {
        detail: {
          vendaId,
          numeroVenda,
          empresaId: usuarioData.empresa_id,
          valorTotal
        }
      }));
      setCarrinho([]);
      setClienteSelecionado(null);
      setShowFinalizacaoFinal(false);
      limparPagamentosParciaisSilencioso();
      setCpfCnpjNota("");
      setClienteEncontrado(null);
      setTipoDocumento("cpf");
      setPedidosImportados([]);
      setDescontoPrazoSelecionado(null);
      clearPDVState();
      if (pdvConfig == null ? void 0 : pdvConfig.baixa_estoque_pdv) {
        loadEstoque();
      }
      if (tipoFinalizacao.startsWith("nfce_")) {
        loadContadorNfcePendentes();
      }
    } catch (error) {
      console.error("Erro ao finalizar venda:", error);
      const mensagemErro = error.message;
      console.log("🔍 FRONTEND: Erro capturado no catch externo:", mensagemErro);
      if (statusProcessamento === "erro") {
        console.log("🔍 FRONTEND: Erro já tratado pela NFC-e, não sobrescrevendo");
        return;
      }
      setEtapaProcessamento("ERRO INESPERADO: " + mensagemErro);
      await new Promise((resolve2) => setTimeout(resolve2, 3e3));
      setShowProcessandoVenda(false);
      B.error("Erro inesperado ao finalizar venda");
    }
  };
  const executarImpressao = async () => {
    if (!dadosImpressao) {
      console.error("❌ FRONTEND: Dados de impressão não encontrados");
      return;
    }
    try {
      console.log("🖨️ FRONTEND: Iniciando impressão...");
      console.log("🖨️ FRONTEND: Tipo de impressão:", dadosImpressao.tipo);
      setEtapaProcessamento("Enviando para impressão...");
      setStatusProcessamento("processando");
      if (dadosImpressao.tipo === "nfce") {
        console.log("📄 FRONTEND: Imprimindo cupom da NFC-e");
        await gerarEImprimirCupomNfce(dadosImpressao);
      } else {
        console.log("🧾 FRONTEND: Imprimindo cupom não fiscal");
        await gerarEImprimirCupom(dadosImpressao);
      }
      await new Promise((resolve2) => setTimeout(resolve2, 2e3));
      console.log("✅ FRONTEND: Impressão concluída com sucesso");
      finalizarProcessamento();
    } catch (impressaoError) {
      console.error("❌ FRONTEND: Erro na impressão:", impressaoError);
      setEtapaProcessamento("Erro na impressão: " + impressaoError.message);
      await new Promise((resolve2) => setTimeout(resolve2, 2e3));
      finalizarProcessamento();
    }
  };
  const finalizarSemImpressao = () => {
    console.log("✅ FRONTEND: Finalizando sem impressão");
    finalizarProcessamento();
  };
  const reimprimirCupom = async (venda) => {
    try {
      console.log("🖨️ FRONTEND: Iniciando reimpressão de cupom para venda:", venda.numero_venda);
      const { data: userData2 } = await supabase.auth.getUser();
      if (!userData2.user) {
        throw new Error("Usuário não autenticado");
      }
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
      if (!usuarioData) {
        throw new Error("Dados do usuário não encontrados");
      }
      if (venda.tentativa_nfce && venda.status_fiscal === "autorizada" && venda.chave_nfe) {
        console.log("📄 FRONTEND: Venda com NFC-e autorizada - buscando PDF");
        await reimprimirNfcePdf(venda, usuarioData);
      } else {
        console.log("🧾 FRONTEND: Venda sem NFC-e - gerando cupom não fiscal");
        await reimprimirCupomNaoFiscal(venda, usuarioData);
      }
    } catch (error) {
      console.error("❌ FRONTEND: Erro na reimpressão:", error);
      B.error("Erro ao reimprimir cupom: " + error.message);
    }
  };
  const reimprimirNfcePdf = async (venda, usuarioData) => {
    try {
      console.log("📄 FRONTEND: Gerando cupom NFC-e para venda:", venda.numero_venda);
      B.info("Preparando NFC-e para impressão...");
      const { data: empresaData } = await supabase.from("empresas").select("*").eq("id", usuarioData.empresa_id).single();
      if (!empresaData) {
        throw new Error("Dados da empresa não encontrados");
      }
      const { data: itensData, error: itensError } = await supabase.from("pdv_itens").select("*").eq("pdv_id", venda.id).eq("empresa_id", usuarioData.empresa_id);
      if (itensError) {
        throw new Error("Erro ao carregar itens da venda");
      }
      if (!itensData || itensData.length === 0) {
        throw new Error("Nenhum item encontrado para esta venda");
      }
      console.log("📦 FRONTEND: Itens carregados:", itensData.length);
      const dadosImpressaoNfce = {
        venda: {
          id: venda.id,
          numero: venda.numero_venda,
          data: venda.data_venda ? new Date(venda.data_venda).toLocaleString("pt-BR") : venda.created_at ? new Date(venda.created_at).toLocaleString("pt-BR") : (/* @__PURE__ */ new Date()).toLocaleString("pt-BR"),
          valor_total: venda.valor_total,
          valor_subtotal: venda.valor_subtotal || venda.valor_total,
          valor_desconto: venda.valor_desconto || 0,
          chave_nfe: venda.chave_nfe
        },
        empresa: {
          razao_social: empresaData.razao_social,
          nome_fantasia: empresaData.nome_fantasia,
          cnpj: empresaData.documento,
          inscricao_estadual: empresaData.inscricao_estadual,
          endereco: `${empresaData.endereco}, ${empresaData.numero}`,
          bairro: empresaData.bairro,
          cidade: empresaData.cidade,
          uf: empresaData.estado,
          cep: empresaData.cep,
          telefone: empresaData.telefone
        },
        cliente: {
          nome_cliente: venda.nome_cliente,
          documento_cliente: venda.documento_cliente
        },
        itens: itensData.map((item) => ({
          codigo: item.codigo_produto || "N/A",
          nome: item.nome_produto,
          quantidade: item.quantidade,
          valor_unitario: item.valor_unitario,
          valor_total: item.valor_total_item || item.valor_total || item.quantidade * item.valor_unitario
        })),
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        tipo: "nfce"
        // Identificar que é NFC-e
      };
      console.log("🖨️ FRONTEND: Dados preparados para reimpressão da NFC-e");
      await gerarEImprimirCupomNfce(dadosImpressaoNfce);
    } catch (error) {
      console.error("❌ FRONTEND: Erro ao gerar cupom da NFC-e:", error);
      throw error;
    }
  };
  const reimprimirCupomNaoFiscal = async (venda, usuarioData) => {
    try {
      console.log("🧾 FRONTEND: Gerando cupom não fiscal para venda:", venda.numero_venda);
      const { data: empresaData } = await supabase.from("empresas").select("*").eq("id", usuarioData.empresa_id).single();
      if (!empresaData) {
        throw new Error("Dados da empresa não encontrados");
      }
      const { data: itensData, error: itensError } = await supabase.from("pdv_itens").select("*").eq("pdv_id", venda.id).eq("empresa_id", usuarioData.empresa_id);
      if (itensError) {
        throw new Error("Erro ao carregar itens da venda");
      }
      if (!itensData || itensData.length === 0) {
        throw new Error("Nenhum item encontrado para esta venda");
      }
      console.log("📦 FRONTEND: Itens carregados:", itensData.length);
      const dadosImpressao2 = {
        venda: {
          id: venda.id,
          numero: venda.numero_venda,
          data: venda.data_venda ? new Date(venda.data_venda).toLocaleString("pt-BR") : venda.created_at ? new Date(venda.created_at).toLocaleString("pt-BR") : (/* @__PURE__ */ new Date()).toLocaleString("pt-BR"),
          valor_total: venda.valor_total,
          valor_subtotal: venda.valor_subtotal || venda.valor_total,
          valor_desconto: venda.valor_desconto || 0
        },
        empresa: {
          razao_social: empresaData.razao_social,
          nome_fantasia: empresaData.nome_fantasia,
          cnpj: empresaData.documento,
          inscricao_estadual: empresaData.inscricao_estadual,
          endereco: `${empresaData.endereco}, ${empresaData.numero}`,
          bairro: empresaData.bairro,
          cidade: empresaData.cidade,
          uf: empresaData.estado,
          cep: empresaData.cep,
          telefone: empresaData.telefone
        },
        cliente: {
          nome_cliente: venda.nome_cliente,
          documento_cliente: venda.documento_cliente
        },
        itens: itensData.map((item) => ({
          codigo: item.codigo_produto || "N/A",
          nome: item.nome_produto,
          quantidade: item.quantidade,
          valor_unitario: item.valor_unitario,
          valor_total: item.valor_total_item || item.valor_total || item.quantidade * item.valor_unitario
        })),
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      };
      console.log("🖨️ FRONTEND: Dados preparados para reimpressão");
      await gerarEImprimirCupom(dadosImpressao2);
    } catch (error) {
      console.error("❌ FRONTEND: Erro ao gerar cupom não fiscal:", error);
      throw error;
    }
  };
  const gerarEImprimirCupomNfce = async (dadosImpressao2) => {
    var _a3;
    try {
      const formatCurrency2 = (value) => {
        return new Intl.NumberFormat("pt-BR", {
          style: "currency",
          currency: "BRL"
        }).format(value);
      };
      const formatarChaveNfe = (chave) => {
        if (!chave || chave.length !== 44) return chave;
        return chave.replace(
          /(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})/,
          "$1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11"
        );
      };
      const htmlCupomNfce = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>NFC-e - ${dadosImpressao2.venda.numero}</title>
          <style>
            @media print {
              @page { margin: 0; }
              body { margin: 0; }
            }
            body {
              font-family: 'Courier New', monospace;
              font-size: 12px;
              line-height: 1.2;
              margin: 10px;
              color: black;
            }
            .center { text-align: center; }
            .bold { font-weight: bold; }
            .linha { border-top: 1px dashed #000; margin: 5px 0; }
            .item { margin: 2px 0; }
            .item-linha { display: flex; justify-content: space-between; }
            .chave { font-size: 10px; word-break: break-all; }
          </style>
        </head>
        <body>
          <div class="center">
            <div class="bold">${dadosImpressao2.empresa.razao_social}</div>
            ${dadosImpressao2.empresa.nome_fantasia ? `<div>${dadosImpressao2.empresa.nome_fantasia}</div>` : ""}
            <div>CNPJ: ${dadosImpressao2.empresa.cnpj}</div>
            ${dadosImpressao2.empresa.inscricao_estadual ? `<div>IE: ${dadosImpressao2.empresa.inscricao_estadual}</div>` : ""}
            <div>${dadosImpressao2.empresa.endereco}</div>
            <div>${dadosImpressao2.empresa.bairro} - ${dadosImpressao2.empresa.cidade}/${dadosImpressao2.empresa.uf}</div>
            <div>CEP: ${dadosImpressao2.empresa.cep}</div>
            ${dadosImpressao2.empresa.telefone ? `<div>Tel: ${dadosImpressao2.empresa.telefone}</div>` : ""}
          </div>

          <div class="linha"></div>

          <div class="center bold">NOTA FISCAL DE CONSUMIDOR ELETRÔNICA</div>
          <div class="center bold">NFC-e</div>
          <div class="center">Venda: ${dadosImpressao2.venda.numero}</div>
          <div class="center">${dadosImpressao2.venda.data}</div>

          <div class="linha"></div>

          ${dadosImpressao2.itens.map((item) => `
            <div class="item">
              <div>${item.nome}</div>
              <div class="item-linha">
                <span>${item.quantidade} x ${formatCurrency2(item.valor_unitario)}</span>
                <span>${formatCurrency2(item.valor_total)}</span>
              </div>
            </div>
          `).join("")}

          <div class="linha"></div>

          ${dadosImpressao2.venda.valor_desconto > 0 ? `
            <div class="item-linha">
              <span>Subtotal:</span>
              <span>${formatCurrency2(dadosImpressao2.venda.valor_subtotal)}</span>
            </div>
            <div class="item-linha">
              <span>Desconto:</span>
              <span>-${formatCurrency2(dadosImpressao2.venda.valor_desconto)}</span>
            </div>
          ` : ""}

          <div class="item-linha bold">
            <span>TOTAL:</span>
            <span>${formatCurrency2(dadosImpressao2.venda.valor_total)}</span>
          </div>

          <div class="linha"></div>

          ${((_a3 = dadosImpressao2.cliente) == null ? void 0 : _a3.nome_cliente) ? `
            <div>Cliente: ${dadosImpressao2.cliente.nome_cliente}</div>
            ${dadosImpressao2.cliente.documento_cliente ? `<div>Doc: ${dadosImpressao2.cliente.documento_cliente}</div>` : ""}
          ` : ""}

          <div class="linha"></div>

          <div class="center">
            <div class="bold">INFORMAÇÕES FISCAIS</div>
            <div>Documento autorizado pela SEFAZ</div>
            ${dadosImpressao2.venda.chave_nfe ? `
              <div class="chave">
                <div>Chave de Acesso:</div>
                <div>${formatarChaveNfe(dadosImpressao2.venda.chave_nfe)}</div>
              </div>
            ` : ""}

            ${dadosImpressao2.venda.chave_nfe ? `
              <div style="margin: 10px 0;">
                <div>Consulte pela chave de acesso em:</div>
                <div style="font-size: 10px;">www.nfce.fazenda.gov.br</div>
                <div style="margin: 5px 0;">
                  <img src="https://api.qrserver.com/v1/create-qr-code/?size=120x120&data=${encodeURIComponent(dadosImpressao2.venda.chave_nfe)}"
                       alt="QR Code NFC-e"
                       style="width: 120px; height: 120px; margin: 5px auto; display: block;">
                </div>
                <div style="font-size: 10px;">Escaneie o QR Code para consultar a NFC-e</div>
              </div>
            ` : ""}
          </div>

          <div class="linha"></div>

          <div class="center">
            <div>Obrigado pela preferência!</div>
            <div>Volte sempre!</div>
          </div>

          <script>
            window.onload = function() {
              window.print();
              setTimeout(function() {
                window.close();
              }, 1000);
            };
          <\/script>
        </body>
        </html>
      `;
      const janelaImpressao = window.open("", "_blank", "width=400,height=600");
      if (janelaImpressao) {
        janelaImpressao.document.write(htmlCupomNfce);
        janelaImpressao.document.close();
        console.log("✅ FRONTEND: Janela de impressão da NFC-e aberta");
        B.success("NFC-e enviada para impressão!");
      } else {
        throw new Error("Não foi possível abrir janela de impressão. Verifique se pop-ups estão bloqueados.");
      }
    } catch (error) {
      console.error("❌ FRONTEND: Erro ao gerar cupom da NFC-e:", error);
      throw error;
    }
  };
  const gerarEImprimirCupom = async (dadosImpressao2) => {
    var _a3;
    try {
      const formatCurrency2 = (value) => {
        return new Intl.NumberFormat("pt-BR", {
          style: "currency",
          currency: "BRL"
        }).format(value);
      };
      const htmlCupom = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>Cupom - Venda ${dadosImpressao2.venda.numero}</title>
          <style>
            @media print {
              @page { margin: 0; }
              body { margin: 0; }
            }
            body {
              font-family: 'Courier New', monospace;
              font-size: 12px;
              line-height: 1.2;
              margin: 10px;
              color: black;
            }
            .center { text-align: center; }
            .bold { font-weight: bold; }
            .linha { border-top: 1px dashed #000; margin: 5px 0; }
            .item { margin: 2px 0; }
            .item-linha { display: flex; justify-content: space-between; }
          </style>
        </head>
        <body>
          <div class="center">
            <div class="bold">${dadosImpressao2.empresa.razao_social}</div>
            ${dadosImpressao2.empresa.nome_fantasia ? `<div>${dadosImpressao2.empresa.nome_fantasia}</div>` : ""}
            <div>CNPJ: ${dadosImpressao2.empresa.cnpj}</div>
            ${dadosImpressao2.empresa.inscricao_estadual ? `<div>IE: ${dadosImpressao2.empresa.inscricao_estadual}</div>` : ""}
            <div>${dadosImpressao2.empresa.endereco}</div>
            <div>${dadosImpressao2.empresa.bairro} - ${dadosImpressao2.empresa.cidade}/${dadosImpressao2.empresa.uf}</div>
            <div>CEP: ${dadosImpressao2.empresa.cep}</div>
            ${dadosImpressao2.empresa.telefone ? `<div>Tel: ${dadosImpressao2.empresa.telefone}</div>` : ""}
          </div>

          <div class="linha"></div>

          <div class="center bold">CUPOM NÃO FISCAL</div>
          <div class="center">Venda: ${dadosImpressao2.venda.numero}</div>
          <div class="center">${dadosImpressao2.venda.data}</div>

          <div class="linha"></div>

          ${dadosImpressao2.itens.map((item) => `
            <div class="item">
              <div>${item.nome}</div>
              <div class="item-linha">
                <span>${item.quantidade} x ${formatCurrency2(item.valor_unitario)}</span>
                <span>${formatCurrency2(item.valor_total)}</span>
              </div>
            </div>
          `).join("")}

          <div class="linha"></div>

          ${dadosImpressao2.venda.valor_desconto > 0 ? `
            <div class="item-linha">
              <span>Subtotal:</span>
              <span>${formatCurrency2(dadosImpressao2.venda.valor_subtotal)}</span>
            </div>
            <div class="item-linha">
              <span>Desconto:</span>
              <span>-${formatCurrency2(dadosImpressao2.venda.valor_desconto)}</span>
            </div>
          ` : ""}

          <div class="item-linha bold">
            <span>TOTAL:</span>
            <span>${formatCurrency2(dadosImpressao2.venda.valor_total)}</span>
          </div>

          <div class="linha"></div>

          ${((_a3 = dadosImpressao2.cliente) == null ? void 0 : _a3.nome_cliente) ? `
            <div>Cliente: ${dadosImpressao2.cliente.nome_cliente}</div>
            ${dadosImpressao2.cliente.documento_cliente ? `<div>Doc: ${dadosImpressao2.cliente.documento_cliente}</div>` : ""}
          ` : ""}

          <div class="center">
            <div>Obrigado pela preferência!</div>
            <div>Volte sempre!</div>
          </div>

          <script>
            window.onload = function() {
              window.print();
              setTimeout(function() {
                window.close();
              }, 1000);
            };
          <\/script>
        </body>
        </html>
      `;
      const janelaImpressao = window.open("", "_blank", "width=400,height=600");
      if (janelaImpressao) {
        janelaImpressao.document.write(htmlCupom);
        janelaImpressao.document.close();
        console.log("✅ FRONTEND: Janela de impressão aberta");
        B.success("Cupom enviado para impressão!");
      } else {
        throw new Error("Não foi possível abrir janela de impressão. Verifique se pop-ups estão bloqueados.");
      }
    } catch (error) {
      console.error("❌ FRONTEND: Erro ao gerar cupom:", error);
      throw error;
    }
  };
  const finalizarProcessamento = () => {
    const mensagemSucesso = tipoFinalizacaoAtual === "finalizar_com_impressao" ? "Venda finalizada e impressa com sucesso!" : "Venda finalizada com sucesso!";
    setEtapaProcessamento(mensagemSucesso);
    setStatusProcessamento("sucesso");
    setTimeout(() => {
      setShowProcessandoVenda(false);
      const toastMessage = tipoFinalizacaoAtual === "finalizar_com_impressao" ? `Venda #${numeroVendaProcessada} finalizada e impressa com sucesso!` : `Venda #${numeroVendaProcessada} finalizada com sucesso!`;
      B.success(toastMessage);
      setCarrinho([]);
      setClienteSelecionado(null);
      setShowFinalizacaoFinal(false);
      limparPagamentosParciaisSilencioso();
      setCpfCnpjNota("");
      setClienteEncontrado(null);
      setTipoDocumento("cpf");
      setPedidosImportados([]);
      setDescontoPrazoSelecionado(null);
      clearPDVState();
      setStatusProcessamento("processando");
      setDadosImpressao(null);
      setTipoFinalizacaoAtual("");
      if (pdvConfig == null ? void 0 : pdvConfig.baixa_estoque_pdv) {
        loadEstoque();
      }
    }, 1500);
  };
  const limparCarrinhoCompleto = () => {
    setCarrinho([]);
    setClienteSelecionado(null);
    setPedidosImportados([]);
    setDescontoPrazoSelecionado(null);
    setDescontosCliente({ prazo: [], valor: [] });
    setCpfCnpjNota("");
    setClienteEncontrado(null);
    setTipoDocumento("cpf");
    setErroValidacao("");
    limparPagamentosParciaisSilencioso();
    clearPDVState();
    setShowConfirmLimparCarrinho(false);
    B.success("PDV limpo com sucesso!");
  };
  const handleSearchKeyPress = (e) => {
    if (e.key === "Enter" && searchTerm.trim()) {
      if (produtosFiltrados.length > 0) {
        adicionarAoCarrinho(produtosFiltrados[0]);
        setSearchTerm("");
        setTimeout(() => {
          const input = e.target;
          input.focus();
        }, 10);
      } else {
        let termoBusca = searchTerm.trim();
        if (searchTerm.includes("*")) {
          const partes = searchTerm.split("*");
          if (partes.length >= 2) {
            termoBusca = partes.slice(1).join("*").trim();
          }
        }
        mostrarProdutoNaoEncontrado(termoBusca);
        setSearchTerm("");
        setTimeout(() => {
          const input = e.target;
          input.focus();
        }, 10);
      }
    }
  };
  const abrirModalProdutos = async () => {
    try {
      if (!isFullscreen) {
        await enterFullscreen();
        console.log("Fullscreen ativado para modal de produtos");
      }
      setShowAreaProdutos(true);
    } catch (error) {
      console.log("Erro ao ativar fullscreen para modal de produtos:", error);
      setShowAreaProdutos(true);
    }
  };
  const mostrarProdutoNaoEncontrado = (termo) => {
    setProdutoNaoEncontradoTermo(termo);
    setShowProdutoNaoEncontrado(true);
  };
  reactExports.useEffect(() => {
    if (!showPedidosModal) return;
    let modalSubscription = null;
    const setupModalRealtime = async () => {
      try {
        const { data: userData2 } = await supabase.auth.getUser();
        if (!userData2.user) return;
        const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
        if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
        modalSubscription = supabase.channel(`pedidos-modal-${Date.now()}`).on(
          "postgres_changes",
          {
            event: "*",
            schema: "public",
            table: "pedidos",
            filter: `empresa_id=eq.${usuarioData.empresa_id}`
          },
          (payload) => {
            const loadPedidosSilencioso = async () => {
              const { data: userData3 } = await supabase.auth.getUser();
              if (!userData3.user) return;
              const { data: usuarioData2 } = await supabase.from("usuarios").select("empresa_id").eq("id", userData3.user.id).single();
              if (!(usuarioData2 == null ? void 0 : usuarioData2.empresa_id)) return;
              try {
                const { data, error } = await supabase.from("pedidos").select(`
                      id,
                      numero,
                      created_at,
                      status,
                      valor_total,
                      desconto_prazo_id,
                      desconto_valor_id,
                      usuario_id,
                      cliente:clientes(id, nome, telefone),
                      pedidos_itens(
                        id,
                        quantidade,
                        valor_unitario,
                        valor_total,
                        produto:produtos(
                          id,
                          nome,
                          preco,
                          codigo,
                          codigo_barras,
                          descricao,
                          promocao,
                          tipo_desconto,
                          valor_desconto,
                          unidade_medida_id,
                          grupo_id,
                          produto_fotos(url, principal)
                        )
                      )
                    `).eq("empresa_id", usuarioData2.empresa_id).eq("status", "pendente").eq("deletado", false).order("created_at", { ascending: false }).limit(100);
                if (error) throw error;
                let pedidosData = data || [];
                if (pedidosData.length > 0) {
                  const usuarioIds = [...new Set(pedidosData.filter((p2) => p2.usuario_id).map((p2) => p2.usuario_id))];
                  if (usuarioIds.length > 0) {
                    const { data: usuariosData } = await supabase.from("usuarios").select("id, nome").in("id", usuarioIds);
                    if (usuariosData) {
                      const usuariosMap = usuariosData.reduce((acc, user) => {
                        acc[user.id] = user.nome;
                        return acc;
                      }, {});
                      pedidosData = pedidosData.map((pedido) => ({
                        ...pedido,
                        usuario: pedido.usuario_id ? {
                          id: pedido.usuario_id,
                          nome: usuariosMap[pedido.usuario_id] || "Usuário não encontrado"
                        } : null
                      }));
                    }
                  }
                }
                setPedidos(pedidosData);
                setPedidosFiltrados(pedidosData);
                setContadorPedidosPendentes(pedidosData.length);
              } catch (error) {
                console.error("Erro ao carregar pedidos silencioso:", error);
              }
            };
            setTimeout(() => loadPedidosSilencioso(), 500);
          }
        ).subscribe((status) => {
          console.log(`📋 Status Realtime modal: ${status}`);
          if (status === "SUBSCRIBED") {
            console.log("✅ Realtime do modal ativo!");
          }
        });
      } catch (error) {
        console.error("Erro ao configurar Realtime do modal:", error);
      }
    };
    setTimeout(() => {
      setupModalRealtime();
    }, 100);
    return () => {
      if (modalSubscription) {
        modalSubscription.unsubscribe();
      }
    };
  }, [showPedidosModal]);
  if (isLoading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-center h-screen", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-32 w-32 border-b-2 border-primary-500" }) });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-dark overflow-hidden flex", style: { height: "100vh" }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showMenuPDV && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { width: 0, opacity: 0 },
        animate: { width: isExpanded ? "240px" : "72px", opacity: 1 },
        exit: { width: 0, opacity: 0 },
        transition: { duration: 0.3, ease: "easeInOut" },
        className: "flex-shrink-0 overflow-hidden",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { width: isExpanded ? "240px" : "72px" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Sidebar, {}) })
      }
    ) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      motion.div,
      {
        initial: { marginLeft: 0 },
        animate: { marginLeft: 0 },
        transition: { duration: 0.3, ease: "easeInOut" },
        className: "flex-1 bg-background-dark overflow-hidden",
        style: { height: "100vh" },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card border-b border-gray-800 h-14 flex items-center justify-between pl-2 pr-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1.5", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => {
                    setShowMenuPDV(!showMenuPDV);
                    if (!showMenuPDV && isExpanded) {
                      toggle();
                    }
                  },
                  className: "w-9 h-9 bg-gray-600/20 hover:bg-gray-500/30 border border-gray-600/20 hover:border-gray-500/40 rounded-full flex items-center justify-center text-gray-400 hover:text-gray-300 transition-all duration-200 group",
                  title: showMenuPDV ? "Ocultar menu" : "Mostrar menu",
                  children: showMenuPDV ? /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronLeft, { size: 16, className: "group-hover:scale-110 transition-transform" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRight, { size: 16, className: "group-hover:scale-110 transition-transform" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => {
                    if (isFullscreen) {
                      exitFullscreen();
                    } else {
                      enterFullscreen();
                    }
                  },
                  className: "w-9 h-9 bg-gray-600/20 hover:bg-gray-500/30 border border-gray-600/20 hover:border-gray-500/40 rounded-full flex items-center justify-center text-gray-400 hover:text-gray-300 transition-all duration-200 group",
                  title: isFullscreen ? "Sair do modo tela cheia" : "Entrar em tela cheia",
                  children: isFullscreen ? /* @__PURE__ */ jsxRuntimeExports.jsx(Minimize2, { size: 16, className: "group-hover:scale-110 transition-transform" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Maximize2, { size: 16, className: "group-hover:scale-110 transition-transform" })
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-4xl font-bold text-primary-400", children: formatCurrencyWithoutSymbol(calcularTotal()) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-right", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-400 flex items-center justify-end gap-1 mb-0.5", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 12 }),
                (userData == null ? void 0 : userData.nome) || "Usuário"
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400 font-mono", children: formatDateTime(currentDateTime) })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "div",
            {
              className: "flex overflow-hidden relative",
              style: { height: "calc(100vh - 56px)" },
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `${carrinho.length > 0 ? "w-[65%]" : "w-full"} p-4 flex flex-col h-full relative overflow-hidden transition-all duration-500`, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-full flex flex-col", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          type: "text",
                          placeholder: "Produto",
                          value: searchTerm,
                          onChange: (e) => setSearchTerm(e.target.value),
                          onKeyDown: handleSearchKeyPress,
                          autoFocus: true,
                          className: "w-full bg-gray-800/50 border border-gray-700 rounded py-2 pl-9 pr-12 text-white placeholder-gray-300 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(QrCode, { size: 18, className: "absolute left-2.5 top-1/2 -translate-y-1/2 text-gray-300" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "button",
                        {
                          onClick: abrirModalProdutos,
                          className: "absolute right-2.5 top-1/2 -translate-y-1/2 flex items-center gap-1 hover:bg-gray-700/50 rounded px-1 py-0.5 transition-colors",
                          title: "Abrir lista de produtos (F1)",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 14, className: "text-gray-300 hover:text-gray-200" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-gray-300 bg-gray-700 px-1 py-0.5 rounded", children: "F1" })
                          ]
                        }
                      ),
                      searchTerm.includes("*") && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-3 top-1/2 -translate-y-1/2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-primary-500 text-white text-xs px-2 py-1 rounded-full", children: [
                        "Qtd: ",
                        searchTerm.split("*")[0]
                      ] }) }),
                      (pdvConfig == null ? void 0 : pdvConfig.venda_codigo_barras) && codigoBarrasBuffer && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-3 top-1/2 -translate-y-1/2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-green-500 text-white text-xs px-2 py-1 rounded-full animate-pulse", children: [
                        "Código: ",
                        codigoBarrasBuffer
                      ] }) })
                    ] }),
                    (pdvConfig == null ? void 0 : pdvConfig.venda_codigo_barras) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-2 flex items-center gap-2 text-xs text-green-400", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-2 h-2 bg-green-400 rounded-full animate-pulse" }),
                      "Captura automática de código de barras ativa - Digite números para adicionar produtos"
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "div",
                    {
                      className: "flex-1 overflow-y-auto custom-scrollbar",
                      style: { paddingBottom: "50px" },
                      children: carrinho.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center text-gray-500", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(ShoppingCart, { size: 56, className: "mx-auto mb-3 opacity-50" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-base font-medium mb-2", children: "Carrinho vazio" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm", children: 'Use o botão "Produtos" para adicionar itens' })
                      ] }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: carrinho.map((item, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                        motion.div,
                        {
                          initial: { opacity: 0, y: 20 },
                          animate: { opacity: 1, y: 0 },
                          exit: { opacity: 0, y: -20 },
                          className: "bg-gray-800/50 rounded p-2.5",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2.5", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-5 h-5 bg-background-card border border-gray-700 rounded-full flex items-center justify-center flex-shrink-0 self-center shadow-lg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs font-medium text-gray-100", children: index2 + 1 }) }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "div",
                              {
                                className: "w-12 h-12 lg:w-10 lg:h-10 bg-gray-900 rounded overflow-hidden flex-shrink-0 cursor-pointer hover:opacity-80 transition-opacity relative self-start",
                                onClick: (e) => abrirGaleria(item.produto, e),
                                children: [
                                  getFotoPrincipal(item.produto) ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "img",
                                    {
                                      src: getFotoPrincipal(item.produto).url,
                                      alt: item.produto.nome,
                                      className: "w-full h-full object-cover"
                                    }
                                  ) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Package, { size: 14, className: "text-gray-700" }) }),
                                  item.produto.produto_fotos && item.produto.produto_fotos.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-0.5 left-0.5 bg-black/60 text-white text-xs px-1 py-0.5 rounded", children: item.produto.produto_fotos.length })
                                ]
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 min-w-0", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:grid lg:grid-cols-[1fr_auto_auto] lg:items-center lg:gap-4", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-start mb-2 lg:mb-0", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 min-w-0", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-1", children: itemEditandoNome === item.id ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                      "input",
                                      {
                                        type: "text",
                                        value: nomeEditando,
                                        onChange: (e) => setNomeEditando(e.target.value),
                                        onKeyDown: (e) => {
                                          if (e.key === "Enter") {
                                            finalizarEdicaoNome(item.id);
                                          } else if (e.key === "Escape") {
                                            cancelarEdicaoNome();
                                          }
                                        },
                                        onBlur: () => finalizarEdicaoNome(item.id),
                                        onFocus: (e) => {
                                          const input = e.target;
                                          setTimeout(() => {
                                            input.setSelectionRange(input.value.length, input.value.length);
                                          }, 0);
                                        },
                                        className: "flex-1 bg-gray-800 border border-gray-600 rounded px-2 py-1 text-white text-sm focus:outline-none focus:border-primary-500",
                                        autoFocus: true,
                                        style: { minWidth: "0" }
                                      }
                                    ),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                      "button",
                                      {
                                        onClick: () => finalizarEdicaoNome(item.id),
                                        className: "text-green-400 hover:text-green-300 transition-colors flex-shrink-0",
                                        title: "Confirmar edição",
                                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 14 })
                                      }
                                    )
                                  ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium text-sm line-clamp-1", children: item.produto.nome }),
                                    (pdvConfig == null ? void 0 : pdvConfig.editar_nome_produto) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                      "button",
                                      {
                                        onClick: () => iniciarEdicaoNome(item.id, item.produto.nome),
                                        className: "text-gray-500 hover:text-gray-300 transition-colors opacity-60 hover:opacity-100 flex-shrink-0",
                                        title: "Editar nome do produto",
                                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Pencil, { size: 12 })
                                      }
                                    )
                                  ] }) }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-xs text-gray-400", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                                      "Código ",
                                      item.produto.codigo
                                    ] }),
                                    item.produto.codigo_barras && item.produto.codigo_barras.trim() !== "" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx(QrCode, { size: 10, className: "text-gray-500" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: item.produto.codigo_barras })
                                    ] }),
                                    item.quantidade > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "bg-gray-700 px-1.5 py-0.5 rounded text-white font-medium", children: item.quantidade })
                                  ] }),
                                  item.pedido_origem_numero && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-green-400 mt-1 lg:mt-0", children: [
                                    "📦 Pedido #",
                                    item.pedido_origem_numero
                                  ] }),
                                  item.desconto && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-blue-400 mt-1 lg:mt-0", children: [
                                    "💰 ",
                                    item.desconto.tipo === "percentual" && item.desconto.percentualDesconto ? `${Math.round(item.desconto.percentualDesconto)}% OFF` : `${formatCurrency(item.desconto.valorDesconto)} OFF`,
                                    item.desconto.origemPedido && " (do pedido)"
                                  ] })
                                ] }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => confirmarRemocao(item.id),
                                    className: "text-red-400 hover:text-red-300 transition-colors ml-2 lg:hidden",
                                    title: "Remover item",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 14 })
                                  }
                                )
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "hidden lg:flex items-center gap-1.5", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => alterarQuantidade(item.id, item.quantidade - 1),
                                    className: "w-6 h-6 bg-gray-700 hover:bg-gray-600 rounded-full flex items-center justify-center text-white transition-colors",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Minus, { size: 10 })
                                  }
                                ),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium min-w-[1.2rem] text-center text-xs", children: item.quantidade }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => alterarQuantidade(item.id, item.quantidade + 1),
                                    className: "w-6 h-6 bg-primary-500/30 hover:bg-primary-500/50 rounded-full flex items-center justify-center text-white transition-colors",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 10 })
                                  }
                                ),
                                (pdvConfig == null ? void 0 : pdvConfig.desconto_no_item) && !item.desconto && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => abrirModalDesconto(item.id),
                                    className: "w-6 h-6 bg-yellow-600/20 hover:bg-yellow-600/40 rounded-full flex items-center justify-center text-yellow-200 transition-colors",
                                    title: "Aplicar desconto",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Percent, { size: 10 })
                                  }
                                ),
                                (pdvConfig == null ? void 0 : pdvConfig.desconto_no_item) && item.desconto && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => removerDesconto(item.id),
                                    className: "w-6 h-6 bg-red-600 hover:bg-red-700 rounded-full flex items-center justify-center text-white transition-colors",
                                    title: "Remover desconto",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 10 })
                                  }
                                ),
                                item.temOpcoesAdicionais && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => abrirOpcoesAdicionais(item),
                                    className: "w-6 h-6 bg-purple-600/20 hover:bg-purple-600/40 rounded-full flex items-center justify-center text-purple-200 transition-colors",
                                    title: "Opções adicionais",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 10 })
                                  }
                                ),
                                (pdvConfig == null ? void 0 : pdvConfig.observacao_no_item) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => abrirModalObservacao(item.id),
                                    className: "w-6 h-6 bg-blue-600/20 hover:bg-blue-600/40 rounded-full flex items-center justify-center text-blue-200 transition-colors",
                                    title: "Adicionar observação",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(MessageSquare, { size: 10 })
                                  }
                                )
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "hidden lg:flex items-center gap-3", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-right", children: item.desconto ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 justify-end mb-1", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400 line-through text-xs", children: formatCurrency(item.desconto.precoOriginal) }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 font-bold text-sm", children: formatCurrency(item.desconto.precoComDesconto) })
                                  ] }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white font-bold", children: formatCurrency(item.subtotal) })
                                ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white font-bold", children: formatCurrency(item.subtotal) }) }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => confirmarRemocao(item.id),
                                    className: "text-red-400 hover:text-red-300 transition-colors",
                                    title: "Remover item",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 14 })
                                  }
                                )
                              ] }),
                              item.adicionais && item.adicionais.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-3 pt-3 border-t border-gray-700/50", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between mb-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "inline-flex items-center gap-1 px-2 py-1 bg-purple-500/10 border border-purple-500/30 rounded-full text-sm text-purple-300 font-medium", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Adicionais" }) }) }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: item.adicionais.map((adicional, index22) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between bg-gray-800/30 rounded-lg p-2", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-2 flex-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-300 text-sm font-medium", children: adicional.nome }) }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        "button",
                                        {
                                          onClick: () => alterarQuantidadeAdicional(item.id, index22, adicional.quantidade - 1),
                                          className: "w-6 h-6 bg-gray-700 hover:bg-gray-600 rounded-full flex items-center justify-center text-white transition-colors",
                                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Minus, { size: 10 })
                                        }
                                      ),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium min-w-[1.5rem] text-center text-sm", children: adicional.quantidade }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        "button",
                                        {
                                          onClick: () => alterarQuantidadeAdicional(item.id, index22, adicional.quantidade + 1),
                                          className: "w-6 h-6 bg-purple-500/30 hover:bg-purple-500/50 rounded-full flex items-center justify-center text-white transition-colors",
                                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 10 })
                                        }
                                      )
                                    ] }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-purple-300 text-sm font-medium min-w-[4rem] text-right", children: adicional.preco > 0 ? `+${formatCurrency(adicional.preco * adicional.quantidade)}` : "Grátis" }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                      "button",
                                      {
                                        onClick: () => removerAdicional(item.id, index22),
                                        className: "w-6 h-6 bg-red-600/20 hover:bg-red-600/40 rounded-full flex items-center justify-center text-red-400 hover:text-red-300 transition-colors",
                                        title: "Remover adicional",
                                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 10 })
                                      }
                                    )
                                  ] })
                                ] }, index22)) })
                              ] }),
                              item.observacao && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `${item.adicionais && item.adicionais.length > 0 ? "mt-3" : "mt-3 pt-3 border-t border-gray-700/50"}`, children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between mb-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "inline-flex items-center gap-1 px-2 py-1 bg-blue-500/10 border border-blue-500/30 rounded-full text-sm text-blue-300 font-medium", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Observação" }) }) }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800/30 rounded-lg p-2", children: itemEditandoObservacao === item.id ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "input",
                                    {
                                      type: "text",
                                      value: observacaoEditando,
                                      onChange: (e) => setObservacaoEditando(e.target.value),
                                      onKeyDown: (e) => {
                                        if (e.key === "Enter") {
                                          finalizarEdicaoObservacao(item.id);
                                        } else if (e.key === "Escape") {
                                          cancelarEdicaoObservacao();
                                        }
                                      },
                                      onBlur: () => finalizarEdicaoObservacao(item.id),
                                      onFocus: (e) => {
                                        const input = e.target;
                                        setTimeout(() => {
                                          input.setSelectionRange(input.value.length, input.value.length);
                                        }, 0);
                                      },
                                      className: "flex-1 bg-gray-800 border border-gray-600 rounded px-2 py-1 text-white text-sm focus:outline-none focus:border-blue-500",
                                      autoFocus: true,
                                      placeholder: "Digite a observação..."
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => finalizarEdicaoObservacao(item.id),
                                      className: "text-green-400 hover:text-green-300 transition-colors flex-shrink-0",
                                      title: "Confirmar edição",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Check, { size: 14 })
                                    }
                                  )
                                ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-300 text-sm italic flex-1", children: item.observacao }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => iniciarEdicaoObservacao(item.id, item.observacao),
                                      className: "text-gray-500 hover:text-gray-300 transition-colors flex-shrink-0 ml-2",
                                      title: "Editar observação",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Pencil, { size: 12 })
                                    }
                                  )
                                ] }) })
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm lg:hidden mt-2", children: item.desconto ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400 line-through text-xs", children: formatCurrency(item.desconto.precoOriginal) }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 font-bold", children: formatCurrency(item.desconto.precoComDesconto) })
                              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 font-bold", children: formatCurrency(item.subtotal / item.quantidade) }) }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center mt-2 lg:hidden", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => alterarQuantidade(item.id, item.quantidade - 1),
                                      className: "w-8 h-8 bg-gray-700 hover:bg-gray-600 rounded-full flex items-center justify-center text-white transition-colors",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Minus, { size: 14 })
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium min-w-[2rem] text-center", children: item.quantidade }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => alterarQuantidade(item.id, item.quantidade + 1),
                                      className: "w-8 h-8 bg-primary-500/30 hover:bg-primary-500/50 rounded-full flex items-center justify-center text-white transition-colors",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 14 })
                                    }
                                  ),
                                  (pdvConfig == null ? void 0 : pdvConfig.desconto_no_item) && !item.desconto && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => abrirModalDesconto(item.id),
                                      className: "w-8 h-8 bg-yellow-600/20 hover:bg-yellow-600/40 rounded-full flex items-center justify-center text-yellow-200 transition-colors",
                                      title: "Aplicar desconto",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Percent, { size: 14 })
                                    }
                                  ),
                                  (pdvConfig == null ? void 0 : pdvConfig.desconto_no_item) && item.desconto && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => removerDesconto(item.id),
                                      className: "w-8 h-8 bg-red-600 hover:bg-red-700 rounded-full flex items-center justify-center text-white transition-colors",
                                      title: "Remover desconto",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 14 })
                                    }
                                  ),
                                  item.temOpcoesAdicionais && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => abrirOpcoesAdicionais(item),
                                      className: "w-8 h-8 bg-purple-600/20 hover:bg-purple-600/40 rounded-full flex items-center justify-center text-purple-200 transition-colors",
                                      title: "Opções adicionais",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 14 })
                                    }
                                  ),
                                  (pdvConfig == null ? void 0 : pdvConfig.observacao_no_item) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => abrirModalObservacao(item.id),
                                      className: "w-8 h-8 bg-blue-600/20 hover:bg-blue-600/40 rounded-full flex items-center justify-center text-blue-200 transition-colors",
                                      title: "Adicionar observação",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(MessageSquare, { size: 14 })
                                    }
                                  )
                                ] }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white font-bold", children: formatCurrency(item.subtotal) })
                              ] })
                            ] }) })
                          ] })
                        },
                        item.id
                      )) })
                    }
                  ),
                  !showFinalizacaoFinal && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute bottom-0 left-0 right-0 bg-background-card border-t border-gray-800 z-40", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-12 flex items-center", children: [
                    menuStartIndex > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: navegarMenuAnterior,
                        className: "w-9 h-full flex items-center justify-center text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors border-r border-gray-800",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronLeft, { size: 18 })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center h-full flex-1", children: menuPDVItems.slice(menuStartIndex, menuStartIndex + visibleMenuItems).map((item, index2) => {
                      const IconComponent = item.icon;
                      const originalIndex = menuStartIndex + index2;
                      const teclaAtalho = `F${originalIndex + 1}`;
                      return /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "button",
                        {
                          onClick: (e) => item.onClick(e),
                          className: `flex flex-col items-center justify-center text-gray-400 ${getColorClasses(item.color)} transition-all duration-200 h-full relative`,
                          style: { flex: "1 1 100px", minWidth: "100px" },
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx(IconComponent, { size: 18 }),
                              item.id === "pedidos" && contadorPedidosPendentes > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute -top-3 -right-10 bg-red-500 text-white text-sm rounded-full min-w-[22px] h-[22px] flex items-center justify-center font-bold border-2 border-background-card shadow-lg z-[60]", children: contadorPedidosPendentes > 99 ? "99+" : contadorPedidosPendentes }),
                              item.id === "movimentos" && contadorNfcePendentes > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute -top-3 -right-10 bg-yellow-500 text-white text-sm rounded-full min-w-[22px] h-[22px] flex items-center justify-center font-bold border-2 border-background-card shadow-lg z-[60]", children: contadorNfcePendentes > 99 ? "99+" : contadorNfcePendentes })
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 mt-0.5", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs whitespace-nowrap", children: item.label }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs bg-gray-700 px-1 py-0.5 rounded text-gray-300 font-mono", children: teclaAtalho })
                            ] })
                          ]
                        },
                        item.id
                      );
                    }) }),
                    menuStartIndex + visibleMenuItems < menuPDVItems.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: navegarMenuProximo,
                        className: "w-9 h-full flex items-center justify-center text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors border-l border-gray-800",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRight, { size: 18 })
                      }
                    )
                  ] }) })
                ] }) }),
                carrinho.length > 0 && (pedidosImportados.length > 0 || ((pdvConfig == null ? void 0 : pdvConfig.seleciona_clientes) || (pdvConfig == null ? void 0 : pdvConfig.vendedor) || (pdvConfig == null ? void 0 : pdvConfig.comandas) || (pdvConfig == null ? void 0 : pdvConfig.mesas) || (pdvConfig == null ? void 0 : pdvConfig.exibe_foto_item))) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                  motion.div,
                  {
                    initial: { x: "100%", opacity: 0 },
                    animate: { x: 0, opacity: 1 },
                    transition: {
                      type: "tween",
                      duration: 0.3,
                      ease: [0.25, 0.46, 0.45, 0.94]
                    },
                    className: `w-48 bg-background-card border-l border-gray-800 flex flex-col h-full ${showFinalizacaoFinal ? "z-20" : ""}`,
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 overflow-y-auto custom-scrollbar p-2 space-y-2", children: [
                      ((pdvConfig == null ? void 0 : pdvConfig.seleciona_clientes) || pedidosImportados.length > 0) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-blue-500/10 border border-blue-500/30 rounded p-2", children: (pdvConfig == null ? void 0 : pdvConfig.seleciona_clientes) ? clienteSelecionado ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 12, className: "text-blue-400" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-blue-400 font-medium", children: "Cliente" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white text-xs font-medium truncate", children: clienteSelecionado.nome }),
                        clienteSelecionado.telefone && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400", children: clienteSelecionado.telefone }),
                        pedidosImportados.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2 mt-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => setShowClienteModal(true),
                              className: "text-xs text-blue-400 hover:text-blue-300 transition-colors",
                              children: "Trocar"
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => {
                                setClienteSelecionado(null);
                                setCpfCnpjNota("");
                                setClienteEncontrado(null);
                                setDescontosCliente({ prazo: [], valor: [] });
                                setDescontoPrazoSelecionado(null);
                              },
                              className: "text-xs text-red-400 hover:text-red-300 transition-colors",
                              children: "Remover"
                            }
                          )
                        ] })
                      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "button",
                        {
                          onClick: () => setShowClienteModal(true),
                          className: "w-full text-left space-y-1 hover:bg-blue-500/20 transition-colors rounded p-1",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 12, className: "text-blue-400" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-blue-400 font-medium", children: "Cliente" })
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white text-xs", children: "Selecionar" })
                          ]
                        }
                      ) : (
                        /* Cliente dos pedidos importados */
                        pedidosImportados.length > 0 && ((_a2 = pedidosImportados[0]) == null ? void 0 : _a2.cliente) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 12, className: "text-blue-400" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-blue-400 font-medium", children: "Cliente dos Pedidos" })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white text-xs font-medium truncate", children: pedidosImportados[0].cliente.nome }),
                          pedidosImportados[0].cliente.telefone && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400", children: pedidosImportados[0].cliente.telefone }),
                          pedidosImportados[0].cliente.email && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-500 truncate", children: pedidosImportados[0].cliente.email })
                        ] })
                      ) }),
                      (pdvConfig == null ? void 0 : pdvConfig.vendedor) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-green-500/10 border border-green-500/30 rounded p-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(UserCheck, { size: 12, className: "text-green-400" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-green-400 font-medium", children: "Vendedor" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white text-xs font-medium", children: "Em desenvolvimento" })
                      ] }) }),
                      (pdvConfig == null ? void 0 : pdvConfig.comandas) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-yellow-500/10 border border-yellow-500/30 rounded p-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { size: 12, className: "text-yellow-400" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-yellow-400 font-medium", children: "Comanda" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white text-xs font-medium", children: "Em desenvolvimento" })
                      ] }) }),
                      (pdvConfig == null ? void 0 : pdvConfig.mesas) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-purple-500/10 border border-purple-500/30 rounded p-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(Grid3x3, { size: 12, className: "text-purple-400" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-purple-400 font-medium", children: "Mesa" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white text-xs font-medium", children: "Em desenvolvimento" })
                      ] }) }),
                      (pdvConfig == null ? void 0 : pdvConfig.exibe_foto_item) && carrinho.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-orange-500/10 border border-orange-500/30 rounded p-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(Camera, { size: 12, className: "text-orange-400" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-orange-400 font-medium", children: "Foto do Item" })
                        ] }),
                        (() => {
                          const ultimoItem = carrinho[carrinho.length - 1];
                          const fotoItem = getFotoPrincipal(ultimoItem == null ? void 0 : ultimoItem.produto);
                          return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white text-xs font-medium truncate", children: ultimoItem == null ? void 0 : ultimoItem.produto.nome }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-20 bg-gray-900 rounded overflow-hidden", children: fotoItem ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "img",
                              {
                                src: fotoItem.url,
                                alt: ultimoItem == null ? void 0 : ultimoItem.produto.nome,
                                className: "w-full h-full object-cover cursor-pointer hover:opacity-80 transition-opacity",
                                onClick: (e) => abrirGaleria(ultimoItem == null ? void 0 : ultimoItem.produto, e)
                              }
                            ) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Package, { size: 16, className: "text-gray-700" }) }) })
                          ] });
                        })()
                      ] }) }),
                      pedidosImportados.length === 0 && (descontosCliente.prazo.length > 0 || descontosCliente.valor.length > 0) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-blue-500/10 border border-blue-500/30 rounded p-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(Percent, { size: 12, className: "text-blue-400" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-blue-400 font-medium", children: "Opções de Faturamento" })
                        ] }),
                        descontosCliente.prazo.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400", children: "Prazo de Faturamento" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-2 gap-1", children: getDescontosPrazoDisponiveis().map((desconto, idx) => {
                            const isSelected = descontoPrazoSelecionado === desconto.id;
                            return /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "div",
                              {
                                className: `p-1 rounded border cursor-pointer transition-colors text-xs ${isSelected ? "bg-blue-500/20 border-blue-500 ring-1 ring-blue-500/50" : desconto.tipo === "desconto" ? "bg-green-500/10 border-green-500/30 hover:bg-green-500/20" : "bg-red-500/10 border-red-500/30 hover:bg-red-500/20"}`,
                                onClick: () => setDescontoPrazoSelecionado(isSelected ? null : desconto.id),
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative flex items-center justify-center", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-0.5", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white font-medium text-xs", children: [
                                      desconto.prazo_dias,
                                      "d"
                                    ] }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: `text-xs ${isSelected ? "text-blue-400" : desconto.tipo === "desconto" ? "text-green-400" : "text-red-400"}`, children: [
                                      desconto.tipo === "desconto" ? "+" : "-",
                                      desconto.percentual,
                                      "%"
                                    ] })
                                  ] }),
                                  isSelected && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "absolute right-0.5 text-xs text-blue-400", children: "✓" })
                                ] })
                              },
                              idx
                            );
                          }) })
                        ] }),
                        (() => {
                          const descontoValor = calcularDescontoPorValor(calcularTotal());
                          return descontoValor && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-1 pt-1 border-t border-blue-500/20", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400 mb-1", children: "Desconto por Valor" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `p-1 rounded border text-center text-xs ${descontoValor.tipo === "desconto" ? "bg-green-500/10 border-green-500/30" : "bg-red-500/10 border-red-500/30"}`, children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-white font-medium text-xs", children: [
                                "A partir de ",
                                formatCurrency(descontoValor.valorMinimo)
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `text-xs ${descontoValor.tipo === "desconto" ? "text-green-400" : "text-red-400"}`, children: [
                                descontoValor.tipo === "desconto" ? "+" : "-",
                                descontoValor.percentual,
                                "%"
                              ] })
                            ] })
                          ] });
                        })()
                      ] }) }),
                      pedidosImportados.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: pedidosImportados.map((pedido, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-green-500/10 border border-green-500/30 rounded p-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(ShoppingBag, { size: 12, className: "text-green-400" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-green-400 font-medium", children: "Pedido Importado" })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => {
                                setPedidoParaRemover(pedido);
                                setShowConfirmRemovePedidoImportado(true);
                              },
                              className: "text-red-400 hover:text-red-300 transition-colors",
                              title: "Remover pedido importado",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 12 })
                            }
                          )
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-white text-xs font-medium", children: [
                          "#",
                          pedido.numero
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-400", children: [
                          new Date(pedido.created_at).toLocaleDateString("pt-BR"),
                          " - ",
                          new Date(pedido.created_at).toLocaleTimeString("pt-BR", {
                            hour: "2-digit",
                            minute: "2-digit"
                          })
                        ] }),
                        pedido.usuario && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-500", children: pedido.usuario.nome }),
                        (pedido.desconto_prazo_id || (descontosCliente.prazo.length > 0 || descontosCliente.valor.length > 0)) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "border-t border-green-500/20 pt-1 mt-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 mb-1", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Percent, { size: 10, className: "text-green-400" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-green-400 font-medium", children: "Opções de Faturamento" })
                          ] }),
                          descontosCliente.prazo.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400", children: "Prazo de Faturamento" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-2 gap-1", children: descontosCliente.prazo.map((desconto, idx) => {
                              const isSelected = descontoPrazoSelecionado === desconto.id;
                              const wasOriginallySelected = pedido.desconto_prazo_id === desconto.id;
                              return /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "div",
                                {
                                  className: `p-1 rounded border cursor-pointer transition-colors text-xs ${isSelected ? "bg-blue-500/20 border-blue-500 ring-1 ring-blue-500/50" : wasOriginallySelected ? "bg-green-500/20 border-green-500/50 ring-1 ring-green-500/30" : desconto.tipo === "desconto" ? "bg-green-500/5 border-green-500/20 hover:bg-green-500/10" : "bg-red-500/5 border-red-500/20 hover:bg-red-500/10"}`,
                                  onClick: () => setDescontoPrazoSelecionado(isSelected ? null : desconto.id),
                                  children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative flex items-center justify-center", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-0.5", children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white font-medium text-xs", children: [
                                        desconto.prazo_dias,
                                        "d"
                                      ] }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: `text-xs ${isSelected ? "text-blue-400" : wasOriginallySelected ? "text-green-400" : desconto.tipo === "desconto" ? "text-green-400" : "text-red-400"}`, children: [
                                        desconto.tipo === "desconto" ? "-" : "+",
                                        "%",
                                        desconto.percentual
                                      ] })
                                    ] }),
                                    isSelected && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "absolute right-0.5 text-xs text-blue-400", children: "✓" }),
                                    !isSelected && wasOriginallySelected && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "absolute right-0.5 text-xs text-green-400", children: "Orig" })
                                  ] })
                                },
                                idx
                              );
                            }) })
                          ] }),
                          (() => {
                            const descontoValor = calcularDescontoPorValor(calcularTotal());
                            return descontoValor && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-1 pt-1 border-t border-green-500/20", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400 mb-1", children: "Desconto por Valor" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `p-1 rounded border text-center text-xs ${descontoValor.tipo === "desconto" ? "bg-green-500/10 border-green-500/30" : "bg-red-500/10 border-red-500/30"}`, children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-white font-medium text-xs", children: [
                                  "A partir de ",
                                  formatCurrency(descontoValor.valorMinimo)
                                ] }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `text-xs ${descontoValor.tipo === "desconto" ? "text-green-400" : "text-red-400"}`, children: [
                                  descontoValor.tipo === "desconto" ? "-" : "+",
                                  "%",
                                  descontoValor.percentual
                                ] })
                              ] })
                            ] });
                          })()
                        ] })
                      ] }) }, pedido.id)) })
                    ] })
                  }
                ),
                carrinho.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "div",
                  {
                    className: `flex-1 transition-all duration-300`,
                    style: {
                      display: "flex",
                      position: "relative",
                      height: "100%",
                      flexShrink: 0
                    },
                    children: [
                      !showFinalizacaoFinal && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        motion.div,
                        {
                          initial: { opacity: 0 },
                          animate: { opacity: 1 },
                          transition: { duration: 0.3 },
                          className: "w-full bg-background-card border-l border-gray-800 flex flex-col h-full transition-all duration-300",
                          style: {
                            position: "relative",
                            flexShrink: 0
                          },
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "div",
                              {
                                className: "flex-1 overflow-y-auto custom-scrollbar p-3",
                                style: { maxHeight: "calc(100vh - 200px)" },
                                children: [
                                  pedidosImportados.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-white mb-1.5", children: "Tipo de Pagamento" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1.5", children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                          "button",
                                          {
                                            onClick: () => {
                                              setTipoPagamento("vista");
                                              limparPagamentosParciais();
                                            },
                                            className: `flex-1 py-1.5 px-2.5 rounded border transition-colors text-sm ${tipoPagamento === "vista" ? "bg-gray-700 border-gray-600 text-white" : "bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600 hover:bg-gray-750"}`,
                                            children: "À Vista"
                                          }
                                        ),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                          "button",
                                          {
                                            onClick: () => {
                                              setTipoPagamento("parcial");
                                              setFormaPagamentoSelecionada(null);
                                            },
                                            className: `flex-1 py-1.5 px-2.5 rounded border transition-colors text-sm ${tipoPagamento === "parcial" ? "bg-gray-700 border-gray-600 text-white" : "bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600 hover:bg-gray-750"}`,
                                            children: "Parciais"
                                          }
                                        )
                                      ] })
                                    ] }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-white mb-1.5", children: tipoPagamento === "vista" ? "Forma de Pagamento" : "Formas de Pagamento" }),
                                      tipoPagamento === "vista" ? (
                                        // Pagamento à vista - interface compacta
                                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-2 gap-1.5", children: formasPagamento.map((forma) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                                          "button",
                                          {
                                            onClick: () => setFormaPagamentoSelecionada(forma.id),
                                            className: `p-2 rounded border transition-colors text-sm ${formaPagamentoSelecionada === forma.id ? "bg-gray-700 border-gray-600 text-white" : "bg-gray-800/50 border-gray-700 text-gray-300 hover:border-gray-600 hover:bg-gray-750"}`,
                                            children: forma.nome
                                          },
                                          forma.id
                                        )) })
                                      ) : (
                                        // Pagamentos parciais - interface compacta
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3", children: [
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-white mb-1.5", children: "Valor do Pagamento" }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                              "input",
                                              {
                                                type: "text",
                                                value: valorParcial,
                                                onChange: (e) => setValorParcial(formatCurrencyInput(e.target.value)),
                                                placeholder: `R$ 0,00 (vazio = ${formatCurrency(calcularTotalComDesconto() - calcularTotalPago() > 0 ? calcularTotalComDesconto() - calcularTotalPago() : 0)})`,
                                                className: "w-full bg-gray-800/50 border border-gray-700 rounded py-1.5 px-2.5 text-white text-sm focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                                              }
                                            ),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-500 mt-1", children: "💡 Deixe vazio para usar o valor restante automaticamente" })
                                          ] }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-2 gap-1.5", children: formasPagamento.map((forma) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            "button",
                                            {
                                              onClick: () => adicionarPagamentoParcial(
                                                forma.id,
                                                forma.nome,
                                                // Usar o nome da forma para exibição
                                                forma.nome.toLowerCase() === "dinheiro" ? "dinheiro" : "eletronico"
                                              ),
                                              className: "p-2 rounded border border-gray-700 bg-gray-800/50 text-gray-300 hover:border-gray-600 hover:bg-gray-750 transition-colors text-sm",
                                              children: forma.nome
                                            },
                                            forma.id
                                          )) }),
                                          pagamentosParciais.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1.5", children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs font-medium text-gray-400", children: "Pagamentos Adicionados:" }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                "button",
                                                {
                                                  onClick: confirmarLimparTodos,
                                                  className: "text-xs text-red-400 hover:text-red-300",
                                                  children: "Limpar Todos"
                                                }
                                              )
                                            ] }),
                                            pagamentosParciais.map((pagamento) => {
                                              const forma = formasPagamento.find((f2) => f2.id === pagamento.forma);
                                              return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center bg-gray-800/30 rounded p-1.5", children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white text-xs", children: (forma == null ? void 0 : forma.nome) || pagamento.forma }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 text-xs ml-2", children: formatCurrency(pagamento.valor) })
                                                ] }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                  "button",
                                                  {
                                                    onClick: () => confirmarRemocaoItem(pagamento.id),
                                                    className: "text-red-400 hover:text-red-300",
                                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 14 })
                                                  }
                                                )
                                              ] }, pagamento.id);
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 rounded p-2 space-y-1", children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between text-xs", children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Total da Venda:" }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium", children: formatCurrency(calcularTotalComDesconto()) })
                                              ] }),
                                              tipoPagamento === "parcial" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between text-xs font-bold", children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Restante:" }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: calcularRestante() > 0 ? "text-yellow-400" : "text-green-400", children: formatCurrency(calcularRestante()) })
                                              ] }),
                                              trocoCalculado > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center font-bold border-t border-gray-700 pt-1 mt-1", children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400 text-xs", children: "Troco:" }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-blue-400 text-sm font-extrabold", children: formatCurrency(trocoCalculado) })
                                              ] })
                                            ] })
                                          ] })
                                        ] })
                                      )
                                    ] })
                                  ] }),
                                  pedidosImportados.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-white mb-1.5", children: "Tipo de Pagamento" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1.5", children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                          "button",
                                          {
                                            onClick: () => {
                                              setTipoPagamento("vista");
                                              limparPagamentosParciais();
                                            },
                                            className: `flex-1 py-1.5 px-2.5 rounded border transition-colors text-sm ${tipoPagamento === "vista" ? "bg-gray-700 border-gray-600 text-white" : "bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600 hover:bg-gray-750"}`,
                                            children: "À Vista"
                                          }
                                        ),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                          "button",
                                          {
                                            onClick: () => {
                                              setTipoPagamento("parcial");
                                              setFormaPagamentoSelecionada(null);
                                            },
                                            className: `flex-1 py-1.5 px-2.5 rounded border transition-colors text-sm ${tipoPagamento === "parcial" ? "bg-gray-700 border-gray-600 text-white" : "bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600 hover:bg-gray-750"}`,
                                            children: "Parciais"
                                          }
                                        )
                                      ] })
                                    ] }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-white mb-1.5", children: tipoPagamento === "vista" ? "Forma de Pagamento" : "Formas de Pagamento" }),
                                      tipoPagamento === "vista" ? (
                                        // Pagamento à vista - interface compacta
                                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-2 gap-1.5", children: formasPagamento.map((forma) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                                          "button",
                                          {
                                            onClick: () => setFormaPagamentoSelecionada(forma.id),
                                            className: `p-2 rounded border transition-colors text-sm ${formaPagamentoSelecionada === forma.id ? "bg-gray-700 border-gray-600 text-white" : "bg-gray-800/50 border-gray-700 text-gray-300 hover:border-gray-600 hover:bg-gray-750"}`,
                                            children: forma.nome
                                          },
                                          forma.id
                                        )) })
                                      ) : (
                                        // Pagamentos parciais - interface compacta
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3", children: [
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-white mb-1.5", children: "Valor do Pagamento" }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                              "input",
                                              {
                                                type: "text",
                                                value: valorParcial,
                                                onChange: (e) => setValorParcial(formatCurrencyInput(e.target.value)),
                                                placeholder: `R$ 0,00 (vazio = ${formatCurrency(calcularTotalComDesconto() - calcularTotalPago() > 0 ? calcularTotalComDesconto() - calcularTotalPago() : 0)})`,
                                                className: "w-full bg-gray-800/50 border border-gray-700 rounded py-1.5 px-2.5 text-white text-sm focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                                              }
                                            ),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-500 mt-1", children: "💡 Deixe vazio para usar o valor restante automaticamente" })
                                          ] }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-2 gap-1.5", children: formasPagamento.map((forma) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            "button",
                                            {
                                              onClick: () => adicionarPagamentoParcial(
                                                forma.id,
                                                forma.nome,
                                                // Usar o nome da forma para exibição
                                                forma.nome.toLowerCase() === "dinheiro" ? "dinheiro" : "eletronico"
                                              ),
                                              className: "p-2 rounded border border-gray-700 bg-gray-800/50 text-gray-300 hover:border-gray-600 hover:bg-gray-750 transition-colors text-sm",
                                              children: forma.nome
                                            },
                                            forma.id
                                          )) }),
                                          pagamentosParciais.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1.5", children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs font-medium text-gray-400", children: "Pagamentos Adicionados:" }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                "button",
                                                {
                                                  onClick: confirmarLimparTodos,
                                                  className: "text-xs text-red-400 hover:text-red-300",
                                                  children: "Limpar Todos"
                                                }
                                              )
                                            ] }),
                                            pagamentosParciais.map((pagamento) => {
                                              const forma = formasPagamento.find((f2) => f2.id === pagamento.forma);
                                              return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center bg-gray-800/30 rounded p-1.5", children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white text-xs", children: (forma == null ? void 0 : forma.nome) || pagamento.forma }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 text-xs ml-2", children: formatCurrency(pagamento.valor) })
                                                ] }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                  "button",
                                                  {
                                                    onClick: () => confirmarRemocaoItem(pagamento.id),
                                                    className: "text-red-400 hover:text-red-300",
                                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 14 })
                                                  }
                                                )
                                              ] }, pagamento.id);
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 rounded p-2 space-y-1", children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between text-xs", children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Total da Venda:" }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium", children: formatCurrency(calcularTotalComDesconto()) })
                                              ] }),
                                              tipoPagamento === "parcial" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between text-xs font-bold", children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Restante:" }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: calcularRestante() > 0 ? "text-yellow-400" : "text-green-400", children: formatCurrency(calcularRestante()) })
                                              ] }),
                                              trocoCalculado > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center font-bold border-t border-gray-700 pt-1 mt-1", children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400 text-xs", children: "Troco:" }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-blue-400 text-sm font-extrabold", children: formatCurrency(trocoCalculado) })
                                              ] })
                                            ] })
                                          ] })
                                        ] })
                                      )
                                    ] })
                                  ] })
                                ]
                              }
                            ),
                            carrinho.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-3 bg-background-card flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800/50 rounded p-2.5 mb-1", children: (() => {
                              const subtotal = calcularTotal();
                              const totalFinal = calcularTotalComDesconto();
                              let descontoPrazo = null;
                              if (descontoPrazoSelecionado) {
                                const desconto = descontosCliente.prazo.find((d2) => d2.id === descontoPrazoSelecionado);
                                if (desconto) {
                                  const valorDesconto2 = subtotal * desconto.percentual / 100;
                                  descontoPrazo = {
                                    tipo: desconto.tipo,
                                    percentual: desconto.percentual,
                                    valor: valorDesconto2,
                                    prazo_dias: desconto.prazo_dias
                                  };
                                }
                              }
                              const subtotalComDescontoPrazo = descontoPrazo ? descontoPrazo.tipo === "desconto" ? subtotal - descontoPrazo.valor : subtotal + descontoPrazo.valor : subtotal;
                              const descontoValor = calcularDescontoPorValor(subtotalComDescontoPrazo);
                              return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center text-xs mb-1.5", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "Subtotal:" }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: formatCurrency(subtotal) })
                                ] }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center text-xs mb-1.5", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "Itens:" }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: carrinho.reduce((total, item) => total + item.quantidade, 0) })
                                ] }),
                                descontoPrazo && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center text-xs mb-1.5", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: `${descontoPrazo.tipo === "desconto" ? "text-blue-400" : "text-orange-400"}`, children: [
                                    descontoPrazo.tipo === "desconto" ? "Desconto" : "Acréscimo",
                                    " Prazo (",
                                    descontoPrazo.prazo_dias,
                                    "d):"
                                  ] }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: `${descontoPrazo.tipo === "desconto" ? "text-blue-400" : "text-orange-400"}`, children: [
                                    descontoPrazo.tipo === "desconto" ? "-" : "+",
                                    formatCurrency(descontoPrazo.valor)
                                  ] })
                                ] }),
                                descontoValor && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center text-xs mb-1.5", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: `${descontoValor.tipo === "desconto" ? "text-green-400" : "text-red-400"}`, children: [
                                    descontoValor.tipo === "desconto" ? "Desconto" : "Acréscimo",
                                    " (",
                                    descontoValor.percentual,
                                    "%):"
                                  ] }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: `${descontoValor.tipo === "desconto" ? "text-green-400" : "text-red-400"}`, children: [
                                    descontoValor.tipo === "desconto" ? "-" : "+",
                                    formatCurrency(descontoValor.valor)
                                  ] })
                                ] }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center mb-0 pt-1.5 border-t border-gray-700", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white text-sm", children: "Total da Venda:" }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-lg font-bold text-primary-400", children: formatCurrency(totalFinal) })
                                ] })
                              ] });
                            })() }) }),
                            carrinho.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "px-3 pt-1 pb-2 flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "button",
                                {
                                  onClick: () => setShowConfirmLimparTudoPDV(true),
                                  className: "flex-1 bg-gray-700 hover:bg-gray-600 border border-gray-600 text-white py-2 px-3 rounded transition-colors text-sm",
                                  children: "Cancelar"
                                }
                              ),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "button",
                                {
                                  onClick: () => {
                                    if (tipoPagamento === "vista") {
                                      if (!formaPagamentoSelecionada) {
                                        B.error("Selecione uma forma de pagamento");
                                        return;
                                      }
                                      setShowFinalizacaoFinal(true);
                                    } else {
                                      if (pagamentosParciais.length === 0) {
                                        B.error("Adicione pelo menos uma forma de pagamento");
                                        return;
                                      }
                                      const restante = calcularRestante();
                                      if (restante > 0) {
                                        B.error(`Ainda falta pagar ${formatCurrency(restante)}`);
                                        return;
                                      }
                                      setShowFinalizacaoFinal(true);
                                    }
                                  },
                                  disabled: tipoPagamento === "parcial" && calcularRestante() > 0,
                                  className: `flex-1 py-2 px-3 rounded border transition-colors text-sm ${tipoPagamento === "parcial" && calcularRestante() > 0 ? "bg-gray-600 border-gray-600 text-gray-400 cursor-not-allowed" : "bg-gray-700 hover:bg-gray-600 border-gray-600 text-white"}`,
                                  children: tipoPagamento === "parcial" && calcularRestante() > 0 ? `Falta ${formatCurrency(calcularRestante())}` : "Confirmar"
                                }
                              )
                            ] }) })
                          ]
                        }
                      ),
                      showFinalizacaoFinal && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        motion.div,
                        {
                          initial: { opacity: 0, scale: 0.95 },
                          animate: { opacity: 1, scale: 1 },
                          transition: { duration: 0.3 },
                          className: "w-full bg-background-card border-l border-gray-800 flex flex-col h-full",
                          style: {
                            position: "relative",
                            flexShrink: 0
                          },
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between px-4 py-3 border-b border-gray-800 flex-shrink-0", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-base font-semibold text-white", children: "Finalizar Venda" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "button",
                                {
                                  onClick: () => setShowFinalizacaoFinal(false),
                                  className: "text-gray-400 hover:text-white transition-colors",
                                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "div",
                              {
                                className: "flex-1 overflow-y-auto custom-scrollbar px-4 py-3",
                                style: { maxHeight: "calc(100vh - 120px)" },
                                children: [
                                  tipoPagamento === "vista" && formaPagamentoSelecionada || tipoPagamento === "parcial" && pagamentosParciais.length > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 rounded-lg p-3 mb-3", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm font-medium text-white mb-2", children: "Pagamentos:" }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-1", children: tipoPagamento === "vista" && formaPagamentoSelecionada ? (() => {
                                      const forma = formasPagamento.find((f2) => f2.id === formaPagamentoSelecionada);
                                      if (!forma) return null;
                                      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between py-1.5 px-2 bg-gray-700/30 rounded text-sm", children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium text-white", children: forma.nome }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium", children: formatCurrency(calcularTotalComDesconto()) })
                                      ] });
                                    })() : pagamentosParciais.map((pagamento, index2) => {
                                      const forma = formasPagamento.find((f2) => f2.id === pagamento.forma);
                                      if (!forma) return null;
                                      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between py-1.5 px-2 bg-gray-700/30 rounded text-sm", children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium text-white", children: forma.nome }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium", children: formatCurrency(pagamento.valor) })
                                      ] }, index2);
                                    }) })
                                  ] }) : null,
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800/50 rounded-lg p-3 mb-3", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1 text-sm", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between", children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Total:" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium", children: formatCurrency(calcularTotalComDesconto()) })
                                    ] }),
                                    tipoPagamento === "parcial" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between", children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Restante:" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: calcularRestante() > 0 ? "text-yellow-400" : "text-green-400", children: formatCurrency(calcularRestante()) })
                                    ] }),
                                    trocoCalculado > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center font-bold border-t border-gray-700 pt-1.5 mt-1.5", children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Troco:" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-blue-400 text-lg font-bold", children: formatCurrency(trocoCalculado) })
                                    ] })
                                  ] }) }),
                                  temBotaoNfceAtivo() && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-3", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-white mb-2", children: "Nota Fiscal Paulista" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                          "button",
                                          {
                                            onClick: () => handleTipoDocumentoChange("cpf"),
                                            className: `flex-1 py-2 px-3 rounded border transition-colors text-sm font-medium ${tipoDocumento === "cpf" ? "bg-primary-500 border-primary-500 text-white" : "bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600 hover:bg-gray-700"}`,
                                            children: "CPF"
                                          }
                                        ),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                          "button",
                                          {
                                            onClick: () => handleTipoDocumentoChange("cnpj"),
                                            className: `flex-1 py-2 px-3 rounded border transition-colors text-sm font-medium ${tipoDocumento === "cnpj" ? "bg-primary-500 border-primary-500 text-white" : "bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600 hover:bg-gray-700"}`,
                                            children: "CNPJ"
                                          }
                                        )
                                      ] })
                                    ] }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        "input",
                                        {
                                          type: "text",
                                          value: cpfCnpjNota,
                                          onChange: (e) => {
                                            handleCpfCnpjChange(e.target.value);
                                            if (erroValidacao) {
                                              setErroValidacao("");
                                            }
                                          },
                                          onBlur: validarDocumentoOnBlur,
                                          placeholder: tipoDocumento === "cpf" ? "000.000.000-00" : "00.000.000/0000-00",
                                          className: `w-full bg-gray-800/50 border rounded py-1.5 px-2 text-sm text-white focus:outline-none focus:ring-1 transition-colors ${erroValidacao ? "border-red-500 focus:border-red-500 focus:ring-red-500/20" : "border-gray-700 focus:border-primary-500 focus:ring-primary-500/20"}`
                                        }
                                      ),
                                      erroValidacao && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-1 text-xs text-red-400 flex items-center gap-1", children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "⚠️" }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: erroValidacao })
                                      ] })
                                    ] }),
                                    clienteEncontrado ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-green-500/20 border border-green-500/30 rounded p-2", children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 mb-1", children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(UserCheck, { size: 14, className: "text-green-400" }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-green-400 text-xs font-medium", children: "Cliente Encontrado" })
                                      ] }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white text-sm", children: clienteEncontrado.nome }),
                                      clienteEncontrado.telefone && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-gray-300 text-xs", children: clienteEncontrado.telefone })
                                    ] }) : cpfCnpjNota && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-600/20 border border-gray-600/30 rounded p-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14, className: "text-gray-400" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400 text-xs", children: "Consumidor Final" })
                                    ] }) })
                                  ] }) }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 pb-3", children: [
                                    !cpfCnpjNota && !deveOcultarFinalizacaoSimples() && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2", children: [
                                      !(pdvConfig == null ? void 0 : pdvConfig.ocultar_finalizar_com_impressao) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        "button",
                                        {
                                          onClick: () => {
                                            if (showProcessandoVenda) {
                                              console.log("🛑 FRONTEND: Bloqueando duplo clique - venda já está sendo processada");
                                              return;
                                            }
                                            finalizarVendaCompleta("finalizar_com_impressao");
                                          },
                                          disabled: showProcessandoVenda,
                                          className: `w-full py-2.5 px-3 rounded transition-colors border text-sm font-medium ${showProcessandoVenda ? "bg-gray-600/20 border-gray-600/30 text-gray-500 cursor-not-allowed" : "bg-green-900/20 hover:bg-green-800/30 text-green-300 border-green-800/30"}`,
                                          children: "Finalizar com Impressão"
                                        }
                                      ),
                                      !(pdvConfig == null ? void 0 : pdvConfig.ocultar_finalizar_sem_impressao) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        "button",
                                        {
                                          onClick: () => {
                                            if (showProcessandoVenda) {
                                              console.log("🛑 FRONTEND: Bloqueando duplo clique - venda já está sendo processada");
                                              return;
                                            }
                                            finalizarVendaCompleta("finalizar_sem_impressao");
                                          },
                                          disabled: showProcessandoVenda,
                                          className: `w-full py-2.5 px-3 rounded transition-colors border text-sm font-medium ${showProcessandoVenda ? "bg-gray-600/20 border-gray-600/30 text-gray-500 cursor-not-allowed" : "bg-green-800/20 hover:bg-green-700/30 text-green-400 border-green-700/30"}`,
                                          children: "Finalizar sem Impressão"
                                        }
                                      )
                                    ] }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2", children: [
                                      !(pdvConfig == null ? void 0 : pdvConfig.ocultar_nfce_com_impressao) && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                        "button",
                                        {
                                          onClick: () => {
                                            if (isDocumentoInvalido()) {
                                              B.error("CPF/CNPJ inválido. Corrija o documento para emitir NFC-e.");
                                              return;
                                            }
                                            if (showProcessandoVenda) {
                                              console.log("🛑 FRONTEND: Bloqueando duplo clique - venda já está sendo processada");
                                              return;
                                            }
                                            finalizarVendaCompleta("nfce_com_impressao");
                                          },
                                          disabled: isDocumentoInvalido() || showProcessandoVenda,
                                          className: `w-full py-2.5 px-3 rounded transition-colors border text-sm font-medium ${isDocumentoInvalido() || showProcessandoVenda ? "bg-gray-600/20 border-gray-600/30 text-gray-500 cursor-not-allowed" : "bg-blue-900/20 hover:bg-blue-800/30 text-blue-300 border-blue-800/30"}`,
                                          children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "NFC-e com Impressão" }),
                                            isDocumentoInvalido() && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400 mt-0.5", children: "CPF/CNPJ inválido" })
                                          ]
                                        }
                                      ),
                                      !(pdvConfig == null ? void 0 : pdvConfig.ocultar_nfce_sem_impressao) && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                        "button",
                                        {
                                          onClick: () => {
                                            if (isDocumentoInvalido()) {
                                              B.error("CPF/CNPJ inválido. Corrija o documento para emitir NFC-e.");
                                              return;
                                            }
                                            if (showProcessandoVenda) {
                                              console.log("🛑 FRONTEND: Bloqueando duplo clique - venda já está sendo processada");
                                              return;
                                            }
                                            finalizarVendaCompleta("nfce_sem_impressao");
                                          },
                                          disabled: isDocumentoInvalido() || showProcessandoVenda,
                                          className: `w-full py-2.5 px-3 rounded transition-colors border text-sm font-medium ${isDocumentoInvalido() || showProcessandoVenda ? "bg-gray-600/20 border-gray-600/30 text-gray-500 cursor-not-allowed" : "bg-blue-800/20 hover:bg-blue-700/30 text-blue-400 border-blue-700/30"}`,
                                          children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "NFC-e sem Impressão" }),
                                            isDocumentoInvalido() && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400 mt-0.5", children: "CPF/CNPJ inválido" })
                                          ]
                                        }
                                      ),
                                      false
                                    ] }),
                                    !cpfCnpjNota && !deveOcultarFinalizacaoSimples() && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: false })
                                  ] })
                                ]
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "border-t border-gray-800 px-4 py-3 flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "button",
                              {
                                onClick: () => setShowFinalizacaoFinal(false),
                                className: "w-full bg-gray-800/30 hover:bg-gray-700/50 text-gray-300 py-2.5 px-3 rounded transition-colors border border-gray-700/50 text-sm font-medium",
                                children: "← Voltar para Pagamento"
                              }
                            ) })
                          ]
                        }
                      )
                    ]
                  }
                )
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showClienteModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: () => setShowClienteModal(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Selecionar Cliente" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowClienteModal(false),
                          className: "text-gray-400 hover:text-white transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1.5 max-h-64 overflow-y-auto custom-scrollbar", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "button",
                        {
                          onClick: () => {
                            setClienteSelecionado(null);
                            setShowClienteModal(false);
                          },
                          className: "w-full text-left p-2.5 rounded bg-gray-800/50 hover:bg-gray-700/50 transition-colors",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white text-sm", children: "Venda sem cliente" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400", children: "Consumidor final" })
                          ]
                        }
                      ),
                      clientes.map((cliente) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => {
                            setClienteSelecionado(cliente);
                            setShowClienteModal(false);
                            carregarDescontosCliente(cliente.id);
                          },
                          className: "w-full text-left p-2.5 rounded bg-gray-800/50 hover:bg-gray-700/50 transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start justify-between gap-3", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 min-w-0", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white text-sm font-medium truncate", children: cliente.nome }),
                              cliente.email && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400 truncate", children: cliente.email })
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-right flex-shrink-0", children: [
                              cliente.telefone && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400", children: cliente.telefone }),
                              cliente.cpf && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500", children: [
                                "CPF: ",
                                cliente.cpf.slice(-4)
                              ] }),
                              cliente.cnpj && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500", children: [
                                "CNPJ: ",
                                cliente.cnpj.slice(-4)
                              ] })
                            ] })
                          ] })
                        },
                        cliente.id
                      ))
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showPagamentoModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: () => setShowPagamentoModal(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-lg mx-4",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold text-white", children: "Finalizar Pagamento" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowPagamentoModal(false),
                          className: "text-gray-400 hover:text-white transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 rounded-lg p-4 mb-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center mb-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Total da Venda:" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-2xl font-bold text-primary-400", children: formatCurrency(calcularTotal()) })
                        ] }),
                        clienteSelecionado && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Cliente:" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: clienteSelecionado.nome })
                        ] }),
                        pedidosImportados.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Pedidos:" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-green-400", children: pedidosImportados.map((p2) => `#${p2.numero}`).join(", ") })
                        ] })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-3", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("button", { className: "bg-green-500/20 border border-green-500/30 text-green-400 p-4 rounded-lg hover:bg-green-500/30 transition-colors flex flex-col items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(DollarSign, { size: 24 }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "Dinheiro" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("button", { className: "bg-blue-500/20 border border-blue-500/30 text-blue-400 p-4 rounded-lg hover:bg-blue-500/30 transition-colors flex flex-col items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(CreditCard, { size: 24 }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "Cartão" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("button", { className: "bg-purple-500/20 border border-purple-500/30 text-purple-400 p-4 rounded-lg hover:bg-purple-500/30 transition-colors flex flex-col items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(Calculator, { size: 24 }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "PIX" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("button", { className: "bg-orange-500/20 border border-orange-500/30 text-orange-400 p-4 rounded-lg hover:bg-orange-500/30 transition-colors flex flex-col items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(Receipt, { size: 24 }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "Fiado" })
                        ] })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowPagamentoModal(false),
                          className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors",
                          children: "Cancelar"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => {
                            if (showProcessandoVenda) {
                              console.log("🛑 FRONTEND: Bloqueando duplo clique - venda já está sendo processada");
                              return;
                            }
                            setShowPagamentoModal(false);
                            finalizarVendaCompleta("finalizar_sem_impressao");
                          },
                          disabled: showProcessandoVenda,
                          className: `flex-1 py-3 px-4 rounded-lg transition-colors ${showProcessandoVenda ? "bg-gray-600 text-gray-400 cursor-not-allowed" : "bg-primary-500 hover:bg-primary-600 text-white"}`,
                          children: "Confirmar Venda"
                        }
                      )
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showConfirmModal && itemParaRemover && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: cancelarRemocao,
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Confirmar Remoção" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: cancelarRemocao,
                          className: "text-gray-400 hover:text-white transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-300", children: "Tem certeza que deseja remover este item do carrinho?" }),
                      (() => {
                        const item = carrinho.find((item2) => item2.id === itemParaRemover);
                        return item ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-3 p-3 bg-gray-800/50 rounded-lg", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white font-medium", children: item.produto.nome }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-gray-400", children: [
                            "Quantidade: ",
                            item.quantidade,
                            " | Total: ",
                            formatCurrency(item.subtotal)
                          ] })
                        ] }) : null;
                      })()
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: cancelarRemocao,
                          className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors",
                          children: "Cancelar"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => itemParaRemover && removerDoCarrinho(itemParaRemover),
                          className: "flex-1 bg-red-500 hover:bg-red-600 text-white py-3 px-4 rounded-lg transition-colors",
                          children: "Remover"
                        }
                      )
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showLimparCarrinhoModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: () => setShowLimparCarrinhoModal(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-lg mx-4 max-h-[80vh] overflow-y-auto",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Limpar Carrinho" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowLimparCarrinhoModal(false),
                          className: "text-gray-400 hover:text-white transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-300 mb-4", children: "Tem certeza que deseja remover todos os itens do carrinho?" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 rounded-lg p-4 mb-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center mb-3", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium", children: "Total de itens:" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 font-bold", children: carrinho.reduce((total, item) => total + item.quantidade, 0) })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium", children: "Valor total:" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 font-bold text-lg", children: formatCurrency(calcularTotal()) })
                        ] })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 max-h-48 overflow-y-auto custom-scrollbar", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm text-gray-400 mb-2", children: "Itens que serão removidos:" }),
                        carrinho.map((item, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800/30 rounded-lg p-3", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-start", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white font-medium text-sm", children: item.produto.nome }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-400", children: [
                              "Qtd: ",
                              item.quantidade,
                              " × ",
                              formatCurrency(item.produto.preco)
                            ] })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-primary-400 font-bold text-sm", children: formatCurrency(item.subtotal) })
                        ] }) }, item.id))
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowLimparCarrinhoModal(false),
                          className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors",
                          children: "Cancelar"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: limparCarrinho,
                          className: "flex-1 bg-red-500 hover:bg-red-600 text-white py-3 px-4 rounded-lg transition-colors",
                          children: "Limpar Carrinho"
                        }
                      )
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showGaleriaModal && produtoSelecionadoGaleria && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/90 flex items-center justify-center z-50",
              onClick: fecharGaleria,
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "relative w-full h-full flex items-center justify-center p-4",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: fecharGaleria,
                        className: "absolute top-4 right-4 z-10 bg-black/50 text-white p-2 rounded-full hover:bg-black/70 transition-colors",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 24 })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute top-4 left-4 z-10 bg-black/50 text-white p-3 rounded-lg", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-bold text-lg", children: produtoSelecionadoGaleria.nome }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-300", children: [
                        "Foto ",
                        fotoAtualIndex + 1,
                        " de ",
                        ((_b2 = produtoSelecionadoGaleria.produto_fotos) == null ? void 0 : _b2.length) || 0
                      ] })
                    ] }),
                    produtoSelecionadoGaleria.produto_fotos && produtoSelecionadoGaleria.produto_fotos.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: fotoAnterior,
                        className: "absolute left-4 top-1/2 -translate-y-1/2 z-10 bg-black/50 text-white p-3 rounded-full hover:bg-black/70 transition-colors",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronLeft, { size: 24 })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "max-w-4xl max-h-full flex items-center justify-center", children: produtoSelecionadoGaleria.produto_fotos && produtoSelecionadoGaleria.produto_fotos[fotoAtualIndex] ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "img",
                      {
                        src: produtoSelecionadoGaleria.produto_fotos[fotoAtualIndex].url,
                        alt: `${produtoSelecionadoGaleria.nome} - Foto ${fotoAtualIndex + 1}`,
                        className: "max-w-full max-h-full object-contain rounded-lg"
                      }
                    ) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-96 h-96 bg-gray-800 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Package, { size: 48, className: "text-gray-600" }) }) }),
                    produtoSelecionadoGaleria.produto_fotos && produtoSelecionadoGaleria.produto_fotos.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: proximaFoto,
                        className: "absolute right-4 top-1/2 -translate-y-1/2 z-10 bg-black/50 text-white p-3 rounded-full hover:bg-black/70 transition-colors",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRight, { size: 24 })
                      }
                    ),
                    produtoSelecionadoGaleria.produto_fotos && produtoSelecionadoGaleria.produto_fotos.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute bottom-4 left-1/2 -translate-x-1/2 z-10", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex gap-2 bg-black/50 p-2 rounded-lg", children: produtoSelecionadoGaleria.produto_fotos.map((foto, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => setFotoAtualIndex(index2),
                        className: `w-12 h-12 rounded border-2 overflow-hidden transition-all ${index2 === fotoAtualIndex ? "border-primary-400 scale-110" : "border-gray-600 hover:border-gray-400"}`,
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "img",
                          {
                            src: foto.url,
                            alt: `Miniatura ${index2 + 1}`,
                            className: "w-full h-full object-cover"
                          }
                        )
                      },
                      index2
                    )) }) })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showPedidosModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: `fixed inset-0 z-50 flex items-center justify-center ${isFullscreen ? "bg-background-dark p-0" : "bg-black/50 p-4"}`,
              onClick: () => {
                setShowPedidosModal(false);
                setSearchPedidos("");
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: `bg-background-card border border-gray-800 flex flex-col ${isFullscreen ? "w-full h-full rounded-none" : "rounded-lg w-full max-w-4xl mx-4 max-h-[80vh]"}`,
                  onClick: (e) => e.stopPropagation(),
                  "data-modal": "pedidos",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-shrink-0 p-6 border-b border-gray-800", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: statusFilterPedidos === "todos" ? "Todos os Pedidos" : statusFilterPedidos === "pendente" ? "Pedidos Pendentes" : statusFilterPedidos === "faturado" ? "Pedidos Faturados" : statusFilterPedidos === "cancelado" ? "Pedidos Cancelados" : "Pedidos" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-2 h-2 bg-green-400 rounded-full animate-pulse" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-green-400", children: "Atualização automática" })
                          ] })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => setShowFiltersPedidos(!showFiltersPedidos),
                              className: "text-gray-400 hover:text-white transition-colors p-1",
                              title: "Filtros",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(Filter, { size: 18 })
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => {
                                if (isFullscreen) {
                                  exitFullscreen();
                                } else {
                                  enterFullscreen();
                                }
                              },
                              className: "w-8 h-8 bg-gray-600/20 hover:bg-gray-500/30 border border-gray-600/20 hover:border-gray-500/40 rounded-full flex items-center justify-center text-gray-400 hover:text-gray-300 transition-all duration-200 group",
                              title: isFullscreen ? "Sair do modo tela cheia" : "Entrar em tela cheia",
                              children: isFullscreen ? /* @__PURE__ */ jsxRuntimeExports.jsx(Minimize2, { size: 16, className: "group-hover:scale-110 transition-transform" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Maximize2, { size: 16, className: "group-hover:scale-110 transition-transform" })
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => {
                                setShowPedidosModal(false);
                                setSearchPedidos("");
                                setStatusFilterPedidos("pendente");
                                setShowFiltersPedidos(false);
                              },
                              className: "text-gray-400 hover:text-white transition-colors",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                            }
                          )
                        ] })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative mb-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 20, className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            placeholder: "Pesquisar por número do pedido, cliente ou telefone...",
                            value: searchPedidos,
                            onChange: (e) => filtrarPedidos(e.target.value),
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showFiltersPedidos && /* @__PURE__ */ jsxRuntimeExports.jsx(
                        motion.div,
                        {
                          initial: { height: 0, opacity: 0 },
                          animate: { height: "auto", opacity: 1 },
                          exit: { height: 0, opacity: 0 },
                          className: "overflow-hidden mb-4",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800/50 border border-gray-700 rounded-lg p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Status do Pedido" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-wrap gap-2", children: [
                              { value: "pendente", label: "Pendentes", count: contadorPedidosPendentes },
                              { value: "faturado", label: "Faturados", count: pedidos.filter((p2) => p2.status === "faturado").length },
                              { value: "cancelado", label: "Cancelados", count: pedidos.filter((p2) => p2.status === "cancelado").length },
                              { value: "todos", label: "Todos", count: pedidos.length }
                            ].map((status) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "button",
                              {
                                onClick: () => filtrarPedidosPorStatus(status.value),
                                className: `px-3 py-1 rounded-full text-xs font-medium flex items-center gap-1 ${statusFilterPedidos === status.value ? "bg-primary-500 text-white" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`,
                                children: [
                                  status.label,
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `px-1.5 py-0.5 rounded-full text-xs ${statusFilterPedidos === status.value ? "bg-white/20 text-white" : "bg-gray-600 text-gray-300"}`, children: status.count })
                                ]
                              },
                              status.value
                            )) })
                          ] }) })
                        }
                      ) })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-y-auto custom-scrollbar p-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-4", children: pedidosFiltrados.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-8", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(ShoppingBag, { size: 48, className: "mx-auto mb-4 text-gray-500" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: searchPedidos ? "Nenhum pedido encontrado para esta pesquisa" : statusFilterPedidos === "pendente" ? "Nenhum pedido pendente encontrado" : statusFilterPedidos === "faturado" ? "Nenhum pedido faturado encontrado" : statusFilterPedidos === "cancelado" ? "Nenhum pedido cancelado encontrado" : "Nenhum pedido encontrado" }),
                      (searchPedidos || statusFilterPedidos !== "pendente") && /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => {
                            setSearchPedidos("");
                            setStatusFilterPedidos("pendente");
                            aplicarFiltrosPedidos();
                          },
                          className: "mt-2 text-primary-400 hover:text-primary-300 text-sm",
                          children: searchPedidos ? "Limpar pesquisa" : "Ver pedidos pendentes"
                        }
                      )
                    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `grid gap-4 ${isFullscreen ? "grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5" : "grid-cols-1 sm:grid-cols-2 lg:grid-cols-3"}`, children: pedidosFiltrados.map((pedido) => {
                      var _a3;
                      return /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "div",
                        {
                          className: "bg-gray-800/50 rounded-lg p-4 border border-gray-700 hover:border-gray-600 transition-colors flex flex-col h-full",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2 mb-3", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-white font-medium text-sm", children: [
                                  "Pedido #",
                                  pedido.numero
                                ] }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(pedido.status).replace("text-", "bg-").replace("-400", "-500/20").replace("-500", "-500/20").replace("-600", "-600/20")} ${getStatusColor(pedido.status)}`, children: getStatusText(pedido.status) })
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-primary-400 font-bold text-lg", children: formatCurrency(pedido.valor_total) })
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 space-y-2 mb-3", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-gray-400 truncate", children: [
                                "Cliente: ",
                                ((_a3 = pedido.cliente) == null ? void 0 : _a3.nome) || "Consumidor Final"
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-500", children: new Date(pedido.created_at).toLocaleString("pt-BR", {
                                day: "2-digit",
                                month: "2-digit",
                                year: "2-digit",
                                hour: "2-digit",
                                minute: "2-digit"
                              }) }),
                              pedido.usuario && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500 truncate", children: [
                                "Vendedor: ",
                                pedido.usuario.nome
                              ] })
                            ] }),
                            pedido.pedidos_itens && pedido.pedidos_itens.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 mb-3", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-400 font-medium mb-1", children: [
                                "Itens (",
                                pedido.pedidos_itens.length,
                                "):"
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1 max-h-20 overflow-y-auto custom-scrollbar", children: [
                                pedido.pedidos_itens.slice(0, 2).map((item, index2) => {
                                  var _a4, _b3, _c2;
                                  const temDesconto = ((_a4 = item.produto) == null ? void 0 : _a4.preco) && item.valor_unitario < item.produto.preco;
                                  const temPromocao = (_b3 = item.produto) == null ? void 0 : _b3.promocao;
                                  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-start", children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-gray-500 truncate flex-1 mr-2", children: [
                                        item.quantidade,
                                        "x ",
                                        (_c2 = item.produto) == null ? void 0 : _c2.nome
                                      ] }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 flex-shrink-0", children: formatCurrency(item.valor_unitario * item.quantidade) })
                                    ] }),
                                    (temDesconto || temPromocao) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs mt-0.5", children: [
                                      temPromocao && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-green-400", children: "🏷️ Promoção" }),
                                      temDesconto && !temPromocao && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-blue-400", children: "💰 Desconto" })
                                    ] })
                                  ] }, index2);
                                }),
                                pedido.pedidos_itens.length > 2 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500 italic", children: [
                                  "+",
                                  pedido.pedidos_itens.length - 2,
                                  " item(s) a mais..."
                                ] })
                              ] })
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2 mt-auto", children: [
                              pedido.status === "pendente" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "button",
                                {
                                  onClick: () => importarPedidoParaCarrinho(pedido),
                                  className: "w-full px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded text-xs transition-colors font-medium",
                                  children: "Importar para Carrinho"
                                }
                              ),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: async () => {
                                      const url = await gerarLinkPedido(pedido);
                                      if (url) {
                                        window.open(url, "_blank");
                                      }
                                    },
                                    className: "flex-1 px-3 py-1.5 bg-blue-500/80 hover:bg-blue-600/90 text-white rounded text-xs transition-colors",
                                    title: "Abrir nota de pedido em nova página",
                                    children: "Abrir"
                                  }
                                ),
                                false
                              ] })
                            ] })
                          ]
                        },
                        pedido.id
                      );
                    }) }) }) })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showDetalhePedido && pedidoDetalhado && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: () => {
                setShowDetalhePedido(false);
                setPedidoDetalhado(null);
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 w-full max-w-4xl mx-4 max-h-[90vh] flex flex-col",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-shrink-0 p-6 border-b border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { size: 24, className: "text-primary-400" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold text-white", children: "Detalhes do Pedido" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: "Visualização completa" })
                        ] })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => {
                            setShowDetalhePedido(false);
                            setPedidoDetalhado(null);
                          },
                          className: "text-gray-400 hover:text-white transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                        }
                      )
                    ] }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-y-auto custom-scrollbar p-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 rounded-lg p-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("h4", { className: "text-lg font-medium text-white mb-4 flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(Receipt, { size: 18, className: "text-primary-400" }),
                          "Informações Gerais"
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm text-gray-400", children: "Número do Pedido" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-white font-medium", children: [
                              "#",
                              pedidoDetalhado.numero
                            ] })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm text-gray-400", children: "Status" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: `font-medium ${getStatusColor(pedidoDetalhado.status)}`, children: getStatusText(pedidoDetalhado.status) })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm text-gray-400", children: "Data de Criação" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: formatarDataHora2(pedidoDetalhado.created_at) })
                          ] }),
                          pedidoDetalhado.data_faturamento && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm text-gray-400", children: "Data de Faturamento" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: formatarDataHora2(pedidoDetalhado.data_faturamento) })
                          ] }),
                          pedidoDetalhado.usuario && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm text-gray-400", children: "Criado por" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: pedidoDetalhado.usuario.nome })
                          ] })
                        ] })
                      ] }),
                      pedidoDetalhado.cliente && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 rounded-lg p-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("h4", { className: "text-lg font-medium text-white mb-4 flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 18, className: "text-blue-400" }),
                          "Informações do Cliente"
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm text-gray-400", children: "Nome" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white font-medium", children: pedidoDetalhado.cliente.nome })
                          ] }),
                          pedidoDetalhado.cliente.telefone && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm text-gray-400", children: "Telefone" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: pedidoDetalhado.cliente.telefone })
                          ] }),
                          pedidoDetalhado.cliente.documento && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm text-gray-400", children: pedidoDetalhado.cliente.tipo_documento === "CNPJ" ? "CNPJ" : "CPF" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: pedidoDetalhado.cliente.documento })
                          ] }),
                          pedidoDetalhado.cliente.razao_social && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm text-gray-400", children: "Razão Social" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: pedidoDetalhado.cliente.razao_social })
                          ] }),
                          pedidoDetalhado.cliente.nome_fantasia && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm text-gray-400", children: "Nome Fantasia" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: pedidoDetalhado.cliente.nome_fantasia })
                          ] })
                        ] })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 rounded-lg p-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("h4", { className: "text-lg font-medium text-white mb-4 flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(Package, { size: 18, className: "text-green-400" }),
                          "Itens do Pedido (",
                          ((_c = pedidoDetalhado.pedidos_itens) == null ? void 0 : _c.length) || 0,
                          ")"
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "overflow-x-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("table", { className: "w-full text-sm", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { className: "text-xs uppercase bg-gray-700/50 text-gray-400", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-left", children: "Produto" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-center", children: "Qtde" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-right", children: "Valor Unit." }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-right", children: "Subtotal" })
                          ] }) }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { children: (_d = pedidoDetalhado.pedidos_itens) == null ? void 0 : _d.map((item) => {
                            var _a3, _b3, _c2;
                            return /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "border-b border-gray-700", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-medium text-white", children: (_a3 = item.produto) == null ? void 0 : _a3.nome }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-gray-400", children: [
                                  "Cód: ",
                                  (_b3 = item.produto) == null ? void 0 : _b3.codigo,
                                  ((_c2 = item.produto) == null ? void 0 : _c2.codigo_barras) && ` | Barras: ${item.produto.codigo_barras}`
                                ] }),
                                item.observacao && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-yellow-400 mt-1", children: [
                                  "Obs: ",
                                  item.observacao
                                ] })
                              ] }) }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 text-center text-white", children: item.quantidade }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 text-right text-white", children: formatCurrency(item.valor_unitario) }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 text-right text-white font-medium", children: formatCurrency(item.valor_total) })
                            ] }, item.id);
                          }) })
                        ] }) })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 rounded-lg p-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("h4", { className: "text-lg font-medium text-white mb-4 flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(DollarSign, { size: 18, className: "text-primary-400" }),
                          "Resumo Financeiro"
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Subtotal:" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: formatCurrency(pedidoDetalhado.valor_subtotal || 0) })
                          ] }),
                          pedidoDetalhado.valor_desconto > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Desconto:" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-red-400", children: [
                              "-",
                              formatCurrency(pedidoDetalhado.valor_desconto)
                            ] })
                          ] }),
                          pedidoDetalhado.valor_acrescimo > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Acréscimo:" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-green-400", children: [
                              "+",
                              formatCurrency(pedidoDetalhado.valor_acrescimo)
                            ] })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "border-t border-gray-700 pt-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium", children: "Total:" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 font-bold text-lg", children: formatCurrency(pedidoDetalhado.valor_total) })
                          ] }) })
                        ] })
                      ] })
                    ] }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-shrink-0 p-6 border-t border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3 justify-end", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => {
                            setShowDetalhePedido(false);
                            setPedidoDetalhado(null);
                          },
                          className: "px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors",
                          children: "Fechar"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: async () => {
                            const url = await gerarLinkPedido(pedidoDetalhado);
                            if (url) {
                              window.open(url, "_blank");
                            }
                          },
                          className: "px-4 py-2 bg-blue-500/80 hover:bg-blue-600/90 text-white rounded-lg transition-colors",
                          title: "Abrir nota de pedido em nova página",
                          children: "Abrir"
                        }
                      ),
                      (pedidoDetalhado == null ? void 0 : pedidoDetalhado.status) === "pendente" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => {
                            importarPedidoParaCarrinho(pedidoDetalhado);
                            setShowDetalhePedido(false);
                            setPedidoDetalhado(null);
                          },
                          className: "px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors",
                          children: "Importar para Carrinho"
                        }
                      )
                    ] }) })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showMesasModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: () => setShowMesasModal(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-4xl mx-4 max-h-[80vh] overflow-y-auto",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Controle de Mesas" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowMesasModal(false),
                          className: "text-gray-400 hover:text-white transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-3", children: Array.from({ length: 24 }, (_2, i) => i + 1).map((numeroMesa) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "div",
                        {
                          className: "aspect-square bg-gray-800/50 hover:bg-gray-700/50 border border-gray-700 hover:border-gray-600 rounded-lg flex flex-col items-center justify-center cursor-pointer transition-all group",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Table, { size: 24, className: "text-gray-400 group-hover:text-white mb-1" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-sm font-medium text-gray-300 group-hover:text-white", children: [
                              "Mesa ",
                              numeroMesa
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-green-400", children: "Livre" })
                          ]
                        },
                        numeroMesa
                      )) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-center gap-6 pt-4 border-t border-gray-800", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-3 h-3 bg-green-400 rounded-full" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400", children: "Livre" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-3 h-3 bg-yellow-400 rounded-full" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400", children: "Ocupada" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-3 h-3 bg-red-400 rounded-full" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400", children: "Reservada" })
                        ] })
                      ] })
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showComandasModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: () => setShowComandasModal(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-2xl mx-4 max-h-[80vh] overflow-y-auto",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Comandas/Mesas Abertas" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowComandasModal(false),
                          className: "text-gray-400 hover:text-white transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-8", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { size: 48, className: "mx-auto mb-4 text-gray-500" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhuma comanda ou mesa aberta no momento" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "mt-4 px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-lg transition-colors", children: "Nova Comanda" })
                    ] }) })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showSangriaModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: () => setShowSangriaModal(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Sangria" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowSangriaModal(false),
                          className: "text-gray-400 hover:text-white transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Valor da Sangria" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            placeholder: "R$ 0,00",
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-red-500 focus:ring-1 focus:ring-red-500/20"
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Motivo" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "textarea",
                          {
                            placeholder: "Descreva o motivo da sangria...",
                            rows: 3,
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-red-500 focus:ring-1 focus:ring-red-500/20"
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => setShowSangriaModal(false),
                            className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors",
                            children: "Cancelar"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => {
                              B.success("Sangria registrada com sucesso!");
                              setShowSangriaModal(false);
                            },
                            className: "flex-1 bg-red-500 hover:bg-red-600 text-white py-3 px-4 rounded-lg transition-colors",
                            children: "Registrar Sangria"
                          }
                        )
                      ] })
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showSuprimentoModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: () => setShowSuprimentoModal(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Suprimento" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowSuprimentoModal(false),
                          className: "text-gray-400 hover:text-white transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Valor do Suprimento" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            placeholder: "R$ 0,00",
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-green-500 focus:ring-1 focus:ring-green-500/20"
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Motivo" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "textarea",
                          {
                            placeholder: "Descreva o motivo do suprimento...",
                            rows: 3,
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-green-500 focus:ring-1 focus:ring-green-500/20"
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => setShowSuprimentoModal(false),
                            className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors",
                            children: "Cancelar"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => {
                              B.success("Suprimento registrado com sucesso!");
                              setShowSuprimentoModal(false);
                            },
                            className: "flex-1 bg-green-500 hover:bg-green-600 text-white py-3 px-4 rounded-lg transition-colors",
                            children: "Registrar Suprimento"
                          }
                        )
                      ] })
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showPagamentosModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: () => setShowPagamentosModal(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-2xl mx-4 max-h-[80vh] overflow-y-auto",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Relatório de Pagamentos" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowPagamentosModal(false),
                          className: "text-gray-400 hover:text-white transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 p-4 rounded-lg", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm text-gray-400", children: "Dinheiro" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xl font-bold text-green-400", children: "R$ 0,00" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 p-4 rounded-lg", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm text-gray-400", children: "Cartão" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xl font-bold text-blue-400", children: "R$ 0,00" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 p-4 rounded-lg", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm text-gray-400", children: "PIX" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xl font-bold text-purple-400", children: "R$ 0,00" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 p-4 rounded-lg", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm text-gray-400", children: "Total" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xl font-bold text-primary-400", children: "R$ 0,00" })
                        ] })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-8", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(CreditCard, { size: 48, className: "mx-auto mb-4 text-gray-500" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhuma venda registrada hoje" })
                      ] })
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showFiadosModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: () => setShowFiadosModal(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-2xl mx-4 max-h-[80vh] overflow-y-auto",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Vendas Fiadas" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowFiadosModal(false),
                          className: "text-gray-400 hover:text-white transition-colors",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 p-4 rounded-lg", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm text-gray-400", children: "Total em Fiados" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-2xl font-bold text-yellow-400", children: "R$ 0,00" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-8", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Clock, { size: 48, className: "mx-auto mb-4 text-gray-500" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhuma venda fiada registrada" })
                      ] })
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showMovimentosModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: `fixed inset-0 z-50 flex items-center justify-center ${isFullscreen ? "bg-background-dark p-0" : "bg-black/50 p-4"}`,
              onClick: () => setShowMovimentosModal(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: `bg-background-card border border-gray-800 flex flex-col ${isFullscreen ? "w-full h-full rounded-none" : "rounded-lg w-full max-w-6xl h-[90vh]"}`,
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-shrink-0 p-4 border-b border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Vendas do PDV" }) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(
                          "button",
                          {
                            onClick: () => setShowFiltrosVendas(!showFiltrosVendas),
                            className: `px-3 py-1 rounded-lg text-xs transition-colors flex items-center gap-1 relative ${showFiltrosVendas ? "bg-primary-500/20 text-primary-400 border border-primary-500/30" : "bg-gray-700 text-gray-400 hover:bg-gray-600"}`,
                            title: "Filtros",
                            children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx(Filter, { size: 14 }),
                              "Filtros",
                              (filtroStatus !== "todas" || filtroNfce !== "todas" || filtroDataInicio || filtroDataFim || filtroNumeroVenda || filtroNumeroPedido) && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full" })
                            ]
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: loadVendas,
                            className: "text-gray-400 hover:text-white transition-colors p-1",
                            title: "Atualizar",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowUpDown, { size: 18 })
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => {
                              if (isFullscreen) {
                                exitFullscreen();
                              } else {
                                enterFullscreen();
                              }
                            },
                            className: "w-8 h-8 bg-gray-600/20 hover:bg-gray-500/30 border border-gray-600/20 hover:border-gray-500/40 rounded-full flex items-center justify-center text-gray-400 hover:text-gray-300 transition-all duration-200 group",
                            title: isFullscreen ? "Sair do modo tela cheia" : "Entrar em tela cheia",
                            children: isFullscreen ? /* @__PURE__ */ jsxRuntimeExports.jsx(Minimize2, { size: 16, className: "group-hover:scale-110 transition-transform" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Maximize2, { size: 16, className: "group-hover:scale-110 transition-transform" })
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => setShowMovimentosModal(false),
                            className: "text-gray-400 hover:text-white transition-colors",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                          }
                        )
                      ] })
                    ] }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showFiltrosVendas && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      motion.div,
                      {
                        initial: { height: 0, opacity: 0 },
                        animate: { height: "auto", opacity: 1 },
                        exit: { height: 0, opacity: 0 },
                        className: "border-b border-gray-800 bg-gray-800/30 overflow-hidden",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-3 space-y-3", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Status" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-wrap gap-2", children: [
                              { value: "todas", label: "Todas", icon: "📋" },
                              { value: "finalizadas", label: "Finalizadas", icon: "✅" },
                              { value: "canceladas", label: "Canceladas", icon: "❌" },
                              { value: "pedidos", label: "Pedidos", icon: "📦" }
                            ].map((status) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "button",
                              {
                                onClick: () => {
                                  setFiltroStatus(status.value);
                                  setTimeout(() => loadVendas(), 100);
                                },
                                className: `px-3 py-1 rounded-lg text-xs transition-colors flex items-center gap-1 ${filtroStatus === status.value ? "bg-primary-500/20 text-primary-400 border border-primary-500/30" : "bg-gray-700 text-gray-400 hover:bg-gray-600"}`,
                                children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: status.icon }),
                                  status.label
                                ]
                              },
                              status.value
                            )) })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "NFC-e" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-wrap gap-2", children: [
                              { value: "todas", label: "Todas as vendas", icon: "📋" },
                              { value: "pendentes", label: "NFC-e Pendentes", icon: "⏳" },
                              { value: "autorizadas", label: "NFC-e Autorizadas", icon: "✅" },
                              { value: "canceladas", label: "NFC-e Canceladas", icon: "❌" }
                            ].map((nfce) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "button",
                              {
                                onClick: () => {
                                  setFiltroNfce(nfce.value);
                                  setTimeout(() => loadVendas(), 100);
                                },
                                className: `px-3 py-1 rounded-lg text-xs transition-colors flex items-center gap-1 ${filtroNfce === nfce.value ? "bg-blue-500/20 text-blue-400 border border-blue-500/30" : "bg-gray-700 text-gray-400 hover:bg-gray-600"}`,
                                children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: nfce.icon }),
                                  nfce.label
                                ]
                              },
                              nfce.value
                            )) })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Data e Hora Início" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  type: "datetime-local",
                                  value: filtroDataInicio,
                                  onChange: (e) => {
                                    setFiltroDataInicio(e.target.value);
                                    setTimeout(() => loadVendas(), 500);
                                  },
                                  className: "w-full bg-gray-700 border border-gray-600 rounded-lg py-2 px-3 text-white text-sm focus:outline-none focus:border-primary-500"
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Data e Hora Fim" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  type: "datetime-local",
                                  value: filtroDataFim,
                                  onChange: (e) => {
                                    setFiltroDataFim(e.target.value);
                                    setTimeout(() => loadVendas(), 500);
                                  },
                                  className: "w-full bg-gray-700 border border-gray-600 rounded-lg py-2 px-3 text-white text-sm focus:outline-none focus:border-primary-500"
                                }
                              )
                            ] })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Número da Venda" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  type: "text",
                                  value: filtroNumeroVenda,
                                  onChange: (e) => {
                                    setFiltroNumeroVenda(e.target.value);
                                    setTimeout(() => loadVendas(), 800);
                                  },
                                  placeholder: "Ex: PDV-000123",
                                  className: "w-full bg-gray-700 border border-gray-600 rounded-lg py-2 px-3 text-white text-sm focus:outline-none focus:border-primary-500"
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1", children: "Número do Pedido" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  type: "text",
                                  value: filtroNumeroPedido,
                                  onChange: (e) => {
                                    setFiltroNumeroPedido(e.target.value);
                                    setTimeout(() => loadVendas(), 800);
                                  },
                                  placeholder: "Ex: 123",
                                  className: "w-full bg-gray-700 border border-gray-600 rounded-lg py-2 px-3 text-white text-sm focus:outline-none focus:border-primary-500"
                                }
                              )
                            ] })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2 pt-2", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "button",
                              {
                                onClick: loadVendas,
                                className: "px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg text-sm font-medium transition-colors",
                                children: "Aplicar Filtros"
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "button",
                              {
                                onClick: () => {
                                  setFiltroStatus("todas");
                                  setFiltroNfce("todas");
                                  setFiltroDataInicio("");
                                  setFiltroDataFim("");
                                  setFiltroNumeroPedido("");
                                  setFiltroNumeroVenda("");
                                  setTimeout(() => loadVendas(), 100);
                                },
                                className: "px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg text-sm font-medium transition-colors",
                                children: "Limpar Filtros"
                              }
                            )
                          ] })
                        ] })
                      }
                    ) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-y-auto p-4 min-h-0", style: { scrollbarWidth: "thin", scrollbarColor: "#4B5563 #1F2937" }, children: loadingVendas ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-center py-12", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500 mx-auto mb-4" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Carregando vendas..." })
                    ] }) }) : vendas.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-12", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowUpDown, { size: 48, className: "mx-auto mb-4 text-gray-500" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-lg", children: "Nenhuma venda registrada" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-500 text-sm mt-2", children: "As vendas realizadas no PDV aparecerão aqui" })
                    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `grid gap-4 pb-4 ${isFullscreen ? "grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5" : "grid-cols-1 sm:grid-cols-2 lg:grid-cols-3"}`, children: vendas.map((venda) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        className: "bg-gray-800/50 rounded-lg border border-gray-700 p-4 hover:border-gray-600 transition-colors flex flex-col h-full",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2 mb-3", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-white font-medium text-sm", children: [
                                "Venda #",
                                venda.numero_venda
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `px-2 py-1 rounded-full text-xs font-medium ${venda.status_venda === "finalizada" ? "bg-green-500/20 text-green-400" : venda.status_venda === "cancelada" ? "bg-red-500/20 text-red-400" : "bg-yellow-500/20 text-yellow-400"}`, children: venda.status_venda === "finalizada" ? "Finalizada" : venda.status_venda === "cancelada" ? "Cancelada" : venda.status_venda })
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-1", children: [
                              venda.pedidos_origem && venda.pedidos_origem.length > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-2 py-1 bg-blue-500/20 text-blue-400 text-xs font-medium rounded-full border border-blue-500/30", children: venda.pedidos_origem.length === 1 ? `Pedido #${venda.pedidos_origem[0]}` : `${venda.pedidos_origem.length} Pedidos` }) : /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-2 py-1 bg-green-500/20 text-green-400 text-xs font-medium rounded-full border border-green-500/30", children: "Venda Direta" }),
                              venda.tentativa_nfce && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-2 py-1 bg-purple-500/20 text-purple-400 text-xs font-medium rounded-full border border-purple-500/30", children: venda.numero_documento ? `NFC-e #${venda.numero_documento}` : "NFC-e" }),
                              venda.status_fiscal === "pendente" && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-2 py-1 bg-yellow-500/20 text-yellow-400 text-xs font-medium rounded-full border border-yellow-500/30 animate-pulse", children: "Pendente" }),
                              venda.status_fiscal === "autorizada" && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-2 py-1 bg-green-500/20 text-green-400 text-xs font-medium rounded-full border border-green-500/30", children: "Autorizada" }),
                              venda.status_fiscal === "cancelada" && venda.modelo_documento === 65 && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-2 py-1 bg-red-500/20 text-red-400 text-xs font-medium rounded-full border border-red-500/30", children: "NFC-e Cancelada" })
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-primary-400 font-bold text-lg", children: formatCurrency(venda.valor_final) })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 space-y-2 mb-3", children: [
                            venda.cliente ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                              venda.cliente.documento && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500 truncate", children: [
                                venda.cliente.documento.length === 11 ? "CPF" : "CNPJ",
                                ": ",
                                venda.cliente.documento
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-gray-400 truncate", children: [
                                "Cliente: ",
                                venda.cliente.nome
                              ] })
                            ] }) : venda.documento_cliente ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500 truncate", children: [
                                venda.documento_cliente.length === 11 ? "CPF" : "CNPJ",
                                ": ",
                                venda.documento_cliente
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm text-gray-400", children: "Cliente: Consumidor Final" })
                            ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm text-gray-400", children: "Cliente: Consumidor Final" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-500", children: venda.data_venda_formatada || (venda.created_at ? new Date(venda.created_at).toLocaleString("pt-BR", {
                              day: "2-digit",
                              month: "2-digit",
                              year: "2-digit",
                              hour: "2-digit",
                              minute: "2-digit"
                            }) : "Data não disponível") }),
                            venda.usuario_venda && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500 truncate", children: [
                              "Operador: ",
                              venda.usuario_venda.nome
                            ] })
                          ] }),
                          venda.vendas_pdv_itens && venda.vendas_pdv_itens.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 mb-3", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-400 font-medium mb-1", children: [
                              "Itens (",
                              venda.vendas_pdv_itens.length,
                              "):"
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1 max-h-16 overflow-y-auto custom-scrollbar", children: [
                              venda.vendas_pdv_itens.slice(0, 2).map((item, index2) => {
                                var _a3;
                                return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-start", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-gray-500 truncate flex-1 mr-2", children: [
                                    item.quantidade,
                                    "x ",
                                    ((_a3 = item.produto) == null ? void 0 : _a3.nome) || "Produto"
                                  ] }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 flex-shrink-0", children: formatCurrency(item.valor_total_item) })
                                ] }) }, index2);
                              }),
                              venda.vendas_pdv_itens.length > 2 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500 italic", children: [
                                "+",
                                venda.vendas_pdv_itens.length - 2,
                                " item(s) a mais..."
                              ] })
                            ] })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-3", children: (venda.desconto_total > 0 || venda.acrescimo_total > 0) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1 text-xs", children: [
                            venda.desconto_total > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-400", children: "💰 Desconto:" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-red-400", children: [
                                "-",
                                formatCurrency(venda.desconto_total)
                              ] })
                            ] }),
                            venda.acrescimo_total > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-yellow-400", children: "📈 Acréscimo:" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-yellow-400", children: [
                                "+",
                                formatCurrency(venda.acrescimo_total)
                              ] })
                            ] })
                          ] }) }),
                          venda.vendas_pdv_pagamentos && venda.vendas_pdv_pagamentos.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-400 font-medium mb-1", children: [
                              "Pagamento (",
                              venda.vendas_pdv_pagamentos.length,
                              "):"
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1 max-h-12 overflow-y-auto custom-scrollbar", children: [
                              venda.vendas_pdv_pagamentos.slice(0, 2).map((pagamento, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between text-xs", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-gray-300 truncate flex-1 mr-2", children: [
                                  pagamento.forma_pagamento,
                                  pagamento.parcelas > 1 && ` (${pagamento.parcelas}x)`
                                ] }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white flex-shrink-0", children: formatCurrency(pagamento.valor) })
                              ] }, index2)),
                              venda.vendas_pdv_pagamentos.length > 2 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500 italic", children: [
                                "+",
                                venda.vendas_pdv_pagamentos.length - 2,
                                " forma(s) a mais..."
                              ] })
                            ] })
                          ] }),
                          (venda.status_venda === "cancelada" || venda.status_fiscal === "cancelada") && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 p-2 bg-red-500/10 border border-red-500/20 rounded-lg", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-red-400 font-medium mb-1", children: [
                              "🚫 ",
                              venda.status_fiscal === "cancelada" && venda.modelo_documento === 65 ? "NFC-e Cancelada" : "Cancelada"
                            ] }),
                            venda.usuario_cancelamento && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-400 truncate", children: [
                              "Por: ",
                              venda.usuario_cancelamento.nome
                            ] }),
                            venda.motivo_cancelamento && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-400 truncate", children: [
                              "Motivo: ",
                              venda.motivo_cancelamento
                            ] }),
                            venda.status_fiscal === "cancelada" && venda.modelo_documento === 65 && venda.protocolo_cancelamento && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-400 truncate", children: [
                              "Protocolo: ",
                              venda.protocolo_cancelamento
                            ] }),
                            venda.status_fiscal === "cancelada" && venda.modelo_documento === 65 && venda.cancelada_em && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-400 truncate", children: [
                              "Data: ",
                              new Date(venda.cancelada_em).toLocaleString("pt-BR", {
                                day: "2-digit",
                                month: "2-digit",
                                year: "2-digit",
                                hour: "2-digit",
                                minute: "2-digit"
                              })
                            ] })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2 mt-auto", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "button",
                              {
                                onClick: () => {
                                  setVendaParaExibirItens(venda);
                                  setShowItensVendaModal(true);
                                  carregarItensVenda(venda.id);
                                },
                                className: "w-full px-3 py-2 bg-blue-600/20 hover:bg-blue-600/30 text-blue-400 rounded text-xs transition-colors font-medium border border-blue-600/30 hover:border-blue-600/50",
                                children: "Exibir Itens"
                              }
                            ),
                            venda.status_fiscal === "pendente" && venda.tentativa_nfce && /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "button",
                              {
                                onClick: async () => {
                                  setVendaParaEditarNfce(venda);
                                  setShowEditarNfceModal(true);
                                  carregarItensParaEdicaoNfce(venda.id);
                                  try {
                                    const { data: userData2 } = await supabase.auth.getUser();
                                    if (userData2.user) {
                                      const { data: usuarioData } = await supabase.from("usuarios").select("serie_nfce").eq("id", userData2.user.id).single();
                                      if (usuarioData == null ? void 0 : usuarioData.serie_nfce) {
                                        setSerieNfce(usuarioData.serie_nfce);
                                      } else {
                                        setSerieNfce(1);
                                      }
                                    }
                                  } catch (error) {
                                    console.error("Erro ao carregar série NFC-e do usuário:", error);
                                    setSerieNfce(1);
                                  }
                                },
                                className: "w-full px-3 py-2 bg-yellow-600/20 hover:bg-yellow-600/30 text-yellow-400 rounded text-xs transition-colors font-medium border border-yellow-600/30 hover:border-yellow-600/50",
                                children: "Editar NFC-e"
                              }
                            ),
                            venda.status_venda === "finalizada" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "button",
                              {
                                onClick: () => {
                                  setVendaParaCancelar(venda);
                                  setShowCancelamentoModal(true);
                                },
                                className: "w-full px-3 py-2 bg-red-600/20 hover:bg-red-600/30 text-red-400 rounded text-xs transition-colors font-medium border border-red-600/30 hover:border-red-600/50",
                                children: "Cancelar Venda"
                              }
                            ),
                            venda.status_venda === "finalizada" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "button",
                              {
                                onClick: () => reimprimirCupom(venda),
                                className: "w-full px-3 py-2 bg-purple-600/20 hover:bg-purple-600/30 text-purple-400 rounded text-xs transition-colors font-medium border border-purple-600/30 hover:border-purple-600/50 flex items-center justify-center gap-1",
                                children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-3 h-3", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" }) }),
                                  "Reimprimir Cupom"
                                ]
                              }
                            )
                          ] })
                        ]
                      },
                      venda.id
                    )) }) })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showCancelamentoModal && vendaParaCancelar && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: () => setShowCancelamentoModal(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20, className: "text-red-400" }) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Cancelar Venda" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Esta ação não pode ser desfeita" })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4 p-3 bg-gray-800/50 rounded-lg", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-white font-medium", children: [
                        "Venda #",
                        vendaParaCancelar.numero_venda
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-gray-400", children: [
                        "Valor: ",
                        formatCurrency(vendaParaCancelar.valor_total)
                      ] }),
                      vendaParaCancelar.nome_cliente && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-gray-400", children: [
                        "Cliente: ",
                        vendaParaCancelar.nome_cliente
                      ] }),
                      vendaParaCancelar.modelo_documento === 65 && vendaParaCancelar.status_fiscal === "autorizada" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-3 p-2 bg-yellow-900/30 border border-yellow-600/30 rounded", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-yellow-400 text-xs font-medium mb-1", children: "⚠️ CANCELAMENTO FISCAL NFC-e" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-yellow-300", children: [
                          "• Prazo: 15 minutos da emissão",
                          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                          "• Será cancelada na SEFAZ",
                          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                          "• Chave: ",
                          (_e = vendaParaCancelar.chave_nfe) == null ? void 0 : _e.substring(0, 20),
                          "..."
                        ] })
                      ] }),
                      vendaParaCancelar.modelo_documento === 65 && vendaParaCancelar.status_fiscal !== "autorizada" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-3 p-2 bg-blue-900/30 border border-blue-600/30 rounded", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-blue-400 text-xs font-medium mb-1", children: "ℹ️ CANCELAMENTO APENAS NO SISTEMA" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-blue-300", children: "NFC-e não autorizada - cancelamento apenas local" })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Motivo do Cancelamento *" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "textarea",
                          {
                            value: motivoCancelamento,
                            onChange: (e) => setMotivoCancelamento(e.target.value),
                            placeholder: "Informe o motivo do cancelamento (mínimo 15 caracteres)...",
                            className: `w-full bg-gray-800/50 border rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 resize-none pr-16 ${motivoCancelamento.length >= 15 ? "border-green-500 focus:border-green-500 focus:ring-green-500/20" : "border-red-500 focus:border-red-500 focus:ring-red-500/20"}`,
                            rows: 3,
                            maxLength: 255
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute bottom-2 right-2 text-xs font-medium pointer-events-none", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `${motivoCancelamento.length >= 15 ? "text-green-400" : "text-red-400"}`, children: motivoCancelamento.length }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500", children: "/15" })
                        ] })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-2 flex items-center text-xs", children: motivoCancelamento.length >= 15 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center text-green-400", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4 mr-1", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { fillRule: "evenodd", d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z", clipRule: "evenodd" }) }),
                        "Motivo válido para cancelamento"
                      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center text-red-400", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4 mr-1", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { fillRule: "evenodd", d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z", clipRule: "evenodd" }) }),
                        "Mínimo de 15 caracteres obrigatório (faltam ",
                        15 - motivoCancelamento.length,
                        ")"
                      ] }) })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => {
                            setShowCancelamentoModal(false);
                            setVendaParaCancelar(null);
                            setMotivoCancelamento("");
                          },
                          className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors",
                          children: "Sair"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: cancelarVenda,
                          disabled: motivoCancelamento.length < 15,
                          className: `flex-1 py-3 px-4 rounded-lg transition-colors font-medium ${motivoCancelamento.length >= 15 ? "bg-red-600 hover:bg-red-700 text-white cursor-pointer" : "bg-gray-600 text-gray-400 cursor-not-allowed"}`,
                          children: motivoCancelamento.length >= 15 ? "Confirmar Cancelamento" : `Faltam ${15 - motivoCancelamento.length} caracteres`
                        }
                      )
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showItensVendaModal && vendaParaExibirItens && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: () => setShowItensVendaModal(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 w-full max-w-4xl mx-4 max-h-[85vh] flex flex-col",
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-shrink-0 p-6 border-b border-gray-800", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "text-lg font-semibold text-white", children: [
                            "Itens da Venda #",
                            vendaParaExibirItens.numero_venda
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400", children: [
                            vendaParaExibirItens.created_at,
                            " • Total: ",
                            formatCurrency(vendaParaExibirItens.valor_final)
                          ] })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => setShowItensVendaModal(false),
                            className: "text-gray-400 hover:text-white transition-colors",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                          }
                        )
                      ] }),
                      !vendaParaExibirItens.tentativa_nfce && vendaParaExibirItens.status_venda === "finalizada" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-4 p-4 bg-green-500/10 border border-green-500/30 rounded-lg", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 mb-3", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-6 h-6 bg-green-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4 text-green-400", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" }) }) }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-green-400 font-medium", children: "Emitir NFC-e" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4 items-end", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-green-300 text-xs font-medium mb-2", children: "Tipo de Documento (Opcional)" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "button",
                                {
                                  onClick: () => {
                                    setTipoDocumentoModalItens("cpf");
                                    setCpfCnpjModalItens("");
                                    setErroValidacaoModalItens("");
                                  },
                                  className: `flex-1 py-1.5 px-3 rounded text-xs font-medium transition-colors ${tipoDocumentoModalItens === "cpf" ? "bg-green-500 text-white" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`,
                                  children: "CPF"
                                }
                              ),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "button",
                                {
                                  onClick: () => {
                                    setTipoDocumentoModalItens("cnpj");
                                    setCpfCnpjModalItens("");
                                    setErroValidacaoModalItens("");
                                  },
                                  className: `flex-1 py-1.5 px-3 rounded text-xs font-medium transition-colors ${tipoDocumentoModalItens === "cnpj" ? "bg-green-500 text-white" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`,
                                  children: "CNPJ"
                                }
                              )
                            ] })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-green-300 text-xs font-medium mb-2", children: [
                              tipoDocumentoModalItens === "cpf" ? "CPF" : "CNPJ",
                              " (Opcional)"
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "input",
                              {
                                type: "text",
                                value: cpfCnpjModalItens,
                                onChange: (e) => {
                                  handleCpfCnpjModalItensChange(e.target.value);
                                  if (erroValidacaoModalItens) {
                                    setErroValidacaoModalItens("");
                                  }
                                },
                                onBlur: validarDocumentoModalItensOnBlur,
                                placeholder: tipoDocumentoModalItens === "cpf" ? "000.000.000-00" : "00.000.000/0000-00",
                                className: `w-full bg-gray-800/50 border rounded py-1.5 px-2 text-sm text-white focus:outline-none focus:ring-1 transition-colors ${erroValidacaoModalItens ? "border-red-500 focus:border-red-500 focus:ring-red-500/20" : "border-gray-700 focus:border-green-500 focus:ring-green-500/20"}`
                              }
                            ),
                            erroValidacaoModalItens && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-1 text-xs text-red-400 flex items-center gap-1", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "⚠️" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: erroValidacaoModalItens })
                            ] })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: emitirNfceModalItens,
                              disabled: emitindoNfceModalItens || isDocumentoModalItensInvalido(),
                              className: `w-full py-2 px-4 rounded-lg text-sm font-medium transition-colors flex items-center justify-center gap-2 ${emitindoNfceModalItens || isDocumentoModalItensInvalido() ? "bg-gray-600 text-gray-400 cursor-not-allowed" : "bg-green-600 hover:bg-green-700 text-white"}`,
                              children: emitindoNfceModalItens ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-white" }),
                                "Emitindo..."
                              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" }) }),
                                "Emitir NFC-e"
                              ] })
                            }
                          ) })
                        ] })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-y-auto custom-scrollbar p-6", children: loadingItensVenda ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-center py-12", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500 mx-auto mb-4" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Carregando itens..." })
                    ] }) }) : itensVenda.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-12", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(ShoppingCart, { size: 48, className: "mx-auto mb-4 text-gray-500" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-lg", children: "Nenhum item encontrado" })
                    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                      !vendaParaExibirItens.tentativa_nfce && vendaParaExibirItens.status_venda === "finalizada" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/30 rounded-lg p-4 mb-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("h4", { className: "text-lg font-medium text-white mb-4 flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-5 h-5 text-blue-400", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" }) }),
                          "Dados Fiscais (Editáveis para NFC-e)"
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm mb-4", children: "Revise e corrija os dados fiscais dos produtos. Clique no ícone de lápis para editar os campos CFOP, NCM, CST ou CSOSN." }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "overflow-x-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("table", { className: "w-full", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "border-b border-gray-700", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "Item" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "Código" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "Nome" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "Qtd" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "Preço" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "NCM" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "CFOP" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: ((_f = itensVenda[0]) == null ? void 0 : _f.regime_tributario) === 1 ? "CSOSN" : "CST" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "Unidade" })
                          ] }) }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { children: itensVenda.map((item, index2) => {
                            var _a3, _b3, _c2;
                            return /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "border-b border-gray-800/50", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2 text-white font-medium", children: index2 + 1 }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2 text-gray-300", children: ((_a3 = item.produto) == null ? void 0 : _a3.codigo) || item.codigo_produto }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2 text-white", children: item.nome_produto }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2 text-gray-300", children: item.quantidade }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2 text-white", children: formatCurrency(item.valor_unitario) }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-2", children: item.editando_ncm ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "input",
                                  {
                                    type: "text",
                                    value: item.ncm_editavel,
                                    onChange: (e) => {
                                      const novoValor2 = e.target.value.replace(/\D/g, "");
                                      setItensVenda((prev) => prev.map(
                                        (it, idx) => idx === index2 ? { ...it, ncm_editavel: novoValor2 } : it
                                      ));
                                    },
                                    className: "w-20 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm",
                                    maxLength: 8,
                                    placeholder: "00000000"
                                  }
                                ),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => salvarEdicaoCampoModalItens(index2, "ncm", item.ncm_editavel),
                                    className: "text-green-400 hover:text-green-300",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M5 13l4 4L19 7" }) })
                                  }
                                ),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => cancelarEdicaoCampoModalItens(index2, "ncm"),
                                    className: "text-red-400 hover:text-red-300",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                                  }
                                )
                              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-mono text-sm", children: item.ncm_editavel || "00000000" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => habilitarEdicaoCampoModalItens(index2, "ncm"),
                                    className: "text-gray-400 hover:text-white",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" }) })
                                  }
                                )
                              ] }) }) }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-2", children: item.editando_cfop ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "input",
                                  {
                                    type: "text",
                                    value: item.cfop_editavel,
                                    onChange: (e) => {
                                      const novoValor2 = e.target.value;
                                      setItensVenda((prev) => prev.map(
                                        (it, idx) => idx === index2 ? { ...it, cfop_editavel: novoValor2 } : it
                                      ));
                                    },
                                    className: "w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm",
                                    maxLength: 4
                                  }
                                ),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => salvarEdicaoCampoModalItens(index2, "cfop", item.cfop_editavel),
                                    className: "text-green-400 hover:text-green-300",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M5 13l4 4L19 7" }) })
                                  }
                                ),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => cancelarEdicaoCampoModalItens(index2, "cfop"),
                                    className: "text-red-400 hover:text-red-300",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                                  }
                                )
                              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: item.cfop_editavel || "-" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    onClick: () => habilitarEdicaoCampoModalItens(index2, "cfop"),
                                    className: "text-gray-400 hover:text-white",
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" }) })
                                  }
                                )
                              ] }) }) }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-2", children: item.regime_tributario === 1 ? (
                                // CSOSN para Simples Nacional
                                item.editando_csosn ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "input",
                                    {
                                      type: "text",
                                      value: item.csosn_editavel,
                                      onChange: (e) => {
                                        const novoValor2 = e.target.value;
                                        setItensVenda((prev) => prev.map(
                                          (it, idx) => idx === index2 ? { ...it, csosn_editavel: novoValor2 } : it
                                        ));
                                      },
                                      className: "w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm",
                                      maxLength: 3
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => salvarEdicaoCampoModalItens(index2, "csosn", item.csosn_editavel),
                                      className: "text-green-400 hover:text-green-300",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M5 13l4 4L19 7" }) })
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => cancelarEdicaoCampoModalItens(index2, "csosn"),
                                      className: "text-red-400 hover:text-red-300",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                                    }
                                  )
                                ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: item.csosn_editavel || "-" }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => habilitarEdicaoCampoModalItens(index2, "csosn"),
                                      className: "text-gray-400 hover:text-white",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" }) })
                                    }
                                  )
                                ] })
                              ) : (
                                // CST para Lucro Real/Presumido
                                item.editando_cst ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "input",
                                    {
                                      type: "text",
                                      value: item.cst_editavel,
                                      onChange: (e) => {
                                        const novoValor2 = e.target.value;
                                        setItensVenda((prev) => prev.map(
                                          (it, idx) => idx === index2 ? { ...it, cst_editavel: novoValor2 } : it
                                        ));
                                      },
                                      className: "w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm",
                                      maxLength: 3
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => salvarEdicaoCampoModalItens(index2, "cst", item.cst_editavel),
                                      className: "text-green-400 hover:text-green-300",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M5 13l4 4L19 7" }) })
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => cancelarEdicaoCampoModalItens(index2, "cst"),
                                      className: "text-red-400 hover:text-red-300",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                                    }
                                  )
                                ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: item.cst_editavel || "-" }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => habilitarEdicaoCampoModalItens(index2, "cst"),
                                      className: "text-gray-400 hover:text-white",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" }) })
                                    }
                                  )
                                ] })
                              ) }) }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2 text-gray-300", children: ((_c2 = (_b3 = item.produto) == null ? void 0 : _b3.unidade_medida) == null ? void 0 : _c2.sigla) || "UN" })
                            ] }, item.id);
                          }) })
                        ] }) })
                      ] }),
                      (vendaParaExibirItens.tentativa_nfce || vendaParaExibirItens.status_venda !== "finalizada") && itensVenda.map((item, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "div",
                        {
                          className: "bg-gray-800/50 rounded-lg border border-gray-700 p-4",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-start justify-between mb-3", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 mb-1", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-xs bg-primary-500/20 text-primary-400 px-2 py-1 rounded-full font-medium", children: [
                                  "#",
                                  index2 + 1
                                ] }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: item.nome_produto }),
                                item.origem_item === "pedido_importado" && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "px-2 py-1 bg-blue-500/20 text-blue-400 text-xs rounded-full", children: [
                                  "Pedido #",
                                  item.pedido_origem_numero
                                ] })
                              ] }),
                              item.codigo_produto && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-gray-400", children: [
                                "Código: ",
                                item.codigo_produto
                              ] }),
                              item.descricao_produto && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: item.descricao_produto })
                            ] }) }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 mb-3", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-gray-400", children: "Quantidade:" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white font-medium", children: item.quantidade })
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-gray-400", children: "Valor Unitário:" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white font-medium", children: formatCurrency(item.valor_unitario) })
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-gray-400", children: "Subtotal:" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white font-medium", children: formatCurrency(item.valor_subtotal) })
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-gray-400", children: "Total:" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-primary-400 font-bold", children: formatCurrency(item.valor_total_item) })
                              ] })
                            ] }),
                            item.tem_desconto && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 p-2 bg-red-500/10 border border-red-500/20 rounded-lg", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-red-400 font-medium mb-1", children: "Desconto Aplicado" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-300", children: item.tipo_desconto === "percentual" ? `${item.percentual_desconto}% de desconto` : `Desconto de ${formatCurrency(item.valor_desconto_aplicado)}` })
                            ] }),
                            item.observacao_item && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 p-2 bg-yellow-500/10 border border-yellow-500/20 rounded-lg", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-yellow-400 font-medium mb-1", children: "Observação" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-300 italic", children: item.observacao_item })
                            ] }),
                            item.pdv_itens_adicionais && item.pdv_itens_adicionais.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-3 pt-3 border-t border-gray-700", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400 font-medium mb-2", children: "Opções Adicionais:" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: item.pdv_itens_adicionais.map((adicional) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center bg-gray-700/30 rounded-lg p-2", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-white", children: adicional.nome_adicional }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-xs text-gray-400 ml-2", children: [
                                    "(",
                                    adicional.quantidade,
                                    "x)"
                                  ] })
                                ] }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm text-primary-400 font-medium", children: formatCurrency(adicional.valor_total) })
                              ] }, adicional.id)) })
                            ] })
                          ]
                        },
                        item.id
                      ))
                    ] }) })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showDescontoModal && itemParaDesconto && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
              onClick: () => setShowDescontoModal(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4",
                  onClick: (e) => e.stopPropagation(),
                  children: (() => {
                    const item = carrinho.find((i) => i.id === itemParaDesconto);
                    if (!item) return null;
                    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Aplicar Desconto" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => setShowDescontoModal(false),
                            className: "text-gray-400 hover:text-white transition-colors",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4 p-3 bg-gray-800/50 rounded-lg", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white font-medium", children: item.produto.nome }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-gray-400", children: [
                          "Preço atual: ",
                          formatCurrency(calcularPrecoFinal(item.produto)),
                          item.produto.promocao && item.produto.valor_desconto && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-green-400 mt-1", children: [
                            "(Preço original: ",
                            formatCurrency(item.produto.preco),
                            " - Em promoção)"
                          ] })
                        ] })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Tipo de Desconto" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "button",
                              {
                                onClick: () => setTipoDesconto("percentual"),
                                className: `flex-1 py-2 px-3 rounded-lg border transition-colors ${tipoDesconto === "percentual" ? "bg-primary-500 border-primary-500 text-white" : "bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600"}`,
                                children: "Percentual (%)"
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "button",
                              {
                                onClick: () => setTipoDesconto("valor"),
                                className: `flex-1 py-2 px-3 rounded-lg border transition-colors ${tipoDesconto === "valor" ? "bg-primary-500 border-primary-500 text-white" : "bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600"}`,
                                children: "Valor (R$)"
                              }
                            )
                          ] })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: tipoDesconto === "percentual" ? "Percentual de Desconto" : "Valor do Desconto" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "input",
                            {
                              type: "text",
                              value: valorDesconto,
                              onChange: (e) => setValorDesconto(e.target.value),
                              placeholder: tipoDesconto === "percentual" ? "Ex: 10" : "Ex: 5,00",
                              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                            }
                          )
                        ] }),
                        valorDesconto && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-3 bg-green-500/10 border border-green-500/20 rounded-lg", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm text-gray-400 mb-1", children: "Novo preço:" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-lg font-bold text-green-400", children: formatCurrency(novoValor) }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500", children: [
                            "Desconto: ",
                            formatCurrency(calcularPrecoFinal(item.produto) - novoValor)
                          ] })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => setShowDescontoModal(false),
                              className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors",
                              children: "Cancelar"
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: aplicarDesconto,
                              disabled: !valorDesconto,
                              className: "flex-1 bg-primary-500 hover:bg-primary-600 disabled:bg-gray-600 disabled:cursor-not-allowed text-white py-3 px-4 rounded-lg transition-colors",
                              children: "Aplicar Desconto"
                            }
                          )
                        ] })
                      ] })
                    ] });
                  })()
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showConfirmRemoveItem && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4",
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.8, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.8, opacity: 0 },
                  className: "bg-background-card rounded-lg p-6 max-w-md w-full",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20, className: "text-red-400" }) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Remover Pagamento" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Esta ação não pode ser desfeita" })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-300 mb-6", children: "Tem certeza que deseja remover este pagamento?" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => {
                            setShowConfirmRemoveItem(false);
                            setItemToRemove(null);
                          },
                          className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors",
                          children: "Cancelar"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => itemToRemove && removerPagamentoParcial(itemToRemove),
                          className: "flex-1 bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg transition-colors",
                          children: "Remover"
                        }
                      )
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showConfirmRemoveAll && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4",
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.8, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.8, opacity: 0 },
                  className: "bg-background-card rounded-lg p-6 max-w-md w-full",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 20, className: "text-red-400" }) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Limpar Todos os Pagamentos" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Esta ação não pode ser desfeita" })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300 mb-6", children: [
                      "Tem certeza que deseja remover todos os pagamentos adicionados? Você perderá ",
                      pagamentosParciais.length,
                      " pagamento(s) no valor total de ",
                      formatCurrency(calcularTotalPago()),
                      "."
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowConfirmRemoveAll(false),
                          className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors",
                          children: "Cancelar"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: limparPagamentosParciais,
                          className: "flex-1 bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg transition-colors",
                          children: "Limpar Todos"
                        }
                      )
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showConfirmLimparCarrinho && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4",
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.8, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.8, opacity: 0 },
                  className: "bg-background-card rounded-lg p-6 max-w-md w-full",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 20, className: "text-red-400" }) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Limpar PDV Completo" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Esta ação não pode ser desfeita" })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300 mb-6", children: [
                      "Tem certeza que deseja limpar todo o PDV? Você perderá ",
                      carrinho.length,
                      " produto(s) no carrinho",
                      pedidosImportados.length > 0 && `, ${pedidosImportados.length} pedido(s) importado(s)`,
                      ", cliente selecionado e pagamentos em andamento."
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowConfirmLimparCarrinho(false),
                          className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors",
                          children: "Cancelar"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: limparCarrinhoCompleto,
                          className: "flex-1 bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg transition-colors",
                          children: "Limpar PDV"
                        }
                      )
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showConfirmImportarPedido && pedidoParaImportar && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4",
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.8, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.8, opacity: 0 },
                  className: "bg-background-card rounded-lg p-6 max-w-md w-full",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(ShoppingCart, { size: 20, className: "text-blue-400" }) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Importar Pedido" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Há itens no carrinho atual" })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300 mb-4", children: [
                      "Há ",
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-primary-400 font-medium", children: [
                        carrinho.filter((item) => !item.pedido_origem_id).length,
                        " produto(s)"
                      ] }),
                      " adicionados manualmente no carrinho."
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300 mb-6", children: [
                      "Deseja limpar estes itens e importar o pedido?",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-green-400 font-medium", children: [
                        "Pedido #",
                        pedidoParaImportar.numero
                      ] }),
                      pedidoParaImportar.cliente && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-blue-400", children: [
                          "Cliente: ",
                          pedidoParaImportar.cliente.nome
                        ] })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => {
                            setShowConfirmImportarPedido(false);
                            setPedidoParaImportar(null);
                          },
                          className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors",
                          children: "Cancelar"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: confirmarImportarPedido,
                          className: "flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors",
                          children: "Importar"
                        }
                      )
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showConfirmRemovePedidoImportado && pedidoParaRemover && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4",
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.8, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.8, opacity: 0 },
                  className: "bg-background-card rounded-lg p-6 max-w-md w-full",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 bg-orange-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(ShoppingBag, { size: 20, className: "text-orange-400" }) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Remover Pedido Importado" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Esta ação não pode ser desfeita" })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300 mb-4", children: [
                      "Tem certeza que deseja remover as informações do pedido importado?",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-green-400 font-medium", children: [
                        "Pedido #",
                        pedidoParaRemover.numero
                      ] }),
                      pedidoParaRemover.cliente && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-blue-400", children: [
                          "Cliente: ",
                          pedidoParaRemover.cliente.nome
                        ] })
                      ] })
                    ] }),
                    (() => {
                      const itensDoCarrinho = carrinho.filter((item) => item.pedido_origem_id === pedidoParaRemover.id);
                      const totalItens = itensDoCarrinho.reduce((total, item) => total + item.quantidade, 0);
                      return itensDoCarrinho.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-3 mb-6", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-yellow-400 text-sm font-medium mb-1", children: "⚠️ Atenção!" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300 text-sm", children: [
                          "Os ",
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-primary-400 font-medium", children: [
                            itensDoCarrinho.length,
                            " produto(s)"
                          ] }),
                          " deste pedido serão removidos do carrinho (",
                          totalItens,
                          " item(s) no total)."
                        ] }),
                        carrinho.length > itensDoCarrinho.length && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-xs mt-1", children: "Os demais produtos no carrinho serão mantidos." })
                      ] });
                    })(),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: () => setShowConfirmRemovePedidoImportado(false),
                          className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors",
                          children: "Cancelar"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "button",
                        {
                          onClick: removerPedidoImportado,
                          className: "flex-1 bg-orange-600 hover:bg-orange-700 text-white py-2 px-4 rounded-lg transition-colors",
                          children: "Remover"
                        }
                      )
                    ] })
                  ]
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showAreaProdutos && /* @__PURE__ */ jsxRuntimeExports.jsx(
            motion.div,
            {
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: `fixed inset-0 z-50 flex items-center justify-center ${isFullscreen ? "bg-background-dark p-0" : "bg-black/50 p-4"}`,
              onClick: () => setShowAreaProdutos(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { scale: 0.9, opacity: 0 },
                  animate: { scale: 1, opacity: 1 },
                  exit: { scale: 0.9, opacity: 0 },
                  className: `bg-background-card flex flex-col ${isFullscreen ? "w-full h-full rounded-none" : "rounded-lg w-full max-w-6xl h-[90vh]"}`,
                  onClick: (e) => e.stopPropagation(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between p-4 border-b border-gray-800", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "text-lg font-semibold text-white flex items-center gap-2", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Package, { size: 20 }),
                        "Produtos"
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => {
                              if (isFullscreen) {
                                exitFullscreen();
                              } else {
                                enterFullscreen();
                              }
                            },
                            className: "w-8 h-8 bg-gray-600/20 hover:bg-gray-500/30 border border-gray-600/20 hover:border-gray-500/40 rounded-full flex items-center justify-center text-gray-400 hover:text-gray-300 transition-all duration-200 group",
                            title: isFullscreen ? "Sair do modo tela cheia" : "Entrar em tela cheia",
                            children: isFullscreen ? /* @__PURE__ */ jsxRuntimeExports.jsx(Minimize2, { size: 16, className: "group-hover:scale-110 transition-transform" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Maximize2, { size: 16, className: "group-hover:scale-110 transition-transform" })
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => setShowAreaProdutos(false),
                            className: "text-gray-400 hover:text-white transition-colors",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 18 })
                          }
                        )
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 p-4 flex flex-col overflow-hidden", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            placeholder: "Produto",
                            value: searchTerm,
                            onChange: (e) => setSearchTerm(e.target.value),
                            onKeyDown: (e) => {
                              if (e.key === "Escape") {
                                setShowAreaProdutos(false);
                              } else if (e.key === "Enter" && searchTerm.trim()) {
                                if (produtosFiltrados.length > 0) {
                                  adicionarAoCarrinho(produtosFiltrados[0]);
                                  setSearchTerm("");
                                  setTimeout(() => {
                                    const input = e.target;
                                    input.focus();
                                  }, 10);
                                } else {
                                  let termoBusca = searchTerm.trim();
                                  if (searchTerm.includes("*")) {
                                    const partes = searchTerm.split("*");
                                    if (partes.length >= 2) {
                                      termoBusca = partes.slice(1).join("*").trim();
                                    }
                                  }
                                  mostrarProdutoNaoEncontrado(termoBusca);
                                  setSearchTerm("");
                                  setTimeout(() => {
                                    const input = e.target;
                                    input.focus();
                                  }, 10);
                                }
                              }
                            },
                            autoFocus: true,
                            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-3 pl-10 pr-12 text-white placeholder-gray-300 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(QrCode, { size: 20, className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-300" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-3 top-1/2 -translate-y-1/2 flex items-center gap-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-gray-300 bg-gray-700 px-1 py-0.5 rounded", children: "ESC" }) }),
                        searchTerm.includes("*") && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-3 top-1/2 -translate-y-1/2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-primary-500 text-white text-xs px-2 py-1 rounded-full", children: [
                          "Qtd: ",
                          searchTerm.split("*")[0]
                        ] }) })
                      ] }) }),
                      grupos.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-2", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => setGrupoSelecionado("todos"),
                            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${grupoSelecionado === "todos" ? "bg-primary-500 text-white" : "bg-gray-800/50 text-gray-300 hover:bg-gray-700/50"}`,
                            children: "Todos"
                          }
                        ),
                        grupos.map((grupo) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => setGrupoSelecionado(grupo.id),
                            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${grupoSelecionado === grupo.id ? "bg-primary-500 text-white" : "bg-gray-800/50 text-gray-300 hover:bg-gray-700/50"}`,
                            children: grupo.nome
                          },
                          grupo.id
                        ))
                      ] }) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-y-auto custom-scrollbar", children: produtosFiltrados.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-6", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Package, { size: 40, className: "mx-auto mb-3 text-gray-500" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Nenhum produto encontrado" })
                      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid gap-2", style: { gridTemplateColumns: "repeat(auto-fill, minmax(140px, 1fr))" }, children: produtosFiltrados.map((produto) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        motion.div,
                        {
                          whileHover: { scale: 1.02 },
                          whileTap: { scale: 0.98 },
                          onClick: () => {
                            adicionarAoCarrinho(produto);
                            setShowAreaProdutos(false);
                          },
                          className: "bg-gray-800 rounded overflow-hidden border border-gray-700 hover:border-gray-600 transition-colors cursor-pointer flex flex-col",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "div",
                              {
                                className: "h-20 bg-gray-900 relative cursor-pointer",
                                onClick: (e) => {
                                  e.stopPropagation();
                                  abrirGaleria(produto, e);
                                },
                                children: [
                                  getFotoPrincipal(produto) ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "img",
                                    {
                                      src: getFotoPrincipal(produto).url,
                                      alt: produto.nome,
                                      className: "w-full h-full object-cover hover:opacity-90 transition-opacity"
                                    }
                                  ) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Package, { size: 20, className: "text-gray-700" }) }),
                                  produto.produto_fotos && produto.produto_fotos.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-0.5 left-0.5 bg-black/60 text-white text-xs px-1 py-0.5 rounded", children: produto.produto_fotos.length }),
                                  produto.promocao && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-0.5 right-0.5 bg-red-500 text-white text-xs font-bold px-1 py-0.5 rounded", children: produto.tipo_desconto === "percentual" ? `-${produto.valor_desconto}%` : formatCurrency(produto.valor_desconto || 0) })
                                ]
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-2", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white text-xs font-medium line-clamp-2 mb-1", children: produto.nome }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-1", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-400 text-xs", children: [
                                "Código ",
                                produto.codigo
                              ] }) }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-1", children: produto.promocao ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400 line-through text-xs block", children: formatCurrency(produto.preco) }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1.5", children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 font-bold text-sm", children: formatCurrency(calcularPrecoFinal(produto)) }),
                                  produto.unidade_medida && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs px-1.5 py-0.5 rounded-full bg-gray-700 text-gray-300", children: produto.unidade_medida.sigla })
                                ] })
                              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1.5", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 font-bold text-sm", children: formatCurrency(produto.preco) }),
                                produto.unidade_medida && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs px-1.5 py-0.5 rounded-full bg-gray-700 text-gray-300", children: produto.unidade_medida.sigla })
                              ] }) }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-300 mb-0.5", children: [
                                "Estoque: ",
                                produtosEstoque[produto.id] ? formatarEstoque(produtosEstoque[produto.id].total, produto) : produto.estoque_inicial ? formatarEstoque(produto.estoque_inicial, produto) : "0"
                              ] }),
                              produto.desconto_quantidade && produto.quantidade_minima && (produto.tipo_desconto_quantidade === "percentual" && produto.percentual_desconto_quantidade || produto.tipo_desconto_quantidade === "valor" && produto.valor_desconto_quantidade) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-green-400", children: [
                                produto.quantidade_minima,
                                "+ unid:",
                                produto.tipo_desconto_quantidade === "percentual" ? ` -${produto.percentual_desconto_quantidade}%` : ` -${formatCurrency(produto.valor_desconto_quantidade || 0)}`
                              ] })
                            ] })
                          ]
                        },
                        produto.id
                      )) }) })
                    ] })
                  ]
                }
              )
            }
          ) }),
          showConfirmRemovePedidoImportado && pedidoParaRemover && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card border border-gray-800 rounded-lg p-6 max-w-md w-full mx-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(AlertTriangle, { size: 20, className: "text-red-400" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Remover Pedido Importado" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: "Esta ação não pode ser desfeita" })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300 mb-6", children: [
              "Tem certeza que deseja remover o pedido ",
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white font-medium", children: [
                "#",
                pedidoParaRemover.numero
              ] }),
              "?",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-yellow-400", children: "⚠️ Isso irá remover:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              "• Todos os itens deste pedido do carrinho",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              "• As informações do pedido importado",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              pedidosImportados.length === 1 && !(pdvConfig == null ? void 0 : pdvConfig.seleciona_clientes) && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                "• O cliente importado",
                /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                "• Os descontos de faturamento",
                /* @__PURE__ */ jsxRuntimeExports.jsx("br", {})
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => {
                    setShowConfirmRemovePedidoImportado(false);
                    setPedidoParaRemover(null);
                  },
                  className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors",
                  children: "Cancelar"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: removerPedidoImportado,
                  className: "flex-1 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-lg transition-colors",
                  children: "Remover"
                }
              )
            ] })
          ] }) }),
          showConfirmLimparTudoPDV && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card border border-gray-800 rounded-lg p-6 max-w-md w-full mx-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(AlertTriangle, { size: 20, className: "text-red-400" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Cancelar Venda" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: "Esta ação irá limpar todos os dados" })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300 mb-6", children: [
              "Tem certeza que deseja cancelar a venda e limpar todos os dados do PDV?",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-yellow-400", children: "⚠️ Isso irá remover:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              "• Todos os itens do carrinho",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              "• Cliente selecionado",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              "• Pedidos importados",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              "• Formas de pagamento configuradas",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              "• Dados da nota fiscal",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              "• Todos os descontos aplicados",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-400 font-medium", children: "Esta ação não pode ser desfeita!" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => setShowConfirmLimparTudoPDV(false),
                  className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors",
                  children: "Manter Dados"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: limparTudoPDV,
                  className: "flex-1 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-lg transition-colors",
                  children: "Limpar Tudo"
                }
              )
            ] })
          ] }) })
        ]
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showProcessandoVenda && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        exit: { opacity: 0 },
        className: "fixed inset-0 bg-black/80 flex items-center justify-center z-50",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          motion.div,
          {
            initial: { scale: 0.9, opacity: 0 },
            animate: { scale: 1, opacity: 1 },
            exit: { scale: 0.9, opacity: 0 },
            className: "bg-background-card border border-gray-800 rounded-lg p-8 max-w-md w-full mx-4",
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-6 ${statusProcessamento === "sucesso" ? "bg-green-500/20" : statusProcessamento === "erro" ? "bg-red-500/20" : statusProcessamento === "aguardando_impressao" ? "bg-blue-500/20" : "bg-primary-500/20"}`, children: statusProcessamento === "sucesso" ? /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-8 h-8 text-green-400", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M5 13l4 4L19 7" }) }) : statusProcessamento === "erro" ? /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-8 h-8 text-red-400", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M6 18L18 6M6 6l12 12" }) }) : statusProcessamento === "aguardando_impressao" ? /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-8 h-8 text-blue-400", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 border-2 border-primary-500 border-t-transparent rounded-full animate-spin" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: `text-xl font-semibold mb-2 ${statusProcessamento === "sucesso" ? "text-green-400" : statusProcessamento === "erro" ? "text-red-400" : statusProcessamento === "aguardando_impressao" ? "text-blue-400" : "text-white"}`, children: statusProcessamento === "sucesso" ? "Sucesso!" : statusProcessamento === "erro" ? "Erro na Emissão" : statusProcessamento === "aguardando_impressao" ? "Venda Finalizada!" : "Processando Venda" }),
              numeroVendaProcessada && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-primary-400 font-medium mb-4", children: [
                "#",
                numeroVendaProcessada
              ] }),
              statusProcessamento === "processando" && (numeroDocumentoReservado || serieDocumentoReservado) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-purple-500/10 border border-purple-500/30 rounded-lg p-3 mb-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-purple-400 text-sm font-medium mb-1", children: "🧾 NFC-e reservada:" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-4 text-sm", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-purple-300", children: "Número:" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white font-medium ml-2", children: [
                      "#",
                      numeroDocumentoReservado || "Carregando..."
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-purple-300", children: "Série:" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white font-medium ml-2", children: [
                      "#",
                      serieDocumentoReservado || "Carregando..."
                    ] })
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800/50 rounded-lg p-4 mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-300 text-sm leading-relaxed", children: etapaProcessamento }) }),
              statusProcessamento === "erro" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-blue-500/10 border border-blue-500/30 rounded-lg p-4 mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-5 h-5 bg-blue-500/20 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5", children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-3 h-3 text-blue-400", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" }) }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-left", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-blue-400 font-medium text-sm mb-2", children: "Situação da Venda:" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 text-xs text-blue-300", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
                      "✅ ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Venda local finalizada com sucesso" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
                      "❌ ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Emissão fiscal (NFC-e) falhou" })
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-3 pt-3 border-t border-blue-500/20", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-blue-300 leading-relaxed", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Próximos passos:" }),
                    " Acesse a listagem de ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Movimentos" }),
                    ', localize esta venda (marcada como "Pendente"), clique em ',
                    /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: '"Editar NFC-e"' }),
                    "para analisar e corrigir o problema fiscal, depois retransmita para o SEFAZ."
                  ] }) })
                ] })
              ] }) }),
              statusProcessamento === "processando" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full bg-gray-700 rounded-full h-2 mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-primary-500 h-2 rounded-full animate-pulse", style: { width: "100%" } }) }),
              statusProcessamento === "aguardando_impressao" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-6 space-y-3", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "button",
                  {
                    onClick: executarImpressao,
                    className: "w-full bg-blue-500 hover:bg-blue-600 text-white py-3 px-4 rounded-lg transition-colors font-medium flex items-center justify-center gap-2",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-5 h-5", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" }) }),
                      "Imprimir Cupom"
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: finalizarSemImpressao,
                    className: "w-full bg-gray-600 hover:bg-gray-700 text-white py-3 px-4 rounded-lg transition-colors font-medium",
                    children: "Finalizar sem Impressão"
                  }
                )
              ] }),
              statusProcessamento === "erro" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 space-y-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => {
                    setShowProcessandoVenda(false);
                    setStatusProcessamento("processando");
                    setErroProcessamento("");
                  },
                  className: "w-full bg-red-500 hover:bg-red-600 text-white py-3 px-4 rounded-lg transition-colors font-medium",
                  children: "Fechar"
                }
              ) }),
              statusProcessamento === "processando" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-yellow-300 text-xs", children: "⚠️ Não feche esta janela durante o processamento" }) }),
              statusProcessamento === "aguardando_impressao" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-blue-500/10 border border-blue-500/30 rounded-lg p-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-blue-300 text-xs", children: "🖨️ Escolha se deseja imprimir o cupom ou finalizar sem impressão" }) })
            ] })
          }
        )
      }
    ) }),
    produtoParaAdicionais && /* @__PURE__ */ jsxRuntimeExports.jsx(
      OpcoesAdicionaisModal,
      {
        isOpen: showOpcoesAdicionaisModal,
        onClose: () => {
          setShowOpcoesAdicionaisModal(false);
          setProdutoParaAdicionais(null);
          setItemCarrinhoParaAdicionais(null);
        },
        produto: produtoParaAdicionais,
        onConfirm: confirmarOpcoesAdicionais
      }
    ),
    showObservacaoModal && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card border border-gray-800 rounded-lg p-6 max-w-md w-full mx-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(MessageSquare, { size: 20, className: "text-blue-400" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Observação Adicional" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: "Adicione uma observação para este produto" })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-white mb-2", children: "Observação" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "textarea",
          {
            value: observacaoTexto,
            onChange: (e) => setObservacaoTexto(e.target.value),
            placeholder: "Digite uma observação para este produto...",
            className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500/20 resize-none",
            rows: 3,
            autoFocus: true
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-xs mt-1", children: "Esta observação aparecerá junto com o produto no carrinho" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => {
              setShowObservacaoModal(false);
              setItemParaObservacao(null);
              setObservacaoTexto("");
            },
            className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors",
            children: "Cancelar"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: salvarObservacao,
            className: "flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-lg transition-colors",
            children: "Salvar"
          }
        )
      ] })
    ] }) }),
    showProdutoNaoEncontrado && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card border border-gray-800 rounded-lg p-6 max-w-md w-full mx-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 bg-orange-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Package, { size: 20, className: "text-orange-400" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Produto Não Encontrado" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: "O item digitado não existe no sistema" })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300 mb-3", children: [
          "O produto ",
          /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white font-medium bg-gray-800 px-2 py-1 rounded", children: [
            '"',
            produtoNaoEncontradoTermo,
            '"'
          ] }),
          " não foi encontrado."
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Verifique se o código ou nome está correto e tente novamente." })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => setShowProdutoNaoEncontrado(false),
            className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors",
            children: "Fechar"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => {
              setShowProdutoNaoEncontrado(false);
              setShowAreaProdutos(true);
            },
            className: "flex-1 bg-primary-500 hover:bg-primary-600 text-white py-2 px-4 rounded-lg transition-colors",
            children: "Ver Produtos"
          }
        )
      ] })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showEditarNfceModal && vendaParaEditarNfce && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        exit: { opacity: 0 },
        className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
        onClick: () => setShowEditarNfceModal(false),
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          motion.div,
          {
            initial: { scale: 0.9, opacity: 0 },
            animate: { scale: 1, opacity: 1 },
            exit: { scale: 0.9, opacity: 0 },
            className: "bg-background-card rounded-lg border border-gray-800 w-full max-w-6xl mx-4 max-h-[90vh] flex flex-col",
            onClick: (e) => e.stopPropagation(),
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-shrink-0 p-6 border-b border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "text-xl font-semibold text-white", children: [
                  "Editar NFC-e - Venda #",
                  vendaParaEditarNfce.numero_venda
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-3 p-3 bg-blue-500/10 border border-blue-500/30 rounded-lg", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-blue-400 text-sm font-medium mb-2", children: "Dados da NFC-e:" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-blue-300 text-xs font-medium mb-1", children: "Número:" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-2", children: editandoNumeroNfce ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "number",
                            value: numeroNfceEditavel,
                            onChange: (e) => setNumeroNfceEditavel(e.target.value),
                            className: "w-24 bg-gray-700 border border-gray-600 rounded px-3 py-1 text-white text-sm",
                            placeholder: "Número",
                            min: "1"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => {
                              const novoNumero = parseInt(numeroNfceEditavel) || vendaParaEditarNfce.numero_documento;
                              setVendaParaEditarNfce((prev) => ({
                                ...prev,
                                numero_documento: novoNumero
                              }));
                              setVendas((prev) => prev.map(
                                (venda) => venda.id === vendaParaEditarNfce.id ? { ...venda, numero_documento: novoNumero } : venda
                              ));
                              setEditandoNumeroNfce(false);
                              B.success(`Número da NFC-e alterado para #${novoNumero}`);
                            },
                            className: "text-green-400 hover:text-green-300 p-1",
                            title: "Salvar",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M5 13l4 4L19 7" }) })
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => {
                              var _a3;
                              setEditandoNumeroNfce(false);
                              setNumeroNfceEditavel(((_a3 = vendaParaEditarNfce.numero_documento) == null ? void 0 : _a3.toString()) || "");
                            },
                            className: "text-red-400 hover:text-red-300 p-1",
                            title: "Cancelar",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                          }
                        )
                      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-blue-300 font-medium", children: [
                          "#",
                          vendaParaEditarNfce.numero_documento || "Não definido"
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => {
                              var _a3;
                              setEditandoNumeroNfce(true);
                              setNumeroNfceEditavel(((_a3 = vendaParaEditarNfce.numero_documento) == null ? void 0 : _a3.toString()) || "");
                            },
                            className: "text-gray-400 hover:text-white p-1",
                            title: "Editar número",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" }) })
                          }
                        )
                      ] }) })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-blue-300 text-xs font-medium mb-1", children: "Série:" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-blue-300 font-medium", children: [
                          "#",
                          serieNfce
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400 text-xs", children: "(série do usuário)" })
                      ] })
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-blue-300 text-xs mt-2", children: "⚠️ Altere o número apenas em caso de duplicação ou conflito de numeração" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-3 p-3 bg-red-500/10 border border-red-500/30 rounded-lg", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-400 text-sm font-medium", children: "Erro Fiscal:" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-300 text-sm mt-1", children: vendaParaEditarNfce.erro_fiscal })
                ] })
              ] }) }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-y-auto custom-scrollbar p-6", children: loadingItensNfce ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-center py-12", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 border-2 border-primary-500 border-t-transparent rounded-full animate-spin mx-auto mb-4" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Carregando itens..." })
              ] }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/30 rounded-lg p-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-lg font-medium text-white mb-4", children: "Itens da Venda" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm mb-4", children: "Revise e corrija os dados fiscais dos produtos. Clique no ícone de lápis para editar os campos CFOP, NCM, CST ou CSOSN." }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "overflow-x-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("table", { className: "w-full", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "border-b border-gray-700", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "Item" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "Código" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "Cód. Barras" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "Nome" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "Unidade" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "Preço" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "NCM" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: "CFOP" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-2 text-gray-400 font-medium text-sm", children: ((_g = itensNfceEdicao[0]) == null ? void 0 : _g.regime_tributario) === 1 ? "CSOSN" : "CST" })
                  ] }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { children: itensNfceEdicao.map((item, index2) => {
                    var _a3, _b3, _c2, _d2;
                    return /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "border-b border-gray-800/50", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2 text-white font-medium", children: item.sequencia }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2 text-gray-300", children: ((_a3 = item.produto) == null ? void 0 : _a3.codigo) || item.codigo_produto }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2 text-gray-300", children: ((_b3 = item.produto) == null ? void 0 : _b3.codigo_barras) || "-" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2 text-white", children: item.nome_produto }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2 text-gray-300", children: ((_d2 = (_c2 = item.produto) == null ? void 0 : _c2.unidade_medida) == null ? void 0 : _d2.sigla) || "UN" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2 text-white", children: formatCurrency(item.valor_unitario) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-2", children: item.editando_ncm ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            value: item.ncm_editavel,
                            onChange: (e) => {
                              const novoValor2 = e.target.value.replace(/\D/g, "");
                              setItensNfceEdicao((prev) => prev.map(
                                (it, idx) => idx === index2 ? { ...it, ncm_editavel: novoValor2 } : it
                              ));
                            },
                            className: "w-20 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm",
                            maxLength: 8,
                            placeholder: "00000000"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => salvarEdicaoCampo(index2, "ncm", item.ncm_editavel),
                            className: "text-green-400 hover:text-green-300",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M5 13l4 4L19 7" }) })
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => cancelarEdicaoCampo(index2, "ncm"),
                            className: "text-red-400 hover:text-red-300",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                          }
                        )
                      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-mono text-sm", children: item.ncm_editavel || "00000000" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => habilitarEdicaoCampo(index2, "ncm"),
                            className: "text-gray-400 hover:text-white",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" }) })
                          }
                        )
                      ] }) }) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-2", children: item.editando_cfop ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "input",
                          {
                            type: "text",
                            value: item.cfop_editavel,
                            onChange: (e) => {
                              const novoValor2 = e.target.value;
                              setItensNfceEdicao((prev) => prev.map(
                                (it, idx) => idx === index2 ? { ...it, cfop_editavel: novoValor2 } : it
                              ));
                            },
                            className: "w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm",
                            maxLength: 4
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => salvarEdicaoCampo(index2, "cfop", item.cfop_editavel),
                            className: "text-green-400 hover:text-green-300",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M5 13l4 4L19 7" }) })
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => cancelarEdicaoCampo(index2, "cfop"),
                            className: "text-red-400 hover:text-red-300",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                          }
                        )
                      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: item.cfop_editavel || "-" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "button",
                          {
                            onClick: () => habilitarEdicaoCampo(index2, "cfop"),
                            className: "text-gray-400 hover:text-white",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" }) })
                          }
                        )
                      ] }) }) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-2", children: item.regime_tributario === 1 ? (
                        // CSOSN para Simples Nacional
                        item.editando_csosn ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "input",
                            {
                              type: "text",
                              value: item.csosn_editavel,
                              onChange: (e) => {
                                const novoValor2 = e.target.value;
                                setItensNfceEdicao((prev) => prev.map(
                                  (it, idx) => idx === index2 ? { ...it, csosn_editavel: novoValor2 } : it
                                ));
                              },
                              className: "w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm",
                              maxLength: 3
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => salvarEdicaoCampo(index2, "csosn", item.csosn_editavel),
                              className: "text-green-400 hover:text-green-300",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M5 13l4 4L19 7" }) })
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => cancelarEdicaoCampo(index2, "csosn"),
                              className: "text-red-400 hover:text-red-300",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                            }
                          )
                        ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: item.csosn_editavel || "-" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => habilitarEdicaoCampo(index2, "csosn"),
                              className: "text-gray-400 hover:text-white",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" }) })
                            }
                          )
                        ] })
                      ) : (
                        // CST para Lucro Real/Presumido
                        item.editando_cst ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "input",
                            {
                              type: "text",
                              value: item.cst_editavel,
                              onChange: (e) => {
                                const novoValor2 = e.target.value;
                                setItensNfceEdicao((prev) => prev.map(
                                  (it, idx) => idx === index2 ? { ...it, cst_editavel: novoValor2 } : it
                                ));
                              },
                              className: "w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm",
                              maxLength: 3
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => salvarEdicaoCampo(index2, "cst", item.cst_editavel),
                              className: "text-green-400 hover:text-green-300",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M5 13l4 4L19 7" }) })
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => cancelarEdicaoCampo(index2, "cst"),
                              className: "text-red-400 hover:text-red-300",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                            }
                          )
                        ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: item.cst_editavel || "-" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => habilitarEdicaoCampo(index2, "cst"),
                              className: "text-gray-400 hover:text-white",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" }) })
                            }
                          )
                        ] })
                      ) }) })
                    ] }, item.id);
                  }) })
                ] }) })
              ] }) }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-shrink-0 p-6 border-t border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3 justify-end", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => setShowEditarNfceModal(false),
                    className: "px-6 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors",
                    children: "Fechar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: reprocessarNfce,
                    disabled: reprocessandoNfce || loadingItensNfce,
                    className: "px-6 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors flex items-center gap-2",
                    children: reprocessandoNfce ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" }),
                      "Reprocessando..."
                    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" }) }),
                      "Reprocessar Envio"
                    ] })
                  }
                )
              ] }) })
            ]
          }
        )
      }
    ) })
  ] });
};
const EstoqueMinimoPage = () => {
  const { withSessionCheck } = useAuthSession();
  const navigate = useNavigate();
  const [grupos, setGrupos] = reactExports.useState([]);
  const [isLoading, setIsLoading] = reactExports.useState(true);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [selectedGrupo, setSelectedGrupo] = reactExports.useState("todos");
  const [produtosFotos, setProdutosFotos] = reactExports.useState({});
  const [totalProdutos, setTotalProdutos] = reactExports.useState(0);
  const [produtosNegativos, setProdutosNegativos] = reactExports.useState(0);
  reactExports.useEffect(() => {
    loadProdutosEstoqueMinimo();
  }, []);
  const loadProdutosEstoqueMinimo = async () => {
    await withSessionCheck(async () => {
      setIsLoading(true);
      try {
        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) throw new Error("Usuário não autenticado");
        const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
        if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
        const { data: produtosData, error: produtosError } = await supabase.from("produtos").select(`
            id,
            nome,
            codigo,
            codigo_barras,
            preco,
            estoque_atual,
            estoque_minimo,
            grupo_id,
            unidade_medida:unidade_medida_id (
              id,
              sigla,
              nome
            )
          `).eq("empresa_id", usuarioData.empresa_id).eq("estoque_minimo_ativo", true).eq("deletado", false).gt("estoque_minimo", 0);
        if (produtosError) throw produtosError;
        const produtosAbaixoMinimo = (produtosData || []).filter(
          (produto) => produto.estoque_atual <= produto.estoque_minimo
        );
        const { data: gruposData, error: gruposError } = await supabase.from("grupos").select("id, nome").eq("empresa_id", usuarioData.empresa_id).eq("deletado", false);
        if (gruposError) throw gruposError;
        const gruposComProdutos = (gruposData || []).map((grupo) => ({
          ...grupo,
          produtos: produtosAbaixoMinimo.filter((produto) => produto.grupo_id === grupo.id)
        })).filter((grupo) => grupo.produtos.length > 0);
        setGrupos(gruposComProdutos);
        setTotalProdutos(produtosAbaixoMinimo.length);
        setProdutosNegativos(produtosAbaixoMinimo.filter((p2) => p2.estoque_atual < 0).length);
        await loadProdutosFotos(produtosAbaixoMinimo.map((p2) => p2.id), usuarioData.empresa_id);
      } catch (error) {
        console.error("Erro ao carregar produtos com estoque mínimo:", error);
        showMessage("error", "Erro ao carregar produtos com estoque mínimo");
      } finally {
        setIsLoading(false);
      }
    });
  };
  const loadProdutosFotos = async (produtoIds, empresaId) => {
    try {
      const { data: fotosData } = await supabase.from("produto_fotos").select("produto_id, url, principal").eq("empresa_id", empresaId).eq("principal", true).in("produto_id", produtoIds);
      const fotosMap = {};
      (fotosData || []).forEach((foto) => {
        fotosMap[foto.produto_id] = {
          id: foto.produto_id,
          url: foto.url,
          principal: foto.principal
        };
      });
      setProdutosFotos(fotosMap);
    } catch (error) {
      console.error("Erro ao carregar fotos dos produtos:", error);
    }
  };
  const formatarPreco2 = (preco) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(preco);
  };
  const formatarEstoque = (valor, produto) => {
    var _a2;
    if (((_a2 = produto.unidade_medida) == null ? void 0 : _a2.sigla) === "KG") {
      return valor.toFixed(3);
    } else {
      return Math.floor(valor).toString();
    }
  };
  const calcularDiferenca = (produto) => {
    const diferenca = produto.estoque_atual - produto.estoque_minimo;
    return diferenca;
  };
  const getStatusProduto = (produto) => {
    if (produto.estoque_atual < 0) {
      return {
        tipo: "negativo",
        cor: "bg-red-600",
        texto: "Estoque Defasado",
        icone: AlertCircle
      };
    } else if (produto.estoque_atual === 0) {
      return {
        tipo: "zerado",
        cor: "bg-orange-600",
        texto: "Estoque Zerado",
        icone: AlertTriangle
      };
    } else {
      return {
        tipo: "baixo",
        cor: "bg-yellow-600",
        texto: "Estoque Baixo",
        icone: TrendingDown
      };
    }
  };
  const handleEditarProduto = (produto) => {
    localStorage.setItem("produto_para_editar", JSON.stringify({
      produto_id: produto.id,
      grupo_id: produto.grupo_id,
      timestamp: (/* @__PURE__ */ new Date()).getTime(),
      origem: "estoque_minimo",
      // Identificar que veio da página de estoque mínimo
      aba_inicial: "estoque"
      // Definir que deve abrir na aba de estoque
    }));
    navigate("/dashboard/produtos");
  };
  const filteredGrupos = grupos.filter((grupo) => {
    if (selectedGrupo !== "todos" && grupo.id !== selectedGrupo) return false;
    if (searchTerm) {
      return grupo.produtos.some(
        (produto) => produto.nome.toLowerCase().includes(searchTerm.toLowerCase()) || produto.codigo.toLowerCase().includes(searchTerm.toLowerCase()) || produto.codigo_barras && produto.codigo_barras.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    return true;
  }).map((grupo) => ({
    ...grupo,
    produtos: grupo.produtos.filter(
      (produto) => !searchTerm || produto.nome.toLowerCase().includes(searchTerm.toLowerCase()) || produto.codigo.toLowerCase().includes(searchTerm.toLowerCase()) || produto.codigo_barras && produto.codigo_barras.toLowerCase().includes(searchTerm.toLowerCase())
    )
  }));
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Button,
          {
            variant: "outline",
            size: "sm",
            onClick: () => window.history.back(),
            className: "flex items-center gap-2",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowLeft, { size: 16 }),
              "Voltar"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("h1", { className: "text-2xl font-bold text-white flex items-center gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(AlertTriangle, { className: "text-red-500", size: 28 }),
            "Produtos com Estoque Mínimo"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-400 mt-1", children: [
            totalProdutos,
            " ",
            totalProdutos === 1 ? "produto atingiu" : "produtos atingiram",
            " o estoque mínimo",
            produtosNegativos > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-red-400 ml-2", children: [
              "• ",
              produtosNegativos,
              " com estoque negativo"
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        Button,
        {
          variant: "outline",
          size: "sm",
          onClick: loadProdutosEstoqueMinimo,
          disabled: isLoading,
          className: "flex items-center gap-2",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(RefreshCw, { size: 16, className: isLoading ? "animate-spin" : "" }),
            "Atualizar"
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800/50 border border-gray-700 rounded-lg p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col md:flex-row gap-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 20, className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            type: "text",
            placeholder: "Buscar por nome, código ou código de barras...",
            value: searchTerm,
            onChange: (e) => setSearchTerm(e.target.value),
            className: "w-full pl-10 pr-4 py-2 bg-gray-900/50 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
          }
        )
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "md:w-64", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "select",
        {
          value: selectedGrupo,
          onChange: (e) => setSelectedGrupo(e.target.value),
          className: "w-full px-3 py-2 bg-gray-900/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "todos", children: "Todos os grupos" }),
            grupos.map((grupo) => /* @__PURE__ */ jsxRuntimeExports.jsxs("option", { value: grupo.id, children: [
              grupo.nome,
              " (",
              grupo.produtos.length,
              ")"
            ] }, grupo.id))
          ]
        }
      ) })
    ] }) }),
    isLoading && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-12", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 border-2 border-gray-500 border-t-white rounded-full animate-spin mx-auto mb-4" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Carregando produtos..." })
    ] }),
    !isLoading && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-8", children: filteredGrupos.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-12", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Package, { size: 48, className: "mx-auto text-gray-500 mb-4" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: searchTerm ? "Nenhum produto encontrado" : "Nenhum produto com estoque mínimo" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: searchTerm ? "Tente ajustar os filtros de busca" : "Todos os produtos estão com estoque adequado" })
    ] }) : filteredGrupos.map((grupo) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("h2", { className: "text-xl font-semibold text-white border-b border-gray-700 pb-2", children: [
        grupo.nome,
        " (",
        grupo.produtos.length,
        " ",
        grupo.produtos.length === 1 ? "produto" : "produtos",
        ")"
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4", children: grupo.produtos.map((produto, index2) => {
        var _a2, _b2, _c;
        const status = getStatusProduto(produto);
        const diferenca = calcularDiferenca(produto);
        const foto = produtosFotos[produto.id];
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(
          motion.div,
          {
            initial: { opacity: 0, y: 20 },
            animate: {
              opacity: 1,
              y: 0,
              // Animação especial para produtos com estoque negativo
              ...produto.estoque_atual < 0 && {
                boxShadow: [
                  "0 0 0 0 rgba(239, 68, 68, 0.7)",
                  "0 0 0 10px rgba(239, 68, 68, 0)",
                  "0 0 0 0 rgba(239, 68, 68, 0)"
                ]
              }
            },
            transition: {
              delay: index2 * 0.1,
              ...produto.estoque_atual < 0 && {
                boxShadow: {
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut"
                }
              }
            },
            className: `bg-gray-800/50 border rounded-lg overflow-hidden hover:border-gray-600 transition-colors relative cursor-pointer group ${produto.estoque_atual < 0 ? "border-red-500/50 shadow-red-500/20" : "border-gray-700"}`,
            onClick: () => handleEditarProduto(produto),
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `absolute top-2 right-2 z-10 px-2 py-1 rounded-full text-xs font-medium text-white ${status.cor} animate-pulse shadow-lg`, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(status.icone, { size: 12, className: "inline mr-1" }),
                status.texto
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-2 left-2 z-10 opacity-0 group-hover:opacity-100 transition-opacity duration-200", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-primary-500 hover:bg-primary-600 text-white rounded-full p-2 shadow-lg", children: /* @__PURE__ */ jsxRuntimeExports.jsx(SquarePen, { size: 14 }) }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-32 bg-gray-900/50 flex items-center justify-center overflow-hidden", children: foto ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                "img",
                {
                  src: foto.url,
                  alt: produto.nome,
                  className: "w-full h-full object-cover"
                }
              ) : /* @__PURE__ */ jsxRuntimeExports.jsx(Package, { size: 32, className: "text-gray-500" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 space-y-3", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-medium text-white text-sm line-clamp-2", children: produto.nome }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-gray-400 mt-1", children: [
                    "Cód: ",
                    produto.codigo,
                    produto.codigo_barras && ` • ${produto.codigo_barras}`
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-lg font-bold text-primary-400", children: formatarPreco2(produto.preco) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-gray-400", children: "Estoque Atual:" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: `px-2 py-1 rounded text-xs font-medium animate-pulse ${produto.estoque_atual < 0 ? "bg-red-600 text-white" : produto.estoque_atual === 0 ? "bg-orange-600 text-white" : "bg-yellow-600 text-white"}`, children: [
                      formatarEstoque(produto.estoque_atual, produto),
                      " ",
                      (_a2 = produto.unidade_medida) == null ? void 0 : _a2.sigla
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-gray-400", children: "Estoque Mínimo:" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "px-2 py-1 bg-gray-600 text-white rounded text-xs font-medium", children: [
                      formatarEstoque(produto.estoque_minimo, produto),
                      " ",
                      (_b2 = produto.unidade_medida) == null ? void 0 : _b2.sigla
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "pt-2 border-t border-gray-700", children: [
                    produto.estoque_atual < 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-red-400 font-medium animate-pulse", children: "⚠️ ESTOQUE DEFASADO" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-red-300 mt-1", children: "Estoque negativo com controle ativo" })
                    ] }) : diferenca < 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-orange-400 font-medium", children: [
                        "Faltam ",
                        formatarEstoque(Math.abs(diferenca), produto),
                        " ",
                        (_c = produto.unidade_medida) == null ? void 0 : _c.sigla
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-gray-400", children: "para atingir o estoque mínimo" })
                    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-yellow-400 font-medium", children: "No limite mínimo" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center mt-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs text-primary-400 font-medium", children: "Clique para editar →" }) })
                  ] })
                ] })
              ] })
            ]
          },
          produto.id
        );
      }) })
    ] }, grupo.id)) })
  ] });
};
const useApiLogs = () => {
  const [apiLogs, setApiLogs] = reactExports.useState([]);
  const [isLoadingApiLogs, setIsLoadingApiLogs] = reactExports.useState(false);
  const [apiLogsError, setApiLogsError] = reactExports.useState(null);
  const fetchApiLogs = reactExports.useCallback(async (level = "error", limit = 10) => {
    setIsLoadingApiLogs(true);
    setApiLogsError(null);
    try {
      const params = new URLSearchParams({
        level,
        limit: limit.toString(),
        offset: "0"
      });
      const response = await fetch(`/backend/public/logs.php?${params}`);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const data = await response.json();
      if (data.success) {
        setApiLogs(data.data);
        return data;
      } else {
        throw new Error("Falha ao buscar logs da API");
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "Erro desconhecido";
      setApiLogsError(errorMessage);
      console.error("🔴 Erro ao buscar logs da API:", err);
      return null;
    } finally {
      setIsLoadingApiLogs(false);
    }
  }, []);
  const formatApiLog = reactExports.useCallback((log) => {
    var _a2;
    const timestamp = new Date(log.timestamp).toLocaleTimeString();
    const source = ((_a2 = log.source) == null ? void 0 : _a2.toUpperCase()) || "API";
    const icon = log.level.toLowerCase() === "error" ? "🔴" : log.level.toLowerCase() === "info" ? "🔵" : log.level.toLowerCase() === "debug" ? "🔧" : "📝";
    const message = log.message.length > 100 ? log.message.substring(0, 100) + "..." : log.message;
    return `${icon} [${timestamp}] [${source}] ${message}`;
  }, []);
  const copyApiLogsToClipboard = reactExports.useCallback(() => {
    const logsText = apiLogs.map(formatApiLog).join("\n");
    return navigator.clipboard.writeText(logsText);
  }, [apiLogs, formatApiLog]);
  const clearApiLogs = reactExports.useCallback(() => {
    setApiLogs([]);
    setApiLogsError(null);
  }, []);
  return {
    apiLogs,
    isLoadingApiLogs,
    apiLogsError,
    fetchApiLogs,
    formatApiLog,
    copyApiLogsToClipboard,
    clearApiLogs
  };
};
const NfePage = () => {
  var _a2;
  const [nfes, setNfes] = reactExports.useState([]);
  const [isLoading, setIsLoading] = reactExports.useState(true);
  const [showForm, setShowForm] = reactExports.useState(false);
  const [isViewMode, setIsViewMode] = reactExports.useState(false);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [openDropdown, setOpenDropdown] = reactExports.useState(null);
  const [statusFilter, setStatusFilter] = reactExports.useState("todos");
  const [showReenvioModal, setShowReenvioModal] = reactExports.useState(false);
  const [nfeParaReenvio, setNfeParaReenvio] = reactExports.useState(null);
  const [emailsParaReenvio, setEmailsParaReenvio] = reactExports.useState([]);
  const [isEnviandoEmail, setIsEnviandoEmail] = reactExports.useState(false);
  const [forceRender, setForceRender] = reactExports.useState(0);
  reactExports.useEffect(() => {
    if (showReenvioModal) {
      console.log("📧 Modal de reenvio de email aberto");
    }
  }, [showReenvioModal]);
  const showToast = (message, type = "success", duration) => {
    showMessage(type, message);
  };
  const [showAdvancedFilter, setShowAdvancedFilter] = reactExports.useState(false);
  const [naturezaFilter, setNaturezaFilter] = reactExports.useState("");
  const [naturezasOperacao, setNaturezasOperacao] = reactExports.useState([]);
  const [dataInicioFilter, setDataInicioFilter] = reactExports.useState(() => {
    const trintaDiasAtras = /* @__PURE__ */ new Date();
    trintaDiasAtras.setDate(trintaDiasAtras.getDate() - 30);
    trintaDiasAtras.setHours(0, 0, 0, 0);
    return trintaDiasAtras.toISOString().slice(0, 16);
  });
  const [dataFimFilter, setDataFimFilter] = reactExports.useState(() => {
    const hoje = /* @__PURE__ */ new Date();
    hoje.setHours(23, 59, 59, 999);
    return hoje.toISOString().slice(0, 16);
  });
  React$2.useEffect(() => {
    const style = document.createElement("style");
    style.textContent = `
      .nfe-border-blue {
        border-left: 4px solid #3B82F6 !important;
      }
      .nfe-border-green {
        border-left: 4px solid #10B981 !important;
      }
      .nfe-border-red {
        border-left: 4px solid #EF4444 !important;
      }
      .nfe-border-yellow {
        border-left: 4px solid #D97706 !important;
      }
      .nfe-border-orange {
        border-left: 4px solid #F59E0B !important;
      }
      .nfe-border-gray {
        border-left: 4px solid #6B7280 !important;
      }
    `;
    document.head.appendChild(style);
    return () => {
      document.head.removeChild(style);
    };
  }, []);
  reactExports.useEffect(() => {
    loadNfes();
    loadNaturezasOperacao();
  }, []);
  const loadNfes = async () => {
    try {
      setIsLoading(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: nfesData, error } = await supabase.from("pdv").select("*").eq("empresa_id", usuarioData.empresa_id).eq("modelo_documento", 55).order("created_at", { ascending: false });
      if (error) throw error;
      setNfes(nfesData || []);
    } catch (error) {
    } finally {
      setIsLoading(false);
    }
  };
  const loadNaturezasOperacao = async () => {
    try {
      const { data, error } = await supabase.from("nfe_natureza_op").select("id, descricao").eq("ativo", true).order("descricao");
      if (error) {
        console.error("Erro ao carregar naturezas de operação:", error);
        return;
      }
      setNaturezasOperacao(data || []);
    } catch (error) {
      console.error("Erro ao carregar naturezas de operação:", error);
    }
  };
  const getStatusColor = (status) => {
    switch (status) {
      case "autorizada":
        return "bg-green-500/10 text-green-400 border-green-500/20";
      case "pendente":
        return "bg-yellow-500/10 text-yellow-400 border-yellow-500/20";
      case "rascunho":
        return "bg-blue-500/10 text-blue-400 border-blue-500/20";
      case "cancelada":
        return "bg-red-500/10 text-red-400 border-red-500/20";
      case "rejeitada":
        return "bg-red-500/10 text-red-400 border-red-500/20";
      case "inutilizada":
        return "bg-orange-500/10 text-orange-400 border-orange-500/20";
      default:
        return "bg-gray-500/10 text-gray-400 border-gray-500/20";
    }
  };
  const getRowBorderColor = (status) => {
    switch (status) {
      case "autorizada":
        return "nfe-border-green";
      case "rascunho":
        return "nfe-border-blue";
      case "cancelada":
        return "nfe-border-red";
      case "inutilizada":
        return "nfe-border-yellow";
      case "pendente":
        return "nfe-border-orange";
      case "rejeitada":
        return "nfe-border-red";
      default:
        return "nfe-border-gray";
    }
  };
  const getStatusLabel = (status) => {
    switch (status) {
      case "autorizada":
        return "Emitido";
      case "pendente":
        return "Pendente";
      case "rascunho":
        return "Rascunho";
      case "cancelada":
        return "Cancelado";
      case "rejeitada":
        return "Rejeitada";
      case "inutilizada":
        return "Inutilizada";
      default:
        return status;
    }
  };
  const [showInutilizacaoModal, setShowInutilizacaoModal] = reactExports.useState(false);
  const [nfeParaInutilizar, setNfeParaInutilizar] = reactExports.useState(null);
  const [motivoInutilizacao, setMotivoInutilizacao] = reactExports.useState("");
  const [inutilizandoNFe, setInutilizandoNFe] = reactExports.useState(false);
  const handleInutilizar = (nfe) => {
    setNfeParaInutilizar(nfe);
    setMotivoInutilizacao("");
    setShowInutilizacaoModal(true);
  };
  const handleConfirmarInutilizacao = async () => {
    if (!nfeParaInutilizar || !motivoInutilizacao.trim()) {
      showToast("Motivo da inutilização é obrigatório", "error");
      return;
    }
    if (motivoInutilizacao.trim().length < 15) {
      showToast("Motivo deve ter pelo menos 15 caracteres", "error");
      return;
    }
    try {
      setInutilizandoNFe(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        throw new Error("Usuário não autenticado");
      }
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        throw new Error("Empresa não encontrada para o usuário");
      }
      const inutilizacaoData = {
        empresa_id: usuarioData.empresa_id,
        serie: nfeParaInutilizar.serie_documento || 1,
        numero_inicial: nfeParaInutilizar.numero_documento,
        numero_final: nfeParaInutilizar.numero_documento,
        motivo: motivoInutilizacao.trim(),
        nfe_id: nfeParaInutilizar.id
      };
      console.log("📤 Enviando dados para inutilização:", inutilizacaoData);
      const response = await fetch("/backend/public/inutilizar-nfe-v2.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(inutilizacaoData)
      });
      const result = await response.json();
      if (!response.ok || !result.success) {
        throw new Error(result.error || "Erro ao inutilizar NFe");
      }
      console.log("✅ NFe inutilizada com sucesso:", result);
      showToast("NFe inutilizada com sucesso!", "success");
      setShowInutilizacaoModal(false);
      setNfeParaInutilizar(null);
      setMotivoInutilizacao("");
      window.location.reload();
    } catch (error) {
      console.error("❌ Erro ao inutilizar NFe:", error);
      showToast(error instanceof Error ? error.message : "Erro ao inutilizar NFe", "error");
    } finally {
      setInutilizandoNFe(false);
    }
  };
  const handleReenviarEmail = async (nfe) => {
    var _a3, _b2;
    console.log("📧 Iniciando reenvio de email para NFe:", nfe.numero_documento);
    if (nfe.status_nfe !== "autorizada") {
      showToast("Apenas NFe autorizadas podem ter email reenviado", "error");
      return;
    }
    try {
      const { data: userData } = await supabase.auth.getUser();
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", (_a3 = userData.user) == null ? void 0 : _a3.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        showToast("Empresa não identificada", "error");
        return;
      }
      let emailsDestinatario = [];
      let dadosNFeCompletos = null;
      if (nfe.dados_nfe) {
        try {
          dadosNFeCompletos = typeof nfe.dados_nfe === "string" ? JSON.parse(nfe.dados_nfe) : nfe.dados_nfe;
          emailsDestinatario = ((_b2 = dadosNFeCompletos == null ? void 0 : dadosNFeCompletos.destinatario) == null ? void 0 : _b2.emails) || [];
        } catch (parseError) {
          console.warn("Erro ao fazer parse dos dados da NFe:", parseError);
        }
      }
      if (emailsDestinatario.length === 0) {
        const { data: nfeCompleta } = await supabase.from("pdv").select("documento_cliente").eq("id", nfe.id).single();
        const documentoCliente = nfeCompleta == null ? void 0 : nfeCompleta.documento_cliente;
        if (documentoCliente) {
          const { data: clienteData } = await supabase.from("clientes").select("emails, nome").eq("empresa_id", usuarioData.empresa_id).eq("documento", documentoCliente).single();
          emailsDestinatario = (clienteData == null ? void 0 : clienteData.emails) || [];
        }
      }
      if (emailsDestinatario.length === 0 && nfe.nome_cliente) {
        const { data: clienteData } = await supabase.from("clientes").select("emails, nome").eq("empresa_id", usuarioData.empresa_id).ilike("nome", `%${nfe.nome_cliente}%`).limit(1).single();
        emailsDestinatario = (clienteData == null ? void 0 : clienteData.emails) || [];
      }
      if (emailsDestinatario.length === 0) {
        showToast("Nenhum email cadastrado para este destinatário", "error");
        return;
      }
      const empresaData = {
        nome_fantasia: "Sistema Nexo",
        razao_social: "Sistema Nexo",
        cnpj: "",
        endereco: "",
        telefone: "",
        email: "",
        website: ""
      };
      console.log("📧 Abrindo modal de reenvio para:", emailsDestinatario.length, "email(s)");
      setNfeParaReenvio(nfe);
      setEmailsParaReenvio(emailsDestinatario);
      setShowReenvioModal(true);
    } catch (error) {
      console.error("Erro ao preparar reenvio de email:", error);
      showToast(`❌ Erro ao preparar reenvio: ${error instanceof Error ? error.message : "Erro desconhecido"}`, "error");
    }
  };
  const executarReenvioEmail = async () => {
    var _a3;
    if (!nfeParaReenvio || emailsParaReenvio.length === 0) return;
    try {
      setIsEnviandoEmail(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        showToast("Usuário não autenticado", "error");
        return;
      }
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", (_a3 = userData.user) == null ? void 0 : _a3.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        showToast("Empresa não identificada", "error");
        return;
      }
      const empresaData = {
        nome_fantasia: "Sistema Nexo",
        razao_social: "Sistema Nexo",
        cnpj: "",
        endereco: "",
        telefone: "",
        email: "",
        website: ""
      };
      showToast("Enviando email...", "info");
      showToast("Enviando email...", "info");
      const response = await fetch("/backend/public/enviar-nfe-email.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          empresa_id: usuarioData.empresa_id,
          chave_nfe: nfeParaReenvio.chave_nfe,
          emails: emailsParaReenvio,
          nfe_data: {
            numero: nfeParaReenvio.numero_documento,
            serie: nfeParaReenvio.serie_documento || 1,
            valor_total: nfeParaReenvio.valor_total || 0,
            cliente_nome: nfeParaReenvio.nome_cliente,
            empresa_nome: (empresaData == null ? void 0 : empresaData.nome_fantasia) || (empresaData == null ? void 0 : empresaData.razao_social) || "Sistema Nexo",
            empresa_endereco: (empresaData == null ? void 0 : empresaData.endereco) || "",
            empresa_cnpj: (empresaData == null ? void 0 : empresaData.cnpj) || "",
            empresa_telefone: (empresaData == null ? void 0 : empresaData.telefone) || "",
            empresa_email: (empresaData == null ? void 0 : empresaData.email) || "",
            empresa_website: (empresaData == null ? void 0 : empresaData.website) || ""
          }
        })
      });
      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          showToast(`✅ Email reenviado com sucesso para: ${emailsParaReenvio.join(", ")}`, "success");
          setShowReenvioModal(false);
        } else {
          let errorMessage = result.error || "Erro desconhecido";
          try {
            const errorData = JSON.parse(result.error);
            if (errorData.titulo && errorData.descricao) {
              errorMessage = `${errorData.titulo}: ${errorData.descricao}`;
            }
          } catch (parseError) {
          }
          showToast(`❌ ${errorMessage}`, "error");
          if (result.arquivos) {
            console.log("📁 Informações dos arquivos:", result.arquivos);
            if (!result.arquivos.xml_existe) {
              showToast("⚠️ Arquivo XML não encontrado", "error");
            }
            if (!result.arquivos.pdf_existe) {
              showToast("⚠️ Arquivo PDF não encontrado", "error");
            }
          }
        }
      } else {
        const errorText = await response.text();
        let errorDetails = "Erro na comunicação com o servidor";
        try {
          const errorData = JSON.parse(errorText);
          errorDetails = errorData.error || errorDetails;
        } catch (parseError) {
          errorDetails = errorText || errorDetails;
        }
        showToast(`❌ ${errorDetails}`, "error");
      }
    } catch (error) {
      console.error("Erro ao reenviar email:", error);
      showToast(`❌ Erro ao reenviar email: ${error instanceof Error ? error.message : "Erro desconhecido"}`, "error");
    } finally {
      setIsEnviandoEmail(false);
    }
  };
  const handleBaixarXML = async (nfe) => {
    if (nfe.status_nfe !== "autorizada") {
      showToast("Apenas NFe autorizadas possuem XML disponível", "error");
      return;
    }
    if (!nfe.chave_nfe) {
      showToast("Chave da NFe não encontrada", "error");
      return;
    }
    try {
      const { data: userData } = await supabase.auth.getUser();
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        showToast("Empresa não identificada", "error");
        return;
      }
      const xmlUrl = `/backend/public/download-arquivo.php?type=xml&chave=${nfe.chave_nfe}&empresa_id=${usuarioData.empresa_id}`;
      const link = document.createElement("a");
      link.href = xmlUrl;
      link.download = `NFe_${nfe.chave_nfe}.xml`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      showToast("Download do XML iniciado", "success");
    } catch (error) {
      console.error("Erro ao baixar XML:", error);
      showToast(`Erro ao baixar XML: ${error.message}`, "error");
    }
  };
  const handleVisualizarPDF = async (nfe) => {
    if (nfe.status_nfe !== "autorizada") {
      showToast("Apenas NFe autorizadas possuem PDF disponível", "error");
      return;
    }
    if (!nfe.chave_nfe) {
      showToast("Chave da NFe não encontrada", "error");
      return;
    }
    try {
      showToast("Gerando PDF da NFe...", "info");
      const { data: userData } = await supabase.auth.getUser();
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        showToast("Empresa não identificada", "error");
        return;
      }
      const gerarPdfUrl = `/backend/public/gerar-danfe.php`;
      const response = await fetch(gerarPdfUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          chave: nfe.chave_nfe,
          empresa_id: usuarioData.empresa_id
        })
      });
      if (!response.ok) {
        throw new Error(`Erro na API: ${response.status}`);
      }
      const result = await response.json();
      if (!result.sucesso) {
        throw new Error(result.erro || "Erro ao gerar PDF");
      }
      const pdfUrl = `/backend/public/download-arquivo.php?type=pdf&chave=${nfe.chave_nfe}&empresa_id=${usuarioData.empresa_id}&action=view`;
      setTimeout(() => {
        window.open(pdfUrl, "_blank");
        showToast("PDF gerado e aberto em nova aba", "success");
      }, 1e3);
    } catch (error) {
      console.error("Erro ao visualizar PDF:", error);
      try {
        const { data: userData } = await supabase.auth.getUser();
        const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
        if (usuarioData == null ? void 0 : usuarioData.empresa_id) {
          const pdfUrl = `/backend/public/download-arquivo.php?type=pdf&chave=${nfe.chave_nfe}&empresa_id=${usuarioData.empresa_id}&action=view`;
          window.open(pdfUrl, "_blank");
          showToast("PDF aberto em nova aba", "success");
        } else {
          throw new Error("Empresa não identificada");
        }
      } catch (fallbackError) {
        showToast(`Erro ao gerar/visualizar PDF: ${error.message}`, "error");
      }
    }
  };
  const handleCopiarChave = async (nfe) => {
    if (nfe.status_nfe !== "autorizada") {
      showToast("Apenas NFe autorizadas possuem chave disponível", "error");
      return;
    }
    if (!nfe.chave_nfe) {
      showToast("Chave da NFe não encontrada", "error");
      return;
    }
    try {
      await navigator.clipboard.writeText(nfe.chave_nfe);
      showToast(
        `Chave NFe copiada!

${nfe.chave_nfe}

A chave foi copiada para a área de transferência.`,
        "success",
        6e3
      );
    } catch (error) {
      try {
        const textArea = document.createElement("textarea");
        textArea.value = nfe.chave_nfe;
        textArea.style.position = "fixed";
        textArea.style.left = "-999999px";
        textArea.style.top = "-999999px";
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        document.execCommand("copy");
        document.body.removeChild(textArea);
        showToast(
          `Chave NFe copiada!

${nfe.chave_nfe}

A chave foi copiada para a área de transferência.`,
          "success",
          6e3
        );
      } catch (fallbackError) {
        console.error("Erro ao copiar chave:", fallbackError);
        prompt(
          "Chave da NFe (Ctrl+C para copiar):",
          nfe.chave_nfe
        );
        showToast("Chave exibida para cópia manual", "info");
      }
    }
  };
  const ActionDropdown = ({ nfe }) => {
    const dropdownId = `dropdown-${nfe.id}`;
    const isOpen = openDropdown === dropdownId;
    const toggleDropdown = (e) => {
      e.stopPropagation();
      setOpenDropdown(isOpen ? null : dropdownId);
    };
    const closeDropdown = () => {
      setOpenDropdown(null);
    };
    React$2.useEffect(() => {
      const handleClickOutside = (event) => {
        if (isOpen && !event.target.closest(`#${dropdownId}`)) {
          closeDropdown();
        }
      };
      document.addEventListener("mousedown", handleClickOutside);
      return () => document.removeEventListener("mousedown", handleClickOutside);
    }, [isOpen, dropdownId]);
    const handleAction = (action) => {
      action();
      closeDropdown();
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", id: dropdownId, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          onClick: toggleDropdown,
          className: "text-gray-400 hover:text-gray-300 p-1 rounded-lg hover:bg-gray-800 transition-colors",
          title: "Ações",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(MoreVertical, { size: 16 })
        }
      ),
      isOpen && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-0 top-8 bg-gray-800 border border-gray-700 rounded-lg shadow-lg z-50 min-w-[180px]", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "py-1", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => handleAction(() => {
              if (nfe.status_nfe === "rascunho") {
                handleEditarRascunho(nfe);
              } else {
                handleVisualizarNFe(nfe);
              }
            }),
            className: "w-full px-4 py-2 text-left text-sm text-white hover:bg-gray-700 flex items-center gap-2",
            children: [
              nfe.status_nfe === "rascunho" ? /* @__PURE__ */ jsxRuntimeExports.jsx(SquarePen, { size: 14 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Eye, { size: 14 }),
              nfe.status_nfe === "rascunho" ? "Continuar Editando" : "Visualizar"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "border-t border-gray-700 my-1" }),
        nfe.status_nfe === "autorizada" && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleAction(() => handleBaixarXML(nfe)),
              className: "w-full px-4 py-2 text-left text-sm text-blue-400 hover:bg-gray-700 flex items-center gap-2",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Download, { size: 14 }),
                "Baixar XML"
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleAction(() => handleVisualizarPDF(nfe)),
              className: "w-full px-4 py-2 text-left text-sm text-purple-400 hover:bg-gray-700 flex items-center gap-2",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { size: 14 }),
                "Visualizar PDF"
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleAction(() => handleCopiarChave(nfe)),
              className: "w-full px-4 py-2 text-left text-sm text-yellow-400 hover:bg-gray-700 flex items-center gap-2",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 14 }),
                "Chave NFe"
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              onClick: () => handleAction(() => handleReenviarEmail(nfe)),
              className: "w-full px-4 py-2 text-left text-sm text-green-400 hover:bg-gray-700 flex items-center gap-2",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Mail, { size: 14 }),
                "Reenviar Email"
              ]
            }
          )
        ] }),
        nfe.status_nfe !== "autorizada" && nfe.status_nfe !== "cancelada" && nfe.status_nfe !== "inutilizada" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => handleAction(() => handleInutilizar(nfe)),
            className: "w-full px-4 py-2 text-left text-sm text-orange-400 hover:bg-gray-700 flex items-center gap-2",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Ban, { size: 14 }),
              "Inutilizar NFe"
            ]
          }
        )
      ] }) })
    ] });
  };
  const handleNovaNFe = () => {
    console.log("🆕 handleNovaNFe chamada - Criando nova NFe");
    setIsViewMode(false);
    setShowForm(true);
    setTimeout(() => {
      console.log("🔄 Disparando evento resetEditingFlag para NOVA NFe");
      const event = new CustomEvent("resetEditingFlag", {
        detail: { isNewNfe: true }
        // ✅ Indicar que é uma nova NFe
      });
      window.dispatchEvent(event);
    }, 100);
  };
  const handleEditarRascunho = async (rascunho) => {
    try {
      showToast(`Carregando rascunho NFe nº ${rascunho.numero_documento || "S/N"}...`, "info", 2e3);
      setIsViewMode(false);
      setShowForm(true);
      setTimeout(async () => {
        const event = new CustomEvent("loadRascunho", {
          detail: rascunho
        });
        window.dispatchEvent(event);
        showToast(`Rascunho NFe nº ${rascunho.numero_documento || "S/N"} carregado! Continue editando...`, "success", 3e3);
      }, 500);
    } catch (error) {
      showToast("Erro ao carregar rascunho para edição", "error");
    }
  };
  const handleVisualizarNFe = async (nfe) => {
    try {
      console.log("🔍 INICIANDO VISUALIZAÇÃO DA NFe:", nfe);
      showToast(`Carregando NFe nº ${nfe.numero_documento || "S/N"} para visualização...`, "info", 2e3);
      setIsViewMode(true);
      setShowForm(true);
      setTimeout(async () => {
        console.log("📤 Disparando evento loadNfeView com dados:", nfe);
        const event = new CustomEvent("loadNfeView", {
          detail: nfe
        });
        window.dispatchEvent(event);
        showToast(`NFe nº ${nfe.numero_documento || "S/N"} carregada em modo visualização`, "success", 3e3);
      }, 500);
    } catch (error) {
      console.error("Erro ao carregar NFe para visualização:", error);
      showToast(`Erro ao carregar NFe: ${error.message}`, "error");
    }
  };
  const filteredNfes = nfes.filter((nfe) => {
    const matchesSearch = (nfe.nome_cliente || "").toLowerCase().includes(searchTerm.toLowerCase()) || (nfe.numero_documento || 0).toString().includes(searchTerm) || (nfe.natureza_operacao || "").toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === "todos" || nfe.status_nfe === statusFilter;
    const matchesNatureza = !naturezaFilter || (nfe.natureza_operacao || "").toLowerCase().includes(naturezaFilter.toLowerCase());
    const nfeDate = new Date(nfe.created_at);
    const dataInicio = new Date(dataInicioFilter);
    const dataFim = new Date(dataFimFilter);
    const matchesData = nfeDate >= dataInicio && nfeDate <= dataFim;
    return matchesSearch && matchesStatus && matchesNatureza && matchesData;
  });
  if (showForm) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      NfeForm,
      {
        onBack: () => {
          setShowForm(false);
          setIsViewMode(false);
          setTimeout(() => {
            console.log("🔙 Voltando do formulário - Resetando SEM buscar número");
            const event = new CustomEvent("resetEditingFlag", {
              detail: { isNewNfe: false }
              // ✅ NÃO é nova NFe, apenas saindo
            });
            window.dispatchEvent(event);
          }, 100);
        },
        onSave: loadNfes,
        isViewMode
      }
    );
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4", children: [
    showReenvioModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        className: "fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center",
        style: { zIndex: 999999, position: "fixed", top: 0, left: 0, right: 0, bottom: 0 },
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg shadow-xl max-w-md w-full mx-4 p-6 border border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-bold text-white mb-4", children: "📧 Reenviar Email da NFe" }),
          nfeParaReenvio && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 rounded-lg p-4 mb-4 text-left border border-gray-700", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-300", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { className: "text-white", children: "NFe:" }),
              " ",
              nfeParaReenvio.numero_documento
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-300", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { className: "text-white", children: "Cliente:" }),
              " ",
              nfeParaReenvio.nome_cliente
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-300", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { className: "text-white", children: "Valor:" }),
              " R$ ",
              ((_a2 = nfeParaReenvio.valor_total) == null ? void 0 : _a2.toFixed(2)) || "0,00"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-300", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { className: "text-white", children: "Emails:" }),
              " ",
              emailsParaReenvio.join(", ")
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: "Deseja reenviar o XML e DANFE para os emails cadastrados?" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => {
                  setShowReenvioModal(false);
                  setNfeParaReenvio(null);
                  setEmailsParaReenvio([]);
                },
                className: "flex-1 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg border border-gray-600 transition-colors",
                children: "Cancelar"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: executarReenvioEmail,
                disabled: isEnviandoEmail,
                className: "flex-1 px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg disabled:opacity-50 transition-colors flex items-center justify-center gap-2",
                children: isEnviandoEmail ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-white" }),
                  "Enviando..."
                ] }) : "Reenviar"
              }
            )
          ] })
        ] }) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl font-bold text-white mb-2", children: "Notas Fiscais Eletrônicas" }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setShowAdvancedFilter(!showAdvancedFilter),
            className: `relative flex items-center gap-2 px-4 py-2 rounded-lg border transition-colors ${showAdvancedFilter ? "bg-primary-600 border-primary-500 text-white" : "bg-gray-800 border-gray-700 text-gray-300 hover:bg-gray-700"}`,
            title: "Filtros Avançados",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Filter, { size: 18 }),
              "Filtros"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Button,
          {
            variant: "primary",
            onClick: handleNovaNFe,
            className: "flex items-center gap-2",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 20 }),
              "Nova NFe"
            ]
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-3 mb-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col sm:flex-row gap-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400", size: 20 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              placeholder: "Buscar por destinatário, número ou natureza...",
              value: searchTerm,
              onChange: (e) => setSearchTerm(e.target.value),
              className: "w-full pl-10 pr-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
            }
          )
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "sm:w-48", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "select",
          {
            value: statusFilter,
            onChange: (e) => setStatusFilter(e.target.value),
            className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "todos", children: "Todos os Status" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "rascunho", children: "Rascunhos" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "pendente", children: "Pendente" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "autorizada", children: "Autorizada" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "cancelada", children: "Cancelada" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "rejeitada", children: "Rejeitada" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "inutilizada", children: "Inutilizada" })
            ]
          }
        ) })
      ] }),
      showAdvancedFilter && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-4 pt-4 border-t border-gray-700", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Natureza da Operação" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "select",
              {
                value: naturezaFilter,
                onChange: (e) => setNaturezaFilter(e.target.value),
                className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "", children: "Todas as Naturezas" }),
                  naturezasOperacao.map((natureza) => /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: natureza.descricao, children: natureza.descricao }, natureza.id))
                ]
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Data/Hora Início" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "datetime-local",
                value: dataInicioFilter,
                onChange: (e) => setDataInicioFilter(e.target.value),
                className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Data/Hora Fim" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "datetime-local",
                value: dataFimFilter,
                onChange: (e) => setDataFimFilter(e.target.value),
                className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mt-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm text-gray-400", children: (naturezaFilter || dataInicioFilter || dataFimFilter) && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
            "Filtros ativos: ",
            [
              naturezaFilter && "Natureza",
              (dataInicioFilter || dataFimFilter) && "Data"
            ].filter(Boolean).join(", ")
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => {
                  setNaturezaFilter("");
                  const hoje = /* @__PURE__ */ new Date();
                  hoje.setHours(0, 0, 0, 0);
                  setDataInicioFilter(hoje.toISOString().slice(0, 16));
                  hoje.setHours(23, 59, 59, 999);
                  setDataFimFilter(hoje.toISOString().slice(0, 16));
                },
                className: "px-4 py-2 text-sm text-gray-400 hover:text-white transition-colors",
                children: "Limpar Filtros"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => {
                  setShowAdvancedFilter(false);
                },
                className: "px-4 py-2 text-sm bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors",
                children: "Aplicar Filtros"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => setShowAdvancedFilter(false),
                className: "px-4 py-2 text-sm bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors",
                children: "Fechar"
              }
            )
          ] })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 overflow-hidden h-[calc(100vh-180px)]", children: isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-8 text-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500 mx-auto" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mt-2", children: "Carregando NFes..." })
    ] }) : filteredNfes.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-8 text-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { className: "mx-auto h-12 w-12 text-gray-400 mb-4" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: "Nenhuma NFe encontrada" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-4", children: searchTerm || statusFilter !== "todos" ? "Nenhuma NFe corresponde aos filtros aplicados." : "Comece criando sua primeira NFe." }),
      !searchTerm && statusFilter === "todos" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
        Button,
        {
          variant: "primary",
          onClick: handleNovaNFe,
          className: "flex items-center gap-2 mx-auto",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 20 }),
            "Nova NFe"
          ]
        }
      )
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-full flex flex-col", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800/50 border-b border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsx("table", { className: "w-full", children: /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider w-[8%] whitespace-nowrap", children: "Série" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider w-[10%] whitespace-nowrap", children: "Número" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider w-[10%] whitespace-nowrap", children: "Status" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider w-[10%] whitespace-nowrap", children: "Ambiente" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider w-[15%] whitespace-nowrap", children: "Natureza Op." }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider w-[25%] whitespace-nowrap", children: "Destinatário" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider w-[12%] whitespace-nowrap", children: "Criado em" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider w-[10%] whitespace-nowrap", children: "R$ Total" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider w-[8%] whitespace-nowrap", children: "Ações" })
      ] }) }) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-y-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsx("table", { className: "w-full", children: /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { className: "divide-y divide-gray-800", children: filteredNfes.map((nfe) => {
        const borderClass = getRowBorderColor(nfe.status_nfe);
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: `hover:bg-gray-800/30 transition-colors ${borderClass}`, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 whitespace-nowrap text-sm text-white w-[8%]", children: nfe.serie_documento || 1 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 whitespace-nowrap text-sm text-white w-[10%]", children: nfe.numero_documento || "-" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 whitespace-nowrap w-[10%]", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `inline-flex px-2 py-1 text-xs font-medium rounded-full border ${getStatusColor(nfe.status_nfe)}`, children: getStatusLabel(nfe.status_nfe) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 whitespace-nowrap w-[10%]", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `inline-flex px-2 py-1 text-xs font-medium rounded-full border ${(nfe.ambiente || "homologacao") === "producao" ? "bg-green-500/10 text-green-400 border-green-500/20" : "bg-orange-500/10 text-orange-400 border-orange-500/20"}`, children: (nfe.ambiente || "homologacao") === "producao" ? "PRODUÇÃO" : "HOMOLOG." }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 whitespace-nowrap text-sm text-white w-[15%]", children: nfe.natureza_operacao || "VENDA" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 whitespace-nowrap text-sm text-white w-[25%]", children: nfe.nome_cliente || "Consumidor Final" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 whitespace-nowrap text-sm text-gray-400 w-[12%]", children: new Date(nfe.created_at).toLocaleDateString("pt-BR", {
            timeZone: "America/Sao_Paulo"
            // ✅ FORÇAR TIMEZONE BRASILEIRO
          }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("td", { className: "px-4 py-3 whitespace-nowrap text-sm text-white w-[10%]", children: [
            "R$ ",
            (nfe.valor_total || 0).toFixed(2)
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 whitespace-nowrap text-right text-sm font-medium w-[8%]", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-end", children: /* @__PURE__ */ jsxRuntimeExports.jsx(ActionDropdown, { nfe }) }) })
        ] }, nfe.id);
      }) }) }) })
    ] }) }),
    showInutilizacaoModal && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800 p-6 rounded-lg max-w-md w-full mx-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-orange-400 mb-4", children: "⚠️ Inutilizar NFe" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-orange-900/20 border border-orange-500/30 rounded-lg p-4 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-orange-300 text-sm mb-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "ATENÇÃO:" }),
          " Esta ação é IRREVERSÍVEL!"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300 text-sm", children: [
          "NFe nº ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: nfeParaInutilizar == null ? void 0 : nfeParaInutilizar.numero_documento }),
          " será inutilizada na SEFAZ. Use apenas quando:"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "text-gray-300 text-sm mt-2 ml-4 list-disc", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "A numeração foi pulada por erro" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "Houve falha na emissão" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "Necessário corrigir sequência numérica" })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-300 mb-4", children: "Digite o motivo da inutilização (mínimo 15 caracteres):" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "textarea",
        {
          value: motivoInutilizacao,
          onChange: (e) => setMotivoInutilizacao(e.target.value),
          className: "w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-orange-500 resize-none",
          rows: 3,
          placeholder: "Ex: Numeração pulada por erro no sistema - necessário corrigir sequência"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-gray-400 mb-4", children: [
        motivoInutilizacao.length,
        "/15 caracteres mínimos"
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => {
              setShowInutilizacaoModal(false);
              setNfeParaInutilizar(null);
              setMotivoInutilizacao("");
            },
            className: "flex-1 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500",
            disabled: inutilizandoNFe,
            children: "Cancelar"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: handleConfirmarInutilizacao,
            disabled: motivoInutilizacao.length < 15 || inutilizandoNFe,
            className: "flex-1 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2",
            children: inutilizandoNFe ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-white" }),
              "Inutilizando..."
            ] }) : "Confirmar Inutilização"
          }
        )
      ] })
    ] }) })
  ] });
};
const NfeForm = ({ onBack, onSave, isViewMode = false }) => {
  const [activeSection, setActiveSection] = reactExports.useState("identificacao");
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [isSavingRascunho, setIsSavingRascunho] = reactExports.useState(false);
  const [nfeEmitida, setNfeEmitida] = reactExports.useState(false);
  const [ambienteNFe, setAmbienteNFe] = reactExports.useState("homologacao");
  const [showProgressModal, setShowProgressModal] = reactExports.useState(false);
  const [showLogs, setShowLogs] = reactExports.useState(false);
  const [emailError, setEmailError] = reactExports.useState(null);
  const [showCloseButton, setShowCloseButton] = reactExports.useState(false);
  const [emailProcessCompleted, setEmailProcessCompleted] = reactExports.useState(false);
  const [naturezasOperacao, setNaturezasOperacao] = reactExports.useState([]);
  const [apiStatus, setApiStatus] = reactExports.useState("checking");
  const [sefazStatus, setSefazStatus] = reactExports.useState("checking");
  const [progressSteps, setProgressSteps] = reactExports.useState([
    { id: "validacao", label: "Validando dados da NFe", status: "pending", message: "" },
    { id: "geracao", label: "Gerando XML da NFe", status: "pending", message: "" },
    { id: "sefaz", label: "Enviando para SEFAZ", status: "pending", message: "" },
    { id: "validacao_xml", label: "Validando geração do XML", status: "pending", message: "" },
    { id: "validacao_pdf", label: "Validando geração do PDF", status: "pending", message: "" },
    { id: "banco", label: "Salvando no banco de dados", status: "pending", message: "" },
    { id: "finalizacao", label: "Finalizando processo", status: "pending", message: "" }
  ]);
  const [logs, setLogs] = reactExports.useState([]);
  const [showCCeModal, setShowCCeModal] = reactExports.useState(false);
  const [cceStatus, setCceStatus] = reactExports.useState("loading");
  const [cceMessage, setCceMessage] = reactExports.useState("");
  const [dadosAutorizacao, setDadosAutorizacao] = reactExports.useState({
    chave: "",
    protocolo: "",
    dataAutorizacao: "",
    status: "",
    ambiente: "homologacao",
    sequencia_cce: 1,
    // Campo para controlar a sequência da CCe
    carta_correcao: "",
    // Campo para o texto da carta de correção
    cartas_correcao: []
    // Array para histórico de CCe enviadas
  });
  const {
    fetchApiLogs,
    clearApiLogs
  } = useApiLogs();
  const clearAllLogs = () => {
    setLogs([]);
    clearApiLogs();
  };
  const handleCloseModal = () => {
    setShowProgressModal(false);
    setEmailError(null);
    setShowCloseButton(false);
    setEmailProcessCompleted(false);
    clearAllLogs();
    onSave();
    onBack();
  };
  reactExports.useEffect(() => {
    if (emailProcessCompleted && showProgressModal) {
      setTimeout(() => {
        if (emailError) {
          addLog("⚠️ NFe emitida com sucesso, mas houve erro no envio de email");
          addLog('📧 Clique em "Fechar" para continuar');
        } else {
          setTimeout(() => {
            setShowProgressModal(false);
            setEmailProcessCompleted(false);
            clearAllLogs();
            onSave();
            onBack();
          }, 2e3);
        }
      }, 500);
    }
  }, [emailProcessCompleted, emailError, showProgressModal]);
  const [isEditingRascunho, setIsEditingRascunho] = reactExports.useState(false);
  const [rascunhoId, setRascunhoId] = reactExports.useState(null);
  const [showExitModal, setShowExitModal] = reactExports.useState(false);
  const [nfeData, setNfeData] = reactExports.useState({
    identificacao: {
      modelo: 55,
      serie: 1,
      numero: "",
      codigo_numerico: "",
      // Campo para armazenar o código gerado
      data_emissao: (() => {
        const agora = /* @__PURE__ */ new Date();
        const offsetBrasil = -3 * 60;
        const dataBrasil = new Date(agora.getTime() + offsetBrasil * 60 * 1e3);
        return dataBrasil.toISOString().slice(0, 16);
      })(),
      tipo_documento: "1",
      finalidade: "1",
      presenca: "9",
      natureza_operacao: "Venda de Mercadoria",
      informacao_adicional: ""
    },
    destinatario: {
      documento: "",
      nome: "",
      endereco: "",
      numero: "",
      bairro: "",
      cidade: "",
      uf: "",
      cep: "",
      emails: [],
      ie_destinatario: "9",
      operacao: "1",
      consumidor_final: "1"
    },
    produtos: [],
    totais: {
      valor_produtos: 0,
      valor_desconto: 0,
      valor_total: 0,
      valor_pis: 0,
      valor_cofins: 0,
      valor_ipi: 0,
      valor_icms_bc: 0,
      valor_icms: 0,
      valor_fcp: 0,
      valor_icms_bc_st: 0,
      valor_icms_st: 0,
      valor_fcp_st: 0,
      valor_frete: 0,
      valor_seguro: 0,
      valor_outros: 0,
      valor_credito_sn: 0
    },
    pagamentos: [],
    chaves_ref: [],
    transportadora: {
      transportadora_id: "",
      transportadora_nome: "",
      transportadora_documento: "",
      transportadora_endereco: "",
      modalidade_frete: "9"
    },
    empresa: null
  });
  const buscarProximoNumero = async () => {
    console.log("🔍 Iniciando busca do próximo número...");
    console.log("🔍 Estado atual - isEditingRascunho:", isEditingRascunho);
    console.log("🔍 Estado atual - numero atual:", nfeData.identificacao.numero);
    console.log("🔍 Estado atual - ambiente:", ambienteNFe);
    if (isEditingRascunho) {
      console.log("🚫 Editando rascunho - Pulando busca de próximo número");
      return;
    }
    if (nfeData.identificacao.numero && nfeData.identificacao.numero !== "") {
      console.log("🚫 Número já preenchido - Pulando busca:", nfeData.identificacao.numero);
      return;
    }
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        console.log("❌ Usuário não autenticado");
        return;
      }
      console.log("✅ Usuário autenticado:", userData.user.id);
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        console.log("❌ Empresa não encontrada para o usuário");
        return;
      }
      console.log("✅ Empresa encontrada:", usuarioData.empresa_id);
      const { data, error } = await supabase.from("pdv").select("numero_documento").eq("empresa_id", usuarioData.empresa_id).eq("modelo_documento", 55).not("numero_documento", "is", null).order("numero_documento", { ascending: false }).limit(1);
      if (error) {
        console.error("❌ Erro ao buscar último número:", error);
        return;
      }
      console.log("📋 Dados encontrados na tabela PDV (dados reais):", data);
      let proximoNumero = 1;
      if (data && data.length > 0 && data[0].numero_documento) {
        proximoNumero = data[0].numero_documento + 1;
        console.log(`📊 Último número encontrado: ${data[0].numero_documento}`);
      } else {
        console.log("📊 Nenhum registro encontrado, iniciando do número 1");
      }
      console.log(`🎯 Próximo número NFe: ${proximoNumero}`);
      console.log("🔢 Gerando código numérico simples para nova NFe...");
      const codigoGerado = Math.floor(1e7 + Math.random() * 9e7).toString();
      console.log(`✅ Código numérico gerado: ${codigoGerado}`);
      setNfeData((prev) => {
        console.log("🔄 Atualizando estado do formulário...");
        const novoEstado = {
          ...prev,
          identificacao: {
            ...prev.identificacao,
            numero: proximoNumero.toString(),
            codigo_numerico: codigoGerado
          }
        };
        console.log("✅ Novo estado - Número:", novoEstado.identificacao.numero, "Código:", novoEstado.identificacao.codigo_numerico);
        return novoEstado;
      });
    } catch (error) {
      console.error("❌ Erro geral ao buscar próximo número:", error);
    }
  };
  const addLog = (message) => {
    const timestamp = (/* @__PURE__ */ new Date()).toLocaleTimeString("pt-BR", {
      timeZone: "America/Sao_Paulo"
      // ✅ FORÇAR TIMEZONE BRASILEIRO
    });
    const logMessage = `[${timestamp}] ${message}`;
    setLogs((prev) => [...prev, logMessage]);
    if (message.includes("⚠️") && message.includes("Erro ao enviar email")) {
      const errorMessage = message.replace(/^\[.*?\]\s*⚠️\s*/, "");
      setEmailError(errorMessage);
      setShowCloseButton(true);
    }
    if (message.includes("❌") || message.includes("ERRO")) {
      console.error("🔴 NFe Error:", message);
    } else if (message.includes("✅") || message.includes("sucesso")) {
      console.log("🟢 NFe Success:", message);
    } else if (message.includes("⚠️") || message.includes("AVISO")) {
      console.warn("🟡 NFe Warning:", message);
    } else {
      console.log("🔵 NFe Info:", message);
    }
  };
  const updateStep = (stepId, status, message = "") => {
    setProgressSteps((prev) => prev.map(
      (step) => step.id === stepId ? { ...step, status, message } : step
    ));
  };
  const resetProgress = () => {
    setProgressSteps([
      { id: "validacao", label: "Validando dados da NFe", status: "pending", message: "" },
      { id: "geracao", label: "Gerando XML da NFe", status: "pending", message: "" },
      { id: "sefaz", label: "Enviando para SEFAZ", status: "pending", message: "" },
      { id: "banco", label: "Salvando no banco de dados", status: "pending", message: "" },
      { id: "email", label: "Enviando por email", status: "pending", message: "" },
      { id: "finalizacao", label: "Finalizando processo", status: "pending", message: "" }
    ]);
    setLogs([]);
  };
  const showToast = (message, type = "success", duration = 4e3) => {
    const toast = document.createElement("div");
    const bgColor = type === "success" ? "bg-green-500" : type === "error" ? "bg-red-500" : "bg-blue-500";
    const icon = type === "success" ? '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>' : type === "error" ? '<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>' : '<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>';
    toast.className = `fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center gap-2 transform transition-all duration-300 translate-x-0`;
    toast.innerHTML = `
      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
        ${icon}
      </svg>
      <span>${message}</span>
    `;
    document.body.appendChild(toast);
    setTimeout(() => {
      toast.style.transform = "translateX(0)";
    }, 10);
    setTimeout(() => {
      toast.style.transform = "translateX(100%)";
      setTimeout(() => {
        if (document.body.contains(toast)) {
          document.body.removeChild(toast);
        }
      }, 300);
    }, duration);
  };
  const hasUnsavedData = () => {
    const hasIdentificacao = nfeData.identificacao.natureza_operacao !== "" || nfeData.identificacao.numero !== "";
    const hasDestinatario = nfeData.destinatario.nome !== "" || nfeData.destinatario.documento !== "";
    const hasProdutos = nfeData.produtos.length > 0;
    const hasPagamentos = nfeData.pagamentos.length > 0;
    return hasIdentificacao || hasDestinatario || hasProdutos || hasPagamentos;
  };
  const handleTryExit = () => {
    if (isViewMode) {
      onBack();
      return;
    }
    if (hasUnsavedData() && !nfeEmitida) {
      setShowExitModal(true);
    } else {
      onBack();
    }
  };
  const handleConfirmExit = () => {
    setShowExitModal(false);
    onBack();
  };
  const handleCancelExit = () => {
    setShowExitModal(false);
  };
  const resetEditingState = () => {
    setIsEditingRascunho(false);
    setRascunhoId(null);
  };
  const handleGerarEspelho = async () => {
    try {
      showToast("Gerando espelho DANFE...", "info");
      const { data: userData } = await supabase.auth.getUser();
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        showToast("Empresa não identificada", "error");
        return;
      }
      const dadosEspelho = {
        empresa_id: usuarioData.empresa_id,
        dados_nfe: nfeData
      };
      const response = await fetch("/backend/public/gerar-espelho-danfe.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(dadosEspelho)
      });
      if (!response.ok) {
        throw new Error(`Erro na API: ${response.status}`);
      }
      const result = await response.json();
      if (!result.sucesso) {
        throw new Error(result.erro || "Erro ao gerar espelho DANFE");
      }
      const espelhoUrl = `/backend/public/download-arquivo.php?type=espelho&empresa_id=${usuarioData.empresa_id}&action=view`;
      setTimeout(() => {
        window.open(espelhoUrl, "_blank");
        showToast("Espelho DANFE gerado e aberto em nova aba", "success");
      }, 500);
    } catch (error) {
      console.error("Erro ao gerar espelho DANFE:", error);
      showToast(`Erro ao gerar espelho DANFE: ${error.message}`, "error");
    }
  };
  const handleSalvarRascunho = async () => {
    try {
      setIsSavingRascunho(true);
      if (!nfeData.empresa) {
        alert("Dados da empresa não carregados");
        return;
      }
      if (!nfeData.identificacao.natureza_operacao) {
        alert("Natureza da operação é obrigatória");
        return;
      }
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        alert("Usuário não autenticado");
        return;
      }
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        alert("Empresa não encontrada");
        return;
      }
      let numeroFinal = nfeData.identificacao.numero;
      let codigoFinal = nfeData.identificacao.codigo_numerico;
      console.log(`📋 Usando número do formulário: ${numeroFinal || "vazio"}`);
      if (!numeroFinal) {
        numeroFinal = "";
        console.log("⚠️ Número vazio - usuário deve preencher manualmente");
      }
      if (!codigoFinal) {
        codigoFinal = Math.floor(1e7 + Math.random() * 9e7).toString();
        console.log(`🔢 Código gerado para rascunho: ${codigoFinal}`);
      }
      const nfeDataAtualizada = {
        ...nfeData,
        identificacao: {
          ...nfeData.identificacao,
          numero: numeroFinal,
          codigo_numerico: codigoFinal
        }
      };
      const rascunhoData = {
        empresa_id: usuarioData.empresa_id,
        usuario_id: userData.user.id,
        // Campo obrigatório que estava faltando
        modelo_documento: 55,
        serie_documento: parseInt(nfeDataAtualizada.identificacao.serie) || 1,
        numero_documento: parseInt(numeroFinal) || 0,
        status_nfe: "rascunho",
        natureza_operacao: nfeDataAtualizada.identificacao.natureza_operacao,
        nome_cliente: nfeDataAtualizada.destinatario.nome || "Cliente não informado",
        valor_total: nfeDataAtualizada.totais.valor_total || 0,
        data_rascunho: (/* @__PURE__ */ new Date()).toISOString(),
        usuario_rascunho: userData.user.id,
        observacoes_rascunho: "Rascunho salvo automaticamente",
        // Salvar dados completos da NFe em JSON (com número e código atualizados)
        dados_nfe: JSON.stringify(nfeDataAtualizada)
      };
      let rascunhoSalvo;
      if (isEditingRascunho && rascunhoId) {
        console.log("🔄 Atualizando rascunho existente ID:", rascunhoId);
        const { data, error } = await supabase.from("pdv").update(rascunhoData).eq("id", rascunhoId).select().single();
        if (error) {
          console.error("Erro ao atualizar rascunho:", error);
          alert("Erro ao atualizar rascunho: " + error.message);
          return;
        }
        rascunhoSalvo = data;
        await supabase.from("pdv_itens").delete().eq("pdv_id", rascunhoId);
      } else {
        console.log("➕ Criando novo rascunho");
        const { data, error } = await supabase.from("pdv").insert(rascunhoData).select().single();
        if (error) {
          console.error("Erro ao criar rascunho:", error);
          alert("Erro ao criar rascunho: " + error.message);
          return;
        }
        rascunhoSalvo = data;
        setIsEditingRascunho(true);
        setRascunhoId(data.id);
      }
      setNfeData(nfeDataAtualizada);
      if (nfeDataAtualizada.produtos.length > 0) {
        const itensRascunho = nfeDataAtualizada.produtos.map((produto, index2) => ({
          empresa_id: usuarioData.empresa_id,
          // Campo obrigatório
          usuario_id: userData.user.id,
          // Campo obrigatório
          pdv_id: rascunhoSalvo.id,
          produto_id: produto.produto_id || null,
          codigo_produto: produto.codigo,
          nome_produto: produto.descricao,
          quantidade: produto.quantidade,
          valor_unitario: produto.valor_unitario,
          valor_total_item: produto.valor_total
          // Corrigido: campo é valor_total_item
        }));
        const { error: itensError } = await supabase.from("pdv_itens").insert(itensRascunho);
        if (itensError) {
          console.error("Erro ao salvar itens do rascunho:", itensError);
          alert("Rascunho salvo, mas houve erro ao salvar alguns itens");
        }
      }
      setShowExitModal(false);
      onSave();
      onBack();
    } catch (error) {
      console.error("Erro ao salvar rascunho:", error);
      alert(`Erro ao salvar rascunho: ${error.message || "Erro desconhecido"}`);
    } finally {
      setIsSavingRascunho(false);
    }
  };
  reactExports.useEffect(() => {
    resetEditingState();
  }, []);
  reactExports.useEffect(() => {
    const handleLoadRascunho = async (event) => {
      var _a2;
      const rascunho = event.detail;
      console.log("🎯 Evento loadRascunho recebido:", rascunho);
      console.log("🔄 ATIVANDO modo de edição - Geração automática será DESABILITADA");
      setIsEditingRascunho(true);
      setRascunhoId(rascunho.id);
      try {
        if (rascunho.dados_nfe) {
          let dadosCarregados;
          try {
            if (Array.isArray(rascunho.dados_nfe)) {
              dadosCarregados = JSON.parse(rascunho.dados_nfe[0]);
              if (rascunho.dados_nfe[1] && typeof rascunho.dados_nfe[1] === "object") {
                const dadosAdicionais = rascunho.dados_nfe[1];
                if ((_a2 = dadosAdicionais.identificacao) == null ? void 0 : _a2.codigo_numerico) {
                  dadosCarregados.identificacao = {
                    ...dadosCarregados.identificacao,
                    codigo_numerico: dadosAdicionais.identificacao.codigo_numerico
                  };
                }
              }
            } else {
              dadosCarregados = JSON.parse(rascunho.dados_nfe);
            }
            setTimeout(() => {
              var _a3, _b2;
              console.log("🔄 Carregando rascunho - Número:", (_a3 = dadosCarregados.identificacao) == null ? void 0 : _a3.numero, "Código:", (_b2 = dadosCarregados.identificacao) == null ? void 0 : _b2.codigo_numerico);
              setNfeData((prev) => ({
                ...dadosCarregados,
                empresa: prev.empresa || dadosCarregados.empresa
                // Preservar empresa se já carregada
              }));
            }, 100);
          } catch (error) {
            console.error("Erro ao fazer parse dos dados_nfe:", error);
            setTimeout(() => {
              console.log("🔄 Carregando rascunho básico (fallback) - Número:", rascunho.numero_documento);
              setNfeData((prev) => {
                var _a3;
                return {
                  ...prev,
                  identificacao: {
                    ...prev.identificacao,
                    numero: ((_a3 = rascunho.numero_documento) == null ? void 0 : _a3.toString()) || "",
                    serie: rascunho.serie_documento || 1,
                    natureza_operacao: rascunho.natureza_operacao || "",
                    informacao_adicional: rascunho.informacao_adicional || ""
                  }
                };
              });
            }, 100);
          }
        } else {
          const { data: itens } = await supabase.from("pdv_itens").select("*").eq("pdv_id", rascunho.id);
          console.log("📦 Itens encontrados:", itens);
          setTimeout(() => {
            console.log("🔄 Carregando rascunho básico - Número:", rascunho.numero_documento);
            setNfeData((prev) => {
              var _a3;
              return {
                ...prev,
                identificacao: {
                  ...prev.identificacao,
                  numero: ((_a3 = rascunho.numero_documento) == null ? void 0 : _a3.toString()) || "",
                  serie: rascunho.serie_documento || 1,
                  natureza_operacao: rascunho.natureza_operacao || "",
                  informacao_adicional: rascunho.informacao_adicional || ""
                },
                destinatario: {
                  ...prev.destinatario,
                  nome: rascunho.nome_cliente || ""
                },
                totais: {
                  ...prev.totais,
                  valor_total: rascunho.valor_total || 0
                },
                produtos: itens ? itens.map((item) => ({
                  produto_id: item.produto_id,
                  codigo: item.codigo_produto,
                  descricao: item.nome_produto,
                  quantidade: item.quantidade,
                  valor_unitario: item.valor_unitario,
                  valor_total: item.valor_total_item
                })) : []
              };
            });
          }, 100);
        }
      } catch (error) {
      }
    };
    const handleResetEditingFlag = (event) => {
      var _a2;
      const isNewNfe = ((_a2 = event.detail) == null ? void 0 : _a2.isNewNfe) || false;
      console.log("🆕 Evento resetEditingFlag recebido - Resetando estado de edição");
      console.log("🔍 É nova NFe?", isNewNfe);
      console.log("✅ DESATIVANDO modo de edição - Geração automática será HABILITADA");
      setIsEditingRascunho(false);
      setRascunhoId(null);
      setNfeData((prev) => ({
        ...prev,
        identificacao: {
          ...prev.identificacao,
          numero: "",
          // Limpar número para permitir nova geração
          codigo_numerico: "",
          // Limpar código para permitir nova geração
          natureza_operacao: "Venda de Mercadoria",
          informacao_adicional: ""
        },
        destinatario: {
          documento: "",
          nome: "",
          endereco: "",
          numero: "",
          bairro: "",
          cidade: "",
          uf: "",
          cep: "",
          emails: [],
          ie_destinatario: "9",
          operacao: "1",
          consumidor_final: "1"
        },
        produtos: [],
        pagamentos: [],
        totais: {
          valor_produtos: 0,
          valor_desconto: 0,
          valor_total: 0
        }
      }));
      if (isNewNfe) {
        setTimeout(() => {
          console.log("🔍 É NOVA NFe - Chamando buscarProximoNumero...");
          buscarProximoNumero();
        }, 200);
      } else {
        console.log("🚫 NÃO é nova NFe - Pulando buscarProximoNumero");
      }
    };
    const handleLoadNfeView = async (event) => {
      var _a2;
      const nfe = event.detail;
      console.log("👁️ Evento loadNfeView recebido:", nfe);
      console.log("📊 Campos disponíveis na NFe:", Object.keys(nfe));
      console.log("📄 dados_nfe presente?", !!nfe.dados_nfe);
      console.log("📄 dados_nfe tipo:", typeof nfe.dados_nfe);
      console.log("📄 dados_nfe conteúdo:", nfe.dados_nfe);
      try {
        if (nfe.dados_nfe) {
          console.log("✅ Encontrou dados_nfe, tentando fazer parse...");
          let dadosCarregados;
          try {
            if (Array.isArray(nfe.dados_nfe)) {
              console.log("📋 dados_nfe é array, fazendo parse do primeiro elemento");
              dadosCarregados = JSON.parse(nfe.dados_nfe[0]);
              if (nfe.dados_nfe[1] && typeof nfe.dados_nfe[1] === "object") {
                const dadosAdicionais = nfe.dados_nfe[1];
                if ((_a2 = dadosAdicionais.identificacao) == null ? void 0 : _a2.codigo_numerico) {
                  dadosCarregados.identificacao = {
                    ...dadosCarregados.identificacao,
                    codigo_numerico: dadosAdicionais.identificacao.codigo_numerico
                  };
                }
              }
            } else {
              console.log("📄 dados_nfe é string, fazendo parse direto");
              dadosCarregados = JSON.parse(nfe.dados_nfe);
            }
            console.log("✅ Parse bem-sucedido, dados carregados:", dadosCarregados);
            setTimeout(() => {
              console.log("👁️ Aplicando dados completos da NFe para visualização");
              setNfeData(dadosCarregados);
              if (nfe.cartas_correcao) {
                try {
                  const ccesExistentes = typeof nfe.cartas_correcao === "string" ? JSON.parse(nfe.cartas_correcao) : nfe.cartas_correcao;
                  if (Array.isArray(ccesExistentes) && ccesExistentes.length > 0) {
                    console.log("📝 Carregando CCe existentes:", ccesExistentes);
                    setDadosAutorizacao((prev) => ({
                      ...prev,
                      cartas_correcao: ccesExistentes
                    }));
                  }
                } catch (error) {
                  console.error("❌ Erro ao carregar CCe existentes:", error);
                }
              }
            }, 100);
          } catch (error) {
            console.error("❌ Erro ao fazer parse dos dados_nfe:", error);
            carregarDadosBasicos(nfe);
          }
        } else {
          console.log("⚠️ Sem dados_nfe salvos, carregando dados básicos + itens");
          await carregarDadosBasicosComItens(nfe);
        }
        console.log("🔍 VERIFICANDO DADOS DE AUTORIZAÇÃO:");
        console.log("  - status_nfe:", nfe.status_nfe);
        console.log("  - chave_nfe:", nfe.chave_nfe);
        console.log("  - protocolo_nfe:", nfe.protocolo_nfe);
        console.log("  - data_emissao_nfe:", nfe.data_emissao_nfe);
        if ((nfe.status_nfe === "autorizada" || nfe.status_nfe === "cancelada") && (nfe.chave_nfe || nfe.protocolo_nfe)) {
          console.log("🔐 ✅ CONDIÇÕES ATENDIDAS - Carregando dados de autorização da NFe");
          let ccesExistentes = [];
          try {
            const { data: userData } = await supabase.auth.getUser();
            const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
            if (nfe.chave_nfe && (usuarioData == null ? void 0 : usuarioData.empresa_id)) {
              console.log("📋 Carregando CCe da tabela cce_nfe:", { chaveNfe: nfe.chave_nfe, empresaId: usuarioData.empresa_id });
              const response = await fetch(`/backend/public/listar-cce.php?chave_nfe=${encodeURIComponent(nfe.chave_nfe)}&empresa_id=${encodeURIComponent(usuarioData.empresa_id)}`);
              if (response.ok) {
                const result = await response.json();
                if (result.success) {
                  ccesExistentes = result.data || [];
                  console.log("✅ CCe carregadas da tabela:", ccesExistentes);
                } else {
                  console.warn("⚠️ Erro ao carregar CCe:", result.error);
                  ccesExistentes = [];
                }
              } else {
                console.error("❌ Erro na API ao carregar CCe:", response.status);
                ccesExistentes = [];
              }
            } else {
              console.log("📝 Nenhuma chave NFe ou empresa_id encontrada");
              ccesExistentes = [];
            }
          } catch (error) {
            console.error("❌ Erro ao carregar CCe da tabela cce_nfe:", error);
            ccesExistentes = [];
          }
          let proximaSequenciaCorreta = 1;
          if (ccesExistentes.length > 0) {
            const sequenciasExistentes = ccesExistentes.map((cce) => parseInt(cce.sequencia) || 0);
            const maiorSequencia = Math.max(...sequenciasExistentes);
            proximaSequenciaCorreta = maiorSequencia + 1;
            console.log("🔢 Sequências existentes:", sequenciasExistentes);
            console.log("🔢 Maior sequência encontrada:", maiorSequencia);
            console.log("🔢 Próxima sequência calculada:", proximaSequenciaCorreta);
          }
          const dadosAuth = {
            chave: nfe.chave_nfe || "",
            protocolo: nfe.protocolo_nfe || "",
            status: nfe.status_nfe,
            // Usar o status real da NFe (autorizada ou cancelada)
            dataAutorizacao: nfe.data_emissao_nfe || nfe.created_at || "",
            ambiente: "homologacao",
            // Pode ser determinado pela chave ou configuração
            motivo_cancelamento: nfe.motivo_cancelamento || "",
            data_cancelamento: nfe.cancelada_em || "",
            sequencia_cce: proximaSequenciaCorreta,
            // ✅ Usar sequência correta baseada nas CCe existentes
            carta_correcao: "",
            // Campo para o texto da carta de correção
            cartas_correcao: ccesExistentes
            // Array com CCe carregadas do banco
          };
          console.log("🔐 Dados de autorização preparados:", dadosAuth);
          setTimeout(() => {
            console.log("🔐 APLICANDO dados de autorização...");
            setDadosAutorizacao(dadosAuth);
          }, 200);
        } else {
          console.log("❌ CONDIÇÕES NÃO ATENDIDAS para carregar dados de autorização");
          console.log("  - É autorizada ou cancelada?", nfe.status_nfe === "autorizada" || nfe.status_nfe === "cancelada");
          console.log("  - Tem chave ou protocolo?", !!(nfe.chave_nfe || nfe.protocolo_nfe));
        }
      } catch (error) {
        console.error("❌ Erro geral ao carregar NFe para visualização:", error);
        carregarDadosBasicos(nfe);
      }
    };
    const carregarDadosBasicos = (nfe) => {
      setTimeout(() => {
        console.log("👁️ Carregando dados básicos da NFe");
        console.log("🔍 TODOS OS DADOS DA NFe:", nfe);
        console.log("🔍 CAMPOS ESPECÍFICOS:");
        console.log("  - documento_cliente:", nfe.documento_cliente);
        console.log("  - tipo_documento_cliente:", nfe.tipo_documento_cliente);
        console.log("  - rua_entrega:", nfe.rua_entrega);
        console.log("  - numero_entrega:", nfe.numero_entrega);
        console.log("  - bairro_entrega:", nfe.bairro_entrega);
        console.log("  - cidade_entrega:", nfe.cidade_entrega);
        console.log("  - estado_entrega:", nfe.estado_entrega);
        console.log("  - cep_entrega:", nfe.cep_entrega);
        let dataEmissaoFormatada = (/* @__PURE__ */ new Date()).toISOString().slice(0, 16);
        if (nfe.data_emissao_nfe) {
          try {
            dataEmissaoFormatada = new Date(nfe.data_emissao_nfe).toISOString().slice(0, 16);
          } catch (error) {
            console.warn("Erro ao converter data_emissao_nfe:", error);
          }
        } else if (nfe.created_at) {
          try {
            dataEmissaoFormatada = new Date(nfe.created_at).toISOString().slice(0, 16);
          } catch (error) {
            console.warn("Erro ao converter created_at:", error);
          }
        }
        console.log("📅 Data formatada para datetime-local:", dataEmissaoFormatada);
        setNfeData((prev) => {
          var _a2;
          return {
            ...prev,
            identificacao: {
              ...prev.identificacao,
              numero: ((_a2 = nfe.numero_documento) == null ? void 0 : _a2.toString()) || "",
              serie: nfe.serie_documento || 1,
              natureza_operacao: nfe.natureza_operacao || "",
              informacao_adicional: nfe.informacoes_adicionais || nfe.observacoes_nfe || "",
              data_emissao: dataEmissaoFormatada
            },
            destinatario: {
              ...prev.destinatario,
              nome: nfe.nome_cliente || "",
              documento: nfe.documento_cliente || "",
              endereco: nfe.rua_entrega || "",
              numero: nfe.numero_entrega || "",
              bairro: nfe.bairro_entrega || "",
              cidade: nfe.cidade_entrega || "",
              uf: nfe.estado_entrega || "",
              cep: nfe.cep_entrega || ""
            },
            totais: {
              ...prev.totais,
              valor_total: nfe.valor_total || 0,
              valor_produtos: nfe.valor_subtotal || nfe.valor_total || 0,
              valor_desconto: nfe.valor_desconto || 0
            }
          };
        });
      }, 100);
    };
    const carregarDadosBasicosComItens = async (nfe) => {
      try {
        const { data: itens } = await supabase.from("pdv_itens").select("*").eq("pdv_id", nfe.id);
        console.log("📦 Itens encontrados para visualização:", itens);
        let dataEmissaoFormatada = (/* @__PURE__ */ new Date()).toISOString().slice(0, 16);
        if (nfe.data_emissao_nfe) {
          try {
            dataEmissaoFormatada = new Date(nfe.data_emissao_nfe).toISOString().slice(0, 16);
          } catch (error) {
            console.warn("Erro ao converter data_emissao_nfe:", error);
          }
        } else if (nfe.created_at) {
          try {
            dataEmissaoFormatada = new Date(nfe.created_at).toISOString().slice(0, 16);
          } catch (error) {
            console.warn("Erro ao converter created_at:", error);
          }
        }
        setTimeout(() => {
          setNfeData((prev) => {
            var _a2;
            return {
              ...prev,
              identificacao: {
                ...prev.identificacao,
                numero: ((_a2 = nfe.numero_documento) == null ? void 0 : _a2.toString()) || "",
                serie: nfe.serie_documento || 1,
                natureza_operacao: nfe.natureza_operacao || "",
                informacao_adicional: nfe.informacoes_adicionais || nfe.observacoes_nfe || "",
                data_emissao: dataEmissaoFormatada
              },
              destinatario: {
                ...prev.destinatario,
                nome: nfe.nome_cliente || "",
                documento: nfe.documento_cliente || "",
                endereco: nfe.rua_entrega || "",
                numero: nfe.numero_entrega || "",
                bairro: nfe.bairro_entrega || "",
                cidade: nfe.cidade_entrega || "",
                uf: nfe.estado_entrega || "",
                cep: nfe.cep_entrega || ""
              },
              produtos: itens ? itens.map((item) => ({
                produto_id: item.produto_id,
                codigo: item.codigo_produto,
                descricao: item.nome_produto,
                quantidade: item.quantidade,
                valor_unitario: item.valor_unitario,
                valor_total: item.valor_total_item
              })) : [],
              totais: {
                ...prev.totais,
                valor_total: nfe.valor_total || 0,
                valor_produtos: nfe.valor_subtotal || nfe.valor_total || 0,
                valor_desconto: nfe.valor_desconto || 0
              }
            };
          });
        }, 100);
      } catch (error) {
        console.error("Erro ao carregar itens da NFe:", error);
        carregarDadosBasicos(nfe);
      }
    };
    window.addEventListener("loadRascunho", handleLoadRascunho);
    window.addEventListener("loadNfeView", handleLoadNfeView);
    window.addEventListener("resetEditingFlag", handleResetEditingFlag);
    return () => {
      window.removeEventListener("loadRascunho", handleLoadRascunho);
      window.removeEventListener("loadNfeView", handleLoadNfeView);
      window.removeEventListener("resetEditingFlag", handleResetEditingFlag);
    };
  }, []);
  reactExports.useEffect(() => {
    const loadEmpresaData = async () => {
      try {
        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) return;
        const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
        if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
        const { data: empresaData } = await supabase.from("empresas").select("*").eq("id", usuarioData.empresa_id).single();
        const { data: nfeConfigData } = await supabase.from("nfe_config").select("ambiente").eq("empresa_id", usuarioData.empresa_id).single();
        if (nfeConfigData) {
          setAmbienteNFe(nfeConfigData.ambiente);
        } else {
          const { error: insertError } = await supabase.from("nfe_config").insert({
            empresa_id: usuarioData.empresa_id,
            ambiente: "homologacao"
          });
          if (!insertError) {
            setAmbienteNFe("homologacao");
          }
        }
        if (empresaData) {
          setNfeData((prev) => ({
            ...prev,
            empresa: {
              id: empresaData.id,
              cnpj: empresaData.documento,
              // Corrigido: campo correto é 'documento'
              name: empresaData.razao_social,
              nome_fantasia: empresaData.nome_fantasia,
              inscricao_estadual: empresaData.inscricao_estadual,
              regime_tributario: empresaData.regime_tributario || 1,
              address: empresaData.endereco,
              numero_endereco: empresaData.numero,
              bairro: empresaData.bairro,
              city: empresaData.cidade,
              state: empresaData.estado,
              // Corrigido: campo correto é 'estado'
              uf: empresaData.estado,
              // Adicionar também como 'uf' para compatibilidade
              zip_code: empresaData.cep,
              codigo_municipio: empresaData.codigo_municipio,
              phone: empresaData.telefone,
              // Campos do certificado digital
              certificado_digital_path: empresaData.certificado_digital_path,
              certificado_digital_status: empresaData.certificado_digital_status
            }
          }));
        }
      } catch (error) {
      }
    };
    loadEmpresaData();
  }, []);
  reactExports.useEffect(() => {
    if (isEditingRascunho) {
      console.log("🔒 ESTADO DE EDIÇÃO ATIVADO - Todas as gerações automáticas estão BLOQUEADAS");
    } else {
      console.log("🔓 ESTADO DE EDIÇÃO DESATIVADO - Geração automática pode ser executada");
    }
  }, [isEditingRascunho]);
  const checkApiStatus = async () => {
    try {
      setApiStatus("checking");
      const response = await fetch("/backend/public/status-nfe.php", {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        },
        // Timeout de 5 segundos
        signal: AbortSignal.timeout(5e3)
      });
      if (response.ok) {
        const result = await response.json();
        if (result.success && result.status && result.status.includes("Online")) {
          setApiStatus("online");
        } else {
          setApiStatus("offline");
        }
      } else {
        setApiStatus("offline");
      }
    } catch (error) {
      console.error("Erro ao verificar status da API NFe:", error);
      setApiStatus("offline");
    }
  };
  const checkSefazStatus = async () => {
    try {
      setSefazStatus("checking");
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        setSefazStatus("offline");
        return;
      }
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        setSefazStatus("offline");
        return;
      }
      const response = await fetch(`/backend/public/status-sefaz.php?empresa_id=${usuarioData.empresa_id}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        },
        // Timeout de 10 segundos (SEFAZ pode ser mais lenta)
        signal: AbortSignal.timeout(1e4)
      });
      if (response.ok) {
        const result = await response.json();
        if (result.success && result.status === "online") {
          setSefazStatus("online");
        } else {
          setSefazStatus("offline");
        }
      } else {
        setSefazStatus("offline");
      }
    } catch (error) {
      console.error("Erro ao verificar status da SEFAZ:", error);
      setSefazStatus("offline");
    }
  };
  reactExports.useEffect(() => {
    const loadNaturezasOperacao = async () => {
      try {
        const { data, error } = await supabase.from("nfe_natureza_op").select("id, descricao").eq("ativo", true).order("descricao");
        if (error) {
          console.error("Erro ao carregar naturezas de operação:", error);
          return;
        }
        setNaturezasOperacao(data || []);
      } catch (error) {
        console.error("Erro ao carregar naturezas de operação:", error);
      }
    };
    loadNaturezasOperacao();
  }, []);
  reactExports.useEffect(() => {
    checkApiStatus();
    checkSefazStatus();
  }, []);
  const handleEmitirNFe = async () => {
    var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v;
    try {
      setIsLoading(true);
      setShowProgressModal(true);
      clearAllLogs();
      resetProgress();
      updateStep("validacao", "loading");
      addLog("Iniciando processo de emissão da NFe");
      addLog(`Ambiente selecionado: ${ambienteNFe.toUpperCase()}`);
      const validationErrors = [];
      addLog("🔍 Verificando dados da empresa...");
      addLog(`Empresa carregada: ${nfeData.empresa ? "SIM" : "NÃO"}`);
      if (nfeData.empresa) {
        addLog(`Nome empresa: ${nfeData.empresa.name || "N/A"}`);
        addLog(`CNPJ: ${nfeData.empresa.cnpj || "N/A"}`);
        addLog(`UF: ${nfeData.empresa.state || nfeData.empresa.uf || "N/A"}`);
        addLog(`Inscrição Estadual: ${nfeData.empresa.inscricao_estadual || "N/A"}`);
        addLog(`Regime Tributário: ${nfeData.empresa.regime_tributario || "N/A"}`);
        addLog(`Código Município: ${nfeData.empresa.codigo_municipio || "N/A"}`);
        addLog("🔍 Verificando certificado digital no backend...");
        try {
          const { data: userData2 } = await supabase.auth.getUser();
          const { data: usuarioData2 } = await supabase.from("usuarios").select("empresa_id").eq("id", userData2.user.id).single();
          if (usuarioData2 == null ? void 0 : usuarioData2.empresa_id) {
            const certificadoStatus = await fetch(`/backend/public/check-certificado.php?empresa_id=${usuarioData2.empresa_id}`);
            const certificadoResult = await certificadoStatus.json();
            if (certificadoResult.success && certificadoResult.exists) {
              addLog(`✅ Certificado digital: CONFIGURADO`);
              addLog(`   Nome: ${certificadoResult.data.nome_certificado || "N/A"}`);
              addLog(`   Status: ${certificadoResult.data.status || "N/A"}`);
              addLog(`   Validade: ${certificadoResult.data.validade || "N/A"}`);
              nfeData.empresa.certificado_configurado = true;
              nfeData.empresa.certificado_status = certificadoResult.data.status;
            } else {
              addLog(`❌ Certificado digital: NÃO CONFIGURADO`);
              nfeData.empresa.certificado_configurado = false;
            }
          }
        } catch (certError) {
          addLog(`⚠️ Erro ao verificar certificado: ${certError.message}`);
          nfeData.empresa.certificado_configurado = false;
        }
      }
      if (!nfeData.empresa) {
        validationErrors.push("Dados da empresa não carregados");
      }
      const certificadoConfigurado = ((_a2 = nfeData.empresa) == null ? void 0 : _a2.certificado_configurado) === true;
      if (!certificadoConfigurado) {
        validationErrors.push("Certificado digital não configurado para a empresa");
        addLog("❌ Certificado digital é obrigatório para emissão de NFe");
      }
      if (ambienteNFe === "producao") {
        if (!certificadoConfigurado) {
          validationErrors.push("Certificado digital REAL é obrigatório para ambiente de produção");
          addLog("❌ Ambiente de produção requer certificado digital válido");
        }
        if (((_b2 = nfeData.empresa) == null ? void 0 : _b2.certificado_status) === "vencido") {
          validationErrors.push("Certificado digital está vencido");
          addLog("❌ Certificado digital vencido não pode ser usado em produção");
        }
      }
      addLog("👤 Validando destinatário...");
      if (!nfeData.destinatario.documento || !nfeData.destinatario.nome) {
        const erro = "Destinatário é obrigatório (CNPJ/CPF e Nome)";
        validationErrors.push(erro);
        addLog(`❌ ${erro}`);
        addLog(`   Documento: ${nfeData.destinatario.documento || "NÃO INFORMADO"}`);
        addLog(`   Nome: ${nfeData.destinatario.nome || "NÃO INFORMADO"}`);
      } else {
        addLog(`✅ Destinatário: ${nfeData.destinatario.nome}`);
        addLog(`✅ Documento: ${nfeData.destinatario.documento}`);
      }
      if (!nfeData.destinatario.endereco || !nfeData.destinatario.endereco.trim()) {
        const erro = "Endereço do destinatário é obrigatório";
        validationErrors.push(erro);
        addLog(`❌ ${erro}`);
        addLog(`   Endereço: ${nfeData.destinatario.endereco || "NÃO INFORMADO"}`);
      } else {
        addLog(`✅ Endereço: ${nfeData.destinatario.endereco}`);
      }
      const camposEndereco = [
        { campo: "bairro", nome: "Bairro" },
        { campo: "cidade", nome: "Cidade" },
        { campo: "uf", nome: "UF" },
        { campo: "cep", nome: "CEP" }
      ];
      camposEndereco.forEach(({ campo, nome }) => {
        if (!nfeData.destinatario[campo] || !nfeData.destinatario[campo].trim()) {
          const erro = `${nome} do destinatário é obrigatório`;
          validationErrors.push(erro);
          addLog(`❌ ${erro}`);
        } else {
          addLog(`✅ ${nome}: ${nfeData.destinatario[campo]}`);
        }
      });
      addLog("📦 Validando produtos...");
      if (nfeData.produtos.length === 0) {
        const erro = "Adicione pelo menos um produto";
        validationErrors.push(erro);
        addLog(`❌ ${erro}`);
      } else {
        addLog(`✅ ${nfeData.produtos.length} produto(s) adicionado(s)`);
        nfeData.produtos.forEach((produto, index2) => {
          var _a3;
          addLog(`   ${index2 + 1}. ${produto.descricao} - R$ ${((_a3 = produto.valor_total) == null ? void 0 : _a3.toFixed(2)) || "0.00"}`);
        });
      }
      addLog("💳 Validando pagamentos...");
      if (nfeData.pagamentos.length === 0) {
        const erro = "Adicione pelo menos uma forma de pagamento";
        validationErrors.push(erro);
        addLog(`❌ ${erro}`);
      } else {
        addLog(`✅ ${nfeData.pagamentos.length} forma(s) de pagamento`);
        const totalPagamentos = nfeData.pagamentos.reduce((sum, p2) => sum + (p2.valor || 0), 0);
        const totalNota = nfeData.totais.valor_total || 0;
        addLog(`   Total pagamentos: R$ ${totalPagamentos.toFixed(2)}`);
        addLog(`   Total da nota: R$ ${totalNota.toFixed(2)}`);
        if (Math.abs(totalPagamentos - totalNota) > 0.01) {
          addLog(`⚠️ Ajustando pagamentos de R$ ${totalPagamentos.toFixed(2)} para R$ ${totalNota.toFixed(2)}`);
          if (nfeData.pagamentos.length === 1) {
            nfeData.pagamentos[0].valor = totalNota;
            addLog("✅ Pagamento único ajustado automaticamente");
          } else if (nfeData.pagamentos.length > 1) {
            const diferenca = totalNota - totalPagamentos;
            nfeData.pagamentos[0].valor += diferenca;
            addLog("✅ Primeiro pagamento ajustado automaticamente");
          } else {
            nfeData.pagamentos = [{ tipo: "01", valor: totalNota }];
            addLog("✅ Pagamento criado automaticamente");
          }
          addLog("✅ Valores dos pagamentos ajustados e conferem");
        } else {
          addLog("✅ Valores dos pagamentos conferem");
        }
      }
      addLog("🆔 Validando identificação...");
      if (!nfeData.identificacao.natureza_operacao) {
        const erro = "Natureza da operação é obrigatória";
        validationErrors.push(erro);
        addLog(`❌ ${erro}`);
      } else {
        addLog(`✅ Natureza da operação: ${nfeData.identificacao.natureza_operacao}`);
      }
      addLog(`📊 Resumo da validação: ${validationErrors.length} erro(s) encontrado(s)`);
      if (validationErrors.length > 0) {
        updateStep("validacao", "error", "Erros de validação encontrados");
        addLog("ERRO: Validação falhou");
        validationErrors.forEach((error) => addLog(`- ${error}`));
        return;
      }
      addLog("Validação concluída com sucesso");
      updateStep("validacao", "success", "Dados validados");
      if (ambienteNFe === "producao") {
        setShowProgressModal(false);
        const confirmacao = confirm(
          "⚠️ ATENÇÃO: AMBIENTE DE PRODUÇÃO\n\nVocê está prestes a emitir uma NFe REAL no ambiente de PRODUÇÃO.\nEsta NFe terá valor fiscal e será enviada para a SEFAZ oficial.\n\n📄 Valor: R$ " + nfeData.totais.valor_total.toFixed(2) + "\n👤 Cliente: " + nfeData.destinatario.nome + "\n\nDeseja continuar?"
        );
        if (!confirmacao) {
          setShowProgressModal(false);
          clearAllLogs();
          setIsLoading(false);
          return;
        }
        setShowProgressModal(true);
      }
      const numeroNFe = parseInt(nfeData.identificacao.numero) || 1;
      const serieNFe = parseInt(nfeData.identificacao.serie) || 1;
      const ambiente = ambienteNFe;
      if (!isEditingRascunho) {
        addLog("🔍 Verificando numeração duplicada...");
        const { data: nfeExistente } = await supabase.from("pdv").select("id, numero_documento, status_nfe").eq("empresa_id", nfeData.empresa.id).eq("modelo_documento", 55).eq("serie_documento", serieNFe).eq("numero_documento", numeroNFe).neq("status_nfe", "rascunho").single();
        if (nfeExistente) {
          const erro = `NFe número ${numeroNFe} série ${serieNFe} já existe (Status: ${nfeExistente.status_nfe})`;
          validationErrors.push(erro);
          addLog(`❌ ${erro}`);
          updateStep("validacao", "error", "Numeração duplicada");
          return;
        }
        addLog("✅ Numeração disponível");
      } else {
        addLog(`✅ Editando rascunho - usando número ${numeroNFe} série ${serieNFe}`);
      }
      let codigoNumerico2 = nfeData.identificacao.codigo_numerico;
      if (!codigoNumerico2) {
        if (isEditingRascunho) {
          const erro = "Rascunho sem código numérico válido. Salve como rascunho novamente para gerar um código.";
          validationErrors.push(erro);
          addLog(`❌ ${erro}`);
          updateStep("validacao", "error", "Código numérico ausente");
          return;
        } else {
          addLog("🔢 Gerando código numérico simples...");
          codigoNumerico2 = Math.floor(1e7 + Math.random() * 9e7).toString();
          addLog(`✅ Código numérico gerado: ${codigoNumerico2}`);
        }
      } else {
        addLog(`✅ Usando código pré-gerado: ${codigoNumerico2}`);
      }
      const payload = {
        ambiente: ambienteNFe === "producao" ? 1 : 2,
        // 1=Produção, 2=Homologação
        empresa: {
          ...nfeData.empresa,
          // ✅ TESTE: Forçar IE claramente inválida para testar validação SEFAZ
          inscricao_estadual: "111111111"
          // IE inválida para teste
        },
        cliente: {
          documento: nfeData.destinatario.documento,
          name: nfeData.destinatario.nome,
          ie_destinatario: nfeData.destinatario.ie_destinatario || 9,
          inscricao_estadual: nfeData.destinatario.inscricao_estadual || "",
          emails: nfeData.destinatario.emails || [],
          // ✅ CORREÇÃO: Backend espera sub-array 'endereco'
          endereco: {
            logradouro: nfeData.destinatario.endereco,
            numero: nfeData.destinatario.numero,
            bairro: nfeData.destinatario.bairro,
            cidade: nfeData.destinatario.cidade,
            uf: nfeData.destinatario.uf,
            cep: nfeData.destinatario.cep,
            codigo_municipio: nfeData.destinatario.codigo_municipio || 3550308
          }
        },
        produtos: nfeData.produtos.map((produto) => ({
          ...produto,
          // ✅ ENVIAR DADOS REAIS SEM FALLBACKS (backend validará se estão completos)
          cfop: produto.cfop,
          ncm: produto.ncm,
          ean: produto.ean,
          unidade: produto.unidade,
          origem_produto: produto.origem_produto,
          cst_icms: produto.cst_icms,
          csosn_icms: produto.csosn_icms,
          aliquota_icms: produto.aliquota_icms,
          cst_pis: produto.cst_pis,
          cst_cofins: produto.cst_cofins,
          aliquota_pis: produto.aliquota_pis,
          aliquota_cofins: produto.aliquota_cofins,
          cst_ipi: produto.cst_ipi,
          aliquota_ipi: produto.aliquota_ipi,
          cest: produto.cest
        })),
        totais: {
          valor_produtos: parseFloat(((_c = nfeData.totais.valor_produtos) == null ? void 0 : _c.toString()) || "0"),
          valor_desconto: parseFloat(((_d = nfeData.totais.valor_desconto) == null ? void 0 : _d.toString()) || "0"),
          valor_total: parseFloat(((_e = nfeData.totais.valor_total) == null ? void 0 : _e.toString()) || "0"),
          natureza_operacao: nfeData.identificacao.natureza_operacao
        },
        pagamentos: nfeData.pagamentos.map((pagamento) => {
          var _a3;
          return {
            ...pagamento,
            // ✅ CORREÇÃO PRINCIPAL: Garantir que valor seja float
            valor: parseFloat(((_a3 = pagamento.valor) == null ? void 0 : _a3.toString()) || "0")
          };
        }),
        informacao_adicional: nfeData.identificacao.informacao_adicional || "",
        // Incluir dados de identificação da NFe
        identificacao: {
          numero: numeroNFe,
          serie: parseInt(nfeData.identificacao.serie) || 1,
          codigo_numerico: codigoNumerico2,
          natureza_operacao: nfeData.identificacao.natureza_operacao
        }
      };
      updateStep("geracao", "loading");
      addLog("Iniciando processamento completo da NFe...");
      addLog(`Valor total: R$ ${nfeData.totais.valor_total.toFixed(2)}`);
      addLog(`Cliente: ${nfeData.destinatario.nome}`);
      addLog(`Ambiente: ${ambienteNFe === "producao" ? "PRODUÇÃO" : "HOMOLOGAÇÃO"}`);
      addLog("🚀 Usando endpoint local NFe (XML + Assinatura + SEFAZ)...");
      const { data: userData } = await supabase.auth.getUser();
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        throw new Error("Empresa não identificada para o usuário");
      }
      if (!nfeData.empresa.name && !nfeData.empresa.razao_social) {
        throw new Error("Razão social da empresa não foi carregada");
      }
      if (!nfeData.empresa.cnpj && !nfeData.empresa.documento) {
        throw new Error("CNPJ da empresa não foi carregado");
      }
      if (!nfeData.empresa.state && !nfeData.empresa.uf) {
        throw new Error("UF da empresa não foi carregada");
      }
      if (!nfeData.empresa.inscricao_estadual) {
        throw new Error("Inscrição Estadual da empresa não foi carregada");
      }
      if (!nfeData.empresa.regime_tributario) {
        throw new Error("Regime tributário da empresa não foi carregado");
      }
      if (!nfeData.empresa.codigo_municipio) {
        throw new Error("Código do município da empresa não foi carregado");
      }
      const localPayload = {
        empresa_id: usuarioData.empresa_id,
        nfe_data: {
          empresa: {
            razao_social: nfeData.empresa.name || nfeData.empresa.razao_social,
            cnpj: nfeData.empresa.cnpj || nfeData.empresa.documento,
            nome_fantasia: nfeData.empresa.nome_fantasia,
            inscricao_estadual: nfeData.empresa.inscricao_estadual,
            regime_tributario: nfeData.empresa.regime_tributario,
            uf: nfeData.empresa.state || nfeData.empresa.uf,
            codigo_municipio: nfeData.empresa.codigo_municipio,
            endereco: {
              logradouro: nfeData.empresa.address || nfeData.empresa.endereco,
              numero: nfeData.empresa.numero_endereco || nfeData.empresa.numero,
              bairro: nfeData.empresa.bairro,
              cidade: nfeData.empresa.city || nfeData.empresa.cidade,
              cep: nfeData.empresa.zip_code || nfeData.empresa.cep
            }
          },
          destinatario: payload.cliente,
          produtos: payload.produtos,
          totais: payload.totais,
          pagamentos: payload.pagamentos,
          identificacao: payload.identificacao,
          // ✅ CORREÇÃO: Adicionar informação adicional que estava faltando
          informacao_adicional: nfeData.identificacao.informacao_adicional || "",
          ambiente: ambienteNFe
        }
      };
      addLog("🔍 Analisando estrutura dos dados...");
      try {
        const debugResponse = await fetch("/backend/public/debug-nfe.php", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(localPayload)
        });
        const debugResult = await debugResponse.json();
        addLog("📊 Estrutura dos dados analisada:");
        addLog(`   Total produtos: ${((_f = debugResult.analise) == null ? void 0 : _f.total_produtos) || 0}`);
        addLog(`   Campos encontrados: ${((_h = (_g = debugResult.analise) == null ? void 0 : _g.campos_encontrados) == null ? void 0 : _h.join(", ")) || "nenhum"}`);
        if (((_j = (_i = debugResult.analise) == null ? void 0 : _i.estrutura_produtos) == null ? void 0 : _j.length) > 0) {
          debugResult.analise.estrutura_produtos.forEach((prod, index2) => {
            var _a3;
            addLog(`   Produto ${index2 + 1}: ${((_a3 = prod.campos_disponiveis) == null ? void 0 : _a3.join(", ")) || "sem campos"}`);
          });
        }
      } catch (debugError) {
        addLog(`⚠️ Erro no debug: ${debugError.message}`);
      }
      addLog("🚀 Enviando NFe para emissão...");
      addLog("🔍 DEBUG - Dados do destinatário sendo enviados:");
      addLog(`   Nome: ${localPayload.nfe_data.destinatario.name || "VAZIO"}`);
      addLog(`   Documento: ${localPayload.nfe_data.destinatario.documento || "VAZIO"}`);
      addLog(`   IE Destinatário: ${localPayload.nfe_data.destinatario.ie_destinatario || "VAZIO"}`);
      addLog(`   Endereço presente: ${localPayload.nfe_data.destinatario.endereco ? "SIM" : "NÃO"}`);
      if (localPayload.nfe_data.destinatario.endereco) {
        addLog(`   Logradouro: ${localPayload.nfe_data.destinatario.endereco.logradouro || "VAZIO"}`);
        addLog(`   Número: ${localPayload.nfe_data.destinatario.endereco.numero || "VAZIO"}`);
        addLog(`   Bairro: ${localPayload.nfe_data.destinatario.endereco.bairro || "VAZIO"}`);
        addLog(`   Cidade: ${localPayload.nfe_data.destinatario.endereco.cidade || "VAZIO"}`);
        addLog(`   UF: ${localPayload.nfe_data.destinatario.endereco.uf || "VAZIO"}`);
        addLog(`   CEP: ${localPayload.nfe_data.destinatario.endereco.cep || "VAZIO"}`);
        addLog(`   Código Município: ${localPayload.nfe_data.destinatario.endereco.codigo_municipio || "VAZIO"}`);
      }
      addLog("🔍 DEBUG - Informação Adicional:");
      addLog(`   Valor: "${localPayload.nfe_data.informacao_adicional || "VAZIO"}"`);
      addLog(`   Tamanho: ${(localPayload.nfe_data.informacao_adicional || "").length} caracteres`);
      const response = await fetch("/backend/public/emitir-nfe.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(localPayload)
      });
      if (!response.ok) {
        const errorText = await response.text();
        let erroEspecifico = null;
        try {
          const errorData = JSON.parse(errorText);
          if (errorData.error) {
            try {
              const erroSefaz = JSON.parse(errorData.error);
              if (erroSefaz.tipo === "erro_sefaz") {
                erroEspecifico = erroSefaz;
              }
            } catch (parseError) {
            }
          }
        } catch (parseError) {
        }
        if (erroEspecifico) {
          updateStep("geracao", "error", erroEspecifico.titulo);
          addLog(`❌ ${erroEspecifico.titulo}`);
          addLog(`📋 ${erroEspecifico.descricao}`);
          addLog(`💡 ${erroEspecifico.solucao}`);
          addLog("");
          addLog("🔧 Detalhes técnicos:");
          addLog(`   Status SEFAZ: ${((_k = erroEspecifico.detalhes_tecnicos) == null ? void 0 : _k.status) || "N/A"}`);
          addLog(`   Motivo: ${((_l = erroEspecifico.detalhes_tecnicos) == null ? void 0 : _l.motivo) || "N/A"}`);
          throw new Error(`${erroEspecifico.titulo}: ${erroEspecifico.descricao}`);
        } else {
          updateStep("geracao", "error", `Erro HTTP ${response.status}`);
          addLog(`ERRO: Falha no processamento completo - HTTP ${response.status}`);
          addLog(`Detalhes: ${errorText}`);
          throw new Error(`Erro HTTP ${response.status}: ${errorText}`);
        }
      }
      const result = await response.json();
      addLog("📄 Resposta da API NFe Completa:");
      addLog(`   Success: ${result.success}`);
      addLog(`   Message: ${result.message || "N/A"}`);
      addLog(`   Data presente: ${result.data ? "SIM" : "NÃO"}`);
      if (result.data) {
        addLog(`   XML presente: ${result.data.xml ? "SIM" : "NÃO"}`);
        addLog(`   Chave presente: ${result.data.chave ? "SIM" : "NÃO"}`);
        addLog(`   Protocolo presente: ${result.data.protocolo ? "SIM" : "NÃO"}`);
        addLog(`   Status SEFAZ: ${result.data.status || "N/A"}`);
        addLog(`   Motivo: ${result.data.motivo || "N/A"}`);
        if (result.data.xml) {
          addLog(`   Tamanho XML: ${result.data.xml.length} caracteres`);
        }
        if (result.data.chave) {
          addLog(`   Chave: ${result.data.chave}`);
        }
        if (result.data.protocolo) {
          addLog(`   Protocolo: ${result.data.protocolo}`);
        }
      }
      if (!result.success) {
        updateStep("geracao", "error", "Falha no processamento");
        addLog("ERRO: API retornou falha no processamento");
        let erroDetalhado = result.error || result.message || "Erro desconhecido";
        try {
          const erroJson = JSON.parse(erroDetalhado);
          if (erroJson.tipo === "erro_sefaz") {
            addLog(`❌ ${erroJson.titulo}`);
            addLog(`📋 ${erroJson.descricao}`);
            addLog(`💡 ${erroJson.solucao}`);
            addLog("");
            addLog("🔧 Detalhes técnicos:");
            addLog(`   Status SEFAZ: ${erroJson.detalhes_tecnicos.status}`);
            addLog(`   Motivo: ${erroJson.detalhes_tecnicos.motivo}`);
            throw new Error(`${erroJson.titulo}: ${erroJson.descricao}`);
          }
        } catch (parseError) {
        }
        addLog(`Detalhes: ${erroDetalhado}`);
        throw new Error(erroDetalhado);
      }
      if (!result.data || !result.data.xml || !result.data.chave || !result.data.protocolo) {
        updateStep("geracao", "error", "Dados incompletos da API");
        addLog("ERRO: API retornou dados incompletos");
        addLog(`   XML: ${((_m = result.data) == null ? void 0 : _m.xml) ? "OK" : "FALTANDO"}`);
        addLog(`   Chave: ${((_n = result.data) == null ? void 0 : _n.chave) ? "OK" : "FALTANDO"}`);
        addLog(`   Protocolo: ${((_o = result.data) == null ? void 0 : _o.protocolo) ? "OK" : "FALTANDO"}`);
        throw new Error("API retornou dados incompletos (XML, chave ou protocolo faltando)");
      }
      updateStep("sefaz", "loading");
      addLog("🔍 Verificando autorização da SEFAZ...");
      const statusSefaz = result.data.status;
      if (statusSefaz === "100") {
        updateStep("sefaz", "success", "NFe autorizada pela SEFAZ");
        addLog("✅ NFe autorizada pela SEFAZ (Status 100)");
        addLog(`✅ Protocolo real: ${result.data.protocolo}`);
      } else {
        updateStep("sefaz", "error", `NFe não autorizada (Status ${statusSefaz})`);
        addLog(`❌ NFe NÃO autorizada - Status: ${statusSefaz}`);
        addLog(`❌ Motivo: ${result.data.motivo || "Sem detalhes"}`);
        throw new Error(`NFe não foi autorizada pela SEFAZ. Status: ${statusSefaz} - ${result.data.motivo}`);
      }
      addLog("✅ XML gerado com sucesso");
      addLog("✅ Certificado digital aplicado");
      addLog(`Chave NFe: ${result.data.chave}`);
      addLog(`Protocolo: ${result.data.protocolo}`);
      updateStep("geracao", "success", "XML gerado");
      updateStep("sefaz", "success", "Autorizada pela SEFAZ");
      updateStep("validacao_xml", "loading");
      addLog("🔍 Validando se o XML foi gerado corretamente...");
      await validarArquivoXML(result.data.chave);
      updateStep("validacao_xml", "success", "XML validado com sucesso");
      updateStep("validacao_pdf", "loading");
      addLog("🔍 Validando se o PDF foi gerado corretamente...");
      if (result.data.pdf_path && result.data.pdf_path !== null) {
        try {
          await validarArquivoPDF(result.data.chave);
          updateStep("validacao_pdf", "success", "PDF validado com sucesso");
          addLog("✅ PDF validado com sucesso");
        } catch (pdfError) {
          updateStep("validacao_pdf", "error", "Erro na validação do PDF");
          addLog(`❌ Erro na validação do PDF: ${pdfError.message}`);
          throw new Error(`Falha na validação do PDF: ${pdfError.message}`);
        }
      } else {
        updateStep("validacao_pdf", "warning", "PDF será gerado após autorização");
        addLog("ℹ️ PDF não foi gerado - será criado após autorização da SEFAZ");
        addLog("📋 Para status 103, o PDF é gerado apenas após autorização final");
      }
      updateStep("banco", "loading");
      addLog("Salvando NFe no banco de dados...");
      try {
        await salvarNFeNoBanco(result.data);
        addLog("NFe salva no banco com sucesso");
        updateStep("banco", "success", "Salva no banco");
      } catch (dbError) {
        updateStep("banco", "error", "Erro ao salvar no banco");
        addLog("AVISO: Erro ao salvar no banco local");
        addLog(`Detalhes: ${dbError.message || "Erro desconhecido"}`);
        addLog("NFe foi autorizada pela SEFAZ, mas pode não aparecer na listagem");
      }
      updateStep("finalizacao", "loading");
      addLog("Finalizando processo...");
      setDadosAutorizacao({
        chave: result.data.chave,
        protocolo: result.data.protocolo,
        // ✅ PROTOCOLO REAL (15 dígitos)
        dataAutorizacao: result.data.data_autorizacao || (/* @__PURE__ */ new Date()).toISOString(),
        status: result.data.status === "100" ? "autorizada" : "rejeitada",
        // ✅ STATUS REAL
        ambiente: ambienteNFe
      });
      addLog("✅ Código numérico utilizado com sucesso");
      setNfeEmitida(true);
      updateStep("email", "loading");
      addLog("📧 Iniciando envio por email...");
      const emailsDestinatario = nfeData.destinatario.emails || [];
      if (emailsDestinatario.length > 0) {
        addLog(`📧 Emails encontrados: ${emailsDestinatario.join(", ")}`);
        try {
          const emailResponse = await fetch("/backend/public/enviar-nfe-email.php", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              empresa_id: usuarioData.empresa_id,
              chave_nfe: result.data.chave,
              emails: emailsDestinatario,
              nfe_data: {
                numero: result.data.numero_nfe || nfeData.identificacao.numero,
                serie: nfeData.identificacao.serie,
                valor_total: nfeData.totais.valor_total,
                cliente_nome: nfeData.destinatario.nome,
                empresa_nome: ((_p = nfeData.empresa) == null ? void 0 : _p.nome_fantasia) || ((_q = nfeData.empresa) == null ? void 0 : _q.name) || "Sistema Nexo",
                empresa_endereco: ((_r = nfeData.empresa) == null ? void 0 : _r.address) || "",
                empresa_cnpj: ((_s = nfeData.empresa) == null ? void 0 : _s.cnpj) || "",
                empresa_telefone: ((_t = nfeData.empresa) == null ? void 0 : _t.phone) || "",
                empresa_email: ((_u = nfeData.empresa) == null ? void 0 : _u.email) || "",
                empresa_website: ((_v = nfeData.empresa) == null ? void 0 : _v.website) || ""
              }
            })
          });
          if (emailResponse.ok) {
            const emailResult = await emailResponse.json();
            if (emailResult.success) {
              addLog(`✅ Email enviado com sucesso para: ${emailsDestinatario.join(", ")}`);
              updateStep("email", "success", `Enviado para ${emailsDestinatario.length} email(s)`);
            } else {
              addLog(`⚠️ Falha no envio de email: ${emailResult.error}`);
              setEmailError(`Erro ao enviar email: ${emailResult.error}`);
              setShowCloseButton(true);
              if (emailResult.arquivos) {
                addLog(`📁 XML existe: ${emailResult.arquivos.xml_existe ? "SIM" : "NÃO"}`);
                addLog(`📁 PDF existe: ${emailResult.arquivos.pdf_existe ? "SIM" : "NÃO"}`);
                if (!emailResult.arquivos.xml_existe) {
                  addLog(`📁 Caminho XML: ${emailResult.arquivos.xml_path}`);
                }
                if (!emailResult.arquivos.pdf_existe) {
                  addLog(`📁 Caminho PDF: ${emailResult.arquivos.pdf_path}`);
                }
              }
              updateStep("email", "error", "Falha no envio");
            }
          } else {
            const errorText = await emailResponse.text();
            let errorDetails = "Erro na comunicação com serviço de email";
            try {
              const errorData = JSON.parse(errorText);
              errorDetails = errorData.error || errorDetails;
            } catch (parseError) {
              errorDetails = errorText || errorDetails;
            }
            addLog(`⚠️ ${errorDetails}`);
            setEmailError(errorDetails);
            setShowCloseButton(true);
            updateStep("email", "error", "Erro na comunicação");
          }
        } catch (emailError2) {
          addLog(`⚠️ Erro ao enviar email: ${emailError2.message}`);
          setEmailError(`Erro ao enviar email: ${emailError2.message}`);
          setShowCloseButton(true);
          updateStep("email", "error", "Erro no envio");
        }
        setEmailProcessCompleted(true);
      } else {
        addLog("ℹ️ Nenhum email cadastrado para o destinatário");
        updateStep("email", "success", "Nenhum email cadastrado");
        setEmailProcessCompleted(true);
      }
      addLog("✅ NFe emitida com sucesso!");
      addLog(`Chave: ${result.data.chave}`);
      addLog(`Protocolo: ${result.data.protocolo || "N/A"}`);
      addLog(`Número NFe: ${result.data.numero_nfe || "N/A"}`);
      addLog(`Valor: R$ ${nfeData.totais.valor_total.toFixed(2)}`);
      updateStep("finalizacao", "success", "Processo concluído");
    } catch (error) {
      if (typeof codigoNumerico !== "undefined") {
        addLog("ℹ️ Código numérico não será reutilizado");
      }
      addLog("❌ ERRO CRÍTICO NO PROCESSO");
      addLog(`Detalhes: ${error.message || "Erro desconhecido"}`);
      const currentStep = progressSteps.find((step) => step.status === "loading");
      if (currentStep) {
        updateStep(currentStep.id, "error", "Falha na execução");
      }
      addLog("🔍 Buscando logs detalhados da API...");
      try {
        await fetchApiLogs("error", 10);
        addLog('✅ Logs da API carregados - verifique a seção "API Server Logs"');
      } catch (logError) {
        addLog("⚠️ Não foi possível carregar logs da API");
      }
      if (error.message.includes("NFe Duplicada") || error.message.includes("Duplicidade")) {
        addLog("Tipo: ❌ NFe Duplicada (Status SEFAZ 539)");
        addLog("Solução: Verifique se esta NFe já foi emitida ou use um número diferente");
      } else if (error.message.includes("Failed to fetch")) {
        addLog("Tipo: Erro de conexão com a API");
        addLog("Solução: Verifique sua conexão e se a API está funcionando");
      } else if (error.message.includes("HTTP 404")) {
        addLog("Tipo: Endpoint não encontrado");
        addLog("Solução: Verifique se a API está configurada corretamente");
      } else if (error.message.includes("HTTP 500")) {
        addLog("Tipo: Erro interno do servidor");
        addLog("Solução: Verifique os logs da API para detalhes específicos");
      } else if (error.message.includes("timeout")) {
        addLog("Tipo: Timeout na requisição");
        addLog("Solução: A operação demorou muito para responder");
      } else if (error.message.includes("Erro na Validação da NFe")) {
        addLog("Tipo: ❌ Erro de Validação SEFAZ");
        addLog("Solução: Verifique os dados da NFe e corrija os problemas indicados");
      } else {
        addLog("Tipo: Erro não categorizado");
      }
      addLog("");
      addLog('📋 Use o botão "Copiar Logs" para enviar os detalhes para suporte');
    } finally {
      setIsLoading(false);
    }
  };
  const validarArquivoXML = async (chave) => {
    try {
      addLog("📄 Verificando se o arquivo XML existe no servidor...");
      const { data: userData } = await supabase.auth.getUser();
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        throw new Error("Empresa não identificada para validação");
      }
      const xmlUrl = `/backend/public/download-arquivo.php?type=xml&chave=${chave}&empresa_id=${usuarioData.empresa_id}`;
      const headResponse = await fetch(xmlUrl, { method: "HEAD" });
      if (!headResponse.ok) {
        throw new Error(`XML não encontrado no servidor (Status: ${headResponse.status})`);
      }
      const contentType = headResponse.headers.get("Content-Type");
      if (!contentType || !contentType.includes("xml")) {
        throw new Error("Arquivo encontrado mas não é um XML válido");
      }
      addLog("📄 Baixando XML para validação de conteúdo...");
      const getResponse = await fetch(xmlUrl);
      if (!getResponse.ok) {
        throw new Error(`Erro ao baixar XML (Status: ${getResponse.status})`);
      }
      const xmlContent = await getResponse.text();
      if (!xmlContent || xmlContent.trim().length === 0) {
        throw new Error("XML está vazio");
      }
      if (!xmlContent.includes("<?xml")) {
        throw new Error("XML não possui declaração XML válida");
      }
      if (!xmlContent.includes("<NFe") || !xmlContent.includes("</NFe>")) {
        throw new Error("XML não contém estrutura NFe válida");
      }
      if (!xmlContent.includes("<infNFe") || !xmlContent.includes("</infNFe>")) {
        throw new Error("XML não contém informações da NFe (infNFe)");
      }
      if (!xmlContent.includes(chave)) {
        throw new Error("XML não contém a chave de acesso esperada");
      }
      addLog("✅ XML validado: arquivo existe, é válido e contém dados corretos");
    } catch (error) {
      addLog(`❌ ERRO na validação do XML: ${error.message}`);
      throw new Error(`Falha na validação do XML: ${error.message}`);
    }
  };
  const validarArquivoPDF = async (chave) => {
    try {
      addLog("📄 Verificando se o arquivo PDF existe no servidor...");
      const { data: userData } = await supabase.auth.getUser();
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        throw new Error("Empresa não identificada para validação");
      }
      const pdfUrl = `/backend/public/download-arquivo.php?type=pdf&chave=${chave}&empresa_id=${usuarioData.empresa_id}`;
      const headResponse = await fetch(pdfUrl, { method: "HEAD" });
      if (!headResponse.ok) {
        throw new Error(`PDF não encontrado no servidor (Status: ${headResponse.status})`);
      }
      const contentType = headResponse.headers.get("Content-Type");
      if (!contentType || !contentType.includes("pdf")) {
        throw new Error("Arquivo encontrado mas não é um PDF válido");
      }
      const contentLength = headResponse.headers.get("Content-Length");
      if (contentLength && parseInt(contentLength) < 1e3) {
        throw new Error("PDF muito pequeno, pode estar corrompido ou vazio");
      }
      addLog("📄 Fazendo download parcial do PDF para validação...");
      const getResponse = await fetch(pdfUrl, {
        headers: {
          "Range": "bytes=0-1023"
          // Primeiros 1KB
        }
      });
      if (getResponse.ok || getResponse.status === 206) {
        const pdfHeader = await getResponse.arrayBuffer();
        const headerBytes = new Uint8Array(pdfHeader);
        const pdfSignature = String.fromCharCode(...headerBytes.slice(0, 4));
        if (pdfSignature !== "%PDF") {
          throw new Error("Arquivo não é um PDF válido (assinatura incorreta)");
        }
        addLog("✅ PDF validado: arquivo existe, é válido e tem estrutura correta");
      } else {
        throw new Error(`Erro ao validar conteúdo do PDF (Status: ${getResponse.status})`);
      }
    } catch (error) {
      addLog(`❌ ERRO na validação do PDF: ${error.message}`);
      throw new Error(`Falha na validação do PDF: ${error.message}`);
    }
  };
  const salvarNFeNoBanco = async (nfeApiData) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const statusReal = nfeApiData.status === "100" ? "autorizada" : "rejeitada";
      const dadosNFe = {
        empresa_id: usuarioData.empresa_id,
        usuario_id: userData.user.id,
        modelo_documento: 55,
        serie_documento: parseInt(nfeData.identificacao.serie) || 1,
        numero_documento: parseInt(nfeData.identificacao.numero),
        // ✅ USAR número do frontend
        chave_nfe: nfeApiData.chave,
        status_nfe: statusReal,
        // ✅ STATUS REAL DA SEFAZ
        protocolo_nfe: nfeApiData.protocolo,
        // ✅ PROTOCOLO REAL (15 dígitos)
        nome_cliente: nfeData.destinatario.nome || "Cliente",
        valor_total: nfeData.totais.valor_total || 0,
        natureza_operacao: nfeData.identificacao.natureza_operacao || "VENDA",
        xml_nfe: nfeApiData.xml,
        data_emissao_nfe: nfeApiData.data_autorizacao || nfeData.identificacao.data_emissao || (() => {
          const agora = /* @__PURE__ */ new Date();
          const offsetBrasil = -3 * 60;
          const dataBrasil = new Date(agora.getTime() + offsetBrasil * 60 * 1e3);
          return dataBrasil.toISOString();
        })(),
        // ✅ ADICIONAR: Salvar dados completos da NFe para visualização
        dados_nfe: JSON.stringify(nfeData),
        // ✅ CORRIGIDO: Campo correto é informacoes_adicionais (plural)
        informacoes_adicionais: nfeData.identificacao.informacao_adicional || "",
        // ✅ NOVO: Salvar ambiente da NFe
        ambiente: ambienteNFe
      };
      let error;
      if (isEditingRascunho && rascunhoId) {
        addLog(`🔄 Atualizando rascunho existente (ID: ${rascunhoId}) para status autorizada`);
        const result = await supabase.from("pdv").update(dadosNFe).eq("id", rascunhoId);
        error = result.error;
      } else {
        addLog("📝 Criando novo registro de NFe autorizada");
        const result = await supabase.from("pdv").insert(dadosNFe);
        error = result.error;
      }
      if (error) {
        throw error;
      }
      if (!isEditingRascunho && nfeData.produtos.length > 0) {
        addLog("📦 Salvando itens da NFe...");
        const { data: nfeRecemCriada } = await supabase.from("pdv").select("id").eq("chave_nfe", nfeApiData.chave).single();
        if (nfeRecemCriada) {
          const itensNFe = nfeData.produtos.map((produto) => ({
            empresa_id: usuarioData.empresa_id,
            usuario_id: userData.user.id,
            pdv_id: nfeRecemCriada.id,
            produto_id: produto.produto_id || null,
            codigo_produto: produto.codigo,
            nome_produto: produto.descricao,
            descricao_produto: produto.descricao,
            quantidade: produto.quantidade,
            valor_unitario: produto.valor_unitario,
            valor_total_item: produto.valor_total,
            // ✅ TODOS OS CAMPOS FISCAIS SALVOS NA TABELA PDV_ITENS:
            ncm: produto.ncm,
            cfop: produto.cfop,
            origem_produto: produto.origem_produto,
            cst_icms: produto.cst_icms,
            csosn_icms: produto.csosn_icms,
            cst_pis: produto.cst_pis,
            cst_cofins: produto.cst_cofins,
            cst_ipi: produto.cst_ipi,
            aliquota_icms: produto.aliquota_icms || 0,
            aliquota_pis: produto.aliquota_pis || 0,
            aliquota_cofins: produto.aliquota_cofins || 0,
            aliquota_ipi: produto.aliquota_ipi || 0,
            valor_icms: produto.valor_icms || 0,
            valor_pis: produto.valor_pis || 0,
            valor_cofins: produto.valor_cofins || 0,
            valor_ipi: produto.valor_ipi || 0,
            // CAMPOS ADICIONAIS:
            unidade: produto.unidade,
            ean: produto.ean,
            cest: produto.cest,
            codigo_beneficio_fiscal: produto.codigo_beneficio_fiscal,
            valor_frete: produto.valor_frete || 0,
            valor_seguro: produto.valor_seguro || 0,
            valor_outras_despesas: produto.valor_outras_despesas || 0,
            informacoes_adicionais_item: produto.informacoes_adicionais_item,
            base_calculo_icms: produto.base_calculo_icms || 0,
            base_calculo_icms_st: produto.base_calculo_icms_st || 0,
            valor_icms_st: produto.valor_icms_st || 0,
            aliquota_icms_st: produto.aliquota_icms_st || 0,
            margem_valor_agregado: produto.margem_valor_agregado || 0,
            reducao_base_calculo: produto.reducao_base_calculo || 0
          }));
          const { error: itensError } = await supabase.from("pdv_itens").insert(itensNFe);
          if (itensError) {
            addLog("⚠️ Erro ao salvar itens da NFe: " + itensError.message);
          } else {
            addLog("✅ Itens da NFe salvos com sucesso");
          }
        }
      }
      if (isEditingRascunho) {
        addLog("✅ Rascunho convertido para NFe autorizada com sucesso");
        setIsEditingRascunho(false);
        setRascunhoId(null);
      }
    } catch (error) {
      throw error;
    }
  };
  const salvarCancelamentoNoBanco = async (cancelamentoData) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { error } = await supabase.from("pdv").update({
        status_nfe: "cancelada",
        motivo_cancelamento: cancelamentoData.motivo || "Cancelamento via sistema",
        cancelada_em: (/* @__PURE__ */ new Date()).toISOString(),
        updated_at: (/* @__PURE__ */ new Date()).toISOString()
      }).eq("chave_nfe", cancelamentoData.chave_nfe).eq("empresa_id", usuarioData.empresa_id);
      if (error) {
        throw error;
      }
      console.log("✅ Status de cancelamento atualizado no banco via frontend");
    } catch (error) {
      console.error("❌ Erro ao salvar cancelamento no banco:", error);
      throw error;
    }
  };
  const sections = [
    { id: "identificacao", label: "Identificação", number: 1 },
    { id: "destinatario", label: "Destinatário", number: 2 },
    { id: "produtos", label: "Produtos", number: 3 },
    { id: "totais", label: "Totais", number: 4 },
    { id: "pagamentos", label: "Pagamentos", number: 5 },
    { id: "chaves_ref", label: "Chaves Ref.", icon: FileText },
    { id: "transportadora", label: "Transportadora", icon: FileText },
    { id: "intermediador", label: "Intermediador", icon: FileText },
    // Só mostrar a aba de Autorização após a NFe ser emitida OU em modo visualização de NFe autorizada
    ...nfeEmitida || isViewMode ? [{ id: "autorizacao", label: "Autorização", icon: FileText }] : []
  ];
  const handleCancelarNFeFromAutorizacao = async (motivo) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        throw new Error("Usuário não autenticado");
      }
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        throw new Error("Empresa não encontrada para o usuário");
      }
      const cancelData = {
        empresa_id: usuarioData.empresa_id,
        chave_nfe: dadosAutorizacao == null ? void 0 : dadosAutorizacao.chave,
        motivo: motivo.trim(),
        nfe_id: nfeEmitida == null ? void 0 : nfeEmitida.id
        // ID da NFe no banco local
      };
      console.log("🚫 Enviando dados para cancelamento:", cancelData);
      const response = await fetch("/backend/public/cancelar-nfe.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(cancelData)
      });
      const result = await response.json();
      console.log("🚫 Resposta do cancelamento:", result);
      if (!result.success) {
        throw new Error(result.error || "Erro ao cancelar NFe");
      }
      setDadosAutorizacao((prev) => ({
        ...prev,
        status: "cancelada",
        motivo_cancelamento: motivo,
        data_cancelamento: (/* @__PURE__ */ new Date()).toISOString()
      }));
      console.log("✅ NFe cancelada com sucesso - Salvando no banco...");
      try {
        await salvarCancelamentoNoBanco(result.data);
        console.log("✅ Cancelamento salvo no banco com sucesso");
      } catch (dbError) {
        console.error("❌ Erro ao salvar cancelamento no banco:", dbError);
      }
      showMessage("success", "NFe cancelada com sucesso!");
      setTimeout(() => {
        onSave();
        onBack();
      }, 1e3);
    } catch (error) {
      console.error("❌ Erro ao cancelar NFe:", error);
      throw error;
    }
  };
  const handleVisualizarPDFCCe = async (chave, sequencia) => {
    console.log("📄 Iniciando visualização do PDF da CCe:", chave, "sequência:", sequencia);
    try {
      showMessage("info", "Gerando PDF da CCe...");
      const { data: userData } = await supabase.auth.getUser();
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        showMessage("error", "Empresa não identificada");
        return;
      }
      const response = await fetch("/backend/public/gerar-pdf-cce.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          chave,
          empresa_id: usuarioData.empresa_id,
          sequencia
        })
      });
      if (!response.ok) {
        throw new Error(`Erro na API: ${response.status}`);
      }
      const result = await response.json();
      if (!result.success) {
        throw new Error(result.message || "Erro ao gerar PDF da CCe");
      }
      const pdfUrl = `/backend/public/download-arquivo.php?type=pdf_cce&chave=${chave}&empresa_id=${usuarioData.empresa_id}&sequencia=${sequencia}&action=view`;
      setTimeout(() => {
        window.open(pdfUrl, "_blank");
        showMessage("success", "PDF da CCe aberto em nova aba");
      }, 1e3);
    } catch (error) {
      console.error("Erro ao visualizar PDF da CCe:", error);
      showMessage("error", `Erro ao gerar/visualizar PDF da CCe: ${error.message}`);
    }
  };
  const handleEnviarCCe = async () => {
    var _a2;
    try {
      if (!(dadosAutorizacao == null ? void 0 : dadosAutorizacao.chave)) {
        showToast("Chave da NFe não encontrada", "error");
        return;
      }
      if (!(dadosAutorizacao == null ? void 0 : dadosAutorizacao.carta_correcao) || dadosAutorizacao.carta_correcao.length < 15) {
        showToast("Carta de Correção deve ter pelo menos 15 caracteres", "error");
        return;
      }
      setShowCCeModal(true);
      setCceStatus("loading");
      setCceMessage("Enviando Carta de Correção para a SEFAZ...");
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        throw new Error("Usuário não autenticado");
      }
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        throw new Error("Empresa não encontrada para o usuário");
      }
      const cceData = {
        empresa_id: usuarioData.empresa_id,
        chave_nfe: dadosAutorizacao.chave,
        correcao: ((_a2 = dadosAutorizacao.carta_correcao) == null ? void 0 : _a2.trim()) || "",
        sequencia: dadosAutorizacao.sequencia_cce || 1
        // Usar sequência do campo editável
      };
      console.log("📝 Enviando CCe:", cceData);
      const response = await fetch("/backend/public/carta-correcao.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(cceData)
      });
      const result = await response.json();
      if (!result.success) {
        throw new Error(result.error || "Erro ao enviar Carta de Correção");
      }
      console.log("✅ CCe enviada com sucesso:", result);
      setCceStatus("success");
      setCceMessage("Carta de Correção enviada com sucesso!");
      try {
        const pdfResponse = await fetch("/backend/public/gerar-pdf-cce.php", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            chave: dadosAutorizacao.chave,
            empresa_id: usuarioData.empresa_id,
            sequencia: result.data.sequencia
            // Usar sequência retornada pelo backend
          })
        });
        const pdfResult = await pdfResponse.json();
        if (pdfResult.success) {
          console.log("✅ PDF da CCe gerado:", pdfResult);
          showToast("PDF da Carta de Correção gerado com sucesso!", "success");
        } else {
          console.warn("⚠️ Erro ao gerar PDF da CCe:", pdfResult.error);
          showToast("CCe enviada, mas houve erro ao gerar PDF", "info");
        }
      } catch (pdfError) {
        console.warn("⚠️ Erro ao gerar PDF da CCe:", pdfError);
        showToast("CCe enviada, mas houve erro ao gerar PDF", "info");
      }
      setDadosAutorizacao((prev) => {
        var _a3;
        return {
          ...prev,
          cce_enviada: true,
          cce_protocolo: result.data.protocolo_cce,
          cce_data: result.data.data_cce,
          cce_sequencia: result.data.sequencia,
          // Adicionar nova CCe ao histórico
          cartas_correcao: [
            ...prev.cartas_correcao || [],
            {
              sequencia: result.data.sequencia,
              data_envio: result.data.data_cce,
              protocolo: result.data.protocolo_cce,
              correcao: result.data.correcao || dadosAutorizacao.carta_correcao,
              status: "aceita",
              codigo_status: result.data.codigo_status,
              ambiente: result.data.ambiente
            }
          ],
          // Limpar campo de texto da correção
          carta_correcao: "",
          // Atualizar próxima sequência
          sequencia_cce: (((_a3 = prev.cartas_correcao) == null ? void 0 : _a3.length) || 0) + 1
        };
      });
      console.log("✅ CCe adicionada ao histórico local");
    } catch (error) {
      console.error("❌ Erro ao enviar CCe:", error);
      setCceStatus("error");
      setCceMessage(`Erro ao enviar Carta de Correção: ${error.message}`);
    }
  };
  const renderContent = () => {
    var _a2;
    switch (activeSection) {
      case "identificacao":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          IdentificacaoSection,
          {
            data: nfeData.identificacao,
            onChange: (data) => setNfeData((prev) => ({ ...prev, identificacao: data })),
            naturezasOperacao,
            isEditingRascunho,
            isViewMode
          }
        );
      case "destinatario":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          DestinatarioSection,
          {
            data: nfeData.destinatario,
            onChange: (data) => setNfeData((prev) => ({ ...prev, destinatario: data })),
            onClienteSelected: (observacaoNfe) => {
              if (observacaoNfe && observacaoNfe.trim()) {
                setNfeData((prev) => ({
                  ...prev,
                  identificacao: {
                    ...prev.identificacao,
                    informacao_adicional: observacaoNfe.trim()
                  }
                }));
              }
            }
          }
        );
      case "produtos":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          ProdutosSection,
          {
            produtos: nfeData.produtos,
            empresaId: (_a2 = nfeData.empresa) == null ? void 0 : _a2.id,
            finalidade: nfeData.identificacao.finalidade,
            nfeData,
            showToast,
            onChange: (produtos) => {
              var _a3;
              const valorProdutos = produtos.reduce((sum, p2) => sum + (p2.valor_total || 0), 0);
              let totalIcmsBC = 0;
              let totalIcms = 0;
              if (((_a3 = nfeData.identificacao) == null ? void 0 : _a3.finalidade) === "4") {
                produtos.forEach((produto) => {
                  if (produto.destaque_icms_devolucao) {
                    const baseCalculo = produto.base_calculo_icms || produto.valor_total || 0;
                    const aliquota = produto.aliquota_icms || 0;
                    const valorIcms = baseCalculo * aliquota / 100;
                    totalIcmsBC += baseCalculo;
                    totalIcms += valorIcms;
                  }
                });
              }
              setNfeData((prev) => ({
                ...prev,
                produtos,
                totais: {
                  ...prev.totais,
                  valor_produtos: valorProdutos,
                  valor_total: valorProdutos - prev.totais.valor_desconto,
                  valor_icms_bc: totalIcmsBC,
                  valor_icms: totalIcms
                }
              }));
            }
          }
        );
      case "totais":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          TotaisSection,
          {
            data: nfeData.totais,
            onChange: (data) => setNfeData((prev) => ({ ...prev, totais: data }))
          }
        );
      case "pagamentos":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          PagamentosSection,
          {
            data: nfeData.pagamentos,
            onChange: (data) => setNfeData((prev) => ({ ...prev, pagamentos: data })),
            totalNota: nfeData.totais.valor_total || 0
          }
        );
      case "chaves_ref":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          ChavesRefSection,
          {
            data: nfeData.chaves_ref,
            onChange: (data) => setNfeData((prev) => ({ ...prev, chaves_ref: data }))
          }
        );
      case "transportadora":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          TransportadoraSection,
          {
            data: nfeData.transportadora,
            onChange: (data) => setNfeData((prev) => ({ ...prev, transportadora: data }))
          }
        );
      case "intermediador":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(IntermediadorSection, {});
      case "autorizacao":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          AutorizacaoSection,
          {
            dados: dadosAutorizacao,
            onChange: setDadosAutorizacao,
            isViewMode,
            onCancelarNFe: handleCancelarNFeFromAutorizacao,
            onEnviarCCe: handleEnviarCCe,
            onVisualizarPDFCCe: handleVisualizarPDFCCe
          }
        );
      default:
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          IdentificacaoSection,
          {
            data: nfeData.identificacao,
            onChange: (data) => setNfeData((prev) => ({ ...prev, identificacao: data })),
            naturezasOperacao,
            isEditingRascunho
          }
        );
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "fixed inset-0 bg-background flex flex-col z-50", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card border-b border-gray-800 px-6 py-2 flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between gap-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              onClick: handleTryExit,
              className: "p-2 text-gray-400 hover:text-white hover:bg-gray-800 rounded-lg transition-colors",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowLeft, { size: 20 })
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-xl font-bold text-white", children: isViewMode ? "Visualizar NFe" : "Nova NFe" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium border ${apiStatus === "online" ? "bg-green-500/15 text-green-400 border-green-500/30" : apiStatus === "offline" ? "bg-red-500/15 text-red-400 border-red-500/30" : "bg-yellow-500/15 text-yellow-400 border-yellow-500/30"}`, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `w-3 h-3 rounded-full ${apiStatus === "online" ? "bg-green-400" : apiStatus === "offline" ? "bg-red-400" : "bg-yellow-400 animate-pulse"}` }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: apiStatus === "online" ? "API Online" : apiStatus === "offline" ? "API Offline" : "Verificando API..." }),
            apiStatus !== "checking" && /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: checkApiStatus,
                className: "ml-1 hover:opacity-70 transition-opacity",
                title: "Verificar status da API novamente",
                children: "🔄"
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium border ${sefazStatus === "online" ? "bg-green-500/15 text-green-400 border-green-500/30" : sefazStatus === "offline" ? "bg-red-500/15 text-red-400 border-red-500/30" : "bg-yellow-500/15 text-yellow-400 border-yellow-500/30"}`, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `w-3 h-3 rounded-full ${sefazStatus === "online" ? "bg-green-400" : sefazStatus === "offline" ? "bg-red-400" : "bg-yellow-400 animate-pulse"}` }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: sefazStatus === "online" ? "Sefaz Online" : sefazStatus === "offline" ? "Sefaz Offline" : "Verificando Sefaz..." }),
            sefazStatus !== "checking" && /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: checkSefazStatus,
                className: "ml-1 hover:opacity-70 transition-opacity",
                title: "Verificar status da SEFAZ novamente",
                children: "🔄"
              }
            )
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "select",
        {
          value: ambienteNFe,
          onChange: async (e) => {
            const novoAmbiente = e.target.value;
            if (novoAmbiente === "producao") {
              const confirmacao = confirm(
                "⚠️ MUDANÇA PARA AMBIENTE DE PRODUÇÃO\n\nVocê está alterando para o ambiente de PRODUÇÃO.\nAs próximas NFe emitidas serão REAIS e terão valor fiscal.\n\nCertifique-se de que:\n✅ Possui certificado digital REAL\n✅ Os dados estão corretos\n✅ Está autorizado a emitir NFe real\n\nConfirma a mudança?"
              );
              if (!confirmacao) {
                return;
              }
            }
            setAmbienteNFe(novoAmbiente);
            try {
              const { data: userData } = await supabase.auth.getUser();
              if (userData.user) {
                const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
                if (usuarioData == null ? void 0 : usuarioData.empresa_id) {
                  const { error } = await supabase.from("nfe_config").upsert({
                    empresa_id: usuarioData.empresa_id,
                    ambiente: novoAmbiente
                  });
                  if (error) {
                    console.error("Erro ao salvar configuração:", error);
                    alert("Erro ao salvar configuração de ambiente");
                  } else {
                    console.log(`Ambiente alterado para: ${novoAmbiente}`);
                  }
                }
              }
            } catch (error) {
              console.error("Erro ao salvar ambiente:", error);
            }
          },
          className: `px-3 py-2 rounded text-sm font-medium border ${ambienteNFe === "producao" ? "bg-green-500/15 text-green-400 border-green-500/30" : "bg-orange-500/15 text-orange-400 border-orange-500/30"} focus:outline-none focus:ring-1 focus:ring-primary-500`,
          title: "Selecionar ambiente de emissão",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "homologacao", children: "HOMOLOGAÇÃO" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "producao", children: "PRODUÇÃO" })
          ]
        }
      )
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-1 overflow-hidden", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-56 bg-background-card border-r border-gray-800 flex flex-col h-full", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("nav", { className: "flex-1 overflow-y-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-0", children: sections.map((section) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setActiveSection(section.id),
            className: `w-full flex items-center gap-3 px-3 py-2.5 text-left transition-colors border-b border-gray-800/50 ${activeSection === section.id ? "bg-primary-500/10 text-primary-400 border-l-2 border-l-primary-500" : "text-gray-400 hover:text-white hover:bg-gray-800/50"}`,
            children: [
              section.number ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `w-6 h-6 rounded-full border-2 flex items-center justify-center text-xs font-bold ${activeSection === section.id ? "border-primary-400 text-primary-400 bg-primary-500/10" : "border-gray-500 text-gray-400"}`, children: section.number }) : /* @__PURE__ */ jsxRuntimeExports.jsx(section.icon, { size: 18, className: activeSection === section.id ? "text-primary-400" : "text-gray-400" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium text-sm", children: section.label })
            ]
          },
          section.id
        )) }) }),
        !isViewMode && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-2 border-t border-gray-800 space-y-2 flex-shrink-0", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "primary",
              className: "w-full flex items-center justify-center gap-2 text-sm py-2",
              onClick: handleEmitirNFe,
              disabled: isLoading,
              children: isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-white" }),
                "Emitindo..."
              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Send, { size: 14 }),
                "Emitir NFe"
              ] })
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "success",
              className: "w-full flex items-center justify-center gap-2 text-sm py-2",
              onClick: handleSalvarRascunho,
              disabled: isSavingRascunho,
              children: isSavingRascunho ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-white" }),
                "Salvando..."
              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Save, { size: 14 }),
                "Salvar Rascunho"
              ] })
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Button,
              {
                variant: "secondary",
                className: `${nfeEmitida ? "flex-1" : "w-full"} flex items-center justify-center gap-1 text-xs py-1.5`,
                onClick: handleGerarEspelho,
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Download, { size: 12 }),
                  "Espelho"
                ]
              }
            ),
            nfeEmitida && /* @__PURE__ */ jsxRuntimeExports.jsxs(Button, { variant: "secondary", className: "flex-1 flex items-center justify-center gap-1 text-xs py-1.5", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 12 }),
              "Duplicar"
            ] })
          ] })
        ] }),
        isViewMode && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-3 border-t border-gray-800 bg-blue-500/10 border-blue-500/20", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-center gap-2 text-blue-400", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Eye, { size: 16 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm font-medium", children: "Modo Visualização - Somente Leitura" })
        ] }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-auto", children: renderContent() })
    ] }),
    showProgressModal && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black/70 flex items-center justify-center z-[60] p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 w-full max-w-4xl h-[95vh] overflow-hidden flex flex-col", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 border-b border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-bold text-white", children: "Emitindo NFe" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-400", children: [
            progressSteps.filter((s) => s.status === "success").length,
            "/",
            progressSteps.length,
            " concluídas"
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `px-3 py-1 rounded text-sm font-medium ${ambienteNFe === "producao" ? "bg-green-500/15 text-green-400" : "bg-orange-500/15 text-orange-400"}`, children: ambienteNFe === "producao" ? "PRODUÇÃO" : "HOMOLOGAÇÃO" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              onClick: () => {
                if (emailError || showCloseButton) {
                  handleCloseModal();
                } else {
                  setShowProgressModal(false);
                  clearAllLogs();
                }
              },
              className: `px-3 py-1 text-white rounded transition-colors text-sm ${emailError || showCloseButton ? "bg-red-600 hover:bg-red-700" : "bg-gray-700 hover:bg-gray-600"}`,
              disabled: isLoading && !progressSteps.some((s) => s.status === "error") && !emailError && !showCloseButton,
              children: emailError || showCloseButton ? "Fechar" : isLoading && !progressSteps.some((s) => s.status === "error") ? "Processando..." : "Fechar"
            }
          )
        ] })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 border-b border-gray-800 flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: progressSteps.map((step, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${step.status === "success" ? "bg-green-500 text-white" : step.status === "error" ? "bg-red-500 text-white" : step.status === "loading" ? "bg-primary-500 text-white" : "bg-gray-700 text-gray-400"}`, children: step.status === "success" ? "✓" : step.status === "error" ? "✗" : step.status === "loading" ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-3 h-3 border-2 border-white/30 border-t-white rounded-full animate-spin" }) : index2 + 1 }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `text-sm font-medium ${step.status === "success" ? "text-green-400" : step.status === "error" ? "text-red-400" : step.status === "loading" ? "text-primary-400" : "text-gray-400"}`, children: step.label }),
          step.message && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-gray-500", children: step.message })
        ] }) })
      ] }, step.id)) }) }),
      nfeData.destinatario.emails && nfeData.destinatario.emails.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 border-b border-gray-800 bg-gray-800/30", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("h4", { className: "text-sm font-medium text-white mb-2 flex items-center gap-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Mail, { size: 16, className: "text-blue-400" }),
          "Emails para Envio"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-1", children: nfeData.destinatario.emails.map((email, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-sm", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-2 h-2 bg-blue-400 rounded-full flex-shrink-0" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-300", children: email })
        ] }, index2)) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-2", children: "📧 XML e DANFE serão enviados automaticamente para estes emails após a emissão" })
      ] }),
      emailError && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 border-b border-gray-800 bg-red-900/20", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-red-500 rounded-full flex items-center justify-center flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Mail, { className: "w-4 h-4 text-white" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-sm font-medium text-red-400 mb-1", children: "⚠️ Erro no Envio de Email" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-red-300 mb-2", children: emailError }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-red-800/30 border border-red-700/50 rounded-lg p-3", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-red-200", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "NFe foi emitida com sucesso!" }),
            " Apenas o envio de email falhou. Você pode reenviar o email posteriormente através da grid de NFes."
          ] }) })
        ] })
      ] }) })
    ] }) }),
    showExitModal && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black/70 flex items-center justify-center z-[70]", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 w-full max-w-md mx-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-6 border-b border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 bg-orange-500/15 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowLeft, { className: "w-5 h-5 text-orange-400" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-bold text-white", children: "Sair da Emissão" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: "Confirme sua ação" })
        ] })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300 mb-3", children: [
          "⚠️ ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Atenção!" }),
          " Você está prestes a sair da emissão da NFe."
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-orange-500/10 border border-orange-500/20 rounded-lg p-4 mb-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-orange-300 text-sm", children: /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Dados que serão perdidos:" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "text-orange-300 text-sm mt-2 space-y-1", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Informações de identificação preenchidas" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Dados do destinatário" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Produtos adicionados" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Configurações de pagamento" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "• Outras informações não salvas" })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-blue-500/10 border border-blue-500/20 rounded-lg p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-blue-300 text-sm", children: [
          "💡 ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Dica:" }),
          " Use o botão ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: '"Salvar Rascunho"' }),
          " para preservar seu trabalho e continuar depois."
        ] }) })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-6 border-t border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: handleCancelExit,
            className: "flex-1 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors font-medium",
            children: "Cancelar"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: handleSalvarRascunho,
            className: "flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors font-medium flex items-center justify-center gap-2",
            disabled: isSavingRascunho,
            children: isSavingRascunho ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" }),
              "Salvando..."
            ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Save, { size: 16 }),
              "Salvar Rascunho"
            ] })
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: handleConfirmExit,
            className: "flex-1 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors font-medium",
            children: "Sair sem Salvar"
          }
        )
      ] }) })
    ] }) }),
    showCCeModal && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-900 rounded-lg p-6 w-full max-w-md mx-4 border border-gray-700 relative", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          onClick: () => setShowCCeModal(false),
          className: "absolute top-4 right-4 w-8 h-8 bg-gray-700 hover:bg-gray-600 rounded-full flex items-center justify-center text-gray-300 hover:text-white transition-colors",
          title: "Fechar",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M6 18L18 6M6 6l12 12" }) })
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
          cceStatus === "loading" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500 mx-auto" }),
          cceStatus === "success" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mx-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-6 h-6 text-white", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M5 13l4 4L19 7" }) }) }),
          cceStatus === "error" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-12 h-12 bg-red-500 rounded-full flex items-center justify-center mx-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-6 h-6 text-white", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M6 18L18 6M6 6l12 12" }) }) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "text-lg font-semibold text-white mb-2", children: [
          cceStatus === "loading" && "Enviando CCe",
          cceStatus === "success" && "CCe Enviada",
          cceStatus === "error" && "Erro no Envio"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-300 mb-6", children: cceMessage }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex gap-3 justify-center", children: cceStatus !== "loading" && /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => {
              setShowCCeModal(false);
              if (cceStatus === "success") {
                window.location.reload();
              }
            },
            className: "px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors",
            children: cceStatus === "success" ? "Fechar" : "Tentar Novamente"
          }
        ) })
      ] })
    ] }) })
  ] });
};
const IdentificacaoSection = ({ data, onChange, naturezasOperacao = [], isEditingRascunho = false, isViewMode = false }) => {
  const updateField = (field, value) => {
    onChange({
      ...data,
      [field]: value
    });
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-bold text-white mb-4", children: "Identificação da NFe" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-7 gap-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-1", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Número *" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "relative", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "number",
              value: data.numero,
              onChange: (e) => !isViewMode && updateField("numero", e.target.value),
              placeholder: "Digite o número da NFe",
              disabled: isViewMode,
              className: `w-full px-3 py-2 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500 ${isViewMode ? "bg-gray-900 cursor-not-allowed" : "bg-gray-800"}`
            }
          ) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-1", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Modelo *" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: "55",
              readOnly: true,
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-1", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Série *" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "number",
              value: data.serie,
              onChange: (e) => !isViewMode && updateField("serie", parseInt(e.target.value) || 1),
              disabled: isViewMode,
              className: `w-full px-3 py-2 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500 ${isViewMode ? "bg-gray-900 cursor-not-allowed" : "bg-gray-800"}`
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Código" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: data.codigo_numerico || "Gerando...",
              readOnly: true,
              className: "w-full px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg text-gray-400 cursor-not-allowed",
              title: "Código Numérico que compõe a Chave de Acesso (8 dígitos) - Gerado automaticamente"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Emitida em" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "datetime-local",
              value: data.data_emissao,
              onChange: (e) => !isViewMode && updateField("data_emissao", e.target.value),
              disabled: isViewMode,
              className: `w-full px-3 py-2 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500 ${isViewMode ? "bg-gray-900 cursor-not-allowed" : "bg-gray-800"}`
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Tipo Documento" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "select",
            {
              value: data.tipo_documento,
              onChange: (e) => !isViewMode && updateField("tipo_documento", e.target.value),
              disabled: isViewMode,
              className: `w-full px-3 py-2 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500 ${isViewMode ? "bg-gray-900 cursor-not-allowed" : "bg-gray-800"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "1", children: "1 - Saída" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "0", children: "0 - Entrada" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Finalidade Emissão" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "select",
            {
              value: data.finalidade,
              onChange: (e) => !isViewMode && updateField("finalidade", e.target.value),
              disabled: isViewMode,
              className: `w-full px-3 py-2 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500 ${isViewMode ? "bg-gray-900 cursor-not-allowed" : "bg-gray-800"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "1", children: "1 - NFe normal" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "2", children: "2 - NFe complementar" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "3", children: "3 - NFe de ajuste" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "4", children: "4 - Devolução de mercadoria" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Presença" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "select",
            {
              value: data.presenca,
              onChange: (e) => !isViewMode && updateField("presenca", e.target.value),
              disabled: isViewMode,
              className: `w-full px-3 py-2 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500 ${isViewMode ? "bg-gray-900 cursor-not-allowed" : "bg-gray-800"}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "9", children: "9 - Operação não presencial, outros" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "1", children: "1 - Operação presencial" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "2", children: "2 - Operação não presencial, pela Internet" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "3", children: "3 - Operação não presencial, teleatendimento" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "4", children: "4 - NFC-e em operação com entrega a domicílio" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "5", children: "5 - Operação presencial, fora do estabelecimento" })
              ]
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Natureza da Operação *" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "select",
          {
            value: data.natureza_operacao,
            onChange: (e) => !isViewMode && updateField("natureza_operacao", e.target.value),
            disabled: isViewMode,
            className: `w-full px-3 py-2 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500 ${isViewMode ? "bg-gray-900 cursor-not-allowed" : "bg-gray-800"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "", children: "Selecione a natureza da operação" }),
              naturezasOperacao.map((natureza) => /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: natureza.descricao, children: natureza.descricao }, natureza.id))
            ]
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Informação Adicional" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "textarea",
          {
            rows: 3,
            value: data.informacao_adicional || "",
            onChange: (e) => !isViewMode && updateField("informacao_adicional", e.target.value),
            disabled: isViewMode,
            className: `w-full px-3 py-2 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500 resize-none ${isViewMode ? "bg-gray-900 cursor-not-allowed" : "bg-gray-800"}`,
            placeholder: "Informações adicionais da NFe... (preenchido automaticamente com observação do cliente)"
          }
        ),
        data.informacao_adicional && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-green-400 mt-1", children: "✓ Observação do cliente incluída automaticamente" })
      ] }) })
    ] })
  ] });
};
const DestinatarioSection = ({ data, onChange, onClienteSelected }) => {
  const [showClienteModal, setShowClienteModal] = reactExports.useState(false);
  const [clientes, setClientes] = reactExports.useState([]);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const updateField = (field, value) => {
    onChange({
      ...data,
      [field]: value
    });
  };
  const buscarClientes = async (termo = "") => {
    try {
      setIsLoading(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      let query = supabase.from("clientes").select("*, observacao_nfe").eq("empresa_id", usuarioData.empresa_id).order("nome");
      if (termo) {
        query = query.or(`nome.ilike.%${termo}%,documento.ilike.%${termo}%,razao_social.ilike.%${termo}%`);
      }
      const { data: clientesData, error } = await query.limit(50);
      if (error) throw error;
      setClientes(clientesData || []);
    } catch (error) {
      console.error("Erro ao buscar clientes:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const selecionarCliente = (cliente) => {
    console.log("🎯 Selecionando cliente:", cliente.nome);
    onChange({
      ...data,
      documento: cliente.documento || "",
      nome: cliente.nome || "",
      endereco: cliente.endereco || "",
      numero: cliente.numero || "",
      bairro: cliente.bairro || "",
      cidade: cliente.cidade || "",
      uf: cliente.estado || "",
      cep: cliente.cep || "",
      emails: cliente.emails || [],
      // ✅ CORREÇÃO: Adicionar campos fiscais faltantes
      codigo_municipio: cliente.codigo_municipio || "",
      ie_destinatario: cliente.indicador_ie || 9,
      // 9 = Não Contribuinte (padrão)
      inscricao_estadual: cliente.inscricao_estadual || ""
    });
    if (cliente.observacao_nfe && cliente.observacao_nfe.trim() && onClienteSelected) {
      console.log("📝 Incluindo observação NFe:", cliente.observacao_nfe);
      onClienteSelected(cliente.observacao_nfe);
    }
    setShowClienteModal(false);
    setSearchTerm("");
  };
  reactExports.useEffect(() => {
    if (showClienteModal) {
      buscarClientes();
    }
  }, [showClienteModal]);
  reactExports.useEffect(() => {
    if (showClienteModal && searchTerm) {
      const timer = setTimeout(() => {
        buscarClientes(searchTerm);
      }, 300);
      return () => clearTimeout(timer);
    }
  }, [searchTerm, showClienteModal]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-bold text-white", children: "Destinatário da NFe" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "button",
        {
          type: "button",
          onClick: () => setShowClienteModal(true),
          className: "px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 flex items-center gap-2 text-sm",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 16 }),
            "BUSCAR CLIENTE"
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "CNPJ/CPF *" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: data.documento,
              onChange: (e) => updateField("documento", e.target.value),
              placeholder: "00.000.000/0000-00 ou 000.000.000-00",
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Nome/Razão Social *" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: data.nome,
              onChange: (e) => updateField("nome", e.target.value),
              placeholder: "Nome do destinatário",
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Endereço" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: data.endereco,
              onChange: (e) => updateField("endereco", e.target.value),
              placeholder: "Rua, Avenida, etc.",
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-1", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Número" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: data.numero,
              onChange: (e) => updateField("numero", e.target.value),
              placeholder: "123",
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Bairro" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: data.bairro,
              onChange: (e) => updateField("bairro", e.target.value),
              placeholder: "Centro",
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Cidade" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: data.cidade,
              onChange: (e) => updateField("cidade", e.target.value),
              placeholder: "São Paulo",
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-1", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "UF" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "select",
            {
              value: data.uf,
              onChange: (e) => updateField("uf", e.target.value),
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "", children: "Selecione" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "SP", children: "SP" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "RJ", children: "RJ" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "MG", children: "MG" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "RS", children: "RS" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "PR", children: "PR" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "SC", children: "SC" })
              ]
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "CEP" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: data.cep,
              onChange: (e) => updateField("cep", e.target.value),
              placeholder: "00000-000",
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "lg:col-span-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Código do Município" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: data.codigo_municipio || "",
              onChange: (e) => updateField("codigo_municipio", e.target.value),
              placeholder: "3550308",
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
            }
          )
        ] })
      ] }),
      data.emails && data.emails.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Emails do Cliente" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/30 rounded-lg border border-gray-700 p-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: data.emails.map((email, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "div",
            {
              className: "flex items-center gap-2 text-sm",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-2 h-2 bg-primary-500 rounded-full flex-shrink-0" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: email })
              ]
            },
            index2
          )) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-2 pt-2 border-t border-gray-700", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500", children: "Estes emails serão incluídos nos dados da NFe para envio automático" }) })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Identificador da IE" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "select",
            {
              value: data.ie_destinatario || 9,
              onChange: (e) => updateField("ie_destinatario", parseInt(e.target.value)),
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "9", children: "9 - Não Contribuinte, que pode ou não possuir Inscrição" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "1", children: "1 - Contribuinte ICMS" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "2", children: "2 - Contribuinte isento de Inscrição" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Inscrição Estadual" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: data.inscricao_estadual || "",
              onChange: (e) => updateField("inscricao_estadual", e.target.value),
              placeholder: "123123123",
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Identificador de Operação" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "select",
            {
              value: data.operacao || 1,
              onChange: (e) => updateField("operacao", parseInt(e.target.value)),
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "1", children: "1 - Operação Interna" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "2", children: "2 - Operação Interestadual" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "3", children: "3 - Operação com Exterior" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Consumidor" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "select",
            {
              value: data.consumidor_final || 1,
              onChange: (e) => updateField("consumidor_final", parseInt(e.target.value)),
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "1", children: "1 - Consumidor final" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "0", children: "0 - Normal" })
              ]
            }
          )
        ] })
      ] })
    ] }),
    showClienteModal && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-2xl mx-4 max-h-[80vh] overflow-hidden flex flex-col", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Buscar Cliente" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => setShowClienteModal(false),
            className: "text-gray-400 hover:text-white transition-colors",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            type: "text",
            value: searchTerm,
            onChange: (e) => setSearchTerm(e.target.value),
            placeholder: "Digite o nome, documento ou razão social...",
            className: "w-full px-3 py-2 pl-10 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500",
            autoFocus: true
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 16, className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-y-auto", children: isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-8 text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-6 h-6 border-2 border-primary-500/30 border-t-primary-500 rounded-full animate-spin mx-auto mb-2" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Carregando clientes..." })
      ] }) : clientes.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-8 text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhum cliente encontrado" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-500 mt-1", children: searchTerm ? "Tente buscar com outros termos" : "Cadastre clientes para aparecerem aqui" })
      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: clientes.map((cliente) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          onClick: () => selecionarCliente(cliente),
          className: "p-3 bg-gray-800/50 hover:bg-gray-700/50 rounded-lg cursor-pointer transition-colors border border-gray-700/50 hover:border-gray-600",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start justify-between", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "font-medium text-white", children: cliente.nome }),
              cliente.razao_social && cliente.razao_social !== cliente.nome && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: cliente.razao_social }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-4 mt-2 text-xs text-gray-500", children: [
                cliente.documento && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                  "📄 ",
                  cliente.documento
                ] }),
                cliente.telefone && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                  "📞 ",
                  cliente.telefone
                ] }),
                cliente.emails && cliente.emails.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                  "✉️ ",
                  cliente.emails[0],
                  cliente.emails.length > 1 && ` +${cliente.emails.length - 1}`
                ] })
              ] }),
              (cliente.endereco || cliente.cidade) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500 mt-1", children: [
                "📍 ",
                [cliente.endereco, cliente.numero, cliente.bairro, cliente.cidade, cliente.estado].filter(Boolean).join(", ")
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-primary-400 ml-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 16 }) })
          ] })
        },
        cliente.id
      )) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-4 pt-4 border-t border-gray-700", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 text-center", children: "Clique em um cliente para preencher automaticamente os dados do destinatário" }) })
    ] }) })
  ] });
};
const ProdutosSection = ({ produtos, empresaId, finalidade, nfeData, onChange, showToast }) => {
  var _a2, _b2, _c;
  const [showProdutoModal, setShowProdutoModal] = reactExports.useState(false);
  const [showDetalhesFiscaisModal, setShowDetalhesFiscaisModal] = reactExports.useState(false);
  const [produtoSelecionado, setProdutoSelecionado] = reactExports.useState(null);
  const [produtoDetalhesFiscais, setProdutoDetalhesFiscais] = reactExports.useState(null);
  const cfopsDevolucao = [
    { codigo: "1202", descricao: "1202 - Devolução de venda de mercadoria adquirida ou recebida de terceiros (dentro do estado)" },
    { codigo: "2202", descricao: "2202 - Devolução de venda de mercadoria adquirida ou recebida de terceiros (fora do estado)" },
    { codigo: "5202", descricao: "5202 - Devolução de compra para comercialização (dentro do estado)" },
    { codigo: "6202", descricao: "6202 - Devolução de compra para comercialização (fora do estado)" },
    { codigo: "1411", descricao: "1411 - Devolução de venda de produção do estabelecimento (dentro do estado)" },
    { codigo: "2411", descricao: "2411 - Devolução de venda de produção do estabelecimento (fora do estado)" },
    { codigo: "5411", descricao: "5411 - Devolução de compra para industrialização (dentro do estado)" },
    { codigo: "6411", descricao: "6411 - Devolução de compra para industrialização (fora do estado)" }
  ];
  const [produtoForm, setProdutoForm] = reactExports.useState({
    quantidade: 1,
    valor_unitario: 0,
    valor_total: 0,
    cfop_devolucao: "",
    // Campo para CFOP de devolução
    cfop_geral: ""
    // Campo para CFOP geral (editável)
  });
  const recalcularTotaisICMS = (produtosAtualizados) => {
    var _a3;
    if (((_a3 = nfeData == null ? void 0 : nfeData.identificacao) == null ? void 0 : _a3.finalidade) === "4") {
      let totalIcmsBC = 0;
      let totalIcms = 0;
      produtosAtualizados.forEach((produto) => {
        if (produto.destaque_icms_devolucao) {
          const baseCalculo = produto.base_calculo_icms || produto.valor_total || 0;
          const aliquota = produto.aliquota_icms || 0;
          const valorIcms = baseCalculo * aliquota / 100;
          totalIcmsBC += baseCalculo;
          totalIcms += valorIcms;
        }
      });
      console.log("🧮 Recalculando totais ICMS:", {
        totalIcmsBC,
        totalIcms,
        produtosComDestaque: produtosAtualizados.filter((p2) => p2.destaque_icms_devolucao)
      });
    }
  };
  const handleSelecionarProduto = (produto) => {
    setProdutoSelecionado(produto);
    let precoFinal = produto.preco || 0;
    if (produto.promocao && produto.valor_desconto) {
      if (produto.tipo_desconto === "percentual") {
        const desconto = precoFinal * produto.valor_desconto / 100;
        precoFinal = precoFinal - desconto;
      } else if (produto.tipo_desconto === "valor") {
        precoFinal = precoFinal - produto.valor_desconto;
      }
    }
    setProdutoForm({
      quantidade: 1,
      valor_unitario: precoFinal,
      valor_total: precoFinal,
      cfop_devolucao: "",
      cfop_geral: produto.cfop || ""
      // Preencher com CFOP do produto
    });
    setShowProdutoModal(false);
  };
  const handleAdicionarProduto = () => {
    var _a3;
    if (!produtoSelecionado) {
      return;
    }
    const novoProduto = {
      id: Date.now().toString(),
      produto_id: produtoSelecionado.id,
      // ✅ ID do produto
      codigo: produtoSelecionado.codigo,
      descricao: produtoSelecionado.nome,
      quantidade: produtoForm.quantidade,
      valor_unitario: produtoForm.valor_unitario,
      valor_total: produtoForm.valor_total,
      // ✅ TODOS OS DADOS FISCAIS DO CADASTRO DO PRODUTO (SEM FALLBACKS):
      ncm: produtoSelecionado.ncm,
      cfop: finalidade === "4" && produtoForm.cfop_devolucao ? produtoForm.cfop_devolucao : produtoForm.cfop_geral || produtoSelecionado.cfop,
      unidade: (_a3 = produtoSelecionado.unidade_medida) == null ? void 0 : _a3.sigla,
      ean: produtoSelecionado.codigo_barras,
      // ✅ EAN vem do codigo_barras
      origem_produto: produtoSelecionado.origem_produto,
      situacao_tributaria: produtoSelecionado.situacao_tributaria,
      // ICMS
      cst_icms: produtoSelecionado.cst_icms,
      csosn_icms: produtoSelecionado.csosn_icms,
      aliquota_icms: produtoSelecionado.aliquota_icms,
      // PIS/COFINS
      cst_pis: produtoSelecionado.cst_pis,
      cst_cofins: produtoSelecionado.cst_cofins,
      aliquota_pis: produtoSelecionado.aliquota_pis,
      aliquota_cofins: produtoSelecionado.aliquota_cofins,
      // IPI
      cst_ipi: produtoSelecionado.cst_ipi,
      aliquota_ipi: produtoSelecionado.aliquota_ipi,
      // OUTROS
      cest: produtoSelecionado.cest,
      peso_liquido: produtoSelecionado.peso_liquido
    };
    onChange([...produtos, novoProduto]);
    setProdutoSelecionado(null);
    setProdutoForm({
      quantidade: 1,
      valor_unitario: 0,
      valor_total: 0,
      cfop_devolucao: "",
      cfop_geral: ""
    });
  };
  const handleRemoverProduto = (id2) => {
    onChange(produtos.filter((p2) => p2.id !== id2));
  };
  const handleAbrirDetalhesFiscais = async (produto) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (usuarioData == null ? void 0 : usuarioData.empresa_id) {
        const { data: fotosData } = await supabase.from("produto_fotos").select("id, produto_id, url, principal").eq("empresa_id", usuarioData.empresa_id).eq("produto_id", produto.produto_id);
        let fotoUrl = null;
        if (fotosData && fotosData.length > 0) {
          const fotoPrincipal = fotosData.find((foto) => foto.principal);
          fotoUrl = fotoPrincipal ? fotoPrincipal.url : fotosData[0].url;
        }
        const produtoComFoto = {
          ...produto,
          foto_url: fotoUrl
        };
        setProdutoDetalhesFiscais(produtoComFoto);
      } else {
        setProdutoDetalhesFiscais(produto);
      }
    } catch (error) {
      console.error("Erro ao buscar foto do produto:", error);
      setProdutoDetalhesFiscais(produto);
    }
    setShowDetalhesFiscaisModal(true);
  };
  const handleAtualizarDadosProdutos = async () => {
    if (produtos.length === 0) {
      showToast("Nenhum produto para atualizar", "warning");
      return;
    }
    try {
      showToast("Atualizando dados dos produtos...", "info");
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const produtoIds = produtos.filter((p2) => p2.produto_id).map((p2) => p2.produto_id);
      if (produtoIds.length === 0) {
        showToast("Nenhum produto vinculado ao cadastro para atualizar", "warning");
        return;
      }
      const { data: produtosCadastro, error } = await supabase.from("produtos").select(`
          id,
          codigo,
          codigo_barras,
          nome,
          preco,
          ncm,
          cfop,
          origem_produto,
          situacao_tributaria,
          cst_icms,
          csosn_icms,
          cst_pis,
          cst_cofins,
          cst_ipi,
          aliquota_icms,
          aliquota_pis,
          aliquota_cofins,
          aliquota_ipi,
          cest,
          peso_liquido,
          unidade_medida:unidade_medida_id (
            id,
            sigla,
            nome
          )
        `).in("id", produtoIds).eq("empresa_id", usuarioData.empresa_id).eq("ativo", true).eq("deletado", false);
      if (error) throw error;
      if (!produtosCadastro || produtosCadastro.length === 0) {
        showToast("Nenhum produto encontrado no cadastro", "warning");
        return;
      }
      const produtosAtualizados = produtos.map((produtoNfe) => {
        var _a3;
        const produtoCadastro = produtosCadastro.find((p2) => p2.id === produtoNfe.produto_id);
        if (produtoCadastro) {
          return {
            ...produtoNfe,
            // ✅ ATUALIZAR TODOS OS DADOS FISCAIS DO CADASTRO:
            ncm: produtoCadastro.ncm || produtoNfe.ncm,
            cfop: produtoCadastro.cfop || produtoNfe.cfop,
            ean: produtoCadastro.codigo_barras || produtoNfe.ean,
            unidade: ((_a3 = produtoCadastro.unidade_medida) == null ? void 0 : _a3.sigla) || produtoNfe.unidade,
            origem_produto: produtoCadastro.origem_produto ?? produtoNfe.origem_produto,
            situacao_tributaria: produtoCadastro.situacao_tributaria || produtoNfe.situacao_tributaria,
            // ICMS
            cst_icms: produtoCadastro.cst_icms || produtoNfe.cst_icms,
            csosn_icms: produtoCadastro.csosn_icms || produtoNfe.csosn_icms,
            aliquota_icms: produtoCadastro.aliquota_icms ?? produtoNfe.aliquota_icms,
            // PIS/COFINS
            cst_pis: produtoCadastro.cst_pis || produtoNfe.cst_pis,
            cst_cofins: produtoCadastro.cst_cofins || produtoNfe.cst_cofins,
            aliquota_pis: produtoCadastro.aliquota_pis ?? produtoNfe.aliquota_pis,
            aliquota_cofins: produtoCadastro.aliquota_cofins ?? produtoNfe.aliquota_cofins,
            // IPI
            cst_ipi: produtoCadastro.cst_ipi || produtoNfe.cst_ipi,
            aliquota_ipi: produtoCadastro.aliquota_ipi ?? produtoNfe.aliquota_ipi,
            // OUTROS
            cest: produtoCadastro.cest || produtoNfe.cest,
            peso_liquido: produtoCadastro.peso_liquido ?? produtoNfe.peso_liquido,
            // Atualizar também preço se necessário
            valor_unitario: produtoCadastro.preco || produtoNfe.valor_unitario,
            valor_total: (produtoCadastro.preco || produtoNfe.valor_unitario) * produtoNfe.quantidade
          };
        }
        return produtoNfe;
      });
      onChange(produtosAtualizados);
      const produtosAtualizadosCount = produtosCadastro.length;
      showToast(`${produtosAtualizadosCount} produto(s) atualizado(s) com dados do cadastro`, "success");
      console.log("✅ Produtos atualizados:", {
        total: produtos.length,
        atualizados: produtosAtualizadosCount,
        produtosCadastro
      });
    } catch (error) {
      console.error("Erro ao atualizar dados dos produtos:", error);
      showToast(`Erro ao atualizar produtos: ${error.message}`, "error");
    }
  };
  const updateProdutoForm = (field, value) => {
    setProdutoForm((prev) => {
      const newForm = { ...prev, [field]: value };
      if (field === "quantidade" || field === "valor_unitario") {
        newForm.valor_total = newForm.quantidade * newForm.valor_unitario;
      }
      return newForm;
    });
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-bold text-white mb-4", children: "Novo Produto" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Produto *" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "text",
                value: produtoSelecionado ? produtoSelecionado.nome : "",
                placeholder: "Selecione ou digite o produto",
                className: "w-full px-3 py-2 pr-10 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500",
                readOnly: true
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                type: "button",
                onClick: () => setShowProdutoModal(true),
                className: "absolute right-2 top-1/2 -translate-y-1/2 p-1 text-gray-400 hover:text-white transition-colors",
                title: "Buscar produto",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 16 })
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Valor Unitário *" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "number",
                  step: "0.01",
                  value: produtoForm.valor_unitario || "",
                  onChange: (e) => updateProdutoForm("valor_unitario", parseFloat(e.target.value) || 0),
                  placeholder: "0.00",
                  className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Quantidade *" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.001",
                value: produtoForm.quantidade || "",
                onChange: (e) => updateProdutoForm("quantidade", parseFloat(e.target.value) || 0),
                placeholder: "1",
                className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
              }
            )
          ] }),
          finalidade !== "4" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "CFOP *" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "text",
                value: produtoForm.cfop_geral || "",
                onChange: (e) => updateProdutoForm("cfop_geral", e.target.value),
                placeholder: "Ex: 5102",
                className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-400 mt-1", children: "💡 Vem do cadastro do produto, mas pode ser editado" })
          ] }),
          finalidade === "4" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "CFOP de Devolução *" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "select",
              {
                value: produtoForm.cfop_devolucao || "",
                onChange: (e) => updateProdutoForm("cfop_devolucao", e.target.value),
                className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "", children: "Selecione o CFOP de devolução" }),
                  cfopsDevolucao.map((cfop) => /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: cfop.codigo, children: cfop.descricao }, cfop.codigo))
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-400 mt-1", children: "⚠️ Para devoluções, é obrigatório usar CFOP específico de devolução" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Total" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "text",
                  value: (produtoForm.valor_total || 0).toFixed(2),
                  placeholder: "0.00",
                  readOnly: true,
                  className: "flex-1 px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none cursor-not-allowed"
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-end", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              type: "button",
              onClick: handleAdicionarProduto,
              disabled: !produtoSelecionado,
              className: `w-full px-4 py-2 rounded-lg focus:outline-none focus:ring-2 flex items-center justify-center gap-2 transition-colors ${produtoSelecionado ? "bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500" : "bg-gray-600 text-gray-400 cursor-not-allowed"}`,
              title: !produtoSelecionado ? "Selecione um produto para adicionar" : "Adicionar produto à NFe",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 16 }),
                "ADICIONAR"
              ]
            }
          ) })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-bold text-white", children: "Lista de Produtos" }),
        produtos.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: handleAtualizarDadosProdutos,
            className: "flex items-center gap-2 px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors",
            title: "Atualizar dados fiscais dos produtos com informações do cadastro",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M21 3v5h-5" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3 21v-5h5" })
              ] }),
              "Atualizar dados dos produtos"
            ]
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 overflow-hidden", children: produtos.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-8 text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhum produto adicionado" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-500 mt-1", children: "Use o formulário acima para adicionar produtos à NFe" })
      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "overflow-x-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("table", { className: "w-full", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { className: "bg-gray-800/50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-3 py-2 text-left text-xs font-medium text-gray-300 uppercase", children: "Item" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-3 py-2 text-left text-xs font-medium text-gray-300 uppercase", children: "Código" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-3 py-2 text-left text-xs font-medium text-gray-300 uppercase", children: "Cód. Barras" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-3 py-2 text-left text-xs font-medium text-gray-300 uppercase", children: "Descrição" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-3 py-2 text-left text-xs font-medium text-gray-300 uppercase", children: "Valor Unit" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-3 py-2 text-left text-xs font-medium text-gray-300 uppercase", children: "Unidade" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-3 py-2 text-left text-xs font-medium text-gray-300 uppercase", children: "Quantidade" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-3 py-2 text-left text-xs font-medium text-gray-300 uppercase", children: "Total" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-3 py-2 text-left text-xs font-medium text-gray-300 uppercase", children: "NCM" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-3 py-2 text-left text-xs font-medium text-gray-300 uppercase", children: "CFOP" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-3 py-2 text-left text-xs font-medium text-gray-300 uppercase", children: "ICMS" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-3 py-2 text-right text-xs font-medium text-gray-300 uppercase", children: "Ações" })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { className: "divide-y divide-gray-800", children: produtos.map((produto, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "hover:bg-gray-800/30", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-3 py-2 text-sm text-white", children: index2 + 1 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-3 py-2 text-sm text-white", children: produto.codigo }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-3 py-2 text-sm text-white", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-gray-400", children: produto.ean || "SEM EAN" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-3 py-2 text-sm text-white", children: produto.descricao }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("td", { className: "px-3 py-2 text-sm text-white", children: [
            "R$ ",
            produto.valor_unitario.toFixed(2)
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-3 py-2 text-sm text-white", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs bg-gray-700 px-2 py-1 rounded", children: produto.unidade || "UN" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-3 py-2 text-sm text-white", children: produto.quantidade }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("td", { className: "px-3 py-2 text-sm text-white", children: [
            "R$ ",
            produto.valor_total.toFixed(2)
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-3 py-2 text-sm text-white", children: produto.ncm }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-3 py-2 text-sm text-white", children: produto.cfop }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-3 py-2 text-sm text-white", children: produto.csosn_icms }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-3 py-2 text-sm text-white text-right", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-end gap-1", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => handleAbrirDetalhesFiscais(produto),
                className: "text-blue-400 hover:text-blue-300 p-1",
                title: "Ver detalhes fiscais",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 14 })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => handleRemoverProduto(produto.id),
                className: "text-red-400 hover:text-red-300 p-1",
                title: "Remover produto",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 14 })
              }
            )
          ] }) })
        ] }, produto.id)) })
      ] }) }) })
    ] }),
    showProdutoModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
      ProdutoSeletorModal,
      {
        isOpen: showProdutoModal,
        onClose: () => setShowProdutoModal(false),
        onSelect: handleSelecionarProduto,
        empresaId
      }
    ),
    showDetalhesFiscaisModal && produtoDetalhesFiscais && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "text-xl font-bold text-white", children: [
          "Detalhes Fiscais - ",
          produtoDetalhesFiscais.descricao
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => setShowDetalhesFiscaisModal(false),
            className: "text-gray-400 hover:text-white p-1",
            title: "Fechar",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-6 p-4 bg-gray-800/50 rounded-lg", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-24 h-24 bg-gray-900 rounded-lg overflow-hidden border border-gray-700", children: produtoDetalhesFiscais.foto_url ? /* @__PURE__ */ jsxRuntimeExports.jsx(
          "img",
          {
            src: produtoDetalhesFiscais.foto_url,
            alt: produtoDetalhesFiscais.descricao,
            className: "w-full h-full object-cover"
          }
        ) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Image, { size: 32, className: "text-gray-600" }) }) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 grid grid-cols-1 md:grid-cols-2 gap-4 text-sm", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Código:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white ml-2", children: produtoDetalhesFiscais.codigo })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "EAN:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white ml-2", children: produtoDetalhesFiscais.ean || "SEM EAN" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "NCM:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white ml-2", children: produtoDetalhesFiscais.ncm })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "CFOP:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white ml-2", children: produtoDetalhesFiscais.cfop })
          ] })
        ] })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
        ((_a2 = nfeData.identificacao) == null ? void 0 : _a2.finalidade) === "4" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-lg font-semibold text-yellow-300", children: "Destaque de ICMS em Devolução" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-yellow-200/80", children: "Configure se esta devolução deve destacar ICMS" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "checkbox",
                  checked: produtoDetalhesFiscais.destaque_icms_devolucao || false,
                  onChange: (e) => {
                    const novosProdutos = produtos.map(
                      (p2) => p2.id === produtoDetalhesFiscais.id ? { ...p2, destaque_icms_devolucao: e.target.checked } : p2
                    );
                    onChange(novosProdutos);
                    setProdutoDetalhesFiscais((prev) => ({
                      ...prev,
                      destaque_icms_devolucao: e.target.checked
                    }));
                    recalcularTotaisICMS(novosProdutos);
                  },
                  className: "sr-only peer"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `relative w-11 h-6 rounded-full transition-colors duration-200 ease-in-out ${produtoDetalhesFiscais.destaque_icms_devolucao ? "bg-yellow-600" : "bg-gray-700"}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `absolute top-[2px] left-[2px] bg-white rounded-full h-5 w-5 transition-transform duration-200 ease-in-out ${produtoDetalhesFiscais.destaque_icms_devolucao ? "translate-x-5" : "translate-x-0"}` }) })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-yellow-200/70", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
              "• ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Habilitado:" }),
              " Permite editar alíquota e base de cálculo do ICMS"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
              "• ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Desabilitado:" }),
              " Devolução sem destaque de ICMS (CST 40/41)"
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/30 rounded-lg p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-lg font-semibold text-white mb-4", children: "ICMS" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Alíquota de ICMS (%)" }),
              ((_b2 = nfeData.identificacao) == null ? void 0 : _b2.finalidade) === "4" && produtoDetalhesFiscais.destaque_icms_devolucao ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "number",
                  step: "0.01",
                  min: "0",
                  max: "100",
                  value: produtoDetalhesFiscais.aliquota_icms || 0,
                  onChange: (e) => {
                    const novosProdutos = produtos.map(
                      (p2) => p2.id === produtoDetalhesFiscais.id ? { ...p2, aliquota_icms: parseFloat(e.target.value) || 0 } : p2
                    );
                    onChange(novosProdutos);
                    setProdutoDetalhesFiscais((prev) => ({
                      ...prev,
                      aliquota_icms: parseFloat(e.target.value) || 0
                    }));
                    recalcularTotaisICMS(novosProdutos);
                  },
                  className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
                  placeholder: "18.00"
                }
              ) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white", children: [
                produtoDetalhesFiscais.aliquota_icms || "0,00",
                "%"
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Base de Cálculo de ICMS" }),
              ((_c = nfeData.identificacao) == null ? void 0 : _c.finalidade) === "4" && produtoDetalhesFiscais.destaque_icms_devolucao ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "number",
                  step: "0.01",
                  min: "0",
                  value: produtoDetalhesFiscais.base_calculo_icms || 0,
                  onChange: (e) => {
                    const novosProdutos = produtos.map(
                      (p2) => p2.id === produtoDetalhesFiscais.id ? { ...p2, base_calculo_icms: parseFloat(e.target.value) || 0 } : p2
                    );
                    onChange(novosProdutos);
                    setProdutoDetalhesFiscais((prev) => ({
                      ...prev,
                      base_calculo_icms: parseFloat(e.target.value) || 0
                    }));
                    recalcularTotaisICMS(novosProdutos);
                  },
                  className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
                  placeholder: "0.00"
                }
              ) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white", children: [
                "R$ ",
                (produtoDetalhesFiscais.base_calculo_icms || 0).toFixed(2)
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/30 rounded-lg p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-lg font-semibold text-white mb-4", children: "PIS" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "PIS CST" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white", children: produtoDetalhesFiscais.cst_pis || "Não informado" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "PIS Alíquota (%)" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white", children: [
                produtoDetalhesFiscais.aliquota_pis || "0,00",
                "%"
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/30 rounded-lg p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-lg font-semibold text-white mb-4", children: "COFINS" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "COFINS CST" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white", children: produtoDetalhesFiscais.cst_cofins || "Não informado" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "COFINS Alíquota (%)" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white", children: [
                produtoDetalhesFiscais.aliquota_cofins || "0,00",
                "%"
              ] })
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 pt-4 border-t border-gray-700", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          onClick: () => setShowDetalhesFiscaisModal(false),
          className: "w-full px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors",
          children: "Fechar"
        }
      ) })
    ] }) })
  ] });
};
const TotaisSection = ({ data, onChange }) => {
  const updateField = (field, value) => {
    const newData = {
      ...data,
      [field]: value
    };
    const valorTotal = newData.valor_produtos - newData.valor_desconto + (newData.valor_frete || 0) + (newData.valor_seguro || 0) + (newData.valor_outros || 0);
    newData.valor_total = valorTotal;
    onChange(newData);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-bold text-white mb-4", children: "Totais da NFe" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Total dos produtos" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "text",
                placeholder: "0,00",
                value: (data.valor_produtos || 0).toFixed(2),
                readOnly: true,
                className: "flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none cursor-not-allowed"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Total de Crédito SN" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_credito_sn || 0,
                onChange: (e) => updateField("valor_credito_sn", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Total PIS" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_pis || 0,
                onChange: (e) => updateField("valor_pis", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Total COFINS" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_cofins || 0,
                onChange: (e) => updateField("valor_cofins", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Total IPI" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_ipi || 0,
                onChange: (e) => updateField("valor_ipi", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Total ICMS BC" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_icms_bc || 0,
                onChange: (e) => updateField("valor_icms_bc", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Total ICMS" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_icms || 0,
                onChange: (e) => updateField("valor_icms", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Total FCP" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_fcp || 0,
                onChange: (e) => updateField("valor_fcp", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Total ICMS BC ST" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_icms_bc_st || 0,
                onChange: (e) => updateField("valor_icms_bc_st", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Total ICMS ST" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_icms_st || 0,
                onChange: (e) => updateField("valor_icms_st", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Total FCP ST" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_fcp_st || 0,
                onChange: (e) => updateField("valor_fcp_st", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Desconto" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_desconto || 0,
                onChange: (e) => updateField("valor_desconto", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Frete" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_frete || 0,
                onChange: (e) => updateField("valor_frete", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Seguro" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_seguro || 0,
                onChange: (e) => updateField("valor_seguro", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Outros" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                placeholder: "0,00",
                value: data.valor_outros || 0,
                onChange: (e) => updateField("valor_outros", parseFloat(e.target.value) || 0),
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500"
              }
            )
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "pt-4 border-t border-gray-700", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-64", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Total Nota" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400 mr-2", children: "R$" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              placeholder: "0,00",
              value: (data.valor_total || 0).toFixed(2),
              readOnly: true,
              className: "flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none font-bold cursor-not-allowed"
            }
          )
        ] })
      ] }) })
    ] })
  ] });
};
const PagamentosSection = ({ data: pagamentos, onChange, totalNota }) => {
  const [pagamentoForm, setPagamentoForm] = reactExports.useState({
    tipo: "01",
    valor: totalNota || 0
  });
  reactExports.useEffect(() => {
    if (totalNota > 0) {
      setPagamentoForm((prev) => ({ ...prev, valor: totalNota }));
      if (pagamentos.length === 1) {
        const pagamentosAtualizados = pagamentos.map((p2) => ({
          ...p2,
          valor: totalNota
        }));
        onChange(pagamentosAtualizados);
      }
    }
  }, [totalNota]);
  const tiposPagamento2 = {
    "01": "Dinheiro",
    "02": "Cheque",
    "03": "Cartão de Crédito",
    "04": "Cartão de Débito",
    "05": "Crédito Loja",
    "10": "Vale Alimentação",
    "11": "Vale Refeição",
    "12": "Vale Presente",
    "13": "Vale Combustível",
    "15": "Boleto Bancário",
    "90": "Sem pagamento",
    "99": "Outros"
  };
  const handleAdicionarPagamento = () => {
    if (pagamentoForm.valor <= 0) {
      alert("Valor deve ser maior que zero");
      return;
    }
    const novoPagamento = {
      id: Date.now().toString(),
      tipo: pagamentoForm.tipo,
      tipo_descricao: tiposPagamento2[pagamentoForm.tipo],
      valor: pagamentoForm.valor
    };
    onChange([...pagamentos, novoPagamento]);
    setPagamentoForm({
      tipo: "01",
      valor: 0
    });
  };
  const handleRemoverPagamento = (id2) => {
    onChange(pagamentos.filter((p2) => p2.id !== id2));
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-bold text-white", children: "Novo Pagamento" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-primary-500/10 border border-primary-500/20 rounded-lg px-4 py-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-primary-400 font-medium", children: "Total da Nota" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-lg font-bold text-primary-300", children: [
            "R$ ",
            totalNota.toFixed(2)
          ] })
        ] }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4 items-end", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Tipo Pagamento" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "select",
            {
              value: pagamentoForm.tipo,
              onChange: (e) => setPagamentoForm((prev) => ({ ...prev, tipo: e.target.value })),
              className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
              children: Object.entries(tiposPagamento2).map(([codigo, descricao]) => /* @__PURE__ */ jsxRuntimeExports.jsxs("option", { value: codigo, children: [
                codigo,
                " - ",
                descricao
              ] }, codigo))
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Valor" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-400", children: "R$" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                step: "0.01",
                value: pagamentoForm.valor,
                onChange: (e) => setPagamentoForm((prev) => ({ ...prev, valor: parseFloat(e.target.value) || 0 })),
                placeholder: "0,00",
                className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                type: "button",
                onClick: () => setPagamentoForm((prev) => ({ ...prev, valor: totalNota })),
                className: "px-2 py-2 bg-gray-700 text-gray-300 rounded-lg hover:bg-gray-600 focus:outline-none text-xs",
                title: "Preencher com valor total da nota",
                children: "Total"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            type: "button",
            onClick: handleAdicionarPagamento,
            className: "w-full px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 flex items-center justify-center gap-2",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 16 }),
              "ADICIONAR"
            ]
          }
        ) })
      ] }) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-bold text-white mb-4", children: "Lista de Pagamentos" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 overflow-hidden", children: pagamentos.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-8 text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhum pagamento adicionado" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-500 mt-1", children: "Use o formulário acima para adicionar formas de pagamento" })
      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "overflow-x-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("table", { className: "w-full", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { className: "bg-gray-800/50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-left text-sm font-medium text-gray-300 uppercase", children: "Tipo" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-right text-sm font-medium text-gray-300 uppercase", children: "Valor" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-right text-sm font-medium text-gray-300 uppercase", children: "Ações" })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { className: "divide-y divide-gray-800", children: pagamentos.map((pagamento, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "hover:bg-gray-800/30", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 text-sm text-white", children: pagamento.tipo_descricao }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("td", { className: "px-4 py-3 text-sm text-white text-right", children: [
            "R$ ",
            pagamento.valor.toFixed(2)
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 text-sm text-white text-right", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              onClick: () => handleRemoverPagamento(pagamento.id),
              className: "text-red-400 hover:text-red-300 p-1",
              title: "Remover pagamento",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 14 })
            }
          ) })
        ] }, pagamento.id)) })
      ] }) }) })
    ] })
  ] });
};
const ChavesRefSection = ({ data: chaves = [], onChange }) => {
  const [chaveForm, setChaveForm] = reactExports.useState("");
  const handleAdicionarChave = () => {
    if (!chaveForm.trim()) {
      alert("Digite uma chave de acesso válida");
      return;
    }
    const chaveNumeros = chaveForm.replace(/\D/g, "");
    if (chaveNumeros.length !== 44) {
      alert("Chave de acesso deve ter 44 dígitos");
      return;
    }
    if (chaves && chaves.some((c2) => c2.chave === chaveNumeros)) {
      alert("Esta chave já foi adicionada");
      return;
    }
    const novaChave = {
      id: Date.now().toString(),
      chave: chaveNumeros,
      chave_formatada: formatarChave(chaveNumeros)
    };
    onChange([...chaves || [], novaChave]);
    setChaveForm("");
  };
  const handleRemoverChave = (id2) => {
    onChange((chaves || []).filter((c2) => c2.id !== id2));
  };
  const formatarChave = (chave) => {
    return chave.replace(/(\d{4})/g, "$1 ").trim();
  };
  const handleChaveChange = (value) => {
    const numeros = value.replace(/\D/g, "").slice(0, 44);
    setChaveForm(numeros);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-bold text-white mb-4", children: "Lista de Chaves Referenciadas" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-bold text-white mb-4", children: "Nova Chave Referenciada" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col md:flex-row gap-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Chave" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: chaveForm,
              onChange: (e) => handleChaveChange(e.target.value),
              placeholder: "Digite a chave de acesso (44 dígitos)",
              className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500 font-mono text-sm",
              maxLength: 44
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              type: "button",
              onClick: handleAdicionarChave,
              className: "px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 flex items-center gap-2 whitespace-nowrap",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 16 }),
                "ADICIONAR"
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-gray-500 mt-1", children: [
          chaveForm.length,
          "/44 dígitos"
        ] })
      ] }) }) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-bold text-white mb-4", children: "Chaves Adicionadas" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 overflow-hidden", children: (chaves || []).length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-8 text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhuma chave referenciada" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-500 mt-1", children: "Use o formulário acima para adicionar chaves de acesso" })
      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "overflow-x-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("table", { className: "w-full", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { className: "bg-gray-800/50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-left text-sm font-medium text-gray-300 uppercase", children: "Chave de Acesso" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "px-4 py-3 text-right text-sm font-medium text-gray-300 uppercase", children: "Ações" })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { className: "divide-y divide-gray-800", children: (chaves || []).map((chave) => /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "hover:bg-gray-800/30", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 text-sm text-white font-mono", children: chave.chave_formatada }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "px-4 py-3 text-sm text-white text-right", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              onClick: () => handleRemoverChave(chave.id),
              className: "text-red-400 hover:text-red-300 p-1",
              title: "Remover chave",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 14 })
            }
          ) })
        ] }, chave.id)) })
      ] }) }) })
    ] })
  ] });
};
const TransportadoraSection = ({ data, onChange }) => {
  const [showTransportadoraModal, setShowTransportadoraModal] = reactExports.useState(false);
  const [transportadoraSelecionada, setTransportadoraSelecionada] = reactExports.useState(null);
  const handleSelecionarTransportadora = (transportadora) => {
    setTransportadoraSelecionada(transportadora);
    onChange({
      ...data,
      transportadora_id: transportadora.id,
      transportadora_nome: transportadora.nome,
      transportadora_documento: transportadora.documento,
      transportadora_endereco: transportadora.endereco_completo
    });
    setShowTransportadoraModal(false);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-bold text-white mb-4", children: "Transportadora dos Produtos" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Transportadora" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: transportadoraSelecionada ? transportadoraSelecionada.nome : "",
              placeholder: "Selecione uma transportadora",
              className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500",
              readOnly: true
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              onClick: () => setShowTransportadoraModal(true),
              className: "px-3 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 16 })
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Identificação do Frete" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "select",
          {
            value: data.modalidade_frete || "9",
            onChange: (e) => onChange({ ...data, modalidade_frete: e.target.value }),
            className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "1", children: "1 - Contratação do Frete por conta do Destinatário (FOB)" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "0", children: "0 - Contratação do Frete por conta do Remetente (CIF)" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "2", children: "2 - Contratação do Frete por conta de Terceiros" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "3", children: "3 - Transporte Próprio por conta do Remetente" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "4", children: "4 - Transporte Próprio por conta do Destinatário" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "9", children: "9 - Sem Ocorrência de Transporte" })
            ]
          }
        )
      ] })
    ] }) }),
    showTransportadoraModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
      TransportadoraSeletorModal,
      {
        isOpen: showTransportadoraModal,
        onClose: () => setShowTransportadoraModal(false),
        onSelect: handleSelecionarTransportadora
      }
    )
  ] });
};
const IntermediadorSection = () => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4", children: [
  /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-bold text-white mb-4", children: "Intermediador da Venda" }),
  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Intermediador da venda" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center space-x-2", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "input",
        {
          type: "text",
          placeholder: "Selecione ou digite o intermediador",
          className: "flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "px-3 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500", children: "+" })
    ] })
  ] }) })
] });
const AutorizacaoSection = ({ dados, onChange, isViewMode, onCancelarNFe, onEnviarCCe, onVisualizarPDFCCe }) => {
  var _a2, _b2, _c;
  const [showCancelModal, setShowCancelModal] = reactExports.useState(false);
  const [showHelpModal, setShowHelpModal] = reactExports.useState(false);
  const [isCancelling, setIsCancelling] = reactExports.useState(false);
  const [timeRemaining, setTimeRemaining] = reactExports.useState("");
  const [cancelStatus, setCancelStatus] = reactExports.useState("normal");
  const formatarData = (dataISO) => {
    if (!dataISO) return "";
    const data = new Date(dataISO);
    return data.toLocaleString("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      timeZone: "America/Sao_Paulo"
      // ✅ FORÇAR TIMEZONE BRASILEIRO
    });
  };
  const formatarChave = (chave) => {
    if (!chave) return "";
    return chave.replace(/(\d{4})/g, "$1 ").trim();
  };
  const calculateCancelStatus = () => {
    let dataAutorizacaoStr = dados == null ? void 0 : dados.dataAutorizacao;
    if (!dataAutorizacaoStr && (dados == null ? void 0 : dados.chave)) {
      const agora2 = /* @__PURE__ */ new Date();
      const dataSimulada = new Date(agora2.getTime() - 5 * 60 * 60 * 1e3);
      dataAutorizacaoStr = dataSimulada.toISOString();
      console.log("🧪 Usando data simulada para teste:", dataAutorizacaoStr);
    }
    if (!dataAutorizacaoStr) {
      console.log("🚫 Sem data de autorização:", dados);
      return;
    }
    const dataAutorizacao = new Date(dataAutorizacaoStr);
    const agora = /* @__PURE__ */ new Date();
    const horasPassadas = (agora.getTime() - dataAutorizacao.getTime()) / (1e3 * 60 * 60);
    console.log("⏰ Calculando status de cancelamento:", {
      dataAutorizacao: dataAutorizacaoStr,
      horasPassadas: horasPassadas.toFixed(2)
    });
    if (horasPassadas <= 24) {
      const horasRestantes = 24 - horasPassadas;
      const horas = Math.floor(horasRestantes);
      const minutos = Math.floor((horasRestantes - horas) * 60);
      setTimeRemaining(`${horas}h ${minutos}m`);
      setCancelStatus("normal");
    } else if (horasPassadas <= 480) {
      const horasRestantes = 480 - horasPassadas;
      const dias = Math.floor(horasRestantes / 24);
      const horas = Math.floor(horasRestantes % 24);
      setTimeRemaining(`${dias}d ${horas}h`);
      setCancelStatus("extemporaneo");
    } else {
      setTimeRemaining("Expirado");
      setCancelStatus("expirado");
    }
  };
  reactExports.useEffect(() => {
    if ((dados == null ? void 0 : dados.dataAutorizacao) && (dados == null ? void 0 : dados.status) !== "cancelada") {
      console.log("🔄 Iniciando cálculo de status de cancelamento");
      calculateCancelStatus();
      const interval = setInterval(calculateCancelStatus, 6e4);
      return () => clearInterval(interval);
    } else {
      console.log("🚫 Não calculando status (NFe cancelada ou sem data):", {
        dataAutorizacao: dados == null ? void 0 : dados.dataAutorizacao,
        status: dados == null ? void 0 : dados.status
      });
      if ((dados == null ? void 0 : dados.status) === "cancelada") {
        setTimeRemaining("");
        setCancelStatus("normal");
      }
    }
  }, [dados == null ? void 0 : dados.dataAutorizacao, dados == null ? void 0 : dados.status]);
  const handleCancelarClick = () => {
    if (!(dados == null ? void 0 : dados.chave)) {
      showMessage("error", "Chave da NFe não encontrada");
      return;
    }
    if ((dados == null ? void 0 : dados.status) === "cancelada") {
      showMessage("error", "Esta NFe já foi cancelada");
      return;
    }
    setShowCancelModal(true);
  };
  const handleConfirmarCancelamento = async () => {
    var _a3;
    const motivo = ((_a3 = dados.motivo_cancelamento) == null ? void 0 : _a3.trim()) || "";
    if (!motivo || motivo.length < 15) {
      showMessage("error", "Motivo deve ter pelo menos 15 caracteres");
      return;
    }
    setIsCancelling(true);
    try {
      if (onCancelarNFe) {
        await onCancelarNFe(motivo);
        setShowCancelModal(false);
        console.log("✅ Cancelamento concluído - Grid atualizada automaticamente");
      }
    } catch (error) {
      showMessage("error", `Erro ao cancelar NFe: ${error.message}`);
    } finally {
      setIsCancelling(false);
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-bold text-white mb-4", children: "Autorização da NFe" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4 mb-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { size: 24, className: "text-green-400" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white", children: "NFe Autorizada com Sucesso" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: dados.dataAutorizacao && `Autorizada em ${formatarData(dados.dataAutorizacao)}` })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Chave de Acesso" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "text",
                value: formatarChave(dados.chave),
                readOnly: true,
                className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none font-mono text-sm"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => navigator.clipboard.writeText(dados.chave),
                className: "absolute right-2 top-1/2 -translate-y-1/2 p-1 text-gray-400 hover:text-white",
                title: "Copiar chave",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 16 })
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Protocolo de Uso" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "text",
                value: dados.protocolo,
                readOnly: true,
                className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => navigator.clipboard.writeText(dados.protocolo),
                className: "absolute right-2 top-1/2 -translate-y-1/2 p-1 text-gray-400 hover:text-white",
                title: "Copiar protocolo",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(Copy, { size: 16 })
              }
            )
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Status" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "px-3 py-1 bg-green-500/20 text-green-400 rounded-full text-sm font-medium", children: [
          "✓ ",
          ((_a2 = dados.status) == null ? void 0 : _a2.toUpperCase()) || "AUTORIZADA"
        ] }) })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "Ações Pós-Autorização" }),
      (dados == null ? void 0 : dados.status) !== "cancelada" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Sequência da Carta de Correção" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "number",
              min: "1",
              max: "20",
              value: dados.sequencia_cce || 1,
              onChange: (e) => onChange({ ...dados, sequencia_cce: parseInt(e.target.value) || 1 }),
              className: "w-32 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-primary-500",
              placeholder: "1"
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Número da sequência (1 a 20). Cada NFe pode ter até 20 cartas de correção." })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4 mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Cartas de Correção Enviadas" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white min-h-[80px]", children: dados.cartas_correcao && dados.cartas_correcao.length > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: dados.cartas_correcao.map((cce, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between p-2 bg-gray-700 rounded text-sm", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "bg-yellow-600 text-white px-2 py-1 rounded text-xs font-medium", children: [
                "CCe #",
                cce.sequencia
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-300", children: new Date(cce.data_envio).toLocaleString("pt-BR") }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-green-400 text-xs", children: [
                "✓ ",
                cce.status
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-xs text-gray-400", children: [
                "Protocolo: ",
                cce.protocolo
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => onVisualizarPDFCCe && onVisualizarPDFCCe(dados.chave, cce.sequencia),
                  className: "px-2 py-1 bg-blue-600 hover:bg-blue-700 text-white text-xs rounded transition-colors",
                  title: "Visualizar PDF da CCe",
                  children: "📄 PDF"
                }
              )
            ] })
          ] }, index2)) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-center h-16 text-gray-500", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm", children: "Nenhuma Carta de Correção enviada" }) }) }) })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Carta de Correção *" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "textarea",
              {
                rows: 3,
                value: dados.carta_correcao || "",
                onChange: (e) => onChange({ ...dados, carta_correcao: e.target.value }),
                className: `w-full px-3 py-2 bg-gray-800 border rounded-lg text-white focus:outline-none focus:ring-1 resize-none pr-16 ${(dados.carta_correcao || "").length >= 15 ? "border-green-500 focus:border-green-500 focus:ring-green-500/20" : "border-red-500 focus:border-red-500 focus:ring-red-500/20"}`,
                placeholder: "Digite a correção que deseja fazer na NFe (mínimo 15 caracteres)...",
                maxLength: 1e3
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute bottom-2 right-2 text-xs font-medium pointer-events-none", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `${(dados.carta_correcao || "").length >= 15 ? "text-green-400" : "text-red-400"}`, children: (dados.carta_correcao || "").length }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500", children: "/15" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-2 flex items-center justify-between", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center text-xs", children: (dados.carta_correcao || "").length >= 15 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center text-green-400", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4 mr-1", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { fillRule: "evenodd", d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z", clipRule: "evenodd" }) }),
              "Texto válido para CCe"
            ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center text-red-400", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4 mr-1", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { fillRule: "evenodd", d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z", clipRule: "evenodd" }) }),
              "Mínimo de 15 caracteres obrigatório (faltam ",
              15 - (dados.carta_correcao || "").length,
              ")"
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500", children: "Use para corrigir dados que não alterem o valor do documento" })
          ] })
        ] })
      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-red-500/10 border border-red-500/20 rounded-lg p-4 mb-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-red-400 mb-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "Carta de Correção Indisponível" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300 text-sm", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Regra SEFAZ GA01:" }),
          " NFe cancelada não pode receber Carta de Correção Eletrônica (CCe)."
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-xs mt-1", children: 'Apenas NFe com status "autorizada" podem ser corrigidas via CCe.' })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white mb-4", children: "Cancelamento da NFe" }),
        (dados == null ? void 0 : dados.status) === "cancelada" ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-red-500/10 border border-red-500/20 rounded-lg p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-red-400 mb-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "NFe Cancelada" })
          ] }),
          dados.motivo_cancelamento && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300 text-sm", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Motivo:" }),
            " ",
            dados.motivo_cancelamento
          ] }),
          dados.data_cancelamento && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-400 text-xs mt-1", children: [
            "Cancelada em: ",
            formatarData(dados.data_cancelamento)
          ] })
        ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `border rounded-lg p-4 ${cancelStatus === "normal" ? "bg-blue-500/10 border-blue-500/20" : cancelStatus === "extemporaneo" ? "bg-yellow-500/10 border-yellow-500/20" : "bg-red-500/10 border-red-500/20"}`, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(AlertTriangle, { size: 16, className: `mt-0.5 flex-shrink-0 ${cancelStatus === "normal" ? "text-blue-400" : cancelStatus === "extemporaneo" ? "text-yellow-400" : "text-red-400"}` }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `text-sm ${cancelStatus === "normal" ? "text-blue-300" : cancelStatus === "extemporaneo" ? "text-yellow-300" : "text-red-300"}`, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "font-medium mb-1", children: [
                cancelStatus === "normal" && "Cancelamento Normal",
                cancelStatus === "extemporaneo" && "Cancelamento Extemporâneo",
                cancelStatus === "expirado" && "Prazo de Cancelamento Expirado"
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-2", children: [
                cancelStatus === "normal" && (dados == null ? void 0 : dados.status) !== "cancelada" && `Você pode cancelar esta NFe diretamente no sistema. Tempo restante: ${timeRemaining}`,
                cancelStatus === "extemporaneo" && (dados == null ? void 0 : dados.status) !== "cancelada" && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "flex items-center gap-1", children: [
                  "Cancelamento extemporâneo (após 24h). Tempo restante: ",
                  timeRemaining,
                  ". Pode ser necessária manifestação do destinatário.",
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      onClick: () => setShowHelpModal(true),
                      className: "inline-flex items-center justify-center w-4 h-4 bg-yellow-500/20 hover:bg-yellow-500/30 rounded-full text-yellow-300 hover:text-yellow-200 transition-colors ml-1",
                      title: "O que é manifestação do destinatário?",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs font-bold", children: "?" })
                    }
                  )
                ] }),
                cancelStatus === "expirado" && (dados == null ? void 0 : dados.status) !== "cancelada" && "O prazo de 20 dias para cancelamento expirou. É necessário protocolar pedido específico na SEFAZ."
              ] }),
              cancelStatus !== "expirado" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs opacity-75", children: "O cancelamento de NFe é uma ação irreversível e deve ser feita apenas em casos específicos previstos na legislação fiscal." })
            ] })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Motivo do Cancelamento *" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "textarea",
                {
                  rows: 3,
                  value: dados.motivo_cancelamento || "",
                  onChange: (e) => onChange({ ...dados, motivo_cancelamento: e.target.value }),
                  className: `w-full px-3 py-2 border rounded-lg text-white focus:outline-none focus:ring-1 resize-none pr-16 ${cancelStatus === "expirado" || (dados == null ? void 0 : dados.status) === "cancelada" ? "bg-gray-900 border-gray-600 cursor-not-allowed" : (dados.motivo_cancelamento || "").length >= 15 ? "bg-gray-800 border-green-500 focus:border-green-500 focus:ring-green-500/20" : "bg-gray-800 border-red-500 focus:border-red-500 focus:ring-red-500/20"}`,
                  placeholder: cancelStatus === "expirado" ? "Prazo de cancelamento expirado - Entre em contato com a SEFAZ" : "Digite o motivo do cancelamento (mínimo 15 caracteres)...",
                  disabled: cancelStatus === "expirado" || (dados == null ? void 0 : dados.status) === "cancelada",
                  maxLength: 255
                }
              ),
              cancelStatus !== "expirado" && (dados == null ? void 0 : dados.status) !== "cancelada" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute bottom-2 right-2 text-xs font-medium pointer-events-none", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `${(dados.motivo_cancelamento || "").length >= 15 ? "text-green-400" : "text-red-400"}`, children: (dados.motivo_cancelamento || "").length }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500", children: "/15" })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-2 flex items-center text-xs", children: cancelStatus === "expirado" ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center text-red-400", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4 mr-1", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { fillRule: "evenodd", d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z", clipRule: "evenodd" }) }),
              "Cancelamento não disponível - Prazo de 20 dias expirado"
            ] }) : (dados == null ? void 0 : dados.status) === "cancelada" ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center text-gray-400", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4 mr-1", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { fillRule: "evenodd", d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z", clipRule: "evenodd" }) }),
              "NFe já cancelada"
            ] }) : (dados.motivo_cancelamento || "").length >= 15 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center text-green-400", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4 mr-1", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { fillRule: "evenodd", d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z", clipRule: "evenodd" }) }),
              "Motivo válido para cancelamento"
            ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center text-red-400", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { className: "w-4 h-4 mr-1", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { fillRule: "evenodd", d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z", clipRule: "evenodd" }) }),
              "Mínimo de 15 caracteres obrigatório (faltam ",
              15 - (dados.motivo_cancelamento || "").length,
              ")"
            ] }) })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-3", children: [
        (dados == null ? void 0 : dados.status) !== "cancelada" && onEnviarCCe && /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: onEnviarCCe,
            disabled: !(dados == null ? void 0 : dados.chave) || !(dados == null ? void 0 : dados.carta_correcao) || dados.carta_correcao.length < 15,
            className: `px-4 py-2 rounded-lg focus:outline-none focus:ring-2 flex items-center gap-2 transition-colors font-medium ${!(dados == null ? void 0 : dados.chave) || !(dados == null ? void 0 : dados.carta_correcao) || dados.carta_correcao.length < 15 ? "bg-gray-600 text-gray-400 cursor-not-allowed" : "bg-yellow-600 hover:bg-yellow-700 text-white focus:ring-yellow-500"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Send, { size: 16 }),
              !(dados == null ? void 0 : dados.chave) ? "Chave NFe não encontrada" : ((_b2 = dados.carta_correcao) == null ? void 0 : _b2.length) < 15 ? `Faltam ${15 - (((_c = dados.carta_correcao) == null ? void 0 : _c.length) || 0)} caracteres` : "Enviar CCe"
            ]
          }
        ),
        (dados == null ? void 0 : dados.status) !== "cancelada" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: handleCancelarClick,
            disabled: cancelStatus === "expirado" || !(dados == null ? void 0 : dados.chave) || (dados.motivo_cancelamento || "").length < 15,
            className: `px-4 py-2 rounded-lg focus:outline-none focus:ring-2 flex items-center gap-2 transition-colors font-medium ${cancelStatus === "expirado" || !(dados == null ? void 0 : dados.chave) || (dados.motivo_cancelamento || "").length < 15 ? "bg-gray-600 text-gray-400 cursor-not-allowed" : cancelStatus === "extemporaneo" ? "bg-yellow-600 hover:bg-yellow-700 text-white focus:ring-yellow-500" : "bg-red-600 hover:bg-red-700 text-white focus:ring-red-500"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 }),
              cancelStatus === "expirado" ? "Prazo expirado (20 dias)" : !(dados == null ? void 0 : dados.chave) ? "Chave NFe não encontrada" : (dados.motivo_cancelamento || "").length < 15 ? `Faltam ${15 - (dados.motivo_cancelamento || "").length} caracteres` : cancelStatus === "extemporaneo" ? "Cancelar NFe (Extemporâneo)" : "Cancelar NFe"
            ]
          }
        ),
        cancelStatus === "expirado" && (dados == null ? void 0 : dados.status) !== "cancelada" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-3 p-3 bg-red-500/10 border border-red-500/20 rounded-lg", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-red-300", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Prazo Expirado:" }),
          " Para cancelar esta NFe, é necessário protocolar pedido específico na SEFAZ conforme legislação vigente."
        ] }) })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showHelpModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        exit: { opacity: 0 },
        className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4",
        onClick: () => setShowHelpModal(false),
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          motion.div,
          {
            initial: { scale: 0.9, opacity: 0 },
            animate: { scale: 1, opacity: 1 },
            exit: { scale: 0.9, opacity: 0 },
            className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-2xl max-h-[80vh] overflow-y-auto",
            onClick: (e) => e.stopPropagation(),
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 bg-yellow-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-yellow-400 font-bold", children: "?" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Manifestação do Destinatário" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: "Entenda quando é necessária" })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => setShowHelpModal(false),
                    className: "text-gray-400 hover:text-white transition-colors",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4 text-sm", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-blue-500/10 border border-blue-500/20 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "font-semibold text-blue-300 mb-2", children: "🎯 O que é?" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300", children: [
                    "A manifestação do destinatário é um ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "evento oficial" }),
                    " onde o destinatário da NFe declara à SEFAZ que não recebeu a mercadoria, desconhece a operação ou que a operação não ocorreu."
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "font-semibold text-yellow-300 mb-2", children: "⚖️ Por que é necessária?" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-300", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Proteção fiscal:" }),
                    " Evita que empresas cancelem NFes após a mercadoria já ter sido entregue/recebida, o que seria uma fraude fiscal."
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-green-500/10 border border-green-500/20 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "font-semibold text-green-300 mb-3", children: "⏰ Quando é obrigatória?" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-400", children: "❌" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-gray-300", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Cancelamento Normal (0-24h):" }),
                        " NÃO precisa"
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-yellow-400", children: "⚠️" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-gray-300", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Cancelamento Extemporâneo (24h-20d):" }),
                        " PODE precisar"
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-green-400", children: "✅" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-gray-300", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Após 20 dias:" }),
                        " SEMPRE precisa (via processo SEFAZ)"
                      ] })
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-purple-500/10 border border-purple-500/20 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "font-semibold text-purple-300 mb-3", children: "🔍 Casos que PRECISAM de manifestação:" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "space-y-1 text-gray-300", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
                      "• Destinatário é ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "pessoa jurídica" }),
                      " com certificado digital"
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
                      "• Destinatário é ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "pessoa física" }),
                      " com certificado digital"
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
                      "• NFe foi emitida mas a ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "operação não ocorreu" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
                      "• Mercadoria ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "não foi entregue/recebida" })
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-500/10 border border-gray-500/20 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "font-semibold text-gray-300 mb-3", children: "❌ Casos que NÃO PRECISAM:" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "space-y-1 text-gray-300", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
                      "• Destinatário no ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "exterior" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
                      "• Destinatário ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "pessoa física sem certificado" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
                      "• Já passou ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "180 dias" }),
                      " da autorização"
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
                      "• Destinatário já fez ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "manifestação de desconhecimento" })
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-orange-500/10 border border-orange-500/20 rounded-lg p-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "font-semibold text-orange-300 mb-3", children: "🔄 Como proceder:" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("ol", { className: "space-y-1 text-gray-300 list-decimal list-inside", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "Entre em contato com o destinatário" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "Solicite que ele acesse o Portal da NFe (www.nfe.fazenda.gov.br)" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: 'Peça para manifestar "Desconhecimento" ou "Operação não Realizada"' }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "Após a manifestação, você poderá cancelar no sistema" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "Se o destinatário não tiver certificado digital, o cancelamento pode ser feito diretamente" })
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 flex justify-end", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => setShowHelpModal(false),
                  className: "px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors",
                  children: "Entendi"
                }
              ) })
            ]
          }
        )
      }
    ) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showCancelModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        exit: { opacity: 0 },
        className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
        onClick: () => !isCancelling && setShowCancelModal(false),
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          motion.div,
          {
            initial: { scale: 0.9, opacity: 0 },
            animate: { scale: 1, opacity: 1 },
            exit: { scale: 0.9, opacity: 0 },
            className: "bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4",
            onClick: (e) => e.stopPropagation(),
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20, className: "text-red-400" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Cancelar NFe" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400", children: "Esta ação é irreversível" })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-3 mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AlertTriangle, { size: 16, className: "text-yellow-400 mt-0.5 flex-shrink-0" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-yellow-300", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-medium", children: "Atenção!" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mt-1", children: "O cancelamento será enviado para a SEFAZ e não poderá ser desfeito." })
                  ] })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 border border-gray-700 rounded-lg p-3", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Motivo do Cancelamento" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white text-sm leading-relaxed", children: dados.motivo_cancelamento || "Nenhum motivo informado" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-gray-400 mt-2", children: [
                    (dados.motivo_cancelamento || "").length,
                    " caracteres"
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => {
                      setShowCancelModal(false);
                    },
                    disabled: isCancelling,
                    className: "flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors disabled:opacity-50",
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: handleConfirmarCancelamento,
                    disabled: isCancelling || (dados.motivo_cancelamento || "").trim().length < 15,
                    className: "flex-1 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white py-3 px-4 rounded-lg transition-colors flex items-center justify-center gap-2",
                    children: isCancelling ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" }),
                      "Cancelando..."
                    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 }),
                      "Confirmar Cancelamento"
                    ] })
                  }
                )
              ] })
            ]
          }
        )
      }
    ) })
  ] });
};
const TransportadoraSeletorModal = ({ isOpen, onClose, onSelect }) => {
  const [transportadoras, setTransportadoras] = reactExports.useState([]);
  const [filteredTransportadoras, setFilteredTransportadoras] = reactExports.useState([]);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [isLoading, setIsLoading] = reactExports.useState(false);
  reactExports.useEffect(() => {
    if (isOpen) {
      loadTransportadoras();
    }
  }, [isOpen]);
  reactExports.useEffect(() => {
    if (searchTerm) {
      const filtered = transportadoras.filter(
        (transportadora) => transportadora.nome.toLowerCase().includes(searchTerm.toLowerCase()) || transportadora.documento && transportadora.documento.includes(searchTerm)
      );
      setFilteredTransportadoras(filtered);
    } else {
      setFilteredTransportadoras(transportadoras);
    }
  }, [searchTerm, transportadoras]);
  const loadTransportadoras = async () => {
    try {
      setIsLoading(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: clientesData, error } = await supabase.from("clientes").select("*").eq("empresa_id", usuarioData.empresa_id).eq("is_transportadora", true).or("deletado.is.null,deletado.eq.false").order("nome");
      if (error) throw error;
      const transportadorasFormatadas = (clientesData || []).map((cliente) => ({
        id: cliente.id,
        nome: cliente.nome,
        documento: cliente.documento,
        telefone: cliente.telefone,
        email: cliente.email,
        endereco_completo: [
          cliente.endereco,
          cliente.numero,
          cliente.bairro,
          cliente.cidade,
          cliente.estado
        ].filter(Boolean).join(", ")
      }));
      setTransportadoras(transportadorasFormatadas);
      setFilteredTransportadoras(transportadorasFormatadas);
    } catch (error) {
      console.error("Erro ao carregar transportadoras:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const formatarDocumento2 = (documento) => {
    if (!documento) return "";
    const limpo = documento.replace(/\D/g, "");
    if (limpo.length === 14) {
      return limpo.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, "$1.$2.$3/$4-$5");
    } else if (limpo.length === 11) {
      return limpo.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, "$1.$2.$3-$4");
    }
    return documento;
  };
  if (!isOpen) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 w-full max-w-4xl max-h-[80vh] overflow-hidden", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 border-b border-gray-800", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-bold text-white", children: "Selecionar Transportadora" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: onClose,
            className: "text-gray-400 hover:text-white",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            type: "text",
            placeholder: "Buscar por nome ou documento...",
            value: searchTerm,
            onChange: (e) => setSearchTerm(e.target.value),
            className: "w-full px-3 py-2 pl-10 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18, className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" })
      ] }) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 overflow-y-auto max-h-96", children: isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 border-2 border-primary-500/30 border-t-primary-500 rounded-full animate-spin mx-auto mb-2" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Carregando transportadoras..." })
    ] }) : filteredTransportadoras.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: searchTerm ? "Nenhuma transportadora encontrada" : "Nenhuma transportadora cadastrada" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-500 mt-1", children: !searchTerm && 'Cadastre clientes marcados como "Transportadora" para aparecerem aqui' })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: filteredTransportadoras.map((transportadora) => /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        onClick: () => onSelect(transportadora),
        className: "p-3 bg-gray-800/50 rounded-lg border border-gray-700 hover:border-primary-500 cursor-pointer transition-colors",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-between items-start", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-white font-medium", children: transportadora.nome }),
          transportadora.documento && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mt-1", children: formatarDocumento2(transportadora.documento) }),
          transportadora.telefone && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400", children: [
            "📞 ",
            transportadora.telefone
          ] }),
          transportadora.endereco_completo && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400", children: [
            "📍 ",
            transportadora.endereco_completo
          ] })
        ] }) })
      },
      transportadora.id
    )) }) })
  ] }) });
};
const InutilizacaoPage = () => {
  const [inutilizacoes, setInutilizacoes] = reactExports.useState([]);
  const [loading, setLoading] = reactExports.useState(true);
  const [showModal, setShowModal] = reactExports.useState(false);
  const [processando, setProcessando] = reactExports.useState(false);
  const [modeloDocumento, setModeloDocumento] = reactExports.useState("65");
  const [ambiente, setAmbiente] = reactExports.useState("2");
  const [serie, setSerie] = reactExports.useState("1");
  const [numeroInicial, setNumeroInicial] = reactExports.useState("");
  const [numeroFinal, setNumeroFinal] = reactExports.useState("");
  const [justificativa, setJustificativa] = reactExports.useState("");
  const loadInutilizacoes = async () => {
    try {
      setLoading(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data, error } = await supabase.from("inutilizacoes").select("*, ambiente").eq("empresa_id", usuarioData.empresa_id).order("created_at", { ascending: false });
      if (error) throw error;
      setInutilizacoes(data || []);
    } catch (error) {
      console.error("Erro ao carregar inutilizações:", error);
      B.error("Erro ao carregar inutilizações");
    } finally {
      setLoading(false);
    }
  };
  reactExports.useEffect(() => {
    loadInutilizacoes();
  }, []);
  const resetModal = () => {
    setModeloDocumento("65");
    setAmbiente("2");
    setSerie("1");
    setNumeroInicial("");
    setNumeroFinal("");
    setJustificativa("");
    setShowModal(false);
  };
  const isFormValid = () => {
    return numeroInicial.trim() !== "" && numeroFinal.trim() !== "" && justificativa.trim().length >= 15 && parseInt(numeroInicial) <= parseInt(numeroFinal);
  };
  const processarInutilizacao = async () => {
    if (!isFormValid()) {
      B.error("Preencha todos os campos corretamente");
      return;
    }
    try {
      setProcessando(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const inutilizacaoData = {
        empresa_id: usuarioData.empresa_id,
        modelo_documento: parseInt(modeloDocumento),
        ambiente: parseInt(ambiente),
        // Incluir ambiente selecionado
        serie: parseInt(serie),
        numero_inicial: parseInt(numeroInicial),
        numero_final: parseInt(numeroFinal),
        justificativa: justificativa.trim()
      };
      const response = await fetch("/backend/public/inutilizar-numeracao.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(inutilizacaoData)
      });
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erro HTTP ${response.status}: ${errorText}`);
      }
      const result = await response.json();
      if (!result.success) {
        throw new Error(result.error || "Erro na inutilização");
      }
      B.success("Numeração inutilizada com sucesso!");
      resetModal();
      loadInutilizacoes();
    } catch (error) {
      console.error("Erro na inutilização:", error);
      B.error(`Erro na inutilização: ${error.message}`);
    } finally {
      setProcessando(false);
    }
  };
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString("pt-BR");
  };
  const formatRange = (inicial, final) => {
    return inicial === final ? `#${inicial}` : `#${inicial} - #${final}`;
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "min-h-screen bg-background-dark p-6", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "max-w-7xl mx-auto", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-8", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-3xl font-bold text-white mb-2", children: "Inutilização de Numeração" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Gerencie a inutilização de faixas de numeração de NFe e NFC-e" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setShowModal(true),
            className: "flex items-center gap-2 bg-primary-500 hover:bg-primary-600 text-white px-6 py-3 rounded-lg transition-colors",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 20 }),
              "Adicionar Inutilização"
            ]
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-6 border-b border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Histórico de Inutilizações" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-6", children: loading ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-center py-12", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500" }) }) : inutilizacoes.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-12", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(FileX, { size: 48, className: "mx-auto mb-4 text-gray-500" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-lg", children: "Nenhuma inutilização encontrada" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-500 text-sm mt-2", children: 'Clique em "Adicionar Inutilização" para começar' })
        ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "overflow-x-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("table", { className: "w-full", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "border-b border-gray-700", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-4 text-gray-400 font-medium", children: "Modelo" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-4 text-gray-400 font-medium", children: "Série" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-4 text-gray-400 font-medium", children: "Faixa" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-4 text-gray-400 font-medium", children: "Ambiente" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-4 text-gray-400 font-medium", children: "Justificativa" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-4 text-gray-400 font-medium", children: "Protocolo" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "text-left py-3 px-4 text-gray-400 font-medium", children: "Data" })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { children: inutilizacoes.map((inutilizacao) => /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "border-b border-gray-800/50 hover:bg-gray-800/30", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-4 px-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `px-2 py-1 rounded-full text-xs font-medium ${inutilizacao.modelo_documento === 55 ? "bg-blue-500/20 text-blue-400" : "bg-green-500/20 text-green-400"}`, children: inutilizacao.modelo_documento === 55 ? "NFe (55)" : "NFC-e (65)" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-4 px-4 text-white", children: inutilizacao.serie }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-4 px-4 text-white font-mono", children: formatRange(inutilizacao.numero_inicial, inutilizacao.numero_final) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-4 px-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `px-2 py-1 rounded-full text-xs font-medium ${inutilizacao.ambiente === 1 ? "bg-red-500/20 text-red-400 border border-red-500/30" : "bg-yellow-500/20 text-yellow-400 border border-yellow-500/30"}`, children: inutilizacao.ambiente === 1 ? "Produção" : "Homologação" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-4 px-4 text-gray-300 max-w-xs truncate", title: inutilizacao.justificativa, children: inutilizacao.justificativa }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-4 px-4 text-gray-300 font-mono", children: inutilizacao.protocolo }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-4 px-4 text-gray-400", children: formatDate(inutilizacao.data_inutilizacao) })
          ] }, inutilizacao.id)) })
        ] }) }) })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showModal && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        exit: { opacity: 0 },
        className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4",
        onClick: () => !processando && resetModal(),
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          motion.div,
          {
            initial: { scale: 0.9, opacity: 0 },
            animate: { scale: 1, opacity: 1 },
            exit: { scale: 0.9, opacity: 0 },
            className: "bg-background-card rounded-lg border border-gray-800 w-full max-w-md max-h-[90vh] flex flex-col",
            onClick: (e) => e.stopPropagation(),
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between p-6 border-b border-gray-800 flex-shrink-0", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold text-white", children: "Nova Inutilização" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => !processando && resetModal(),
                    disabled: processando,
                    className: "text-gray-400 hover:text-white transition-colors disabled:opacity-50",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 20 })
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-6 space-y-6 flex-1 overflow-y-auto", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Modelo do Documento" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-3", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => setModeloDocumento("65"),
                        disabled: processando,
                        className: `p-3 rounded-lg border transition-colors ${modeloDocumento === "65" ? "bg-green-500/20 border-green-500 text-green-400" : "bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600"}`,
                        children: "NFC-e (65)"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => setModeloDocumento("55"),
                        disabled: processando,
                        className: `p-3 rounded-lg border transition-colors ${modeloDocumento === "55" ? "bg-blue-500/20 border-blue-500 text-blue-400" : "bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600"}`,
                        children: "NFe (55)"
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Ambiente" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-3", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => setAmbiente("2"),
                        disabled: processando,
                        className: `p-3 rounded-lg border transition-colors ${ambiente === "2" ? "bg-yellow-500/20 border-yellow-500 text-yellow-400" : "bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600"}`,
                        children: "🧪 Homologação"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => setAmbiente("1"),
                        disabled: processando,
                        className: `p-3 rounded-lg border transition-colors ${ambiente === "1" ? "bg-red-500/20 border-red-500 text-red-400" : "bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600"}`,
                        children: "🚀 Produção"
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Série" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "number",
                      value: serie,
                      onChange: (e) => setSerie(e.target.value),
                      disabled: processando,
                      className: "w-full bg-gray-800 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500",
                      placeholder: "1",
                      min: "1"
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-3", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Número Inicial" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "number",
                        value: numeroInicial,
                        onChange: (e) => setNumeroInicial(e.target.value),
                        disabled: processando,
                        className: "w-full bg-gray-800 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500",
                        placeholder: "1",
                        min: "1"
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Número Final" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        type: "number",
                        value: numeroFinal,
                        onChange: (e) => setNumeroFinal(e.target.value),
                        disabled: processando,
                        className: "w-full bg-gray-800 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500",
                        placeholder: "1",
                        min: "1"
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Justificativa (mínimo 15 caracteres)" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "textarea",
                    {
                      value: justificativa,
                      onChange: (e) => setJustificativa(e.target.value),
                      disabled: processando,
                      className: "w-full bg-gray-800 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 resize-none",
                      rows: 3,
                      placeholder: "Descreva o motivo da inutilização...",
                      maxLength: 255
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between mt-1", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: `text-xs ${justificativa.length >= 15 ? "text-green-400" : "text-red-400"}`, children: [
                      justificativa.length >= 15 ? "✓" : "✗",
                      " Mínimo 15 caracteres"
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-xs text-gray-500", children: [
                      justificativa.length,
                      "/255"
                    ] })
                  ] })
                ] }),
                numeroInicial && numeroFinal && parseInt(numeroInicial) > parseInt(numeroFinal) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 p-3 bg-red-500/10 border border-red-500/30 rounded-lg", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AlertTriangle, { size: 16, className: "text-red-400" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-400 text-sm", children: "O número inicial deve ser menor ou igual ao final" })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3 p-6 border-t border-gray-800 flex-shrink-0", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => !processando && resetModal(),
                    disabled: processando,
                    className: "flex-1 bg-gray-700 hover:bg-gray-600 disabled:bg-gray-600 disabled:cursor-not-allowed text-white py-2 px-4 rounded-lg transition-colors",
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: processarInutilizacao,
                    disabled: !isFormValid() || processando,
                    className: "flex-1 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white py-2 px-4 rounded-lg transition-colors flex items-center justify-center gap-2",
                    children: processando ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" }),
                      "Inutilizando..."
                    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(FileX, { size: 16 }),
                      "Inutilizar"
                    ] })
                  }
                )
              ] })
            ]
          }
        )
      }
    ) })
  ] });
};
const TesteEmailPage = () => {
  const [emailDestino, setEmailDestino] = reactExports.useState("");
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [resultado, setResultado] = reactExports.useState(null);
  const [configuracao, setConfiguracao] = reactExports.useState(null);
  const verificarConfiguracoes = async () => {
    setIsLoading(true);
    setResultado(null);
    try {
      const response = await fetch("/backend/public/teste-email.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          acao: "verificar"
        })
      });
      const data = await response.json();
      setConfiguracao(data.data);
      setResultado(data);
    } catch (error) {
      setResultado({
        success: false,
        error: "Erro ao verificar configurações: " + error
      });
    } finally {
      setIsLoading(false);
    }
  };
  const enviarEmailTeste = async () => {
    if (!emailDestino.trim()) {
      alert("Digite um email de destino");
      return;
    }
    if (!emailDestino.includes("@")) {
      alert("Digite um email válido");
      return;
    }
    setIsLoading(true);
    setResultado(null);
    try {
      const response = await fetch("/backend/public/teste-email.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          acao: "teste",
          email_destino: emailDestino
        })
      });
      const data = await response.json();
      setResultado(data);
    } catch (error) {
      setResultado({
        success: false,
        error: "Erro ao enviar email: " + error
      });
    } finally {
      setIsLoading(false);
    }
  };
  const enviarEmailDebug = async () => {
    if (!emailDestino.trim()) {
      alert("Digite um email de destino");
      return;
    }
    setIsLoading(true);
    setResultado(null);
    try {
      const response = await fetch("/backend/public/teste-email.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          acao: "debug",
          email_destino: emailDestino
        })
      });
      const data = await response.json();
      setResultado(data);
    } catch (error) {
      setResultado({
        success: false,
        error: "Erro ao enviar email com debug: " + error
      });
    } finally {
      setIsLoading(false);
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "min-h-screen bg-background-primary p-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "max-w-4xl mx-auto", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-3xl font-bold text-white mb-2", children: "📧 Teste de Email - Sistema NFe" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Configure e teste o envio de emails para NFe" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6 mb-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Settings, { className: "text-blue-400", size: 24 }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Verificar Configurações" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          onClick: verificarConfiguracoes,
          disabled: isLoading,
          className: "bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors",
          children: isLoading ? "Verificando..." : "Verificar Configurações SMTP"
        }
      ),
      configuracao && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-4 p-4 bg-gray-800 rounded-lg", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 mb-3", children: [
          configuracao.configurado ? /* @__PURE__ */ jsxRuntimeExports.jsx(CheckCircle, { className: "text-green-400", size: 20 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(XCircle, { className: "text-red-400", size: 20 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium", children: configuracao.configurado ? "Configurações OK" : "Problemas Encontrados" })
        ] }),
        !configuracao.configurado && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-400 font-medium mb-2", children: "Problemas:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: "list-disc list-inside text-red-300", children: configuracao.problemas.map((problema, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: problema }, index2)) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-gray-300", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Host:" }),
            " ",
            configuracao.config.host
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Porta:" }),
            " ",
            configuracao.config.port
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Criptografia:" }),
            " ",
            configuracao.config.encryption
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "Nome do Remetente:" }),
            " ",
            configuracao.config.from_name
          ] })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6 mb-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Mail, { className: "text-green-400", size: 24 }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Enviar Email de Teste" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "Email de Destino" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            type: "email",
            value: emailDestino,
            onChange: (e) => setEmailDestino(e.target.value),
            placeholder: "seu-email@gmail.com",
            className: "w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: enviarEmailTeste,
            disabled: isLoading,
            className: "bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Send, { size: 16 }),
              isLoading ? "Enviando..." : "Enviar Teste"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: enviarEmailDebug,
            disabled: isLoading,
            className: "bg-orange-600 hover:bg-orange-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Bug, { size: 16 }),
              isLoading ? "Enviando..." : "Teste com Debug"
            ]
          }
        )
      ] })
    ] }),
    resultado && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
        resultado.success ? /* @__PURE__ */ jsxRuntimeExports.jsx(CheckCircle, { className: "text-green-400", size: 24 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(XCircle, { className: "text-red-400", size: 24 }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: resultado.success ? "Sucesso!" : "Erro" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800 rounded-lg p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { className: "text-sm text-gray-300 whitespace-pre-wrap overflow-x-auto", children: JSON.stringify(resultado, null, 2) }) }),
      resultado.success && resultado.acao === "teste" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-4 p-4 bg-green-900/20 border border-green-700 rounded-lg", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 mb-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(CheckCircle, { className: "text-green-400", size: 20 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-green-300 font-medium", children: "Email enviado com sucesso!" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-green-200 text-sm", children: [
          "Verifique a caixa de entrada (e spam) do email: ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: emailDestino })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6 mt-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 mb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCircle, { className: "text-yellow-400", size: 24 }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: "Instruções" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4 text-gray-300", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium mb-2", children: "1. Configure o Gmail:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "list-disc list-inside space-y-1 text-sm", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "Ative a autenticação de 2 fatores na sua conta Gmail" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: 'Gere uma "Senha de App" em: myaccount.google.com/security' }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: "Use essa senha de 16 caracteres no arquivo .env" })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium mb-2", children: "2. Configure o .env:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800 p-3 rounded text-sm font-mono", children: [
            "MAIL_HOST=smtp.gmail.com",
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            "MAIL_PORT=587",
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            "MAIL_USERNAME=seu-email@gmail.com",
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            "MAIL_PASSWORD=sua_senha_de_app_16_caracteres",
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            "MAIL_ENCRYPTION=tls",
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            "MAIL_FROM_ADDRESS=seu-email@gmail.com",
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            'MAIL_FROM_NAME="Sistema Nexo NFe"'
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium mb-2", children: "3. Instale as dependências:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800 p-3 rounded text-sm font-mono", children: "cd backend && chmod +x install-phpmailer.sh && ./install-phpmailer.sh" })
        ] })
      ] })
    ] })
  ] }) });
};
const UserMobileLayout = () => {
  useAuthSession();
  const [isLoading, setIsLoading] = reactExports.useState(true);
  const [showConfirmation, setShowConfirmation] = reactExports.useState(false);
  const [userName, setUserName] = reactExports.useState("");
  const [empresaNomeFantasia, setEmpresaNomeFantasia] = reactExports.useState("");
  const location = useLocation();
  const navigate = useNavigate();
  useResponsiveRedirect();
  reactExports.useEffect(() => {
    const getUser = async () => {
      try {
        const { data: { user } } = await supabase.auth.getUser();
        if (user) {
          const { data: userData } = await supabase.from("usuarios").select(`
              nome,
              empresa_id
            `).eq("id", user.id).single();
          if (userData) {
            setUserName(userData.nome);
            if (userData.empresa_id) {
              const { data: empresaData } = await supabase.from("empresas").select("nome_fantasia").eq("id", userData.empresa_id).single();
              if (empresaData && empresaData.nome_fantasia) {
                setEmpresaNomeFantasia(empresaData.nome_fantasia);
              }
            }
          }
        }
        setIsLoading(false);
      } catch (error) {
        console.error("Erro ao carregar dados do usuário:", error);
        setIsLoading(false);
      }
    };
    getUser();
  }, []);
  const handleLogout = async () => {
    try {
      await supabase.auth.signOut();
      navigate("/entrar", { replace: true });
    } catch (error) {
      console.error("Error logging out:", error);
    }
  };
  if (isLoading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingScreen, {});
  }
  const menuItems = [
    { icon: Home, label: "Dashboard", path: "/user/dashboard" },
    { icon: ShoppingBag, label: "Pedidos", path: "/user/pedidos" },
    { icon: Package, label: "Produtos", path: "/user/produtos" },
    { icon: Users, label: "Clientes", path: "/user/clientes" },
    { icon: User, label: "Perfil", path: "/user/perfil" }
  ];
  return /* @__PURE__ */ jsxRuntimeExports.jsx(SessionCheck, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingScreen, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "min-h-screen bg-background-dark flex flex-col overflow-hidden", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { className: "bg-background-card border-b border-gray-800 p-3 flex items-center justify-between", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 flex-shrink-0 max-w-[45%]", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Logo, { size: "sm" }) }),
        empresaNomeFantasia && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white text-xs font-medium ml-1 truncate", children: empresaNomeFantasia })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 flex-shrink-0", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-white text-xs truncate max-w-[70px]", children: [
          "Olá, ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: userName })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: "flex items-center justify-center w-8 h-8 rounded-full bg-red-500/10 text-red-400",
            onClick: () => setShowConfirmation(true),
            title: "Sair do sistema",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(LogOut, { size: 16 })
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("main", { className: `flex-1 p-4 overflow-y-auto custom-scrollbar ${location.pathname === "/user/pdv" ? "pb-4" : "pb-20"}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {}) }),
    location.pathname === "/user/pedidos" && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.button,
      {
        initial: { scale: 0, opacity: 0 },
        animate: { scale: 1, opacity: 1 },
        whileTap: { scale: 0.95 },
        className: "fixed right-4 bottom-20 w-14 h-14 rounded-full bg-primary-500 text-white flex items-center justify-center shadow-lg z-20",
        onClick: () => navigate("/user/pedidos/novo"),
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 24 })
      }
    ),
    location.pathname === "/user/clientes" && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.button,
      {
        initial: { scale: 0, opacity: 0 },
        animate: { scale: 1, opacity: 1 },
        whileTap: { scale: 0.95 },
        className: "fixed right-4 bottom-20 w-14 h-14 rounded-full bg-primary-500 text-white flex items-center justify-center shadow-lg z-20",
        onClick: () => navigate("/user/clientes/novo"),
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 24 })
      }
    ),
    location.pathname !== "/user/pdv" && /* @__PURE__ */ jsxRuntimeExports.jsx("footer", { className: "fixed bottom-0 left-0 right-0 bg-background-card border-t border-gray-800 z-10", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-around items-center h-16 overflow-x-auto custom-scrollbar", children: menuItems.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "button",
      {
        className: `flex flex-col items-center justify-center w-1/5 h-full ${location.pathname.startsWith(item.path) ? "text-primary-400" : "text-gray-400"}`,
        onClick: () => navigate(item.path),
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(item.icon, { size: 18 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs mt-1", children: item.label })
        ]
      },
      item.path
    )) }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showConfirmation && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        exit: { opacity: 0 },
        className: "fixed inset-0 bg-black/50 flex items-center justify-center z-50",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          motion.div,
          {
            initial: { scale: 0.9, opacity: 0 },
            animate: { scale: 1, opacity: 1 },
            exit: { scale: 0.9, opacity: 0 },
            className: "bg-background-card p-6 rounded-lg shadow-xl max-w-sm mx-4",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold text-white mb-4", children: "Confirmar saída" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-6", children: "Tem certeza que deseja sair do sistema?" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => setShowConfirmation(false),
                    className: "flex-1 px-4 py-2 rounded-lg bg-gray-800 text-white hover:bg-gray-700 transition-colors",
                    children: "Cancelar"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: handleLogout,
                    className: "flex-1 px-4 py-2 rounded-lg bg-red-500 text-white hover:bg-red-600 transition-colors",
                    children: "Sair"
                  }
                )
              ] })
            ]
          }
        )
      }
    ) })
  ] }) });
};
const UserDashboardPage = () => {
  var _a2;
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [data, setData] = reactExports.useState({
    pedidosHoje: 0,
    pedidosSemana: 0,
    pedidosMes: 0,
    valorTotalHoje: 0,
    valorTotalSemana: 0,
    valorTotalMes: 0,
    ultimosPedidos: []
  });
  const [isAdmin, setIsAdmin] = reactExports.useState(false);
  const [usuarios, setUsuarios] = reactExports.useState([]);
  const [usuarioSelecionado, setUsuarioSelecionado] = reactExports.useState("todos");
  const [showFilters, setShowFilters] = reactExports.useState(false);
  const [lastUpdate, setLastUpdate] = reactExports.useState(/* @__PURE__ */ new Date());
  reactExports.useEffect(() => {
    loadDashboardData();
    checkUserType();
    loadUsuarios();
  }, []);
  reactExports.useEffect(() => {
    loadDashboardData();
  }, [usuarioSelecionado]);
  const checkUserType = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select(`
          tipo_user_config:tipo_user_config_id(tipo)
        `).eq("id", userData.user.id).single();
      if (usuarioData == null ? void 0 : usuarioData.tipo_user_config) {
        setIsAdmin(usuarioData.tipo_user_config.tipo === "admin");
      }
    } catch (error) {
      console.error("Erro ao verificar tipo de usuário:", error);
    }
  };
  const loadUsuarios = async () => {
    var _a3;
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select(`
          empresa_id,
          tipo_user_config:tipo_user_config_id(tipo)
        `).eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id) || ((_a3 = usuarioData.tipo_user_config) == null ? void 0 : _a3.tipo) !== "admin") return;
      const { data: usuariosData } = await supabase.from("usuarios").select(`
          id,
          nome,
          email,
          tipo_user_config:tipo_user_config_id(tipo)
        `).eq("empresa_id", usuarioData.empresa_id).order("nome");
      if (usuariosData) {
        setUsuarios(usuariosData);
      }
    } catch (error) {
      console.error("Erro ao carregar usuários:", error);
    }
  };
  const loadDashboardData = async () => {
    var _a3, _b2;
    try {
      setIsLoading(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select(`
          empresa_id,
          tipo_user_config:tipo_user_config_id(tipo)
        `).eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      let query = supabase.from("pedidos").select("*").eq("empresa_id", usuarioData.empresa_id);
      if (usuarioSelecionado !== "todos" && ((_a3 = usuarioData.tipo_user_config) == null ? void 0 : _a3.tipo) === "admin") {
        query = query.eq("usuario_id", usuarioSelecionado);
      } else if (((_b2 = usuarioData.tipo_user_config) == null ? void 0 : _b2.tipo) !== "admin") {
        query = query.eq("usuario_id", userData.user.id);
      }
      query = query.order("created_at", { ascending: false });
      const { data: pedidos } = await query;
      if (!pedidos) {
        setIsLoading(false);
        return;
      }
      setLastUpdate(/* @__PURE__ */ new Date());
      const hoje = /* @__PURE__ */ new Date();
      hoje.setHours(0, 0, 0, 0);
      const inicioSemana = new Date(hoje);
      inicioSemana.setDate(hoje.getDate() - hoje.getDay());
      const inicioMes = new Date(hoje.getFullYear(), hoje.getMonth(), 1);
      const pedidosHoje = pedidos.filter((p2) => new Date(p2.created_at) >= hoje);
      const pedidosSemana = pedidos.filter((p2) => new Date(p2.created_at) >= inicioSemana);
      const pedidosMes = pedidos.filter((p2) => new Date(p2.created_at) >= inicioMes);
      const valorTotalHoje = pedidosHoje.reduce((acc, p2) => acc + p2.valor_total, 0);
      const valorTotalSemana = pedidosSemana.reduce((acc, p2) => acc + p2.valor_total, 0);
      const valorTotalMes = pedidosMes.reduce((acc, p2) => acc + p2.valor_total, 0);
      const ultimosPedidos = pedidos.slice(0, 5);
      setData({
        pedidosHoje: pedidosHoje.length,
        pedidosSemana: pedidosSemana.length,
        pedidosMes: pedidosMes.length,
        valorTotalHoje,
        valorTotalSemana,
        valorTotalMes,
        ultimosPedidos
      });
    } catch (error) {
      console.error("Erro ao carregar dados do dashboard:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const formatCurrency = (value) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(value);
  };
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      year: "2-digit"
    });
  };
  const formatTime = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleTimeString("pt-BR", {
      hour: "2-digit",
      minute: "2-digit"
    });
  };
  const getStatusColor = (status) => {
    switch (status) {
      case "pendente":
        return "text-yellow-500";
      case "confirmado":
        return "text-blue-500";
      case "em_preparo":
        return "text-orange-500";
      case "em_entrega":
        return "text-purple-500";
      case "entregue":
        return "text-green-500";
      case "faturado":
        return "text-green-600";
      case "cancelado":
        return "text-red-500";
      default:
        return "text-gray-500";
    }
  };
  const getStatusText = (status) => {
    switch (status) {
      case "pendente":
        return "Pendente";
      case "confirmado":
        return "Confirmado";
      case "em_preparo":
        return "Em Preparo";
      case "em_entrega":
        return "Em Entrega";
      case "entregue":
        return "Entregue";
      case "faturado":
        return "Faturado";
      case "cancelado":
        return "Cancelado";
      default:
        return "Desconhecido";
    }
  };
  const cards = [
    {
      title: "Pedidos Hoje",
      value: data.pedidosHoje,
      icon: ShoppingBag,
      color: "bg-blue-500/10",
      iconColor: "text-blue-500",
      borderColor: "border-blue-500/20"
    },
    {
      title: "Pedidos na Semana",
      value: data.pedidosSemana,
      icon: Calendar,
      color: "bg-green-500/10",
      iconColor: "text-green-500",
      borderColor: "border-green-500/20"
    },
    {
      title: "Pedidos no Mês",
      value: data.pedidosMes,
      icon: TrendingUp,
      color: "bg-purple-500/10",
      iconColor: "text-purple-500",
      borderColor: "border-purple-500/20"
    },
    {
      title: "Valor Hoje",
      value: formatCurrency(data.valorTotalHoje),
      icon: ShoppingBag,
      color: "bg-yellow-500/10",
      iconColor: "text-yellow-500",
      borderColor: "border-yellow-500/20"
    },
    {
      title: "Valor na Semana",
      value: formatCurrency(data.valorTotalSemana),
      icon: Calendar,
      color: "bg-pink-500/10",
      iconColor: "text-pink-500",
      borderColor: "border-pink-500/20"
    },
    {
      title: "Valor no Mês",
      value: formatCurrency(data.valorTotalMes),
      icon: TrendingUp,
      color: "bg-orange-500/10",
      iconColor: "text-orange-500",
      borderColor: "border-orange-500/20"
    }
  ];
  const formatLastUpdate = () => {
    const now2 = /* @__PURE__ */ new Date();
    const diff = now2.getTime() - lastUpdate.getTime();
    if (diff < 6e4) {
      return "agora mesmo";
    }
    if (diff < 36e5) {
      const minutes = Math.floor(diff / 6e4);
      return `há ${minutes} ${minutes === 1 ? "minuto" : "minutos"}`;
    }
    if (diff < 864e5) {
      const hours = Math.floor(diff / 36e5);
      return `há ${hours} ${hours === 1 ? "hora" : "horas"}`;
    }
    const days = Math.floor(diff / 864e5);
    return `há ${days} ${days === 1 ? "dia" : "dias"}`;
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-xl font-semibold text-white", children: "Meu Dashboard" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-400 flex items-center gap-1", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
          "Atualizado: ",
          formatLastUpdate()
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => loadDashboardData(),
            className: "p-1 hover:bg-gray-800/50 rounded-full transition-colors",
            title: "Atualizar dados",
            disabled: isLoading,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(RefreshCw, { size: 12, className: isLoading ? "animate-spin" : "" })
          }
        )
      ] })
    ] }),
    isAdmin && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "button",
        {
          onClick: () => setShowFilters(!showFilters),
          className: "flex items-center gap-1 px-2 py-1 bg-gray-800/50 hover:bg-gray-800 rounded-lg text-gray-300 text-sm transition-colors",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Filter, { size: 16 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Filtrar por usuário" })
          ]
        }
      ) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showFilters && /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { height: 0, opacity: 0 },
          animate: { height: "auto", opacity: 1 },
          exit: { height: 0, opacity: 0 },
          className: "overflow-hidden",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 border border-gray-700 rounded-lg p-3 mt-2 mb-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "text-white text-sm font-medium flex items-center gap-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
                "Usuários"
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => setShowFilters(false),
                  className: "p-1 hover:bg-gray-700/50 rounded-full text-gray-400",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 14 })
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => setUsuarioSelecionado("todos"),
                  className: `px-2 py-1 rounded-full text-xs font-medium ${usuarioSelecionado === "todos" ? "bg-primary-500 text-white" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`,
                  children: "Todos"
                }
              ),
              usuarios.map((usuario) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => setUsuarioSelecionado(usuario.id),
                  className: `px-2 py-1 rounded-full text-xs font-medium ${usuarioSelecionado === usuario.id ? "bg-primary-500 text-white" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`,
                  children: usuario.nome
                },
                usuario.id
              ))
            ] })
          ] })
        }
      ) })
    ] }),
    isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4", children: [1, 2, 3, 4, 5, 6].map((item) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 rounded-lg border border-gray-800 bg-background-card", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-5 w-5 bg-gray-700 rounded mb-2 animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-16 bg-gray-700 rounded mb-2 animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-20 bg-gray-700 rounded animate-pulse" })
      ] }, item)) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4 mt-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-6 w-40 bg-gray-700 rounded mb-4 animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-3", children: [1, 2, 3].map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-3 bg-gray-800/50 rounded-lg", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 w-2/3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-24 bg-gray-700 rounded animate-pulse" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-32 bg-gray-700 rounded animate-pulse" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 w-1/3 flex flex-col items-end", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-16 bg-gray-700 rounded animate-pulse" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-24 bg-gray-700 rounded animate-pulse" })
          ] })
        ] }) }, item)) })
      ] })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4", children: cards.map((card, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
        motion.div,
        {
          initial: { opacity: 0, y: 20 },
          animate: { opacity: 1, y: 0 },
          transition: { delay: index2 * 0.1 },
          className: `p-4 rounded-lg border ${card.borderColor} ${card.color}`,
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center mb-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `p-1.5 rounded-lg ${card.color}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(card.icon, { size: 20, className: card.iconColor }) }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-gray-400 text-xs mb-1", children: card.title }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xl font-semibold text-white", children: card.value })
          ]
        },
        card.title
      )) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        motion.div,
        {
          initial: { opacity: 0, y: 20 },
          animate: { opacity: 1, y: 0 },
          transition: { delay: 0.4 },
          className: "bg-background-card rounded-lg border border-gray-800 p-4",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-lg font-medium text-white", children: "Últimos Pedidos" }),
              isAdmin && usuarioSelecionado !== "todos" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 px-2 py-1 bg-primary-500/10 rounded-full", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 12, className: "text-primary-400" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-primary-400", children: ((_a2 = usuarios.find((u2) => u2.id === usuarioSelecionado)) == null ? void 0 : _a2.nome) || "Usuário" })
              ] })
            ] }),
            data.ultimosPedidos.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center py-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCircle, { size: 24, className: "text-gray-500 mx-auto mb-2" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhum pedido encontrado" })
            ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-3 max-h-64 overflow-y-auto custom-scrollbar", children: data.ultimosPedidos.map((pedido, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              motion.div,
              {
                initial: { opacity: 0, y: 10 },
                animate: { opacity: 1, y: 0 },
                transition: { delay: 0.5 + index2 * 0.1 },
                className: "p-3 bg-gray-800/50 rounded-lg",
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-start", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white font-medium", children: [
                        "#",
                        pedido.numero_pedido || index2 + 1
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `text-xs ${getStatusColor(pedido.status)}`, children: getStatusText(pedido.status) })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-xs mt-1", children: pedido.cliente_nome || "Cliente" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-right", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-primary-400 font-medium", children: formatCurrency(pedido.valor_total) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-gray-500 text-xs mt-1", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Calendar, { size: 12 }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: formatDate(pedido.created_at) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Clock, { size: 12, className: "ml-1" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: formatTime(pedido.created_at) })
                    ] })
                  ] })
                ] })
              },
              pedido.id
            )) })
          ]
        }
      )
    ] })
  ] });
};
const UserPedidosPage = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [pedidos, setPedidos] = reactExports.useState([]);
  const [filteredPedidos, setFilteredPedidos] = reactExports.useState([]);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [showFilters, setShowFilters] = reactExports.useState(false);
  const [statusFilter, setStatusFilter] = reactExports.useState("todos");
  const [dataFilter, setDataFilter] = reactExports.useState("");
  const [isInitialLoading, setIsInitialLoading] = reactExports.useState(false);
  const [empresaWhatsapp, setEmpresaWhatsapp] = reactExports.useState("");
  const [isLargeScreen, setIsLargeScreen] = reactExports.useState(window.innerWidth > 600);
  reactExports.useEffect(() => {
    const handleResize = () => {
      setIsLargeScreen(window.innerWidth > 600);
    };
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);
  reactExports.useEffect(() => {
    const loadFromLocalStorage = () => {
      try {
        const cachedPedidos = localStorage.getItem("pedidos_cache");
        const cachedTimestamp = localStorage.getItem("pedidos_cache_timestamp");
        if (cachedPedidos && cachedTimestamp) {
          const timestamp = parseInt(cachedTimestamp);
          const now2 = (/* @__PURE__ */ new Date()).getTime();
          const fifteenMinutesInMs = 15 * 60 * 1e3;
          if (now2 - timestamp < fifteenMinutesInMs) {
            console.log("Carregando dados de pedidos do cache local");
            setPedidos(JSON.parse(cachedPedidos));
            setIsInitialLoading(false);
            loadPedidos(false);
            return true;
          } else {
            console.log("Cache de pedidos expirado, carregando do servidor");
            localStorage.removeItem("pedidos_cache");
            localStorage.removeItem("pedidos_cache_timestamp");
          }
        }
        return false;
      } catch (error) {
        console.error("Erro ao carregar dados do localStorage:", error);
        return false;
      }
    };
    if (!loadFromLocalStorage()) {
      loadPedidos(true);
      const timer = setTimeout(() => {
        setIsInitialLoading(false);
      }, 2e3);
      return () => clearTimeout(timer);
    }
    loadEmpresaWhatsapp();
  }, []);
  const loadEmpresaWhatsapp = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: empresaData } = await supabase.from("empresas").select("whatsapp").eq("id", usuarioData.empresa_id).single();
      if (empresaData && empresaData.whatsapp) {
        setEmpresaWhatsapp(empresaData.whatsapp);
      }
    } catch (error) {
      console.error("Erro ao carregar WhatsApp da empresa:", error);
    }
  };
  reactExports.useEffect(() => {
    applyFilters();
  }, [pedidos, searchTerm, statusFilter, dataFilter]);
  const loadPedidos = async (showLoading = true) => {
    try {
      if (showLoading) {
        setIsLoading(true);
      }
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: pedidosData, error } = await supabase.from("pedidos").select(`
          *,
          empresa:empresas(nome),
          cliente:clientes(nome, telefone)
        `).eq("usuario_id", userData.user.id).order("created_at", { ascending: false });
      if (error) throw error;
      const formattedPedidos = (pedidosData == null ? void 0 : pedidosData.map((pedido) => {
        var _a2;
        return {
          ...pedido,
          empresa_nome: (_a2 = pedido.empresa) == null ? void 0 : _a2.nome
        };
      })) || [];
      setPedidos(formattedPedidos);
      try {
        localStorage.setItem("pedidos_cache", JSON.stringify(formattedPedidos));
        localStorage.setItem("pedidos_cache_timestamp", (/* @__PURE__ */ new Date()).getTime().toString());
        console.log("Dados de pedidos salvos no cache local");
      } catch (cacheError) {
        console.error("Erro ao salvar pedidos no localStorage:", cacheError);
      }
    } catch (error) {
      console.error("Erro ao carregar pedidos:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const applyFilters = () => {
    let filtered = [...pedidos];
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase();
      filtered = filtered.filter(
        (pedido) => {
          var _a2, _b2, _c;
          return ((_b2 = (_a2 = pedido.cliente) == null ? void 0 : _a2.nome) == null ? void 0 : _b2.toLowerCase().includes(searchLower)) || ((_c = pedido.numero) == null ? void 0 : _c.toLowerCase().includes(searchLower));
        }
      );
    }
    if (statusFilter !== "todos") {
      if (statusFilter === "faturado") {
        filtered = filtered.filter((pedido) => pedido.status === "entregue");
      } else {
        filtered = filtered.filter((pedido) => pedido.status === statusFilter);
      }
    }
    if (dataFilter) {
      const dataFiltro = new Date(dataFilter);
      dataFiltro.setHours(0, 0, 0, 0);
      const dataFiltroFim = new Date(dataFilter);
      dataFiltroFim.setHours(23, 59, 59, 999);
      filtered = filtered.filter((pedido) => {
        const dataPedido = new Date(pedido.created_at);
        return dataPedido >= dataFiltro && dataPedido <= dataFiltroFim;
      });
    }
    setFilteredPedidos(filtered);
  };
  const formatCurrency = (value) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(value);
  };
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      year: "2-digit"
    });
  };
  const formatTime = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleTimeString("pt-BR", {
      hour: "2-digit",
      minute: "2-digit"
    });
  };
  const formatWhatsAppNumber = (phone) => {
    const cleanNumber = phone.replace(/\D/g, "");
    if (cleanNumber.startsWith("55")) {
      return cleanNumber;
    }
    return `55${cleanNumber}`;
  };
  const getStatusColor = (status) => {
    switch (status) {
      case "pendente":
        return "text-yellow-500";
      case "confirmado":
        return "text-blue-500";
      case "em_preparo":
        return "text-orange-500";
      case "em_entrega":
        return "text-purple-500";
      case "entregue":
        return "text-green-500";
      case "faturado":
        return "text-green-600";
      case "cancelado":
        return "text-red-500";
      default:
        return "text-gray-500";
    }
  };
  const getStatusText = (status) => {
    switch (status) {
      case "pendente":
        return "Pendente";
      case "confirmado":
        return "Confirmado";
      case "em_preparo":
        return "Em Preparo";
      case "em_entrega":
        return "Em Entrega";
      case "entregue":
        return "Entregue";
      case "faturado":
        return "Faturado";
      case "cancelado":
        return "Cancelado";
      default:
        return "Desconhecido";
    }
  };
  const handleEditarPedido = (pedidoId) => {
    const isWebVersion2 = window.location.pathname.startsWith("/dashboard");
    if (isWebVersion2) {
      navigate(`/dashboard/pedidos/editar/${pedidoId}`);
    } else {
      navigate(`/user/pedidos/editar/${pedidoId}`);
    }
  };
  const handleNovoPedido = () => {
    const isWebVersion2 = window.location.pathname.startsWith("/dashboard");
    if (isWebVersion2) {
      navigate("/dashboard/pedidos/novo");
    } else {
      navigate("/user/pedidos/novo");
    }
  };
  const handleEnviarWhatsApp = async (pedido) => {
    try {
      if (!empresaWhatsapp) {
        alert("Número de WhatsApp da empresa não configurado");
        return;
      }
      const url = await gerarLinkPedido(pedido);
      if (!url) {
        alert("Não foi possível gerar o link do pedido");
        return;
      }
      const whatsappNumber = formatWhatsAppNumber(empresaWhatsapp);
      const mensagem = `Olá! Segue o link do pedido #${pedido.numero}: ${url}`;
      const whatsappUrl = `https://wa.me/${whatsappNumber}?text=${encodeURIComponent(mensagem)}`;
      window.open(whatsappUrl, "_blank");
    } catch (error) {
      console.error("Erro ao enviar WhatsApp:", error);
      alert("Erro ao enviar mensagem pelo WhatsApp");
    }
  };
  const gerarLinkPedido = async (pedido) => {
    try {
      const { data: empresaData, error: empresaError } = await supabase.from("empresas").select("documento").eq("id", pedido.empresa_id).single();
      if (empresaError || !empresaData || !empresaData.documento) {
        throw new Error("Não foi possível obter o CNPJ da empresa");
      }
      const cnpjLimpo = empresaData.documento.replace(/[^\d]/g, "");
      const codigoPedido = `${cnpjLimpo}${pedido.numero}`;
      const baseUrl = window.location.origin;
      const url = `${baseUrl}/pedido/${codigoPedido}`;
      return url;
    } catch (error) {
      console.error("Erro ao gerar link do pedido:", error);
      return null;
    }
  };
  if (isInitialLoading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3 px-4 py-1", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-2", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-6 w-32 bg-gray-800 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-8 w-8 bg-gray-800 rounded animate-pulse" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-9 w-full bg-gray-800 rounded animate-pulse" }),
      [1, 2, 3].map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          className: "p-2.5 bg-background-card rounded border border-gray-800",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 space-y-1", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-24 bg-gray-700 rounded animate-pulse" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-32 bg-gray-700 rounded animate-pulse" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-28 bg-gray-700 rounded animate-pulse" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 space-y-1 flex flex-col items-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-16 bg-gray-700 rounded animate-pulse" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-20 bg-gray-700 rounded animate-pulse" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-6 w-12 bg-gray-700 rounded animate-pulse" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-6 w-12 bg-gray-700 rounded animate-pulse" })
            ] })
          ] })
        },
        item
      ))
    ] });
  }
  const isWebVersion = window.location.pathname.startsWith("/dashboard");
  const showAddButton = isWebVersion && isDesktopScreen();
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `${isLargeScreen ? "h-full flex flex-col space-y-4" : "space-y-2"}`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-xl font-semibold text-white", children: "Meus Pedidos" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
        showAddButton && /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: handleNovoPedido,
            className: "flex items-center gap-2 px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-lg transition-colors",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 18 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Novo Pedido" })
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => setShowFilters(!showFilters),
            className: "p-2 rounded-lg bg-gray-800 text-gray-400 hover:text-white transition-colors",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Filter, { size: 18 })
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "input",
        {
          type: "text",
          placeholder: "Buscar pedidos por clientes ou numero...",
          value: searchTerm,
          onChange: (e) => setSearchTerm(e.target.value),
          className: "w-full bg-gray-800/50 border border-gray-700 rounded py-2 pl-9 pr-3 text-white text-sm focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 16, className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showFilters && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { height: 0, opacity: 0 },
        animate: { height: "auto", opacity: 1 },
        exit: { height: 0, opacity: 0 },
        className: "overflow-hidden",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 border border-gray-700 rounded p-3 space-y-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-xs font-medium text-gray-400 mb-1.5", children: "Status do Pedido" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-wrap gap-1.5", children: ["todos", "pendente", "faturado"].map((status) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => setStatusFilter(status),
                className: `px-2.5 py-1 rounded-full text-xs font-medium ${statusFilter === status ? "bg-primary-500 text-white" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`,
                children: status === "todos" ? "Todos" : status === "faturado" ? "Faturado" : "Pendente"
              },
              status
            )) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-xs font-medium text-gray-400 mb-1.5", children: "Data do Pedido" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Calendar, { size: 16, className: "text-gray-500" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "date",
                  value: dataFilter,
                  onChange: (e) => setDataFilter(e.target.value),
                  className: "w-full bg-gray-800/50 border border-gray-700 rounded py-2 pl-9 pr-3 text-white text-sm focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                }
              )
            ] }),
            dataFilter && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center mt-1.5", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "button",
              {
                onClick: () => setDataFilter(""),
                className: "text-xs text-gray-400 hover:text-white flex items-center gap-1",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 12 }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Limpar filtro de data" })
                ]
              }
            ) })
          ] })
        ] })
      }
    ) }),
    isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: [1, 2, 3].map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-2.5 bg-background-card rounded border border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-3", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 space-y-1", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-16 bg-gray-700 rounded animate-pulse" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-16 bg-gray-700 rounded-full animate-pulse" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-24 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-20 bg-gray-700 rounded animate-pulse" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 space-y-1 flex flex-col items-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-16 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-20 bg-gray-700 rounded animate-pulse" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-6 w-12 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-6 w-12 bg-gray-700 rounded animate-pulse" })
      ] })
    ] }) }, item)) }) : filteredPedidos.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-8 text-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCircle, { size: 32, className: "text-gray-500 mx-auto mb-3" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: "Nenhum pedido encontrado" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-4", children: searchTerm || statusFilter !== "todos" ? "Tente ajustar os filtros de busca" : "Você ainda não possui pedidos registrados" })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `space-y-2 ${isLargeScreen ? "max-h-[calc(100vh-140px)] overflow-y-auto custom-scrollbar pr-2" : "max-h-[calc(100vh-320px)] overflow-y-auto custom-scrollbar pr-2"}`, children: filteredPedidos.map((pedido, index2) => {
      var _a2;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { opacity: 0, y: 20 },
          animate: { opacity: 1, y: 0 },
          transition: { delay: index2 * 0.05 },
          className: "p-2.5 bg-background-card rounded border border-gray-800",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `${isLargeScreen ? "flex-[2]" : "flex-1"} min-w-0`, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 mb-0.5", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white font-medium text-sm", children: [
                  "#",
                  pedido.numero || index2 + 1
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `text-xs px-1.5 py-0.5 rounded-full ${getStatusColor(pedido.status)} bg-opacity-20`, children: getStatusText(pedido.status) })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm truncate", children: ((_a2 = pedido.cliente) == null ? void 0 : _a2.nome) || "Cliente" }),
              pedido.empresa_nome && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-500 text-xs mt-0.5 truncate", children: [
                "Empresa: ",
                pedido.empresa_nome
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `${isLargeScreen ? "flex-[1.5] flex flex-col items-center justify-center text-center" : "flex-1 text-center"} min-w-0`, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-primary-400 font-medium text-sm", children: formatCurrency(pedido.valor_total) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-center gap-1 text-gray-500 text-xs mt-0.5", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Calendar, { size: 10 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: formatDate(pedido.created_at) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Clock, { size: 10, className: "ml-0.5" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: formatTime(pedido.created_at) })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `${isLargeScreen ? "flex-[1.5]" : "flex-none"} flex items-center gap-1 ${isLargeScreen ? "justify-end" : ""}`, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "button",
                {
                  onClick: () => handleEnviarWhatsApp(pedido),
                  className: "flex items-center gap-1 px-2 py-1 rounded bg-green-500/10 text-green-400 hover:bg-green-500/20 transition-colors",
                  title: "Enviar WhatsApp",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(MessageCircle, { size: 12 }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs", children: "Enviar" })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "button",
                {
                  onClick: () => handleEditarPedido(pedido.id),
                  className: "flex items-center gap-1 px-2 py-1 rounded bg-blue-500/10 text-blue-400 hover:bg-blue-500/20 transition-colors",
                  title: "Editar pedido",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(SquarePen, { size: 12 }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs", children: "Editar" })
                  ]
                }
              )
            ] })
          ] })
        },
        pedido.id
      );
    }) })
  ] });
};
const ClienteDropdown = ({
  value,
  onChange,
  empresaId,
  placeholder = "Selecione um cliente",
  required = false
}) => {
  const [isOpen, setIsOpen] = reactExports.useState(false);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [searchType, setSearchType] = reactExports.useState("nome");
  const [clientes, setClientes] = reactExports.useState([]);
  const [filteredClientes, setFilteredClientes] = reactExports.useState([]);
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [selectedCliente, setSelectedCliente] = reactExports.useState(null);
  const dropdownRef = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (empresaId) {
      loadClientes();
    }
  }, [empresaId]);
  reactExports.useEffect(() => {
    if (searchTerm.trim() === "") {
      setFilteredClientes(clientes);
    } else {
      const searchLower = searchTerm.toLowerCase();
      if (searchType === "nome") {
        setFilteredClientes(
          clientes.filter(
            (cliente) => cliente.nome.toLowerCase().includes(searchLower) || cliente.nome_fantasia && cliente.nome_fantasia.toLowerCase().includes(searchLower) || cliente.razao_social && cliente.razao_social.toLowerCase().includes(searchLower)
          )
        );
      } else {
        const searchNumeric = searchTerm.replace(/\D/g, "");
        setFilteredClientes(
          clientes.filter(
            (cliente) => cliente.documento && cliente.documento.includes(searchNumeric)
          )
        );
      }
    }
  }, [searchTerm, searchType, clientes]);
  reactExports.useEffect(() => {
    if (value && clientes.length > 0) {
      const cliente = clientes.find((c2) => c2.id === value);
      setSelectedCliente(cliente || null);
    } else {
      setSelectedCliente(null);
    }
  }, [value, clientes]);
  reactExports.useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);
  const loadClientes = async () => {
    try {
      setIsLoading(true);
      const { data, error } = await supabase.from("clientes").select(`
          id,
          nome,
          telefone,
          documento,
          tipo_documento,
          razao_social,
          nome_fantasia,
          empresa_id,
          endereco,
          numero,
          complemento,
          bairro,
          cidade,
          estado,
          cep
        `).eq("empresa_id", empresaId).eq("deletado", false).order("nome");
      if (error) {
        console.error("Erro ao carregar clientes:", error);
        return;
      }
      setClientes(data || []);
      setFilteredClientes(data || []);
    } catch (error) {
      console.error("Erro ao carregar clientes:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const handleSelectCliente = (cliente) => {
    setSelectedCliente(cliente);
    onChange(
      cliente.id,
      cliente.nome,
      cliente.telefone,
      {
        documento: cliente.documento,
        tipo_documento: cliente.tipo_documento,
        endereco: cliente.endereco,
        numero: cliente.numero,
        bairro: cliente.bairro,
        cidade: cliente.cidade,
        estado: cliente.estado,
        cep: cliente.cep,
        complemento: cliente.complemento
      }
    );
    setIsOpen(false);
    setSearchTerm("");
  };
  const handleClear = () => {
    setSelectedCliente(null);
    onChange("", "", "", void 0);
    setSearchTerm("");
  };
  const formatarDocumento2 = (documento, tipo) => {
    if (!documento) return "";
    if (tipo === "CNPJ") {
      return documento.replace(/^(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})$/, "$1.$2.$3/$4-$5");
    } else if (tipo === "CPF") {
      return documento.replace(/^(\d{3})(\d{3})(\d{3})(\d{2})$/, "$1.$2.$3-$4");
    }
    return documento;
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", ref: dropdownRef, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 18, className: "text-gray-500" }) }),
      selectedCliente ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-10 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20 cursor-pointer flex items-center",
          onClick: () => setIsOpen(!isOpen),
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: selectedCliente.nome }),
              selectedCliente.documento && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-xs text-gray-400", children: [
                selectedCliente.tipo_documento,
                ": ",
                formatarDocumento2(selectedCliente.documento, selectedCliente.tipo_documento)
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                type: "button",
                className: "absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-white",
                onClick: (e) => {
                  e.stopPropagation();
                  handleClear();
                },
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 18 })
              }
            )
          ]
        }
      ) : /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20 cursor-pointer",
          onClick: () => setIsOpen(!isOpen),
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: placeholder }),
            required && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500 ml-1", children: "*" })
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: isOpen && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      motion.div,
      {
        initial: { opacity: 0, y: -10 },
        animate: { opacity: 1, y: 0 },
        exit: { opacity: 0, y: -10 },
        transition: { duration: 0.2 },
        className: "absolute z-50 mt-1 w-full bg-gray-800 border border-gray-700 rounded-lg shadow-lg overflow-hidden",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex border-b border-gray-700", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                type: "button",
                className: `flex-1 py-2 px-3 text-sm ${searchType === "nome" ? "bg-gray-700 text-white" : "text-gray-400 hover:bg-gray-700/50"}`,
                onClick: () => setSearchType("nome"),
                children: "Buscar por Nome"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "button",
              {
                type: "button",
                className: `flex-1 py-2 px-3 text-sm ${searchType === "documento" ? "bg-gray-700 text-white" : "text-gray-400 hover:bg-gray-700/50"}`,
                onClick: () => setSearchType("documento"),
                children: [
                  "Buscar por ",
                  searchType === "documento" ? "CNPJ/CPF" : "Documento"
                ]
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-2 border-b border-gray-700", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: searchType === "nome" ? /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 16, className: "text-gray-500" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { size: 16, className: "text-gray-500" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "text",
                value: searchTerm,
                onChange: (e) => setSearchTerm(e.target.value),
                className: "w-full bg-gray-700/50 border border-gray-600 rounded-lg py-2 pl-10 pr-3 text-white text-sm focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                placeholder: searchType === "nome" ? "Digite o nome do cliente..." : "Digite o CNPJ/CPF...",
                autoFocus: true
              }
            )
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "max-h-60 overflow-y-auto", children: isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-4 text-center text-gray-400", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-6 h-6 border-2 border-primary-500/30 border-t-primary-500 rounded-full animate-spin mx-auto mb-2" }),
            "Carregando clientes..."
          ] }) : filteredClientes.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 text-center text-gray-400", children: "Nenhum cliente encontrado" }) : filteredClientes.map((cliente) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "div",
            {
              className: "px-3 py-2 hover:bg-gray-700 cursor-pointer transition-colors",
              onClick: () => handleSelectCliente(cliente),
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "font-medium text-white", children: cliente.nome }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col text-xs text-gray-400", children: [
                  cliente.documento && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                    cliente.tipo_documento,
                    ": ",
                    formatarDocumento2(cliente.documento, cliente.tipo_documento)
                  ] }),
                  cliente.telefone && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                    "Tel: ",
                    cliente.telefone
                  ] })
                ] })
              ]
            },
            cliente.id
          )) })
        ]
      }
    ) })
  ] });
};
const UserNovoPedidoPage = () => {
  var _a2, _b2;
  const navigate = useNavigate();
  const { id: id2 } = useParams();
  const isEditMode = !!id2;
  const [isLoading, setIsLoading] = reactExports.useState(isEditMode);
  const [isSaving, setIsSaving] = reactExports.useState(false);
  const [empresas, setEmpresas] = reactExports.useState([]);
  const [produtos, setProdutos] = reactExports.useState([]);
  const [empresaSelecionada, setEmpresaSelecionada] = reactExports.useState("");
  const [clienteId, setClienteId] = reactExports.useState("");
  const [clienteNome, setClienteNome] = reactExports.useState("");
  const [clienteTelefone, setClienteTelefone] = reactExports.useState("");
  const [pedido, setPedido] = reactExports.useState(null);
  const [clienteData, setClienteData] = reactExports.useState();
  const [itensPedido, setItensPedido] = reactExports.useState([]);
  const [produtoSelecionado, setProdutoSelecionado] = reactExports.useState("");
  const [produtoSelecionadoObj, setProdutoSelecionadoObj] = reactExports.useState(null);
  const [quantidade, setQuantidade] = reactExports.useState(1);
  const [quantidadeVazia, setQuantidadeVazia] = reactExports.useState(false);
  const [observacao, setObservacao] = reactExports.useState("");
  const [valorTotal, setValorTotal] = reactExports.useState(0);
  const [isProdutoModalOpen, setIsProdutoModalOpen] = reactExports.useState(false);
  const [descontosPrazo, setDescontosPrazo] = reactExports.useState([]);
  const [descontosValor, setDescontosValor] = reactExports.useState([]);
  const [descontoPrazoSelecionado, setDescontoPrazoSelecionado] = reactExports.useState(null);
  const [descontoValorSelecionado, setDescontoValorSelecionado] = reactExports.useState(null);
  const [valorDesconto, setValorDesconto] = reactExports.useState(0);
  const [valorAcrescimo, setValorAcrescimo] = reactExports.useState(0);
  const [descontoPrazoObj, setDescontoPrazoObj] = reactExports.useState(null);
  const [descontoValorObj, setDescontoValorObj] = reactExports.useState(null);
  const [formasPagamento, setFormasPagamento] = reactExports.useState([]);
  const [formaPagamentoSelecionada, setFormaPagamentoSelecionada] = reactExports.useState(null);
  const [formasPagamentoParciais, setFormasPagamentoParciais] = reactExports.useState([]);
  const [novaFormaPagamentoId, setNovaFormaPagamentoId] = reactExports.useState("");
  const [novaFormaPagamentoValor, setNovaFormaPagamentoValor] = reactExports.useState("");
  const [novaFormaPagamentoParcelas, setNovaFormaPagamentoParcelas] = reactExports.useState(1);
  const [formaPagamentoSelecionadaObj, setFormaPagamentoSelecionadaObj] = reactExports.useState(null);
  const [tipoPagamento, setTipoPagamento] = reactExports.useState("unico");
  reactExports.useEffect(() => {
    const init = async () => {
      await loadEmpresas();
      await loadFormasPagamentoGeral();
    };
    init();
  }, []);
  reactExports.useEffect(() => {
    const carregarPedido = async () => {
      if (isEditMode && id2 && empresaSelecionada) {
        console.log("Carregando pedido:", id2, "Empresa:", empresaSelecionada);
        await loadPedido(id2);
      }
    };
    carregarPedido();
  }, [isEditMode, id2, empresaSelecionada]);
  reactExports.useEffect(() => {
    if (empresas.length > 0 && !empresaSelecionada) {
      setEmpresaSelecionada(empresas[0].id);
    }
  }, [empresas]);
  reactExports.useEffect(() => {
    const subtotal = itensPedido.reduce((acc, item) => acc + item.valorTotal, 0);
    const total = subtotal + valorAcrescimo - valorDesconto;
    setValorTotal(total > 0 ? total : 0);
  }, [itensPedido, valorDesconto, valorAcrescimo]);
  reactExports.useEffect(() => {
    if (descontoPrazoSelecionado) {
      const desconto = descontosPrazo.find((d2) => d2.id === descontoPrazoSelecionado) || null;
      setDescontoPrazoObj(desconto);
    } else {
      setDescontoPrazoObj(null);
    }
  }, [descontoPrazoSelecionado, descontosPrazo]);
  reactExports.useEffect(() => {
    if (descontoValorSelecionado) {
      const desconto = descontosValor.find((d2) => d2.id === descontoValorSelecionado) || null;
      setDescontoValorObj(desconto);
    } else {
      setDescontoValorObj(null);
    }
  }, [descontoValorSelecionado, descontosValor]);
  reactExports.useEffect(() => {
    if (novaFormaPagamentoId) {
      const formaPagamento = formasPagamento.find((f2) => f2.id === novaFormaPagamentoId) || null;
      setFormaPagamentoSelecionadaObj(formaPagamento);
      setNovaFormaPagamentoParcelas(1);
    } else {
      setFormaPagamentoSelecionadaObj(null);
    }
  }, [novaFormaPagamentoId, formasPagamento]);
  reactExports.useEffect(() => {
    if (formaPagamentoSelecionada) {
      const formaPagamento = formasPagamento.find((f2) => f2.id === formaPagamentoSelecionada) || null;
      if ((formaPagamento == null ? void 0 : formaPagamento.tipo) === "cartao_credito") {
        setNovaFormaPagamentoParcelas(1);
      }
    }
  }, [formaPagamentoSelecionada, formasPagamento]);
  reactExports.useEffect(() => {
    const subtotal = itensPedido.reduce((acc, item) => acc + item.valorTotal, 0);
    let novoValorDesconto = 0;
    let novoValorAcrescimo = 0;
    if (descontoPrazoObj) {
      const valor = subtotal * (descontoPrazoObj.percentual / 100);
      if (descontoPrazoObj.tipo === "desconto") {
        novoValorDesconto += valor;
      } else {
        novoValorAcrescimo += valor;
      }
    }
    if (descontoValorObj && subtotal >= descontoValorObj.valor_minimo) {
      const valor = subtotal * (descontoValorObj.percentual / 100);
      if (descontoValorObj.tipo === "desconto") {
        novoValorDesconto += valor;
      } else {
        novoValorAcrescimo += valor;
      }
    }
    setValorDesconto(novoValorDesconto);
    setValorAcrescimo(novoValorAcrescimo);
  }, [itensPedido, descontoPrazoObj, descontoValorObj]);
  const loadEmpresas = async () => {
    try {
      setIsLoading(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: empresasData } = await supabase.from("empresas").select("id, nome").order("nome");
      if (empresasData) {
        setEmpresas(empresasData);
      }
    } catch (error) {
      console.error("Erro ao carregar empresas:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const loadProdutos = async (empresaId) => {
    try {
      setIsLoading(true);
      const { data: produtosData } = await supabase.from("produtos").select(`
          id,
          nome,
          preco,
          codigo,
          descricao,
          promocao,
          tipo_desconto,
          valor_desconto,
          desconto_quantidade,
          quantidade_minima,
          tipo_desconto_quantidade,
          valor_desconto_quantidade,
          percentual_desconto_quantidade,
          unidade_medida_id,
          unidade_medida:unidade_medida_id (
            id,
            sigla,
            nome
          )
        `).eq("empresa_id", empresaId).eq("ativo", true).eq("deletado", false).order("nome");
      if (produtosData) {
        setProdutos(produtosData);
      }
    } catch (error) {
      console.error("Erro ao carregar produtos:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const handleAddItem = async () => {
    if (!produtoSelecionadoObj || quantidade <= 0) return;
    try {
      const temEstoqueSuficiente = await verificarEstoqueSuficiente(produtoSelecionadoObj.id, quantidade);
      if (!temEstoqueSuficiente) {
        return;
      }
      const { data: configData, error: configError } = await supabase.from("pedidos_config").select("agrupar_itens").eq("empresa_id", empresaSelecionada).single();
      const { valorUnitario, temDesconto, valorOriginal, tipoDesconto } = calcularPrecoUnitario(produtoSelecionadoObj, quantidade);
      const valorTotal2 = valorUnitario * quantidade;
      const agruparItens = (configData == null ? void 0 : configData.agrupar_itens) === true;
      const itemExistente = agruparItens ? itensPedido.find(
        (item) => item.produto.id === produtoSelecionadoObj.id && item.observacao === observacao
      ) : null;
      if (temDesconto && !itemExistente) {
        if (tipoDesconto === "quantidade") {
          const descontoInfo = produtoSelecionadoObj.tipo_desconto_quantidade === "percentual" ? `${produtoSelecionadoObj.percentual_desconto_quantidade}%` : formatarPreco2(produtoSelecionadoObj.valor_desconto_quantidade || 0);
          showMessage("info", `Desconto por quantidade aplicado! (${descontoInfo}) - De ${formatarPreco2(valorOriginal)} para ${formatarPreco2(valorUnitario)} por unidade.`);
        } else if (tipoDesconto === "promocao") {
          showMessage("info", `Produto em promoção! - De ${formatarPreco2(valorOriginal)} para ${formatarPreco2(valorUnitario)} por unidade.`);
        }
      }
      if (agruparItens && itemExistente) {
        setItensPedido(itensPedido.map((item) => {
          if (item.id === itemExistente.id) {
            const novaQuantidade = item.quantidade + quantidade;
            const { valorUnitario: novoValorUnitario, temDesconto: novoTemDesconto, valorOriginal: novoValorOriginal, tipoDesconto: novoTipoDesconto } = calcularPrecoUnitario(item.produto, novaQuantidade);
            const novoValorTotal = novoValorUnitario * novaQuantidade;
            showMessage("info", `Quantidade do item "${item.produto.nome}" atualizada para ${novaQuantidade}`);
            return {
              ...item,
              quantidade: novaQuantidade,
              valorUnitario: novoValorUnitario,
              valorTotal: novoValorTotal,
              valorOriginal: novoValorOriginal,
              temDesconto: novoTemDesconto,
              tipoDesconto: novoTipoDesconto
            };
          }
          return item;
        }));
      } else {
        const novoItem = {
          id: Date.now().toString(),
          // ID temporário
          produto: produtoSelecionadoObj,
          quantidade,
          observacao,
          valorUnitario,
          valorTotal: valorTotal2,
          valorOriginal,
          temDesconto,
          tipoDesconto
        };
        setItensPedido([...itensPedido, novoItem]);
      }
      setProdutoSelecionado("");
      setProdutoSelecionadoObj(null);
      setQuantidade(1);
      setQuantidadeVazia(false);
      setObservacao("");
    } catch (error) {
      console.error("Erro ao adicionar item:", error);
      showMessage("error", "Erro ao adicionar item ao pedido");
    }
  };
  const handleRemoveItem = (id22) => {
    setItensPedido(itensPedido.filter((item) => item.id !== id22));
  };
  const handleUpdateQuantidade = async (id22, novaQuantidade) => {
    if (novaQuantidade <= 0) return;
    try {
      const itemAtual = itensPedido.find((item) => item.id === id22);
      if (!itemAtual) return;
      if (novaQuantidade > itemAtual.quantidade) {
        const temEstoqueSuficiente = await verificarEstoqueSuficiente(
          itemAtual.produto.id,
          novaQuantidade,
          itemAtual.quantidade
        );
        if (!temEstoqueSuficiente) {
          return;
        }
      }
      setItensPedido(itensPedido.map((item) => {
        if (item.id === id22) {
          const { valorUnitario, temDesconto, valorOriginal, tipoDesconto } = calcularPrecoUnitario(item.produto, novaQuantidade);
          const valorTotal2 = valorUnitario * novaQuantidade;
          const descontoMudou = item.temDesconto !== temDesconto || item.valorUnitario !== valorUnitario || item.tipoDesconto !== tipoDesconto;
          if (descontoMudou) {
            if (temDesconto) {
              if (tipoDesconto === "quantidade") {
                const descontoInfo = item.produto.tipo_desconto_quantidade === "percentual" ? `${item.produto.percentual_desconto_quantidade}%` : formatarPreco2(item.produto.valor_desconto_quantidade || 0);
                showMessage("info", `Desconto por quantidade aplicado! (${descontoInfo}) - De ${formatarPreco2(valorOriginal)} para ${formatarPreco2(valorUnitario)} por unidade.`);
              } else if (tipoDesconto === "promocao") {
                showMessage("info", `Produto em promoção! - De ${formatarPreco2(valorOriginal)} para ${formatarPreco2(valorUnitario)} por unidade.`);
              }
            } else if (item.temDesconto) {
              showMessage("info", `Desconto removido. Preço unitário: ${formatarPreco2(valorUnitario)}`);
            }
          }
          return {
            ...item,
            quantidade: novaQuantidade,
            valorUnitario,
            valorTotal: valorTotal2,
            valorOriginal,
            temDesconto,
            tipoDesconto
          };
        }
        return item;
      }));
    } catch (error) {
      console.error("Erro ao atualizar quantidade:", error);
      showMessage("error", "Erro ao atualizar quantidade do item");
    }
  };
  const formatarTelefone2 = (telefone) => {
    const numeroLimpo = telefone.replace(/\D/g, "");
    if (numeroLimpo.length <= 10) {
      return numeroLimpo.replace(/(\d{2})(\d{4})(\d{4})/, "($1) $2-$3");
    } else {
      return numeroLimpo.replace(/(\d{2})(\d{5})(\d{4})/, "($1) $2-$3");
    }
  };
  const formatarPreco2 = (valor) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(valor);
  };
  const adicionarFormaPagamentoParcial = () => {
    if (!novaFormaPagamentoId || !novaFormaPagamentoValor) {
      showMessage("error", "Selecione uma forma de pagamento e informe o valor");
      return;
    }
    const valor = parseFloat(novaFormaPagamentoValor.replace(/[^\d,.-]/g, "").replace(",", "."));
    if (isNaN(valor) || valor <= 0) {
      showMessage("error", "Informe um valor válido");
      return;
    }
    const valorTotalParciais = formasPagamentoParciais.reduce((acc, item) => acc + item.valor, 0) + valor;
    if (valorTotalParciais > valorTotal) {
      showMessage("error", `O valor total das formas de pagamento (${formatarPreco2(valorTotalParciais)}) não pode exceder o valor total do pedido (${formatarPreco2(valorTotal)})`);
      return;
    }
    const formaPagamento = formasPagamento.find((f2) => f2.id === novaFormaPagamentoId);
    if (!formaPagamento) {
      showMessage("error", "Forma de pagamento não encontrada");
      return;
    }
    const novaFormaParcial = {
      id: Date.now().toString(),
      // ID temporário
      forma_pagamento_id: formaPagamento.id,
      forma_pagamento_nome: formaPagamento.nome,
      valor,
      // Incluir parcelas apenas se for cartão de crédito
      ...formaPagamento.tipo === "cartao_credito" ? { parcelas: novaFormaPagamentoParcelas } : {}
    };
    setFormasPagamentoParciais([...formasPagamentoParciais, novaFormaParcial]);
    setNovaFormaPagamentoId("");
    setNovaFormaPagamentoValor("");
    setNovaFormaPagamentoParcelas(1);
  };
  const removerFormaPagamentoParcial = (id22) => {
    setFormasPagamentoParciais(formasPagamentoParciais.filter((item) => item.id !== id22));
  };
  const calcularValorRestante = () => {
    const valorTotalParciais = formasPagamentoParciais.reduce((acc, item) => acc + item.valor, 0);
    return valorTotal - valorTotalParciais;
  };
  const calcularPrecoUnitario = (produto, quantidade2) => {
    let valorUnitario = produto.preco;
    let temDesconto = false;
    let tipoDesconto = "";
    const valorOriginal = produto.preco;
    if (produto.promocao && produto.valor_desconto) {
      if (produto.tipo_desconto === "percentual") {
        valorUnitario = produto.preco * (1 - produto.valor_desconto / 100);
      } else {
        valorUnitario = produto.preco - produto.valor_desconto;
      }
      temDesconto = true;
      tipoDesconto = "promocao";
    }
    if (produto.desconto_quantidade && produto.quantidade_minima && (produto.tipo_desconto_quantidade === "percentual" && produto.percentual_desconto_quantidade || produto.tipo_desconto_quantidade === "valor" && produto.valor_desconto_quantidade) && quantidade2 >= produto.quantidade_minima) {
      let valorComDescontoQuantidade = produto.preco;
      if (produto.tipo_desconto_quantidade === "percentual") {
        valorComDescontoQuantidade = produto.preco * (1 - produto.percentual_desconto_quantidade / 100);
      } else {
        valorComDescontoQuantidade = produto.preco - produto.valor_desconto_quantidade;
      }
      if (!temDesconto || valorComDescontoQuantidade < valorUnitario) {
        valorUnitario = valorComDescontoQuantidade;
        temDesconto = true;
        tipoDesconto = "quantidade";
      }
    }
    return { valorUnitario, temDesconto, valorOriginal, tipoDesconto };
  };
  const formatarDocumento2 = (documento, tipo) => {
    if (!documento) return "";
    if (tipo === "CNPJ") {
      return documento.replace(/^(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})$/, "$1.$2.$3/$4-$5");
    } else if (tipo === "CPF") {
      return documento.replace(/^(\d{3})(\d{3})(\d{3})(\d{2})$/, "$1.$2.$3-$4");
    }
    return documento;
  };
  const formatarCep = (cep) => {
    if (!cep) return "";
    const cepLimpo = cep.replace(/\D/g, "");
    return cepLimpo.replace(/^(\d{5})(\d{3})$/, "$1-$2");
  };
  const formatarValorMonetario = (valor) => {
    let valorLimpo = valor.replace(/\D/g, "");
    const valorNumerico = parseInt(valorLimpo) / 100;
    return valorNumerico.toLocaleString("pt-BR", {
      style: "currency",
      currency: "BRL"
    });
  };
  const handleValorChange = (e) => {
    const valor = e.target.value;
    if (!valor) {
      setNovaFormaPagamentoValor("");
      return;
    }
    const valorLimpo = valor.replace(/\D/g, "");
    if (!valorLimpo) {
      setNovaFormaPagamentoValor("");
      return;
    }
    setNovaFormaPagamentoValor(formatarValorMonetario(valorLimpo));
  };
  const loadFormasPagamentoGeral = async () => {
    try {
      console.log("Iniciando carregamento de formas de pagamento...");
      const { data, error } = await supabase.from("forma_pagamento_opcoes").select("id, nome, tipo, max_parcelas").eq("ativo", true).order("nome");
      if (error) {
        console.error("Erro ao carregar formas de pagamento:", error);
        showMessage("error", "Erro ao carregar formas de pagamento");
        return;
      }
      if (data && data.length > 0) {
        console.log("Formas de pagamento carregadas com sucesso:", data);
        setFormasPagamento(data);
      } else {
        console.warn("Nenhuma forma de pagamento encontrada");
        showMessage("warning", "Nenhuma forma de pagamento encontrada");
      }
    } catch (error) {
      console.error("Erro ao carregar formas de pagamento:", error);
      showMessage("error", "Erro ao carregar formas de pagamento");
    }
  };
  const verificarEstoqueSuficiente = async (produtoId, quantidade2, quantidadeAtual = 0) => {
    try {
      const { data: configData, error: configError } = await supabase.from("tipo_controle_estoque_config").select("tipo_controle, bloqueia_sem_estoque").eq("empresa_id", empresaSelecionada).single();
      if (configError && configError.code !== "PGRST116") {
        console.error("Erro ao verificar configuração de estoque:", configError);
        showMessage("error", "Erro ao verificar configuração de estoque");
        return true;
      }
      if (!(configData == null ? void 0 : configData.bloqueia_sem_estoque)) {
        return true;
      }
      if (configData.tipo_controle !== "pedidos") {
        return true;
      }
      const { data: movimentosData, error: movimentosError } = await supabase.from("produto_estoque").select("tipo_movimento, quantidade").eq("produto_id", produtoId).eq("empresa_id", empresaSelecionada);
      if (movimentosError) {
        console.error("Erro ao verificar estoque do produto:", movimentosError);
        showMessage("error", "Erro ao verificar estoque do produto");
        return true;
      }
      let saldoTotal = 0;
      if (movimentosData) {
        movimentosData.forEach((movimento) => {
          if (movimento.tipo_movimento === "entrada") {
            saldoTotal += parseFloat(movimento.quantidade);
          } else {
            saldoTotal -= parseFloat(movimento.quantidade);
          }
        });
      }
      const { data: pedidosData, error: pedidosError } = await supabase.from("pedidos_itens").select(`
          quantidade,
          pedido:pedido_id (
            status
          )
        `).eq("produto_id", produtoId);
      if (pedidosError) {
        console.error("Erro ao verificar pedidos do produto:", pedidosError);
        showMessage("error", "Erro ao verificar pedidos do produto");
        return true;
      }
      let quantidadeNaoFaturada = 0;
      if (pedidosData && pedidosData.length > 0) {
        pedidosData.forEach((item) => {
          if (item.pedido && item.pedido.status !== "faturado") {
            quantidadeNaoFaturada += parseFloat(item.quantidade);
          }
        });
      }
      quantidadeNaoFaturada -= quantidadeAtual;
      const estoqueDisponivel = saldoTotal - quantidadeNaoFaturada;
      if (estoqueDisponivel < quantidade2) {
        if (configData == null ? void 0 : configData.bloqueia_sem_estoque) {
          showMessage("error", `Estoque insuficiente. Disponível: ${estoqueDisponivel.toFixed(2)}`);
          return false;
        } else {
          showMessage("warning", `Estoque insuficiente (${estoqueDisponivel.toFixed(2)}), mas a operação será permitida. O estoque ficará negativo.`);
          return true;
        }
      }
      return true;
    } catch (error) {
      console.error("Erro ao verificar estoque:", error);
      showMessage("error", "Erro ao verificar estoque do produto");
      return true;
    }
  };
  const handleProdutoSelect = (produto) => {
    setProdutoSelecionado(produto.id);
    setProdutoSelecionadoObj(produto);
  };
  const loadPedido = async (pedidoId) => {
    try {
      setIsLoading(true);
      const { data: pedidoData, error: pedidoError } = await supabase.from("pedidos").select(`
          *,
          itens:pedidos_itens(
            *,
            produto:produtos(*)
          )
        `).eq("id", pedidoId).single();
      if (pedidoError) {
        console.error("Erro ao carregar pedido:", pedidoError);
        showMessage("error", "Erro ao carregar pedido");
        navigate("/user/pedidos");
        return;
      }
      if (!pedidoData) {
        showMessage("error", "Pedido não encontrado");
        navigate("/user/pedidos");
        return;
      }
      console.log("Pedido carregado:", pedidoData);
      setPedido(pedidoData);
      setEmpresaSelecionada(pedidoData.empresa_id);
      if (pedidoData.cliente_id) {
        setClienteId(pedidoData.cliente_id);
        const { data: clienteData2, error: clienteError } = await supabase.from("clientes").select("*").eq("id", pedidoData.cliente_id).single();
        if (!clienteError && clienteData2) {
          setClienteNome(clienteData2.nome || "");
          setClienteTelefone(clienteData2.telefone ? formatarTelefone2(clienteData2.telefone) : "");
          setClienteData({
            documento: clienteData2.documento,
            tipo_documento: clienteData2.tipo_documento,
            endereco: clienteData2.endereco,
            numero: clienteData2.numero,
            bairro: clienteData2.bairro,
            cidade: clienteData2.cidade,
            estado: clienteData2.estado,
            cep: clienteData2.cep,
            complemento: clienteData2.complemento
          });
        } else {
          console.error("Erro ao carregar dados do cliente:", clienteError);
        }
      }
      setDescontoPrazoSelecionado(pedidoData.desconto_prazo_id || null);
      setDescontoValorSelecionado(pedidoData.desconto_valor_id || null);
      if (pedidoData.formas_pagamento && Array.isArray(pedidoData.formas_pagamento) && pedidoData.formas_pagamento.length > 0) {
        setFormasPagamentoParciais(pedidoData.formas_pagamento);
        setTipoPagamento("parcial");
      } else if (pedidoData.forma_pagamento_id) {
        setFormaPagamentoSelecionada(pedidoData.forma_pagamento_id);
        setTipoPagamento("unico");
      }
      console.log("Itens do pedido:", pedidoData.itens);
      if (pedidoData.itens && pedidoData.itens.length > 0) {
        const itens = pedidoData.itens.map((item) => ({
          id: item.id,
          produto: item.produto,
          quantidade: item.quantidade,
          observacao: item.observacao || "",
          valorUnitario: item.valor_unitario,
          valorTotal: item.valor_total,
          valorOriginal: item.produto.preco,
          temDesconto: item.valor_unitario < item.produto.preco,
          tipoDesconto: ""
        }));
        setItensPedido(itens);
      }
      await loadProdutos(pedidoData.empresa_id);
      if (pedidoData.cliente_id) {
        await loadFormasPagamento(pedidoData.cliente_id, pedidoData.empresa_id);
      }
    } catch (error) {
      console.error("Erro ao carregar pedido:", error);
      showMessage("error", "Erro ao carregar pedido");
      navigate("/user/pedidos");
    } finally {
      setIsLoading(false);
    }
  };
  const loadFormasPagamento = async (clienteId2, empresaId) => {
    try {
      console.log("Carregando formas de pagamento para cliente:", clienteId2, "empresa:", empresaId);
      setIsLoading(true);
      const { data: descontosPrazoData, error: descontosPrazoError } = await supabase.from("cliente_descontos_prazo").select("id, prazo_dias, percentual, tipo").eq("cliente_id", clienteId2).eq("empresa_id", empresaId).order("prazo_dias");
      if (descontosPrazoError) {
        console.error("Erro ao carregar descontos por prazo:", descontosPrazoError);
      } else if (descontosPrazoData) {
        setDescontosPrazo(descontosPrazoData);
        setDescontoPrazoSelecionado(null);
      }
      const { data: descontosValorData, error: descontosValorError } = await supabase.from("cliente_descontos_valor").select("id, valor_minimo, percentual, tipo").eq("cliente_id", clienteId2).eq("empresa_id", empresaId).order("valor_minimo");
      if (descontosValorError) {
        console.error("Erro ao carregar descontos por valor:", descontosValorError);
      } else if (descontosValorData) {
        setDescontosValor(descontosValorData);
        setDescontoValorSelecionado(null);
      }
    } catch (error) {
      console.error("Erro ao carregar descontos:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const handleSubmit = async (e) => {
    var _a3, _b3;
    e.preventDefault();
    const target = e.target;
    const submitButton = target.querySelector('button[type="submit"]');
    if (document.activeElement !== submitButton && e.type === "submit") {
      return;
    }
    if (!clienteNome || !clienteTelefone || itensPedido.length === 0) {
      showMessage("error", "Preencha todos os campos obrigatórios e adicione pelo menos um item ao pedido");
      return;
    }
    if (tipoPagamento === "unico" && !formaPagamentoSelecionada) {
      showMessage("error", "Selecione uma forma de pagamento");
      return;
    }
    if (tipoPagamento === "parcial") {
      if (formasPagamentoParciais.length === 0) {
        showMessage("error", "Adicione pelo menos uma forma de pagamento");
        return;
      }
      const valorTotalParciais = formasPagamentoParciais.reduce((acc, item) => acc + item.valor, 0);
      const valorRestante = valorTotal - valorTotalParciais;
      if (valorRestante > 0.01) {
        showMessage("error", `Ainda falta ${formatarPreco2(valorRestante)} para completar o valor total do pedido`);
        return;
      }
    }
    try {
      setIsSaving(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const subtotal = itensPedido.reduce((acc, item) => acc + item.valorTotal, 0);
      if (isEditMode && id2) {
        const { error: pedidoError } = await supabase.from("pedidos").update({
          cliente_id: clienteId || null,
          valor_subtotal: subtotal,
          valor_desconto: valorDesconto,
          valor_acrescimo: valorAcrescimo,
          valor_total: valorTotal,
          desconto_prazo_id: descontoPrazoSelecionado,
          desconto_valor_id: descontoValorSelecionado,
          forma_pagamento_id: tipoPagamento === "unico" ? formaPagamentoSelecionada : null,
          formas_pagamento: tipoPagamento === "parcial" ? formasPagamentoParciais : null,
          parcelas: tipoPagamento === "unico" && formaPagamentoSelecionada && ((_a3 = formasPagamento.find((f2) => f2.id === formaPagamentoSelecionada)) == null ? void 0 : _a3.tipo) === "cartao_credito" ? novaFormaPagamentoParcelas : null,
          status: "pendente"
          // Voltar para pendente quando editado
        }).eq("id", id2);
        if (pedidoError) throw pedidoError;
        const { error: deleteError } = await supabase.from("pedidos_itens").delete().eq("pedido_id", id2);
        if (deleteError) throw deleteError;
        const itensPedidoData = itensPedido.map((item) => ({
          pedido_id: id2,
          produto_id: item.produto.id,
          quantidade: item.quantidade,
          valor_unitario: item.valorUnitario,
          valor_total: item.valorTotal,
          observacao: item.observacao
        }));
        const { error: itensError } = await supabase.from("pedidos_itens").insert(itensPedidoData);
        if (itensError) throw itensError;
        showMessage("success", "Pedido atualizado com sucesso!");
        dispatchPedidoAtualizado({
          pedidoId: id2,
          numero: (pedido == null ? void 0 : pedido.numero) || "",
          status: "pendente",
          empresaId: empresaSelecionada,
          valorTotal,
          clienteNome
        });
      } else {
        const agora = /* @__PURE__ */ new Date();
        const numeroPedido = `${agora.getFullYear()}${(agora.getMonth() + 1).toString().padStart(2, "0")}${agora.getDate().toString().padStart(2, "0")}${agora.getHours().toString().padStart(2, "0")}${agora.getMinutes().toString().padStart(2, "0")}${agora.getSeconds().toString().padStart(2, "0")}`;
        const { data: pedido2, error: pedidoError } = await supabase.from("pedidos").insert({
          empresa_id: empresaSelecionada,
          usuario_id: userData.user.id,
          cliente_id: clienteId || null,
          // Incluir ID do cliente se disponível
          valor_subtotal: subtotal,
          valor_desconto: valorDesconto,
          valor_acrescimo: valorAcrescimo,
          valor_total: valorTotal,
          status: "pendente",
          numero: numeroPedido,
          desconto_prazo_id: descontoPrazoSelecionado,
          desconto_valor_id: descontoValorSelecionado,
          forma_pagamento_id: tipoPagamento === "unico" ? formaPagamentoSelecionada : null,
          formas_pagamento: tipoPagamento === "parcial" ? formasPagamentoParciais : null,
          parcelas: tipoPagamento === "unico" && formaPagamentoSelecionada && ((_b3 = formasPagamento.find((f2) => f2.id === formaPagamentoSelecionada)) == null ? void 0 : _b3.tipo) === "cartao_credito" ? novaFormaPagamentoParcelas : null
        }).select().single();
        if (pedidoError) throw pedidoError;
        const itensPedidoData = itensPedido.map((item) => ({
          pedido_id: pedido2.id,
          produto_id: item.produto.id,
          quantidade: item.quantidade,
          valor_unitario: item.valorUnitario,
          valor_total: item.valorTotal,
          observacao: item.observacao
        }));
        const { error: itensError } = await supabase.from("pedidos_itens").insert(itensPedidoData);
        if (itensError) throw itensError;
        const tipoControle = await verificarTipoControleEstoque(supabase, empresaSelecionada);
        if (tipoControle === "pedidos") {
          const resultado = await atualizarEstoquePorPedido(
            supabase,
            pedido2.id,
            empresaSelecionada,
            userData.user.id,
            "saida",
            "pedido"
          );
          if (!resultado.success) {
            console.warn("Aviso ao atualizar estoque:", resultado.message);
            showMessage("warning", resultado.message);
          }
        }
        showMessage("success", "Pedido criado com sucesso!");
        dispatchPedidoCriado({
          pedidoId: pedido2.id,
          numero: numeroPedido,
          status: "pendente",
          empresaId: empresaSelecionada,
          valorTotal,
          clienteNome
        });
      }
      if (isWebVersion) {
        navigate("/dashboard/pedidos");
      } else {
        navigate("/user/pedidos");
      }
    } catch (error) {
      console.error(`Erro ao ${isEditMode ? "atualizar" : "criar"} pedido:`, error);
      showMessage("error", `Erro ao ${isEditMode ? "atualizar" : "criar"} pedido: ${error.message}`);
    } finally {
      setIsSaving(false);
    }
  };
  const isWebVersion = window.location.pathname.startsWith("/dashboard");
  const isDesktop = isDesktopScreen();
  const shouldCenterContent = isWebVersion && isDesktop;
  const handleGoBack = () => {
    if (isWebVersion) {
      navigate("/dashboard/pedidos");
    } else {
      navigate("/user/pedidos");
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `${shouldCenterContent ? "max-w-4xl mx-auto" : ""} space-y-3 pb-20`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          onClick: handleGoBack,
          className: "p-1.5 rounded-lg bg-gray-800 text-gray-400 hover:text-white transition-colors",
          type: "button",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowLeft, { size: 18 })
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-lg font-semibold text-white", children: isEditMode ? "Editar Pedido" : "Novo Pedido" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, className: "space-y-3", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-3 space-y-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-base font-medium text-white mb-1", children: "Dados do Pedido" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("input", { type: "hidden", value: empresaSelecionada }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-1.5", children: [
            "Cliente ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            ClienteDropdown,
            {
              value: clienteId,
              onChange: (id22, nome, telefone, data) => {
                setClienteId(id22);
                setClienteNome(nome);
                setClienteTelefone(formatarTelefone2(telefone));
                setClienteData(data);
                if (id22 && empresaSelecionada) {
                  loadFormasPagamento(id22, empresaSelecionada);
                }
              },
              empresaId: empresaSelecionada,
              placeholder: "Selecione ou busque um cliente",
              required: true
            }
          )
        ] }),
        clienteId && clienteTelefone && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-3 p-3 bg-gray-800/30 rounded-lg border border-gray-700", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-sm font-medium text-gray-300 mb-2", children: "Dados do cliente" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Phone, { size: 16, className: "text-gray-500 mt-0.5" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-300", children: clienteTelefone })
            ] }),
            (clienteData == null ? void 0 : clienteData.documento) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { size: 16, className: "text-gray-500 mt-0.5" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-sm text-gray-300", children: [
                clienteData.tipo_documento,
                ": ",
                formatarDocumento2(clienteData.documento, clienteData.tipo_documento)
              ] })
            ] }),
            (clienteData == null ? void 0 : clienteData.endereco) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(MapPin, { size: 16, className: "text-gray-500 mt-0.5" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-gray-300", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
                  clienteData.endereco,
                  ", ",
                  clienteData.numero || "S/N",
                  clienteData.complemento ? ` - ${clienteData.complemento}` : ""
                ] }),
                clienteData.bairro && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: clienteData.bairro }),
                (clienteData.cidade || clienteData.estado) && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
                  clienteData.cidade,
                  clienteData.cidade && clienteData.estado ? " - " : "",
                  clienteData.estado,
                  clienteData.cep ? ` - CEP: ${formatarCep(clienteData.cep)}` : ""
                ] })
              ] })
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-3 space-y-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-base font-medium text-white mb-1", children: "Itens do Pedido" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1.5", children: "Produto" }),
          produtoSelecionadoObj ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 border border-gray-700 rounded-lg p-3 flex justify-between items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: produtoSelecionadoObj.nome }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400", children: [
                produtoSelecionadoObj.codigo,
                " - ",
                formatarPreco2(produtoSelecionadoObj.preco)
              ] }),
              produtoSelecionadoObj.desconto_quantidade && produtoSelecionadoObj.quantidade_minima && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-green-400 mt-1", children: [
                "Desconto para ",
                produtoSelecionadoObj.quantidade_minima,
                "+ unidades:",
                produtoSelecionadoObj.tipo_desconto_quantidade === "percentual" ? ` ${produtoSelecionadoObj.percentual_desconto_quantidade}%` : ` ${formatarPreco2(produtoSelecionadoObj.valor_desconto_quantidade || 0)}`
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                type: "button",
                onClick: (e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  setIsProdutoModalOpen(true);
                },
                className: "p-2 rounded-lg bg-gray-700 text-gray-300 hover:bg-gray-600 hover:text-white",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18 })
              }
            )
          ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              type: "button",
              onClick: (e) => {
                e.preventDefault();
                e.stopPropagation();
                setIsProdutoModalOpen(true);
              },
              className: "w-full flex items-center justify-center gap-2 bg-gray-800/50 border border-gray-700 rounded-lg py-3 px-4 text-gray-300 hover:bg-gray-700 hover:text-white",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Buscar produto" })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            ProdutoSeletorModal,
            {
              isOpen: isProdutoModalOpen,
              onClose: () => {
                setIsProdutoModalOpen(false);
              },
              onSelect: handleProdutoSelect,
              empresaId: empresaSelecionada
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1.5", children: "Quantidade" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "text",
                value: quantidade === 0 && quantidadeVazia ? "" : quantidade,
                onChange: (e) => {
                  if (e.target.value === "") {
                    setQuantidadeVazia(true);
                    setQuantidade(0);
                    return;
                  }
                  setQuantidadeVazia(false);
                  const valorLimpo = e.target.value.replace(/[^\d]/g, "");
                  if (isNaN(parseInt(valorLimpo))) {
                    return;
                  }
                  const valor = parseInt(valorLimpo);
                  setQuantidade(valor > 0 ? valor : 0);
                },
                onBlur: () => {
                  if (quantidadeVazia || quantidade === 0) {
                    setQuantidadeVazia(false);
                    setQuantidade(1);
                  }
                },
                className: `w-full bg-gray-800/50 border ${(produtoSelecionadoObj == null ? void 0 : produtoSelecionadoObj.desconto_quantidade) && (produtoSelecionadoObj == null ? void 0 : produtoSelecionadoObj.quantidade_minima) && quantidade >= produtoSelecionadoObj.quantidade_minima ? "border-green-500" : "border-gray-700"} rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20`,
                placeholder: "1"
              }
            ),
            (produtoSelecionadoObj == null ? void 0 : produtoSelecionadoObj.desconto_quantidade) && (produtoSelecionadoObj == null ? void 0 : produtoSelecionadoObj.quantidade_minima) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `absolute right-3 top-1/2 transform -translate-y-1/2 text-xs ${quantidade >= produtoSelecionadoObj.quantidade_minima ? "text-green-400" : "text-gray-500"}`, children: quantidade >= produtoSelecionadoObj.quantidade_minima ? "Desconto aplicado!" : `Mín. ${produtoSelecionadoObj.quantidade_minima} para desconto` })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-1.5", children: "Observação" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "textarea",
            {
              value: observacao,
              onChange: (e) => setObservacao(e.target.value),
              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
              rows: 2,
              placeholder: "Observações sobre o item (opcional)"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            type: "button",
            onClick: handleAddItem,
            disabled: !produtoSelecionadoObj,
            className: "w-full flex items-center justify-center gap-2 bg-primary-500 hover:bg-primary-600 text-white py-2.5 px-4 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 16 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Adicionar Item" })
            ]
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-base font-medium text-white mb-2", children: "Itens Adicionados" }),
        itensPedido.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center py-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Nenhum item adicionado ao pedido" }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2 max-h-64 overflow-y-auto custom-scrollbar pr-2", children: itensPedido.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          motion.div,
          {
            initial: { opacity: 0, y: 10 },
            animate: { opacity: 1, y: 0 },
            className: "p-2.5 bg-gray-800/50 rounded-lg",
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-start", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: item.produto.nome }),
                item.temDesconto && item.valorOriginal ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400 line-through", children: formatarPreco2(item.valorOriginal) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 ml-2", children: formatarPreco2(item.valorUnitario) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-gray-400", children: [
                      " x ",
                      item.quantidade,
                      " = ",
                      formatarPreco2(item.valorTotal)
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-green-400", children: item.tipoDesconto === "quantidade" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    "Desconto por quantidade:",
                    item.produto.tipo_desconto_quantidade === "percentual" ? ` ${item.produto.percentual_desconto_quantidade}%` : ` ${formatarPreco2(item.produto.valor_desconto_quantidade || 0)}`
                  ] }) : "Produto em promoção" })
                ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400", children: [
                  formatarPreco2(item.valorUnitario),
                  " x ",
                  item.quantidade,
                  " = ",
                  formatarPreco2(item.valorTotal)
                ] }),
                item.observacao && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-gray-500 mt-1", children: [
                  "Obs: ",
                  item.observacao
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center bg-gray-700 rounded-lg", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      type: "button",
                      onClick: () => handleUpdateQuantidade(item.id, item.quantidade - 1),
                      className: "p-1 text-gray-400 hover:text-white",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Minus, { size: 16 })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-2 text-white", children: item.quantidade }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      type: "button",
                      onClick: () => handleUpdateQuantidade(item.id, item.quantidade + 1),
                      className: "p-1 text-gray-400 hover:text-white",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 16 })
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => handleRemoveItem(item.id),
                    className: "p-2 ml-6 rounded-lg bg-red-500/10 text-red-400 hover:bg-red-500/20 hover:text-red-300",
                    title: "Remover item",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 18 })
                  }
                )
              ] })
            ] })
          },
          item.id
        )) })
      ] }),
      itensPedido.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 p-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 rounded-lg p-2.5", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-base font-medium mb-1.5", children: "Resumo do Pedido" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1.5", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Quantidade de itens:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: itensPedido.reduce((acc, item) => acc + item.quantidade, 0) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Subtotal:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: formatarPreco2(itensPedido.reduce((acc, item) => acc + item.valorTotal, 0)) })
          ] }),
          valorDesconto > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-green-400", children: "Desconto:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-green-400", children: [
              "-",
              formatarPreco2(valorDesconto)
            ] })
          ] }),
          valorAcrescimo > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-400", children: "Acréscimo:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-red-400", children: [
              "+",
              formatarPreco2(valorAcrescimo)
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "border-t border-gray-700 my-2" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium", children: "Total:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xl font-semibold text-primary-400", children: formatarPreco2(valorTotal) })
          ] })
        ] })
      ] }) }) }),
      clienteId && clienteData && itensPedido.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 p-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/50 rounded-lg p-2.5", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-base font-medium mb-1.5", children: "Opções de Faturamento" }),
        descontosPrazo.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-sm text-gray-400 mb-2", children: "Prazo de Faturamento" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-2 gap-2", children: descontosPrazo.map((desconto) => {
            const isSelected = descontoPrazoSelecionado === desconto.id;
            const isDesconto = desconto.tipo === "desconto";
            let bgColor = isSelected ? isDesconto ? "bg-green-500/20" : "bg-red-500/20" : "bg-gray-700/50";
            let hoverColor = isSelected ? isDesconto ? "hover:bg-green-500/30" : "hover:bg-red-500/30" : "hover:bg-gray-700/70";
            let textColor = isSelected ? isDesconto ? "text-green-400" : "text-red-400" : "text-gray-300";
            let Icon = isDesconto ? DollarSign : Calendar;
            return /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "button",
              {
                type: "button",
                onClick: () => {
                  if (isSelected) {
                    setDescontoPrazoSelecionado(null);
                  } else {
                    setDescontoPrazoSelecionado(desconto.id);
                  }
                },
                className: `flex items-center justify-between gap-2 ${bgColor} ${hoverColor} ${textColor} py-2 px-3 rounded-lg transition-colors text-sm`,
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { size: 16 }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                      desconto.prazo_dias,
                      " dias"
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: isDesconto ? "text-green-400" : "text-red-400", children: [
                    isDesconto ? "-" : "+",
                    desconto.percentual,
                    "%"
                  ] }),
                  isSelected && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "ml-1 bg-primary-500 text-white rounded-full w-4 h-4 flex items-center justify-center text-xs", children: "✓" })
                ]
              },
              desconto.id
            );
          }) })
        ] }),
        descontosValor.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-sm text-gray-400 mb-2", children: "Valor Mínimo" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-2 gap-2", children: descontosValor.map((desconto) => {
            const isSelected = descontoValorSelecionado === desconto.id;
            const isDesconto = desconto.tipo === "desconto";
            let bgColor = isSelected ? isDesconto ? "bg-green-500/20" : "bg-red-500/20" : "bg-gray-700/50";
            let hoverColor = isSelected ? isDesconto ? "hover:bg-green-500/30" : "hover:bg-red-500/30" : "hover:bg-gray-700/70";
            let textColor = isSelected ? isDesconto ? "text-green-400" : "text-red-400" : "text-gray-300";
            return /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "button",
              {
                type: "button",
                onClick: () => {
                  if (isSelected) {
                    setDescontoValorSelecionado(null);
                  } else {
                    setDescontoValorSelecionado(desconto.id);
                  }
                },
                className: `flex items-center justify-between gap-2 ${bgColor} ${hoverColor} ${textColor} py-2 px-3 rounded-lg transition-colors text-sm`,
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(DollarSign, { size: 16 }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                      "Min: ",
                      formatarPreco2(desconto.valor_minimo)
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: isDesconto ? "text-green-400" : "text-red-400", children: [
                    isDesconto ? "-" : "+",
                    desconto.percentual,
                    "%"
                  ] }),
                  isSelected && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "ml-1 bg-primary-500 text-white rounded-full w-4 h-4 flex items-center justify-center text-xs", children: "✓" })
                ]
              },
              desconto.id
            );
          }) })
        ] }),
        descontosPrazo.length === 0 && descontosValor.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-sm", children: "Nenhuma condição de pagamento disponível para este cliente" })
      ] }) }) }),
      clienteId && clienteData && itensPedido.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 p-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-800/30 rounded-lg p-3 border border-gray-700", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-base font-medium mb-3 border-b border-gray-700 pb-2", children: "Forma de Pagamento" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-3 mb-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center gap-2.5 cursor-pointer bg-gray-800/50 p-2.5 rounded-lg border border-gray-700 hover:bg-gray-800 transition-colors", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "radio",
                name: "tipoPagamento",
                checked: tipoPagamento === "unico",
                onChange: () => setTipoPagamento("unico"),
                className: "w-4 h-4 text-primary-500 bg-gray-800 border-gray-700 focus:ring-primary-500/20"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium text-sm", children: "À Vista" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-xs mt-0.5", children: "Uma única forma de pagamento" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center gap-2.5 cursor-pointer bg-gray-800/50 p-2.5 rounded-lg border border-gray-700 hover:bg-gray-800 transition-colors", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "radio",
                name: "tipoPagamento",
                checked: tipoPagamento === "parcial",
                onChange: () => setTipoPagamento("parcial"),
                className: "w-4 h-4 text-primary-500 bg-gray-800 border-gray-700 focus:ring-primary-500/20"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium text-sm", children: "Diversos" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-xs mt-0.5", children: "Múltiplas formas de pagamento" })
            ] })
          ] })
        ] }),
        tipoPagamento === "unico" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3 mt-3 p-2.5 bg-gray-800/50 rounded-lg border border-gray-700", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-1.5", children: "Selecione a forma de pagamento" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "select",
              {
                value: formaPagamentoSelecionada || "",
                onChange: (e) => setFormaPagamentoSelecionada(e.target.value || null),
                className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2.5 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "", children: "Selecione uma forma de pagamento" }),
                  formasPagamento.map((forma) => /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: forma.id, children: forma.nome }, forma.id))
                ]
              }
            )
          ] }),
          formaPagamentoSelecionada && ((_a2 = formasPagamento.find((f2) => f2.id === formaPagamentoSelecionada)) == null ? void 0 : _a2.tipo) === "cartao_credito" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-1.5", children: "Número de Parcelas" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "select",
              {
                value: novaFormaPagamentoParcelas,
                onChange: (e) => setNovaFormaPagamentoParcelas(Number(e.target.value)),
                className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2.5 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                children: Array.from(
                  { length: ((_b2 = formasPagamento.find((f2) => f2.id === formaPagamentoSelecionada)) == null ? void 0 : _b2.max_parcelas) || 12 },
                  (_2, i) => i + 1
                ).map((parcela) => /* @__PURE__ */ jsxRuntimeExports.jsxs("option", { value: parcela, children: [
                  parcela,
                  "x"
                ] }, parcela))
              }
            )
          ] })
        ] }),
        tipoPagamento === "parcial" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3 mt-3", children: [
          formasPagamentoParciais.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 p-2.5 bg-gray-800/50 rounded-lg border border-gray-700", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-sm font-medium text-gray-300 mb-1.5", children: "Formas de pagamento adicionadas" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 max-h-48 overflow-y-auto custom-scrollbar", children: [
              formasPagamentoParciais.map((forma) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center bg-gray-800 border border-gray-700 rounded-lg p-2.5", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(DollarSign, { size: 16, className: "text-primary-400" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-white text-sm", children: [
                    forma.forma_pagamento_nome,
                    forma.parcelas && forma.parcelas > 1 && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-primary-400 ml-2", children: [
                      "(",
                      forma.parcelas,
                      "x)"
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400 font-medium text-sm", children: formatarPreco2(forma.valor) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "button",
                    {
                      type: "button",
                      onClick: () => removerFormaPagamentoParcial(forma.id),
                      className: "p-1 bg-red-500/10 rounded-lg text-red-400 hover:bg-red-500/20 hover:text-red-300",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Trash2, { size: 14 })
                    }
                  )
                ] })
              ] }, forma.id)),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center p-2.5 bg-gray-800 rounded-lg border border-gray-700 mt-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-300 font-medium", children: "Valor restante:" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `font-medium ${calcularValorRestante() > 0 ? "text-red-400" : "text-green-400"}`, children: formatarPreco2(calcularValorRestante()) })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-2.5 bg-gray-800/50 rounded-lg border border-gray-700", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-sm font-medium text-gray-300 mb-2", children: "Adicionar forma de pagamento" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `grid ${(formaPagamentoSelecionadaObj == null ? void 0 : formaPagamentoSelecionadaObj.tipo) === "cartao_credito" ? "grid-cols-1 md:grid-cols-4" : "grid-cols-1 md:grid-cols-3"} gap-3`, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "col-span-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-xs text-gray-400 mb-1", children: "Forma de pagamento" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "select",
                  {
                    value: novaFormaPagamentoId,
                    onChange: (e) => setNovaFormaPagamentoId(e.target.value),
                    className: "w-full bg-gray-800 border border-gray-700 rounded-lg py-2.5 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "", children: "Selecione" }),
                      formasPagamento.map((forma) => /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: forma.id, children: forma.nome }, forma.id))
                    ]
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "col-span-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-xs text-gray-400 mb-1", children: "Valor" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: novaFormaPagamentoValor,
                    onChange: handleValorChange,
                    placeholder: "R$ 0,00",
                    className: "w-full bg-gray-800 border border-gray-700 rounded-lg py-2.5 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                  }
                )
              ] }),
              (formaPagamentoSelecionadaObj == null ? void 0 : formaPagamentoSelecionadaObj.tipo) === "cartao_credito" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "col-span-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-xs text-gray-400 mb-1", children: "Parcelas" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "select",
                  {
                    value: novaFormaPagamentoParcelas,
                    onChange: (e) => setNovaFormaPagamentoParcelas(Number(e.target.value)),
                    className: "w-full bg-gray-800 border border-gray-700 rounded-lg py-2.5 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    children: Array.from({ length: formaPagamentoSelecionadaObj.max_parcelas || 12 }, (_2, i) => i + 1).map((parcela) => /* @__PURE__ */ jsxRuntimeExports.jsxs("option", { value: parcela, children: [
                      parcela,
                      "x"
                    ] }, parcela))
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "col-span-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-xs text-gray-400 mb-1 opacity-0", children: "Ação" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "button",
                  {
                    type: "button",
                    onClick: adicionarFormaPagamentoParcial,
                    className: "w-full bg-primary-500 hover:bg-primary-600 text-white py-2.5 px-3 rounded-lg transition-colors flex items-center justify-center gap-2",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 16 }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Adicionar" })
                    ]
                  }
                )
              ] })
            ] })
          ] })
        ] })
      ] }) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          type: "submit",
          disabled: isSaving || itensPedido.length === 0,
          className: "w-full flex items-center justify-center gap-2 bg-primary-500 hover:bg-primary-600 text-white py-2.5 px-4 rounded-lg transition-colors disabled:opacity-70 disabled:cursor-not-allowed",
          children: isSaving ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Salvando..." })
          ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Save, { size: 16 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: isEditMode ? "Salvar Alterações" : "Finalizar Pedido" })
          ] })
        }
      )
    ] })
  ] });
};
const UserProdutosPage = () => {
  const [isLoading, setIsLoading] = reactExports.useState(true);
  const [isRefreshing, setIsRefreshing] = reactExports.useState(false);
  const [isDataReady, setIsDataReady] = reactExports.useState(false);
  const [grupos, setGrupos] = reactExports.useState([]);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [activeGrupo, setActiveGrupo] = reactExports.useState(null);
  const [activeFilter, setActiveFilter] = reactExports.useState("todos");
  const [produtosFotos, setProdutosFotos] = reactExports.useState({});
  const [lastUpdate, setLastUpdate] = reactExports.useState(/* @__PURE__ */ new Date());
  const [produtosEstoque, setProdutosEstoque] = reactExports.useState({});
  const [produtoFotos, setProdutoFotos] = reactExports.useState([]);
  const [isGaleriaOpen, setIsGaleriaOpen] = reactExports.useState(false);
  const [currentFotoIndex, setCurrentFotoIndex] = reactExports.useState(0);
  const [produtosFotosCount, setProdutosFotosCount] = reactExports.useState({});
  const [loadingStates, setLoadingStates] = reactExports.useState({
    grupos: true,
    fotos: true,
    estoque: true,
    fotosCount: true
  });
  const checkIfDataReady = () => {
    const allLoaded = !loadingStates.grupos && !loadingStates.fotos && !loadingStates.estoque && !loadingStates.fotosCount;
    if (allLoaded && !isDataReady) {
      console.log("Todos os dados foram carregados, exibindo interface");
      setIsDataReady(true);
      setIsLoading(false);
    }
  };
  reactExports.useEffect(() => {
    checkIfDataReady();
  }, [loadingStates, isDataReady]);
  const checkLocalStorageUpdates = () => {
    const produtoAtualizado = localStorage.getItem("produto_atualizado");
    if (produtoAtualizado) {
      try {
        const data = JSON.parse(produtoAtualizado);
        console.log("Atualização detectada via localStorage:", data);
        const now2 = (/* @__PURE__ */ new Date()).getTime();
        if (now2 - data.timestamp < 5e3) {
          console.log("Atualização recente, recarregando dados...");
          setIsDataReady(false);
          setIsLoading(true);
          setLoadingStates({
            grupos: true,
            fotos: true,
            estoque: true,
            fotosCount: true
          });
          setGrupos([]);
          setProdutosFotos({});
          setProdutosFotosCount({});
          loadGrupos();
          localStorage.removeItem("produto_atualizado");
        }
      } catch (error) {
        console.error("Erro ao processar atualização do localStorage:", error);
        localStorage.removeItem("produto_atualizado");
      }
    }
  };
  reactExports.useEffect(() => {
    const loadFromLocalStorage = () => {
      try {
        const cachedData = localStorage.getItem("produtos_cache");
        const cachedEstoque = localStorage.getItem("produtos_estoque_cache");
        const cachedTimestamp = localStorage.getItem("produtos_cache_timestamp");
        if (cachedData && cachedTimestamp) {
          const timestamp = parseInt(cachedTimestamp);
          const now2 = (/* @__PURE__ */ new Date()).getTime();
          const thirtyMinutesInMs = 30 * 60 * 1e3;
          if (now2 - timestamp < thirtyMinutesInMs) {
            console.log("Carregando dados de produtos do cache local");
            setGrupos(JSON.parse(cachedData));
            if (cachedEstoque) {
              setProdutosEstoque(JSON.parse(cachedEstoque));
            }
            setLoadingStates((prev) => ({
              ...prev,
              grupos: false,
              estoque: cachedEstoque ? false : true
            }));
            loadGrupos(false);
            if (!cachedEstoque) {
              loadProdutosEstoque();
            }
            return true;
          } else {
            console.log("Cache de produtos expirado, carregando do servidor");
            localStorage.removeItem("produtos_cache");
            localStorage.removeItem("produtos_estoque_cache");
            localStorage.removeItem("produtos_cache_timestamp");
          }
        }
        return false;
      } catch (error) {
        console.error("Erro ao carregar dados do localStorage:", error);
        return false;
      }
    };
    if (!loadFromLocalStorage()) {
      loadGrupos(true);
      loadProdutosEstoque();
    }
    setupRealtimeSubscription();
    checkLocalStorageUpdates();
    const localStorageInterval = setInterval(() => {
      checkLocalStorageUpdates();
    }, 1e3);
    const timer = setTimeout(() => {
      testRealtimeConnection();
    }, 2e3);
    return () => {
      clearTimeout(timer);
      clearInterval(localStorageInterval);
      supabase.removeAllChannels();
    };
  }, []);
  const testRealtimeConnection = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: produtosData } = await supabase.from("produtos").select("id").eq("empresa_id", usuarioData.empresa_id).eq("deletado", false).limit(1);
      if (!produtosData || produtosData.length === 0) {
        console.log("Nenhum produto encontrado para testar a conexão Realtime");
        return;
      }
      const produtoId = produtosData[0].id;
      console.log(`Testando conexão Realtime com produto ${produtoId}...`);
      const { data, error } = await supabase.from("produtos").update({ updated_at: (/* @__PURE__ */ new Date()).toISOString() }).eq("id", produtoId).select();
      if (error) {
        console.error("Erro ao testar conexão Realtime:", error);
      } else {
        console.log("Teste de conexão Realtime enviado com sucesso");
      }
    } catch (error) {
      console.error("Erro ao testar conexão Realtime:", error);
    }
  };
  const loadGrupos = async (showLoading = true) => {
    console.log("Iniciando carregamento de grupos e produtos...");
    try {
      const isInitialLoad = grupos.length === 0;
      if (isInitialLoad && showLoading) {
        setIsLoading(true);
      } else if (!isInitialLoad) {
        setIsRefreshing(true);
      }
      if (!isInitialLoad) {
        console.log("Limpando estados para garantir dados atualizados...");
      }
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        console.log("Usuário não autenticado, não é possível carregar dados");
        return;
      }
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        console.log("Empresa não encontrada, não é possível carregar dados");
        return;
      }
      console.log(`Carregando dados para empresa_id: ${usuarioData.empresa_id}`);
      const { data: gruposData, error: gruposError } = await supabase.from("grupos").select("*").eq("empresa_id", usuarioData.empresa_id).eq("deletado", false).order("nome");
      if (gruposError) {
        console.error("Erro ao carregar grupos:", gruposError);
        return;
      }
      if (!gruposData || gruposData.length === 0) {
        console.log("Nenhum grupo encontrado");
        setGrupos([]);
        setIsLoading(false);
        return;
      }
      console.log(`${gruposData.length} grupos encontrados`);
      const { data: produtosData, error: produtosError } = await supabase.from("produtos").select(`
          *,
          unidade_medida:unidade_medida (
            id,
            sigla,
            nome
          )
        `).eq("empresa_id", usuarioData.empresa_id).eq("deletado", false).eq("ativo", true).order("nome");
      if (produtosError) {
        console.error("Erro ao carregar produtos:", produtosError);
        return;
      }
      if (!produtosData || produtosData.length === 0) {
        console.log("Nenhum produto encontrado");
        setGrupos([]);
        setIsLoading(false);
        return;
      }
      console.log(`${produtosData.length} produtos encontrados`);
      const gruposComProdutos = gruposData.map((grupo) => ({
        ...grupo,
        produtos: produtosData.filter((produto) => produto.grupo_id === grupo.id)
      })).filter((grupo) => grupo.produtos.length > 0);
      console.log(`${gruposComProdutos.length} grupos com produtos`);
      setGrupos(gruposComProdutos);
      setLoadingStates((prev) => ({ ...prev, grupos: false }));
      if (isInitialLoad) {
        setActiveFilter("todos");
        if (gruposComProdutos.length > 0) {
          setActiveGrupo(gruposComProdutos[0].id);
        }
      }
      await loadProdutosFotos(produtosData);
      await loadProdutosFotosCount(produtosData);
      setLastUpdate(/* @__PURE__ */ new Date());
      try {
        localStorage.setItem("produtos_cache", JSON.stringify(gruposComProdutos));
        localStorage.setItem("produtos_cache_timestamp", (/* @__PURE__ */ new Date()).getTime().toString());
        console.log("Dados de produtos salvos no cache local");
      } catch (cacheError) {
        console.error("Erro ao salvar dados no localStorage:", cacheError);
      }
      console.log("Carregamento de dados concluído com sucesso");
    } catch (error) {
      console.error("Erro ao carregar grupos e produtos:", error);
      setLoadingStates((prev) => ({ ...prev, grupos: false }));
    } finally {
      setIsRefreshing(false);
    }
  };
  const loadProdutosEstoque = async () => {
    try {
      console.log("Carregando informações de estoque dos produtos...");
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: produtosData, error: produtosError } = await supabase.from("produtos").select("id").eq("empresa_id", usuarioData.empresa_id).eq("deletado", false).eq("ativo", true);
      if (produtosError) {
        console.error("Erro ao carregar produtos para estoque:", produtosError);
        return;
      }
      if (!produtosData || produtosData.length === 0) {
        console.log("Nenhum produto encontrado para carregar estoque");
        return;
      }
      console.log(`Carregando estoque para ${produtosData.length} produtos...`);
      const estoqueInfo = {};
      for (const produto of produtosData) {
        const { data: movimentosData, error: movimentosError } = await supabase.from("produto_estoque").select("tipo_movimento, quantidade").eq("produto_id", produto.id).eq("empresa_id", usuarioData.empresa_id);
        if (movimentosError) {
          console.error(`Erro ao carregar movimentos do produto ${produto.id}:`, movimentosError);
          continue;
        }
        let saldoTotal = 0;
        if (movimentosData && movimentosData.length > 0) {
          movimentosData.forEach((movimento) => {
            if (movimento.tipo_movimento === "entrada") {
              saldoTotal += parseFloat(movimento.quantidade);
            } else {
              saldoTotal -= parseFloat(movimento.quantidade);
            }
          });
        }
        const { data: pedidosData, error: pedidosError } = await supabase.from("pedidos_itens").select(`
            quantidade,
            pedido:pedido_id (
              status
            )
          `).eq("produto_id", produto.id).eq("empresa_id", usuarioData.empresa_id);
        if (pedidosError) {
          console.error(`Erro ao carregar pedidos do produto ${produto.id}:`, pedidosError);
          continue;
        }
        let quantidadeNaoFaturada = 0;
        if (pedidosData && pedidosData.length > 0) {
          pedidosData.forEach((item) => {
            if (item.pedido && item.pedido.status !== "faturado") {
              quantidadeNaoFaturada += parseFloat(item.quantidade);
            }
          });
        }
        estoqueInfo[produto.id] = {
          total: saldoTotal,
          naoFaturado: quantidadeNaoFaturada
        };
      }
      console.log("Informações de estoque carregadas com sucesso");
      setProdutosEstoque(estoqueInfo);
      setLoadingStates((prev) => ({ ...prev, estoque: false }));
      try {
        localStorage.setItem("produtos_estoque_cache", JSON.stringify(estoqueInfo));
        console.log("Dados de estoque salvos no cache local");
      } catch (cacheError) {
        console.error("Erro ao salvar dados de estoque no localStorage:", cacheError);
      }
    } catch (error) {
      console.error("Erro ao carregar estoque dos produtos:", error);
      setLoadingStates((prev) => ({ ...prev, estoque: false }));
    }
  };
  const loadProdutosFotosCount = async (produtos) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: fotosData } = await supabase.from("produto_fotos").select("produto_id").eq("empresa_id", usuarioData.empresa_id);
      if (!fotosData) return;
      const fotosCount = {};
      produtos.forEach((produto) => {
        const count = fotosData.filter((f2) => f2.produto_id === produto.id).length;
        fotosCount[produto.id] = count;
      });
      setProdutosFotosCount(fotosCount);
      setLoadingStates((prev) => ({ ...prev, fotosCount: false }));
    } catch (error) {
      console.error("Erro ao carregar contagem de fotos dos produtos:", error);
      setLoadingStates((prev) => ({ ...prev, fotosCount: false }));
    }
  };
  const loadProdutosFotos = async (produtos) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: fotosData } = await supabase.from("produto_fotos").select("*").eq("empresa_id", usuarioData.empresa_id).eq("principal", true);
      if (!fotosData) return;
      const fotosMap = {};
      produtos.forEach((produto) => {
        const foto = fotosData.find((f2) => f2.produto_id === produto.id);
        fotosMap[produto.id] = foto || null;
      });
      setProdutosFotos(fotosMap);
      setLoadingStates((prev) => ({ ...prev, fotos: false }));
    } catch (error) {
      console.error("Erro ao carregar fotos dos produtos:", error);
      setLoadingStates((prev) => ({ ...prev, fotos: false }));
    }
  };
  const loadProdutoFotos = async (produtoId) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: fotosData } = await supabase.from("produto_fotos").select("*").eq("produto_id", produtoId).eq("empresa_id", usuarioData.empresa_id).order("principal", { ascending: false });
      if (!fotosData || fotosData.length === 0) {
        return;
      }
      setProdutoFotos(fotosData);
      setCurrentFotoIndex(0);
      setIsGaleriaOpen(true);
    } catch (error) {
      console.error("Erro ao carregar fotos do produto:", error);
    }
  };
  const formatCurrency = (value) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(value);
  };
  const calcularValorFinal = (preco, tipoDesconto, valorDesconto) => {
    if (!tipoDesconto || valorDesconto === void 0) return preco;
    if (tipoDesconto === "percentual") {
      return preco - preco * (valorDesconto / 100);
    } else {
      return preco - valorDesconto;
    }
  };
  const setupRealtimeSubscription = async () => {
    try {
      supabase.removeAllChannels();
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        console.log("Usuário não autenticado, não é possível configurar escuta em tempo real");
        return;
      }
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) {
        console.log("Empresa não encontrada, não é possível configurar escuta em tempo real");
        return;
      }
      const channelName = `realtime-mobile-${Date.now()}`;
      const channel = supabase.channel(channelName, {
        config: {
          broadcast: { self: true }
        }
      });
      channel.on(
        "postgres_changes",
        {
          event: "*",
          // Escutar todos os eventos (INSERT, UPDATE, DELETE)
          schema: "public",
          table: "produtos",
          filter: `empresa_id=eq.${usuarioData.empresa_id}`
        },
        (payload) => {
          console.log("Alteração detectada em produtos:", payload);
          console.log("Tipo de evento:", payload.eventType);
          console.log("Dados antigos:", payload.old);
          console.log("Dados novos:", payload.new);
          setTimeout(() => {
            console.log("Recarregando dados após alteração em produtos...");
            setIsDataReady(false);
            setLoadingStates({
              grupos: true,
              fotos: true,
              estoque: true,
              fotosCount: true
            });
            setGrupos([]);
            setProdutosFotos({});
            setProdutosFotosCount({});
            setProdutosEstoque({});
            loadGrupos();
            loadProdutosEstoque();
          }, 300);
        }
      );
      channel.on(
        "postgres_changes",
        {
          event: "*",
          // Escutar todos os eventos (INSERT, UPDATE, DELETE)
          schema: "public",
          table: "produto_fotos",
          filter: `empresa_id=eq.${usuarioData.empresa_id}`
        },
        (payload) => {
          console.log("Alteração detectada em fotos de produtos:", payload);
          console.log("Tipo de evento:", payload.eventType);
          console.log("Dados antigos:", payload.old);
          console.log("Dados novos:", payload.new);
          setTimeout(() => {
            console.log("Recarregando dados após alteração em fotos de produtos...");
            setIsDataReady(false);
            setLoadingStates({
              grupos: true,
              fotos: true,
              estoque: true,
              fotosCount: true
            });
            setGrupos([]);
            setProdutosFotos({});
            setProdutosFotosCount({});
            setProdutosEstoque({});
            loadGrupos();
            loadProdutosEstoque();
          }, 300);
        }
      );
      const subscription = channel.subscribe();
    } catch (error) {
      console.error("Erro ao configurar escuta em tempo real:", error);
    }
  };
  const formatarEstoque = (valor, produto) => {
    var _a2;
    if (((_a2 = produto.unidade_medida) == null ? void 0 : _a2.sigla) === "KG") {
      return valor.toFixed(3);
    } else {
      return Math.floor(valor).toString();
    }
  };
  const filteredGrupos = searchTerm ? grupos.map((grupo) => ({
    ...grupo,
    produtos: grupo.produtos.filter(
      (produto) => {
        var _a2;
        return produto.nome.toLowerCase().includes(searchTerm.toLowerCase()) || produto.codigo.toLowerCase().includes(searchTerm.toLowerCase()) || ((_a2 = produto.descricao) == null ? void 0 : _a2.toLowerCase().includes(searchTerm.toLowerCase()));
      }
    )
  })).filter((grupo) => grupo.produtos.length > 0) : grupos;
  const renderSkeletonCards = () => {
    const cardConfigs = [
      { nameWidth: "w-3/4", hasBadge: true, hasStock: true, hasDescription: true, hasExtraStock: false },
      { nameWidth: "w-5/6", hasBadge: false, hasStock: false, hasDescription: true, hasExtraStock: false },
      { nameWidth: "w-2/3", hasBadge: true, hasStock: true, hasDescription: false, hasExtraStock: true },
      { nameWidth: "w-4/5", hasBadge: false, hasStock: true, hasDescription: true, hasExtraStock: false },
      { nameWidth: "w-3/4", hasBadge: true, hasStock: false, hasDescription: false, hasExtraStock: false },
      { nameWidth: "w-5/6", hasBadge: false, hasStock: true, hasDescription: true, hasExtraStock: true },
      { nameWidth: "w-2/3", hasBadge: true, hasStock: true, hasDescription: false, hasExtraStock: false },
      { nameWidth: "w-4/5", hasBadge: false, hasStock: false, hasDescription: true, hasExtraStock: false }
    ];
    return cardConfigs.map((config, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg overflow-hidden border border-gray-800", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-32 bg-gray-800 relative", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-full bg-gradient-to-r from-gray-800 via-gray-700 to-gray-800 animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-2 left-2 flex flex-col gap-1", children: config.hasBadge && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-5 w-16 bg-gray-600 rounded-full animate-pulse" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute bottom-0 right-0 bg-background-dark px-2 py-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-12 bg-gray-600 rounded animate-pulse" }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-3 space-y-2", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `h-5 bg-gray-700 rounded animate-pulse ${config.nameWidth}` }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-8 bg-gray-700 rounded animate-pulse" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-5 w-16 bg-gray-600 rounded-full animate-pulse" })
        ] }),
        config.hasStock && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1 mt-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-20 bg-gray-600 rounded-full animate-pulse" }),
          config.hasExtraStock && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-24 bg-gray-600 rounded-full animate-pulse" })
        ] }),
        config.hasDescription && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1 mt-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-full bg-gray-700 rounded animate-pulse" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-4/5 bg-gray-700 rounded animate-pulse" })
        ] })
      ] })
    ] }, index2));
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-xl font-semibold text-white", children: "Produtos" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: `p-1.5 rounded-full bg-gray-800 text-gray-400 hover:text-white hover:bg-gray-700 transition-colors ${isRefreshing ? "animate-spin text-primary-400" : ""}`,
            onClick: () => {
              if (!isRefreshing) {
                console.log("Atualizando manualmente...");
                setIsDataReady(false);
                setIsLoading(true);
                setLoadingStates({
                  grupos: true,
                  fotos: true,
                  estoque: true,
                  fotosCount: true
                });
                setGrupos([]);
                setProdutosFotos({});
                setProdutosFotosCount({});
                setProdutosEstoque({});
                loadGrupos();
                loadProdutosEstoque();
                setTimeout(() => {
                  testRealtimeConnection();
                }, 1e3);
              }
            },
            disabled: isRefreshing,
            title: "Atualizar dados",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(RefreshCw, { size: 16 })
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-400", children: [
          "Atualizado: ",
          lastUpdate.toLocaleTimeString()
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "input",
        {
          type: "text",
          placeholder: "Buscar produtos...",
          value: searchTerm,
          onChange: (e) => setSearchTerm(e.target.value),
          className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18, className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" })
    ] }),
    !isDataReady ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex overflow-x-auto pb-2 custom-scrollbar", children: Array(6).fill(0).map((_2, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `h-8 bg-gray-700 rounded-full mr-2 flex-shrink-0 animate-pulse ${index2 === 0 ? "w-16" : index2 === 1 ? "w-20" : index2 % 2 === 0 ? "w-24" : "w-28"}` }, index2)) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-2 gap-4", children: renderSkeletonCards() })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: filteredGrupos.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg p-8 text-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCircle, { size: 32, className: "mx-auto text-gray-500 mb-2" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: searchTerm ? "Nenhum produto encontrado" : "Nenhum produto disponível" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: searchTerm ? "Tente buscar com outros termos" : "Não há produtos disponíveis no momento." })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex overflow-x-auto pb-2 custom-scrollbar", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: `px-4 py-1 rounded-full mr-2 flex-shrink-0 transition-colors ${activeFilter === "todos" ? "bg-primary-500 text-white" : "bg-gray-800 text-gray-400 hover:bg-gray-700"}`,
            onClick: () => {
              setActiveFilter("todos");
            },
            children: "Todos"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: `px-4 py-1 rounded-full mr-2 flex-shrink-0 transition-colors ${activeFilter === "promocao" ? "bg-green-600 text-white" : "bg-gray-800 text-gray-400 hover:bg-gray-700"}`,
            onClick: () => {
              setActiveFilter("promocao");
            },
            children: "Promoção"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-6 border-l border-gray-700 mx-1 my-auto" }),
        filteredGrupos.map((grupo) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: `px-4 py-1 rounded-full mr-2 flex-shrink-0 transition-colors ${activeFilter === "grupo" && activeGrupo === grupo.id ? "bg-primary-500 text-white" : "bg-gray-800 text-gray-400 hover:bg-gray-700"}`,
            onClick: () => {
              setActiveFilter("grupo");
              setActiveGrupo(grupo.id);
            },
            children: grupo.nome
          },
          grupo.id
        ))
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-2 gap-4", children: filteredGrupos.flatMap((grupo) => {
        if (activeFilter === "grupo") {
          return grupo.id === activeGrupo ? grupo.produtos : [];
        } else if (activeFilter === "promocao") {
          return grupo.produtos.filter((produto) => produto.promocao);
        }
        return grupo.produtos;
      }).map((produto, index2) => {
        var _a2;
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(
          motion.div,
          {
            initial: { opacity: 0, y: 20 },
            animate: { opacity: 1, y: 0 },
            transition: { delay: index2 * 0.05 },
            className: "bg-background-card rounded-lg overflow-hidden border border-gray-800",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "div",
                {
                  className: "h-32 bg-gray-800 relative cursor-pointer",
                  onClick: () => loadProdutoFotos(produto.id),
                  children: [
                    produtosFotos[produto.id] ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "img",
                      {
                        src: (_a2 = produtosFotos[produto.id]) == null ? void 0 : _a2.url,
                        alt: produto.nome,
                        className: "w-full h-full object-cover"
                      }
                    ) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-full flex items-center justify-center text-gray-600", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Package, { size: 32 }) }),
                    produtosFotosCount[produto.id] > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute top-2 right-2 bg-background-dark px-2 py-1 rounded-full text-xs font-medium text-white", children: [
                      produtosFotosCount[produto.id],
                      " ",
                      produtosFotosCount[produto.id] === 1 ? "foto" : "fotos"
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-2 left-2 flex flex-col gap-1", children: produto.promocao && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-2 py-0.5 text-xs font-medium bg-green-600 text-white rounded-full", children: "Promoção" }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute bottom-0 right-0 bg-background-dark px-2 py-1 text-sm font-medium", children: produto.promocao && produto.tipo_desconto && produto.valor_desconto !== void 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-end", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400 line-through text-xs", children: formatCurrency(produto.preco) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-green-400", children: formatCurrency(calcularValorFinal(produto.preco, produto.tipo_desconto, produto.valor_desconto)) })
                    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-primary-400", children: formatCurrency(produto.preco) }) })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-3", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium line-clamp-1", children: produto.nome }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap items-center gap-1 mt-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-gray-400 text-xs", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Tag, { size: 12 }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                      "Código ",
                      produto.codigo
                    ] }),
                    produto.codigo_barras && produto.codigo_barras.trim() !== "" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 ml-1", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(QrCode, { size: 10, className: "text-gray-500" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: produto.codigo_barras })
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap items-center gap-1", children: [
                    produto.unidade_medida && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "px-2 py-0.5 text-xs font-medium bg-primary-700 text-white rounded-full", children: [
                      produto.unidade_medida.sigla,
                      " - ",
                      produto.unidade_medida.nome
                    ] }),
                    produto.desconto_quantidade && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "px-2 py-0.5 text-xs font-medium bg-blue-600 text-white rounded-full", children: [
                      "Desconto ",
                      produto.quantidade_minima,
                      "+ unid."
                    ] })
                  ] })
                ] }),
                produto.promocao && produto.tipo_desconto && produto.valor_desconto !== void 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-1 text-xs font-medium px-2 py-0.5 bg-green-600 text-white rounded-full inline-block", children: produto.tipo_desconto === "percentual" ? `${produto.valor_desconto}% OFF` : `- ${formatCurrency(produto.valor_desconto)}` }),
                produtosEstoque[produto.id] && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap items-center gap-1 mt-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "px-2 py-0.5 text-xs font-medium bg-gray-700 text-gray-300 rounded-full", children: [
                    "Estoque: ",
                    formatarEstoque(produtosEstoque[produto.id].total, produto)
                  ] }),
                  produtosEstoque[produto.id].naoFaturado > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "px-2 py-0.5 text-xs font-medium bg-yellow-900/30 text-yellow-400 rounded-full", children: [
                    "Não Faturado: ",
                    formatarEstoque(produtosEstoque[produto.id].naoFaturado, produto)
                  ] })
                ] }),
                produto.descricao && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 text-xs mt-2 line-clamp-2", children: produto.descricao })
              ] })
            ]
          },
          produto.id
        );
      }) })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      FotoGaleria,
      {
        fotos: produtoFotos,
        isOpen: isGaleriaOpen,
        onClose: () => setIsGaleriaOpen(false),
        initialFotoIndex: currentFotoIndex
      }
    )
  ] });
};
const UserClientesPage = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [clientes, setClientes] = reactExports.useState([]);
  const [filteredClientes, setFilteredClientes] = reactExports.useState([]);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [showFilters, setShowFilters] = reactExports.useState(false);
  const [empresaFilter, setEmpresaFilter] = reactExports.useState("todas");
  const [tipoClienteFilter, setTipoClienteFilter] = reactExports.useState("todos");
  const [empresas, setEmpresas] = reactExports.useState([]);
  const [isInitialLoading, setIsInitialLoading] = reactExports.useState(false);
  reactExports.useEffect(() => {
    const loadFromLocalStorage = () => {
      try {
        const cachedClientes = localStorage.getItem("clientes_cache");
        const cachedEmpresas = localStorage.getItem("empresas_cache");
        const cachedTimestamp = localStorage.getItem("clientes_cache_timestamp");
        if (cachedClientes && cachedEmpresas && cachedTimestamp) {
          const timestamp = parseInt(cachedTimestamp);
          const now2 = (/* @__PURE__ */ new Date()).getTime();
          const thirtyMinutesInMs = 30 * 60 * 1e3;
          if (now2 - timestamp < thirtyMinutesInMs) {
            console.log("Carregando dados de clientes do cache local");
            setClientes(JSON.parse(cachedClientes));
            setEmpresas(JSON.parse(cachedEmpresas));
            setIsInitialLoading(false);
            loadClientes(false);
            loadEmpresas();
            return true;
          } else {
            console.log("Cache de clientes expirado, carregando do servidor");
            localStorage.removeItem("clientes_cache");
            localStorage.removeItem("empresas_cache");
            localStorage.removeItem("clientes_cache_timestamp");
          }
        }
        return false;
      } catch (error) {
        console.error("Erro ao carregar dados do localStorage:", error);
        return false;
      }
    };
    if (!loadFromLocalStorage()) {
      loadClientes(true);
      loadEmpresas();
      const timer = setTimeout(() => {
        setIsInitialLoading(false);
      }, 2e3);
      return () => clearTimeout(timer);
    }
  }, []);
  reactExports.useEffect(() => {
    applyFilters();
  }, [clientes, searchTerm, empresaFilter, tipoClienteFilter]);
  const loadEmpresas = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: empresasData } = await supabase.from("empresas").select("id, nome").eq("id", usuarioData.empresa_id).single();
      if (empresasData) {
        setEmpresas([empresasData]);
        try {
          localStorage.setItem("empresas_cache", JSON.stringify([empresasData]));
        } catch (cacheError) {
          console.error("Erro ao salvar empresas no localStorage:", cacheError);
        }
      }
    } catch (error) {
      console.error("Erro ao carregar empresas:", error);
    }
  };
  const loadClientes = async (showLoading = true) => {
    try {
      if (showLoading) {
        setIsLoading(true);
      }
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) return;
      const { data: clientesData, error } = await supabase.from("clientes").select("*").eq("empresa_id", usuarioData.empresa_id).or("deletado.is.null,deletado.eq.false").order("nome");
      console.log("Clientes encontrados (mobile):", clientesData == null ? void 0 : clientesData.length);
      if (error) throw error;
      if (clientesData && clientesData.length > 0) {
        const { data: empresaData } = await supabase.from("empresas").select("id, nome").eq("id", usuarioData.empresa_id).single();
        const formattedClientes = clientesData.map((cliente) => ({
          ...cliente,
          empresa_nome: (empresaData == null ? void 0 : empresaData.nome) || "Empresa não encontrada"
        }));
        setClientes(formattedClientes);
        try {
          localStorage.setItem("clientes_cache", JSON.stringify(formattedClientes));
          localStorage.setItem("clientes_cache_timestamp", (/* @__PURE__ */ new Date()).getTime().toString());
          console.log("Dados de clientes salvos no cache local");
        } catch (cacheError) {
          console.error("Erro ao salvar clientes no localStorage:", cacheError);
        }
      } else {
        setClientes([]);
      }
    } catch (error) {
      console.error("Erro ao carregar clientes:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const applyFilters = () => {
    let filtered = [...clientes];
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase();
      filtered = filtered.filter(
        (cliente) => {
          var _a2, _b2, _c;
          return ((_a2 = cliente.nome) == null ? void 0 : _a2.toLowerCase().includes(searchLower)) || ((_b2 = cliente.telefone) == null ? void 0 : _b2.toLowerCase().includes(searchLower)) || cliente.emails && cliente.emails.some((email) => email.toLowerCase().includes(searchLower)) || ((_c = cliente.endereco) == null ? void 0 : _c.toLowerCase().includes(searchLower));
        }
      );
    }
    if (empresaFilter !== "todas") {
      filtered = filtered.filter((cliente) => cliente.empresa_id === empresaFilter);
    }
    if (tipoClienteFilter !== "todos") {
      filtered = filtered.filter((cliente) => {
        switch (tipoClienteFilter) {
          case "cliente":
            return cliente.is_cliente === true;
          case "funcionario":
            return cliente.is_funcionario === true;
          case "vendedor":
            return cliente.is_vendedor === true;
          case "fornecedor":
            return cliente.is_fornecedor === true;
          case "transportadora":
            return cliente.is_transportadora === true;
          default:
            return true;
        }
      });
    }
    setFilteredClientes(filtered);
  };
  const formatarTelefone2 = (telefone) => {
    if (!telefone) return "";
    const numeroLimpo = telefone.replace(/\D/g, "");
    if (numeroLimpo.length <= 10) {
      return numeroLimpo.replace(/(\d{2})(\d{4})(\d{4})/, "($1) $2-$3");
    } else {
      return numeroLimpo.replace(/(\d{2})(\d{5})(\d{4})/, "($1) $2-$3");
    }
  };
  if (isInitialLoading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-8 w-48 bg-gray-800 rounded-lg animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 w-10 bg-gray-800 rounded-lg animate-pulse" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 w-full bg-gray-800 rounded-lg animate-pulse" }),
      [1, 2, 3].map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          className: "p-4 bg-background-card rounded-lg border border-gray-800",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-start", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 w-2/3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-5 w-32 bg-gray-700 rounded animate-pulse" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-40 bg-gray-700 rounded animate-pulse" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-24 bg-gray-700 rounded animate-pulse" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-36 bg-gray-700 rounded animate-pulse" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2 w-1/3 flex flex-col items-end", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-20 bg-gray-700 rounded animate-pulse" }) })
          ] })
        },
        item
      ))
    ] });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-xl font-semibold text-white", children: "Meus Clientes" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => setShowFilters(!showFilters),
            className: "p-2 rounded-lg bg-gray-800 text-gray-400 hover:text-white transition-colors",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Filter, { size: 18 })
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-2", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setTipoClienteFilter("todos"),
            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors flex items-center gap-2 ${tipoClienteFilter === "todos" ? "bg-primary-500 text-white" : "bg-gray-800 text-gray-300 hover:bg-gray-700 border border-gray-700"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
              "Todos"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setTipoClienteFilter("cliente"),
            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors flex items-center gap-2 ${tipoClienteFilter === "cliente" ? "bg-blue-500 text-white" : "bg-blue-500/10 text-blue-400 hover:bg-blue-500/20 border border-blue-500/30"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
              "Cliente"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setTipoClienteFilter("funcionario"),
            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors flex items-center gap-2 ${tipoClienteFilter === "funcionario" ? "bg-green-500 text-white" : "bg-green-500/10 text-green-400 hover:bg-green-500/20 border border-green-500/30"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
              "Funcionário"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setTipoClienteFilter("vendedor"),
            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors flex items-center gap-2 ${tipoClienteFilter === "vendedor" ? "bg-purple-500 text-white" : "bg-purple-500/10 text-purple-400 hover:bg-purple-500/20 border border-purple-500/30"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
              "Vendedor"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setTipoClienteFilter("fornecedor"),
            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors flex items-center gap-2 ${tipoClienteFilter === "fornecedor" ? "bg-orange-500 text-white" : "bg-orange-500/10 text-orange-400 hover:bg-orange-500/20 border border-orange-500/30"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
              "Fornecedor"
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            onClick: () => setTipoClienteFilter("transportadora"),
            className: `px-3 py-1.5 rounded-full text-sm font-medium transition-colors flex items-center gap-2 ${tipoClienteFilter === "transportadora" ? "bg-red-500 text-white" : "bg-red-500/10 text-red-400 hover:bg-red-500/20 border border-red-500/30"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 14 }),
              "Transportadora"
            ]
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "input",
        {
          type: "text",
          placeholder: "Buscar por nome, telefone ou email...",
          value: searchTerm,
          onChange: (e) => setSearchTerm(e.target.value),
          className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18, className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: showFilters && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { height: 0, opacity: 0 },
        animate: { height: "auto", opacity: 1 },
        exit: { height: 0, opacity: 0 },
        className: "overflow-hidden",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-gray-800/50 border border-gray-700 rounded-lg p-4 space-y-3", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Empresa" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => setEmpresaFilter("todas"),
                className: `px-3 py-1 rounded-full text-xs font-medium ${empresaFilter === "todas" ? "bg-primary-500 text-white" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`,
                children: "Todas"
              }
            ),
            empresas.map((empresa) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => setEmpresaFilter(empresa.id),
                className: `px-3 py-1 rounded-full text-xs font-medium ${empresaFilter === empresa.id ? "bg-primary-500 text-white" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`,
                children: empresa.nome
              },
              empresa.id
            ))
          ] })
        ] }) })
      }
    ) }),
    isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-3", children: [1, 2, 3].map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 bg-background-card rounded-lg border border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-start", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2 w-2/3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-5 w-32 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-40 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-36 bg-gray-700 rounded animate-pulse" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-48 bg-gray-700 rounded animate-pulse" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-2 w-1/3 flex flex-col items-end", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-24 bg-gray-700 rounded animate-pulse" }) })
    ] }) }, item)) }) : filteredClientes.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-8 text-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCircle, { size: 32, className: "text-gray-500 mx-auto mb-3" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-medium text-white mb-2", children: "Nenhum cliente encontrado" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400 mb-4", children: searchTerm || empresaFilter !== "todas" ? "Tente ajustar os filtros de busca" : "Você ainda não possui clientes registrados" })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-3 max-h-[calc(100vh-320px)] overflow-y-auto custom-scrollbar pr-2", children: filteredClientes.map((cliente, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0, y: 20 },
        animate: { opacity: 1, y: 0 },
        transition: { delay: index2 * 0.05 },
        className: "p-4 bg-background-card rounded-lg border border-gray-800",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-between items-start", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-white font-medium", children: cliente.nome }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-gray-400 text-sm mt-1", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Phone, { size: 14 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: formatarTelefone2(cliente.telefone) })
          ] }),
          cliente.emails && cliente.emails.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-gray-400 text-sm mt-1", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Mail, { size: 14 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: cliente.emails[0] }),
            cliente.emails.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-xs text-gray-500", children: [
              "+",
              cliente.emails.length - 1
            ] })
          ] }),
          (cliente.endereco || cliente.bairro || cliente.cidade) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-gray-400 text-sm mt-1", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(MapPin, { size: 14 }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
              cliente.endereco && `${cliente.endereco}${cliente.numero ? `, ${cliente.numero}` : ""}`,
              cliente.bairro && (cliente.endereco ? `, ${cliente.bairro}` : cliente.bairro),
              cliente.cidade && (cliente.endereco || cliente.bairro ? `, ${cliente.cidade}` : cliente.cidade),
              cliente.estado && `/${cliente.estado}`
            ] })
          ] }),
          cliente.empresa_nome && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 text-gray-500 text-xs mt-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Building, { size: 12 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: cliente.empresa_nome })
          ] })
        ] }) })
      },
      cliente.id
    )) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.button,
      {
        initial: { scale: 0, opacity: 0 },
        animate: { scale: 1, opacity: 1 },
        whileTap: { scale: 0.95 },
        className: "fixed right-4 bottom-20 w-14 h-14 rounded-full bg-primary-500 text-white flex items-center justify-center shadow-lg z-20",
        onClick: () => navigate("/user/clientes/novo"),
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "9", cy: "7", r: "4" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "19", y1: "8", x2: "19", y2: "14" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("line", { x1: "16", y1: "11", x2: "22", y2: "11" })
        ] })
      }
    )
  ] });
};
const UserNovoClienteCompleto = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [isSaving, setIsSaving] = reactExports.useState(false);
  const [isCnpjLoading, setIsCnpjLoading] = reactExports.useState(false);
  const [tipoDocumento, setTipoDocumento] = reactExports.useState("CNPJ");
  const [documento, setDocumento] = reactExports.useState("");
  const [razaoSocial, setRazaoSocial] = reactExports.useState("");
  const [nomeFantasia, setNomeFantasia] = reactExports.useState("");
  const [nome, setNome] = reactExports.useState("");
  const [telefones, setTelefones] = reactExports.useState([]);
  const [novoTelefone, setNovoTelefone] = reactExports.useState({
    numero: "",
    tipo: "Celular",
    whatsapp: false
  });
  const [emails, setEmails] = reactExports.useState([]);
  const [novoEmail, setNovoEmail] = reactExports.useState("");
  const [cep, setCep] = reactExports.useState("");
  const [endereco, setEndereco] = reactExports.useState("");
  const [numero, setNumero] = reactExports.useState("");
  const [complemento, setComplemento] = reactExports.useState("");
  const [bairro, setBairro] = reactExports.useState("");
  const [cidade, setCidade] = reactExports.useState("");
  const [estado, setEstado] = reactExports.useState("");
  const [isCliente, setIsCliente] = reactExports.useState(true);
  const [isFuncionario, setIsFuncionario] = reactExports.useState(false);
  const [isVendedor, setIsVendedor] = reactExports.useState(false);
  const [isFornecedor, setIsFornecedor] = reactExports.useState(false);
  const [isTransportadora, setIsTransportadora] = reactExports.useState(false);
  const [observacaoNfe, setObservacaoNfe] = reactExports.useState("");
  const [observacaoInterna, setObservacaoInterna] = reactExports.useState("");
  const formatarTelefone2 = (telefone, tipo) => {
    if (!telefone) return "";
    const numeroLimpo = telefone.replace(/\D/g, "");
    if (tipo === "Fixo") {
      return numeroLimpo.replace(/^(\d{0,2})(\d{0,4})(\d{0,4}).*/, (_2, ddd, parte1, parte2) => {
        let resultado = "";
        if (ddd) resultado += `(${ddd}`;
        if (ddd && (parte1 || parte2)) resultado += ") ";
        if (parte1) resultado += parte1;
        if (parte1 && parte2) resultado += "-";
        if (parte2) resultado += parte2;
        return resultado;
      });
    } else if (tipo === "Celular") {
      return numeroLimpo.replace(/^(\d{0,2})(\d{0,1})(\d{0,4})(\d{0,4}).*/, (_2, ddd, digito9, parte1, parte2) => {
        let resultado = "";
        if (ddd) resultado += `(${ddd}`;
        if (ddd && (digito9 || parte1 || parte2)) resultado += ") ";
        if (digito9) resultado += `${digito9} `;
        if (parte1) resultado += parte1;
        if (parte1 && parte2) resultado += "-";
        if (parte2) resultado += parte2;
        return resultado;
      });
    } else {
      if (numeroLimpo.length <= 10) {
        return numeroLimpo.replace(/(\d{2})(\d{4})(\d{4})/, "($1) $2-$3");
      } else {
        return numeroLimpo.replace(/(\d{2})(\d{1})(\d{4})(\d{4})/, "($1) $2 $3-$4");
      }
    }
  };
  const handleNovoTelefoneChange = (e) => {
    const valor = e.target.value;
    setNovoTelefone({
      ...novoTelefone,
      numero: formatarTelefone2(valor, novoTelefone.tipo)
    });
  };
  const handleTipoTelefoneChange = (tipo) => {
    setNovoTelefone({
      ...novoTelefone,
      tipo,
      numero: novoTelefone.numero ? formatarTelefone2(novoTelefone.numero.replace(/\D/g, ""), tipo) : ""
    });
  };
  const handleWhatsappChange = (e) => {
    setNovoTelefone({
      ...novoTelefone,
      whatsapp: e.target.checked
    });
  };
  const adicionarTelefone = () => {
    if (!novoTelefone.numero) {
      showMessage("error", "Digite um número de telefone");
      return;
    }
    const numeroLimpo = novoTelefone.numero.replace(/\D/g, "");
    if (novoTelefone.tipo === "Fixo" && numeroLimpo.length !== 10 || novoTelefone.tipo === "Celular" && numeroLimpo.length !== 11) {
      showMessage("error", `Número de ${novoTelefone.tipo.toLowerCase()} inválido`);
      return;
    }
    setTelefones([...telefones, { ...novoTelefone }]);
    setNovoTelefone({
      numero: "",
      tipo: "Celular",
      whatsapp: false
    });
  };
  const removerTelefone = (index2) => {
    const novosTelefones = [...telefones];
    novosTelefones.splice(index2, 1);
    setTelefones(novosTelefones);
  };
  const validarEmail = (email) => {
    const emailRegex = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/;
    return emailRegex.test(email);
  };
  const adicionarEmail = () => {
    if (!novoEmail.trim()) {
      showMessage("error", "Digite um email");
      return;
    }
    if (!validarEmail(novoEmail)) {
      showMessage("error", "Email inválido");
      return;
    }
    if (emails.includes(novoEmail.toLowerCase())) {
      showMessage("error", "Este email já foi adicionado");
      return;
    }
    setEmails([...emails, novoEmail.toLowerCase()]);
    setNovoEmail("");
  };
  const removerEmail = (index2) => {
    const novosEmails = [...emails];
    novosEmails.splice(index2, 1);
    setEmails(novosEmails);
  };
  const formatarCNPJ = (cnpj) => {
    if (!cnpj) return "";
    const numeroLimpo = cnpj.replace(/\D/g, "");
    return numeroLimpo.replace(/^(\d{2})(\d)/, "$1.$2").replace(/^(\d{2})\.(\d{3})(\d)/, "$1.$2.$3").replace(/\.(\d{3})(\d)/, ".$1/$2").replace(/(\d{4})(\d)/, "$1-$2").substring(0, 18);
  };
  const formatarCPF = (cpf) => {
    if (!cpf) return "";
    const numeroLimpo = cpf.replace(/\D/g, "");
    return numeroLimpo.replace(/(\d{3})(\d)/, "$1.$2").replace(/(\d{3})(\d)/, "$1.$2").replace(/(\d{3})(\d{1,2})/, "$1-$2").substring(0, 14);
  };
  const handleDocumentoChange = (e) => {
    const valor = e.target.value;
    const formatado = tipoDocumento === "CNPJ" ? formatarCNPJ(valor) : formatarCPF(valor);
    setDocumento(formatado);
  };
  const validarCNPJ = (cnpj) => {
    cnpj = cnpj.replace(/[^\d]+/g, "");
    if (cnpj === "") return false;
    if (cnpj.length !== 14) return false;
    if (cnpj === "00000000000000" || cnpj === "11111111111111" || cnpj === "22222222222222" || cnpj === "33333333333333" || cnpj === "44444444444444" || cnpj === "55555555555555" || cnpj === "66666666666666" || cnpj === "77777777777777" || cnpj === "88888888888888" || cnpj === "99999999999999") {
      return false;
    }
    let tamanho = cnpj.length - 2;
    let numeros = cnpj.substring(0, tamanho);
    const digitos = cnpj.substring(tamanho);
    let soma = 0;
    let pos = tamanho - 7;
    for (let i = tamanho; i >= 1; i--) {
      soma += parseInt(numeros.charAt(tamanho - i)) * pos--;
      if (pos < 2) pos = 9;
    }
    let resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
    if (resultado !== parseInt(digitos.charAt(0))) return false;
    tamanho = tamanho + 1;
    numeros = cnpj.substring(0, tamanho);
    soma = 0;
    pos = tamanho - 7;
    for (let i = tamanho; i >= 1; i--) {
      soma += parseInt(numeros.charAt(tamanho - i)) * pos--;
      if (pos < 2) pos = 9;
    }
    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
    if (resultado !== parseInt(digitos.charAt(1))) return false;
    return true;
  };
  const buscarCNPJ = async () => {
    try {
      const cnpjLimpo = documento.replace(/\D/g, "");
      if (cnpjLimpo.length !== 14) {
        showMessage("error", "CNPJ inválido. O CNPJ deve conter 14 dígitos.");
        return;
      }
      if (!validarCNPJ(cnpjLimpo)) {
        showMessage("error", "CNPJ inválido. Verifique os dígitos informados.");
        return;
      }
      setIsCnpjLoading(true);
      const response = await fetch(`https://brasilapi.com.br/api/cnpj/v1/${cnpjLimpo}`);
      const data = await response.json();
      if (response.ok) {
        setRazaoSocial(data.razao_social || "");
        setNomeFantasia(data.nome_fantasia || "");
        setNome(data.nome_fantasia || data.razao_social || "");
        setCep(data.cep ? data.cep.replace(/(\d{5})(\d{3})/, "$1-$2") : "");
        setEndereco(data.logradouro || "");
        setNumero(data.numero || "");
        setComplemento(data.complemento || "");
        setBairro(data.bairro || "");
        setCidade(data.municipio || "");
        setEstado(data.uf || "");
        showMessage("success", "Dados do CNPJ carregados com sucesso!");
      } else {
        showMessage("error", data.message || "CNPJ não encontrado");
      }
    } catch (error) {
      console.error("Erro ao buscar CNPJ:", error);
      showMessage("error", "Erro ao buscar CNPJ. Tente novamente.");
    } finally {
      setIsCnpjLoading(false);
    }
  };
  const formatarCep = (cep2) => {
    const numeroLimpo = cep2.replace(/\D/g, "");
    return numeroLimpo.replace(/^(\d{5})(\d{3})$/, "$1-$2");
  };
  const handleCepChange = (e) => {
    const valor = e.target.value;
    setCep(formatarCep(valor));
  };
  const buscarCep = async () => {
    try {
      const cepLimpo = cep.replace(/\D/g, "");
      if (cepLimpo.length !== 8) {
        showMessage("error", "CEP inválido. O CEP deve conter 8 dígitos.");
        return;
      }
      const response = await fetch(`https://viacep.com.br/ws/${cepLimpo}/json/`);
      const data = await response.json();
      if (data.erro) {
        showMessage("error", "CEP não encontrado.");
        return;
      }
      setEndereco(data.logradouro || "");
      setBairro(data.bairro || "");
      setCidade(data.localidade || "");
      setEstado(data.uf || "");
      showMessage("success", "Endereço encontrado com sucesso!");
    } catch (error) {
      console.error("Erro ao buscar CEP:", error);
      showMessage("error", "Erro ao buscar CEP. Tente novamente.");
    }
  };
  const validateEmails = () => {
    if (emails.length === 0) return true;
    return emails.every((email) => validarEmail(email));
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!nome.trim()) {
      showMessage("error", "O nome do cliente é obrigatório");
      return;
    }
    if (telefones.length === 0) {
      showMessage("error", "Adicione pelo menos um telefone");
      return;
    }
    if (!validateEmails()) {
      showMessage("error", "Um ou mais emails são inválidos");
      return;
    }
    try {
      setIsSaving(true);
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error("Usuário não autenticado");
      const { data: usuarioData } = await supabase.from("usuarios").select("empresa_id").eq("id", userData.user.id).single();
      if (!(usuarioData == null ? void 0 : usuarioData.empresa_id)) throw new Error("Empresa não encontrada");
      const telefonesParaSalvar = telefones.map((tel) => ({
        ...tel,
        numero: tel.numero.replace(/\D/g, "")
      }));
      const telefonePrincipal = telefonesParaSalvar.length > 0 ? telefonesParaSalvar[0].numero : "";
      const { data: cliente, error: clienteError } = await supabase.from("clientes").insert({
        tipo_documento: tipoDocumento,
        documento: documento ? documento.replace(/\D/g, "") : null,
        razao_social: razaoSocial || null,
        nome_fantasia: nomeFantasia || null,
        nome,
        telefone: telefonePrincipal,
        telefones: telefonesParaSalvar,
        emails: emails.length > 0 ? emails : [],
        cep: cep ? cep.replace(/\D/g, "") : null,
        endereco: endereco || null,
        numero: numero || null,
        complemento: complemento || null,
        bairro: bairro || null,
        cidade: cidade || null,
        estado: estado || null,
        // Tipos de cliente
        is_cliente: isCliente,
        is_funcionario: isFuncionario,
        is_vendedor: isVendedor,
        is_fornecedor: isFornecedor,
        is_transportadora: isTransportadora,
        // Observações
        observacao_nfe: observacaoNfe || null,
        observacao_interna: observacaoInterna || null,
        empresa_id: usuarioData.empresa_id,
        usuario_id: userData.user.id
      }).select().single();
      if (clienteError) throw clienteError;
      showMessage("success", "Cliente cadastrado com sucesso!");
      navigate("/user/clientes");
    } catch (error) {
      console.error("Erro ao cadastrar cliente:", error);
      showMessage("error", error.message || "Erro ao cadastrar cliente");
    } finally {
      setIsSaving(false);
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6 pb-20", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          onClick: () => navigate("/user/clientes"),
          className: "p-2 rounded-lg bg-gray-800 text-gray-400 hover:text-white transition-colors",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowLeft, { size: 18 })
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-xl font-semibold text-white", children: "Novo Cliente" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, className: "space-y-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4 space-y-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-lg font-medium text-white mb-2", children: "Documento" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "radio",
                checked: tipoDocumento === "CNPJ",
                onChange: () => setTipoDocumento("CNPJ"),
                className: "mr-2 text-primary-500 focus:ring-primary-500/20"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "CNPJ" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "radio",
                checked: tipoDocumento === "CPF",
                onChange: () => setTipoDocumento("CPF"),
                className: "mr-2 text-primary-500 focus:ring-primary-500/20"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "CPF" })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
            tipoDocumento,
            " ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative flex-1", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { size: 18, className: "text-gray-500" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "text",
                  value: documento,
                  onChange: handleDocumentoChange,
                  className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                  placeholder: tipoDocumento === "CNPJ" ? "00.000.000/0000-00" : "000.000.000-00"
                }
              )
            ] }),
            tipoDocumento === "CNPJ" && /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                type: "button",
                onClick: buscarCNPJ,
                disabled: isCnpjLoading,
                className: "bg-primary-500 hover:bg-primary-600 text-white px-3 py-2 rounded-lg transition-colors disabled:opacity-70 disabled:cursor-not-allowed",
                children: isCnpjLoading ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18 })
              }
            )
          ] })
        ] }),
        tipoDocumento === "CNPJ" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
            "Razão Social ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: razaoSocial,
              onChange: (e) => setRazaoSocial(e.target.value),
              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
              placeholder: "Razão Social"
            }
          )
        ] }),
        tipoDocumento === "CNPJ" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
            "Nome Fantasia ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: nomeFantasia,
              onChange: (e) => setNomeFantasia(e.target.value),
              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
              placeholder: "Nome Fantasia"
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4 space-y-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-lg font-medium text-white mb-2", children: "Dados do Cliente" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
            "Nome ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 18, className: "text-gray-500" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "text",
                value: nome,
                onChange: (e) => setNome(e.target.value),
                className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                placeholder: "Nome completo",
                required: true
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
            "Telefones ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500", children: "*" })
          ] }),
          telefones.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-3 space-y-2", children: telefones.map((tel, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "div",
            {
              className: "flex items-center justify-between bg-gray-800/70 rounded-lg p-2 border border-gray-700",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Phone, { size: 18, className: tel.whatsapp ? "text-green-500" : "text-gray-500" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: tel.numero }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-gray-400", children: [
                      tel.tipo,
                      tel.whatsapp ? " - WhatsApp" : ""
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => removerTelefone(index2),
                    className: "text-red-400 hover:text-red-300 p-1",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                  }
                )
              ]
            },
            index2
          )) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3 bg-gray-800/30 p-3 rounded-lg border border-gray-700", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-sm font-medium text-gray-300", children: "Adicionar telefone" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "radio",
                    checked: novoTelefone.tipo === "Celular",
                    onChange: () => handleTipoTelefoneChange("Celular"),
                    className: "mr-2 text-primary-500 focus:ring-primary-500/20"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "Celular" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "radio",
                    checked: novoTelefone.tipo === "Fixo",
                    onChange: () => handleTipoTelefoneChange("Fixo"),
                    className: "mr-2 text-primary-500 focus:ring-primary-500/20"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "Fixo" })
              ] })
            ] }),
            novoTelefone.tipo === "Celular" && /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "checkbox",
                  checked: novoTelefone.whatsapp,
                  onChange: handleWhatsappChange,
                  className: "mr-2 text-primary-500 focus:ring-primary-500/20"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white", children: "Este número tem WhatsApp" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative flex-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Phone, { size: 18, className: "text-gray-500" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: novoTelefone.numero,
                    onChange: handleNovoTelefoneChange,
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: novoTelefone.tipo === "Celular" ? "(00) 0 0000-0000" : "(00) 0000-0000"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  type: "button",
                  onClick: adicionarTelefone,
                  className: "bg-primary-500 hover:bg-primary-600 text-white px-3 py-2 rounded-lg transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 18 })
                }
              )
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
            "Emails ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
          ] }),
          emails.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-3 space-y-2", children: emails.map((email, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "div",
            {
              className: "flex items-center justify-between bg-gray-800/70 rounded-lg p-2 border border-gray-700",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Mail, { size: 18, className: "text-gray-500" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-white", children: email }) })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => removerEmail(index2),
                    className: "text-red-400 hover:text-red-300 p-1",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { size: 16 })
                  }
                )
              ]
            },
            index2
          )) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3 bg-gray-800/30 p-3 rounded-lg border border-gray-700", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-sm font-medium text-gray-300", children: "Adicionar email" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative flex-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Mail, { size: 18, className: "text-gray-500" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "email",
                    value: novoEmail,
                    onChange: (e) => setNovoEmail(e.target.value),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "email@exemplo.com",
                    onKeyPress: (e) => {
                      if (e.key === "Enter") {
                        e.preventDefault();
                        adicionarEmail();
                      }
                    }
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  type: "button",
                  onClick: adicionarEmail,
                  className: "bg-primary-500 hover:bg-primary-600 text-white px-3 py-2 rounded-lg transition-colors",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, { size: 18 })
                }
              )
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4 space-y-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-lg font-medium text-white mb-2", children: "Endereço" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
            "CEP ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative flex-1", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(MapPin, { size: 18, className: "text-gray-500" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "text",
                  value: cep,
                  onChange: handleCepChange,
                  className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                  placeholder: "00000-000"
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                type: "button",
                onClick: buscarCep,
                className: "bg-primary-500 hover:bg-primary-600 text-white px-3 py-2 rounded-lg transition-colors",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { size: 18 })
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
            "Endereço ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: endereco,
              onChange: (e) => setEndereco(e.target.value),
              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
              placeholder: "Rua, Avenida, etc."
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
              "Número ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "text",
                value: numero,
                onChange: (e) => setNumero(e.target.value),
                className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                placeholder: "Número"
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
              "Complemento ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "text",
                value: complemento,
                onChange: (e) => setComplemento(e.target.value),
                className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                placeholder: "Apto, Sala, etc."
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
            "Bairro ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: bairro,
              onChange: (e) => setBairro(e.target.value),
              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
              placeholder: "Bairro"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
              "Cidade ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "text",
                value: cidade,
                onChange: (e) => setCidade(e.target.value),
                className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                placeholder: "Cidade"
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
              "Estado ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "text",
                value: estado,
                onChange: (e) => setEstado(e.target.value),
                className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                placeholder: "UF",
                maxLength: 2
              }
            )
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4 space-y-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-lg font-medium text-white mb-2", children: "Tipos de Cliente" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-400 mb-4", children: "Selecione os tipos que se aplicam a este cliente. Você pode marcar múltiplas opções." }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between bg-gray-800/50 rounded-lg p-3 border border-gray-700 min-h-[60px]", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 flex-1 min-w-0", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 16, className: "text-blue-400" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium whitespace-nowrap", children: "Cliente" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "relative inline-flex items-center cursor-pointer flex-shrink-0 ml-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "checkbox",
                  checked: isCliente,
                  onChange: (e) => setIsCliente(e.target.checked),
                  className: "sr-only peer"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between bg-gray-800/50 rounded-lg p-3 border border-gray-700 min-h-[60px]", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 flex-1 min-w-0", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-green-500/20 rounded-lg flex items-center justify-center flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 16, className: "text-green-400" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium whitespace-nowrap", children: "Funcionário" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "relative inline-flex items-center cursor-pointer flex-shrink-0 ml-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "checkbox",
                  checked: isFuncionario,
                  onChange: (e) => setIsFuncionario(e.target.checked),
                  className: "sr-only peer"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between bg-gray-800/50 rounded-lg p-3 border border-gray-700 min-h-[60px]", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 flex-1 min-w-0", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-purple-500/20 rounded-lg flex items-center justify-center flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 16, className: "text-purple-400" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium whitespace-nowrap", children: "Vendedor" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "relative inline-flex items-center cursor-pointer flex-shrink-0 ml-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "checkbox",
                  checked: isVendedor,
                  onChange: (e) => setIsVendedor(e.target.checked),
                  className: "sr-only peer"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between bg-gray-800/50 rounded-lg p-3 border border-gray-700 min-h-[60px]", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 flex-1 min-w-0", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-orange-500/20 rounded-lg flex items-center justify-center flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 16, className: "text-orange-400" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium whitespace-nowrap", children: "Fornecedor" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "relative inline-flex items-center cursor-pointer flex-shrink-0 ml-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "checkbox",
                  checked: isFornecedor,
                  onChange: (e) => setIsFornecedor(e.target.checked),
                  className: "sr-only peer"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between bg-gray-800/50 rounded-lg p-3 border border-gray-700 min-h-[60px]", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 flex-1 min-w-0", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 bg-red-500/20 rounded-lg flex items-center justify-center flex-shrink-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 16, className: "text-red-400" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-medium whitespace-nowrap", children: "Transportadora" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "relative inline-flex items-center cursor-pointer flex-shrink-0 ml-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "checkbox",
                  checked: isTransportadora,
                  onChange: (e) => setIsTransportadora(e.target.checked),
                  className: "sr-only peer"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500" })
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-4 space-y-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-lg font-medium text-white mb-2", children: "Observações" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Observação NFe" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "textarea",
            {
              value: observacaoNfe,
              onChange: (e) => setObservacaoNfe(e.target.value),
              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20 resize-none",
              placeholder: "Observações que aparecerão na NFe...",
              rows: 3
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Esta observação será incluída na NFe quando emitida para este cliente." })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Observação Interna" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "textarea",
            {
              value: observacaoInterna,
              onChange: (e) => setObservacaoInterna(e.target.value),
              className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20 resize-none",
              placeholder: "Observações internas sobre o cliente...",
              rows: 3
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Esta observação é apenas para uso interno e não aparecerá em documentos." })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          type: "submit",
          disabled: isSaving,
          className: "w-full flex items-center justify-center gap-2 bg-primary-500 hover:bg-primary-600 text-white py-3 px-4 rounded-lg transition-colors disabled:opacity-70 disabled:cursor-not-allowed",
          children: isSaving ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Salvando..." })
          ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Save, { size: 18 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Cadastrar Cliente" })
          ] })
        }
      )
    ] })
  ] });
};
const UserPerfilPage = () => {
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [isSaving, setIsSaving] = reactExports.useState(false);
  const [userData, setUserData] = reactExports.useState(null);
  const [nome, setNome] = reactExports.useState("");
  const [senha, setSenha] = reactExports.useState("");
  const [confirmarSenha, setConfirmarSenha] = reactExports.useState("");
  const [mostrarSenha, setMostrarSenha] = reactExports.useState(false);
  const [mostrarConfirmarSenha, setMostrarConfirmarSenha] = reactExports.useState(false);
  reactExports.useEffect(() => {
    loadUserData();
  }, []);
  const loadUserData = async () => {
    try {
      setIsLoading(true);
      const { data: authData } = await supabase.auth.getUser();
      if (!authData.user) return;
      const { data: userData2, error } = await supabase.from("usuarios").select("id, nome, email").eq("id", authData.user.id).single();
      if (error) throw error;
      setUserData(userData2);
      setNome(userData2.nome || "");
    } catch (error) {
      console.error("Erro ao carregar dados do usuário:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!nome.trim()) {
      showMessage("error", "O nome é obrigatório");
      return;
    }
    if (senha || confirmarSenha) {
      if (senha !== confirmarSenha) {
        showMessage("error", "As senhas não coincidem");
        return;
      }
      if (senha.length < 6) {
        showMessage("error", "A senha deve ter pelo menos 6 caracteres");
        return;
      }
    }
    try {
      setIsSaving(true);
      const { error: updateError } = await supabase.from("usuarios").update({ nome }).eq("id", userData == null ? void 0 : userData.id);
      if (updateError) throw updateError;
      if (senha) {
        const { error: passwordError } = await supabase.auth.updateUser({
          password: senha
        });
        if (passwordError) throw passwordError;
      }
      setSenha("");
      setConfirmarSenha("");
      showMessage("success", "Perfil atualizado com sucesso!");
    } catch (error) {
      showMessage("error", error.message || "Erro ao atualizar perfil");
    } finally {
      setIsSaving(false);
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-6", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-xl font-semibold text-white mb-4", children: "Meu Perfil" }),
    isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6 space-y-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-12 w-full bg-gray-800 rounded-lg animate-pulse" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-16 bg-gray-800 rounded mb-2 animate-pulse" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 w-full bg-gray-800 rounded-lg animate-pulse" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-16 bg-gray-800 rounded mb-2 animate-pulse" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 w-full bg-gray-800 rounded-lg animate-pulse" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-48 bg-gray-800 rounded mt-1 animate-pulse" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-24 bg-gray-800 rounded mb-2 animate-pulse" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 w-full bg-gray-800 rounded-lg animate-pulse" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 w-32 bg-gray-800 rounded mb-2 animate-pulse" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 w-full bg-gray-800 rounded-lg animate-pulse" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-3 w-64 bg-gray-800 rounded mt-1 animate-pulse" })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-10 w-full bg-gray-800 rounded-lg animate-pulse" })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        initial: { opacity: 0, y: 20 },
        animate: { opacity: 1, y: 0 },
        className: "bg-background-card rounded-lg border border-gray-800 p-6",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, className: "space-y-6", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Nome" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 18, className: "text-gray-500" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: nome,
                    onChange: (e) => setNome(e.target.value),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Seu nome completo"
                  }
                )
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Email" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Mail, { size: 18, className: "text-gray-500" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "email",
                    value: (userData == null ? void 0 : userData.email) || "",
                    readOnly: true,
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-gray-400 focus:outline-none cursor-not-allowed"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-500 text-xs mt-1", children: "O email não pode ser alterado" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: [
                "Nova Senha ",
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 text-xs", children: "(opcional)" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Lock, { size: 18, className: "text-gray-500" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: mostrarSenha ? "text" : "password",
                    value: senha,
                    onChange: (e) => setSenha(e.target.value),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-10 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Digite para alterar sua senha"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => setMostrarSenha(!mostrarSenha),
                    className: "absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-white",
                    children: mostrarSenha ? /* @__PURE__ */ jsxRuntimeExports.jsx(EyeOff, { size: 18 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Eye, { size: 18 })
                  }
                )
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-400 mb-2", children: "Confirmar Nova Senha" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Lock, { size: 18, className: "text-gray-500" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: mostrarConfirmarSenha ? "text" : "password",
                    value: confirmarSenha,
                    onChange: (e) => setConfirmarSenha(e.target.value),
                    className: "w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-10 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20",
                    placeholder: "Confirme sua nova senha",
                    disabled: !senha
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => setMostrarConfirmarSenha(!mostrarConfirmarSenha),
                    className: "absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-white",
                    disabled: !senha,
                    children: mostrarConfirmarSenha ? /* @__PURE__ */ jsxRuntimeExports.jsx(EyeOff, { size: 18 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Eye, { size: 18 })
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-500 text-xs mt-1", children: "Deixe em branco para manter a senha atual" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "submit",
              disabled: isSaving,
              className: "w-full flex items-center justify-center gap-2 bg-primary-500 hover:bg-primary-600 text-white py-2 px-4 rounded-lg transition-colors disabled:opacity-70 disabled:cursor-not-allowed",
              children: isSaving ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Salvando..." })
              ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Save, { size: 18 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Salvar Alterações" })
              ] })
            }
          )
        ] })
      }
    )
  ] });
};
const PageTitle = ({ title, description, bgColor }) => {
  reactExports.useEffect(() => {
    const originalTitle = document.title;
    document.title = title;
    let metaDescription = null;
    if (description) {
      metaDescription = document.querySelector('meta[name="description"]');
      if (!metaDescription) {
        metaDescription = document.createElement("meta");
        metaDescription.name = "description";
        document.head.appendChild(metaDescription);
      }
      metaDescription.content = description;
    }
    let metaThemeColor = null;
    if (bgColor) {
      metaThemeColor = document.querySelector('meta[name="theme-color"]');
      if (!metaThemeColor) {
        metaThemeColor = document.createElement("meta");
        metaThemeColor.name = "theme-color";
        document.head.appendChild(metaThemeColor);
      }
      metaThemeColor.content = bgColor;
    }
    return () => {
      document.title = originalTitle;
      if (metaDescription && description) {
        document.head.removeChild(metaDescription);
      }
      if (metaThemeColor && bgColor) {
        document.head.removeChild(metaThemeColor);
      }
    };
  }, [title, description, bgColor]);
  return null;
};
const NotaPedidoPage = () => {
  const { codigoPedido } = useParams();
  const [isLoading, setIsLoading] = reactExports.useState(true);
  const [pedido, setPedido] = reactExports.useState(null);
  const [cliente, setCliente] = reactExports.useState(null);
  const [empresa, setEmpresa] = reactExports.useState(null);
  const [formaPagamento, setFormaPagamento] = reactExports.useState(null);
  const [unidadesMedida, setUnidadesMedida] = reactExports.useState({});
  const [error, setError] = reactExports.useState(null);
  const [debugInfo, setDebugInfo] = reactExports.useState({});
  reactExports.useEffect(() => {
    const originalBodyBg = document.body.style.backgroundColor;
    const originalBodyColor = document.body.style.color;
    const originalDocumentBg = document.documentElement.style.backgroundColor;
    const rootElement = document.getElementById("root");
    const originalRootBg = (rootElement == null ? void 0 : rootElement.style.backgroundColor) || "";
    const originalRootColor = (rootElement == null ? void 0 : rootElement.style.color) || "";
    document.documentElement.style.backgroundColor = "white";
    document.body.style.backgroundColor = "white";
    document.body.style.color = "#333";
    if (rootElement) {
      rootElement.style.backgroundColor = "white";
      rootElement.style.color = "#333";
    }
    document.body.classList.add("pedido-publico");
    return () => {
      document.body.classList.remove("pedido-publico");
      document.documentElement.style.backgroundColor = originalDocumentBg;
      document.body.style.backgroundColor = originalBodyBg;
      document.body.style.color = originalBodyColor;
      if (rootElement) {
        rootElement.style.backgroundColor = originalRootBg;
        rootElement.style.color = originalRootColor;
      }
    };
  }, []);
  reactExports.useEffect(() => {
    const loadPedido = async () => {
      try {
        setIsLoading(true);
        setError(null);
        console.log("Iniciando carregamento do pedido:", { codigoPedido, url: window.location.href });
        if (!codigoPedido) {
          setError("Código de pedido inválido");
          return;
        }
        const cnpjRegex = /^(\d{14})(\d+)$/;
        const match = codigoPedido.match(cnpjRegex);
        console.log("Validação do código:", { codigoPedido, match });
        if (!match) {
          setError(`Formato de código inválido. Código recebido: ${codigoPedido}`);
          return;
        }
        const [_2, cnpj, numeroPedido] = match;
        let { data: empresaData, error: empresaError } = await supabase.from("empresas").select("*").eq("documento", cnpj).single();
        if (empresaError || !empresaData) {
          const cnpjFormatado = cnpj.replace(/^(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})$/, "$1.$2.$3/$4-$5");
          const result = await supabase.from("empresas").select("*").eq("documento", cnpjFormatado).single();
          empresaData = result.data;
          empresaError = result.error;
        }
        if (empresaError || !empresaData) {
          console.log("Erro ao carregar empresa:", empresaError);
          setError("Empresa não encontrada");
          return;
        }
        console.log("Empresa carregada:", empresaData);
        setEmpresa(empresaData);
        const { data: pedidoData, error: pedidoError } = await supabase.from("pedidos").select(`
            *,
            itens:pedidos_itens(
              id,
              produto_id,
              quantidade,
              valor_unitario,
              valor_total,
              observacao,
              produto:produtos(
                id,
                nome,
                codigo,
                unidade_medida_id
              )
            )
          `).eq("empresa_id", empresaData.id).eq("numero", numeroPedido).single();
        console.log("Query pedido:", {
          empresa_id: empresaData.id,
          numero: numeroPedido,
          resultado: pedidoData,
          erro: pedidoError
        });
        if (pedidoError || !pedidoData) {
          setError("Pedido não encontrado");
          return;
        }
        console.log("Pedido carregado:", pedidoData);
        if (!pedidoData.itens || !Array.isArray(pedidoData.itens)) {
          console.warn("Itens do pedido não é um array:", pedidoData.itens);
          pedidoData.itens = [];
        }
        if (!pedidoData.valor_subtotal) pedidoData.valor_subtotal = 0;
        if (!pedidoData.valor_desconto) pedidoData.valor_desconto = 0;
        if (!pedidoData.valor_acrescimo) pedidoData.valor_acrescimo = 0;
        if (!pedidoData.valor_total) pedidoData.valor_total = 0;
        setPedido(pedidoData);
        if (pedidoData.cliente_id) {
          const { data: clienteData, error: clienteError } = await supabase.from("clientes").select("*").eq("id", pedidoData.cliente_id).single();
          if (!clienteError && clienteData) {
            console.log("Cliente carregado:", clienteData);
            setCliente(clienteData);
          } else {
            console.log("Erro ao carregar cliente:", clienteError);
          }
        }
        if (pedidoData.forma_pagamento_id) {
          const { data: formaPagamentoData, error: formaPagamentoError } = await supabase.from("forma_pagamento_opcoes").select("*").eq("id", pedidoData.forma_pagamento_id).single();
          if (!formaPagamentoError && formaPagamentoData) {
            console.log("Forma de pagamento carregada:", formaPagamentoData);
            setFormaPagamento(formaPagamentoData);
          } else {
            console.log("Erro ao carregar forma de pagamento:", formaPagamentoError);
          }
        }
        const { data: unidadesData, error: unidadesError } = await supabase.from("unidade_medida").select("id, sigla").eq("empresa_id", empresaData.id);
        if (!unidadesError && unidadesData) {
          console.log("Unidades de medida carregadas:", unidadesData);
          const unidadesMap = {};
          unidadesData.forEach((unidade) => {
            unidadesMap[unidade.id] = unidade.sigla;
          });
          setUnidadesMedida(unidadesMap);
        } else {
          console.log("Erro ao carregar unidades de medida:", unidadesError);
        }
      } catch (error2) {
        console.error("Erro ao carregar pedido:", error2);
        const errorInfo = {
          message: error2.message || "Erro desconhecido",
          stack: error2.stack,
          codigoPedido,
          url: window.location.href,
          userAgent: navigator.userAgent,
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        };
        setDebugInfo(errorInfo);
        setError(`Erro ao carregar pedido: ${error2.message || "Erro desconhecido"}`);
      } finally {
        setIsLoading(false);
      }
    };
    loadPedido();
  }, [codigoPedido]);
  const getStatusText = (status) => {
    switch (status) {
      case "pendente":
        return "PENDENTE";
      case "entregue":
        return "ENTREGUE";
      case "faturado":
        return "FATURADO";
      case "cancelado":
        return "CANCELADO";
      default:
        return status.toUpperCase();
    }
  };
  console.log("Estado atual:", { isLoading, error, pedido, empresa, cliente, formaPagamento, unidadesMedida });
  if (pedido && !pedido.data_criacao) {
    console.warn("Pedido sem data de criação:", pedido);
    pedido.data_criacao = (/* @__PURE__ */ new Date()).toISOString();
  }
  if (isLoading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "nota-pedido-container flex items-center justify-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(PageTitle, { title: "Carregando pedido...", bgColor: "#ffffff" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 border-2 border-gray-300 border-t-gray-600 rounded-full animate-spin" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "ml-2 text-gray-600", children: "Carregando pedido..." })
    ] });
  }
  if (error || !pedido || !empresa) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "nota-pedido-container flex flex-col items-center justify-center p-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(PageTitle, { title: "Pedido não encontrado", bgColor: "#ffffff" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "max-w-md w-full text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-xl font-bold text-gray-800 mb-2", children: "Pedido não encontrado" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-600 mb-6", children: error || "Não foi possível encontrar as informações deste pedido." }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-left text-xs text-gray-500 mt-4 p-4 bg-gray-100 rounded-md overflow-auto", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-bold mb-2", children: "Detalhes para depuração:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("pre", { children: [
            "Error: ",
            error || "Nenhum erro específico"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("pre", { children: [
            "Pedido: ",
            pedido ? "Carregado" : "Não carregado"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("pre", { children: [
            "Empresa: ",
            empresa ? "Carregada" : "Não carregada"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("pre", { children: [
            "Código do Pedido: ",
            codigoPedido
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("pre", { children: [
            "URL: ",
            window.location.href
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("pre", { children: [
            "User Agent: ",
            navigator.userAgent
          ] }),
          debugInfo && Object.keys(debugInfo).length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("details", { className: "mt-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("summary", { className: "cursor-pointer font-bold", children: "Debug Info Completo" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { className: "mt-2 whitespace-pre-wrap", children: JSON.stringify(debugInfo, null, 2) })
          ] })
        ] })
      ] })
    ] });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "nota-pedido-container p-4 md:p-8 max-w-4xl mx-auto", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      PageTitle,
      {
        title: `Pedido #${pedido.numero} - ${empresa.nome}`,
        description: `Detalhes do pedido #${pedido.numero} de ${empresa.nome}`,
        bgColor: "#ffffff"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "nota-pedido-card p-6 md:p-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center border-b border-gray-300 pb-6 mb-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl font-bold text-gray-800", children: empresa.nome }),
        empresa.razao_social && empresa.razao_social !== empresa.nome && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-600", children: empresa.razao_social }),
        empresa.documento && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-600", children: [
          empresa.tipo_documento === "cnpj" ? "CNPJ: " : "CPF: ",
          formatarDocumento(empresa.documento, empresa.tipo_documento)
        ] }),
        (empresa.endereco || empresa.cidade) && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-600 mt-2", children: [
          empresa.endereco && `${empresa.endereco}, ${empresa.numero || "S/N"}`,
          empresa.complemento && ` - ${empresa.complemento}`,
          empresa.bairro && `, ${empresa.bairro}`,
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          empresa.cidade && `${empresa.cidade}`,
          empresa.estado && ` - ${empresa.estado}`,
          empresa.cep && ` - CEP: ${empresa.cep}`
        ] }),
        empresa.telefone && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-600 mt-1", children: [
          "Telefone: ",
          formatarTelefone(empresa.telefone)
        ] }),
        empresa.email && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-600", children: [
          "E-mail: ",
          empresa.email
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "border-b border-gray-300 pb-6 mb-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col md:flex-row justify-between items-start md:items-center mb-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("h2", { className: "text-xl font-bold text-gray-800", children: [
              "PEDIDO #",
              pedido.numero || "N/A"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-600", children: [
              "Data: ",
              formatarDataHora(pedido.data_criacao)
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-2 md:mt-0 text-right", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "inline-block px-3 py-1 bg-gray-200 text-gray-800 font-bold rounded-full", children: pedido.data_faturamento ? "FATURADO" : getStatusText(pedido.status || "pendente") }),
            pedido.data_faturamento && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-600 text-sm mt-1", children: [
              "Faturado em: ",
              formatarDataHora(pedido.data_faturamento)
            ] })
          ] })
        ] }),
        cliente && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-4 p-4 bg-gray-100 rounded-md", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-bold text-gray-800 mb-2", children: "CLIENTE" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-medium", children: cliente.nome }),
          cliente.documento && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-600", children: [
            cliente.tipo_documento === "cnpj" ? "CNPJ: " : "CPF: ",
            formatarDocumento(cliente.documento, cliente.tipo_documento)
          ] }),
          cliente.telefone && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-600", children: [
            "Telefone: ",
            formatarTelefone(cliente.telefone)
          ] }),
          (cliente.endereco || cliente.cidade) && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-600 mt-2", children: [
            "Endereço: ",
            cliente.endereco && `${cliente.endereco}, ${cliente.numero || "S/N"}`,
            cliente.complemento && ` - ${cliente.complemento}`,
            cliente.bairro && `, ${cliente.bairro}`,
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            cliente.cidade && `${cliente.cidade}`,
            cliente.estado && ` - ${cliente.estado}`,
            cliente.cep && ` - CEP: ${cliente.cep}`
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-bold text-gray-800 mb-4", children: "ITENS DO PEDIDO" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("table", { className: "w-full border-collapse", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "bg-gray-100", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "py-2 px-4 text-left border border-gray-300", children: "Código" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "py-2 px-4 text-left border border-gray-300", children: "Produto" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "py-2 px-4 text-center border border-gray-300", children: "Qtde" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "py-2 px-4 text-right border border-gray-300", children: "Valor Unit." }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "py-2 px-4 text-right border border-gray-300", children: "Subtotal" })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { children: pedido.itens && pedido.itens.length > 0 ? pedido.itens.map((item) => {
            var _a2, _b2, _c;
            return /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "border-b border-gray-300", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-2 px-4 text-left border border-gray-300", children: ((_a2 = item.produto) == null ? void 0 : _a2.codigo) || "N/A" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-2 px-4 text-left border border-gray-300", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: ((_b2 = item.produto) == null ? void 0 : _b2.nome) || "Produto não encontrado" }),
                item.observacao && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mt-1", children: item.observacao })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("td", { className: "py-2 px-4 text-center border border-gray-300", children: [
                item.quantidade,
                ((_c = item.produto) == null ? void 0 : _c.unidade_medida_id) && unidadesMedida[item.produto.unidade_medida_id] && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500 ml-1", children: unidadesMedida[item.produto.unidade_medida_id] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-2 px-4 text-right border border-gray-300", children: formatarPreco(item.valor_unitario) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-2 px-4 text-right border border-gray-300 font-medium", children: formatarPreco(item.valor_total) })
            ] }, item.id);
          }) : /* @__PURE__ */ jsxRuntimeExports.jsx("tr", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("td", { colSpan: 5, className: "py-4 text-center text-gray-500 border border-gray-300", children: "Nenhum item encontrado neste pedido." }) }) })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col md:flex-row gap-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-bold text-gray-800 mb-4", children: "FORMA DE PAGAMENTO" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 bg-gray-100 rounded-md", children: pedido.formas_pagamento && pedido.formas_pagamento.length > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-medium mb-2", children: "Pagamento em múltiplas formas:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: "space-y-2", children: pedido.formas_pagamento.map((forma, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "flex justify-between", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-600", children: forma.nome }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: formatarPreco(forma.valor) })
            ] }, index2)) })
          ] }) : formaPagamento ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-medium", children: formaPagamento.nome }),
            formaPagamento.tipo === "cartao_credito" && pedido.parcelas && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-600 mt-1", children: [
              pedido.parcelas,
              "x de ",
              formatarPreco(pedido.valor_total / pedido.parcelas)
            ] })
          ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-600", children: "Não especificada" }) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "md:w-64", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-bold text-gray-800 mb-4", children: "RESUMO" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 bg-gray-100 rounded-md", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-600", children: "Subtotal:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: formatarPreco(pedido.valor_subtotal) })
            ] }),
            pedido.valor_desconto > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-600", children: "Desconto:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-green-600", children: [
                "-",
                formatarPreco(pedido.valor_desconto)
              ] })
            ] }),
            pedido.valor_acrescimo > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-600", children: "Acréscimo:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-red-600", children: [
                "+",
                formatarPreco(pedido.valor_acrescimo)
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "pt-2 mt-2 border-t border-gray-300 flex justify-between", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-bold", children: "Total:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-bold", children: formatarPreco(pedido.valor_total) })
            ] })
          ] }) })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-8 pt-6 border-t border-gray-300 text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-600", children: "Este é um comprovante digital de pedido." }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-600 mt-2", children: [
          "Documento gerado em ",
          formatarDataHora((/* @__PURE__ */ new Date()).toISOString())
        ] })
      ] })
    ] })
  ] });
};
const FileExplorer = ({ empresaData }) => {
  const [estrutura, setEstrutura] = reactExports.useState({});
  const [isLoading, setIsLoading] = reactExports.useState(true);
  const [error, setError] = reactExports.useState("");
  const [expandedYears, setExpandedYears] = reactExports.useState({});
  const [downloadingZip, setDownloadingZip] = reactExports.useState(null);
  const [downloadingPdf, setDownloadingPdf] = reactExports.useState(null);
  const [filtroModelo, setFiltroModelo] = reactExports.useState("todos");
  const [dropdownAberto, setDropdownAberto] = reactExports.useState(false);
  reactExports.useEffect(() => {
    carregarEstrutura();
  }, [empresaData, filtroModelo]);
  reactExports.useEffect(() => {
    const handleClickOutside = (event) => {
      const target = event.target;
      if (dropdownAberto && !target.closest(".relative")) {
        setDropdownAberto(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [dropdownAberto]);
  const carregarEstrutura = async () => {
    try {
      setIsLoading(true);
      setError("");
      const estruturaCompleta = {
        "2025": {
          ano: "2025",
          meses: [
            {
              mes: "06",
              nome_mes: "Junho",
              tipos: {
                "Autorizados": { modelo55: 11, modelo65: 0 },
                "Cancelados": { modelo55: 10, modelo65: 0 },
                "CCe": { modelo55: 2, modelo65: 0 }
              },
              total_arquivos: 23,
              path: `/storage/xml/empresa_${empresaData.id}/2025/06`
            }
          ],
          total_arquivos: 23
        }
      };
      const estruturaFiltrada = aplicarFiltroModelo(estruturaCompleta, filtroModelo);
      setEstrutura(estruturaFiltrada);
      setExpandedYears({ "2025": true });
    } catch (error2) {
      console.error("Erro ao carregar estrutura:", error2);
      setError("Erro ao processar estrutura de arquivos");
    } finally {
      setIsLoading(false);
    }
  };
  const toggleYear = (ano) => {
    setExpandedYears((prev) => ({
      ...prev,
      [ano]: !prev[ano]
    }));
  };
  const handleDownloadMes = async (ano, mes) => {
    const downloadKey = `${ano}-${mes}`;
    try {
      setDownloadingZip(downloadKey);
      const response = await fetch("/backend/public/contador-download.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          action: "download_mes_completo",
          empresa_id: empresaData.id,
          ano,
          mes,
          modelo: filtroModelo
        })
      });
      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `${empresaData.nome_fantasia || empresaData.razao_social}_${ano}_${mes}.zip`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } else {
        throw new Error("Erro ao baixar arquivo");
      }
    } catch (error2) {
      console.error("Erro no download:", error2);
      alert("Erro ao baixar arquivo. Tente novamente.");
    } finally {
      setDownloadingZip(null);
    }
  };
  const aplicarFiltroModelo = (estrutura2, filtro) => {
    try {
      if (filtro === "todos") {
        const estruturaSimples = {};
        Object.keys(estrutura2).forEach((ano) => {
          const anoData = estrutura2[ano];
          estruturaSimples[ano] = {
            ano: anoData.ano,
            meses: anoData.meses.map((mes) => {
              var _a2, _b2, _c, _d, _e, _f;
              return {
                mes: mes.mes,
                nome_mes: mes.nome_mes,
                tipos: {
                  Autorizados: (((_a2 = mes.tipos.Autorizados) == null ? void 0 : _a2.modelo55) || 0) + (((_b2 = mes.tipos.Autorizados) == null ? void 0 : _b2.modelo65) || 0),
                  Cancelados: (((_c = mes.tipos.Cancelados) == null ? void 0 : _c.modelo55) || 0) + (((_d = mes.tipos.Cancelados) == null ? void 0 : _d.modelo65) || 0),
                  CCe: (((_e = mes.tipos.CCe) == null ? void 0 : _e.modelo55) || 0) + (((_f = mes.tipos.CCe) == null ? void 0 : _f.modelo65) || 0)
                },
                total_arquivos: mes.total_arquivos,
                path: mes.path
              };
            }),
            total_arquivos: anoData.total_arquivos
          };
        });
        return estruturaSimples;
      }
      const estruturaFiltrada = {};
      Object.keys(estrutura2).forEach((ano) => {
        const anoData = estrutura2[ano];
        const mesesFiltrados = anoData.meses.map((mes) => {
          var _a2, _b2, _c, _d, _e, _f;
          const tiposFiltrados = {
            Autorizados: filtro === "55" ? ((_a2 = mes.tipos.Autorizados) == null ? void 0 : _a2.modelo55) || 0 : ((_b2 = mes.tipos.Autorizados) == null ? void 0 : _b2.modelo65) || 0,
            Cancelados: filtro === "55" ? ((_c = mes.tipos.Cancelados) == null ? void 0 : _c.modelo55) || 0 : ((_d = mes.tipos.Cancelados) == null ? void 0 : _d.modelo65) || 0,
            CCe: filtro === "55" ? ((_e = mes.tipos.CCe) == null ? void 0 : _e.modelo55) || 0 : ((_f = mes.tipos.CCe) == null ? void 0 : _f.modelo65) || 0
          };
          const totalFiltrado = tiposFiltrados.Autorizados + tiposFiltrados.Cancelados + tiposFiltrados.CCe;
          return {
            mes: mes.mes,
            nome_mes: mes.nome_mes,
            tipos: tiposFiltrados,
            total_arquivos: totalFiltrado,
            path: mes.path
          };
        }).filter((mes) => mes.total_arquivos > 0);
        if (mesesFiltrados.length > 0) {
          estruturaFiltrada[ano] = {
            ano: anoData.ano,
            meses: mesesFiltrados,
            total_arquivos: mesesFiltrados.reduce((total, mes) => total + mes.total_arquivos, 0)
          };
        }
      });
      return estruturaFiltrada;
    } catch (error2) {
      console.error("Erro ao aplicar filtro de modelo:", error2);
      return {};
    }
  };
  const getTiposResumo = (tipos) => {
    const resumo = [];
    if (tipos.Autorizados > 0) resumo.push(`${tipos.Autorizados} Autorizados`);
    if (tipos.Cancelados > 0) resumo.push(`${tipos.Cancelados} Cancelados`);
    if (tipos.CCe > 0) resumo.push(`${tipos.CCe} CCe`);
    return resumo.join(", ") || "Nenhum arquivo";
  };
  const getFiltroTexto = () => {
    switch (filtroModelo) {
      case "todos":
        return "Todos os Modelos";
      case "55":
        return "NFe Modelo 55";
      case "65":
        return "NFe Modelo 65";
      default:
        return "Todos os Modelos";
    }
  };
  const getFiltroOpcoes = () => [
    { value: "todos", label: "Todos os Modelos", disponivel: true },
    { value: "55", label: "NFe Modelo 55", disponivel: true },
    { value: "65", label: "NFe Modelo 65", disponivel: false }
  ];
  if (isLoading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 p-8", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-6 h-6 border-2 border-primary-500/20 border-t-primary-500 rounded-full animate-spin" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Carregando estrutura de arquivos..." })
    ] }) }) });
  }
  if (error) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 p-8", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-center gap-3 text-red-400", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCircle, { className: "w-6 h-6" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: error })
    ] }) });
  }
  const anosDisponiveis = Object.keys(estrutura);
  if (anosDisponiveis.length === 0) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 p-8", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(FolderOpen, { className: "w-16 h-16 text-gray-600 mx-auto mb-4" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white mb-2", children: "Nenhum arquivo encontrado" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Não foram encontrados arquivos XML para esta empresa." })
    ] }) });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-6", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(FolderOpen, { className: "w-6 h-6 text-accent-500" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg font-semibold text-white", children: "Arquivos XML" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2 text-sm", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "Exibindo:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-accent-400 font-medium", children: getFiltroTexto() }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500", children: "•" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-gray-400", children: [
              anosDisponiveis.reduce((total, ano) => total + estrutura[ano].total_arquivos, 0),
              " arquivos"
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Button,
          {
            onClick: () => setDropdownAberto(!dropdownAberto),
            size: "sm",
            variant: "outline",
            className: "flex items-center gap-2",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Filter, { className: "w-4 h-4" }),
              "Filtrar",
              /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronDown, { className: `w-4 h-4 transition-transform ${dropdownAberto ? "rotate-180" : ""}` })
            ]
          }
        ),
        dropdownAberto && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-0 top-full mt-2 w-48 bg-background-card border border-gray-700 rounded-lg shadow-lg z-10", children: getFiltroOpcoes().map((opcao) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => {
              if (opcao.disponivel) {
                setFiltroModelo(opcao.value);
                setDropdownAberto(false);
              } else {
                alert("NFe modelo 65 ainda não implementado. Funcionalidade em desenvolvimento.");
              }
            },
            disabled: !opcao.disponivel,
            className: `w-full text-left px-4 py-3 text-sm transition-colors first:rounded-t-lg last:rounded-b-lg ${filtroModelo === opcao.value ? "bg-primary-500/20 text-primary-400 font-medium" : opcao.disponivel ? "text-gray-300 hover:bg-gray-800/50" : "text-gray-500 cursor-not-allowed"}`,
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: opcao.label }),
              !opcao.disponivel && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-gray-500", children: "(Em breve)" })
            ] })
          },
          opcao.value
        )) })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-4", children: anosDisponiveis.map((ano) => {
      const anoData = estrutura[ano];
      const isExpanded = expandedYears[ano];
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(
        motion.div,
        {
          initial: { opacity: 0, y: 10 },
          animate: { opacity: 1, y: 0 },
          className: "border border-gray-700 rounded-lg overflow-hidden",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "button",
              {
                onClick: () => toggleYear(ano),
                className: "w-full flex items-center justify-between p-4 bg-gray-800/50 hover:bg-gray-800/70 transition-colors",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Calendar, { className: "w-5 h-5 text-blue-400" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-left", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("h4", { className: "font-semibold text-white", children: [
                        "Ano ",
                        ano
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-400", children: [
                        anoData.meses.length,
                        " mês(es) disponível(is)"
                      ] })
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-sm text-gray-400", children: [
                      anoData.total_arquivos,
                      " arquivos"
                    ] }),
                    isExpanded ? /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronDown, { className: "w-5 h-5 text-gray-400" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRight, { className: "w-5 h-5 text-gray-400" })
                  ] })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { children: isExpanded && /* @__PURE__ */ jsxRuntimeExports.jsx(
              motion.div,
              {
                initial: { height: 0, opacity: 0 },
                animate: { height: "auto", opacity: 1 },
                exit: { height: 0, opacity: 0 },
                transition: { duration: 0.3 },
                className: "overflow-hidden",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 space-y-3", children: anoData.meses.map((mesData) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "div",
                  {
                    className: "flex items-center justify-between p-4 bg-background-input rounded-lg border border-gray-700",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Clock, { className: "w-5 h-5 text-gray-400" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-white font-medium", children: mesData.nome_mes }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm text-gray-400", children: getTiposResumo(mesData.tipos) }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-xs text-gray-500", children: [
                            "Total: ",
                            mesData.total_arquivos,
                            " arquivos"
                          ] })
                        ] })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Button,
                        {
                          onClick: () => handleDownloadMes(ano, mesData.mes),
                          size: "md",
                          variant: "default",
                          disabled: downloadingZip === `${ano}-${mesData.mes}`,
                          className: "flex items-center gap-2 bg-primary-600 hover:bg-primary-500 text-white font-medium px-4 py-2 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:hover:shadow-md",
                          children: downloadingZip === `${ano}-${mesData.mes}` ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Gerando ZIP..." })
                          ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Download, { className: "w-4 h-4" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "ZIP Completo" })
                          ] })
                        }
                      ) })
                    ]
                  },
                  mesData.mes
                )) })
              }
            ) })
          ]
        },
        ano
      );
    }) })
  ] });
};
const ContadorPortalPage = () => {
  const [cnpj, setCnpj] = reactExports.useState("");
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [empresaData, setEmpresaData] = reactExports.useState(null);
  const [error, setError] = reactExports.useState("");
  const formatCNPJ = (value) => {
    const numbers2 = value.replace(/\D/g, "");
    if (numbers2.length <= 14) {
      return numbers2.replace(/^(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})$/, "$1.$2.$3/$4-$5");
    }
    return value;
  };
  const validarCNPJ = (cnpj2) => {
    const numbers2 = cnpj2.replace(/\D/g, "");
    if (numbers2.length !== 14) return false;
    if (/^(\d)\1+$/.test(numbers2)) return false;
    let soma = 0;
    let peso = 2;
    for (let i = 11; i >= 0; i--) {
      soma += parseInt(numbers2[i]) * peso;
      peso = peso === 9 ? 2 : peso + 1;
    }
    const digito1 = soma % 11 < 2 ? 0 : 11 - soma % 11;
    if (parseInt(numbers2[12]) !== digito1) return false;
    soma = 0;
    peso = 2;
    for (let i = 12; i >= 0; i--) {
      soma += parseInt(numbers2[i]) * peso;
      peso = peso === 9 ? 2 : peso + 1;
    }
    const digito2 = soma % 11 < 2 ? 0 : 11 - soma % 11;
    return parseInt(numbers2[13]) === digito2;
  };
  const handleCnpjChange = (e) => {
    const formatted = formatCNPJ(e.target.value);
    setCnpj(formatted);
    setError("");
  };
  const handleBuscarEmpresa = async () => {
    if (!cnpj.trim()) {
      setError("Por favor, digite um CNPJ");
      return;
    }
    const cnpjNumbers = cnpj.replace(/\D/g, "");
    if (!validarCNPJ(cnpjNumbers)) {
      setError("CNPJ inválido. Verifique os dígitos informados.");
      return;
    }
    setIsLoading(true);
    setError("");
    try {
      const empresas = {
        "24163237000151": {
          id: "acd26a4f-7220-405e-9c96-faffb7e6480e",
          nome: "Empresa Teste",
          cnpj: "24163237000151",
          razao_social: "Empresa Teste LTDA",
          nome_fantasia: "Empresa Teste"
        }
      };
      if (empresas[cnpjNumbers]) {
        setEmpresaData(empresas[cnpjNumbers]);
      } else {
        setError("Empresa não encontrada");
        setEmpresaData(null);
      }
    } catch (error2) {
      console.error("Erro ao buscar empresa:", error2);
      setError("Erro ao processar dados. Tente novamente.");
      setEmpresaData(null);
    } finally {
      setIsLoading(false);
    }
  };
  const handleKeyPress = (e) => {
    if (e.key === "Enter") {
      handleBuscarEmpresa();
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "min-h-screen bg-background-dark", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("header", { className: "bg-background-card border-b border-gray-800 py-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "max-w-6xl mx-auto px-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Logo, { size: "sm" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-lg font-bold text-white leading-tight", children: "Portal do Contador" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-400 leading-tight", children: "Acesso aos XMLs das Notas Fiscais" })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-right", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-400 leading-tight", children: "Sistema" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm font-semibold text-white leading-tight", children: "Nexo PDV" })
      ] })
    ] }) }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("main", { className: "max-w-6xl mx-auto px-4 py-8", children: !empresaData ? (
      /* Formulário de Busca */
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          initial: { opacity: 0, y: 20 },
          animate: { opacity: 1, y: 0 },
          className: "max-w-md mx-auto",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-background-card rounded-lg border border-gray-800 p-8", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center mb-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { className: "w-16 h-16 text-accent-500 mx-auto mb-4" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white mb-2", children: "Acesso aos XMLs" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-400", children: "Digite o CNPJ da empresa para acessar os arquivos XML das Notas Fiscais" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block text-sm font-medium text-gray-300 mb-2", children: "CNPJ da Empresa" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    value: cnpj,
                    onChange: handleCnpjChange,
                    onKeyPress: handleKeyPress,
                    placeholder: "00.000.000/0000-00",
                    maxLength: 18,
                    className: "w-full bg-background-input border border-gray-700 rounded-lg py-3 px-4 text-white placeholder-gray-500 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20 transition-all duration-300"
                  }
                )
              ] }),
              error && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                motion.div,
                {
                  initial: { opacity: 0, scale: 0.95 },
                  animate: { opacity: 1, scale: 1 },
                  className: "flex items-center gap-2 p-3 bg-red-500/10 border border-red-500/20 rounded-lg text-red-400",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCircle, { className: "w-5 h-5 flex-shrink-0" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: error })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  onClick: handleBuscarEmpresa,
                  disabled: isLoading || !cnpj.trim(),
                  className: "w-full",
                  children: isLoading ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-center gap-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 border-2 border-white/20 border-t-white rounded-full animate-spin" }),
                    "Buscando..."
                  ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-center gap-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { className: "w-5 h-5" }),
                    "Buscar Empresa"
                  ] })
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 pt-6 border-t border-gray-800", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-gray-500 mb-2", children: "Acesso autorizado apenas para contadores" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-center gap-4 text-xs text-gray-600", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "flex items-center gap-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(FileText, { className: "w-3 h-3" }),
                  "XMLs NFe 55/65"
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "flex items-center gap-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Download, { className: "w-3 h-3" }),
                  "Download ZIP"
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "flex items-center gap-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Calendar, { className: "w-3 h-3" }),
                  "Por período"
                ] })
              ] })
            ] }) })
          ] })
        }
      )
    ) : (
      /* Interface de Navegação de Arquivos */
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        motion.div,
        {
          initial: { opacity: 0, y: 20 },
          animate: { opacity: 1, y: 0 },
          className: "space-y-6",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-background-card rounded-lg border border-gray-800 p-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "text-xl font-semibold text-white", children: empresaData.nome_fantasia || empresaData.razao_social }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-400", children: [
                  "CNPJ: ",
                  formatCNPJ(empresaData.cnpj)
                ] }),
                empresaData.razao_social && empresaData.nome_fantasia && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-500", children: empresaData.razao_social })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  onClick: () => {
                    setEmpresaData(null);
                    setCnpj("");
                  },
                  variant: "outline",
                  size: "sm",
                  children: "Nova Busca"
                }
              )
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(FileExplorer, { empresaData })
          ]
        }
      )
    ) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("footer", { className: "bg-background-card border-t border-gray-800 py-6 mt-12", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "max-w-6xl mx-auto px-4 text-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-500 text-sm", children: "© 2025 Nexo PDV - Portal do Contador | Acesso seguro aos XMLs das Notas Fiscais" }) }) })
  ] });
};
function App() {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(ErrorBoundary, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Routes, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/entrar", replace: true }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/entrar", element: /* @__PURE__ */ jsxRuntimeExports.jsx(EntrarPage, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/cadastrar", element: /* @__PURE__ */ jsxRuntimeExports.jsx(CadastrarPage, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/pedido/:codigoPedido", element: /* @__PURE__ */ jsxRuntimeExports.jsx(NotaPedidoPage, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/contador", element: /* @__PURE__ */ jsxRuntimeExports.jsx(ContadorPortalPage, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, { path: "/dashboard", element: /* @__PURE__ */ jsxRuntimeExports.jsx(DashboardLayout, {}), children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { index: true, element: /* @__PURE__ */ jsxRuntimeExports.jsx(DashboardPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "produtos", element: /* @__PURE__ */ jsxRuntimeExports.jsx(ProdutosPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "produtos/adicionais", element: /* @__PURE__ */ jsxRuntimeExports.jsx(AdicionaisPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "unidade-medida", element: /* @__PURE__ */ jsxRuntimeExports.jsx(UnidadeMedidaPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "clientes", element: /* @__PURE__ */ jsxRuntimeExports.jsx(ClientesPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "vendedores", element: /* @__PURE__ */ jsxRuntimeExports.jsx(VendedoresPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "pedidos", element: /* @__PURE__ */ jsxRuntimeExports.jsx(UserPedidosPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "pedidos/novo", element: /* @__PURE__ */ jsxRuntimeExports.jsx(UserNovoPedidoPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "pedidos/editar/:id", element: /* @__PURE__ */ jsxRuntimeExports.jsx(UserNovoPedidoPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "faturamento", element: /* @__PURE__ */ jsxRuntimeExports.jsx(FaturamentoPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "pdv", element: /* @__PURE__ */ jsxRuntimeExports.jsx(PDVPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "editar-pedido/:id", element: /* @__PURE__ */ jsxRuntimeExports.jsx(EditarPedidoPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "gestor", element: /* @__PURE__ */ jsxRuntimeExports.jsx(GestorPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "conexao", element: /* @__PURE__ */ jsxRuntimeExports.jsx(ConexaoPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "entregador", element: /* @__PURE__ */ jsxRuntimeExports.jsx(EntregadorPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "entregador/taxa", element: /* @__PURE__ */ jsxRuntimeExports.jsx(TaxaEntregaPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "estoque-minimo", element: /* @__PURE__ */ jsxRuntimeExports.jsx(EstoqueMinimoPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "nfe", element: /* @__PURE__ */ jsxRuntimeExports.jsx(NfePage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "inutilizacao", element: /* @__PURE__ */ jsxRuntimeExports.jsx(InutilizacaoPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "teste-email", element: /* @__PURE__ */ jsxRuntimeExports.jsx(TesteEmailPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "configuracoes", element: /* @__PURE__ */ jsxRuntimeExports.jsx(ConfiguracoesPage, {}) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, { path: "/user", element: /* @__PURE__ */ jsxRuntimeExports.jsx(UserMobileLayout, {}), children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { index: true, element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/user/dashboard", replace: true }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "dashboard", element: /* @__PURE__ */ jsxRuntimeExports.jsx(UserDashboardPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "pedidos", element: /* @__PURE__ */ jsxRuntimeExports.jsx(UserPedidosPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "pedidos/novo", element: /* @__PURE__ */ jsxRuntimeExports.jsx(UserNovoPedidoPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "pedidos/editar/:id", element: /* @__PURE__ */ jsxRuntimeExports.jsx(UserNovoPedidoPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "produtos", element: /* @__PURE__ */ jsxRuntimeExports.jsx(UserProdutosPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "clientes", element: /* @__PURE__ */ jsxRuntimeExports.jsx(UserClientesPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "clientes/novo", element: /* @__PURE__ */ jsxRuntimeExports.jsx(UserNovoClienteCompleto, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "perfil", element: /* @__PURE__ */ jsxRuntimeExports.jsx(UserPerfilPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "pdv", element: /* @__PURE__ */ jsxRuntimeExports.jsx(PDVPage, {}) })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Q,
      {
        position: "top-center",
        autoClose: 3e3,
        hideProgressBar: false,
        newestOnTop: true,
        closeOnClick: true,
        rtl: false,
        pauseOnFocusLoss: true,
        draggable: true,
        pauseOnHover: true,
        theme: "dark"
      }
    )
  ] });
}
createRoot(document.getElementById("root")).render(
  /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(BrowserRouter, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}) }) })
);
