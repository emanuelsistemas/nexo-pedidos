import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import KeepAlive from '../../components/comum/KeepAlive';
import { motion, AnimatePresence } from 'framer-motion';
import { QRCodeSVG } from 'qrcode.react';
import { useNavigate } from 'react-router-dom';
import {
  Search,
  ShoppingCart,
  Plus,
  Minus,
  Trash2,
  CreditCard,
  DollarSign,
  Calculator,
  Receipt,
  User,
  Package,
  Grid3X3,
  Utensils,
  Filter,
  X,
  ChevronLeft,
  ChevronRight,
  ChevronDown,
  ChevronUp,
  FileText,
  TrendingDown,
  TrendingUp,
  Clock,
  UserCheck,
  QrCode,
  Percent,
  ShoppingBag,
  AlertTriangle,
  Menu,
  Table,
  ArrowUpDown,
  BookOpen,
  MessageCircle,
  Bike,
  Pencil,
  Check,
  CheckCircle,
  MessageSquare,
  Maximize2,
  Minimize2,
  Camera,
  Save,
  Copy,
  Phone,
  Unlock,
  Truck,
  MapPin,
  RotateCcw,
  Edit
} from 'lucide-react';
import { supabase } from '../../lib/supabase';
import { toast } from 'react-toastify';
import { useAuthSession } from '../../hooks/useAuthSession';
import { formatarPreco } from '../../utils/formatters';
import { showMessage } from '../../utils/toast';
import { EVENT_TYPES, contarPedidosPendentes, PedidoEventData, RecarregarEventData } from '../../utils/eventSystem';
import { useCardapioDigitalNotifications } from '../../hooks/useCardapioDigitalNotifications';
import Sidebar from '../../components/dashboard/Sidebar';
import { useSidebarStore } from '../../store/sidebarStore';
import OpcoesAdicionaisModal from '../../components/pdv/OpcoesAdicionaisModal';
import SeletorSaboresModal from '../../components/pdv/SeletorSaboresModal';
import { useFullscreen } from '../../hooks/useFullscreen';
import { salvarAdicionaisItem } from '../../utils/pdvAdicionaisUtils'; // ✅ NOVO: Import da função utilitária
import LoadingScreen from '../../components/dashboard/LoadingScreen';

// ✅ NOVO: Declaração de tipo para timeout de validação
declare global {
  interface Window {
    validationTimeout: NodeJS.Timeout;
  }
}

interface Produto {
  id: string;
  nome: string;
  preco: number;
  codigo: string;
  codigo_barras?: string;
  descricao?: string;
  promocao: boolean;
  tipo_desconto?: string;
  valor_desconto?: number;
  desconto_quantidade: boolean;
  quantidade_minima?: number;
  tipo_desconto_quantidade?: string;
  valor_desconto_quantidade?: number;
  percentual_desconto_quantidade?: number;
  unidade_medida_id?: string;
  grupo_id: string;
  estoque_inicial?: number;
  grupo?: {
    nome: string;
  };
  unidade_medida?: {
    id: string;
    sigla: string;
    nome: string;
  };
  produto_fotos?: {
    url: string;
    principal: boolean;
  }[];
}

interface Grupo {
  id: string;
  nome: string;
}

interface ItemCarrinho {
  id: string; // Identificador único para cada item
  produto: Produto;
  quantidade: number;
  subtotal: number;
  pedido_origem_id?: string; // ID do pedido de origem (se importado)
  pedido_origem_numero?: string; // Número do pedido de origem (se importado)
  pedidos_origem?: Array<{ // Para itens agrupados de múltiplos pedidos
    id: string;
    numero: string;
    quantidade: number;
  }>;
  desconto?: {
    tipo: 'percentual' | 'valor';
    valor: number;
    valorDesconto: number;
    precoOriginal: number;
    precoComDesconto: number;
    percentualDesconto?: number;
    origemPedido?: boolean; // Indica se o desconto veio de um pedido importado
  };
  adicionais?: Array<{
    id: string;
    nome: string;
    preco: number;
    quantidade: number;
  }>;
  temOpcoesAdicionais?: boolean; // Indica se o produto tem opções adicionais disponíveis
  observacao?: string; // Observação adicional do produto
  vendedor_id?: string; // ID do vendedor responsável por este item
  vendedor_nome?: string; // Nome do vendedor responsável por este item
  vendaSemProduto?: boolean; // ✅ Indica se é um item de venda sem produto
  nome?: string; // ✅ Nome personalizado para venda sem produto
  nomeCliente?: string; // ✅ NOVO: Nome do cliente para este item
  comandaNumero?: string; // ✅ NOVO: Número da comanda para este item
  mesaNumero?: string; // ✅ NOVO: Número da mesa para este item
  tabela_preco_id?: string | null; // ✅ NOVO: ID da tabela de preços usada neste item
  tabela_preco_nome?: string | null; // ✅ NOVO: Nome da tabela de preços usada neste item
  sabores?: Array<{ // ✅ NOVO: Sabores selecionados para pizza meio a meio
    produto: any;
    porcentagem: number;
  }>;
  descricaoSabores?: string; // ✅ NOVO: Descrição formatada dos sabores
}

interface Cliente {
  id: string;
  nome: string;
  telefone?: string;
  telefones?: Array<{
    numero: string;
    tipo: string;
    whatsapp: boolean;
  }>;
  documento?: string;
}

interface EstoqueProduto {
  total: number;
  naoFaturado: number;
}

const PDVPage: React.FC = () => {
  const { withSessionCheck } = useAuthSession();
  const navigate = useNavigate();
  const { isExpanded, toggle } = useSidebarStore();

  // Hook para fullscreen
  const { enterFullscreen, exitFullscreen, isFullscreen } = useFullscreen();
  const [produtos, setProdutos] = useState<Produto[]>([]);
  const [grupos, setGrupos] = useState<Grupo[]>([]);
  const [carrinho, setCarrinho] = useState<ItemCarrinho[]>([]);
  const [grupoSelecionado, setGrupoSelecionado] = useState<string>('todos');
  const [searchTerm, setSearchTerm] = useState('');

  // ✅ NOVOS ESTADOS: Sistema de Tabelas de Preços
  const [trabalhaComTabelaPrecos, setTrabalhaComTabelaPrecos] = useState<boolean>(false);
  const [tabelasPrecos, setTabelasPrecos] = useState<any[]>([]);
  const [tabelaPrecoSelecionada, setTabelaPrecoSelecionada] = useState<string>('padrao');
  const [isLoading, setIsLoading] = useState(true);

  // ✅ NOVO: Estados para sistema de sabores
  const [trabalhaComSabores, setTrabalhaComSabores] = useState(false);
  const [tipoPrecoSabores, setTipoPrecoSabores] = useState<'sabor_mais_caro' | 'preco_medio'>('sabor_mais_caro');
  const [showSeletorSabores, setShowSeletorSabores] = useState(false);
  const [tabelaParaSabores, setTabelaParaSabores] = useState<any>(null);
  const [produtoParaSabores, setProdutoParaSabores] = useState<any>(null);
  const [showClienteModal, setShowClienteModal] = useState(false);
  const [clienteSelecionado, setClienteSelecionado] = useState<Cliente | null>(null);
  const [clientes, setClientes] = useState<Cliente[]>([]);
  const [searchClienteTerm, setSearchClienteTerm] = useState('');
  const [filteredClientes, setFilteredClientes] = useState<Cliente[]>([]);

  // Estados para modal de cadastro rápido de cliente
  const [showCadastroClienteModal, setShowCadastroClienteModal] = useState(false);
  const [cadastroClienteData, setCadastroClienteData] = useState({
    nome: '',
    telefones: [] as Array<{numero: string, tipo: 'Celular' | 'Fixo', whatsapp: boolean}>,
    cep: '',
    endereco: '',
    numero: '',
    complemento: '',
    bairro: '',
    cidade: '',
    estado: ''
  });
  const [novoTelefoneCliente, setNovoTelefoneCliente] = useState({
    numero: '',
    tipo: 'Celular' as 'Celular' | 'Fixo',
    whatsapp: false
  });
  const [salvandoCliente, setSalvandoCliente] = useState(false);

  // Estados para validação de taxa de entrega
  const [taxaEntregaConfig, setTaxaEntregaConfig] = useState<any>(null);
  const [bairrosDisponiveis, setBairrosDisponiveis] = useState<any[]>([]);
  const [bairroSelecionado, setBairroSelecionado] = useState('');
  const [showBairrosDropdown, setShowBairrosDropdown] = useState(false);
  const [searchBairro, setSearchBairro] = useState('');
  const [bairrosFiltrados, setBairrosFiltrados] = useState<any[]>([]);
  const [validandoAreaEntrega, setValidandoAreaEntrega] = useState(false);
  const [areaEntregaValida, setAreaEntregaValida] = useState<boolean | null>(null);
  const [mensagemAreaEntrega, setMensagemAreaEntrega] = useState('');

  // Estados para edição de cliente
  const [clienteParaEdicao, setClienteParaEdicao] = useState<Cliente | null>(null);

  // ✅ NOVO: Função para formatar telefone com máscara
  const formatarTelefone = (numero: string, tipo: string) => {
    if (!numero) return '';

    // Remove todos os caracteres não numéricos
    const numeroLimpo = numero.replace(/\D/g, '');

    if (tipo === 'Celular' && numeroLimpo.length === 11) {
      // Formato: (XX) X XXXX-XXXX
      return numeroLimpo.replace(/(\d{2})(\d{1})(\d{4})(\d{4})/, '($1) $2 $3-$4');
    } else if (tipo === 'Fixo' && numeroLimpo.length === 10) {
      // Formato: (XX) XXXX-XXXX
      return numeroLimpo.replace(/(\d{2})(\d{4})(\d{4})/, '($1) $2-$3');
    } else if (numeroLimpo.length === 11) {
      // Assume celular se tem 11 dígitos
      return numeroLimpo.replace(/(\d{2})(\d{1})(\d{4})(\d{4})/, '($1) $2 $3-$4');
    } else if (numeroLimpo.length === 10) {
      // Assume fixo se tem 10 dígitos
      return numeroLimpo.replace(/(\d{2})(\d{4})(\d{4})/, '($1) $2-$3');
    }

    // Retorna o número original se não conseguir formatar
    return numero;
  };

  const [showPagamentoModal, setShowPagamentoModal] = useState(false);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [itemParaRemover, setItemParaRemover] = useState<string | null>(null);
  const [showLimparCarrinhoModal, setShowLimparCarrinhoModal] = useState(false);
  const [currentDateTime, setCurrentDateTime] = useState(new Date());
  const [showGaleriaModal, setShowGaleriaModal] = useState(false);
  const [produtoSelecionadoGaleria, setProdutoSelecionadoGaleria] = useState<Produto | null>(null);
  const [fotoAtualIndex, setFotoAtualIndex] = useState(0);
  const [produtosEstoque, setProdutosEstoque] = useState<Record<string, EstoqueProduto>>({});
  const [loadingEstoque, setLoadingEstoque] = useState(false);
  const [pdvConfig, setPdvConfig] = useState<any>(null);
  const [empresaData, setEmpresaData] = useState<any>(null);

  // ✅ CALLBACK ESTÁVEL PARA NOTIFICAÇÕES
  const onPedidoChangeStable = useCallback(() => {
    if (modalCardapioAbertoRef.current) {
      carregarTodosPedidosCardapio();
    }
  }, [empresaData?.id]); // ✅ ADICIONAR empresaData?.id como dependência

  // ✅ HOOK PARA NOTIFICAÇÕES DO CARDÁPIO DIGITAL
  const {
    pedidosPendentes: pedidosCardapio,
    contadorPendentes: contadorCardapio,
    isLoading: loadingCardapio,
    aceitarPedido,
    rejeitarPedido,
    recarregarPedidos: recarregarPedidosCardapio,
    tocarSomNotificacao,
    somContinuoAtivo,
    pararSomContinuo,
    habilitarAudio,
    audioHabilitado,
    desabilitarSomPeloUsuario,
    reabilitarSomPeloUsuario,
    somDesabilitadoPeloUsuario,
    pedidosProcessando,
    marcarComoPreparando,
    marcarComoPronto,
    marcarComoSaiuParaEntrega,
    marcarComoEntregue
  } = useCardapioDigitalNotifications({
    empresaId: empresaData?.id || '',
    enabled: !!empresaData?.id,
    onPedidoChange: onPedidoChangeStable,
    aceitarAutomaticamente: pdvConfig?.aceitar_pedido_automatico_cardapio || false
  });



  // ✅ HOOK STATUS TRACKING (sem logs)
  useEffect(() => {
    // Status tracking silencioso
  }, [contadorCardapio, empresaData?.id]);

  // ✅ ESTADOS PARA FILTROS DO CARDÁPIO DIGITAL
  const [statusFilterCardapio, setStatusFilterCardapio] = useState<string>('pendente');
  const [searchCardapio, setSearchCardapio] = useState('');
  const [showFiltersCardapio, setShowFiltersCardapio] = useState(false);
  const [dataInicioCardapio, setDataInicioCardapio] = useState('');
  const [dataFimCardapio, setDataFimCardapio] = useState('');
  const [pedidosCardapioFiltrados, setPedidosCardapioFiltrados] = useState<any[]>([]);
  const [todosOsPedidosCardapio, setTodosOsPedidosCardapio] = useState<any[]>([]);

  // ✅ ESTADO DO SOM DO CARDÁPIO DIGITAL
  const [somCardapioAtivo, setSomCardapioAtivo] = useState(false);
  const [somMutadoPeloUsuario, setSomMutadoPeloUsuario] = useState(false);
  const [showModalHabilitarSom, setShowModalHabilitarSom] = useState(false);
  const [modalSomJaExibido, setModalSomJaExibido] = useState(false);
  const [showModalDesabilitarSom, setShowModalDesabilitarSom] = useState(false);
  const [showModalHabilitarSomInicial, setShowModalHabilitarSomInicial] = useState(false);
  const [modalSomInicialJaExibido, setModalSomInicialJaExibido] = useState(false);

  // ✅ FUNÇÃO PARA ALTERNAR SOM DO CARDÁPIO DIGITAL
  const alternarSomCardapio = useCallback(() => {
    const novoEstado = !somCardapioAtivo;
    setSomCardapioAtivo(novoEstado);

    if (novoEstado) {
      // Ativar som - tocar som de teste para habilitar áudio
      try {
        const audio = new Audio('/sounds/notification.mp3');
        audio.volume = 0.8;
        audio.play().then(() => {
          toast.success('Som do cardápio ativado!');
        }).catch((error) => {
          toast.error('Erro ao ativar som');
        });
      } catch (error) {
        toast.error('Erro ao ativar som');
      }
    } else {
      toast.info('Som do cardápio desativado');
    }
  }, [somCardapioAtivo]);

  // ✅ FUNÇÃO PARA ALTERNAR SOM (ATIVAR/MUTAR)
  const alternarSom = async () => {
    if (!audioHabilitado || somDesabilitadoPeloUsuario) {
      // Se áudio não está habilitado OU foi desabilitado pelo usuário, habilitar e ativar
      const habilitado = await habilitarAudio();
      if (habilitado) {
        reabilitarSomPeloUsuario(); // Reabilitar som no hook

        // ✅ NOVO: Se há pedidos pendentes, tocar som imediatamente
        if (contadorCardapio > 0) {
          await tocarSomNotificacao(true);
        }

        toast.success('Som do cardápio ativado!');
      } else {
        toast.error('Não foi possível habilitar o áudio');
      }
    } else if (audioHabilitado && somContinuoAtivo) {
      // Se áudio está habilitado e som está ativo, mostrar modal de confirmação
      setShowModalDesabilitarSom(true);
    } else {
      // Caso não esteja ativo, ativar
      reabilitarSomPeloUsuario(); // Reabilitar som no hook

      // ✅ NOVO: Se há pedidos pendentes, tocar som imediatamente
      if (contadorCardapio > 0) {
        // Tocar som imediatamente
      }

      const sucesso = await tocarSomNotificacao(true);
      if (sucesso) {
        toast.success('Som do cardápio ativado!');
      } else {
        toast.error('Erro ao ativar som');
      }
    }
  };

  // ✅ FUNÇÃO PARA CONFIRMAR DESABILITAÇÃO DO SOM
  const confirmarDesabilitarSom = () => {
    desabilitarSomPeloUsuario(); // Desabilitar som no hook
    setShowModalDesabilitarSom(false);
    toast.info('Som do cardápio desabilitado');
  };

  // ✅ FUNÇÃO PARA CANCELAR DESABILITAÇÃO DO SOM
  const cancelarDesabilitarSom = () => {
    setShowModalDesabilitarSom(false);
  };

  // ✅ FUNÇÃO PARA CONFIRMAR HABILITAÇÃO DO SOM INICIAL
  const confirmarHabilitarSomInicial = async () => {
    const habilitado = await habilitarAudio();
    if (habilitado) {
      reabilitarSomPeloUsuario(); // Reabilitar som no hook

      // Se há pedidos pendentes, tocar som imediatamente
      if (contadorCardapio > 0) {
        await tocarSomNotificacao(true);
      }

      toast.success('Som do cardápio ativado!');
    } else {
      toast.error('Não foi possível habilitar o áudio');
    }
    setShowModalHabilitarSomInicial(false);
  };

  // ✅ FUNÇÃO PARA CANCELAR HABILITAÇÃO DO SOM INICIAL
  const cancelarHabilitarSomInicial = () => {
    // ✅ CORREÇÃO: Desabilitar som pelo usuário quando escolher "Agora Não"
    desabilitarSomPeloUsuario();
    setShowModalHabilitarSomInicial(false);
    toast.info('Som do cardápio desabilitado');
  };

  // ✅ LOG PARA DEBUG
  useEffect(() => {
    // Debug removido
  }, [empresaData, contadorCardapio, pedidosCardapio]);

  // Estados para os modais do menu PDV
  const [showPedidosModal, setShowPedidosModal] = useState(false);
  const [showMesasModal, setShowMesasModal] = useState(false);
  const [showComandasModal, setShowComandasModal] = useState(false);
  const [showSangriaModal, setShowSangriaModal] = useState(false);
  const [showSuprimentoModal, setShowSuprimentoModal] = useState(false);
  const [showPagamentosModal, setShowPagamentosModal] = useState(false);
  const [showFiadosModal, setShowFiadosModal] = useState(false);

  // ✅ NOVO: Estados para controle de caixa
  const [showAberturaCaixaModal, setShowAberturaCaixaModal] = useState(false);
  const [valorAberturaCaixa, setValorAberturaCaixa] = useState('');
  const [caixaAberto, setCaixaAberto] = useState(false);
  const [loadingCaixa, setLoadingCaixa] = useState(false);

  // ✅ NOVO: Estados para liberar comanda
  const [showLiberarComandaModal, setShowLiberarComandaModal] = useState(false);
  const [vendaParaLiberarComanda, setVendaParaLiberarComanda] = useState<any>(null);
  const [loadingLiberarComanda, setLoadingLiberarComanda] = useState(false); // Iniciar como false

  // ✅ NOVO: Estados para modal de controle de caixa
  const [showCaixaModal, setShowCaixaModal] = useState(false);
  const [dadosCaixa, setDadosCaixa] = useState<any>(null);
  const [formasPagamentoCaixa, setFormasPagamentoCaixa] = useState<any[]>([]);
  const [valoresCaixa, setValoresCaixa] = useState<{[key: string]: string}>({});
  // ✅ NOVO: Estados para controle do modal de fiados
  const [clientesDevedores, setClientesDevedores] = useState<any[]>([]);
  const [loadingClientesDevedores, setLoadingClientesDevedores] = useState(false);
  const [pesquisaClienteFiado, setPesquisaClienteFiado] = useState('');
  const [dataInicioFiltro, setDataInicioFiltro] = useState('');
  const [dataFimFiltro, setDataFimFiltro] = useState('');
  const [totalSaldoDevedor, setTotalSaldoDevedor] = useState(0);
  const [showFiltrosData, setShowFiltrosData] = useState(false); // ✅ NOVO: Controlar expansão dos filtros de data

  // ✅ NOVO: Estados para modal de detalhes do cliente
  const [showDetalhesClienteModal, setShowDetalhesClienteModal] = useState(false);
  const [clienteSelecionadoDetalhes, setClienteSelecionadoDetalhes] = useState<any>(null);
  const [vendasFiadoCliente, setVendasFiadoCliente] = useState<any[]>([]);
  const [loadingVendasFiado, setLoadingVendasFiado] = useState(false);
  const [vendaExpandida, setVendaExpandida] = useState<string | null>(null);
  const [itensVendaExpandida, setItensVendaExpandida] = useState<any[]>([]);

  const [showVendaSemProdutoModal, setShowVendaSemProdutoModal] = useState(false);
  const [valorVendaSemProduto, setValorVendaSemProduto] = useState('');
  const [descricaoVendaSemProduto, setDescricaoVendaSemProduto] = useState('');
  const valorVendaSemProdutoRef = useRef<HTMLInputElement>(null);
  const [showMovimentosModal, setShowMovimentosModal] = useState(false);
  const [showDescontoTotalModal, setShowDescontoTotalModal] = useState(false);
  const [showCardapioDigitalModal, setShowCardapioDigitalModal] = useState(false);
  const [showDevolucoesModal, setShowDevolucoesModal] = useState(false);
  const [devolucoesPendentes, setDevolucoesPendentes] = useState<any[]>([]);
  const [searchDevolucoes, setSearchDevolucoes] = useState('');
  const [loadingDevolucoes, setLoadingDevolucoes] = useState(false);
  const [showConfirmarDevolucaoModal, setShowConfirmarDevolucaoModal] = useState(false);
  const [devolucaoSelecionada, setDevolucaoSelecionada] = useState<any>(null);

  // ✅ NOVO: Estados para modal de valor negativo
  const [showValorNegativoModal, setShowValorNegativoModal] = useState(false);
  const [valorNegativoInfo, setValorNegativoInfo] = useState<{
    itemRemovido: string;
    valorDevolucoes: number;
    valorItensPositivos: number;
    totalResultante: number;
  } | null>(null);

  // ✅ NOVO: Estados para modal de remoção de trocas
  const [showRemoverTrocasModal, setShowRemoverTrocasModal] = useState(false);

  // ✅ NOVO: Função para verificar se é troca exata
  const isTrocaExata = () => {
    const itensTroca = carrinho.filter(item => item.isDevolucao);
    const itensNormais = carrinho.filter(item => !item.isDevolucao);

    if (itensTroca.length === 0) return false;

    const valorItensNormais = itensNormais.reduce((total, item) => total + item.subtotal, 0);
    const valorTrocas = Math.abs(itensTroca.reduce((total, item) => total + item.subtotal, 0));

    return Math.abs(valorItensNormais - valorTrocas) < 0.01; // Tolerância para arredondamento
  };
  const [isVendaComTroca, setIsVendaComTroca] = useState(false);
  const [devolucaoAplicada, setDevolucaoAplicada] = useState<any>(null);
  const modalCardapioAbertoRef = useRef(false);
  const [pedidoSelecionado, setPedidoSelecionado] = useState<any>(null);
  const [descontoTotal, setDescontoTotal] = useState(0);
  const [tipoDescontoTotal, setTipoDescontoTotal] = useState<'percentual' | 'valor'>('percentual');
  const [descontoGlobal, setDescontoGlobal] = useState(0);

  // Função para aplicar desconto no total
  const aplicarDescontoTotal = () => {
    if (descontoTotal <= 0) {
      toast.error('Digite um valor de desconto válido');
      return;
    }

    const totalAtual = carrinho.reduce((total, item) => total + item.subtotal, 0);

    if (tipoDescontoTotal === 'percentual') {
      if (descontoTotal > 100) {
        toast.error('Desconto percentual não pode ser maior que 100%');
        return;
      }
      const valorDesconto = (totalAtual * descontoTotal) / 100;
      setDescontoGlobal(valorDesconto);
      toast.success(`Desconto de ${descontoTotal}% aplicado (${formatCurrency(valorDesconto)})`);
    } else {
      if (descontoTotal >= totalAtual) {
        toast.error('Desconto em valor não pode ser maior ou igual ao total da venda');
        return;
      }
      setDescontoGlobal(descontoTotal);
      toast.success(`Desconto de ${formatCurrency(descontoTotal)} aplicado`);
    }

    setShowDescontoTotalModal(false);
    setDescontoTotal(0);
  };

  // Função para remover desconto global
  const removerDescontoGlobal = () => {
    setDescontoGlobal(0);
    toast.info('Desconto no total removido');
  };

  // Função para aplicar devolução (nova implementação com itens negativos)
  const aplicarDevolucaoComoDesconto = async (devolucao: any) => {
    if (!devolucao || !devolucao.valor_total) {
      toast.error('Devolução inválida');
      return;
    }

    try {
      // Buscar os itens da devolução com dados completos do produto
      const { data: itensDevolucao, error } = await supabase
        .from('devolucao_itens')
        .select(`
          id,
          produto_id,
          produto_nome,
          produto_codigo,
          quantidade,
          preco_unitario,
          preco_total,
          produtos!inner(
            id,
            nome,
            codigo,
            codigo_barras,
            descricao,
            preco,
            unidade_medida_id,
            grupo_id,
            ncm,
            cfop,
            origem_produto,
            cst_icms,
            csosn_icms,
            cest,
            margem_st,
            aliquota_icms,
            aliquota_pis,
            aliquota_cofins,
            cst_pis,
            cst_cofins,
            produto_fotos(url, principal),
            unidade_medida:unidade_medida_id(sigla)
          )
        `)
        .eq('devolucao_id', devolucao.id)
        .eq('deletado', false);

      if (error) {
        console.error('Erro ao buscar itens da devolução:', error);
        toast.error('Erro ao carregar itens da devolução');
        return;
      }

      if (!itensDevolucao || itensDevolucao.length === 0) {
        toast.error('Nenhum item encontrado na devolução');
        return;
      }

      // Converter itens da devolução para formato do carrinho (com valores negativos)
      const itensCarrinho = itensDevolucao.map((item: any) => ({
        id: `devolucao-${item.id}`, // ID único para identificar como item de devolução
        produto: {
          id: item.produto_id,
          nome: item.produtos?.nome || item.produto_nome || 'Produto da Devolução',
          codigo: item.produtos?.codigo || item.produto_codigo || 'DEV',
          codigo_barras: item.produtos?.codigo_barras || null,
          descricao: item.produtos?.descricao || '',
          preco: item.produtos?.preco || Math.abs(parseFloat(item.preco_unitario) || 0),
          unidade_medida: item.produtos?.unidade_medida || { sigla: 'UN' },
          grupo_id: item.produtos?.grupo_id || null,
          unidade_medida_id: item.produtos?.unidade_medida_id || null,
          // ✅ DADOS FISCAIS COMPLETOS DO PRODUTO ATUAL
          ncm: item.produtos?.ncm || null,
          cfop: item.produtos?.cfop || null,
          origem_produto: item.produtos?.origem_produto || null,
          cst_icms: item.produtos?.cst_icms || null,
          csosn_icms: item.produtos?.csosn_icms || null,
          cest: item.produtos?.cest || null,
          margem_st: item.produtos?.margem_st || null,
          aliquota_icms: item.produtos?.aliquota_icms || null,
          aliquota_pis: item.produtos?.aliquota_pis || null,
          aliquota_cofins: item.produtos?.aliquota_cofins || null,
          cst_pis: item.produtos?.cst_pis || null,
          cst_cofins: item.produtos?.cst_cofins || null,
          // ✅ FOTOS DO PRODUTO
          produto_fotos: item.produtos?.produto_fotos || []
        },
        quantidade: parseFloat(item.quantidade) || 1,
        preco: -Math.abs(parseFloat(item.preco_unitario) || 0), // Valor negativo
        subtotal: -Math.abs(parseFloat(item.preco_total) || 0), // Valor negativo
        observacao: `DEVOLUÇÃO - ${devolucao.codigo_troca || devolucao.numero}`,
        isDevolucao: true, // Flag para identificar como item de devolução
        devolucao_origem_id: devolucao.id,
        devolucao_codigo: devolucao.codigo_troca || devolucao.numero,
        venda_origem_id: devolucao.venda_origem_id, // ID da venda original
        venda_origem_numero: devolucao.venda_origem_numero // Número da venda original
      }));

      // Validar itens antes de adicionar ao carrinho
      const itensValidos = itensCarrinho.filter(item => {
        const isValid = item.produto.id &&
                       item.produto.nome &&
                       !isNaN(item.quantidade) &&
                       !isNaN(item.preco) &&
                       !isNaN(item.subtotal);

        if (!isValid) {
          console.warn('Item de devolução inválido ignorado:', item);
        }

        return isValid;
      });

      if (itensValidos.length === 0) {
        toast.error('Nenhum item válido encontrado na devolução');
        return;
      }

      // Adicionar itens válidos da devolução ao carrinho
      setCarrinho(prev => [...prev, ...itensValidos]);

      // Marcar como venda com troca
      setIsVendaComTroca(true);
      setDevolucaoAplicada(devolucao);

      toast.success(`Troca aplicada! ${itensValidos.length} item(ns) da devolução #${devolucao.numero} adicionado(s) ao carrinho`);

      // Fechar modais
      setShowConfirmarDevolucaoModal(false);
      setShowDevolucoesModal(false);
      setDevolucaoSelecionada(null);

    } catch (error) {
      console.error('Erro ao aplicar devolução:', error);
      toast.error('Erro ao aplicar devolução');
    }
  };

  // Estados para o modal de movimentos
  const [vendas, setVendas] = useState<any[]>([]);
  const [loadingVendas, setLoadingVendas] = useState(false);

  // ✅ NOVO: Estados para modal de edição NFC-e
  const [showEditarNfceModal, setShowEditarNfceModal] = useState(false);
  const [vendaParaEditarNfce, setVendaParaEditarNfce] = useState<any>(null);
  const [itensNfceEdicao, setItensNfceEdicao] = useState<any[]>([]);
  const [loadingItensNfce, setLoadingItensNfce] = useState(false);
  const [reprocessandoNfce, setReprocessandoNfce] = useState(false);
  const [editandoNumeroNfce, setEditandoNumeroNfce] = useState(false);
  const [numeroNfceEditavel, setNumeroNfceEditavel] = useState<string>('');
  const [serieNfce, setSerieNfce] = useState<number>(1); // ✅ NOVO: Estado para série da NFC-e

  // ✅ NOVO: Estados para validação em tempo real do número
  const [validandoNumero, setValidandoNumero] = useState(false);
  const [numeroValido, setNumeroValido] = useState<boolean | null>(null);
  const [mensagemValidacao, setMensagemValidacao] = useState<string>('');

  // ✅ NOVO: Estados para emissão de NFC-e no modal de itens
  const [cpfCnpjModalItens, setCpfCnpjModalItens] = useState('');
  const [tipoDocumentoModalItens, setTipoDocumentoModalItens] = useState<'cpf' | 'cnpj'>('cpf');
  const [erroValidacaoModalItens, setErroValidacaoModalItens] = useState('');
  const [emitindoNfceModalItens, setEmitindoNfceModalItens] = useState(false);
  const [numeroNfceModalItens, setNumeroNfceModalItens] = useState<string>('');
  const [loadingProximoNumero, setLoadingProximoNumero] = useState(false);

  // ✅ NOVO: Estados para seletor de unidade de medida
  const [showSeletorUnidadeModal, setShowSeletorUnidadeModal] = useState(false);
  const [itemParaEditarUnidade, setItemParaEditarUnidade] = useState<any>(null);
  const [unidadesMedida, setUnidadesMedida] = useState<any[]>([]);
  const [loadingUnidades, setLoadingUnidades] = useState(false);

  // Estados para filtros avançados
  const [showFiltrosVendas, setShowFiltrosVendas] = useState(false);
  const [filtroStatus, setFiltroStatus] = useState<'todas' | 'canceladas' | 'finalizadas' | 'pedidos'>('todas');
  const [filtroNfce, setFiltroNfce] = useState<'todas' | 'pendentes' | 'autorizadas' | 'canceladas'>('todas'); // ✅ NOVO: Filtro específico para NFC-e
  const [filtroDataInicio, setFiltroDataInicio] = useState('');
  const [filtroDataFim, setFiltroDataFim] = useState('');
  const [filtroNumeroPedido, setFiltroNumeroPedido] = useState('');
  const [filtroNumeroVenda, setFiltroNumeroVenda] = useState('');

  // Estados para cancelamento de vendas
  const [showCancelamentoModal, setShowCancelamentoModal] = useState(false);
  const [vendaParaCancelar, setVendaParaCancelar] = useState<any>(null);
  const [motivoCancelamento, setMotivoCancelamento] = useState('');

  // Estados para exibir itens da venda
  const [showItensVendaModal, setShowItensVendaModal] = useState(false);
  const [vendaParaExibirItens, setVendaParaExibirItens] = useState<any>(null);
  const [itensVenda, setItensVenda] = useState<any[]>([]);
  const [loadingItensVenda, setLoadingItensVenda] = useState(false);

  // Estado para controlar visibilidade da área de produtos
  const [showAreaProdutos, setShowAreaProdutos] = useState(false);

  // ✅ NOVO: Estados para pré-carregamento de imagens
  const [imagensPreCarregadas, setImagensPreCarregadas] = useState<Set<string>>(new Set());
  const [preCarregandoImagens, setPreCarregandoImagens] = useState(false);

  // Estados para o modal de Pedidos
  const [pedidos, setPedidos] = useState<any[]>([]);
  const [loadingPedidos, setLoadingPedidos] = useState(false);
  const [searchPedidos, setSearchPedidos] = useState('');
  const [pedidosFiltrados, setPedidosFiltrados] = useState<any[]>([]);
  const [contadorPedidosPendentes, setContadorPedidosPendentes] = useState<number>(0);
  const [contadorNfcePendentes, setContadorNfcePendentes] = useState<number>(0);
  const [statusFilterPedidos, setStatusFilterPedidos] = useState<string>('pendente');
  const [showFiltersPedidos, setShowFiltersPedidos] = useState(false);

  // Estados para visualização detalhada do pedido
  const [pedidoDetalhado, setPedidoDetalhado] = useState<any>(null);
  const [showDetalhePedido, setShowDetalhePedido] = useState(false);

  // Estados para os modais do menu PDV (paginação removida)

  // Estados para modal de desconto
  const [showDescontoModal, setShowDescontoModal] = useState(false);
  const [itemParaDesconto, setItemParaDesconto] = useState<string | null>(null);
  const [tipoDesconto, setTipoDesconto] = useState<'percentual' | 'valor'>('percentual');
  const [valorDesconto, setValorDesconto] = useState('');
  const [novoValor, setNovoValor] = useState(0);

  // Chave para localStorage específica do PDV
  const PDV_STORAGE_KEY = 'nexo-pdv-state';

  // Estados para finalização de venda
  const [tipoPagamento, setTipoPagamento] = useState<'vista' | 'parcial'>('vista');
  const [formasPagamento, setFormasPagamento] = useState<any[]>([]);
  const [formaPagamentoSelecionada, setFormaPagamentoSelecionada] = useState<string | null>(null);

  // Estados para modal de parcelas
  const [showModalParcelas, setShowModalParcelas] = useState(false);
  const [parcelasSelecionadas, setParcelasSelecionadas] = useState(1);
  const [formaPagamentoPendente, setFormaPagamentoPendente] = useState<any>(null);
  const [parcelasFormaPagamento, setParcelasFormaPagamento] = useState<{[key: string]: number}>({});
  const [modalParcelasCallback, setModalParcelasCallback] = useState<((parcelas: number) => void) | null>(null);

  // Estados para modal PIX
  const [showModalPix, setShowModalPix] = useState(false);
  const [qrCodePix, setQrCodePix] = useState('');
  const [chavePix, setChavePix] = useState('');
  const [valorPix, setValorPix] = useState<number>(0);
  const [tipoFinalizacaoPendente, setTipoFinalizacaoPendente] = useState<string | null>(null);

  // ✅ NOVO: Estado para ambiente NFe (homologação/produção)
  const [ambienteNFe, setAmbienteNFe] = useState<'homologacao' | 'producao'>('homologacao');

  // Estados para pagamentos parciais
  const [valorParcial, setValorParcial] = useState<string>('');
  const [pagamentosParciais, setPagamentosParciais] = useState<Array<{
    id: number;
    forma: string;
    valor: number;
    tipo: 'eletronico' | 'dinheiro';
  }>>([]);
  const [trocoCalculado, setTrocoCalculado] = useState<number>(0);

  // Estados para confirmações de remoção
  const [showConfirmRemoveAll, setShowConfirmRemoveAll] = useState(false);
  const [showConfirmRemoveItem, setShowConfirmRemoveItem] = useState(false);
  const [itemToRemove, setItemToRemove] = useState<number | null>(null);

  // Estados para modal de processamento da venda
  const [showProcessandoVenda, setShowProcessandoVenda] = useState(false);
  const [etapaProcessamento, setEtapaProcessamento] = useState<string>('');
  const [vendaProcessadaId, setVendaProcessadaId] = useState<string | null>(null);
  const [numeroVendaProcessada, setNumeroVendaProcessada] = useState<string>('');

  // Estados específicos para modal de NFC-e
  const [statusProcessamento, setStatusProcessamento] = useState<'processando' | 'sucesso' | 'erro' | 'aguardando_impressao'>('processando');

  // Estados específicos para impressão
  const [dadosImpressao, setDadosImpressao] = useState<any>(null);
  const [tipoFinalizacaoAtual, setTipoFinalizacaoAtual] = useState<string>('');
  const [erroProcessamento, setErroProcessamento] = useState<string>('');
  const [numeroDocumentoReservado, setNumeroDocumentoReservado] = useState<number | null>(null);
  const [serieDocumentoReservado, setSerieDocumentoReservado] = useState<number | null>(null); // ✅ NOVO: Série reservada

  // Estados para tela de finalização final
  const [showFinalizacaoFinal, setShowFinalizacaoFinal] = useState(false);
  const [showFinalizacaoNaAreaPagamento, setShowFinalizacaoNaAreaPagamento] = useState(false);
  const [cpfCnpjNota, setCpfCnpjNota] = useState('');
  const [clienteEncontrado, setClienteEncontrado] = useState<Cliente | null>(null);
  const [tipoDocumento, setTipoDocumento] = useState<'cpf' | 'cnpj'>('cpf');
  const [erroValidacao, setErroValidacao] = useState<string>('');

  // Estado para confirmação de limpar carrinho
  const [showConfirmLimparCarrinho, setShowConfirmLimparCarrinho] = useState(false);

  // Estado para confirmação de limpeza geral do PDV
  const [showConfirmLimparTudoPDV, setShowConfirmLimparTudoPDV] = useState(false);

  // Estado para modal de produto não encontrado
  const [showProdutoNaoEncontrado, setShowProdutoNaoEncontrado] = useState(false);
  const [produtoNaoEncontradoTermo, setProdutoNaoEncontradoTermo] = useState('');

  // Estado para dados do usuário
  const [userData, setUserData] = useState<{ nome: string } | null>(null);

  // Estado para controlar visibilidade do menu no PDV
  const [showMenuPDV, setShowMenuPDV] = useState(false);

  // Estados para navegação do menu PDV
  const [menuStartIndex, setMenuStartIndex] = useState(0);
  const [visibleMenuItems, setVisibleMenuItems] = useState(9); // Quantos itens são visíveis

  // Estados para pedidos importados (múltiplos)
  const [pedidosImportados, setPedidosImportados] = useState<any[]>([]);
  const [showConfirmRemovePedidoImportado, setShowConfirmRemovePedidoImportado] = useState(false);
  const [pedidoParaRemover, setPedidoParaRemover] = useState<any>(null);
  const [showConfirmImportarPedido, setShowConfirmImportarPedido] = useState(false);
  const [pedidoParaImportar, setPedidoParaImportar] = useState<any>(null);

  // Estados para confirmação de faturamento do cardápio digital
  const [showConfirmFaturarPedido, setShowConfirmFaturarPedido] = useState(false);
  const [pedidoParaFaturar, setPedidoParaFaturar] = useState<any>(null);

  // Estados para descontos do cliente
  const [descontosCliente, setDescontosCliente] = useState<{
    prazo: Array<{ id: string; prazo_dias: number; percentual: number; tipo: 'desconto' | 'acrescimo' }>;
    valor: Array<{ valor_minimo: number; percentual: number; tipo: 'desconto' | 'acrescimo' }>;
  }>({ prazo: [], valor: [] });

  // Estado para desconto por prazo selecionado (importado do pedido)
  const [descontoPrazoSelecionado, setDescontoPrazoSelecionado] = useState<string | null>(null);

  // ✅ NOVO: Estados para venda em andamento (adaptado do sistema de rascunhos NFe)
  const [vendaEmAndamento, setVendaEmAndamento] = useState<{
    id: string;
    numero_venda: string;
    numero_nfce_reservado: number | null;
    serie_usuario: number | null;
    status_venda: 'aberta' | 'finalizada' | 'cancelada' | 'salva';
  } | null>(null);
  const [isEditingVenda, setIsEditingVenda] = useState(false);
  const [criandoVenda, setCriandoVenda] = useState(false); // ✅ Estado para evitar criações duplicadas

  // ✅ NOVO: Estados para modal de salvar venda
  const [showSalvarVendaModal, setShowSalvarVendaModal] = useState(false);

  // ✅ NOVO: Estados para vendas abertas (recuperar vendas salvas)
  const [showVendasAbertasModal, setShowVendasAbertasModal] = useState(false);
  const [vendasAbertas, setVendasAbertas] = useState<any[]>([]);
  const [contadorVendasAbertas, setContadorVendasAbertas] = useState(0);
  const [carregandoVendasAbertas, setCarregandoVendasAbertas] = useState(false);
  const [vendasExpandidas, setVendasExpandidas] = useState<Set<string>>(new Set());

  // Estados para filtros de vendas abertas
  const [showFiltrosVendasAbertas, setShowFiltrosVendasAbertas] = useState(false);
  const [filtroNomeCliente, setFiltroNomeCliente] = useState('');
  const [filtroMesa, setFiltroMesa] = useState('');
  const [filtroComanda, setFiltroComanda] = useState('');
  const [filtroDataInicioVendas, setFiltroDataInicioVendas] = useState('');
  const [filtroDataFimVendas, setFiltroDataFimVendas] = useState('');

  // ✅ NOVO: Estados para modal de Mesas
  const [vendasMesas, setVendasMesas] = useState<any[]>([]);
  const [contadorVendasMesas, setContadorVendasMesas] = useState(0);
  const [carregandoVendasMesas, setCarregandoVendasMesas] = useState(false);
  const [vendasMesasExpandidas, setVendasMesasExpandidas] = useState<Set<string>>(new Set());
  const [showFiltrosMesas, setShowFiltrosMesas] = useState(false);
  const [filtroMesaNumero, setFiltroMesaNumero] = useState('');
  const [filtroClienteMesa, setFiltroClienteMesa] = useState('');
  const [filtroDataInicioMesas, setFiltroDataInicioMesas] = useState('');
  const [filtroDataFimMesas, setFiltroDataFimMesas] = useState('');

  // ✅ NOVO: Estados para modal de Comandas
  const [vendasComandas, setVendasComandas] = useState<any[]>([]);
  const [contadorVendasComandas, setContadorVendasComandas] = useState(0);
  const [carregandoVendasComandas, setCarregandoVendasComandas] = useState(false);
  const [vendasComandasExpandidas, setVendasComandasExpandidas] = useState<Set<string>>(new Set());
  const [showFiltrosComandas, setShowFiltrosComandas] = useState(false);
  const [filtroComandaNumero, setFiltroComandaNumero] = useState('');
  const [filtroClienteComanda, setFiltroClienteComanda] = useState('');
  const [filtroDataInicioComandas, setFiltroDataInicioComandas] = useState('');
  const [filtroDataFimComandas, setFiltroDataFimComandas] = useState('');

  // ✅ NOVO: Estados para modal de Delivery Local
  const [showDeliveryModal, setShowDeliveryModal] = useState(false);
  const [vendasDelivery, setVendasDelivery] = useState<any[]>([]);
  const [contadorVendasDelivery, setContadorVendasDelivery] = useState(0);
  const [carregandoVendasDelivery, setCarregandoVendasDelivery] = useState(false);
  const [vendasDeliveryExpandidas, setVendasDeliveryExpandidas] = useState<Set<string>>(new Set());
  const [showFiltrosDelivery, setShowFiltrosDelivery] = useState(false);
  const [filtroClienteDelivery, setFiltroClienteDelivery] = useState('');
  const [filtroDataInicioDelivery, setFiltroDataInicioDelivery] = useState('');
  const [filtroDataFimDelivery, setFiltroDataFimDelivery] = useState('');

  // ✅ NOVO: Estados para observação da venda
  const [observacaoVenda, setObservacaoVenda] = useState<string>('');
  const [showObservacaoVendaModal, setShowObservacaoVendaModal] = useState(false);

  // ✅ NOVO: Estados para modal de aviso do Fiado
  const [showFiadoSemClienteModal, setShowFiadoSemClienteModal] = useState(false);

  // ✅ FUNÇÃO: Verificar se a forma de pagamento selecionada é Fiado
  const isFormaPagamentoFiado = () => {
    if (!formaPagamentoSelecionada) return false;

    const formaSelecionada = formasPagamento.find(forma => forma.id === formaPagamentoSelecionada);
    return formaSelecionada?.nome?.toLowerCase() === 'fiado';
  };

  // ✅ FUNÇÃO: Verificar se há cliente selecionado
  const hasClienteSelecionado = () => {
    return !!(clienteSelecionado ||
             (pedidosImportados.length > 0 && pedidosImportados[0]?.cliente) ||
             carrinho.some(item => item.cardapio_digital));
  };

  // Estados para modal de opções adicionais
  const [showOpcoesAdicionaisModal, setShowOpcoesAdicionaisModal] = useState(false);
  const [produtoParaAdicionais, setProdutoParaAdicionais] = useState<Produto | null>(null);
  const [itemCarrinhoParaAdicionais, setItemCarrinhoParaAdicionais] = useState<string | null>(null);

  // ✅ ADICIONADO: Estados que estavam faltando para adicionais
  const [showAdicionaisModal, setShowAdicionaisModal] = useState(false);
  const [itemParaAdicionais, setItemParaAdicionais] = useState<ItemCarrinho | null>(null);

  // Estados para edição de nome do produto
  const [itemEditandoNome, setItemEditandoNome] = useState<string | null>(null);
  const [nomeEditando, setNomeEditando] = useState<string>('');

  // Estados para observação adicional
  const [showObservacaoModal, setShowObservacaoModal] = useState(false);
  const [itemParaObservacao, setItemParaObservacao] = useState<string | null>(null);
  const [observacaoTexto, setObservacaoTexto] = useState<string>('');
  const [itemEditandoObservacao, setItemEditandoObservacao] = useState<string | null>(null);
  const [observacaoEditando, setObservacaoEditando] = useState<string>('');

  // ✅ NOVO: Estados para modal de Nome do Cliente (PRIMEIRA PRIORIDADE)
  const [showNomeClienteModal, setShowNomeClienteModal] = useState(false);
  const [nomeCliente, setNomeCliente] = useState('');
  const [produtoAguardandoNomeCliente, setProdutoAguardandoNomeCliente] = useState<Produto | null>(null);
  const [quantidadeAguardandoNomeCliente, setQuantidadeAguardandoNomeCliente] = useState<number>(1);
  const [vendaSemProdutoAguardandoNomeCliente, setVendaSemProdutoAguardandoNomeCliente] = useState<{nome: string, preco: number} | null>(null);

  // ✅ NOVO: Estados para modais de Comanda e Mesa
  const [showComandaModal, setShowComandaModal] = useState(false);
  const [showMesaModal, setShowMesaModal] = useState(false);
  const [comandaNumero, setComandaNumero] = useState('');
  const [mesaNumero, setMesaNumero] = useState('');

  // ✅ NOVO: Estados temporários para edição (para não perder valor ao cancelar)
  const [nomeClienteTemp, setNomeClienteTemp] = useState('');
  const [comandaNumeroTemp, setComandaNumeroTemp] = useState('');
  const [mesaNumeroTemp, setMesaNumeroTemp] = useState('');

  // ✅ NOVO: Efeito para desabilitar interação com fundo quando modais estão abertos
  useEffect(() => {
    const anyModalOpen = showNomeClienteModal || showComandaModal || showMesaModal;

    if (anyModalOpen) {
      // Desabilitar scroll e interação com o fundo
      document.body.style.overflow = 'hidden';
      document.body.style.pointerEvents = 'none';

      // ✅ NOVO: Remover foco de qualquer elemento ativo (campo de busca)
      if (document.activeElement && document.activeElement instanceof HTMLElement) {
        document.activeElement.blur();
      }
    } else {
      // Restaurar scroll e interação
      document.body.style.overflow = '';
      document.body.style.pointerEvents = '';
    }

    // Cleanup ao desmontar componente
    return () => {
      document.body.style.overflow = '';
      document.body.style.pointerEvents = '';
    };
  }, [showNomeClienteModal, showComandaModal, showMesaModal]);

  // ✅ NOVO: Efeito para focar no campo do modal quando abre
  useEffect(() => {
    if (showNomeClienteModal) {
      // ✅ GARANTIR: Inicializar estado temporário apenas uma vez quando modal abre
      if (nomeClienteTemp === '' && nomeCliente !== '') {
        setNomeClienteTemp(nomeCliente);
      }

      // Aguardar um tick para garantir que o modal foi renderizado
      setTimeout(() => {
        const input = document.querySelector('input[placeholder="Digite o nome do cliente"]') as HTMLInputElement;
        if (input) {
          input.focus();
          input.select(); // Selecionar texto se houver
        }
      }, 100);
    }
  }, [showNomeClienteModal]); // ✅ REMOVIDO: nomeCliente, nomeClienteTemp das dependências

  useEffect(() => {
    if (showComandaModal) {
      // ✅ GARANTIR: Inicializar estado temporário apenas uma vez quando modal abre
      if (comandaNumeroTemp === '' && comandaNumero !== '') {
        setComandaNumeroTemp(comandaNumero);
      }

      setTimeout(() => {
        const input = document.querySelector('input[type="number"]') as HTMLInputElement;
        if (input && input.placeholder.includes('a')) {
          input.focus();
          input.select();
        }
      }, 100);
    }
  }, [showComandaModal]); // ✅ REMOVIDO: comandaNumero, comandaNumeroTemp das dependências

  useEffect(() => {
    if (showMesaModal) {
      // ✅ GARANTIR: Inicializar estado temporário apenas uma vez quando modal abre
      if (mesaNumeroTemp === '' && mesaNumero !== '') {
        setMesaNumeroTemp(mesaNumero);
      }

      setTimeout(() => {
        const inputs = document.querySelectorAll('input[type="number"]') as NodeListOf<HTMLInputElement>;
        // Pegar o último input number (que seria o da mesa)
        const mesaInput = Array.from(inputs).find(input => input.placeholder.includes('a') && input.min);
        if (mesaInput) {
          mesaInput.focus();
          mesaInput.select();
        }
      }, 100);
    }
  }, [showMesaModal]); // ✅ REMOVIDO: mesaNumero, mesaNumeroTemp das dependências

  // ✅ NOVO: Efeito para focar no campo do modal quando abre
  useEffect(() => {
    if (showNomeClienteModal) {
      // Aguardar um tick para garantir que o modal foi renderizado
      setTimeout(() => {
        const input = document.querySelector('input[placeholder="Digite o nome do cliente"]') as HTMLInputElement;
        if (input) {
          input.focus();
          input.select(); // Selecionar texto se houver
        }
      }, 100);
    }
  }, [showNomeClienteModal]);

  useEffect(() => {
    if (showComandaModal) {
      setTimeout(() => {
        const input = document.querySelector('input[type="number"][placeholder*="a"]') as HTMLInputElement;
        if (input) {
          input.focus();
          input.select();
        }
      }, 100);
    }
  }, [showComandaModal]);

  useEffect(() => {
    if (showMesaModal) {
      setTimeout(() => {
        const input = document.querySelector('input[type="number"][min]') as HTMLInputElement;
        if (input && input.placeholder.includes('a')) {
          input.focus();
          input.select();
        }
      }, 100);
    }
  }, [showMesaModal]);
  const [produtoAguardandoComandaMesa, setProdutoAguardandoComandaMesa] = useState<Produto | null>(null);
  const [quantidadeAguardandoComandaMesa, setQuantidadeAguardandoComandaMesa] = useState<number>(1);
  const [vendaSemProdutoAguardandoComandaMesa, setVendaSemProdutoAguardandoComandaMesa] = useState<{nome: string, preco: number} | null>(null);
  const [rangesConfig, setRangesConfig] = useState<{
    comandas: { inicio: number; fim: number; configurado: boolean };
    mesas: { inicio: number; fim: number; configurado: boolean };
  }>({
    comandas: { inicio: 1, fim: 100, configurado: false },
    mesas: { inicio: 1, fim: 50, configurado: false }
  });

  // Estados para seleção de vendedor
  const [showVendedorModal, setShowVendedorModal] = useState(false);
  const [vendedores, setVendedores] = useState<any[]>([]);
  const [vendedorSelecionado, setVendedorSelecionado] = useState<any>(null);
  const [aguardandoSelecaoVendedor, setAguardandoSelecaoVendedor] = useState(false);
  const [produtoAguardandoVendedor, setProdutoAguardandoVendedor] = useState<Produto | null>(null);
  const [quantidadeAguardandoVendedor, setQuantidadeAguardandoVendedor] = useState<number>(1); // ✅ NOVO: Para armazenar quantidade do modal

  // Estados para venda sem produto aguardando vendedor/quantidade
  const [vendaSemProdutoAguardando, setVendaSemProdutoAguardando] = useState<{nome: string, preco: number} | null>(null);

  // Estados para modal de quantidade (vendas_itens_multiplicacao)
  const [showQuantidadeModal, setShowQuantidadeModal] = useState(false);
  const [produtoParaQuantidade, setProdutoParaQuantidade] = useState<Produto | null>(null);
  const [quantidadeModal, setQuantidadeModal] = useState(1);
  const [quantidadeModalInput, setQuantidadeModalInput] = useState('1'); // Campo string para digitação

  // Estados para edição de quantidade no carrinho
  const [itemEditandoQuantidade, setItemEditandoQuantidade] = useState<string | null>(null);
  const [quantidadeEditando, setQuantidadeEditando] = useState('');

  // ✅ NOVO: Estado para efeito de carregamento no carrinho
  const [carregandoNovoItem, setCarregandoNovoItem] = useState(false);
  const [codigoBuscando, setCodigoBuscando] = useState<string>('');

  // ✅ CORREÇÃO: Estado específico para capturar Enter IMEDIATAMENTE
  const [enterPressionado, setEnterPressionado] = useState(false);

  // ✅ NOVO: Modal de loading para primeiro item
  const [loadingPrimeiroItem, setLoadingPrimeiroItem] = useState(false);

  // Funções para localStorage
  const savePDVState = () => {
    try {
      const pdvState = {
        carrinho,
        clienteSelecionado,
        pedidosImportados,
        showFinalizacaoFinal,
        // ✅ CORREÇÃO: NÃO salvar tipoPagamento no localStorage
        // tipoPagamento,
        // ✅ CORREÇÃO: NÃO salvar formaPagamentoSelecionada no localStorage
        // formaPagamentoSelecionada,
        valorParcial,
        pagamentosParciais,
        trocoCalculado,
        descontoPrazoSelecionado,
        itemEditandoNome,
        nomeEditando,
        itemEditandoObservacao,
        observacaoEditando,
        timestamp: Date.now()
      };
      localStorage.setItem(PDV_STORAGE_KEY, JSON.stringify(pdvState));
    } catch (error) {
      // Erro ao salvar estado do PDV
    }
  };

  const loadPDVState = () => {
    try {
      const savedState = localStorage.getItem(PDV_STORAGE_KEY);
      if (savedState) {
        const pdvState = JSON.parse(savedState);

        // Verifica se o estado não é muito antigo (24 horas)
        const isStateValid = pdvState.timestamp && (Date.now() - pdvState.timestamp) < 24 * 60 * 60 * 1000;

        if (isStateValid) {
          // Restaura todos os estados
          if (pdvState.carrinho) setCarrinho(pdvState.carrinho);
          if (pdvState.clienteSelecionado) setClienteSelecionado(pdvState.clienteSelecionado);
          if (pdvState.pedidosImportados) setPedidosImportados(pdvState.pedidosImportados);
          // Compatibilidade com versão anterior (pedido único)
          if (pdvState.pedidoImportado && !pdvState.pedidosImportados) {
            setPedidosImportados([pdvState.pedidoImportado]);
          }
          if (pdvState.showFinalizacaoFinal !== undefined) setShowFinalizacaoFinal(pdvState.showFinalizacaoFinal);

          // ✅ CORREÇÃO: NÃO restaurar tipoPagamento do localStorage
          // Sempre deixar que seja definido pela lógica padrão ("À Vista")
          // if (pdvState.tipoPagamento) setTipoPagamento(pdvState.tipoPagamento);

          // ✅ CORREÇÃO: NÃO restaurar formaPagamentoSelecionada do localStorage
          // Sempre deixar que seja definido pela lógica padrão (Dinheiro)
          // if (pdvState.formaPagamentoSelecionada) setFormaPagamentoSelecionada(pdvState.formaPagamentoSelecionada);
          if (pdvState.valorParcial) setValorParcial(pdvState.valorParcial);

          // Verificar se os pagamentos parciais têm o formato correto (com IDs)
          if (pdvState.pagamentosParciais && Array.isArray(pdvState.pagamentosParciais)) {
            // Filtrar apenas pagamentos que têm IDs válidos (não são strings simples como "Dinheiro")
            const pagamentosValidos = pdvState.pagamentosParciais.filter((p: any) => {
              return p.forma && typeof p.forma === 'string' && p.forma.length > 10; // IDs são longos
            });
            setPagamentosParciais(pagamentosValidos);
          }

          if (pdvState.trocoCalculado) setTrocoCalculado(pdvState.trocoCalculado);
          if (pdvState.descontoPrazoSelecionado) setDescontoPrazoSelecionado(pdvState.descontoPrazoSelecionado);
          if (pdvState.itemEditandoNome) setItemEditandoNome(pdvState.itemEditandoNome);
          if (pdvState.nomeEditando) setNomeEditando(pdvState.nomeEditando);
          if (pdvState.itemEditandoObservacao) setItemEditandoObservacao(pdvState.itemEditandoObservacao);
          if (pdvState.observacaoEditando) setObservacaoEditando(pdvState.observacaoEditando);

        } else {
          // Remove estado antigo
          clearPDVState();
        }
      }
    } catch (error) {
      clearPDVState();
    }
  };

  const clearPDVState = () => {
    try {
      localStorage.removeItem(PDV_STORAGE_KEY);
    } catch (error) {
      // Erro ao limpar estado do PDV
    }
  };

  // Função para remover pedido importado específico
  const removerPedidoImportado = () => {
    if (!pedidoParaRemover) return;

    // Filtrar itens do carrinho que pertencem a este pedido
    const itensDoCarrinho = carrinho.filter(item => item.pedido_origem_id === pedidoParaRemover.id);
    const itensRestantes = carrinho.filter(item => item.pedido_origem_id !== pedidoParaRemover.id);

    // Contar itens removidos
    const totalItensRemovidos = itensDoCarrinho.reduce((total, item) => total + item.quantidade, 0);
    const totalProdutosRemovidos = itensDoCarrinho.length;

    // Atualizar carrinho removendo apenas itens deste pedido
    setCarrinho(itensRestantes);

    // Remover pedido da lista de importados
    setPedidosImportados(prev => prev.filter(p => p.id !== pedidoParaRemover.id));

    // Se não há mais pedidos importados, sempre limpar cliente e descontos
    const pedidosRestantes = pedidosImportados.filter(p => p.id !== pedidoParaRemover.id);
    if (pedidosRestantes.length === 0) {
      setClienteSelecionado(null);
      setDescontoPrazoSelecionado(null);
      setDescontosCliente({ prazo: [], valor: [] });
      // Limpar também dados da nota fiscal
      setCpfCnpjNota('');
      setClienteEncontrado(null);
    }

    // ✅ CORREÇÃO: Se o carrinho ficou vazio, fechar tela de finalização para mostrar menu PDV
    if (itensRestantes.length === 0) {
      setShowFinalizacaoFinal(false);
    }

    setShowConfirmRemovePedidoImportado(false);
    setPedidoParaRemover(null);

    // Toast informativo sobre o que foi removido
    if (totalProdutosRemovidos > 0) {
      toast.success(`Pedido #${pedidoParaRemover.numero} removido! ${totalProdutosRemovidos} produto(s) e ${totalItensRemovidos} item(s) foram removidos do carrinho.`);
    } else {
      toast.success(`Pedido #${pedidoParaRemover.numero} removido com sucesso!`);
    }
  };

  // Função para limpar tudo do PDV (limpeza geral)
  const limparTudoPDV = () => {
    // Limpar carrinho
    setCarrinho([]);

    // Limpar cliente selecionado
    setClienteSelecionado(null);

    // Limpar pedidos importados
    setPedidosImportados([]);

    // Limpar descontos
    setDescontosCliente({ prazo: [], valor: [] });
    setDescontoPrazoSelecionado(null);
    setDescontoGlobal(0);

    // Resetar tipo de pagamento
    setTipoPagamento('vista');

    // ✅ CORREÇÃO: Resetar para "Dinheiro" como padrão ao invés de null
    const dinheiro = formasPagamento.find(forma =>
      forma.nome?.toLowerCase() === 'dinheiro'
    );
    if (dinheiro) {
      setFormaPagamentoSelecionada(dinheiro.id);
    } else if (formasPagamento.length > 0) {
      setFormaPagamentoSelecionada(formasPagamento[0].id);
    } else {
      setFormaPagamentoSelecionada(null);
    }

    // Limpar pagamentos parciais
    setValorParcial('');
    setPagamentosParciais([]);
    setTrocoCalculado(0);

    // Fechar telas de finalização
    setShowFinalizacaoFinal(false);

    // Limpar dados da nota fiscal
    setCpfCnpjNota('');
    setClienteEncontrado(null);
    setTipoDocumento('cpf');
    setErroValidacao('');

    // Limpar estados de edição
    setItemEditandoNome(null);
    setNomeEditando('');
    setItemEditandoObservacao(null);
    setObservacaoEditando('');

    // ✅ NOVO: Limpar observação da venda
    setObservacaoVenda('');

    // ✅ NOVO: Limpar estados de troca/devolução
    setIsVendaComTroca(false);
    setDevolucaoAplicada(null);

    // Limpar localStorage
    clearPDVState();

    // Fechar modal de confirmação
    setShowConfirmLimparTudoPDV(false);

    // Toast de confirmação
    toast.success('PDV limpo com sucesso! Todos os dados foram removidos.');
  };

  // Função para carregar dados do usuário
  const loadUserData = async () => {
    try {
      const { data: authData } = await supabase.auth.getUser();
      if (!authData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('nome')
        .eq('id', authData.user.id)
        .single();

      if (usuarioData) {
        setUserData({ nome: usuarioData.nome });
      }
    } catch (error) {
      // Erro ao carregar dados do usuário
    }
  };

  // ✅ NOVO: Função para verificar status do caixa
  const verificarStatusCaixa = async () => {
    try {
      console.log('🔍 Verificando status do caixa...');
      console.log('📋 pdvConfig:', pdvConfig);
      console.log('🔧 controla_caixa:', pdvConfig?.controla_caixa);

      setLoadingCaixa(true);

      const { data: authData } = await supabase.auth.getUser();
      if (!authData.user) {
        console.log('❌ Usuário não autenticado');
        return;
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', authData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        console.log('❌ Empresa não encontrada');
        return;
      }

      console.log('🏢 Empresa ID:', usuarioData.empresa_id);
      console.log('👤 Usuário ID:', authData.user.id);

      // Verificar se há caixa aberto para este usuário (qualquer data)
      console.log('📅 Buscando caixa aberto (qualquer data)');

      const { data: caixaData, error } = await supabase
        .from('caixa_controle')
        .select('*')
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('usuario_id', authData.user.id)
        .eq('status_caixa', true)
        .is('data_fechamento', null)
        .order('data_abertura', { ascending: false })
        .limit(1)
        .single();

      console.log('💰 Dados do caixa encontrados:', caixaData);
      console.log('❌ Erro na consulta:', error);

      if (error && error.code !== 'PGRST116') {
        console.error('Erro ao verificar status do caixa:', error);
        return;
      }

      // Se encontrou caixa aberto, definir como aberto
      if (caixaData) {
        console.log('✅ Caixa encontrado - definindo como aberto');
        setCaixaAberto(true);
      } else {
        console.log('❌ Nenhum caixa aberto encontrado');
        // Se não encontrou caixa aberto e controle de caixa está habilitado, mostrar modal
        if (pdvConfig?.controla_caixa === true) {
          console.log('🔒 Controle de caixa habilitado - bloqueando PDV');
          setCaixaAberto(false);
          setShowAberturaCaixaModal(true);
        } else {
          console.log('🔓 Controle de caixa desabilitado - permitindo operação');
          setCaixaAberto(true); // Se não controla caixa, permitir operação
        }
      }
    } catch (error) {
      console.error('Erro ao verificar status do caixa:', error);
    } finally {
      setLoadingCaixa(false);
    }
  };

  // ✅ NOVO: Função para abrir o caixa
  const abrirCaixa = async () => {
    try {
      const { data: authData } = await supabase.auth.getUser();
      if (!authData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', authData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      // Converter valor de abertura para número
      const valorNumerico = desformatarValorMonetario(valorAberturaCaixa);

      // Criar registro de abertura de caixa
      const { data: caixaData, error } = await supabase
        .from('caixa_controle')
        .insert({
          empresa_id: usuarioData.empresa_id,
          usuario_id: authData.user.id,
          data_abertura: new Date().toISOString(),
          status_caixa: true,
          status: 'aberto',
          suprimento: valorNumerico, // Valor inicial como suprimento
          observacao_abertura: `Abertura de caixa com valor inicial de ${formatarPreco(valorNumerico)}`
        })
        .select()
        .single();

      if (error) {
        console.error('Erro ao abrir caixa:', error);
        toast.error('Erro ao abrir caixa');
        return;
      }

      // Registrar o valor inicial como tipo de pagamento (se houver valor)
      if (valorNumerico > 0) {
        await supabase
          .from('tipo_pagamentos')
          .insert({
            caixa_controle_id: caixaData.id,
            empresa_id: usuarioData.empresa_id,
            tipo_pagamento: 'dinheiro',
            valor: valorNumerico,
            descricao: 'Valor inicial de abertura de caixa'
          });
      }

      // Atualizar estados
      setCaixaAberto(true);
      setShowAberturaCaixaModal(false);
      setValorAberturaCaixa('');

      toast.success('Caixa aberto com sucesso!');
    } catch (error) {
      console.error('Erro ao abrir caixa:', error);
      toast.error('Erro ao abrir caixa');
    }
  };

  // ✅ NOVO: Função para carregar dados do caixa aberto
  const carregarDadosCaixa = async () => {
    try {
      console.log('🔍 Carregando dados do caixa...');

      const { data: authData } = await supabase.auth.getUser();
      if (!authData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', authData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      // Buscar caixa aberto
      const { data: caixaData, error: caixaError } = await supabase
        .from('caixa_controle')
        .select('*')
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('status', 'aberto')
        .order('data_abertura', { ascending: false })
        .limit(1)
        .single();

      if (caixaError) {
        console.error('❌ Erro ao buscar dados do caixa:', caixaError);
        toast.error('Erro ao carregar dados do caixa.');
        return;
      }

      // Buscar nome do usuário separadamente
      const { data: usuarioNome } = await supabase
        .from('usuarios')
        .select('nome')
        .eq('id', caixaData.usuario_id)
        .single();

      // Adicionar nome do usuário aos dados do caixa
      const caixaComUsuario = {
        ...caixaData,
        usuario_nome: usuarioNome?.nome || 'N/A'
      };

      console.log('✅ Dados do caixa carregados:', caixaComUsuario);
      setDadosCaixa(caixaComUsuario);

      // Buscar formas de pagamento da empresa
      const { data: formasData, error: formasError } = await supabase
        .from('formas_pagamento_empresa')
        .select(`
          *,
          forma_pagamento_opcoes:forma_pagamento_opcao_id (
            id,
            nome,
            tipo
          )
        `)
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('ativo', true);

      if (formasError) {
        console.error('❌ Erro ao buscar formas de pagamento:', formasError);
        toast.error('Erro ao carregar formas de pagamento.');
        return;
      }

      console.log('✅ Formas de pagamento carregadas:', formasData);
      setFormasPagamentoCaixa(formasData || []);

      // Inicializar valores do caixa (todos zerados)
      const valoresIniciais: {[key: string]: string} = {};
      formasData?.forEach(forma => {
        valoresIniciais[forma.forma_pagamento_opcao_id] = '0,00';
      });
      setValoresCaixa(valoresIniciais);

    } catch (error) {
      console.error('❌ Erro inesperado ao carregar dados do caixa:', error);
      toast.error('Erro inesperado ao carregar dados do caixa.');
    }
  };

  // ✅ NOVO: Função para formatar valor monetário
  const formatarValorMonetario = (valor: string): string => {
    // Remove todos os caracteres não numéricos
    let valorLimpo = valor.replace(/\D/g, '');

    // Se não houver valor, retorna vazio
    if (!valorLimpo) return '';

    // Converte para número (centavos)
    const valorNumerico = parseInt(valorLimpo) / 100;

    // Formata apenas o número, sem símbolo da moeda
    return valorNumerico.toLocaleString('pt-BR', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });
  };

  // ✅ NOVO: Função para desformatar valor monetário
  const desformatarValorMonetario = (valorFormatado: string): number => {
    // Remove todos os caracteres não numéricos, exceto vírgula e ponto
    const valorLimpo = valorFormatado.replace(/[^\d,\.]/g, '');

    // Substitui vírgula por ponto para conversão correta
    const valorComPonto = valorLimpo.replace(',', '.');

    // Converte para número
    const valorNumerico = parseFloat(valorComPonto);

    // Retorna 0 se não for um número válido
    return isNaN(valorNumerico) ? 0 : valorNumerico;
  };

  // Função para carregar descontos do cliente
  const carregarDescontosCliente = async (clienteId: string) => {
    try {
      // Obter dados do usuário atual
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      // Carregar descontos por prazo
      const { data: descontosPrazo, error: errorPrazo } = await supabase
        .from('cliente_descontos_prazo')
        .select('id, prazo_dias, percentual, tipo')
        .eq('cliente_id', clienteId)
        .eq('empresa_id', usuarioData.empresa_id)
        .order('prazo_dias');

      // Carregar descontos por valor
      const { data: descontosValor, error: errorValor } = await supabase
        .from('cliente_descontos_valor')
        .select('valor_minimo, percentual, tipo')
        .eq('cliente_id', clienteId)
        .eq('empresa_id', usuarioData.empresa_id)
        .order('valor_minimo');

      if (errorPrazo) throw errorPrazo;
      if (errorValor) throw errorValor;

      setDescontosCliente({
        prazo: descontosPrazo || [],
        valor: descontosValor || []
      });
    } catch (error) {
      setDescontosCliente({ prazo: [], valor: [] });
    }
  };

  // Função para calcular desconto por valor do pedido
  const calcularDescontoPorValor = (valorTotal: number) => {
    if (!descontosCliente.valor.length) return null;

    // Encontrar o maior desconto aplicável (valor mínimo menor ou igual ao total)
    const descontoAplicavel = descontosCliente.valor
      .filter(d => d.valor_minimo <= valorTotal)
      .sort((a, b) => b.valor_minimo - a.valor_minimo)[0];

    if (!descontoAplicavel) return null;

    const valorDesconto = (valorTotal * descontoAplicavel.percentual) / 100;

    return {
      tipo: descontoAplicavel.tipo,
      percentual: descontoAplicavel.percentual,
      valor: valorDesconto,
      valorMinimo: descontoAplicavel.valor_minimo
    };
  };

  // Função para obter descontos por prazo disponíveis
  const getDescontosPrazoDisponiveis = () => {
    return descontosCliente.prazo.map(d => ({
      id: d.id,
      prazo_dias: d.prazo_dias,
      percentual: d.percentual,
      tipo: d.tipo,
      valor: (calcularTotal() * d.percentual) / 100
    }));
  };

  // Função para calcular desconto por prazo selecionado
  const calcularDescontoPrazo = () => {
    if (!descontoPrazoSelecionado) return 0;

    const desconto = descontosCliente.prazo.find(d => d.id === descontoPrazoSelecionado);
    if (!desconto) return 0;

    const subtotal = carrinho.reduce((acc, item) => acc + item.subtotal, 0);
    const valorDesconto = (subtotal * desconto.percentual) / 100;

    // Se for desconto, retorna valor positivo para subtrair
    // Se for acréscimo, retorna valor negativo para adicionar
    return desconto.tipo === 'desconto' ? valorDesconto : -valorDesconto;
  };

  // Função para confirmar importação de pedido
  const confirmarImportarPedido = () => {
    if (pedidoParaImportar) {
      // Limpar apenas itens adicionados manualmente (sem pedido_origem_id)
      const itensDeOutrosPedidos = carrinho.filter(item => item.pedido_origem_id);
      setCarrinho(itensDeOutrosPedidos);

      executarImportacaoPedido(pedidoParaImportar);
      setShowConfirmImportarPedido(false);
      setPedidoParaImportar(null);
      setShowPedidosModal(false); // Fechar o modal de pedidos também
    }
  };

  // Função para confirmar faturamento do pedido do cardápio digital
  const confirmarFaturarPedido = async () => {
    if (pedidoParaFaturar) {
      // ✅ VALIDAÇÃO: Verificar se o pedido já foi faturado
      if (pedidoParaFaturar.status_faturamento === 'faturado') {
        toast.error(`Pedido #${pedidoParaFaturar.numero_pedido} já foi faturado! Venda #${pedidoParaFaturar.numero_venda_pdv}`);
        setShowConfirmFaturarPedido(false);
        setPedidoParaFaturar(null);
        return;
      }

      await executarFaturamentoPedidoCardapio(pedidoParaFaturar);
      setShowConfirmFaturarPedido(false);
      setPedidoParaFaturar(null);
    }
  };

  // Funções auxiliares para detalhes do pedido
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pendente': return 'text-yellow-400';
      case 'confirmado': return 'text-blue-400';
      case 'preparando': return 'text-orange-400';
      case 'pronto': return 'text-green-400';
      case 'entregue': return 'text-green-500';
      case 'cancelado': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'pendente': return 'Pendente';
      case 'confirmado': return 'Confirmado';
      case 'preparando': return 'Em Preparação';
      case 'pronto': return 'Pronto';
      case 'entregue': return 'Entregue';
      case 'faturado': return 'Faturado';
      case 'cancelado': return 'Cancelado';
      default: return status;
    }
  };

  const formatarDataHora = (data: string) => {
    return new Date(data).toLocaleString('pt-BR');
  };

  // Função para carregar detalhes completos do pedido
  const carregarDetalhesPedido = async (pedidoId: string) => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      // Buscar pedido completo com relacionamentos básicos
      const { data: pedidoCompleto, error } = await supabase
        .from('pedidos')
        .select(`
          *,
          cliente:clientes(
            id,
            nome,
            telefone,
            documento,
            tipo_documento,
            razao_social,
            nome_fantasia
          ),
          usuario:usuarios(nome),
          pedidos_itens(
            id,
            quantidade,
            valor_unitario,
            valor_total,
            observacao,
            produto:produtos(
              id,
              nome,
              codigo,
              codigo_barras,
              descricao,
              preco,
              unidade_medida_id,
              grupo_id,
              unidade_medida:unidade_medida_id (
                id,
                sigla,
                nome
              ),
              produto_fotos(url, principal)
            )
          )
        `)
        .eq('id', pedidoId)
        .eq('empresa_id', usuarioData.empresa_id)
        .single();

      if (error) {
        toast.error('Erro ao carregar detalhes do pedido');
        return;
      }

      setPedidoDetalhado(pedidoCompleto);
      setShowDetalhePedido(true);
    } catch (error) {
      toast.error('Erro ao carregar detalhes do pedido');
    }
  };

  // ✅ NOVA FUNÇÃO: Carregar configurações de tabela de preços
  const carregarConfigTabelaPrecos = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      // Carregar configuração de tabela de preços e sabores
      const { data: configData } = await supabase
        .from('tabela_preco_config')
        .select('trabalha_com_tabela_precos, trabalha_com_sabores, tipo_preco_pizza')
        .eq('empresa_id', usuarioData.empresa_id)
        .single();

      if (configData?.trabalha_com_tabela_precos) {
        setTrabalhaComTabelaPrecos(true);

        // ✅ NOVO: Configurar sistema de sabores
        if (configData.trabalha_com_sabores) {
          setTrabalhaComSabores(true);
          setTipoPrecoSabores(configData.tipo_preco_pizza || 'sabor_mais_caro');
        }

        // Carregar tabelas de preços disponíveis
        const { data: tabelasData } = await supabase
          .from('tabela_de_preco')
          .select('*')
          .eq('empresa_id', usuarioData.empresa_id)
          .order('nome');

        if (tabelasData) {
          setTabelasPrecos(tabelasData);
        }
      } else {
        setTrabalhaComTabelaPrecos(false);
        setTabelasPrecos([]);
      }

    } catch (error) {
      // Erro ao carregar configurações de tabela de preços
    }
  };

  // ✅ NOVA: Função para detectar e corrigir vendas órfãs
  const detectarECorrigirVendasOrfas = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      // Buscar vendas com status 'aberta' desta empresa
      const { data: vendasOrfas, error } = await supabase
        .from('pdv')
        .select('id, numero_venda, created_at')
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('status_venda', 'aberta');

      if (error) {
        console.error('❌ Erro ao buscar vendas órfãs:', error);
        return;
      }

      if (vendasOrfas && vendasOrfas.length > 0) {
        // Verificar se há venda sendo editada atualmente
        const temVendaEmAndamento = vendaEmAndamento !== null;

        if (!temVendaEmAndamento) {
          // Não há venda em andamento, corrigir todas as órfãs
          const { error: updateError } = await supabase
            .from('pdv')
            .update({
              status_venda: 'salva',
              updated_at: new Date().toISOString()
            })
            .eq('empresa_id', usuarioData.empresa_id)
            .eq('status_venda', 'aberta');

          if (updateError) {
            console.error('❌ Erro ao corrigir vendas órfãs:', updateError);
          } else {
            // Mostrar notificação discreta
            const numerosVendas = vendasOrfas.map(v => v.numero_venda).join(', ');
            toast.info(`🔄 ${vendasOrfas.length} venda(s) recuperada(s): ${numerosVendas}`);
          }
        } else {
          // Há venda em andamento, corrigir apenas as outras
          const vendasParaCorrigir = vendasOrfas.filter(v => v.id !== vendaEmAndamento.id);

          if (vendasParaCorrigir.length > 0) {
            const idsParaCorrigir = vendasParaCorrigir.map(v => v.id);

            const { error: updateError } = await supabase
              .from('pdv')
              .update({
                status_venda: 'salva',
                updated_at: new Date().toISOString()
              })
              .in('id', idsParaCorrigir);

            if (updateError) {
              console.error('❌ Erro ao corrigir vendas órfãs:', updateError);
            }
          }
        }
      }
    } catch (error) {
      console.error('❌ Erro ao detectar vendas órfãs:', error);
    }
  };

  // useEffect para carregamento inicial - SEM dependências para evitar recarregamentos
  useEffect(() => {
    const initializeData = async () => {
      loadData();
      loadPDVState(); // Carrega o estado salvo do PDV
      loadContadorPedidos(); // Carrega contador inicial
      loadContadorNfcePendentes(); // Carrega contador de NFC-e pendentes
      loadUserData(); // Carrega dados do usuário
      carregarConfigTabelaPrecos(); // ✅ NOVO: Carregar configurações de tabela de preços

      // ✅ NOVO: Detectar e corrigir vendas órfãs após carregar dados
      await detectarECorrigirVendasOrfas();
    };

    initializeData();

    // Adiciona listener para salvar antes de fechar a página
    const handleBeforeUnload = () => {
      savePDVState();
    };

    window.addEventListener('beforeunload', handleBeforeUnload);

    // Cleanup - sair do fullscreen quando sair da página
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);

      // Sair do fullscreen ao desmontar o componente
      if (isFullscreen) {
        exitFullscreen().catch(error => {
          // Erro silencioso ao sair do fullscreen
        });
      }
    };
  }, []); // Array vazio para executar apenas uma vez

  // ✅ NOVO: useEffect para verificar status do caixa quando pdvConfig for carregado
  useEffect(() => {
    console.log('🔄 useEffect pdvConfig disparado:', { pdvConfig, loadingCaixa, isLoading });

    if (pdvConfig !== null && !isLoading) {
      console.log('🔧 pdvConfig carregado, verificando status do caixa...');
      console.log('📋 Configuração controla_caixa:', pdvConfig?.controla_caixa);
      verificarStatusCaixa();

      // ✅ NOVO: Carregar venda em andamento após verificar caixa
      carregarVendaEmAndamento();
    } else {
      console.log('⏳ Aguardando carregamento completo...', {
        pdvConfigNull: pdvConfig === null,
        isLoading,
        loadingCaixa
      });
    }
  }, [pdvConfig, isLoading]);

  // ✅ NOVO: Timeout de segurança para evitar travamento
  useEffect(() => {
    const timeout = setTimeout(() => {
      if (loadingCaixa) {
        console.log('⚠️ Timeout de segurança - forçando liberação do caixa');
        setLoadingCaixa(false);
        setCaixaAberto(true);
      }
    }, 10000); // 10 segundos

    return () => clearTimeout(timeout);
  }, [loadingCaixa]);

  // ✅ NOVO: Monitor do estado do modal
  useEffect(() => {
    console.log('🎭 Estado do modal mudou:', { showAberturaCaixaModal });
  }, [showAberturaCaixaModal]);

  // useEffect separado para event listeners - SEM dependências para evitar recarregamentos
  useEffect(() => {
    // Event listeners para sistema de eventos em tempo real
    const handlePedidoCriado = (event: CustomEvent<PedidoEventData>) => {
      const { empresaId } = event.detail;
      // Verificar se é da mesma empresa
      checkEmpresaAndUpdateCounter(empresaId);
      // Recarregar lista de pedidos se o modal estiver aberto
      // Usar uma verificação dinâmica do DOM ao invés de estado
      const modalElement = document.querySelector('[data-modal="pedidos"]');
      if (modalElement) {
        loadPedidos();
      }
    };

    const handlePedidoAtualizado = (event: CustomEvent<PedidoEventData>) => {
      const { empresaId } = event.detail;
      checkEmpresaAndUpdateCounter(empresaId);
      const modalElement = document.querySelector('[data-modal="pedidos"]');
      if (modalElement) {
        loadPedidos();
      }
    };

    const handlePedidoCancelado = (event: CustomEvent<PedidoEventData>) => {
      const { empresaId } = event.detail;
      checkEmpresaAndUpdateCounter(empresaId);
      const modalElement = document.querySelector('[data-modal="pedidos"]');
      if (modalElement) {
        loadPedidos();
      }
    };

    const handlePedidoFaturado = (event: CustomEvent<PedidoEventData>) => {
      const { empresaId } = event.detail;
      checkEmpresaAndUpdateCounter(empresaId);
      const modalElement = document.querySelector('[data-modal="pedidos"]');
      if (modalElement) {
        loadPedidos();
      }
    };

    const handlePedidosRecarregar = (event: CustomEvent<RecarregarEventData>) => {
      const { empresaId } = event.detail;
      checkEmpresaAndUpdateCounter(empresaId);
      const modalElement = document.querySelector('[data-modal="pedidos"]');
      if (modalElement) {
        loadPedidos();
      }
    };

    // Adicionar event listeners
    window.addEventListener(EVENT_TYPES.PEDIDO_CRIADO, handlePedidoCriado as EventListener);
    window.addEventListener(EVENT_TYPES.PEDIDO_ATUALIZADO, handlePedidoAtualizado as EventListener);
    window.addEventListener(EVENT_TYPES.PEDIDO_CANCELADO, handlePedidoCancelado as EventListener);
    window.addEventListener(EVENT_TYPES.PEDIDO_FATURADO, handlePedidoFaturado as EventListener);
    window.addEventListener(EVENT_TYPES.PEDIDOS_RECARREGAR, handlePedidosRecarregar as EventListener);

    // Cleanup
    return () => {
      window.removeEventListener(EVENT_TYPES.PEDIDO_CRIADO, handlePedidoCriado as EventListener);
      window.removeEventListener(EVENT_TYPES.PEDIDO_ATUALIZADO, handlePedidoAtualizado as EventListener);
      window.removeEventListener(EVENT_TYPES.PEDIDO_CANCELADO, handlePedidoCancelado as EventListener);
      window.removeEventListener(EVENT_TYPES.PEDIDO_FATURADO, handlePedidoFaturado as EventListener);
      window.removeEventListener(EVENT_TYPES.PEDIDOS_RECARREGAR, handlePedidosRecarregar as EventListener);
    };
  }, []); // Array vazio para executar apenas uma vez

  // Salva automaticamente sempre que algum estado importante mudar
  useEffect(() => {
    // Só salva se já carregou os dados iniciais (evita salvar estado vazio no primeiro render)
    if (produtos.length > 0) {
      savePDVState();
    }
  }, [
    carrinho,
    clienteSelecionado,
    pedidosImportados,
    showFinalizacaoFinal,
    tipoPagamento,
    formaPagamentoSelecionada,
    valorParcial,
    pagamentosParciais,
    trocoCalculado,
    descontoPrazoSelecionado,
    itemEditandoNome,
    nomeEditando,
    itemEditandoObservacao,
    observacaoEditando,
    produtos.length // Garante que só salva depois de carregar os produtos
  ]);

  // Calcular novo valor em tempo real no modal de desconto
  useEffect(() => {
    if (itemParaDesconto && valorDesconto) {
      const item = carrinho.find(i => i.id === itemParaDesconto);
      if (item) {
        const valor = parseFloat(valorDesconto.replace(',', '.'));
        if (!isNaN(valor) && valor >= 0) {
          const novoPreco = calcularNovoValor(item, tipoDesconto, valor);
          setNovoValor(novoPreco);
        }
      }
    } else {
      setNovoValor(0);
    }
  }, [itemParaDesconto, valorDesconto, tipoDesconto, carrinho]);



  // Definir todos os itens do menu PDV
  const allMenuPDVItems = [
    {
      id: 'vendas-abertas',
      icon: FileText,
      label: 'Vendas Abertas',
      color: 'blue',
      count: contadorVendasAbertas,
      onClick: async (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        await carregarVendasAbertas();
        setShowVendasAbertasModal(true);
      }
    },
    {
      id: 'salvar-venda',
      icon: Save,
      label: 'Salvar Venda',
      color: 'green',
      onClick: (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowSalvarVendaModal(true);
      }
    },
    {
      id: 'venda-sem-produto',
      icon: DollarSign,
      label: 'Venda sem Produto',
      color: 'green',
      onClick: (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        // Preencher o campo com o valor padrão configurado
        setDescricaoVendaSemProduto(pdvConfig?.venda_sem_produto_nome_padrao || 'Diversos');
        setValorVendaSemProduto(''); // Limpar o valor para nova entrada
        setShowVendaSemProdutoModal(true);
      }
    },
    {
      id: 'produtos',
      icon: Package,
      label: 'Produtos',
      color: 'primary',
      onClick: async (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }

        if (showAreaProdutos) {
          // Se já está aberto, apenas fechar
          setShowAreaProdutos(false);
        } else {
          // Se está fechado, ativar fullscreen e abrir
          await abrirModalProdutos();
        }
      }
    },
    {
      id: 'pedidos',
      icon: ShoppingBag,
      label: 'Pedidos',
      color: 'primary',
      onClick: async (e?: React.MouseEvent) => {
        // Prevenir qualquer comportamento padrão
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }

        try {
          // Ativar fullscreen antes de abrir o modal
          if (!isFullscreen) {
            await enterFullscreen();
          }
        } catch (error) {
          // Erro silencioso ao ativar fullscreen
        }

        // Abrir modal IMEDIATAMENTE sem loading
        setShowPedidosModal(true);
        setSearchPedidos('');

        // ✅ SEMPRE CARREGAR PEDIDOS QUANDO MODAL ABRIR (para garantir dados atualizados)
        setTimeout(() => {
          loadPedidos();
        }, 100);
      }
    },
    {
      id: 'cardapio-digital',
      icon: BookOpen,
      label: 'Cardápio Digital',
      color: 'primary',
      onClick: (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowCardapioDigitalModal(true);
      }
    },
    {
      id: 'whatsapp',
      icon: MessageCircle,
      label: 'WhatsApp',
      color: 'primary',
      onClick: (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        // TODO: Implementar funcionalidade do WhatsApp
        toast.info('Funcionalidade do WhatsApp em desenvolvimento');
      }
    },
    {
      id: 'mesas',
      icon: Table,
      label: 'Mesas',
      color: 'primary',
      count: contadorVendasMesas,
      onClick: async (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        await carregarVendasMesas();
        setShowMesasModal(true);
      }
    },
    {
      id: 'comandas',
      icon: FileText,
      label: 'Comandas',
      color: 'primary',
      count: contadorVendasComandas,
      onClick: async (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        await carregarVendasComandas();
        setShowComandasModal(true);
      }
    },
    {
      id: 'delivery-local',
      icon: Bike,
      label: 'Delivery Local',
      color: 'orange',
      count: contadorVendasDelivery,
      onClick: async (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        try {
          console.log('🚚 [BOTÃO] Clicado no botão Delivery Local');
          await carregarVendasDelivery();
          console.log('✅ [BOTÃO] Vendas carregadas, abrindo modal...');
          setShowDeliveryModal(true);
          console.log('✅ [BOTÃO] Modal definido como aberto');
        } catch (error) {
          console.error('❌ [BOTÃO] Erro ao abrir modal de delivery:', error);
          toast.error('Erro ao carregar deliveries. Tente novamente.');
        }
      }
    },
    {
      id: 'sangria',
      icon: TrendingDown,
      label: 'Sangria',
      color: 'red',
      onClick: (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowSangriaModal(true);
      }
    },
    {
      id: 'suprimento',
      icon: TrendingUp,
      label: 'Suprimento',
      color: 'green',
      onClick: (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowSuprimentoModal(true);
      }
    },
    {
      id: 'pagamentos',
      icon: CreditCard,
      label: 'Pagamentos',
      color: 'blue',
      onClick: (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowPagamentosModal(true);
      }
    },
    {
      id: 'fiados',
      icon: Clock,
      label: 'Fiados',
      color: 'yellow',
      onClick: (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowFiadosModal(true);
      }
    },
    {
      id: 'observacao-venda',
      icon: MessageSquare,
      label: 'Observação na Venda',
      color: 'blue',
      onClick: (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowObservacaoVendaModal(true);
      }
    },
    {
      id: 'desconto-total',
      icon: Percent,
      label: 'Desconto no Total',
      color: 'orange',
      onClick: (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        setShowDescontoTotalModal(true);
      }
    },
    {
      id: 'movimentos',
      icon: ArrowUpDown,
      label: 'Movimentos',
      color: 'purple',
      onClick: async (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }

        try {
          // Ativar fullscreen antes de abrir o modal
          if (!isFullscreen) {
            await enterFullscreen();
          }
        } catch (error) {
          // Erro silencioso ao ativar fullscreen
        }

        setShowMovimentosModal(true);
        // Carregar vendas apenas uma vez quando abrir o modal
        loadVendas();
        // Atualizar contador de NFC-e pendentes
        loadContadorNfcePendentes();
      }
    },
    {
      id: 'devolucoes',
      icon: RotateCcw,
      label: 'Devoluções',
      color: 'red',
      onClick: async (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }

        try {
          // Ativar fullscreen antes de abrir o modal
          if (!isFullscreen) {
            await enterFullscreen();
          }
        } catch (error) {
          // Erro silencioso ao ativar fullscreen
        }

        setShowDevolucoesModal(true);
        // Carregar devoluções pendentes quando abrir o modal
        loadDevolucoesPendentes();
      }
    },
    // ✅ NOVO: Botão Caixa - só aparece quando caixa está aberto
    {
      id: 'caixa',
      icon: DollarSign,
      label: 'Caixa',
      color: 'green',
      onClick: async (e?: React.MouseEvent) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }

        try {
          // Ativar fullscreen antes de abrir o modal
          if (!isFullscreen) {
            await enterFullscreen();
          }
        } catch (error) {
          // Erro silencioso ao ativar fullscreen
        }

        // Carregar dados do caixa e formas de pagamento
        await carregarDadosCaixa();

        console.log('🎭 Definindo showCaixaModal = true');
        setShowCaixaModal(true);
        console.log('🎭 showCaixaModal definido como true');
      }
    }
  ];

  // Função para filtrar itens do menu baseado nas configurações do PDV
  const getFilteredMenuItems = () => {
    return allMenuPDVItems.filter(item => {
      // ✅ NOVO: Ocultar "Vendas Abertas" quando há itens no carrinho
      if (item.id === 'vendas-abertas') {
        return carrinho.length === 0; // Só mostra se carrinho estiver vazio
      }
      // ✅ NOVO: Mostrar "Salvar Venda" apenas quando há itens no carrinho
      if (item.id === 'salvar-venda') {
        return carrinho.length > 0; // Só mostra se carrinho tiver itens
      }
      // ✅ CORREÇÃO: Ocultar "Pedidos" e "Movimentos" quando há itens no carrinho
      if (item.id === 'pedidos' || item.id === 'movimentos') {
        return carrinho.length === 0; // Só mostra se carrinho estiver vazio
      }
      // ✅ NOVO: Ocultar "Devoluções" quando o carrinho estiver vazio OU quando já há devolução no carrinho
      if (item.id === 'devolucoes') {
        const temDevolucaoNoCarrinho = carrinho.some(item => item.isDevolucao);
        return carrinho.length > 0 && !temDevolucaoNoCarrinho; // Só mostra se carrinho tiver itens E não tiver devolução
      }
      // Se for o item 'comandas', só mostrar se a configuração estiver habilitada
      if (item.id === 'comandas') {
        return pdvConfig?.comandas === true;
      }
      // Se for o item 'mesas', só mostrar se a configuração estiver habilitada
      if (item.id === 'mesas') {
        return pdvConfig?.mesas === true;
      }
      // Se for o item 'delivery', só mostrar se a configuração estiver habilitada
      if (item.id === 'delivery') {
        return pdvConfig?.delivery === true;
      }
      // Se for o item 'delivery-local', só mostrar se a configuração estiver habilitada
      if (item.id === 'delivery-local') {
        return pdvConfig?.delivery === true;
      }
      // Se for o item 'cardapio-digital', só mostrar se a configuração estiver habilitada
      if (item.id === 'cardapio-digital') {
        return pdvConfig?.cardapio_digital === true;
      }
      // Se for o item 'whatsapp', só mostrar se a configuração de delivery como chat IA estiver habilitada
      if (item.id === 'whatsapp') {
        return pdvConfig?.delivery_chat_ia === true;
      }
      // Se for o item 'fiados', só mostrar se a configuração estiver habilitada
      if (item.id === 'fiados') {
        return pdvConfig?.fiado === true; // ✅ CORRIGIDO: Usar configuração PDV
      }
      // Se for o item 'venda-sem-produto', só mostrar se a configuração estiver habilitada
      if (item.id === 'venda-sem-produto') {
        return pdvConfig?.venda_sem_produto === true;
      }
      // Se for o item 'desconto-total', só mostrar se a configuração estiver habilitada E houver itens no carrinho
      if (item.id === 'desconto-total') {
        return pdvConfig?.desconto_no_total === true && carrinho.length > 0;
      }
      // ✅ NOVO: Se for o item 'observacao-venda', só mostrar se houver itens no carrinho
      if (item.id === 'observacao-venda') {
        return carrinho.length > 0;
      }
      // Se for um dos itens de controle de caixa, só mostrar se a configuração estiver habilitada
      if (['sangria', 'suprimento', 'pagamentos'].includes(item.id)) {
        return pdvConfig?.controla_caixa === true;
      }
      // ✅ NOVO: Mostrar "Caixa" apenas quando caixa estiver aberto e controle habilitado
      if (item.id === 'caixa') {
        return pdvConfig?.controla_caixa === true && caixaAberto === true;
      }
      // Para outros itens, sempre mostrar (pode adicionar outras condições aqui)
      return true;
    });
  };

  // Obter itens do menu filtrados
  const menuPDVItems = getFilteredMenuItems();

  // Função para obter classes de cor
  const getColorClasses = (color: string) => {
    const colorMap = {
      primary: 'hover:text-primary-400 hover:bg-primary-500/10',
      red: 'hover:text-red-400 hover:bg-red-500/10',
      green: 'hover:text-green-400 hover:bg-green-500/10',
      blue: 'hover:text-blue-400 hover:bg-blue-500/10',
      yellow: 'hover:text-yellow-400 hover:bg-yellow-500/10',
      purple: 'hover:text-purple-400 hover:bg-purple-500/10'
    };
    return colorMap[color as keyof typeof colorMap] || colorMap.primary;
  };

  // Funções para navegação do menu PDV
  const calcularItensVisiveis = () => {
    if (typeof window === 'undefined') return 9;
    const larguraTela = window.innerWidth;
    const larguraBotaoNavegacao = 40; // Largura dos botões < e >
    const larguraMinimaBotao = 120;

    // Ajustar largura disponível baseado se há itens no carrinho
    // Se há itens no carrinho, a área principal ocupa 67% da tela (2/3)
    const larguraAreaPrincipal = carrinho.length > 0 ? larguraTela * 0.67 : larguraTela;

    // Calcular quantos botões cabem (considerando espaço para botões de navegação se necessário)
    const larguraDisponivel = larguraAreaPrincipal - (menuStartIndex > 0 || menuStartIndex + visibleMenuItems < menuPDVItems.length ? larguraBotaoNavegacao * 2 : 0);
    const itensPossiveis = Math.floor(larguraDisponivel / larguraMinimaBotao);

    return Math.max(1, Math.min(itensPossiveis, menuPDVItems.length));
  };

  const navegarMenuAnterior = () => {
    setMenuStartIndex(Math.max(0, menuStartIndex - 1));
  };

  const navegarMenuProximo = () => {
    const maxIndex = Math.max(0, menuPDVItems.length - visibleMenuItems);
    setMenuStartIndex(Math.min(maxIndex, menuStartIndex + 1));
  };

  // Calcular itens visíveis baseado no tamanho da tela e estado do carrinho
  useEffect(() => {
    const handleResize = () => {
      const novosItensVisiveis = calcularItensVisiveis();
      setVisibleMenuItems(novosItensVisiveis);

      // Ajustar startIndex se necessário
      const maxIndex = Math.max(0, menuPDVItems.length - novosItensVisiveis);
      if (menuStartIndex > maxIndex) {
        setMenuStartIndex(maxIndex);
      }
    };

    handleResize(); // Calcular inicialmente
    window.addEventListener('resize', handleResize);

    return () => window.removeEventListener('resize', handleResize);
  }, [menuStartIndex, menuPDVItems.length, carrinho.length]); // Adicionar carrinho.length como dependência

  // ✅ CORREÇÃO: Resetar menuStartIndex quando o carrinho muda para evitar inconsistências
  useEffect(() => {
    setMenuStartIndex(0); // Sempre voltar ao início quando o carrinho muda
  }, [carrinho.length]); // Só quando a quantidade de itens no carrinho muda

  // useEffect para aplicar filtros quando os estados mudarem
  useEffect(() => {
    aplicarFiltrosPedidos();
  }, [pedidos, searchPedidos, statusFilterPedidos]);

  // Listener para eventos de mudança na configuração do PDV
  useEffect(() => {
    const handlePdvConfigChange = (event: CustomEvent) => {
      const { field, value, config } = event.detail;

      // Atualizar configuração local
      setPdvConfig(config);


    };

    // Listener para mudança de status dos pedidos
    const handlePedidoStatusChange = (event: CustomEvent) => {
      const { pedidosIds, novoStatus, numeroVenda } = event.detail;

      // Aguardar um pouco para garantir que a atualização no banco foi processada
      setTimeout(() => {
        // Recarregar contador de pedidos pendentes
        loadContadorPedidos();

        // Se o modal de pedidos estiver aberto, recarregar a lista
        const modalElement = document.querySelector('[data-modal="pedidos"]');
        if (modalElement) {
          loadPedidos();
        }
      }, 1000); // 1 segundo de delay
    };



    // Listener para venda cancelada
    const handleVendaCancelada = (event: CustomEvent) => {
      const {
        vendaId,
        numeroVenda,
        motivoCancelamento,
        canceladaEm,
        canceladaPorUsuarioId,
        nomeUsuarioCancelamento
      } = event.detail;

      // Atualizar a venda na lista local
      setVendas(prevVendas =>
        prevVendas.map(venda =>
          venda.id === vendaId
            ? {
                ...venda,
                status_venda: 'cancelada',
                cancelada_em: canceladaEm,
                motivo_cancelamento: motivoCancelamento,
                cancelada_por_usuario_id: canceladaPorUsuarioId,
                usuario_cancelamento: { nome: nomeUsuarioCancelamento }
              }
            : venda
        )
      );
    };

    // Adicionar listeners para os eventos customizados
    window.addEventListener('pdvConfigChanged', handlePdvConfigChange as EventListener);
    window.addEventListener('pedidoStatusChanged', handlePedidoStatusChange as EventListener);
    window.addEventListener('vendaCancelada', handleVendaCancelada as EventListener);

    // Cleanup
    return () => {
      window.removeEventListener('pdvConfigChanged', handlePdvConfigChange as EventListener);
      window.removeEventListener('pedidoStatusChanged', handlePedidoStatusChange as EventListener);
      window.removeEventListener('vendaCancelada', handleVendaCancelada as EventListener);
    };
  }, []);

  // Recarregar formas de pagamento quando necessário
  useEffect(() => {
    if (pdvConfig !== null) { // Só executa depois que pdvConfig foi carregado
      loadFormasPagamento();
    }
  }, [pdvConfig]); // Recarrega quando a configuração PDV mudar

  // Atualizar data e hora a cada segundo
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentDateTime(new Date());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  // useEffect para aplicar filtros automaticamente quando mudarem
  useEffect(() => {
    if (showMovimentosModal) {
      const timeoutId = setTimeout(() => {
        loadVendas();
      }, 300); // Debounce de 300ms para evitar muitas chamadas

      return () => clearTimeout(timeoutId);
    }
  }, [filtroStatus, filtroNfce, filtroDataInicio, filtroDataFim, filtroNumeroVenda, filtroNumeroPedido, showMovimentosModal]); // ✅ NOVO: Incluir filtroNfce

  // ✅ CORREÇÃO: useEffect para garantir criação da venda quando há itens no carrinho
  useEffect(() => {
    const garantirVendaEmAndamento = async () => {
      // Se há itens no carrinho mas não há venda em andamento e não está criando
      if (carrinho.length > 0 && !vendaEmAndamento && !criandoVenda) {
        setCriandoVenda(true);

        const vendaCriada = await criarVendaEmAndamento();
        if (vendaCriada) {

          // ✅ CORREÇÃO: Aguardar um pouco para garantir que a transação foi commitada
          await new Promise(resolve => setTimeout(resolve, 100));

        } else {
          // Falha ao criar venda
        }

        setCriandoVenda(false);
      }
    };

    garantirVendaEmAndamento();
  }, [carrinho.length, vendaEmAndamento, criandoVenda]); // Monitora mudanças no carrinho

  // ✅ CORREÇÃO: useEffect para salvar itens apenas quando venda NOVA é criada
  useEffect(() => {
    const salvarItensExistentes = async () => {
      // ✅ CORREÇÃO: Só salvar se é venda nova (não recuperada) e tem itens sem pdv_item_id
      if (vendaEmAndamento && carrinho.length > 0 && !isEditingVenda) {
        // ✅ CORREÇÃO: Só salvar itens que não têm pdv_item_id (itens novos)
        const itensNovos = carrinho.filter(item => !item.pdv_item_id);

        if (itensNovos.length > 0) {
          for (const item of itensNovos) {
            const itemSalvo = await salvarItemNaVendaEmAndamento(item);
            if (itemSalvo) {

              // ✅ CORREÇÃO: Atualizar o item no carrinho com o pdv_item_id imediatamente
              setCarrinho(prev => prev.map(carrinhoItem =>
                carrinhoItem.id === item.id
                  ? { ...carrinhoItem, pdv_item_id: itemSalvo.id }
                  : carrinhoItem
              ));
            } else {
              // Erro ao salvar item novo
            }
          }

        }
      }
    };

    salvarItensExistentes();
  }, [vendaEmAndamento, isEditingVenda]); // Executa quando venda em andamento é criada ou modo de edição muda

  // ✅ NOVO: useEffect para carregar vendas abertas ao montar o componente
  useEffect(() => {
    carregarVendasAbertas();
    carregarVendasMesas();
    carregarVendasComandas();
    carregarContadorDelivery(); // ✅ Carrega apenas contador (otimizado)
  }, []); // Executa apenas uma vez ao montar

  // ✅ NOVO: Polling inteligente para atualizar contadores de mesas e comandas
  useEffect(() => {
    const interval = setInterval(() => {
      // Só atualizar se não estiver com modais abertos (para não interferir na UX)
      if (!showMesasModal && !showComandasModal && !showVendasAbertasModal && !showDeliveryModal) {
        carregarVendasMesas();
        carregarVendasComandas();
        carregarContadorDelivery(); // ✅ Carrega apenas contador (otimizado)
      }
    }, 5000); // 5 segundos - mesmo intervalo do cardápio

    return () => clearInterval(interval);
  }, [showMesasModal, showComandasModal, showVendasAbertasModal, showDeliveryModal]);

  // ✅ NOVO: useEffect para carregar clientes devedores quando modal abrir ou filtros mudarem
  useEffect(() => {
    if (showFiadosModal) {
      loadClientesDevedores();
    }
  }, [showFiadosModal, pesquisaClienteFiado, dataInicioFiltro, dataFimFiltro]);

  // ✅ NOVO: Sistema Realtime para monitorar mudanças na tabela PDV (delivery local)
  useEffect(() => {
    let deliverySubscription: any = null;

    const setupDeliveryRealtime = async () => {
      try {
        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) return;

        const { data: usuarioData } = await supabase
          .from('usuarios')
          .select('empresa_id')
          .eq('id', userData.user.id)
          .single();

        if (!usuarioData?.empresa_id) return;

        const channelName = `pdv-delivery-realtime-${usuarioData.empresa_id}`;

        deliverySubscription = supabase
          .channel(channelName)
          .on('postgres_changes',
            {
              event: 'INSERT',
              schema: 'public',
              table: 'pdv',
              filter: `empresa_id=eq.${usuarioData.empresa_id}`
            },
            (payload) => {
              // Se for uma nova venda de delivery local, atualizar contador
              if (payload.new && payload.new.delivery_local === true) {
                console.log('🚚 [REALTIME] Nova venda delivery local detectada:', payload.new);
                carregarContadorDelivery();
              }
            }
          )
          .on('postgres_changes',
            {
              event: 'UPDATE',
              schema: 'public',
              table: 'pdv',
              filter: `empresa_id=eq.${usuarioData.empresa_id}`
            },
            (payload) => {
              // Se mudou o status de delivery_local, atualizar contador
              if (payload.new && (
                payload.new.delivery_local !== payload.old?.delivery_local ||
                payload.new.status_venda !== payload.old?.status_venda
              )) {
                console.log('🚚 [REALTIME] Mudança em venda delivery detectada:', payload.new);
                carregarContadorDelivery();
              }
            }
          )
          .subscribe();

      } catch (error) {
        console.error('❌ Erro ao configurar realtime para delivery:', error);
      }
    };

    setupDeliveryRealtime();

    return () => {
      if (deliverySubscription) {
        deliverySubscription.unsubscribe();
      }
    };
  }, []); // Executar apenas uma vez

  // ✅ NOVO: Filtrar clientes quando termo de busca mudar
  useEffect(() => {
    if (!searchClienteTerm.trim()) {
      setFilteredClientes(clientes);
    } else {
      const termo = searchClienteTerm.toLowerCase();
      const clientesFiltrados = clientes.filter(cliente => {
        // Buscar no nome
        if (cliente.nome.toLowerCase().includes(termo)) return true;

        // Buscar no telefone principal
        if (cliente.telefone && cliente.telefone.includes(termo)) return true;

        // Buscar nos múltiplos telefones
        if (cliente.telefones && cliente.telefones.some(tel =>
          tel.numero.includes(termo)
        )) return true;

        // Buscar no documento
        if (cliente.documento && cliente.documento.includes(termo)) return true;

        return false;
      });
      setFilteredClientes(clientesFiltrados);
    }
  }, [searchClienteTerm, clientes]);

  // Estado para captura automática de código de barras
  const [codigoBarrasBuffer, setCodigoBarrasBuffer] = useState('');
  const [timeoutId, setTimeoutId] = useState<NodeJS.Timeout | null>(null);

  // Listener global para captura de código de barras, F1-F9 e ESC
  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      // Capturar teclas F0-F9 para atalhos do menu PDV
      if (event.key.startsWith('F') && event.key.length <= 3) {
        const fNumber = parseInt(event.key.substring(1));
        if (fNumber >= 0 && fNumber <= 9) {
          event.preventDefault();
          let menuIndex;
          if (fNumber === 0) {
            // F0 = primeiro item (índice 0)
            menuIndex = 0;
          } else {
            // F1-F9 = índices 1-9
            menuIndex = fNumber;
          }
          if (menuPDVItems[menuIndex]) {
            menuPDVItems[menuIndex].onClick();
          }
          return;
        }
      }

      // Capturar ESC globalmente para fechar modal de produtos
      if (event.key === 'Escape' && showAreaProdutos) {
        event.preventDefault();
        setShowAreaProdutos(false);
        return;
      }

      // Só funciona se a configuração estiver habilitada
      if (!pdvConfig?.venda_codigo_barras) return;

      // Ignorar se estiver digitando em um input, textarea ou elemento editável
      const target = event.target as HTMLElement;
      if (
        target.tagName === 'INPUT' ||
        target.tagName === 'TEXTAREA' ||
        target.contentEditable === 'true' ||
        target.closest('[contenteditable="true"]')
      ) {
        return;
      }

      // Só capturar números
      if (!/^\d$/.test(event.key)) {
        // Se pressionar Enter e tiver código no buffer, processar
        if (event.key === 'Enter' && codigoBarrasBuffer.length > 0) {
          processarCodigoBarras(codigoBarrasBuffer);
          setCodigoBarrasBuffer('');
          if (timeoutId) {
            clearTimeout(timeoutId);
            setTimeoutId(null);
          }
        }
        return;
      }

      // Adicionar número ao buffer
      const novoBuffer = codigoBarrasBuffer + event.key;
      setCodigoBarrasBuffer(novoBuffer);

      // Limpar timeout anterior
      if (timeoutId) {
        clearTimeout(timeoutId);
      }

      // Definir novo timeout para limpar o buffer após 2 segundos
      const novoTimeoutId = setTimeout(() => {
        setCodigoBarrasBuffer('');
        setTimeoutId(null);
      }, 2000);

      setTimeoutId(novoTimeoutId);

      // Prevenir comportamento padrão
      event.preventDefault();
    };

    // Sempre adicionar listener para F1-F9, ESC, e condicionalmente para código de barras
    document.addEventListener('keydown', handleKeyPress);

    return () => {
      document.removeEventListener('keydown', handleKeyPress);
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, [pdvConfig?.venda_codigo_barras, codigoBarrasBuffer, timeoutId, showAreaProdutos, menuPDVItems]);

  // Função para processar código de barras capturado
  const processarCodigoBarras = (codigo: string) => {
    // Buscar produto pelo código de barras
    const produto = produtos.find(p => p.codigo_barras === codigo);

    if (produto) {
      adicionarAoCarrinho(produto);
      // ✅ REMOVIDO: Toast removido para não confundir com outros processos
    } else {
      // Se não encontrou por código de barras, tentar por código normal
      const produtoPorCodigo = produtos.find(p => p.codigo === codigo);
      if (produtoPorCodigo) {
        adicionarAoCarrinho(produtoPorCodigo);
        // ✅ REMOVIDO: Toast removido para não confundir com outros processos
      } else {
        toast.error(`Produto não encontrado para o código: ${codigo}`);
      }
    }
  };

  // Função para carregar contador de pedidos pendentes
  const loadContadorPedidos = async () => {
    await withSessionCheck(async () => {
      try {
        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) return;

        const { data: usuarioData } = await supabase
          .from('usuarios')
          .select('empresa_id')
          .eq('id', userData.user.id)
          .single();

        if (!usuarioData?.empresa_id) return;

        const contador = await contarPedidosPendentes(usuarioData.empresa_id);
        setContadorPedidosPendentes(contador);
      } catch (error) {
        // Erro ao carregar contador de pedidos
      }
    });
  };

  // Função para carregar contador de NFC-e pendentes
  const loadContadorNfcePendentes = async () => {
    await withSessionCheck(async () => {
      try {
        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) return;

        const { data: usuarioData } = await supabase
          .from('usuarios')
          .select('empresa_id')
          .eq('id', userData.user.id)
          .single();

        if (!usuarioData?.empresa_id) return;

        // Contar vendas com status_fiscal = 'pendente' e tentativa_nfce = true
        const { count, error } = await supabase
          .from('pdv')
          .select('*', { count: 'exact', head: true })
          .eq('empresa_id', usuarioData.empresa_id)
          .eq('status_fiscal', 'pendente')
          .eq('tentativa_nfce', true);

        if (error) {
          return;
        }

        setContadorNfcePendentes(count || 0);
      } catch (error) {
        // Erro ao carregar contador de NFC-e pendentes
      }
    });
  };

  // Função para carregar devoluções pendentes
  const loadDevolucoesPendentes = async () => {
    await withSessionCheck(async () => {
      try {
        setLoadingDevolucoes(true);

        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) return;

        const { data: usuarioData } = await supabase
          .from('usuarios')
          .select('empresa_id')
          .eq('id', userData.user.id)
          .single();

        if (!usuarioData?.empresa_id) return;

        // Buscar devoluções pendentes com JOIN para cliente
        const { data: devolucoes, error } = await supabase
          .from('devolucoes')
          .select(`
            id,
            numero,
            codigo_troca,
            cliente_id,
            valor_total,
            created_at,
            motivo_geral,
            forma_reembolso,
            observacoes,
            venda_origem_id,
            venda_origem_numero,
            clientes:cliente_id (
              nome,
              telefone,
              emails
            )
          `)
          .eq('empresa_id', usuarioData.empresa_id)
          .eq('status', 'pendente')
          .eq('deletado', false)
          .order('created_at', { ascending: false });

        if (error) {
          console.error('Erro ao carregar devoluções pendentes:', error);
          return;
        }

        // Verificar quais devoluções já estão no carrinho
        const devolucaoIdsNoCarrinho = new Set(
          carrinho
            .filter(item => item.isDevolucao && item.devolucao_origem_id)
            .map(item => item.devolucao_origem_id)
        );

        // Processar dados para incluir nome do cliente e status no carrinho
        const devolucoesProcesadas = (devolucoes || []).map((devolucao: any) => {
          return {
            ...devolucao,
            cliente_nome: devolucao.clientes?.nome || 'Cliente não informado',
            jaNoCarrinho: devolucaoIdsNoCarrinho.has(devolucao.id) // Flag para identificar se já está no carrinho
          };
        });

        setDevolucoesPendentes(devolucoesProcesadas);
      } catch (error) {
        console.error('Erro ao carregar devoluções pendentes:', error);
      } finally {
        setLoadingDevolucoes(false);
      }
    });
  };

  // Subscription em tempo real para pedidos + Polling como fallback
  useEffect(() => {
    let subscription: any = null;
    let pollingInterval: NodeJS.Timeout | null = null;

    const setupRealtimeSubscription = async () => {
      try {
        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) return;

        const { data: usuarioData } = await supabase
          .from('usuarios')
          .select('empresa_id')
          .eq('id', userData.user.id)
          .single();

        if (!usuarioData?.empresa_id) return;

        // Subscription para mudanças na tabela pedidos
        subscription = supabase
          .channel(`pedidos-realtime-${usuarioData.empresa_id}`)
          .on('postgres_changes',
            {
              event: 'INSERT',
              schema: 'public',
              table: 'pedidos',
              filter: `empresa_id=eq.${usuarioData.empresa_id}`
            },
            (payload) => {
              // Recalcula contador completo para garantir precisão
              loadContadorPedidos();
            }
          )
          .on('postgres_changes',
            {
              event: 'UPDATE',
              schema: 'public',
              table: 'pedidos',
              filter: `empresa_id=eq.${usuarioData.empresa_id}`
            },
            (payload) => {
              // Recalcula contador quando status muda
              loadContadorPedidos();
            }
          )
          .on('postgres_changes',
            {
              event: 'DELETE',
              schema: 'public',
              table: 'pedidos',
              filter: `empresa_id=eq.${usuarioData.empresa_id}`
            },
            (payload) => {
              // Recalcula contador quando pedido é deletado
              loadContadorPedidos();
            }
          )
          .subscribe((status) => {
            if (status === 'CHANNEL_ERROR') {
              setupPolling();
            }
          });

      } catch (error) {
        setupPolling();
      }
    };

    // Polling automático como backup (sempre ativo)
    const setupPolling = () => {
      pollingInterval = setInterval(() => {
        loadContadorPedidos();
        loadContadorNfcePendentes();
      }, 8000); // A cada 8 segundos - totalmente automático
    };

    setupRealtimeSubscription();
    // Sempre inicia o polling automático como backup
    setupPolling();

    return () => {
      if (subscription) {
        subscription.unsubscribe();
      }
      if (pollingInterval) {
        clearInterval(pollingInterval);
      }
    };
  }, []);

  // Função para verificar empresa e atualizar contador
  const checkEmpresaAndUpdateCounter = async (empresaId: string) => {
    await withSessionCheck(async () => {
      try {
        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) return;

        const { data: usuarioData } = await supabase
          .from('usuarios')
          .select('empresa_id')
          .eq('id', userData.user.id)
          .single();

        // Só atualiza se for da mesma empresa
        if (usuarioData?.empresa_id === empresaId) {
          const contador = await contarPedidosPendentes(empresaId);
          setContadorPedidosPendentes(contador);
        }
      } catch (error) {
        // Erro ao verificar empresa e atualizar contador
      }
    });
  };

  const loadData = async () => {
    await withSessionCheck(async () => {
      try {
        setIsLoading(true);
        await Promise.all([
          loadProdutos(),
          loadGrupos(),
          loadClientes(),
          loadEstoque(),
          loadPdvConfig(),
          loadFormasPagamento(),
          loadVendedores(),
          loadEmpresaData(),
          loadNfeConfig(), // ✅ NOVO: Carregar configuração NFe
          loadRangesComandaMesa() // ✅ NOVO: Carregar ranges de comandas e mesas
        ]);
      } catch (error) {
        toast.error('Erro ao carregar dados do PDV');
      } finally {
        setIsLoading(false);
      }
    });
  };

  // ✅ NOVO: Função para carregar ranges de comandas e mesas
  const loadRangesComandaMesa = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData) return;

      // Carregar range de mesas
      const { data: mesasData } = await supabase
        .from('mesas')
        .select('numero_inicio, numero_fim')
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('ativo', true)
        .single();

      // Carregar range de comandas
      const { data: comandasData } = await supabase
        .from('comandas')
        .select('numero_inicio, numero_fim')
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('ativo', true)
        .single();

      // Atualizar estado local
      setRangesConfig({
        mesas: {
          inicio: mesasData?.numero_inicio || 1,
          fim: mesasData?.numero_fim || 50,
          configurado: !!mesasData
        },
        comandas: {
          inicio: comandasData?.numero_inicio || 1,
          fim: comandasData?.numero_fim || 100,
          configurado: !!comandasData
        }
      });

    } catch (error: any) {
      console.error('Erro ao carregar ranges:', error);
    }
  };

  // ✅ NOVO: Função para validar número da comanda
  const validarComanda = (numero: string): boolean => {
    const numeroInt = parseInt(numero);
    if (isNaN(numeroInt)) return false;

    return numeroInt >= rangesConfig.comandas.inicio && numeroInt <= rangesConfig.comandas.fim;
  };

  // ✅ NOVO: Função para validar número da mesa
  const validarMesa = (numero: string): boolean => {
    const numeroInt = parseInt(numero);
    if (isNaN(numeroInt)) return false;

    return numeroInt >= rangesConfig.mesas.inicio && numeroInt <= rangesConfig.mesas.fim;
  };

  const loadProdutos = async () => {
    const { data: userData } = await supabase.auth.getUser();
    if (!userData.user) return;

    const { data: usuarioData } = await supabase
      .from('usuarios')
      .select('empresa_id')
      .eq('id', userData.user.id)
      .single();

    if (!usuarioData?.empresa_id) return;

    const { data, error } = await supabase
      .from('produtos')
      .select(`
        id,
        nome,
        preco,
        codigo,
        codigo_barras,
        descricao,
        promocao,
        producao,
        tipo_desconto,
        valor_desconto,
        desconto_quantidade,
        quantidade_minima,
        tipo_desconto_quantidade,
        valor_desconto_quantidade,
        percentual_desconto_quantidade,
        unidade_medida_id,
        grupo_id,
        estoque_inicial,
        ncm,
        cfop,
        origem_produto,
        situacao_tributaria,
        cst_icms,
        csosn_icms,
        cst_pis,
        cst_cofins,
        cst_ipi,
        aliquota_icms,
        aliquota_pis,
        aliquota_cofins,
        aliquota_ipi,
        cest,
        margem_st,
        peso_liquido,
        promocao_data_habilitada,
        promocao_data_inicio,
        promocao_data_fim,
        promocao_data_cardapio,
        insumos,
        grupo:grupos(nome),
        unidade_medida:unidade_medida_id (
          id,
          sigla,
          nome,
          fracionado
        ),
        produto_fotos(url, principal)
      `)
      .eq('empresa_id', usuarioData.empresa_id)
      .eq('ativo', true)
      .eq('deletado', false)
      .order('nome');

    if (error) throw error;
    setProdutos(data || []);
  };

  // ✅ NOVA FUNÇÃO: Verificar se produto permite múltiplos sabores
  const verificarPermiteSabores = (produto: any): boolean => {
    if (!trabalhaComSabores || tabelaPrecoSelecionada === 'padrao') {
      return false;
    }

    const tabelaAtual = tabelasPrecos.find(t => t.id === tabelaPrecoSelecionada);
    return tabelaAtual?.quantidade_sabores > 1 || tabelaAtual?.permite_meio_a_meio;
  };

  // ✅ NOVA FUNÇÃO: Confirmar seleção de sabores e adicionar ao carrinho
  const confirmarSabores = async (sabores: any[], precoCalculado: number) => {
    if (!produtoParaSabores) return;

    // ✅ CORREÇÃO: Incluir o produto principal como primeiro sabor
    const todosSabores = [
      {
        produto: produtoParaSabores,
        porcentagem: Math.floor(100 / (sabores.length + 1))
      },
      ...sabores
    ];

    // Criar descrição dos sabores com frações
    const criarDescricaoSabores = () => {

      if (!tabelaParaSabores.permite_meio_a_meio) {
        return todosSabores.map(sabor => sabor.produto.nome).join(', ');
      }

      // Determinar fração baseada na quantidade TOTAL de sabores
      let fracao = '';
      if (todosSabores.length === 2) {
        fracao = '1/2';
      } else if (todosSabores.length === 3) {
        fracao = '1/3';
      } else if (todosSabores.length === 4) {
        fracao = '1/4';
      } else {
        fracao = `${Math.round(100/todosSabores.length)}%`;
      }

      // Criar lista com frações
      const resultado = todosSabores.map(sabor => `${fracao} ${sabor.produto.nome}`).join('\n');
      return resultado;
    };

    const descricaoSabores = criarDescricaoSabores();

    // Criar item do carrinho com sabores
    const novoItem: ItemCarrinho = {
      id: `${produtoParaSabores.id}-${Date.now()}-${Math.random()}`,
      produto: {
        ...produtoParaSabores,
        preco: precoCalculado, // Usar preço calculado dos sabores
        nome: produtoParaSabores.nome // Nome base do produto
      },
      quantidade: produtoParaSabores.quantidadeParaAdicionar,
      subtotal: precoCalculado * produtoParaSabores.quantidadeParaAdicionar,
      temOpcoesAdicionais: produtoParaSabores.temOpcoesAdicionais,
      vendedor_id: vendedorSelecionado?.id,
      vendedor_nome: vendedorSelecionado?.nome,
      tabela_preco_id: trabalhaComTabelaPrecos && tabelaPrecoSelecionada !== 'padrao' ? tabelaPrecoSelecionada : null,
      tabela_preco_nome: trabalhaComTabelaPrecos && tabelaPrecoSelecionada !== 'padrao'
        ? tabelasPrecos.find(t => t.id === tabelaPrecoSelecionada)?.nome
        : null,
      // ✅ NOVO: Salvar informações dos sabores (incluindo produto principal)
      sabores: todosSabores,
      descricaoSabores: descricaoSabores, // Descrição formatada dos sabores
      observacao: `Sabores: ${descricaoSabores.replace(/\n/g, ', ')}`
    };

    // Verificar se tem opções adicionais
    if (produtoParaSabores.temOpcoesAdicionais) {
      setItemParaAdicionais(novoItem);
      setShowAdicionaisModal(true);
    } else {
      // Adicionar diretamente ao carrinho
      setCarrinho(prev => [...prev, novoItem]);

      // Criar venda em andamento se for o primeiro item
      const isFirstItem = carrinho.length === 0;
      if (isFirstItem && !vendaEmAndamento && !isEditingVenda) {
        setCriandoVenda(true);
        try {
          const vendaCriada = await criarVendaEmAndamento();

          if (!vendaCriada) {
            setCriandoVenda(false);
            toast.error('Erro ao criar venda. Tente novamente.');
            return;
          }

          await new Promise(resolve => setTimeout(resolve, 200));
          setCriandoVenda(false);
        } catch (error) {
          setCriandoVenda(false);
          toast.error('Erro ao criar venda: ' + (error as Error).message);
          return;
        }
      }

      // Salvar item na venda em andamento
      const aguardarVendaEsalvarItem = async () => {


        if (isFirstItem && !vendaEmAndamento && !isEditingVenda) {


          let tentativas = 0;
          const maxTentativas = 100;

          while (!vendaEmAndamento && tentativas < maxTentativas) {
            if (tentativas % 10 === 0) {
              // Log reduzido para evitar spam no console
            }
            await new Promise(resolve => setTimeout(resolve, 100));
            tentativas++;
          }

          if (!vendaEmAndamento) {

            return;
          }


        }

        const vendaAtual = vendaEmAndamento;


        if (vendaAtual) {
          const sucesso = await salvarItemNaVendaEmAndamento(novoItem);
          if (!sucesso) {
            toast.error('Erro ao salvar item na venda');
          }
        }
      };

      aguardarVendaEsalvarItem();

      toast.success(`${produtoParaSabores.nome} adicionado ao carrinho!`);
    }

    // Limpar estados
    setProdutoParaSabores(null);
    setTabelaParaSabores(null);
  };

  // ✅ NOVA FUNÇÃO: Carregar produtos com preços das tabelas
  const carregarProdutosComPrecos = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return [];

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return [];

      // Se não trabalha com tabelas ou tabela padrão selecionada, usar produtos normais
      if (!trabalhaComTabelaPrecos || tabelaPrecoSelecionada === 'padrao') {
        return produtos.filter(produto => produto.preco > 0);
      }

      // Buscar produtos que têm preço na tabela selecionada
      const { data: produtosComPreco, error } = await supabase
        .from('produto_precos')
        .select(`
          preco,
          produto:produtos(
            id,
            nome,
            preco,
            codigo,
            codigo_barras,
            descricao,
            promocao,
            producao,
            tipo_desconto,
            valor_desconto,
            desconto_quantidade,
            quantidade_minima,
            tipo_desconto_quantidade,
            valor_desconto_quantidade,
            percentual_desconto_quantidade,
            unidade_medida_id,
            grupo_id,
            estoque_inicial,
            ncm,
            cfop,
            origem_produto,
            situacao_tributaria,
            cst_icms,
            csosn_icms,
            cst_pis,
            cst_cofins,
            cst_ipi,
            aliquota_icms,
            aliquota_pis,
            aliquota_cofins,
            aliquota_ipi,
            cest,
            margem_st,
            peso_liquido,
            grupo:grupos(nome),
            unidade_medida:unidade_medida_id (
              id,
              sigla,
              nome,
              fracionado
            ),
            produto_fotos(url, principal)
          )
        `)
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('tabela_preco_id', tabelaPrecoSelecionada)
        .gt('preco', 0) // Apenas produtos com preço > 0 na tabela
        .eq('produto.ativo', true)
        .eq('produto.deletado', false);

      if (error) throw error;

      // Transformar dados para o formato esperado, substituindo o preço padrão pelo preço da tabela
      const produtosFormatados = produtosComPreco?.map(item => ({
        ...item.produto,
        preco: item.preco, // Usar preço da tabela em vez do preço padrão
        // ✅ CORREÇÃO: Garantir que campos essenciais não sejam undefined
        nome: item.produto?.nome || '',
        codigo: item.produto?.codigo || '',
        codigo_barras: item.produto?.codigo_barras || null
      })) || [];

      return produtosFormatados;

    } catch (error) {
      return [];
    }
  };

  const loadGrupos = async () => {
    const { data: userData } = await supabase.auth.getUser();
    if (!userData.user) return;

    const { data: usuarioData } = await supabase
      .from('usuarios')
      .select('empresa_id')
      .eq('id', userData.user.id)
      .single();

    if (!usuarioData?.empresa_id) return;

    const { data, error } = await supabase
      .from('grupos')
      .select('*')
      .eq('empresa_id', usuarioData.empresa_id)
      .order('nome');

    if (error) throw error;
    setGrupos(data || []);
  };

  const loadClientes = async () => {
    const { data: userData } = await supabase.auth.getUser();
    if (!userData.user) return;

    const { data: usuarioData } = await supabase
      .from('usuarios')
      .select('empresa_id')
      .eq('id', userData.user.id)
      .single();

    if (!usuarioData?.empresa_id) return;

    const { data, error } = await supabase
      .from('clientes')
      .select('id, nome, telefone, telefones, documento, endereco, numero, complemento, bairro, cidade, estado, cep, origem') // ✅ INCLUIR: campo origem
      .eq('empresa_id', usuarioData.empresa_id)
      .or('deletado.is.null,deletado.eq.false') // ✅ FILTRAR: Excluir clientes deletados
      .order('nome')
      .limit(50);

    if (error) throw error;
    setClientes(data || []);
    setFilteredClientes(data || []); // Inicializar lista filtrada
  };

  const loadEstoque = async () => {
    setLoadingEstoque(true);

    const { data: userData } = await supabase.auth.getUser();
    if (!userData.user) {
      setLoadingEstoque(false);
      return;
    }

    const { data: usuarioData } = await supabase
      .from('usuarios')
      .select('empresa_id')
      .eq('id', userData.user.id)
      .single();

    if (!usuarioData?.empresa_id) {
      setLoadingEstoque(false);
      return;
    }

    try {
      // Buscar estoque dos produtos
      const { data: estoqueData, error } = await supabase
        .from('produto_estoque')
        .select('produto_id, quantidade, tipo_movimento')
        .eq('empresa_id', usuarioData.empresa_id);

      if (error) {
        setLoadingEstoque(false);
        return;
      }

      // Processar dados de estoque
      const estoqueProcessado: Record<string, EstoqueProduto> = {};

      if (estoqueData) {
        estoqueData.forEach((item: any) => {
          if (!estoqueProcessado[item.produto_id]) {
            estoqueProcessado[item.produto_id] = { total: 0, naoFaturado: 0 };
          }

          if (item.tipo_movimento === 'entrada') {
            estoqueProcessado[item.produto_id].total += item.quantidade;
          } else if (item.tipo_movimento === 'saida') {
            estoqueProcessado[item.produto_id].total -= item.quantidade;
          }
        });
      }

      setProdutosEstoque(estoqueProcessado);
    } catch (error) {
      // Erro ao processar estoque
    } finally {
      setLoadingEstoque(false);
    }
  };

  const loadPdvConfig = async () => {
    const { data: userData } = await supabase.auth.getUser();
    if (!userData.user) return;

    const { data: usuarioData } = await supabase
      .from('usuarios')
      .select('empresa_id')
      .eq('id', userData.user.id)
      .single();

    if (!usuarioData?.empresa_id) return;

    const { data, error } = await supabase
      .from('pdv_config')
      .select('*')
      .eq('empresa_id', usuarioData.empresa_id)
      .single();

    if (error && error.code !== 'PGRST116') {
      return;
    }

    // Se não encontrou configuração, usar valores padrão
    if (!data) {
      setPdvConfig({
        seleciona_clientes: false,
        comandas: false,
        mesas: false,
        vendedor: false,
        exibe_foto_item: false,
        controla_caixa: false,
        agrupa_itens: false,
        delivery: false,
        cardapio_digital: false,
        delivery_chat_ia: false,
        baixa_estoque_pdv: false,
        venda_codigo_barras: false,
        forca_venda_fiscal_cartao: false,
        observacao_no_item: false,
        desconto_no_item: false,
        editar_nome_produto: false,
        fiado: false,
        vendas_itens_multiplicacao: false,
        ocultar_finalizar_com_impressao: false,
        ocultar_finalizar_sem_impressao: false,
        ocultar_nfce_com_impressao: false,
        ocultar_nfce_sem_impressao: false,
        ocultar_nfce_producao: false,
        ocultar_producao: false,
        rodape_personalizado: 'Obrigado pela preferencia volte sempre!'
      });
    } else {
      setPdvConfig(data);
    }
  };

  const loadEmpresaData = async () => {
    const { data: userData } = await supabase.auth.getUser();
    if (!userData.user) return;

    const { data: usuarioData } = await supabase
      .from('usuarios')
      .select('empresa_id')
      .eq('id', userData.user.id)
      .single();

    if (!usuarioData?.empresa_id) return;

    const { data, error } = await supabase
      .from('empresas')
      .select('id, nome_fantasia, razao_social, regime_tributario')
      .eq('id', usuarioData.empresa_id)
      .single();

    if (error) {
      return;
    }

    setEmpresaData(data);
  };

  const loadFormasPagamento = async () => {
    try {
      // Obter dados do usuário para pegar empresa_id
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        return;
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        return;
      }

      // Buscar formas de pagamento configuradas para esta empresa
      const { data, error } = await supabase
        .from('formas_pagamento_empresa')
        .select(`
          id,
          cardapio_digital,
          max_parcelas,
          juros_por_parcela,
          utilizar_chave_pix,
          tipo_chave_pix,
          chave_pix,
          forma_pagamento_opcoes:forma_pagamento_opcao_id (
            id,
            nome,
            tipo
          )
        `)
        .eq('empresa_id', usuarioData.empresa_id)
        .order('created_at');

      if (error) throw error;

      // Transformar dados para o formato esperado pelo PDV
      let formasTransformadas = (data || []).map(forma => ({
        id: forma.id,
        nome: forma.forma_pagamento_opcoes?.nome || 'Forma de Pagamento',
        tipo: forma.forma_pagamento_opcoes?.tipo || 'outros',
        ativo: true,
        // Dados adicionais para funcionalidades específicas
        cardapio_digital: forma.cardapio_digital,
        max_parcelas: forma.max_parcelas,
        juros_por_parcela: forma.juros_por_parcela,
        utilizar_chave_pix: forma.utilizar_chave_pix,
        tipo_chave_pix: forma.tipo_chave_pix,
        chave_pix: forma.chave_pix
      }));

      // ✅ ADICIONAR FIADO: Se habilitado na configuração PDV, buscar da tabela genérica
      if (pdvConfig?.fiado) {
        const { data: fiadoData, error: fiadoError } = await supabase
          .from('forma_pagamento_opcoes')
          .select('id, nome, tipo')
          .eq('nome', 'Fiado')
          .eq('ativo', true)
          .single();

        if (!fiadoError && fiadoData) {
          // Adicionar Fiado como opção genérica
          formasTransformadas.push({
            id: `fiado_${fiadoData.id}`, // ID único para evitar conflitos
            nome: fiadoData.nome,
            tipo: fiadoData.tipo,
            ativo: true,
            cardapio_digital: false,
            max_parcelas: 1,
            juros_por_parcela: 0,
            utilizar_chave_pix: false,
            tipo_chave_pix: null,
            chave_pix: null
          });
        }
      }

      setFormasPagamento(formasTransformadas);

      // Selecionar primeira forma como padrão
      if (formasTransformadas && formasTransformadas.length > 0) {
        // Procurar por "Dinheiro" primeiro
        const dinheiro = formasTransformadas.find(forma =>
          forma.nome?.toLowerCase() === 'dinheiro'
        );

        if (dinheiro) {
          setFormaPagamentoSelecionada(dinheiro.id);
        } else {
          // Se não encontrar "Dinheiro", usar a primeira forma disponível
          setFormaPagamentoSelecionada(formasTransformadas[0].id);
        }
      } else {
        setFormasPagamento([]);
        setFormaPagamentoSelecionada('');
      }
    } catch (error) {
      // Em caso de erro, manter array vazio para não quebrar a interface
      setFormasPagamento([]);
      setFormaPagamentoSelecionada('');
    }
  };

  const loadVendedores = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      // Buscar usuários que são vendedores na empresa
      const { data: tiposUsuario } = await supabase
        .from('tipo_user_config')
        .select('id')
        .eq('tipo', 'vendedor');

      if (!tiposUsuario || tiposUsuario.length === 0) {
        setVendedores([]);
        return;
      }

      const tipoVendedorIds = tiposUsuario.map(tipo => tipo.id);

      // Buscar usuários que têm o tipo vendedor em seu array de tipos
      const { data, error } = await supabase
        .from('usuarios')
        .select('id, nome, email, tipo_user_config_id')
        .eq('empresa_id', usuarioData.empresa_id)
        .order('nome');

      if (error) throw error;

      // Filtrar usuários que têm tipo vendedor
      const vendedoresFiltrados = (data || []).filter(usuario => {
        if (Array.isArray(usuario.tipo_user_config_id)) {
          return usuario.tipo_user_config_id.some((tipoId: string) =>
            tipoVendedorIds.includes(tipoId)
          );
        } else {
          // Compatibilidade com formato antigo
          return tipoVendedorIds.includes(usuario.tipo_user_config_id);
        }
      });

      setVendedores(vendedoresFiltrados);
    } catch (error) {
      // Erro ao carregar vendedores
    }
  };

  // ✅ NOVA: Função para carregar configuração NFe (ambiente)
  const loadNfeConfig = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      const { data: nfeConfigData } = await supabase
        .from('nfe_config')
        .select('ambiente')
        .eq('empresa_id', usuarioData.empresa_id)
        .single();

      if (nfeConfigData) {
        setAmbienteNFe(nfeConfigData.ambiente);
      } else {
        // Se não encontrou configuração, manter padrão homologação
        setAmbienteNFe('homologacao');
      }
    } catch (error) {
      setAmbienteNFe('homologacao'); // Fallback para homologação
    }
  };

  // ✅ NOVA: Função para carregar clientes devedores
  const loadClientesDevedores = async () => {
    setLoadingClientesDevedores(true);

    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      // Query base para buscar clientes com saldo devedor > 0
      let query = supabase
        .from('clientes')
        .select(`
          id,
          nome,
          telefone,
          documento,
          saldo_devedor,
          created_at,
          updated_at
        `)
        .eq('empresa_id', usuarioData.empresa_id)
        .gt('saldo_devedor', 0)
        .order('saldo_devedor', { ascending: false });

      // Aplicar filtro de pesquisa se houver
      if (pesquisaClienteFiado.trim()) {
        query = query.or(`nome.ilike.%${pesquisaClienteFiado}%,telefone.ilike.%${pesquisaClienteFiado}%,documento.ilike.%${pesquisaClienteFiado}%`);
      }

      const { data: clientesData, error } = await query;

      if (error) {
        console.error('❌ Erro ao carregar clientes devedores:', error);
        return;
      }

      // Filtrar por data se especificado
      let clientesFiltrados = clientesData || [];

      if (dataInicioFiltro || dataFimFiltro) {
        // Buscar vendas fiado dos clientes no período especificado
        let queryVendas = supabase
          .from('pdv')
          .select('cliente_id, valor_total, data_venda')
          .eq('empresa_id', usuarioData.empresa_id)
          .eq('fiado', true);

        if (dataInicioFiltro) {
          queryVendas = queryVendas.gte('data_venda', dataInicioFiltro);
        }

        if (dataFimFiltro) {
          queryVendas = queryVendas.lte('data_venda', dataFimFiltro + 'T23:59:59');
        }

        const { data: vendasFiado } = await queryVendas;

        if (vendasFiado && vendasFiado.length > 0) {
          const clientesComVendasNoPeriodo = new Set(vendasFiado.map(v => v.cliente_id));
          clientesFiltrados = clientesFiltrados.filter(cliente =>
            clientesComVendasNoPeriodo.has(cliente.id)
          );
        } else {
          clientesFiltrados = [];
        }
      }

      setClientesDevedores(clientesFiltrados);

      // Calcular total do saldo devedor
      const total = clientesFiltrados.reduce((acc, cliente) => acc + (cliente.saldo_devedor || 0), 0);
      setTotalSaldoDevedor(total);

    } catch (error) {
      console.error('❌ Erro inesperado ao carregar clientes devedores:', error);
    } finally {
      setLoadingClientesDevedores(false);
    }
  };

  // ✅ NOVA: Função para carregar vendas fiado de um cliente específico
  const loadVendasFiadoCliente = async (clienteId: string) => {
    setLoadingVendasFiado(true);

    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      // Buscar vendas fiado do cliente
      const { data: vendasData, error } = await supabase
        .from('pdv')
        .select(`
          id,
          numero_venda,
          valor_total,
          data_venda,
          created_at,
          observacao_venda
        `)
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('cliente_id', clienteId)
        .eq('fiado', true)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('❌ Erro ao carregar vendas fiado do cliente:', error);
        return;
      }

      setVendasFiadoCliente(vendasData || []);

    } catch (error) {
      console.error('❌ Erro inesperado ao carregar vendas fiado do cliente:', error);
    } finally {
      setLoadingVendasFiado(false);
    }
  };

  // ✅ NOVA: Função para carregar itens de uma venda específica
  const loadItensVenda = async (vendaId: string) => {
    try {
      const { data: itensData, error } = await supabase
        .from('pdv_itens')
        .select(`
          id,
          nome_produto,
          quantidade,
          valor_unitario,
          valor_subtotal,
          unidade,
          observacao_item
        `)
        .eq('pdv_id', vendaId)
        .order('nome_produto');

      if (error) {
        console.error('❌ Erro ao carregar itens da venda:', error);
        return [];
      }

      return itensData || [];
    } catch (error) {
      console.error('❌ Erro inesperado ao carregar itens da venda:', error);
      return [];
    }
  };

  // ✅ NOVA: Função para abrir detalhes do cliente
  const abrirDetalhesCliente = async (cliente: any) => {
    setClienteSelecionadoDetalhes(cliente);
    setShowDetalhesClienteModal(true);
    setVendaExpandida(null);
    setItensVendaExpandida([]);

    // Carregar vendas fiado do cliente
    await loadVendasFiadoCliente(cliente.id);
  };

  // ✅ NOVA: Função para expandir/recolher venda
  const toggleVendaExpandida = async (vendaId: string) => {
    if (vendaExpandida === vendaId) {
      // Recolher venda
      setVendaExpandida(null);
      setItensVendaExpandida([]);
    } else {
      // Expandir venda
      setVendaExpandida(vendaId);
      const itens = await loadItensVenda(vendaId);
      setItensVendaExpandida(itens);
    }
  };

  const loadPedidos = async () => {
    const { data: userData } = await supabase.auth.getUser();
    if (!userData.user) return;

    const { data: usuarioData } = await supabase
      .from('usuarios')
      .select('empresa_id')
      .eq('id', userData.user.id)
      .single();

    if (!usuarioData?.empresa_id) return;

    // Removido setLoadingPedidos(true) para evitar loading visual desnecessário
    try {
      const { data, error } = await supabase
        .from('pedidos')
        .select(`
          id,
          numero,
          created_at,
          status,
          valor_total,
          empresa_id,
          desconto_prazo_id,
          desconto_valor_id,
          usuario_id,
          cliente:clientes(id, nome, telefone, documento),
          pedidos_itens(
            id,
            quantidade,
            valor_unitario,
            valor_total,
            produto:produtos(
              id,
              nome,
              preco,
              codigo,
              codigo_barras,
              descricao,
              promocao,
              tipo_desconto,
              valor_desconto,
              unidade_medida_id,
              grupo_id,
              ncm,
              cfop,
              cst_icms,
              cst_pis,
              cst_cofins,
              unidade_medida:unidade_medida_id (
                id,
                sigla,
                nome
              ),
              produto_fotos(url, principal)
            )
          )
        `)
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('deletado', false)
        .order('created_at', { ascending: false })
        .limit(100);

      if (error) throw error;
      let pedidosData = data || [];

      // Buscar nomes dos usuários se houver pedidos com usuario_id
      if (pedidosData.length > 0) {
        const usuarioIds = [...new Set(pedidosData.filter(p => p.usuario_id).map(p => p.usuario_id))];

        if (usuarioIds.length > 0) {
          const { data: usuariosData } = await supabase
            .from('usuarios')
            .select('id, nome')
            .in('id', usuarioIds);

          if (usuariosData) {
            // Criar mapa de ID -> nome
            const usuariosMap = usuariosData.reduce((acc, user) => {
              acc[user.id] = user.nome;
              return acc;
            }, {} as Record<string, string>);

            // Adicionar nome do usuário aos pedidos
            pedidosData = pedidosData.map(pedido => ({
              ...pedido,
              usuario: pedido.usuario_id ? {
                id: pedido.usuario_id,
                nome: usuariosMap[pedido.usuario_id] || 'Usuário não encontrado'
              } : null
            }));
          }
        }
      }

      setPedidos(pedidosData);
      // Aplicar filtros após carregar
      aplicarFiltrosPedidos(pedidosData);
      // Atualizar contador apenas com pedidos pendentes
      const pedidosPendentes = pedidosData.filter(p => p.status === 'pendente');
      setContadorPedidosPendentes(pedidosPendentes.length);
    } catch (error) {
      toast.error('Erro ao carregar pedidos');
    }
    // Removido setLoadingPedidos(false) para manter consistência
  };

  // Função para aplicar filtros nos pedidos
  const aplicarFiltrosPedidos = (pedidosParaFiltrar = pedidos) => {
    let filtered = [...pedidosParaFiltrar];

    // Aplicar filtro de status
    if (statusFilterPedidos !== 'todos') {
      filtered = filtered.filter(pedido => pedido.status === statusFilterPedidos);
    }

    // Aplicar filtro de busca
    if (searchPedidos.trim()) {
      const termoLower = searchPedidos.toLowerCase();
      filtered = filtered.filter(pedido =>
        (pedido.numero && pedido.numero.toString().includes(termoLower)) ||
        (pedido.cliente?.nome && pedido.cliente.nome.toLowerCase().includes(termoLower)) ||
        (pedido.cliente?.telefone && pedido.cliente.telefone.includes(searchPedidos))
      );
    }

    setPedidosFiltrados(filtered);
  };

  // Função para filtrar pedidos por termo de busca
  const filtrarPedidos = (termo: string) => {
    setSearchPedidos(termo);
    aplicarFiltrosPedidos();
  };

  // Função para filtrar pedidos por status
  const filtrarPedidosPorStatus = (status: string) => {
    setStatusFilterPedidos(status);
    aplicarFiltrosPedidos();
  };

  // ✅ FUNÇÃO PARA CARREGAR TODOS OS PEDIDOS DO CARDÁPIO DIGITAL
  const carregarTodosPedidosCardapio = async () => {
    if (!empresaData?.id) {
      return;
    }



    try {
      const { data, error } = await supabase
        .from('cardapio_digital')
        .select(`
          id,
          numero_pedido,
          nome_cliente,
          telefone_cliente,
          valor_total,
          status_pedido,
          data_pedido,
          tipo_entrega,
          endereco_entrega,
          tem_entrega,
          cep_entrega,
          endereco_entrega,
          numero_entrega,
          complemento_entrega,
          bairro_entrega,
          cidade_entrega,
          estado_entrega,
          tipo_endereco,
          nome_condominio,
          bloco_endereco,
          proximo_a,
          forma_pagamento_nome,
          forma_pagamento_tipo,
          forma_pagamento_detalhes,
          observacao_pedido,
          observacao_entrega,
          valor_produtos,
          valor_desconto_cupom,
          valor_taxa_entrega,
          distancia_km,
          tempo_estimado_minutos,
          itens_pedido,
          cupom_codigo,
          cupom_descricao,
          cupom_valor_desconto,
          quer_nota_fiscal,
          cpf_cnpj_cliente,
          status_faturamento,
          numero_venda_pdv
        `)
        .eq('empresa_id', empresaData.id)
        .order('updated_at', { ascending: false })
        .order('data_pedido', { ascending: false });

      if (error) {
        return;
      }

      const pedidos = data || [];


      // ✅ ATUALIZAR ESTADO E APLICAR FILTROS IMEDIATAMENTE
      setTodosOsPedidosCardapio(pedidos);

      // ✅ APLICAR FILTROS IMEDIATAMENTE COM OS DADOS RECEBIDOS (SEM DELAY)
      aplicarFiltrosCardapio(pedidos);
    } catch (error) {
      // Erro inesperado
    }
  };

  // ✅ USEEFFECT PARA APLICAR FILTROS QUANDO QUALQUER FILTRO MUDA
  useEffect(() => {
    aplicarFiltrosCardapio();
  }, [statusFilterCardapio, searchCardapio, dataInicioCardapio, dataFimCardapio, todosOsPedidosCardapio]);

  // ✅ FUNÇÃO PARA APLICAR FILTROS NO CARDÁPIO DIGITAL
  const aplicarFiltrosCardapio = (pedidosParaFiltrar = todosOsPedidosCardapio) => {
    let filtered = [...pedidosParaFiltrar];

    // Aplicar filtro de status
    if (statusFilterCardapio !== 'todos') {
      filtered = filtered.filter(pedido => pedido.status_pedido === statusFilterCardapio);
    }

    // Aplicar filtro de busca
    if (searchCardapio.trim()) {
      const termoLower = searchCardapio.toLowerCase();
      filtered = filtered.filter(pedido =>
        pedido.numero_pedido?.toLowerCase().includes(termoLower) ||
        pedido.nome_cliente?.toLowerCase().includes(termoLower) ||
        pedido.telefone_cliente?.includes(searchCardapio)
      );
    }

    // Aplicar filtro de data
    if (dataInicioCardapio || dataFimCardapio) {
      filtered = filtered.filter(pedido => {
        const dataPedido = new Date(pedido.data_pedido);
        const inicio = dataInicioCardapio ? new Date(dataInicioCardapio + 'T00:00:00') : null;
        const fim = dataFimCardapio ? new Date(dataFimCardapio + 'T23:59:59') : null;

        if (inicio && dataPedido < inicio) return false;
        if (fim && dataPedido > fim) return false;
        return true;
      });
    }

    // ✅ ATUALIZAR ESTADO DOS PEDIDOS FILTRADOS
    setPedidosCardapioFiltrados(filtered);
  };

  // ✅ FUNÇÕES DE FILTRO DO CARDÁPIO DIGITAL
  const filtrarCardapioPorStatus = (status: string) => {
    setStatusFilterCardapio(status);
    // ✅ NÃO CHAMAR aplicarFiltrosCardapio AQUI - O useEffect já faz isso
  };

  // ✅ FUNÇÃO PARA ATUALIZAR CONFIGURAÇÕES DO CARDÁPIO DIGITAL
  const atualizarConfigCardapio = async (field: string, value: boolean) => {
    try {
      // Atualizar o estado local primeiro
      setPdvConfig(prev => ({ ...prev, [field]: value }));

      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      // Obter empresa_id do usuário
      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        throw new Error('Empresa não encontrada');
      }

      // Verificar se já existe uma configuração
      const { data: existingConfig } = await supabase
        .from('pdv_config')
        .select('id')
        .eq('empresa_id', usuarioData.empresa_id)
        .single();

      if (existingConfig) {
        // Atualizar configuração existente
        const { error } = await supabase
          .from('pdv_config')
          .update({ [field]: value })
          .eq('empresa_id', usuarioData.empresa_id);

        if (error) throw error;
      } else {
        // Criar nova configuração
        const { error } = await supabase
          .from('pdv_config')
          .insert([{
            empresa_id: usuarioData.empresa_id,
            [field]: value
          }]);

        if (error) throw error;
      }

      // Disparar evento customizado para notificar mudanças
      const pdvConfigEvent = new CustomEvent('pdvConfigChanged', {
        detail: {
          field,
          value,
          config: { ...pdvConfig, [field]: value }
        }
      });
      window.dispatchEvent(pdvConfigEvent);

      toast.success(`Configuração ${field === 'impressao_automatica_cardapio' ? 'impressão automática' : 'aceitar pedido automaticamente'} ${value ? 'ativada' : 'desativada'} com sucesso!`);

    } catch (error: any) {
      console.error('Erro ao atualizar configuração:', error);
      toast.error(`Erro ao atualizar configuração: ${error.message}`);
      // Reverter estado local em caso de erro
      setPdvConfig(prev => ({ ...prev, [field]: !value }));
    }
  };

  // ✅ FUNÇÃO PARA IMPRIMIR PEDIDO DO CARDÁPIO DIGITAL
  const imprimirPedidoCardapio = async (pedido: any) => {
    try {
      console.log('🖨️ [CARDAPIO-PRINT] Iniciando impressão do pedido:', pedido.numero_pedido);
      console.log('🖨️ [CARDAPIO-PRINT] Dados completos do pedido:', pedido);

      // Verificar configuração de impressão
      const usarImpressao50mm = pdvConfig?.tipo_impressao_50mm === true && pdvConfig?.tipo_impressao_80mm === false;
      console.log('🖨️ [CARDAPIO-PRINT] Tipo de impressão:', usarImpressao50mm ? '50MM' : '80MM');

      // Obter dados da empresa
      const { data: userData } = await supabase.auth.getUser();
      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        toast.error('Empresa não encontrada');
        return;
      }

      const { data: empresaData } = await supabase
        .from('empresas')
        .select('*')
        .eq('id', usuarioData.empresa_id)
        .single();

      if (!empresaData) {
        toast.error('Dados da empresa não encontrados');
        return;
      }

      // Preparar itens do pedido com validação
      let itens = [];
      try {
        if (pedido.itens_pedido) {
          if (typeof pedido.itens_pedido === 'string') {
            itens = JSON.parse(pedido.itens_pedido);
          } else if (Array.isArray(pedido.itens_pedido)) {
            itens = pedido.itens_pedido;
          } else {
            console.warn('🖨️ [CARDAPIO-PRINT] Formato de itens_pedido não reconhecido:', typeof pedido.itens_pedido);
            itens = [];
          }
        }
      } catch (error) {
        console.error('🖨️ [CARDAPIO-PRINT] Erro ao parsear itens_pedido:', error);
        console.log('🖨️ [CARDAPIO-PRINT] Valor original:', pedido.itens_pedido);
        itens = [];
      }

      console.log('🖨️ [CARDAPIO-PRINT] Itens processados:', itens);

      // Preparar dados para impressão
      const dadosImpressao = {
        empresa: {
          razao_social: empresaData.razao_social,
          nome_fantasia: empresaData.nome_fantasia,
          cnpj: empresaData.documento,
          inscricao_estadual: empresaData.inscricao_estadual,
          endereco: empresaData.endereco,
          bairro: empresaData.bairro,
          cidade: empresaData.cidade,
          uf: empresaData.uf,
          cep: empresaData.cep,
          telefone: empresaData.telefone
        },
        pedido: {
          numero: pedido.numero_pedido,
          data: new Date(pedido.data_pedido).toLocaleString('pt-BR'),
          valor_total: pedido.valor_total,
          valor_produtos: pedido.valor_produtos,
          valor_taxa_entrega: pedido.valor_taxa_entrega,
          status: pedido.status_pedido,
          tipo_entrega: pedido.tipo_entrega,
          tem_entrega: pedido.tem_entrega
        },
        cliente: {
          nome_cliente: pedido.nome_cliente,
          telefone_cliente: pedido.telefone_cliente
        },
        pagamento: {
          forma_pagamento_nome: pedido.forma_pagamento_nome,
          forma_pagamento_tipo: pedido.forma_pagamento_tipo,
          forma_pagamento_detalhes: pedido.forma_pagamento_detalhes
        },
        entrega: {
          tem_entrega: pedido.tem_entrega,
          endereco_entrega: pedido.endereco_entrega,
          numero_entrega: pedido.numero_entrega,
          complemento_entrega: pedido.complemento_entrega,
          bairro_entrega: pedido.bairro_entrega,
          cidade_entrega: pedido.cidade_entrega,
          estado_entrega: pedido.estado_entrega,
          cep_entrega: pedido.cep_entrega,
          tipo_endereco: pedido.tipo_endereco,
          nome_condominio: pedido.nome_condominio,
          bloco_endereco: pedido.bloco_endereco,
          proximo_a: pedido.proximo_a,
          observacao_entrega: pedido.observacao_entrega
        },
        itens: itens
      };

      // 1. GERAR E IMPRIMIR CUPOM PRINCIPAL (todos os itens)
      console.log('🖨️ [CARDAPIO-PRINT] Imprimindo cupom principal...');
      await gerarEImprimirCupomCardapio(dadosImpressao, usarImpressao50mm);

      // 2. AGUARDAR UM POUCO PARA GARANTIR QUE O PRIMEIRO CUPOM FOI PROCESSADO
      console.log('🖨️ [CARDAPIO-PRINT] Aguardando conclusão do cupom principal...');
      await new Promise(resolve => setTimeout(resolve, 2000));

      // 3. VERIFICAR SE HÁ ITENS DE PRODUÇÃO E IMPRIMIR CUPONS SEPARADOS POR GRUPO
      console.log('🖨️ [CARDAPIO-PRINT] Iniciando verificação de cupons de produção...');
      await imprimirCuponsProducaoPorGrupo(pedido, itens, usarImpressao50mm);

    } catch (error) {
      console.error('❌ [CARDAPIO-PRINT] Erro ao imprimir pedido:', error);
      toast.error('Erro ao imprimir pedido');
    }
  };

  // ✅ FUNÇÃO PARA IMPRIMIR CUPONS DE PRODUÇÃO SEPARADOS POR GRUPO
  const imprimirCuponsProducaoPorGrupo = async (pedido: any, itens: any[], usarImpressao50mm: boolean) => {
    try {
      console.log('🏭 [PRODUCAO-PRINT] ===== INICIANDO VERIFICAÇÃO DE PRODUÇÃO =====');
      console.log('🏭 [PRODUCAO-PRINT] Pedido:', pedido.numero_pedido);
      console.log('🏭 [PRODUCAO-PRINT] Total de itens:', itens.length);
      console.log('🏭 [PRODUCAO-PRINT] Itens recebidos:', itens);

      // 1. BUSCAR DADOS DOS PRODUTOS PARA VERIFICAR CAMPO 'producao' E 'grupo'
      const produtoIds = itens.map(item => item.produto_id || item.produto?.id).filter(Boolean);

      console.log('🏭 [PRODUCAO-PRINT] Produto IDs extraídos:', produtoIds);

      if (produtoIds.length === 0) {
        console.log('🏭 [PRODUCAO-PRINT] ❌ Nenhum produto_id encontrado nos itens');
        console.log('🏭 [PRODUCAO-PRINT] Estrutura dos itens:', itens.map(item => ({
          produto_id: item.produto_id,
          produto_objeto_id: item.produto?.id,
          nome: item.produto_nome || item.nome || item.produto?.nome,
          keys: Object.keys(item)
        })));
        return;
      }

      console.log('🏭 [PRODUCAO-PRINT] Buscando dados dos produtos no banco...');
      const { data: produtosData, error: produtosError } = await supabase
        .from('produtos')
        .select(`
          id,
          nome,
          codigo,
          producao,
          grupo_id,
          grupo:grupos(id, nome)
        `)
        .in('id', produtoIds);

      if (produtosError) {
        console.error('🏭 [PRODUCAO-PRINT] ❌ Erro ao buscar dados dos produtos:', produtosError);
        return;
      }

      console.log('🏭 [PRODUCAO-PRINT] ✅ Produtos encontrados no banco:', produtosData?.length || 0);
      console.log('🏭 [PRODUCAO-PRINT] Detalhes dos produtos:', produtosData?.map(p => ({
        id: p.id,
        nome: p.nome,
        producao: p.producao,
        grupo: p.grupo?.nome
      })));

      // 2. FILTRAR APENAS ITENS QUE TÊM PRODUÇÃO = TRUE
      console.log('🏭 [PRODUCAO-PRINT] Filtrando itens de produção...');
      const itensProducao = itens.filter(item => {
        const produtoId = item.produto_id || item.produto?.id;
        const produto = produtosData?.find(p => p.id === produtoId);
        const temProducao = produto?.producao === true;
        console.log(`🏭 [PRODUCAO-PRINT] Item ${item.produto_nome || item.nome || item.produto?.nome}: producao=${produto?.producao}, incluir=${temProducao}`);
        return temProducao;
      });

      console.log('🏭 [PRODUCAO-PRINT] ===== RESULTADO DA FILTRAGEM =====');
      console.log('🏭 [PRODUCAO-PRINT] Total de itens de produção:', itensProducao.length);

      if (itensProducao.length === 0) {
        console.log('🏭 [PRODUCAO-PRINT] ❌ Nenhum item de produção encontrado - finalizando');
        console.log('🏭 [PRODUCAO-PRINT] Motivo: Nenhum produto tem campo producao = TRUE');
        return;
      }

      console.log('🏭 [PRODUCAO-PRINT] ✅ Itens que serão impressos:', itensProducao.map(item => ({
        nome: item.produto_nome || item.nome,
        quantidade: item.quantidade
      })));

      // 3. AGRUPAR ITENS POR GRUPO
      console.log('🏭 [PRODUCAO-PRINT] ===== AGRUPANDO POR GRUPOS =====');
      const itensPorGrupo = new Map();

      itensProducao.forEach(item => {
        const produtoId = item.produto_id || item.produto?.id;
        const produto = produtosData?.find(p => p.id === produtoId);
        console.log(`🏭 [PRODUCAO-PRINT] Processando item: ${item.produto_nome || item.nome || item.produto?.nome}`);
        console.log(`🏭 [PRODUCAO-PRINT] Produto encontrado:`, produto);

        if (produto?.grupo) {
          const grupoNome = produto.grupo.nome;
          const grupoId = produto.grupo.id;

          console.log(`🏭 [PRODUCAO-PRINT] Adicionando ao grupo: ${grupoNome} (ID: ${grupoId})`);

          if (!itensPorGrupo.has(grupoId)) {
            itensPorGrupo.set(grupoId, {
              nome: grupoNome,
              itens: []
            });
            console.log(`🏭 [PRODUCAO-PRINT] ✅ Novo grupo criado: ${grupoNome}`);
          }

          itensPorGrupo.get(grupoId).itens.push({
            ...item,
            produto_nome: produto.nome,
            produto_codigo: produto.codigo,
            produto_id: produtoId // Garantir que o produto_id está correto
          });
        } else {
          console.log(`🏭 [PRODUCAO-PRINT] ⚠️ Item sem grupo válido: ${item.produto_nome || item.nome || item.produto?.nome}`);
        }
      });

      console.log('🏭 [PRODUCAO-PRINT] ===== RESULTADO DO AGRUPAMENTO =====');
      console.log('🏭 [PRODUCAO-PRINT] Total de grupos:', itensPorGrupo.size);

      for (const [grupoId, grupoData] of itensPorGrupo) {
        console.log(`🏭 [PRODUCAO-PRINT] Grupo "${grupoData.nome}": ${grupoData.itens.length} itens`);
      }

      if (itensPorGrupo.size === 0) {
        console.log('🏭 [PRODUCAO-PRINT] ❌ Nenhum grupo válido encontrado - finalizando');
        return;
      }

      // 4. IMPRIMIR UM CUPOM PARA CADA GRUPO
      console.log('🏭 [PRODUCAO-PRINT] ===== INICIANDO IMPRESSÕES =====');
      let grupoAtual = 1;

      for (const [grupoId, grupoData] of itensPorGrupo) {
        console.log(`🏭 [PRODUCAO-PRINT] [${grupoAtual}/${itensPorGrupo.size}] Imprimindo cupom para grupo: ${grupoData.nome}`);

        try {
          await imprimirCupomProducaoGrupo(pedido, grupoData, usarImpressao50mm);
          console.log(`🏭 [PRODUCAO-PRINT] ✅ Cupom do grupo "${grupoData.nome}" enviado para impressão`);
        } catch (error) {
          console.error(`🏭 [PRODUCAO-PRINT] ❌ Erro ao imprimir grupo "${grupoData.nome}":`, error);
        }

        // Pausa entre impressões para evitar conflitos
        if (grupoAtual < itensPorGrupo.size) {
          console.log(`🏭 [PRODUCAO-PRINT] Aguardando 2 segundos antes do próximo cupom...`);
          await new Promise(resolve => setTimeout(resolve, 2000));
        }

        grupoAtual++;
      }

      console.log('🏭 [PRODUCAO-PRINT] ===== TODOS OS CUPONS ENVIADOS =====');

    } catch (error) {
      console.error('❌ [PRODUCAO-PRINT] Erro ao imprimir cupons de produção:', error);
      // NÃO INTERROMPER o fluxo principal - apenas logar o erro
    }
  };

  // ✅ FUNÇÃO PARA IMPRIMIR CUPOM DE PRODUÇÃO DE UM GRUPO ESPECÍFICO
  const imprimirCupomProducaoGrupo = async (pedido: any, grupoData: any, usarImpressao50mm: boolean) => {
    try {
      console.log(`🖨️ [GRUPO-PRINT] ===== IMPRIMINDO GRUPO: ${grupoData.nome} =====`);
      console.log(`🖨️ [GRUPO-PRINT] Itens no grupo:`, grupoData.itens.length);
      console.log(`🖨️ [GRUPO-PRINT] Tipo de impressão:`, usarImpressao50mm ? '50MM' : '80MM');
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
          <style>
            ${usarImpressao50mm ? `
              @media print {
                @page {
                  margin: 0;
                  size: 1.97in auto; /* 50mm = 1.97 polegadas */
                }
                html {
                  width: 1.97in !important;
                  font-size: 12pt !important;
                }
                body {
                  width: 1.97in !important;
                  padding: 0.08in !important;
                  font-size: 12pt !important;
                  transform: scale(1) !important;
                  zoom: 1 !important;
                }
                * {
                  max-width: none !important;
                  overflow: visible !important;
                  -webkit-text-size-adjust: none !important;
                  -moz-text-size-adjust: none !important;
                  -ms-text-size-adjust: none !important;
                }
              }
              @media screen {
                body {
                  width: 1.97in !important;
                }
              }
              body {
                font-family: 'Arial', 'Helvetica', sans-serif;
                margin: 0;
                padding: 8px;
                width: 48mm;
                font-size: 12px;
                line-height: 1.4;
                font-weight: bold;
                color: #000000;
                text-shadow: 0.5px 0 0 currentColor;
                letter-spacing: 0.3px;
              }
            ` : `
              @media print {
                @page {
                  margin: 0;
                  size: 3.15in auto; /* 80mm = 3.15 polegadas */
                }
                html {
                  width: 3.15in !important;
                  font-size: 14pt !important;
                }
                body {
                  width: 3.15in !important;
                  padding: 0.15in !important;
                  font-size: 14pt !important;
                  transform: scale(1) !important;
                  zoom: 1 !important;
                }
                * {
                  max-width: none !important;
                  overflow: visible !important;
                  -webkit-text-size-adjust: none !important;
                  -moz-text-size-adjust: none !important;
                  -ms-text-size-adjust: none !important;
                }
              }
              @media screen {
                body {
                  width: 3.15in !important;
                }
              }
              body {
                font-family: 'Arial', 'Helvetica', sans-serif;
                margin: 0;
                padding: 15px;
                width: 78mm;
                font-size: 14px;
                line-height: 1.5;
                font-weight: bold;
                color: #000000;
                text-shadow: 0.5px 0 0 currentColor;
                letter-spacing: 0.3px;
              }
            `}

            * {
              max-width: none !important;
              overflow: visible !important;
              -webkit-text-size-adjust: none !important;
              -moz-text-size-adjust: none !important;
              -ms-text-size-adjust: none !important;
            }

            .header {
              text-align: center;
              font-weight: bold;
              font-size: ${usarImpressao50mm ? '14px' : '18px'};
              margin-bottom: 12px;
              border-bottom: 3px solid #000;
              padding-bottom: 6px;
            }

            .grupo-titulo {
              text-align: center;
              font-weight: bold;
              font-size: ${usarImpressao50mm ? '14px' : '18px'};
              margin: 12px 0;
              padding: 8px;
              color: #000;
              border: 2px solid #000;
              background: #fff;
            }

            .info-pedido {
              margin-bottom: 12px;
              font-size: ${usarImpressao50mm ? '11px' : '14px'};
              font-weight: bold;
            }

            .item {
              margin-bottom: 10px;
              font-size: ${usarImpressao50mm ? '12px' : '15px'};
              border-bottom: 2px dashed #333;
              padding-bottom: 8px;
            }

            .item-nome {
              font-weight: bold;
              font-size: ${usarImpressao50mm ? '13px' : '16px'};
              text-transform: uppercase;
            }



            .observacao {
              font-size: ${usarImpressao50mm ? '11px' : '13px'};
              color: #000;
              margin-top: 5px;
              font-style: italic;
              font-weight: bold;
              background-color: #f0f0f0;
              padding: 5px;
              border-left: 3px solid #000;
            }

            .adicionais {
              margin-left: ${usarImpressao50mm ? '12px' : '15px'};
              font-size: ${usarImpressao50mm ? '11px' : '13px'};
              color: #000;
              margin-top: 5px;
              font-weight: bold;
            }

            /* REGRAS ESPECÍFICAS PARA IMPRESSÃO - USAR PONTOS (PT) PARA IMPRESSÃO FÍSICA */
            @media print {
              .header {
                font-size: ${usarImpressao50mm ? '14pt' : '16pt'} !important;
              }
              .grupo-titulo {
                font-size: ${usarImpressao50mm ? '14pt' : '16pt'} !important;
                color: #000000 !important;
                background: #ffffff !important;
                font-weight: bold !important;
                border: 2px solid #000000 !important;
              }
              .info-pedido {
                font-size: ${usarImpressao50mm ? '11pt' : '13pt'} !important;
              }
              .item {
                font-size: ${usarImpressao50mm ? '12pt' : '14pt'} !important;
              }
              .item-nome {
                font-size: ${usarImpressao50mm ? '13pt' : '15pt'} !important;
              }
              .observacao {
                font-size: ${usarImpressao50mm ? '11pt' : '13pt'} !important;
              }
              .adicionais {
                font-size: ${usarImpressao50mm ? '11pt' : '13pt'} !important;
              }
            }
          </style>
        </head>
        <body>
          <div class="header">
            PRODUÇÃO
          </div>

          <div class="grupo-titulo">
            ${grupoData.nome.toUpperCase()}
          </div>

          <div class="info-pedido">
            <div><strong>Pedido:</strong> ${pedido.numero_pedido}</div>
            <div><strong>Cliente:</strong> ${pedido.nome_cliente}</div>
            ${pedido.mesa_numero ? `<div><strong>Mesa:</strong> ${pedido.mesa_numero}</div>` : ''}
            ${pedido.comanda_numero ? `<div><strong>Comanda:</strong> ${pedido.comanda_numero}</div>` : ''}
            <div><strong>Horário:</strong> ${new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}</div>
          </div>

          <div style="border-bottom: 1px dashed #000; margin-bottom: 10px;"></div>

          ${grupoData.itens.map(item => `
            <div class="item">
              <div class="item-nome">${item.quantidade || 1}x - ${item.produto_nome || item.nome || 'Item sem nome'}</div>

              ${item.sabores && item.sabores.length > 0 ? `
                <div class="observacao">
                  ${item.sabores.length > 1 ? 'Sabores:' : 'Sabor:'}
                  ${item.sabores.map(sabor => {
                    const nomeSabor = sabor.produto?.nome || sabor.nome || 'Sabor';
                    if (item.sabores.length > 1) {
                      // Para múltiplos sabores, mostrar fração baseada na porcentagem
                      const fracao = sabor.porcentagem === 50 ? '1/2' :
                                   sabor.porcentagem === 33 ? '1/3' :
                                   sabor.porcentagem === 25 ? '1/4' :
                                   `${sabor.porcentagem}%`;
                      return `<div style="margin-left: 10px; margin-top: 2px;">• ${fracao} ${nomeSabor}</div>`;
                    } else {
                      return `<div style="margin-left: 10px; margin-top: 2px;">• ${nomeSabor}</div>`;
                    }
                  }).join('')}
                </div>
              ` : ''}

              ${item.adicionais && item.adicionais.length > 0 ? `
                <div class="adicionais">
                  <strong>Adicionais:</strong><br>
                  ${item.adicionais.map(adicional => `
                    • ${adicional.quantidade || 1}x ${adicional.nome}
                  `).join('<br>')}
                </div>
              ` : ''}

              ${item.observacao ? `<div class="observacao">Obs: ${item.observacao}</div>` : ''}
            </div>
          `).join('')}

          <div style="text-align: center; margin-top: 15px; font-size: ${usarImpressao50mm ? '8px' : '10px'};">
            ═══════════════════════════
          </div>
        </body>
        </html>
      `;

      // Adicionar script de impressão automática ao HTML (mesmo padrão do cupom principal)
      const htmlComScript = htmlContent.replace(
        '</body>',
        `
          <script>
            window.onload = function() {
              window.print();
              setTimeout(function() {
                window.close();
              }, 1000);
            };
          </script>
        </body>`
      );

      // Abrir janela de impressão (EXATAMENTE igual ao cupom principal)
      console.log(`🖨️ [GRUPO-PRINT] Abrindo janela de impressão para grupo: ${grupoData.nome}`);

      const janelaImpressao = window.open('', '_blank', 'width=400,height=600');
      if (janelaImpressao) {
        janelaImpressao.document.write(htmlComScript);
        janelaImpressao.document.close();
        console.log(`🖨️ [GRUPO-PRINT] ✅ Cupom de produção do grupo ${grupoData.nome} enviado para impressão!`);
      } else {
        throw new Error(`Não foi possível abrir janela de impressão para o grupo ${grupoData.nome}. Verifique se o bloqueador de pop-ups está desabilitado.`);
      }

    } catch (error) {
      console.error(`❌ [PRODUCAO-PRINT] Erro ao imprimir cupom do grupo ${grupoData.nome}:`, error);
      throw error;
    }
  };

  // ✅ FUNÇÃO PARA SELECIONAR PEDIDO COM BUSCA DE FOTOS
  const selecionarPedido = async (pedido: any) => {
    try {
      // Primeiro, definir o pedido selecionado
      setPedidoSelecionado(pedido);

      // Buscar fotos dos produtos nos itens do pedido
      if (pedido.itens_pedido && pedido.itens_pedido.length > 0) {
        const produtosIds = pedido.itens_pedido
          .map((item: any) => item.produto_id)
          .filter(Boolean);

        if (produtosIds.length > 0) {
          const { data: fotosData } = await supabase
            .from('produto_fotos')
            .select('produto_id, url, principal')
            .in('produto_id', produtosIds)
            .eq('principal', true);

          // Adicionar fotos aos itens do pedido
          const itensComFotos = pedido.itens_pedido.map((item: any) => {
            const foto = fotosData?.find(f => f.produto_id === item.produto_id);
            return {
              ...item,
              produto_foto: foto?.url || null
            };
          });

          // Atualizar pedido selecionado com fotos
          setPedidoSelecionado({
            ...pedido,
            itens_pedido: itensComFotos
          });
        }
      }
    } catch (error) {
      console.error('Erro ao buscar fotos dos produtos:', error);
      // Mesmo com erro, manter o pedido selecionado
      setPedidoSelecionado(pedido);
    }
  };

  const filtrarCardapioPorBusca = (termo: string) => {
    setSearchCardapio(termo);
    // ✅ NÃO CHAMAR aplicarFiltrosCardapio AQUI - O useEffect já faz isso
  };

  const limparFiltrosCardapio = () => {
    setStatusFilterCardapio('pendente');
    setSearchCardapio('');
    setDataInicioCardapio('');
    setDataFimCardapio('');
    // ✅ NÃO CHAMAR aplicarFiltrosCardapio AQUI - O useEffect já faz isso
  };

  // ✅ USEEFFECT PARA SINCRONIZAR REF COM ESTADO DO MODAL
  useEffect(() => {
    modalCardapioAbertoRef.current = showCardapioDigitalModal;
  }, [showCardapioDigitalModal]);

  // ✅ USEEFFECT PARA CARREGAR PEDIDOS DO CARDÁPIO QUANDO MODAL ABRIR
  useEffect(() => {
    if (showCardapioDigitalModal && empresaData?.id) {
      // ✅ SEMPRE RESETAR PARA ABA "PENDENTE" QUANDO ABRIR O MODAL
      setStatusFilterCardapio('pendente');
      // ✅ RESETAR PEDIDO SELECIONADO PARA MOSTRAR APENAS A LISTA
      setPedidoSelecionado(null);
      carregarTodosPedidosCardapio();
    }
  }, [showCardapioDigitalModal, empresaData?.id]);

  // Carregar configuração de taxa de entrega quando modal de cadastro abrir
  useEffect(() => {
    if (showCadastroClienteModal) {
      carregarTaxaEntregaConfig();
    }
  }, [showCadastroClienteModal]);

  // Carregar configuração de taxa de entrega quando modal de seleção de cliente abrir
  useEffect(() => {
    if (showClienteModal) {
      carregarTaxaEntregaConfig();
    }
  }, [showClienteModal]);

  // Fechar dropdown de bairros ao clicar fora
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      if (showBairrosDropdown && !target.closest('.bairro-dropdown-container')) {
        setShowBairrosDropdown(false);
      }
    };

    if (showBairrosDropdown) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [showBairrosDropdown]);

  // ✅ USEEFFECT DUPLICADO REMOVIDO - JÁ EXISTE UM ACIMA

  // ✅ VERIFICAR SE DEVE MOSTRAR MODAL DE SOM INICIAL
  useEffect(() => {
    // Só mostrar se:
    // 1. Cardápio digital está ativo
    // 2. Som não está habilitado ou foi desabilitado pelo usuário
    // 3. Modal ainda não foi exibido nesta sessão
    if (
      pdvConfig?.cardapio_digital === true &&
      (!audioHabilitado || somDesabilitadoPeloUsuario) &&
      !modalSomInicialJaExibido &&
      pdvConfig !== null // Garantir que as configurações foram carregadas
    ) {
      setShowModalHabilitarSomInicial(true);
      setModalSomInicialJaExibido(true);
    }
  }, [pdvConfig?.cardapio_digital, audioHabilitado, somDesabilitadoPeloUsuario, modalSomInicialJaExibido, pdvConfig]);

  // ✅ FUNÇÃO MELHORADA PARA ACEITAR PEDIDO COM MUDANÇA DE ABA
  const aceitarPedidoComMudancaAba = async (pedidoId: string) => {
    const sucesso = await aceitarPedido(pedidoId);
    if (sucesso) {
      // ✅ RECARREGAR LISTA COMPLETA IMEDIATAMENTE
      await carregarTodosPedidosCardapio();

      // Mudar para aba "Confirmado" após aceitar
      setTimeout(() => {
        setStatusFilterCardapio('confirmado');
      }, 100); // Delay reduzido
    }
  };

  // ✅ FUNÇÃO MELHORADA PARA REJEITAR PEDIDO COM MUDANÇA DE ABA
  const rejeitarPedidoComMudancaAba = async (pedidoId: string) => {
    const sucesso = await rejeitarPedido(pedidoId);
    if (sucesso) {
      // ✅ RECARREGAR LISTA COMPLETA IMEDIATAMENTE
      await carregarTodosPedidosCardapio();

      // Manter na aba "Pendente" para ver outros pedidos pendentes
      // (não mudar de aba para que o usuário veja outros pedidos pendentes)
    }
  };

  // ✅ FUNÇÃO PARA COPIAR CPF/CNPJ (APENAS NÚMEROS)
  const copiarCpfCnpj = async (cpfCnpj: string) => {
    try {
      // Remover máscara - manter apenas números
      const apenasNumeros = cpfCnpj.replace(/\D/g, '');

      // Copiar para área de transferência
      await navigator.clipboard.writeText(apenasNumeros);

      // Exibir toast de confirmação
      toast.success(`CPF/CNPJ copiado: ${apenasNumeros}`);
    } catch (error) {
      toast.error('Erro ao copiar CPF/CNPJ');
    }
  };

  // Função para importar pedido para o carrinho (com confirmação)
  const importarPedidoParaCarrinho = (pedido: any) => {
    if (!pedido.pedidos_itens || pedido.pedidos_itens.length === 0) {
      toast.error('Este pedido não possui itens');
      setShowPedidosModal(false);
      return;
    }

    // Verificar se o pedido já foi importado
    const jaImportado = pedidosImportados.some(p => p.id === pedido.id);
    if (jaImportado) {
      toast.warning(`Pedido #${pedido.numero} já foi importado!`);
      setShowPedidosModal(false);
      return;
    }

    // Verificar se há cliente diferente no carrinho
    const clienteAtual = clienteSelecionado;
    const clienteDoPedido = pedido.cliente;

    if (clienteAtual && clienteDoPedido && clienteAtual.id !== clienteDoPedido.id) {
      toast.error('Não é possível importar pedido de cliente diferente. Limpe o carrinho primeiro.');
      setShowPedidosModal(false);
      return;
    }

    // Se há itens no carrinho de outros pedidos, mostrar modal de confirmação
    const temItensDeOutrosPedidos = carrinho.some(item => !item.pedido_origem_id);
    if (temItensDeOutrosPedidos) {
      setPedidoParaImportar(pedido);
      setShowConfirmImportarPedido(true);
      // Não fechar o modal aqui pois vai abrir o modal de confirmação
    } else {
      // Se não há conflitos, importar diretamente
      executarImportacaoPedido(pedido);
      // O modal será fechado dentro da função executarImportacaoPedido
    }
  };

  // Função para carregar vendas do PDV da empresa
  const loadVendas = async () => {
    try {
      setLoadingVendas(true);

      // Obter usuário autenticado
      const { data: userData, error: userError } = await supabase.auth.getUser();
      if (userError || !userData.user) {
        throw new Error('Usuário não autenticado');
      }

      // Obter empresa do usuário
      const { data: usuarioData, error: usuarioError } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (usuarioError || !usuarioData) {
        throw new Error('Dados do usuário não encontrados');
      }

      // Carregar vendas da tabela PDV da empresa
      // ✅ FILTRO: Não mostrar NFe (modelo 55) - apenas vendas do PDV e NFC-e
      let query = supabase
        .from('pdv')
        .select(`
          id,
          numero_venda,
          data_venda,
          created_at,
          status_venda,
          valor_total,
          valor_subtotal,
          valor_desconto,
          valor_desconto_itens,
          valor_desconto_total,
          valor_acrescimo,
          nome_cliente,
          documento_cliente,
          telefone_cliente,
          pedidos_importados,
          cancelada_em,
          motivo_cancelamento,
          cancelada_por_usuario_id,
          protocolo_cancelamento,
          empresa_id,
          usuario_id,
          vendedores_ids,
          tentativa_nfce,
          status_fiscal,
          erro_fiscal,
          modelo_documento,
          numero_documento,
          serie_documento,
          chave_nfe,
          protocolo_nfe,
          tipo_pagamento,
          forma_pagamento_id,
          formas_pagamento,
          valor_pago,
          valor_troco,
          parcelas,
          observacao_venda,
          ambiente,
          devolucao_origem_id,
          devolucao_origem_numero,
          devolucao_origem_codigo,
          venda_origem_troca_id,
          venda_origem_troca_numero
        `)
        .eq('empresa_id', usuarioData.empresa_id)
        .or('modelo_documento.is.null,modelo_documento.eq.65'); // ✅ Mostrar apenas vendas PDV (null) e NFC-e (65) - excluir NFe (55)

      // Aplicar filtros
      // Filtro por status
      if (filtroStatus === 'canceladas') {
        query = query.eq('status_venda', 'cancelada');
      } else if (filtroStatus === 'finalizadas') {
        query = query.eq('status_venda', 'finalizada');
      } else if (filtroStatus === 'pedidos') {
        query = query.not('pedidos_importados', 'is', null);
      }
      // 'todas' não aplica filtro de status

      // ✅ NOVO: Filtro específico para NFC-e
      if (filtroNfce === 'pendentes') {
        query = query.eq('modelo_documento', 65).eq('status_fiscal', 'pendente');
      } else if (filtroNfce === 'autorizadas') {
        query = query.eq('modelo_documento', 65).eq('status_fiscal', 'autorizada');
      } else if (filtroNfce === 'canceladas') {
        query = query.eq('modelo_documento', 65).eq('status_fiscal', 'cancelada');
      }
      // 'todas' não aplica filtro de NFC-e

      // Filtro por data e hora
      if (filtroDataInicio) {
        // Para datetime-local, usar diretamente o valor (já inclui hora)
        const dataInicio = new Date(filtroDataInicio);
        query = query.gte('created_at', dataInicio.toISOString());
      }

      if (filtroDataFim) {
        // Para datetime-local, usar diretamente o valor (já inclui hora)
        const dataFim = new Date(filtroDataFim);
        query = query.lte('created_at', dataFim.toISOString());
      }

      // Filtro por número da venda
      if (filtroNumeroVenda) {
        query = query.ilike('numero_venda', `%${filtroNumeroVenda}%`);
      }

      const { data, error } = await query
        .order('created_at', { ascending: false })
        .limit(100);

      if (error) {
        throw error;
      }

      const vendasData = data || [];



      // Buscar informações dos usuários (operadores, vendedores e quem cancelou)
      const usuariosIds = [
        ...new Set([
          ...vendasData.map(v => v.usuario_id).filter(Boolean),
          ...vendasData.map(v => v.cancelada_por_usuario_id).filter(Boolean),
          // Adicionar vendedores das vendas
          ...vendasData.flatMap(v => v.vendedores_ids || []).filter(Boolean)
        ])
      ];

      let usuariosMap = new Map();
      if (usuariosIds.length > 0) {
        const { data: usuariosData } = await supabase
          .from('usuarios')
          .select('id, nome')
          .in('id', usuariosIds);

        if (usuariosData) {
          usuariosData.forEach(usuario => {
            usuariosMap.set(usuario.id, usuario);
          });
        }
      }

      // Processar dados das vendas do PDV
      const vendasProcessadas = await Promise.all(vendasData.map(async (venda) => {
        // Verificar se a venda tem pedidos importados
        const temPedidosImportados = venda.pedidos_importados &&
          Array.isArray(venda.pedidos_importados) &&
          venda.pedidos_importados.length > 0;

        // Calcular valor final (valor_total - desconto + acréscimo)
        const valorTotal = Number(venda.valor_total) || 0;
        const valorDesconto = Number(venda.valor_desconto) || 0;
        const valorAcrescimo = Number(venda.valor_acrescimo) || 0;
        const valorFinal = valorTotal - valorDesconto + valorAcrescimo;

        // Se tem pedidos importados, buscar os números dos pedidos
        let pedidosOrigem = null;
        if (temPedidosImportados) {
          try {
            const { data: pedidosData, error: pedidosError } = await supabase
              .from('pedidos')
              .select('id, numero')
              .in('id', venda.pedidos_importados);

            if (!pedidosError && pedidosData) {
              pedidosOrigem = pedidosData.map(p => p.numero);
            }
          } catch (error) {
            // Em caso de erro, usar os IDs como fallback
            pedidosOrigem = venda.pedidos_importados;
          }
        }

        // Processar vendedores da venda
        const vendedoresVenda = venda.vendedores_ids && Array.isArray(venda.vendedores_ids)
          ? venda.vendedores_ids.map(vendedorId => usuariosMap.get(vendedorId)).filter(Boolean)
          : [];

        return {
          ...venda,
          numero_venda: venda.numero_venda || venda.id, // Usar numero_venda ou ID como fallback
          created_at: new Date(venda.data_venda || venda.created_at).toLocaleString('pt-BR'),
          data_venda_formatada: new Date(venda.data_venda || venda.created_at).toLocaleString('pt-BR'),
          cancelada_em_formatada: venda.cancelada_em ? new Date(venda.cancelada_em).toLocaleString('pt-BR') : null,
          valor_total: valorTotal,
          valor_final: valorFinal,
          desconto_total: valorDesconto,
          acrescimo_total: valorAcrescimo,
          // Se tem pedidos importados, mostrar números dos pedidos
          pedidos_origem: pedidosOrigem,
          vendas_pdv_itens: [], // Será carregado separadamente se necessário
          vendas_pdv_pagamentos: [], // Será carregado separadamente se necessário
          cliente: venda.nome_cliente ? {
            nome: venda.nome_cliente,
            documento: venda.documento_cliente,
            telefone: venda.telefone_cliente
          } : null,
          // Dados do usuário que fez a venda (operador)
          usuario_venda: venda.usuario_id ? usuariosMap.get(venda.usuario_id) : null,
          // Dados dos vendedores da venda
          vendedores_venda: vendedoresVenda,
          // Dados do usuário que cancelou (se aplicável)
          usuario_cancelamento: venda.cancelada_por_usuario_id ? usuariosMap.get(venda.cancelada_por_usuario_id) : null,
          status: venda.status_venda || 'finalizada'
        };
      }));

      // Filtro por número de pedido (aplicado após processamento)
      let vendasFiltradas = vendasProcessadas;
      if (filtroNumeroPedido) {
        vendasFiltradas = vendasProcessadas.filter(venda => {
          if (venda.pedidos_origem && Array.isArray(venda.pedidos_origem)) {
            return venda.pedidos_origem.some((numeroPedido: string) =>
              numeroPedido && numeroPedido.toString().toLowerCase().includes(filtroNumeroPedido.toLowerCase())
            );
          }
          return false;
        });
      }

      setVendas(vendasFiltradas);

    } catch (error: any) {
      toast.error(`Erro ao carregar vendas: ${error.message}`);
    } finally {
      setLoadingVendas(false);
    }
  };

  // Função para cancelar uma venda
  const cancelarVenda = async () => {
    if (!vendaParaCancelar) {
      toast.error('Venda não selecionada');
      return;
    }

    // ✅ VALIDAÇÃO: Motivo obrigatório com mínimo de 15 caracteres
    if (motivoCancelamento.trim().length < 15) {
      toast.error('Motivo do cancelamento deve ter pelo menos 15 caracteres');
      return;
    }

    // ✅ NOVO: Verificar se é NFC-e autorizada para cancelamento fiscal
    const isNFCeAutorizada = vendaParaCancelar.modelo_documento === 65 &&
                             vendaParaCancelar.status_fiscal === 'autorizada' &&
                             vendaParaCancelar.chave_nfe &&
                             vendaParaCancelar.protocolo_nfe;

    try {
      // Obter dados do usuário atual
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        toast.error('Usuário não autenticado');
        return;
      }

      // ✅ NOVO: Verificar se é NFC-e autorizada para cancelamento fiscal
      const isNFCeAutorizada = vendaParaCancelar.modelo_documento === 65 &&
                               vendaParaCancelar.status_fiscal === 'autorizada' &&
                               vendaParaCancelar.chave_nfe &&
                               vendaParaCancelar.protocolo_nfe;

      if (isNFCeAutorizada) {
        // Iniciando cancelamento fiscal da NFC-e

        // Validar prazo de 15 minutos para NFC-e
        const dataEmissao = new Date(vendaParaCancelar.data_emissao_nfe || vendaParaCancelar.finalizada_em);
        const agora = new Date();
        const diferencaMinutos = (agora.getTime() - dataEmissao.getTime()) / (1000 * 60);

        if (diferencaMinutos > 15) {
          toast.error('NFC-e não pode ser cancelada fiscalmente. Prazo de 15 minutos expirado.');
          return;
        }

        // ✅ CORREÇÃO: Backend busca empresa pela chave da NFC-e
        const cancelamentoData = {
          chave_nfe: vendaParaCancelar.chave_nfe,
          motivo: motivoCancelamento.trim(),
          protocolo_nfe: vendaParaCancelar.protocolo_nfe
        };

        const cancelamentoResponse = await fetch('/backend/public/cancelar-nfce.php', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(cancelamentoData)
        });

        if (!cancelamentoResponse.ok) {
          const errorText = await cancelamentoResponse.text();
          throw new Error('Erro no cancelamento fiscal da NFC-e');
        }

        const cancelamentoResult = await cancelamentoResponse.json();

        if (!cancelamentoResult.success) {
          throw new Error(cancelamentoResult.error || 'Erro no cancelamento fiscal');
        }

        toast.success('NFC-e cancelada fiscalmente com sucesso!');
      } else {
        // Cancelamento apenas no sistema (sem fiscal)

        const { error } = await supabase
          .from('pdv')
          .update({
            status_venda: 'cancelada',
            cancelada_em: new Date().toISOString(),
            motivo_cancelamento: motivoCancelamento.trim(),
            cancelada_por_usuario_id: userData.user.id
          })
          .eq('id', vendaParaCancelar.id);

        if (error) {
          throw error;
        }
      }

      // ✅ NOVO: Liberar devoluções que foram processadas por esta venda
      console.log(`🔄 Liberando devoluções processadas pela venda #${vendaParaCancelar.numero_venda}...`);

      const { data: devolucoesProcesadas, error: errorDevolucoesConsulta } = await supabase
        .from('devolucoes')
        .select('id, numero')
        .eq('venda_processamento_numero', vendaParaCancelar.numero_venda)
        .eq('status', 'processada');

      if (errorDevolucoesConsulta) {
        console.error('❌ Erro ao consultar devoluções processadas:', errorDevolucoesConsulta);
      } else if (devolucoesProcesadas && devolucoesProcesadas.length > 0) {
        console.log(`📋 Encontradas ${devolucoesProcesadas.length} devoluções para liberar:`, devolucoesProcesadas);

        const { error: errorLiberarDevolucoes } = await supabase
          .from('devolucoes')
          .update({
            status: 'pendente',
            venda_processamento_id: null,
            venda_processamento_numero: null,
            updated_at: new Date().toISOString()
          })
          .eq('venda_processamento_numero', vendaParaCancelar.numero_venda)
          .eq('status', 'processada');

        if (errorLiberarDevolucoes) {
          console.error('❌ Erro ao liberar devoluções:', errorLiberarDevolucoes);
          toast.error('Venda cancelada, mas houve erro ao liberar devoluções');
        } else {
          console.log('✅ Devoluções liberadas com sucesso');

          // ✅ NOVO: Remover foreign key devolucao_origem_id da tabela PDV
          console.log(`🔄 Removendo referência de devolução da venda #${vendaParaCancelar.numero_venda}...`);
          const { error: errorRemoverReferencia } = await supabase
            .from('pdv')
            .update({
              devolucao_origem_id: null,
              devolucao_origem_numero: null,
              devolucao_origem_codigo: null,
              updated_at: new Date().toISOString()
            })
            .eq('id', vendaParaCancelar.id);

          if (errorRemoverReferencia) {
            console.error('❌ Erro ao remover referência de devolução:', errorRemoverReferencia);
          } else {
            console.log('✅ Referência de devolução removida da venda');
          }

          toast.success(`Venda cancelada e ${devolucoesProcesadas.length} devolução(ões) liberada(s) para exclusão`);
        }
      } else {
        console.log('ℹ️ Nenhuma devolução processada encontrada para esta venda');
        toast.success(`Venda #${vendaParaCancelar.numero_venda} cancelada com sucesso`);
      }

      // Buscar nome do usuário que cancelou
      const { data: usuarioCancelamento } = await supabase
        .from('usuarios')
        .select('nome')
        .eq('id', userData.user.id)
        .single();

      // Disparar evento customizado para atualizar a venda na lista
      const vendaCanceladaEvent = new CustomEvent('vendaCancelada', {
        detail: {
          vendaId: vendaParaCancelar.id,
          numeroVenda: vendaParaCancelar.numero_venda,
          motivoCancelamento: motivoCancelamento.trim(),
          canceladaEm: new Date().toISOString(),
          canceladaPorUsuarioId: userData.user.id,
          nomeUsuarioCancelamento: usuarioCancelamento?.nome || 'Usuário não identificado'
        }
      });
      window.dispatchEvent(vendaCanceladaEvent);

      // Fechar modal e limpar estados
      setShowCancelamentoModal(false);
      setVendaParaCancelar(null);
      setMotivoCancelamento('');

    } catch (error) {
      toast.error(`Erro ao cancelar venda: ${error.message}`);
    }
  };

  // Função para carregar itens da venda
  const carregarItensVenda = async (vendaId: string) => {
    try {
      setLoadingItensVenda(true);



      // ✅ NOVO: Buscar regime tributário da empresa para exibição correta dos campos
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error('Usuário não autenticado');

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) throw new Error('Empresa não encontrada');



      // ✅ CORREÇÃO: Carregar dados da venda primeiro se não estiver disponível
      let dadosVenda = vendaParaExibirItens;
      if (!dadosVenda) {

        const { data: vendaData, error: vendaError } = await supabase
          .from('pdv')
          .select(`
            id,
            valor_total,
            valor_desconto,
            devolucao_origem_id,
            devolucao_origem_numero,
            devolucao_origem_codigo,
            venda_origem_troca_id,
            venda_origem_troca_numero,
            tipo_pagamento,
            forma_pagamento_id
          `)
          .eq('id', vendaId)
          .single();

        if (vendaError) {
          console.error('🔍 [DEVOLUÇÃO DEBUG] Erro ao carregar venda:', vendaError);
          throw vendaError;
        }

        dadosVenda = vendaData;

      }

      const { data: empresaData } = await supabase
        .from('empresas')
        .select('regime_tributario')
        .eq('id', usuarioData.empresa_id)
        .single();

      const regimeTributario = empresaData?.regime_tributario || 1;

      // ✅ CORREÇÃO: Carregar itens da venda com dados fiscais da tabela pdv_itens (igual ao modal Editar NFCe)
      const { data: itensData, error: itensError } = await supabase
        .from('pdv_itens')
        .select(`
          id,
          produto_id,
          codigo_produto,
          nome_produto,
          descricao_produto,
          quantidade,
          valor_unitario,
          valor_subtotal,
          valor_total_item,
          tem_desconto,
          tipo_desconto,
          percentual_desconto,
          valor_desconto_aplicado,
          origem_item,
          pedido_origem_numero,
          observacao_item,
          vendedor_id,
          vendedor_nome,
          cfop,
          cst_icms,
          csosn_icms,
          ncm,
          cest,
          margem_st,
          aliquota_icms,
          origem_produto,
          aliquota_pis,
          aliquota_cofins,
          cst_pis,
          cst_cofins,
          unidade,
          sabores_json,
          descricao_sabores,
          tabela_preco_id,
          tabela_preco_nome,
          produto:produtos(
            id,
            codigo,
            codigo_barras,
            nome,
            unidade_medida_id,
            unidade_medida:unidade_medida(
              id,
              nome,
              sigla
            )
          ),
          pdv_itens_adicionais (
            id,
            nome_adicional,
            quantidade,
            valor_unitario,
            valor_total
          )
        `)
        .eq('pdv_id', vendaId)
        .order('created_at', { ascending: true });

      if (itensError) {
        console.error('🔍 [DEVOLUÇÃO DEBUG] Erro ao carregar itens:', itensError);
        throw itensError;
      }



      // ✅ CORREÇÃO: Identificar itens que vieram de troca/devolução

      // Buscar quais produtos estão na devolução associada para marcar como troca
      let produtosDaTroca = new Set();
      if (dadosVenda?.devolucao_origem_codigo) {
        try {
          const { data: devolucaoData, error: devolucaoError } = await supabase
            .from('devolucoes')
            .select(`
              devolucao_itens!inner(
                produto_id,
                produto_nome,
                produto_codigo
              )
            `)
            .eq('codigo_troca', dadosVenda.devolucao_origem_codigo)
            .eq('devolucao_itens.deletado', false)
            .single();

          if (devolucaoData && !devolucaoError) {
            devolucaoData.devolucao_itens.forEach(itemTroca => {
              if (itemTroca.produto_id) {
                produtosDaTroca.add(itemTroca.produto_id);
              }
              if (itemTroca.produto_codigo) {
                produtosDaTroca.add(itemTroca.produto_codigo);
              }
            });
          }
        } catch (error) {
          console.error('Erro ao buscar produtos da troca:', error);
        }
      }

      const itensProcessados = (itensData || []).map((item, index) => {
        // ✅ CORREÇÃO: Apenas itens com valores negativos são devolução
        const isItemDeTroca = produtosDaTroca.has(item.produto_id) || produtosDaTroca.has(item.codigo_produto);
        const isDevolucao = item.origem_item === 'devolucao' ||
                           (item.valor_unitario < 0 && item.valor_total_item < 0);



        return {
          ...item,
          sequencia: index + 1,
          cfop_editavel: item.cfop, // ✅ SEM FALLBACK: CFOP real da pdv_itens
          cst_editavel: item.cst_icms, // ✅ SEM FALLBACK: CST real da pdv_itens
          csosn_editavel: item.csosn_icms, // ✅ SEM FALLBACK: CSOSN real da pdv_itens
          ncm_editavel: item.ncm, // ✅ SEM FALLBACK: NCM real da pdv_itens
          cest_editavel: item.cest, // ✅ SEM FALLBACK: CEST real da pdv_itens
          margem_st_editavel: item.margem_st, // ✅ SEM FALLBACK: Margem ST real da pdv_itens
          aliquota_icms_editavel: item.aliquota_icms, // ✅ SEM FALLBACK: Alíquota ICMS real da pdv_itens
          regime_tributario: regimeTributario,
          editando_cfop: false,
          editando_cst: false,
          editando_csosn: false,
          editando_ncm: false,
          editando_cest: false,
          editando_margem_st: false,
          editando_aliquota_icms: false,
          isDevolucao
        };
      });

      // ✅ RESTAURAR: Criar itens sintéticos de devolução com dados fiscais corretos
      let itensDevolucao: any[] = [];

      if (dadosVenda?.devolucao_origem_codigo) {
        try {
          const { data: devolucaoData, error: devolucaoError } = await supabase
            .from('devolucoes')
            .select(`
              numero,
              codigo_troca,
              tipo_devolucao,
              valor_total,
              devolucao_itens!inner(
                produto_id,
                produto_nome,
                produto_codigo,
                quantidade,
                preco_unitario,
                preco_total,
                motivo
              )
            `)
            .eq('codigo_troca', dadosVenda.devolucao_origem_codigo)
            .single();

          if (devolucaoData && !devolucaoError) {

            // ✅ CRIAR itens sintéticos de devolução com dados fiscais reais
            const itensDevolucaoComDados = await Promise.all(
              (devolucaoData.devolucao_itens || []).map(async (item: any, index: number) => {

                // Buscar dados fiscais reais do produto
                let dadosProduto = null;
                if (item.produto_id) {
                  const { data: produtoData, error: produtoError } = await supabase
                    .from('produtos')
                    .select(`
                      id, codigo, nome, ncm, cest, cfop, cst_icms, csosn_icms,
                      aliquota_icms, margem_st, origem_produto, aliquota_pis,
                      aliquota_cofins, cst_pis, cst_cofins,
                      unidade_medida:unidade_medida(sigla)
                    `)
                    .eq('id', item.produto_id)
                    .single();

                  if (produtoData && !produtoError) {
                    dadosProduto = produtoData;
                  }
                }

                // ✅ CRIAR item sintético de devolução com dados fiscais reais
                return {
                  id: `devolucao_${index}`,
                  produto_id: item.produto_id,
                  codigo_produto: dadosProduto?.codigo || item.produto_codigo,
                  nome_produto: item.produto_nome,
                  descricao_produto: item.produto_nome,
                  quantidade: item.quantidade,
                  valor_unitario: -Math.abs(parseFloat(item.preco_unitario)), // ✅ NEGATIVO
                  valor_subtotal: -Math.abs(parseFloat(item.preco_total)),
                  valor_total_item: -Math.abs(parseFloat(item.preco_total)), // ✅ NEGATIVO
                  origem_item: 'devolucao',
                  observacao_item: item.motivo,
                  // ✅ DADOS FISCAIS REAIS do produto
                  cfop: dadosProduto?.cfop,
                  cst_icms: dadosProduto?.cst_icms,
                  csosn_icms: dadosProduto?.csosn_icms,
                  ncm: dadosProduto?.ncm,
                  cest: dadosProduto?.cest,
                  margem_st: dadosProduto?.margem_st,
                  aliquota_icms: dadosProduto?.aliquota_icms,
                  origem_produto: dadosProduto?.origem_produto,
                  unidade: dadosProduto?.unidade_medida?.sigla,
                  sequencia: itensProcessados.length + index + 1,
                  // ✅ DADOS FISCAIS EDITÁVEIS REAIS
                  cfop_editavel: dadosProduto?.cfop,
                  cst_editavel: dadosProduto?.cst_icms,
                  csosn_editavel: dadosProduto?.csosn_icms,
                  ncm_editavel: dadosProduto?.ncm,
                  cest_editavel: dadosProduto?.cest,
                  margem_st_editavel: dadosProduto?.margem_st,
                  aliquota_icms_editavel: dadosProduto?.aliquota_icms,
                  regime_tributario: regimeTributario,
                  editando_cfop: false,
                  editando_cst: false,
                  editando_csosn: false,
                  editando_ncm: false,
                  editando_cest: false,
                  editando_margem_st: false,
                  editando_aliquota_icms: false,
                  isDevolucao: true // ✅ Marcar como devolução
                };
              })
            );

            itensDevolucao = itensDevolucaoComDados;
          }
        } catch (error) {
          console.error('Erro ao carregar devolução:', error);
        }
      }

      // ✅ COMBINAR itens da venda + itens de devolução sintéticos
      const todosItens = [...itensProcessados, ...itensDevolucao];

      setItensVenda(todosItens);

    } catch (error) {
      console.error('🔍 [DEVOLUÇÃO DEBUG] Erro geral:', error);
      toast.error('Erro ao carregar itens da venda');
    } finally {
      setLoadingItensVenda(false);
    }
  };

  // ✅ NOVA: Função para carregar itens para edição da NFC-e
  const carregarItensParaEdicaoNfce = async (vendaId: string) => {
    try {
      setLoadingItensNfce(true);

      // ✅ NOVO: Buscar regime tributário da empresa
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error('Usuário não autenticado');

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) throw new Error('Empresa não encontrada');

      const { data: empresaData } = await supabase
        .from('empresas')
        .select('regime_tributario')
        .eq('id', usuarioData.empresa_id)
        .single();

      const regimeTributario = empresaData?.regime_tributario || 3; // Default: Simples Nacional

      // ✅ CORREÇÃO: Buscar configurações PDV para venda sem produto
      const { data: pdvConfigData } = await supabase
        .from('pdv_config')
        .select(`
          venda_sem_produto_ncm,
          venda_sem_produto_cfop,
          venda_sem_produto_origem,
          venda_sem_produto_situacao_tributaria,
          venda_sem_produto_cest,
          venda_sem_produto_margem_st,
          venda_sem_produto_aliquota_icms
        `)
        .eq('empresa_id', usuarioData.empresa_id)
        .single();

      const configVendaSemProduto = pdvConfigData || {};

      // Carregar itens da venda com dados básicos dos produtos
      const { data: itensData, error: itensError } = await supabase
        .from('pdv_itens')
        .select(`
          id,
          produto_id,
          codigo_produto,
          nome_produto,
          quantidade,
          valor_unitario,
          valor_total_item,
          cfop,
          cst_icms,
          csosn_icms,
          ncm,
          cest,
          margem_st,
          aliquota_icms,
          origem_produto,
          aliquota_pis,
          aliquota_cofins,
          cst_pis,
          cst_cofins,
          unidade,
          produto:produtos(
            id,
            codigo,
            codigo_barras,
            nome,
            unidade_medida_id,
            cest,
            ncm,
            cfop,
            origem_produto,
            situacao_tributaria,
            cst_icms,
            csosn_icms,
            aliquota_icms,
            margem_st
          )
        `)
        .eq('pdv_id', vendaId)
        .order('created_at', { ascending: true });

      if (itensError) {
        throw itensError;
      }

      // Processar itens para edição com campos editáveis
      const itensProcessados = (itensData || []).map((item, index) => {
        // ✅ CORREÇÃO: Para item 999999, usar configuração PDV; para produtos normais, usar dados do produto
        const isVendaSemProduto = item.codigo_produto === '999999';

        return {
          ...item,
          sequencia: index + 1,
          // ✅ CORREÇÃO: Priorizar dados do produto para itens normais, pdv_itens para 999999
          cfop_editavel: isVendaSemProduto
            ? (item.cfop || configVendaSemProduto.venda_sem_produto_cfop || '5102')
            : (item.produto?.cfop || item.cfop || '5102'),
          cst_editavel: isVendaSemProduto
            ? (item.cst_icms || '00')
            : (item.produto?.cst_icms || item.cst_icms || '00'),
          csosn_editavel: isVendaSemProduto
            ? (item.csosn_icms)
            : (item.produto?.csosn_icms || item.csosn_icms),
          ncm_editavel: isVendaSemProduto
            ? (item.ncm || configVendaSemProduto.venda_sem_produto_ncm || '22021000')
            : (item.produto?.ncm || item.ncm || '00000000'),
          cest_editavel: isVendaSemProduto
            ? (item.cest || configVendaSemProduto.venda_sem_produto_cest || '')
            : (item.produto?.cest || item.cest || ''), // ✅ CORREÇÃO: Priorizar CEST do produto
          margem_st_editavel: isVendaSemProduto
            ? (item.margem_st || configVendaSemProduto.venda_sem_produto_margem_st || '0')
            : (item.produto?.margem_st || item.margem_st || '0'),
          aliquota_icms_editavel: isVendaSemProduto
            ? (item.aliquota_icms || configVendaSemProduto.venda_sem_produto_aliquota_icms || '18')
            : (item.produto?.aliquota_icms || item.aliquota_icms || '0'),
          regime_tributario: regimeTributario, // ✅ NOVO: Regime real da empresa
          editando_cfop: false,
          editando_cst: false,
          editando_csosn: false,
          editando_ncm: false, // ✅ NOVO: Estado de edição do NCM
          editando_cest: false, // ✅ NOVO: Estado de edição do CEST
          editando_margem_st: false, // ✅ NOVO: Estado de edição da Margem ST
          editando_aliquota_icms: false // ✅ NOVO: Estado de edição da Alíquota ICMS
        };
      });

      setItensNfceEdicao(itensProcessados);

    } catch (error: any) {
      toast.error(`Erro ao carregar itens: ${error.message || 'Erro desconhecido'}`);
    } finally {
      setLoadingItensNfce(false);
    }
  };

  // ✅ NOVAS: Funções para editar campos fiscais (NFC-e)
  const habilitarEdicaoCampo = (itemIndex: number, campo: 'cfop' | 'cst' | 'csosn' | 'ncm' | 'cest' | 'margem_st' | 'aliquota_icms') => {
    setItensNfceEdicao(prev => prev.map((item, index) =>
      index === itemIndex
        ? { ...item, [`editando_${campo}`]: true }
        : item
    ));
  };

  const salvarEdicaoCampo = (itemIndex: number, campo: 'cfop' | 'cst' | 'csosn' | 'ncm' | 'cest' | 'margem_st' | 'aliquota_icms', novoValor: string) => {
    setItensNfceEdicao(prev => prev.map((item, index) =>
      index === itemIndex
        ? {
            ...item,
            [`${campo}_editavel`]: novoValor,
            [`editando_${campo}`]: false
          }
        : item
    ));
  };

  const cancelarEdicaoCampo = (itemIndex: number, campo: 'cfop' | 'cst' | 'csosn' | 'ncm' | 'cest' | 'margem_st' | 'aliquota_icms') => {
    setItensNfceEdicao(prev => prev.map((item, index) =>
      index === itemIndex
        ? { ...item, [`editando_${campo}`]: false }
        : item
    ));
  };

  // ✅ NOVO: Funções para editar campos fiscais no modal de itens
  const habilitarEdicaoCampoModalItens = (itemIndex: number, campo: 'cfop' | 'cst' | 'csosn' | 'ncm' | 'cest' | 'margem_st' | 'aliquota_icms') => {
    setItensVenda(prev => prev.map((item, index) =>
      index === itemIndex
        ? { ...item, [`editando_${campo}`]: true }
        : item
    ));
  };

  const salvarEdicaoCampoModalItens = (itemIndex: number, campo: 'cfop' | 'cst' | 'csosn' | 'ncm' | 'cest' | 'margem_st' | 'aliquota_icms', novoValor: string) => {
    setItensVenda(prev => prev.map((item, index) =>
      index === itemIndex
        ? {
            ...item,
            [`${campo}_editavel`]: novoValor,
            [`editando_${campo}`]: false
          }
        : item
    ));
  };

  const cancelarEdicaoCampoModalItens = (itemIndex: number, campo: 'cfop' | 'cst' | 'csosn' | 'ncm' | 'cest' | 'margem_st' | 'aliquota_icms') => {
    setItensVenda(prev => prev.map((item, index) =>
      index === itemIndex
        ? { ...item, [`editando_${campo}`]: false }
        : item
    ));
  };

  // ✅ NOVO: Função para atualizar dados fiscais dos produtos da NFC-e com informações do cadastro
  const handleAtualizarDadosProdutosNfce = async () => {
    if (itensVenda.length === 0) {
      toast.warning('Nenhum produto para atualizar');
      return;
    }

    try {
      toast.info('Atualizando dados dos produtos...');

      // Obter dados do usuário
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error('Usuário não autenticado');

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) throw new Error('Empresa não encontrada');

      // Buscar dados atualizados dos produtos no cadastro
      const produtoIds = itensVenda
        .filter(item => item.produto_id) // Apenas produtos que têm ID (vieram do cadastro)
        .map(item => item.produto_id);

      if (produtoIds.length === 0) {
        toast.warning('Nenhum produto vinculado ao cadastro para atualizar');
        return;
      }

      const { data: produtosCadastro, error } = await supabase
        .from('produtos')
        .select(`
          id,
          codigo,
          codigo_barras,
          nome,
          preco,
          ncm,
          cfop,
          origem_produto,
          situacao_tributaria,
          cst_icms,
          csosn_icms,
          cst_pis,
          cst_cofins,
          cst_ipi,
          aliquota_icms,
          aliquota_pis,
          aliquota_cofins,
          aliquota_ipi,
          cest,
          margem_st,
          peso_liquido,
          unidade_medida:unidade_medida_id (
            id,
            sigla,
            nome
          )
        `)
        .in('id', produtoIds)
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('ativo', true)
        .eq('deletado', false);

      if (error) throw error;

      if (!produtosCadastro || produtosCadastro.length === 0) {
        toast.warning('Nenhum produto encontrado no cadastro');
        return;
      }

      // Atualizar itens com dados do cadastro
      const itensAtualizados = itensVenda.map(item => {
        const produtoCadastro = produtosCadastro.find(p => p.id === item.produto_id);

        if (produtoCadastro) {
          return {
            ...item,
            // ✅ ATUALIZAR TODOS OS DADOS FISCAIS DO CADASTRO:
            ncm_editavel: produtoCadastro.ncm || item.ncm_editavel,
            cfop_editavel: produtoCadastro.cfop || item.cfop_editavel,
            cest_editavel: produtoCadastro.cest || item.cest_editavel,
            margem_st_editavel: produtoCadastro.margem_st || item.margem_st_editavel,
            aliquota_icms_editavel: produtoCadastro.aliquota_icms || item.aliquota_icms_editavel,

            // ICMS
            cst_editavel: produtoCadastro.cst_icms || item.cst_editavel,
            csosn_editavel: produtoCadastro.csosn_icms || item.csosn_editavel,

            // Atualizar também preço se necessário
            valor_unitario: produtoCadastro.preco || item.valor_unitario,
            valor_total_item: (produtoCadastro.preco || item.valor_unitario) * item.quantidade
          };
        }

        return item; // Manter item inalterado se não encontrado no cadastro
      });

      // Aplicar atualizações
      setItensVenda(itensAtualizados);

      const produtosAtualizadosCount = produtosCadastro.length;
      toast.success(`${produtosAtualizadosCount} produto(s) atualizado(s) com dados do cadastro`);

    } catch (error: any) {
      toast.error(`Erro ao atualizar produtos: ${error.message}`);
    }
  };

  // Função para atualizar dados fiscais dos produtos com informações do cadastro
  const handleAtualizarDadosProdutos = async () => {
    if (itensNfceEdicao.length === 0) {
      toast.warning('Nenhum produto para atualizar');
      return;
    }

    try {
      toast.info('Atualizando dados dos produtos...');

      // Obter dados do usuário
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error('Usuário não autenticado');

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) throw new Error('Empresa não encontrada');

      // ✅ CORREÇÃO: Verificar se há produtos para atualizar (normais ou 999999)
      const produtoIds = itensNfceEdicao
        .filter(item => item.produto_id) // Produtos normais que têm ID
        .map(item => item.produto_id);

      const temProduto999999 = itensNfceEdicao.some(item => item.codigo_produto === '999999');

      if (produtoIds.length === 0 && !temProduto999999) {
        toast.warning('Nenhum produto para atualizar');
        return;
      }

      // ✅ BUSCAR DADOS DOS PRODUTOS NORMAIS (se houver)
      let produtosCadastro = [];
      if (produtoIds.length > 0) {
        const { data: produtosData, error: produtosError } = await supabase
          .from('produtos')
          .select(`
            id,
            codigo,
            codigo_barras,
            nome,
            preco,
            ncm,
            cfop,
            origem_produto,
            situacao_tributaria,
            cst_icms,
            csosn_icms,
            cst_pis,
            cst_cofins,
            cst_ipi,
            aliquota_icms,
            aliquota_pis,
            aliquota_cofins,
            aliquota_ipi,
            cest,
            margem_st,
            peso_liquido,
            unidade_medida_id,
            unidade_medida:unidade_medida_id (
              id,
              sigla,
              nome
            )
          `)
          .in('id', produtoIds)
          .eq('empresa_id', usuarioData.empresa_id)
          .eq('ativo', true)
          .eq('deletado', false);

        if (produtosError) throw produtosError;
        produtosCadastro = produtosData || [];
      }

      // ✅ BUSCAR CONFIGURAÇÃO PDV PARA PRODUTO 999999 (se houver)
      let configVendaSemProduto = null;
      if (temProduto999999) {
        const { data: pdvConfigData, error: pdvConfigError } = await supabase
          .from('pdv_config')
          .select(`
            venda_sem_produto_ncm,
            venda_sem_produto_cfop,
            venda_sem_produto_origem,
            venda_sem_produto_situacao_tributaria,
            venda_sem_produto_cest,
            venda_sem_produto_margem_st,
            venda_sem_produto_aliquota_icms,
            venda_sem_produto_aliquota_pis,
            venda_sem_produto_aliquota_cofins
          `)
          .eq('empresa_id', usuarioData.empresa_id)
          .single();

        if (pdvConfigError) {
          // Erro ao buscar configuração PDV
        } else {
          configVendaSemProduto = pdvConfigData;
        }
      }

      // ✅ CORREÇÃO: Verificar se há dados para atualizar
      if (produtosCadastro.length === 0 && !configVendaSemProduto) {
        toast.warning('Nenhum dado encontrado para atualizar');
        return;
      }

      // ✅ BUSCAR REGIME TRIBUTÁRIO PARA MAPEAR CST/CSOSN DO PRODUTO 999999
      const { data: empresaData } = await supabase
        .from('empresas')
        .select('regime_tributario')
        .eq('id', usuarioData.empresa_id)
        .single();

      const regimeTributario = empresaData?.regime_tributario || 1;

      // Atualizar itens com dados do cadastro OU configuração PDV
      const itensAtualizados = itensNfceEdicao.map(item => {
        // ✅ PRODUTO 999999: Usar configuração PDV
        if (item.codigo_produto === '999999' && configVendaSemProduto) {
          // Mapear situação tributária para CST/CSOSN
          const situacaoTributaria = configVendaSemProduto.venda_sem_produto_situacao_tributaria || 'tributado_integral';
          let cstIcms = null;
          let csosnIcms = null;

          if (regimeTributario === 1) { // Simples Nacional
            switch (situacaoTributaria) {
              case 'tributado_integral': csosnIcms = '102'; break;
              case 'tributado_st': csosnIcms = '500'; break;
              default: csosnIcms = '102';
            }
          } else { // Lucro Real/Presumido
            switch (situacaoTributaria) {
              case 'tributado_integral': cstIcms = '00'; break;
              case 'tributado_st': cstIcms = '60'; break;
              default: cstIcms = '00';
            }
          }

          return {
            ...item,
            // ✅ ATUALIZAR COM DADOS DA CONFIGURAÇÃO PDV:
            ncm_editavel: configVendaSemProduto.venda_sem_produto_ncm || '22021000',
            cfop_editavel: configVendaSemProduto.venda_sem_produto_cfop || '5102',
            cest_editavel: configVendaSemProduto.venda_sem_produto_cest || '',
            margem_st_editavel: configVendaSemProduto.venda_sem_produto_margem_st || '0',
            aliquota_icms_editavel: configVendaSemProduto.venda_sem_produto_aliquota_icms || '18',
            cst_editavel: cstIcms || item.cst_editavel,
            csosn_editavel: csosnIcms || item.csosn_editavel,
            origem_produto_editavel: configVendaSemProduto.venda_sem_produto_origem || 0
          };
        }

        // ✅ PRODUTOS NORMAIS: Usar dados do cadastro
        const produtoCadastro = produtosCadastro.find(p => p.id === item.produto_id);
        if (produtoCadastro) {
          return {
            ...item,
            // ✅ ATUALIZAR TODOS OS DADOS FISCAIS DO CADASTRO:
            ncm_editavel: produtoCadastro.ncm || item.ncm_editavel,
            cfop_editavel: produtoCadastro.cfop || item.cfop_editavel,
            cest_editavel: produtoCadastro.cest || item.cest_editavel,
            margem_st_editavel: produtoCadastro.margem_st ?? item.margem_st_editavel,
            aliquota_icms_editavel: produtoCadastro.aliquota_icms ?? item.aliquota_icms_editavel,
            cst_editavel: produtoCadastro.cst_icms || item.cst_editavel,
            csosn_editavel: produtoCadastro.csosn_icms || item.csosn_editavel,
            origem_produto_editavel: produtoCadastro.origem_produto ?? item.origem_produto_editavel,

            // Atualizar dados do produto também
            produto: {
              ...item.produto,
              ncm: produtoCadastro.ncm || item.produto?.ncm,
              cfop: produtoCadastro.cfop || item.produto?.cfop,
              codigo_barras: produtoCadastro.codigo_barras || item.produto?.codigo_barras,
              unidade_medida_id: produtoCadastro.unidade_medida_id || item.produto?.unidade_medida_id,
              unidade_medida: produtoCadastro.unidade_medida || item.produto?.unidade_medida,
              origem_produto: produtoCadastro.origem_produto ?? item.produto?.origem_produto,
              situacao_tributaria: produtoCadastro.situacao_tributaria || item.produto?.situacao_tributaria,
              cst_icms: produtoCadastro.cst_icms || item.produto?.cst_icms,
              csosn_icms: produtoCadastro.csosn_icms || item.produto?.csosn_icms,
              aliquota_icms: produtoCadastro.aliquota_icms ?? item.produto?.aliquota_icms,
              cst_pis: produtoCadastro.cst_pis || item.produto?.cst_pis,
              cst_cofins: produtoCadastro.cst_cofins || item.produto?.cst_cofins,
              aliquota_pis: produtoCadastro.aliquota_pis ?? item.produto?.aliquota_pis,
              aliquota_cofins: produtoCadastro.aliquota_cofins ?? item.produto?.aliquota_cofins,
              cest: produtoCadastro.cest || item.produto?.cest,
              margem_st: produtoCadastro.margem_st ?? item.produto?.margem_st
            }
          };
        }

        return item; // Manter item inalterado se não encontrado no cadastro
      });

      // ✅ NOVO: Salvar alterações na tabela pdv_itens

      // ✅ CORREÇÃO: Função auxiliar para converter valores com segurança
      const parseValue = (value: any) => {
        if (value === null || value === undefined || value === '') return null;
        if (typeof value === 'number') return value;
        if (typeof value === 'string') return parseFloat(value.replace(',', '.'));
        return null;
      };

      for (const item of itensAtualizados) {
        const updateData = {
          cfop: item.cfop_editavel,
          cst_icms: item.regime_tributario === 1 ? null : item.cst_editavel,
          csosn_icms: item.regime_tributario === 1 ? item.csosn_editavel : null,
          ncm: item.ncm_editavel || '00000000',
          cest: item.cest_editavel || null,
          margem_st: parseValue(item.margem_st_editavel), // ✅ CORREÇÃO: Conversão segura
          aliquota_icms: parseValue(item.aliquota_icms_editavel), // ✅ CORREÇÃO: Conversão segura
          origem_produto: item.origem_produto_editavel || 0
        };

        const { error: updateError } = await supabase
          .from('pdv_itens')
          .update(updateData)
          .eq('id', item.id);

        if (updateError) {
          throw new Error(`Erro ao salvar item ${item.nome_produto}: ${updateError.message}`);
        }
      }

      // Aplicar atualizações na interface
      setItensNfceEdicao(itensAtualizados);

      // ✅ CORREÇÃO: Contar produtos normais e 999999 atualizados
      const produtosNormaisCount = produtosCadastro.length;
      const produtos999999Count = temProduto999999 && configVendaSemProduto ? 1 : 0;
      const totalAtualizados = produtosNormaisCount + produtos999999Count;

      let mensagem = '';
      if (produtosNormaisCount > 0 && produtos999999Count > 0) {
        mensagem = `${produtosNormaisCount} produto(s) atualizado(s) do cadastro + ${produtos999999Count} venda sem produto da configuração PDV e salvos na base de dados`;
      } else if (produtosNormaisCount > 0) {
        mensagem = `${produtosNormaisCount} produto(s) atualizado(s) com dados do cadastro e salvos na base de dados`;
      } else if (produtos999999Count > 0) {
        mensagem = `${produtos999999Count} venda sem produto atualizada com configuração PDV e salva na base de dados`;
      }

      toast.success(mensagem);

    } catch (error: any) {
      toast.error(`Erro ao atualizar produtos: ${error.message}`);
    }
  };

  // ✅ NOVA: Função para validar número em tempo real
  const validarNumeroNfceTempoReal = async (numero: string) => {
    if (!numero || numero.trim() === '') {
      setNumeroValido(null);
      setMensagemValidacao('');
      return;
    }

    const numeroInt = parseInt(numero);
    if (isNaN(numeroInt) || numeroInt <= 0) {
      setNumeroValido(false);
      setMensagemValidacao('Número deve ser maior que zero');
      return;
    }

    try {
      setValidandoNumero(true);

      // Obter dados do usuário para validação
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        setNumeroValido(false);
        setMensagemValidacao('Usuário não autenticado');
        return;
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id, serie_nfce')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        setNumeroValido(false);
        setMensagemValidacao('Empresa não encontrada');
        return;
      }

      // ✅ VALIDAÇÃO COMPLETA: Verificar se número já existe
      const { data: numeroExistente, error: validationError } = await supabase
        .from('pdv')
        .select('id, numero_documento, status_fiscal, serie_documento')
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('modelo_documento', 65) // NFC-e
        .eq('numero_documento', numeroInt)
        .neq('id', vendaParaEditarNfce?.id || '') // Excluir a própria venda
        .maybeSingle();

      if (validationError) {
        setNumeroValido(false);
        setMensagemValidacao(`Erro na validação: ${validationError.message}`);
        return;
      }

      if (numeroExistente) {
        setNumeroValido(false);
        setMensagemValidacao(`Número ${numeroInt} já existe! Série ${numeroExistente.serie_documento}, Status: ${numeroExistente.status_fiscal}`);
      } else {
        setNumeroValido(true);
        setMensagemValidacao(`Número ${numeroInt} disponível ✓`);
      }

    } catch (error: any) {
      setNumeroValido(false);
      setMensagemValidacao(`Erro: ${error.message}`);
    } finally {
      setValidandoNumero(false);
    }
  };

  // ✅ NOVA: Função para reprocessar NFC-e
  const reprocessarNfce = async () => {
    if (!vendaParaEditarNfce) return;

    try {
      setReprocessandoNfce(true);

      // ✅ NOVO: Salvar modificações nos itens antes de retransmitir
      console.log('💾 FRONTEND: Salvando modificações dos itens...');
      console.log('📋 FRONTEND: Itens para salvar:', itensNfceEdicao.map(item => ({
        id: item.id,
        produto: item.nome_produto,
        cfop: item.cfop_editavel,
        cst: item.cst_editavel,
        csosn: item.csosn_editavel,
        ncm: item.ncm_editavel,
        cest: item.cest_editavel,
        margem_st: item.margem_st_editavel,
        aliquota_icms: item.aliquota_icms_editavel
      })));

      for (const item of itensNfceEdicao) {
        // ✅ CORREÇÃO: Função auxiliar para converter valores com segurança
        const parseValue = (value: any) => {
          if (value === null || value === undefined || value === '') return null;
          if (typeof value === 'number') return value;
          if (typeof value === 'string') return parseFloat(value.replace(',', '.'));
          return null;
        };

        const updateData = {
          cfop: item.cfop_editavel,
          cst_icms: item.regime_tributario === 1 ? null : item.cst_editavel, // ✅ CORREÇÃO: 1 = Simples Nacional (CSOSN)
          csosn_icms: item.regime_tributario === 1 ? item.csosn_editavel : null, // ✅ CORREÇÃO: 1 = Simples Nacional (CSOSN)
          ncm: item.ncm_editavel || '00000000', // ✅ NOVO: Salvar NCM editado
          cest: item.cest_editavel || null, // ✅ NOVO: Salvar CEST editado
          margem_st: parseValue(item.margem_st_editavel), // ✅ CORREÇÃO: Conversão segura
          aliquota_icms: parseValue(item.aliquota_icms_editavel) // ✅ CORREÇÃO: Conversão segura
        };

        const { error: updateError } = await supabase
          .from('pdv_itens')
          .update(updateData)
          .eq('id', item.id);

        if (updateError) {
          throw new Error(`Erro ao salvar modificações do item ${item.nome_produto}: ${updateError.message}`);
        }
      }

      // ✅ SIMPLIFICADO: Usar número já validado e salvo anteriormente
      toast.success('Iniciando retransmissão...');

      // Preparar dados atualizados dos itens
      const itensAtualizados = itensNfceEdicao.map(item => {
        const codigoProduto = item.produto?.codigo || item.codigo_produto;

        // ✅ CORREÇÃO: Usar unidade já salva na tabela pdv_itens
        const unidadeCalculada = item.unidade || 'UN'; // ✅ Usar unidade salva nos itens, fallback 'UN' se não tiver

        return {
          codigo: codigoProduto,
          descricao: item.nome_produto,
          quantidade: item.quantidade,
          valor_unitario: item.valor_unitario,
          unidade: unidadeCalculada, // ✅ CORREÇÃO: 'UN' só para 999999, dados reais para outros
          ncm: item.ncm_editavel || '00000000', // ✅ CORREÇÃO: Usar NCM editável
          cfop: item.cfop_editavel,
          cst_icms: item.regime_tributario === 1 ? undefined : item.cst_editavel, // ✅ CORREÇÃO: 1 = Simples Nacional (CSOSN)
          csosn_icms: item.regime_tributario === 1 ? item.csosn_editavel : undefined, // ✅ CORREÇÃO: 1 = Simples Nacional (CSOSN)
          codigo_barras: item.produto?.codigo_barras
        };
      });



      // Buscar dados da empresa e ambiente
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) throw new Error('Usuário não autenticado');

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id, serie_nfce')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) throw new Error('Empresa não encontrada');

      // ✅ NOVO: Obter série do usuário logado
      const serieUsuario = usuarioData.serie_nfce || 1;

      const { data: empresaData } = await supabase
        .from('empresas')
        .select('*')
        .eq('id', usuarioData.empresa_id)
        .single();

      const { data: nfeConfigData } = await supabase
        .from('nfe_config')
        .select('ambiente')
        .eq('empresa_id', usuarioData.empresa_id)
        .single();

      if (!empresaData || !nfeConfigData) {
        throw new Error('Dados da empresa ou configuração NFe não encontrados');
      }

      // Preparar payload para reprocessamento
      const nfceData = {
        empresa: {
          razao_social: empresaData.razao_social,
          cnpj: empresaData.documento,
          nome_fantasia: empresaData.nome_fantasia,
          inscricao_estadual: empresaData.inscricao_estadual,
          regime_tributario: empresaData.regime_tributario || 1,
          uf: empresaData.estado,
          codigo_municipio: parseInt(empresaData.codigo_municipio) || 3524402,
          codigo_uf: getCodigoUF(empresaData.estado),
          endereco: {
            logradouro: empresaData.endereco,
            numero: empresaData.numero,
            bairro: empresaData.bairro,
            cidade: empresaData.cidade,
            cep: empresaData.cep
          },
          csc_homologacao: empresaData.csc_homologacao,
          csc_id_homologacao: empresaData.csc_id_homologacao,
          csc_producao: empresaData.csc_producao,
          csc_id_producao: empresaData.csc_id_producao
        },
        ambiente: nfeConfigData.ambiente,
        identificacao: {
          numero: vendaParaEditarNfce.numero_documento, // ✅ CORREÇÃO: Usar número já validado e salvo
          serie: serieUsuario, // ✅ NOVO: Série individual do usuário logado
          codigo_numerico: Math.floor(Math.random() * 99999999).toString().padStart(8, '0'),
          natureza_operacao: 'Venda de mercadoria'
        },
        // ✅ CORREÇÃO: Incluir documento mesmo se nome não estiver preenchido
        destinatario: (() => {
          if (vendaParaEditarNfce.documento_cliente && vendaParaEditarNfce.nome_cliente) {
            return {
              documento: vendaParaEditarNfce.documento_cliente,
              nome: vendaParaEditarNfce.nome_cliente
            };
          }
          if (vendaParaEditarNfce.documento_cliente) {
            return {
              documento: vendaParaEditarNfce.documento_cliente,
              nome: 'CONSUMIDOR'
            };
          }
          return {};
        })(),
        produtos: itensAtualizados
      };

      // ✅ NOVO: Validações antes do envio

      // Validar dados da empresa
      if (!empresaData.razao_social) throw new Error('Razão social da empresa não encontrada');
      if (!empresaData.documento) throw new Error('CNPJ da empresa não encontrado');
      if (!empresaData.estado) throw new Error('Estado da empresa não encontrado');

      // Validar itens
      if (!itensAtualizados || itensAtualizados.length === 0) {
        throw new Error('Nenhum item encontrado para reprocessamento');
      }

      // Validar cada item
      for (const item of itensAtualizados) {
        if (!item.codigo) throw new Error(`Código do produto não encontrado: ${item.descricao}`);
        if (!item.descricao) throw new Error(`Descrição do produto não encontrada: ${item.codigo}`);
        if (!item.quantidade || item.quantidade <= 0) throw new Error(`Quantidade inválida para produto: ${item.descricao}`);
        if (!item.valor_unitario || item.valor_unitario <= 0) throw new Error(`Valor unitário inválido para produto: ${item.descricao}`);
        if (!item.unidade) throw new Error(`Unidade de medida não encontrada para produto: ${item.descricao}`);
        if (!item.ncm) throw new Error(`NCM não encontrado para produto: ${item.descricao}`);
        if (!item.cfop) throw new Error(`CFOP não encontrado para produto: ${item.descricao}`);
      }

      console.log('✅ REPROCESSAMENTO - Validações concluídas com sucesso');

      // ✅ NOVO: Log detalhado dos dados antes do envio
      const requestPayload = {
        empresa_id: usuarioData.empresa_id,
        nfce_data: nfceData
      };

      console.log('📡 REPROCESSAMENTO - Payload completo:', JSON.stringify(requestPayload, null, 2));
      console.log('📡 REPROCESSAMENTO - Empresa ID:', usuarioData.empresa_id);
      console.log('📡 REPROCESSAMENTO - Dados da empresa:', empresaData);
      console.log('📡 REPROCESSAMENTO - Config NFe:', nfeConfigData);
      console.log('📡 REPROCESSAMENTO - Venda para editar:', vendaParaEditarNfce);

      // Enviar para reprocessamento
      const response = await fetch('/backend/public/emitir-nfce.php', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestPayload)
      });

      if (!response.ok) {
        const errorResponse = await response.text();
        console.error('❌ ERRO HTTP COMPLETO:', {
          status: response.status,
          statusText: response.statusText,
          responseBody: errorResponse,
          url: response.url
        });

        try {
          const errorJson = JSON.parse(errorResponse);
          console.error('❌ ERRO JSON PARSEADO:', errorJson);
          throw new Error(errorJson.error || errorJson.message || 'Erro no reprocessamento');
        } catch (parseError) {
          console.error('❌ ERRO AO PARSEAR JSON:', parseError);
          console.error('❌ RESPOSTA RAW:', errorResponse);
          throw new Error(`Erro HTTP ${response.status}: ${errorResponse || response.statusText}`);
        }
      }

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || 'Erro no reprocessamento');
      }

      // ✅ Número já foi salvo no início da função

      // Atualizar venda com sucesso
      const { error: updateError } = await supabase
        .from('pdv')
        .update({
          modelo_documento: 65,
          numero_documento: result.data.numero, // ✅ Confirmar número retornado pelo SEFAZ
          serie_documento: result.data.serie,
          chave_nfe: result.data.chave,
          protocolo_nfe: result.data.protocolo,
          status_fiscal: 'autorizada',
          erro_fiscal: null,
          data_emissao_nfe: result.data.data_autorizacao
        })
        .eq('id', vendaParaEditarNfce.id);

      if (updateError) {
        console.error('Erro ao atualizar venda:', updateError);
      }

      toast.success('NFC-e reprocessada e autorizada com sucesso!');
      setShowEditarNfceModal(false);
      loadVendas(); // Recarregar lista de vendas
      loadContadorNfcePendentes(); // Atualizar contador

    } catch (error: any) {
      console.error('Erro no reprocessamento:', error);

      // ✅ CORREÇÃO: Atualizar erro fiscal no banco quando reprocessamento falha
      try {
        const { error: updateError } = await supabase
          .from('pdv')
          .update({
            status_fiscal: 'pendente',
            erro_fiscal: error.message // ✅ Atualizar com o novo erro
          })
          .eq('id', vendaParaEditarNfce.id);

        if (updateError) {
          console.error('Erro ao atualizar erro fiscal:', updateError);
        } else {
          console.log('✅ FRONTEND: Erro fiscal atualizado no banco');

          // ✅ CORREÇÃO: Atualizar o erro no estado local para refletir no modal
          setVendaParaEditarNfce(prev => ({
            ...prev,
            erro_fiscal: error.message
          }));
        }
      } catch (updateError) {
        console.error('Erro ao salvar erro fiscal:', updateError);
      }

      toast.error(`Erro no reprocessamento: ${error.message}`);
    } finally {
      setReprocessandoNfce(false);
    }
  };

  // Função auxiliar para calcular código UF
  const getCodigoUF = (estado: string): number => {
    const codigosUF: { [key: string]: number } = {
      'AC': 12, 'AL': 17, 'AP': 16, 'AM': 13, 'BA': 29, 'CE': 23, 'DF': 53,
      'ES': 32, 'GO': 52, 'MA': 21, 'MT': 51, 'MS': 50, 'MG': 31, 'PA': 15,
      'PB': 25, 'PR': 41, 'PE': 26, 'PI': 22, 'RJ': 33, 'RN': 24, 'RS': 43,
      'RO': 11, 'RR': 14, 'SC': 42, 'SP': 35, 'SE': 28, 'TO': 27
    };
    return codigosUF[estado] || 35;
  };

  // ✅ NOVA: Função para carregar unidades de medida da empresa
  const loadUnidadesMedida = async () => {
    try {
      setLoadingUnidades(true);

      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      const { data: unidades, error } = await supabase
        .from('unidade_medida')
        .select('*')
        .eq('empresa_id', usuarioData.empresa_id)
        .order('nome');

      if (error) {
        console.error('Erro ao carregar unidades de medida:', error);
        toast.error('Erro ao carregar unidades de medida');
        return;
      }

      setUnidadesMedida(unidades || []);
    } catch (error) {
      console.error('Erro ao carregar unidades de medida:', error);
      toast.error('Erro ao carregar unidades de medida');
    } finally {
      setLoadingUnidades(false);
    }
  };

  // ✅ NOVA: Função para atualizar unidade de medida do produto
  const atualizarUnidadeProduto = async (unidadeSelecionada: any) => {
    if (!itemParaEditarUnidade) return;

    try {
      // Atualizar produto na base de dados
      const { error: updateError } = await supabase
        .from('produtos')
        .update({ unidade_medida_id: unidadeSelecionada.id })
        .eq('id', itemParaEditarUnidade.produto_id);

      if (updateError) {
        console.error('Erro ao atualizar unidade do produto:', updateError);
        toast.error('Erro ao atualizar unidade do produto');
        return;
      }

      // Atualizar item na lista local
      setItensNfceEdicao(prev => prev.map(item =>
        item.id === itemParaEditarUnidade.id
          ? {
              ...item,
              produto: {
                ...item.produto,
                unidade_medida_id: unidadeSelecionada.id,
                unidade_medida: {
                  id: unidadeSelecionada.id,
                  sigla: unidadeSelecionada.sigla,
                  nome: unidadeSelecionada.nome
                }
              }
            }
          : item
      ));

      toast.success(`Unidade atualizada para "${unidadeSelecionada.sigla}" com sucesso!`);
      setShowSeletorUnidadeModal(false);
      setItemParaEditarUnidade(null);

    } catch (error) {
      console.error('Erro ao atualizar unidade do produto:', error);
      toast.error('Erro ao atualizar unidade do produto');
    }
  };

  // Função para gerar o link público do pedido
  const gerarLinkPedido = async (pedido: any) => {
    try {
      // Se não temos empresa_id no pedido, buscar do usuário atual
      let empresaId = pedido.empresa_id;
      if (!empresaId) {
        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) throw new Error('Usuário não autenticado');

        const { data: usuarioData } = await supabase
          .from('usuarios')
          .select('empresa_id')
          .eq('id', userData.user.id)
          .single();

        if (!usuarioData?.empresa_id) throw new Error('Empresa do usuário não encontrada');
        empresaId = usuarioData.empresa_id;
      }

      // Buscar o CNPJ da empresa
      const { data: empresaData, error: empresaError } = await supabase
        .from('empresas')
        .select('documento')
        .eq('id', empresaId)
        .single();

      if (empresaError || !empresaData || !empresaData.documento) {
        throw new Error('Não foi possível obter o CNPJ da empresa');
      }

      // Remover caracteres não numéricos do CNPJ (pontos, traços, barras)
      const cnpjLimpo = empresaData.documento.replace(/[^\d]/g, '');

      // Gerar o código do pedido (CNPJ + número do pedido)
      const codigoPedido = `${cnpjLimpo}${pedido.numero}`;

      // Gerar a URL completa
      const baseUrl = window.location.origin;
      const url = `${baseUrl}/pedido/${codigoPedido}`;

      return url;
    } catch (error: any) {
      toast.error(`Erro ao gerar link: ${error.message}`);
      return null;
    }
  };

  // Função para marcar pedido do cardápio digital como faturado
  const marcarPedidoCardapioComoFaturado = async (vendaId: string, numeroVenda: string) => {
    try {
      // Verificar se há itens do cardápio digital no carrinho
      const itensCardapio = carrinho.filter(item => item.cardapio_digital && item.pedido_origem_id);

      if (itensCardapio.length === 0) {
        return;
      }

      // Obter IDs únicos dos pedidos do cardápio digital
      const pedidosIds = [...new Set(itensCardapio.map(item => item.pedido_origem_id))];

      // Atualizar status dos pedidos para 'faturado'
      for (const pedidoId of pedidosIds) {
        const { data, error } = await supabase
          .from('cardapio_digital')
          .update({
            // ✅ CORREÇÃO: NÃO alterar status_pedido - manter como 'entregue'
            status_faturamento: 'faturado', // ✅ NOVO: Campo de controle de faturamento
            venda_pdv_id: vendaId,
            numero_venda_pdv: numeroVenda,
            data_faturamento: new Date().toISOString()
          })
          .eq('id', pedidoId)
          .select(); // ✅ ADICIONAR select para ver o que foi atualizado

        if (error) {
          console.error('❌ [FATURAMENTO] Erro ao marcar pedido como faturado:', error);
        }
      }

      // Recarregar pedidos do cardápio digital para atualizar a interface
      if (showCardapioDigitalModal) {
        carregarTodosPedidosCardapio();
      }

    } catch (error) {
      console.error('❌ [FATURAMENTO] Erro ao marcar pedidos como faturados:', error);
    }
  };

  // Função que executa o faturamento do pedido do cardápio digital
  const executarFaturamentoPedidoCardapio = async (pedido: any) => {
    try {
      // Limpar carrinho atual
      setCarrinho([]);
      setClienteSelecionado(null);
      setVendedorSelecionado(null);
      setDescontoPrazoSelecionado(null);

      // ✅ BUSCA INTELIGENTE DE CLIENTE será feita mais abaixo
      // Removida verificação de cliente_id pois a busca inteligente é mais eficaz

      // Converter itens do pedido para formato do carrinho
      const itensCardapio = Array.isArray(pedido.itens_pedido) ? pedido.itens_pedido : JSON.parse(pedido.itens_pedido || '[]');

      // ✅ BUSCAR DADOS COMPLETOS DOS PRODUTOS (FOTOS E CÓDIGOS)
      let fotosData: any[] = [];
      let produtosData: any[] = [];
      try {
        const produtosIds = itensCardapio
          .map((item: any) => item.produto_id)
          .filter(Boolean);

        if (produtosIds.length > 0) {
          // Buscar fotos dos produtos
          const { data: fotosResult } = await supabase
            .from('produto_fotos')
            .select('produto_id, url, principal')
            .in('produto_id', produtosIds)
            .eq('principal', true);

          if (fotosResult) {
            fotosData = fotosResult;
          }

          // Buscar dados completos dos produtos (TODOS OS CAMPOS FISCAIS para NFC-e)
          const { data: produtosResult } = await supabase
            .from('produtos')
            .select(`
              id,
              nome,
              preco,
              codigo,
              codigo_barras,
              descricao,
              grupo_id,
              promocao,
              tipo_desconto,
              valor_desconto,
              estoque_inicial,
              desconto_quantidade,
              quantidade_minima,
              tipo_desconto_quantidade,
              valor_desconto_quantidade,
              percentual_desconto_quantidade,
              unidade_medida_id,
              ncm,
              cfop,
              origem_produto,
              situacao_tributaria,
              cst_icms,
              csosn_icms,
              cst_pis,
              cst_cofins,
              cst_ipi,
              aliquota_icms,
              aliquota_pis,
              aliquota_cofins,
              aliquota_ipi,
              valor_ipi,
              cest,
              margem_st,
              peso_liquido,
              unidade_medida:unidade_medida_id (
                id,
                sigla,
                nome
              )
            `)
            .in('id', produtosIds);

          if (produtosResult) {
            produtosData = produtosResult;
          }
        }
      } catch (error) {
        console.error('Erro ao buscar dados dos produtos:', error);
      }

      const novosItens: ItemCarrinho[] = itensCardapio.map((item: any, index: number) => {
        // ✅ BUSCAR FOTO E DADOS DO PRODUTO ESPECÍFICO
        const foto = fotosData.find(f => f.produto_id === item.produto_id);
        const produtoReal = produtosData.find(p => p.id === item.produto_id);

        // ✅ VALIDAÇÕES CRÍTICAS SEM FALLBACKS - DADOS FISCAIS OBRIGATÓRIOS
        if (!produtoReal) {
          throw new Error(`Produto não encontrado no cadastro: ${item.produto_nome || item.produto_id}`);
        }

        if (!produtoReal.unidade_medida || !produtoReal.unidade_medida.sigla) {
          throw new Error(`Unidade do produto ${produtoReal.nome} é obrigatória para NFC-e. Configure a unidade de medida no cadastro do produto.`);
        }

        if (!produtoReal.ncm) {
          throw new Error(`NCM do produto ${produtoReal.nome} é obrigatório para NFC-e. Configure o NCM no cadastro do produto.`);
        }

        if (!produtoReal.cfop) {
          throw new Error(`CFOP do produto ${produtoReal.nome} é obrigatório para NFC-e. Configure o CFOP no cadastro do produto.`);
        }

        if (produtoReal.origem_produto === null || produtoReal.origem_produto === undefined) {
          throw new Error(`Origem do produto ${produtoReal.nome} é obrigatória para NFC-e. Configure a origem no cadastro do produto.`);
        }

        // ✅ VALIDAÇÃO CRÍTICA: Verificar se produto existe e tem unidade de medida
        if (!produtoReal) {
          console.error(`❌ Produto não encontrado no cadastro: ${item.produto_id}`);
          throw new Error(`Produto ${item.produto_nome || 'desconhecido'} não encontrado no cadastro`);
        }

        if (!produtoReal.unidade_medida || !produtoReal.unidade_medida.sigla) {
          console.error(`❌ Produto sem unidade de medida: ${produtoReal.nome} (ID: ${produtoReal.id})`);
          throw new Error(`Produto "${produtoReal.nome}" não possui unidade de medida configurada. Configure a unidade de medida no cadastro do produto antes de emitir NFC-e.`);
        }

        // ✅ CRIAR PRODUTO COM DADOS REAIS DO CADASTRO (SEM FALLBACKS)
        const produtoTemp = {
          // Dados básicos do produto real
          id: produtoReal.id,
          nome: produtoReal.nome,
          preco: produtoReal.preco,
          codigo: produtoReal.codigo,
          descricao: produtoReal.descricao,
          categoria: produtoReal.categoria,
          ativo: produtoReal.ativo,
          promocao: produtoReal.promocao,
          grupo_id: produtoReal.grupo_id,
          unidade_medida_id: produtoReal.unidade_medida_id,

          // Fotos do produto
          produto_fotos: foto ? [{ url: foto.url, principal: true }] : [],
          foto_url: foto?.url || null,

          // ✅ DADOS FISCAIS REAIS (SEM FALLBACKS) - OBRIGATÓRIOS PARA NFC-e
          codigo_barras: produtoReal.codigo_barras,
          ncm: produtoReal.ncm,
          cfop: produtoReal.cfop,
          origem_produto: produtoReal.origem_produto,
          situacao_tributaria: produtoReal.situacao_tributaria,
          cst_icms: produtoReal.cst_icms,
          csosn_icms: produtoReal.csosn_icms,
          cst_pis: produtoReal.cst_pis,
          cst_cofins: produtoReal.cst_cofins,
          cst_ipi: produtoReal.cst_ipi,
          aliquota_icms: produtoReal.aliquota_icms,
          aliquota_pis: produtoReal.aliquota_pis,
          aliquota_cofins: produtoReal.aliquota_cofins,
          aliquota_ipi: produtoReal.aliquota_ipi,
          valor_ipi: produtoReal.valor_ipi,
          cest: produtoReal.cest,
          margem_st: produtoReal.margem_st,
          peso_liquido: produtoReal.peso_liquido,

          // ✅ UNIDADE DE MEDIDA REAL (OBRIGATÓRIA)
          unidade_medida: produtoReal.unidade_medida,

          // Campos de desconto e estoque do produto
          tipo_desconto: produtoReal.tipo_desconto,
          valor_desconto: produtoReal.valor_desconto,
          estoque_inicial: produtoReal.estoque_inicial,
          desconto_quantidade: produtoReal.desconto_quantidade,
          quantidade_minima: produtoReal.quantidade_minima,
          tipo_desconto_quantidade: produtoReal.tipo_desconto_quantidade,
          valor_desconto_quantidade: produtoReal.valor_desconto_quantidade,
          percentual_desconto_quantidade: produtoReal.percentual_desconto_quantidade
        };

        const quantidade = item.quantidade || 1;
        const precoUnitario = item.preco_unitario || item.preco || 0;
        const subtotal = quantidade * precoUnitario;

        return {
          id: `cardapio_item_${pedido.id}_${index}`,
          produto: produtoTemp,
          quantidade: quantidade,
          subtotal: subtotal,
          pedido_origem_id: pedido.id,
          pedido_origem_numero: pedido.numero_pedido,
          cardapio_digital: true, // Marcar como item do cardápio digital
          // Campos adicionais para compatibilidade com o PDV
          observacao: item.observacao || null,
          sabores: item.sabores || [],
          descricaoSabores: item.sabores && item.sabores.length > 0 ?
            item.sabores.map((s: any) => s.nome || s).join(', ') : null,
          adicionais: item.adicionais || [],
          tabela_preco_id: item.tabela_preco_id || null,
          tabela_preco_nome: null
        };
      });

      // ✅ ADICIONAR TAXA DE ENTREGA COMO ITEM SEPARADO (se houver E não for retirada)
      if (pedido.valor_taxa_entrega && pedido.valor_taxa_entrega > 0 && pedido.tipo_entrega !== 'retirada') {
        // ✅ NOVA LÓGICA: Encontrar item de maior valor para duplicar suas configurações fiscais
        let itemMaiorValor = null;
        let maiorValor = 0;

        novosItens.forEach(item => {
          const valorItem = item.quantidade * (item.produto?.preco || 0);
          if (valorItem > maiorValor) {
            maiorValor = valorItem;
            itemMaiorValor = item;
          }
        });

        if (itemMaiorValor && itemMaiorValor.produto) {
          // ✅ DUPLICAR PRODUTO DE MAIOR VALOR E TRANSFORMAR EM TAXA DE ENTREGA
          const produtoTaxaEntrega = {
            // Manter ID único para taxa de entrega
            id: `taxa-entrega-${pedido.id}`,

            // ✅ ALTERAR APENAS NOME E PREÇO - MANTER TODOS OS DADOS FISCAIS
            nome: 'Taxa de Entrega',
            preco: pedido.valor_taxa_entrega,

            // ✅ MANTER TODOS OS DADOS FISCAIS DO PRODUTO DE MAIOR VALOR
            codigo: itemMaiorValor.produto.codigo,
            descricao: 'Taxa de entrega do cardápio digital',
            categoria: itemMaiorValor.produto.categoria,
            ativo: itemMaiorValor.produto.ativo,
            promocao: false, // Taxa não tem promoção
            grupo_id: itemMaiorValor.produto.grupo_id,
            unidade_medida_id: itemMaiorValor.produto.unidade_medida_id,
            unidade_medida: itemMaiorValor.produto.unidade_medida,

            // ✅ REMOVER FOTO (conforme solicitado)
            produto_fotos: [],
            foto_url: null,

            // ✅ MANTER EXATAMENTE OS MESMOS DADOS FISCAIS DO PRODUTO DE MAIOR VALOR
            codigo_barras: itemMaiorValor.produto.codigo_barras,
            ncm: itemMaiorValor.produto.ncm,
            cfop: itemMaiorValor.produto.cfop,
            origem_produto: itemMaiorValor.produto.origem_produto,
            situacao_tributaria: itemMaiorValor.produto.situacao_tributaria,
            cst_icms: itemMaiorValor.produto.cst_icms,
            csosn_icms: itemMaiorValor.produto.csosn_icms,
            cst_pis: itemMaiorValor.produto.cst_pis,
            cst_cofins: itemMaiorValor.produto.cst_cofins,
            cst_ipi: itemMaiorValor.produto.cst_ipi,
            aliquota_icms: itemMaiorValor.produto.aliquota_icms,
            aliquota_pis: itemMaiorValor.produto.aliquota_pis,
            aliquota_cofins: itemMaiorValor.produto.aliquota_cofins,
            aliquota_ipi: itemMaiorValor.produto.aliquota_ipi,
            valor_ipi: itemMaiorValor.produto.valor_ipi,
            cest: itemMaiorValor.produto.cest,
            margem_st: itemMaiorValor.produto.margem_st,
            peso_liquido: itemMaiorValor.produto.peso_liquido,

            // Campos de desconto (não aplicáveis para taxa de entrega)
            tipo_desconto: null,
            valor_desconto: null,
            estoque_inicial: null,
            desconto_quantidade: false,
            quantidade_minima: null,
            tipo_desconto_quantidade: null,
            valor_desconto_quantidade: null,
            percentual_desconto_quantidade: null
          };

          const itemTaxaEntrega: ItemCarrinho = {
            id: `taxa-entrega-${pedido.id}-${Date.now()}`,
            produto: produtoTaxaEntrega,
            quantidade: 1,
            subtotal: pedido.valor_taxa_entrega,
            pedido_origem_id: pedido.id,
            pedido_origem_numero: pedido.numero_pedido,
            cardapio_digital: true,
            vendaSemProduto: true, // ✅ CORREÇÃO: Marcar como venda sem produto para evitar erro de UUID
            nome: 'Taxa de Entrega', // Nome personalizado
            preco: pedido.valor_taxa_entrega,
            observacao: null,
            sabores: [],
            descricaoSabores: null,
            adicionais: [],
            tabela_preco_id: null,
            tabela_preco_nome: null,
            taxaEntregaCardapio: true // ✅ MARCAR COMO TAXA DE ENTREGA DO CARDÁPIO
          };

          // ✅ ADICIONAR TAXA DE ENTREGA NA PRIMEIRA POSIÇÃO (conforme solicitado)
          novosItens.unshift(itemTaxaEntrega);
        } else {
          // ✅ FALLBACK: Se não houver itens, usar configuração padrão
          console.warn('⚠️ Nenhum item encontrado para duplicar configurações fiscais. Usando configuração padrão.');

          const produtoTaxaEntrega = {
            id: `taxa-entrega-${pedido.id}`,
            nome: 'Taxa de Entrega',
            preco: pedido.valor_taxa_entrega,
            codigo: '999999',
            descricao: 'Taxa de entrega do cardápio digital',
            categoria: 'Serviços',
            ativo: true,
            promocao: false,
            grupo_id: null,
            unidade_medida_id: null,
            produto_fotos: [],
            unidade_medida: { sigla: 'UN', nome: 'Unidade', id: null },

            // Usar configurações padrão do PDV
            codigo_barras: null,
            ncm: pdvConfig?.venda_sem_produto_ncm,
            cfop: pdvConfig?.venda_sem_produto_cfop,
            origem_produto: pdvConfig?.venda_sem_produto_origem,
            situacao_tributaria: pdvConfig?.venda_sem_produto_situacao_tributaria,
            cst_icms: pdvConfig?.venda_sem_produto_cst,
            csosn_icms: pdvConfig?.venda_sem_produto_csosn,
            cest: pdvConfig?.venda_sem_produto_cest,
            margem_st: pdvConfig?.venda_sem_produto_margem_st,
            aliquota_icms: pdvConfig?.venda_sem_produto_aliquota_icms,
            aliquota_pis: pdvConfig?.venda_sem_produto_aliquota_pis,
            aliquota_cofins: pdvConfig?.venda_sem_produto_aliquota_cofins,
            cst_pis: pdvConfig?.venda_sem_produto_cst_pis,
            cst_cofins: pdvConfig?.venda_sem_produto_cst_cofins,
            peso_liquido: pdvConfig?.venda_sem_produto_peso_liquido,

            tipo_desconto: null,
            valor_desconto: null,
            estoque_inicial: null,
            desconto_quantidade: false,
            quantidade_minima: null,
            tipo_desconto_quantidade: null,
            valor_desconto_quantidade: null,
            percentual_desconto_quantidade: null
          };

          const itemTaxaEntrega: ItemCarrinho = {
            id: `taxa-entrega-${pedido.id}-${Date.now()}`,
            produto: produtoTaxaEntrega,
            quantidade: 1,
            subtotal: pedido.valor_taxa_entrega,
            pedido_origem_id: pedido.id,
            pedido_origem_numero: pedido.numero_pedido,
            cardapio_digital: true,
            vendaSemProduto: true,
            nome: 'Taxa de Entrega',
            preco: pedido.valor_taxa_entrega,
            observacao: null,
            sabores: [],
            descricaoSabores: null,
            adicionais: [],
            tabela_preco_id: null,
            tabela_preco_nome: null,
            taxaEntregaCardapio: true
          };

          novosItens.unshift(itemTaxaEntrega);
        }
      } else if (pedido.valor_taxa_entrega && pedido.valor_taxa_entrega > 0 && pedido.tipo_entrega === 'retirada') {
        // ✅ LOG: Informar que taxa de entrega não foi adicionada por ser retirada
        console.log('🏪 RETIRADA: Taxa de entrega não adicionada (R$', pedido.valor_taxa_entrega, ') - Pedido é do tipo retirada');
        toast.info(`Pedido #${pedido.numero_pedido} é retirada - Taxa de entrega não adicionada`);
      }

      setCarrinho(novosItens);

      // ✅ BUSCAR CLIENTE REAL DO CARDÁPIO DIGITAL (BUSCA INTELIGENTE)
      if (pedido.nome_cliente) {
        try {
          // Buscar cliente real na tabela de clientes
          const { data: clienteReal, error } = await supabase
            .from('clientes')
            .select('id, nome, telefone, documento, tipo_documento, emails')
            .eq('empresa_id', empresaData.id)
            .or('deletado.is.null,deletado.eq.false') // ✅ FILTRAR: Excluir clientes deletados
            .or(`nome.ilike.%${pedido.nome_cliente}%,telefone.eq.${pedido.telefone_cliente || ''},documento.eq.${pedido.cpf_cnpj_cliente || ''}`)
            .limit(1)
            .single();

          if (clienteReal && !error) {
            setClienteSelecionado(clienteReal);

            // ✅ PREENCHER AUTOMATICAMENTE CPF/CNPJ na Nota Fiscal se disponível
            if (pedido.cpf_cnpj_cliente && pedido.cpf_cnpj_cliente.trim()) {
              const documentoLimpo = pedido.cpf_cnpj_cliente.replace(/\D/g, '');
              if (documentoLimpo.length === 11) {
                setTipoDocumento('cpf');
                setCpfCnpjNota(formatCpf(documentoLimpo));
                setClienteEncontrado(clienteReal);
              } else if (documentoLimpo.length === 14) {
                setTipoDocumento('cnpj');
                setCpfCnpjNota(formatCnpj(documentoLimpo));
                setClienteEncontrado(clienteReal);
              }
              setErroValidacao('');
            }
          } else {
            console.log('⚠️ Cliente não encontrado na tabela de clientes:', {
              nome: pedido.nome_cliente,
              telefone: pedido.telefone_cliente,
              documento: pedido.cpf_cnpj_cliente,
              error: error?.message
            });

            // ✅ NOVO: Criar cliente automaticamente quando vem do cardápio digital
            if (pedido.nome_cliente && pedido.telefone_cliente) {
              try {
                console.log('🔄 Criando cliente automaticamente do cardápio digital...');

                const novoClienteData = {
                  nome: pedido.nome_cliente.trim(),
                  telefone: pedido.telefone_cliente.replace(/\D/g, ''),
                  telefones: [{
                    numero: pedido.telefone_cliente,
                    tipo: 'Celular' as const,
                    whatsapp: true
                  }],
                  documento: pedido.cpf_cnpj_cliente?.replace(/\D/g, '') || null,
                  tipo_documento: pedido.cpf_cnpj_cliente?.replace(/\D/g, '').length === 11 ? 'CPF' : 'CNPJ',
                  endereco: pedido.endereco_entrega || null,
                  numero: pedido.numero_entrega || null,
                  complemento: pedido.complemento_entrega || null,
                  bairro: pedido.bairro_entrega || null,
                  cidade: pedido.cidade_entrega || null,
                  estado: pedido.estado_entrega || null,
                  cep: pedido.cep_entrega?.replace(/\D/g, '') || null,
                  origem: 'cardapio_digital', // ✅ MARCAR ORIGEM COMO CARDÁPIO DIGITAL
                  empresa_id: empresaData.id
                };

                const { data: clienteCriado, error: errorCriar } = await supabase
                  .from('clientes')
                  .insert([novoClienteData])
                  .select('id, nome, telefone, documento, tipo_documento, emails')
                  .single();

                if (clienteCriado && !errorCriar) {
                  setClienteSelecionado(clienteCriado);
                  console.log('✅ Cliente criado automaticamente:', clienteCriado.nome);

                  // Preencher dados da nota fiscal se disponível
                  if (pedido.cpf_cnpj_cliente && pedido.cpf_cnpj_cliente.trim()) {
                    const documentoLimpo = pedido.cpf_cnpj_cliente.replace(/\D/g, '');
                    if (documentoLimpo.length === 11) {
                      setTipoDocumento('cpf');
                      setCpfCnpjNota(formatCpf(documentoLimpo));
                      setClienteEncontrado(clienteCriado);
                    } else if (documentoLimpo.length === 14) {
                      setTipoDocumento('cnpj');
                      setCpfCnpjNota(formatCnpj(documentoLimpo));
                      setClienteEncontrado(clienteCriado);
                    }
                    setErroValidacao('');
                  }
                } else {
                  console.error('❌ Erro ao criar cliente automaticamente:', errorCriar);
                }
              } catch (error) {
                console.error('❌ Erro ao criar cliente do cardápio digital:', error);
              }
            } else {
              console.log('ℹ️ Pedido será processado sem cliente selecionado');
            }
          }
        } catch (error) {
          console.error('❌ Erro ao buscar cliente real:', error);
        }
      }

      // ✅ SELECIONAR FORMA DE PAGAMENTO DO CARDÁPIO DIGITAL
      if (pedido.forma_pagamento_nome && formasPagamento.length > 0) {
        // Buscar forma de pagamento correspondente pelo nome
        const formaCorrespondente = formasPagamento.find(forma =>
          forma.nome?.toLowerCase() === pedido.forma_pagamento_nome.toLowerCase()
        );

        if (formaCorrespondente) {
          setFormaPagamentoSelecionada(formaCorrespondente.id);
          // Forma de pagamento selecionada automaticamente
        } else {
          console.log('⚠️ Forma de pagamento não encontrada:', {
            pedido_forma: pedido.forma_pagamento_nome,
            formas_disponiveis: formasPagamento.map(f => f.nome)
          });
        }
      }

      // Fechar modal do cardápio digital
      setShowCardapioDigitalModal(false);

      // Mostrar mensagem de sucesso
      toast.success(`Pedido #${pedido.numero_pedido} importado para faturamento!`);

    } catch (error) {
      toast.error('Erro ao importar pedido para faturamento');
    }
  };

  // Função que executa a importação do pedido
  const executarImportacaoPedido = (pedido: any) => {
    // Adicionar pedido à lista de importados com informações de desconto
    const novoPedidoImportado = {
      numero: pedido.numero,
      id: pedido.id,
      cliente: pedido.cliente,
      created_at: pedido.created_at,
      valor_total: pedido.valor_total,
      desconto_prazo_id: pedido.desconto_prazo_id,
      desconto_valor_id: pedido.desconto_valor_id,
      usuario: pedido.usuario // Incluir informações do vendedor
    };

    setPedidosImportados(prev => [...prev, novoPedidoImportado]);

    // Importar vendedor do pedido se existir e configuração estiver habilitada
    if (pdvConfig?.vendedor && pedido.usuario && !vendedorSelecionado) {
      setVendedorSelecionado({
        id: pedido.usuario.id,
        nome: pedido.usuario.nome,
        email: pedido.usuario.email
      });
    }

    // Importar cliente do pedido se existir e não houver cliente selecionado
    if (pedido.cliente && !clienteSelecionado) {
      const clienteImportado = {
        id: pedido.cliente.id,
        nome: pedido.cliente.nome,
        telefone: pedido.cliente.telefone,
        documento: pedido.cliente.documento // ✅ NOVO: Incluir documento para preenchimento automático
      };

      setClienteSelecionado(clienteImportado);

      // Carregar descontos do cliente
      carregarDescontosCliente(pedido.cliente.id);

      // ✅ NOVO: Preencher automaticamente CPF/CNPJ na Nota Fiscal Paulista
      if (pedido.cliente.documento && pedido.cliente.documento.trim()) {
        const documentoLimpo = pedido.cliente.documento.replace(/\D/g, '');
        if (documentoLimpo.length === 11) {
          // CPF
          setTipoDocumento('cpf');
          setCpfCnpjNota(formatCpf(documentoLimpo));
          setClienteEncontrado(clienteImportado);
          console.log('🎯 PDV: CPF do cliente importado preenchido automaticamente na Nota Fiscal Paulista:', formatCpf(documentoLimpo));
        } else if (documentoLimpo.length === 14) {
          // CNPJ
          setTipoDocumento('cnpj');
          setCpfCnpjNota(formatCnpj(documentoLimpo));
          setClienteEncontrado(clienteImportado);
        }
        setErroValidacao(''); // Limpar qualquer erro anterior
      }
    } else if (pedido.cliente && clienteSelecionado && clienteSelecionado.id === pedido.cliente.id) {
      // Se é o mesmo cliente, garantir que os descontos estejam carregados
      if (descontosCliente.prazo.length === 0 && descontosCliente.valor.length === 0) {
        carregarDescontosCliente(pedido.cliente.id);
      }
    } else if (pedido.cliente) {
      // Se há cliente no pedido mas é diferente do selecionado, carregar descontos
      carregarDescontosCliente(pedido.cliente.id);
    }

    // Importar desconto por prazo se existir no pedido
    if (pedido.desconto_prazo_id) {
      setDescontoPrazoSelecionado(pedido.desconto_prazo_id);
    }

    // Converter itens do pedido para formato do carrinho
    const novosItens: ItemCarrinho[] = pedido.pedidos_itens.map((item: any) => {
      // Verificar se há desconto no item (valor unitário diferente do preço do produto)
      const temDesconto = item.produto?.preco && item.valor_unitario < item.produto.preco;
      const precoOriginal = item.produto?.preco || item.valor_unitario;

      let descontoInfo = undefined;
      if (temDesconto) {
        const valorDesconto = precoOriginal - item.valor_unitario;
        const percentualDesconto = ((valorDesconto / precoOriginal) * 100);

        descontoInfo = {
          tipo: 'valor' as const,
          valor: valorDesconto,
          valorDesconto: valorDesconto,
          precoOriginal: precoOriginal,
          precoComDesconto: item.valor_unitario,
          percentualDesconto: percentualDesconto,
          origemPedido: true // Marcar que veio de um pedido importado
        };
      }

      return {
        id: `${item.produto.id}-${Date.now()}-${Math.random()}`,
        produto: item.produto,
        quantidade: item.quantidade,
        subtotal: item.quantidade * item.valor_unitario,
        pedido_origem_id: pedido.id, // Marcar de qual pedido veio
        pedido_origem_numero: pedido.numero,
        desconto: descontoInfo, // Preservar informações de desconto
        vendedor_id: pedido.usuario?.id, // Vendedor do pedido importado
        vendedor_nome: pedido.usuario?.nome // Nome do vendedor do pedido importado
      };
    });

    // Verificar configuração de agrupamento
    if (pdvConfig?.agrupa_itens) {
      // Agrupar itens iguais
      const carrinhoAtualizado = [...carrinho];

      novosItens.forEach(novoItem => {
        const itemExistente = carrinhoAtualizado.find(item =>
          item.produto.id === novoItem.produto.id &&
          item.subtotal / item.quantidade === novoItem.subtotal / novoItem.quantidade // Mesmo preço unitário
        );

        if (itemExistente) {
          // Agrupar: somar quantidade e recalcular subtotal
          itemExistente.quantidade += novoItem.quantidade;
          itemExistente.subtotal = itemExistente.quantidade * (itemExistente.subtotal / (itemExistente.quantidade - novoItem.quantidade));
          // Manter referência dos pedidos de origem
          if (!itemExistente.pedidos_origem) {
            itemExistente.pedidos_origem = [];
          }
          itemExistente.pedidos_origem.push({
            id: pedido.id,
            numero: pedido.numero,
            quantidade: novoItem.quantidade
          });
        } else {
          // Adicionar como novo item
          carrinhoAtualizado.push(novoItem);
        }
      });

      setCarrinho(carrinhoAtualizado);
    } else {
      // Não agrupar: adicionar todos os itens separadamente
      setCarrinho(prev => [...prev, ...novosItens]);
    }

    setShowPedidosModal(false);
    toast.success(`Pedido #${pedido.numero} importado com sucesso! ${novosItens.length} produto(s) adicionado(s).`);
  };

  const produtosFiltrados = produtos.filter(produto => {
    // Extrair o termo de busca (removendo a quantidade se houver)
    let termoBusca = searchTerm;
    if (searchTerm.includes('*')) {
      const partes = searchTerm.split('*');
      if (partes.length >= 2) {
        termoBusca = partes.slice(1).join('*').trim(); // Pega tudo após o primeiro *
      }
    }

    const matchesSearch = (produto.nome && produto.nome.toLowerCase().includes(termoBusca.toLowerCase())) ||
                         (produto.codigo && produto.codigo.toLowerCase().includes(termoBusca.toLowerCase())) ||
                         (produto.codigo_barras && produto.codigo_barras.toLowerCase().includes(termoBusca.toLowerCase()));
    const matchesGrupo = grupoSelecionado === 'todos' || produto.grupo_id === grupoSelecionado;
    return matchesSearch && matchesGrupo;
  }).sort((a, b) => {
    // ✅ CORREÇÃO: Priorizar correspondências exatas para evitar conflitos
    const termoBusca = searchTerm.includes('*')
      ? searchTerm.split('*').slice(1).join('*').trim()
      : searchTerm;

    // Prioridade 1: Código de barras exato
    const aCodigoBarrasExato = a.codigo_barras === termoBusca;
    const bCodigoBarrasExato = b.codigo_barras === termoBusca;
    if (aCodigoBarrasExato && !bCodigoBarrasExato) return -1;
    if (!aCodigoBarrasExato && bCodigoBarrasExato) return 1;

    // Prioridade 2: Código exato
    const aCodigoExato = a.codigo === termoBusca;
    const bCodigoExato = b.codigo === termoBusca;
    if (aCodigoExato && !bCodigoExato) return -1;
    if (!aCodigoExato && bCodigoExato) return 1;

    // Prioridade 3: Nome exato
    const aNomeExato = a.nome?.toLowerCase() === termoBusca.toLowerCase();
    const bNomeExato = b.nome?.toLowerCase() === termoBusca.toLowerCase();
    if (aNomeExato && !bNomeExato) return -1;
    if (!aNomeExato && bNomeExato) return 1;

    // Manter ordem original para outros casos
    return 0;
  });

  // Função para verificar se um produto tem opções adicionais
  const verificarOpcoesAdicionais = async (produtoId: string): Promise<boolean> => {
    try {
      const { data, error } = await supabase
        .from('produtos_opcoes_adicionais')
        .select('id')
        .eq('produto_id', produtoId)
        .eq('deletado', false)
        .limit(1);

      if (error) {
        console.error('Erro ao verificar opções adicionais:', error);
        return false;
      }

      return data && data.length > 0;
    } catch (error) {
      console.error('Erro ao verificar opções adicionais:', error);
      return false;
    }
  };

  // ✅ NOVO: Função auxiliar para adicionar produto sem verificar modais obrigatórios
  const adicionarProdutoSemVerificarModais = async (produto: Produto, quantidadePersonalizada?: number) => {
    // Esta função pula as verificações de modais obrigatórios e vai direto para o fluxo de adição
    return await processarAdicaoProduto(produto, quantidadePersonalizada);
  };

  const adicionarAoCarrinho = async (produto: Produto, quantidadePersonalizada?: number) => {
    // 🔍 DEBUG: Log do produto recebido para investigar devolucao_codigo
    console.log('🔍 PRODUTO RECEBIDO em adicionarAoCarrinho:', {
      id: produto.id,
      nome: produto.nome,
      codigo: produto.codigo,
      temDevolucaoProps: !!(produto as any).devolucao_codigo || !!(produto as any).isDevolucao,
      produtoCompleto: produto
    });

    // ✅ NOVO: PRIMEIRA PRIORIDADE - Verificar se precisa solicitar NOME DO CLIENTE primeiro
    if (pdvConfig?.solicitar_nome_cliente && !nomeCliente && carrinho.length === 0) {
      setProdutoAguardandoNomeCliente(produto);
      setQuantidadeAguardandoNomeCliente(quantidadePersonalizada || 1);
      setShowNomeClienteModal(true);
      return;
    }

    // ✅ NOVO: SEGUNDA PRIORIDADE - Verificar se precisa selecionar COMANDA primeiro
    if (pdvConfig?.comandas && !comandaNumero && carrinho.length === 0) {
      setProdutoAguardandoComandaMesa(produto);
      setQuantidadeAguardandoComandaMesa(quantidadePersonalizada || 1);
      setShowComandaModal(true);
      return;
    }

    // ✅ NOVO: TERCEIRA PRIORIDADE - Verificar se precisa selecionar MESA primeiro
    if (pdvConfig?.mesas && !mesaNumero && carrinho.length === 0) {
      setProdutoAguardandoComandaMesa(produto);
      setQuantidadeAguardandoComandaMesa(quantidadePersonalizada || 1);
      setShowMesaModal(true);
      return;
    }

    // Se chegou aqui, todos os modais obrigatórios foram preenchidos
    return await processarAdicaoProduto(produto, quantidadePersonalizada);
  };

  // ✅ NOVO: Função que processa a adição do produto (extraída da função original)
  const processarAdicaoProduto = async (produto: Produto, quantidadePersonalizada?: number) => {

    // ✅ Verificar opções adicionais ANTES de qualquer outro fluxo
    const temOpcoesAdicionais = await verificarOpcoesAdicionais(produto.id);

    // ✅ FLUXO SEQUENCIAL: Verificar se precisa selecionar vendedor primeiro
    if (pdvConfig?.vendedor && !vendedorSelecionado && !aguardandoSelecaoVendedor) {
      setProdutoAguardandoVendedor(produto);
      setAguardandoSelecaoVendedor(true);
      setShowVendedorModal(true);
      // ✅ NOVO: Se também tem multiplicação ativa, salvar para usar no fluxo sequencial
      if (pdvConfig?.vendas_itens_multiplicacao && !quantidadePersonalizada && !searchTerm.includes('*')) {
        setQuantidadeAguardandoVendedor(0); // 0 indica que deve abrir modal de quantidade depois
      }
      return;
    }

    // ✅ VERIFICAR: Modal de quantidade (apenas se não veio do fluxo do vendedor)
    if (pdvConfig?.vendas_itens_multiplicacao && !quantidadePersonalizada && !searchTerm.includes('*')) {
      setProdutoParaQuantidade(produto);
      setQuantidadeModal(1);
      setQuantidadeModalInput('1');
      setShowQuantidadeModal(true);
      return;
    }

    // Verificar se há quantidade especificada na busca (formato: quantidade*termo)
    let quantidadeParaAdicionar = quantidadePersonalizada || 1;

    if (!quantidadePersonalizada && searchTerm.includes('*')) {
      const [qtdStr] = searchTerm.split('*');
      const qtdParsed = parseInt(qtdStr.trim());
      if (!isNaN(qtdParsed) && qtdParsed > 0) {
        quantidadeParaAdicionar = qtdParsed;
        // Limpar o campo de busca após adicionar
        setSearchTerm('');
      }
    }

    // ✅ NOVO: Verificar se produto permite múltiplos sabores
    const permiteSabores = verificarPermiteSabores(produto);

    if (permiteSabores) {
      // Abrir modal de seleção de sabores
      const tabelaAtual = tabelasPrecos.find(t => t.id === tabelaPrecoSelecionada);
      setTabelaParaSabores(tabelaAtual);
      setProdutoParaSabores({ ...produto, quantidadeParaAdicionar, temOpcoesAdicionais });
      setShowSeletorSabores(true);
      return; // Não continuar com adição normal
    }

    // ✅ CORRIGIDO: Calcular o preço final considerando promoções E desconto por quantidade
    const precoFinal = calcularPrecoModalQuantidade(produto, quantidadeParaAdicionar);

    // Criar o item do carrinho
    const novoItem: ItemCarrinho = {
      id: `${produto.id}-${Date.now()}-${Math.random()}`, // ID único
      produto,
      quantidade: quantidadeParaAdicionar,
      subtotal: precoFinal * quantidadeParaAdicionar,
      temOpcoesAdicionais,
      vendedor_id: vendedorSelecionado?.id,
      vendedor_nome: vendedorSelecionado?.nome,
      // ✅ NOVO: Salvar qual tabela de preços foi usada neste item
      tabela_preco_id: trabalhaComTabelaPrecos && tabelaPrecoSelecionada !== 'padrao' ? tabelaPrecoSelecionada : null,
      tabela_preco_nome: trabalhaComTabelaPrecos && tabelaPrecoSelecionada !== 'padrao'
        ? tabelasPrecos.find(t => t.id === tabelaPrecoSelecionada)?.nome
        : null
    };

    // 🔍 DEBUG: Log do item criado para investigar devolucao_codigo
    console.log('🔍 NOVO ITEM CRIADO:', {
      id: novoItem.id,
      produtoNome: novoItem.produto.nome,
      temDevolucaoProps: !!(novoItem as any).devolucao_codigo || !!(novoItem as any).isDevolucao,
      itemCompleto: novoItem
    });

    // ✅ CORREÇÃO: Se o produto tem opções adicionais, abrir modal independentemente do fluxo
    if (temOpcoesAdicionais) {
      setItemParaAdicionais(novoItem);
      setShowAdicionaisModal(true);
      return; // Não continuar com adição normal
    }

    // ✅ CORREÇÃO: Para produtos SEM adicionais, usar o mesmo fluxo simples dos produtos COM adicionais
    // Apenas adicionar ao carrinho - a criação da venda será feita na finalização
    setCarrinho(prev => [...prev, novoItem]);

    // Tocar som de sucesso se habilitado
    if (pdvConfig?.som_adicionar_produto) {
      playSuccessSound();
    }

    toast.success(`${produto.nome} adicionado ao carrinho!`);
    return; // ✅ NOVO: Sair aqui para evitar o código problemático abaixo

    // ✅ CÓDIGO ANTIGO PROBLEMÁTICO (mantido comentado para referência)
    // ✅ NOVO: Criar venda em andamento no primeiro item (adaptado do sistema de rascunhos NFe)
    const isFirstItem = carrinho.length === 0;


    if (isFirstItem && !vendaEmAndamento && !criandoVenda) {


      setCriandoVenda(true);
      try {
        const vendaCriada = await criarVendaEmAndamento();

        if (!vendaCriada) {
          setCriandoVenda(false);
          console.error('❌ CRIACAO: Falha ao criar venda em andamento - função retornou false');
          toast.error('Erro ao criar venda. Tente novamente.');
          return;
        }

        // ✅ CORREÇÃO: Aguardar um pouco para garantir que a transação foi commitada
        await new Promise(resolve => setTimeout(resolve, 200));
        setCriandoVenda(false);
      } catch (error) {
        setCriandoVenda(false);
        console.error('❌ CRIACAO: Erro durante criação da venda:', error);
        console.error('❌ CRIACAO: Stack trace:', (error as Error).stack);
        toast.error('Erro ao criar venda: ' + (error as Error).message);
        return;
      }
    } else if (criandoVenda) {
      // ✅ NOVO: Se está criando venda, aguardar até terminar

      let tentativas = 0;
      while (criandoVenda && tentativas < 50) { // Máximo 5 segundos
        await new Promise(resolve => setTimeout(resolve, 100));
        tentativas++;
      }

      if (criandoVenda) {
        console.error('❌ TIMEOUT: Criação da venda demorou muito');
        toast.error('Erro: Criação da venda demorou muito. Tente novamente.');
        return;
      }

      if (!vendaEmAndamento) {
        console.error('❌ ERRO: Venda não foi criada após aguardar');
        toast.error('Erro: Venda não foi criada. Tente novamente.');
        return;
      }
    } else {

    }

    // ✅ CORREÇÃO: Aguardar criação da venda se necessário e garantir que temos a venda atualizada
    let vendaParaSalvar = vendaEmAndamento;
    if (isFirstItem && !vendaEmAndamento && !criandoVenda) {

      // Aguardar um pouco para a venda ser criada e o estado ser atualizado
      await new Promise(resolve => setTimeout(resolve, 200));
      vendaParaSalvar = vendaEmAndamento;

      // ✅ NOVO: Se ainda não temos venda, tentar buscar novamente
      if (!vendaParaSalvar) {

        await new Promise(resolve => setTimeout(resolve, 300));
        vendaParaSalvar = vendaEmAndamento;
      }
    }

    setCarrinho(prev => {
      // Verificar se deve agrupar itens baseado na configuração
      const deveAgrupar = pdvConfig?.agrupa_itens === true;

      if (deveAgrupar) {
        // Comportamento original: agrupa itens idênticos
        const itemExistente = prev.find(item => item.produto.id === produto.id);

        if (itemExistente) {
          return prev.map(item =>
            item.produto.id === produto.id
              ? {
                  ...item,
                  quantidade: item.quantidade + quantidadeParaAdicionar,
                  subtotal: (item.quantidade + quantidadeParaAdicionar) * precoFinal,
                  temOpcoesAdicionais
                }
              : item
          );
        } else {
          return [...prev, novoItem];
        }
      } else {
        // Comportamento novo: sempre adiciona como item separado
        return [...prev, novoItem];
      }
    });

    // ✅ CORREÇÃO: Aguardar venda ser criada antes de salvar item
    const aguardarVendaEsalvarItem = async () => {
      console.log('🔍 DEBUG aguardarVendaEsalvarItem INICIADO:', {
        produto: produto.nome,
        isFirstItem,
        vendaEmAndamento: !!vendaEmAndamento,
        isEditingVenda
      });

      // Se é primeiro item e não há venda, aguardar criação
      if (isFirstItem && !vendaEmAndamento && !isEditingVenda) {


        let tentativas = 0;
        const maxTentativas = 100; // 10 segundos

        while (!vendaEmAndamento && tentativas < maxTentativas) {
          // Log reduzido para evitar spam no console
          if (tentativas % 10 === 0) {
            console.log(`🔍 DEBUG: Aguardando estado vendaEmAndamento ser atualizado... Tentativa ${tentativas}/${maxTentativas}`, {
              vendaEmAndamento: !!vendaEmAndamento,
              criandoVenda
            });
          }
          await new Promise(resolve => setTimeout(resolve, 100));
          tentativas++;
        }

        if (!vendaEmAndamento) {
          console.log('❌ DEBUG: Timeout - estado vendaEmAndamento não foi atualizado após', maxTentativas, 'tentativas');
          console.log('❌ DEBUG: Isso indica um problema de timing/race condition no React state');
          return;
        }

        console.log('✅ DEBUG: Estado vendaEmAndamento finalmente atualizado!', {
          vendaId: vendaEmAndamento.id,
          tentativasUsadas: tentativas
        });


      }

      // Usar o estado mais atual da venda em andamento
      const vendaAtual = vendaEmAndamento;


      if (vendaAtual) {
        console.log('🔍 DEBUG: Venda encontrada, tentando salvar item:', {
          produto: produto.nome,
          vendaId: vendaAtual.id,
          isEditingVenda
        });

        // ✅ CORREÇÃO: Só salvar se não é venda recuperada (para evitar duplicação)
        if (!isEditingVenda) {
          console.log('🔍 DEBUG: Chamando salvarItemNaVendaEmAndamento para:', produto.nome);
          const itemSalvo = await salvarItemNaVendaEmAndamento(novoItem);

          if (!itemSalvo) {
            console.error('❌ ERRO CRÍTICO: Falha ao salvar item na venda em andamento');
            toast.error('ERRO: Item não foi salvo! Verifique o console.');
          } else {
            // ✅ NOVO: Atualizar o item no carrinho com o pdv_item_id para evitar duplicação
            setCarrinho(prev => prev.map(item =>
              item.id === novoItem.id
                ? { ...item, pdv_item_id: itemSalvo.id || 'salvo' }
                : item
            ));
          }
        } else {
          // Não salvando item porque é venda recuperada (itens já estão salvos)
        }
      } else {
        console.error('❌ DEBUG: Não salvou item porque não há venda em andamento:', {
          vendaEmAndamento: !!vendaEmAndamento,
          vendaAtual: !!vendaAtual,
          isFirstItem,
          criandoVenda,
          motivo: 'Venda em andamento não encontrada após timeout'
        });

        // ✅ NOVO: Tentar salvar novamente após mais tempo (só se não for venda recuperada)
        if (!isEditingVenda) {
          setTimeout(async () => {
            const vendaFinal = vendaEmAndamento;
            if (vendaFinal) {
              console.log('🔄 RETRY: Tentando salvar item novamente...');
              const itemSalvo = await salvarItemNaVendaEmAndamento(novoItem);
              if (itemSalvo) {
                console.log('✅ RETRY: Item salvo na segunda tentativa');
                setCarrinho(prev => prev.map(item =>
                  item.id === novoItem.id
                    ? { ...item, pdv_item_id: itemSalvo.id || 'salvo' }
                    : item
                ));
              } else {
                toast.error('ERRO: Item não foi salvo após múltiplas tentativas!');
              }
            } else {
              toast.error('ERRO: Venda em andamento não encontrada!');
            }
          }, 500);
        }
      }
    };

    // Chamar a função para aguardar venda e salvar item
    aguardarVendaEsalvarItem();
  };

  // Funções para seleção de vendedor
  const selecionarVendedor = (vendedor: any) => {
    setVendedorSelecionado(vendedor);
    setShowVendedorModal(false);

    // Se há um produto aguardando, verificar o fluxo
    if (produtoAguardandoVendedor) {
      setAguardandoSelecaoVendedor(false);

      // ✅ FLUXO SEQUENCIAL: Se quantidade = 0, significa que deve abrir modal de quantidade
      if (quantidadeAguardandoVendedor === 0 && pdvConfig?.vendas_itens_multiplicacao) {
        // Abrir modal de quantidade após selecionar vendedor
        setProdutoParaQuantidade(produtoAguardandoVendedor);
        setQuantidadeModal(1);
        setQuantidadeModalInput('1');
        setShowQuantidadeModal(true);
        // Limpar produto aguardando vendedor mas manter vendedor selecionado
        setProdutoAguardandoVendedor(null);
        setQuantidadeAguardandoVendedor(1);
      } else {
        // Fluxo normal: adicionar produto com vendedor e quantidade definida
        adicionarProdutoComVendedor(produtoAguardandoVendedor, vendedor, quantidadeAguardandoVendedor > 0 ? quantidadeAguardandoVendedor : 1);
        setProdutoAguardandoVendedor(null);
        setQuantidadeAguardandoVendedor(1);

        // ✅ NOVO: Fechar também o modal de produtos se estiver aberto
        if (showAreaProdutos) {
          setShowAreaProdutos(false);
        }
      }
    }

    // Se há uma venda sem produto aguardando, verificar o fluxo
    if (vendaSemProdutoAguardando) {
      setAguardandoSelecaoVendedor(false);

      // ✅ FLUXO SEQUENCIAL: Se quantidade = 0, significa que deve abrir modal de quantidade
      if (quantidadeAguardandoVendedor === 0 && pdvConfig?.vendas_itens_multiplicacao) {
        // Abrir modal de quantidade após selecionar vendedor
        setQuantidadeModal(1);
        setQuantidadeModalInput('1');
        setShowQuantidadeModal(true);
        // Não limpar vendaSemProdutoAguardando ainda, será usado no modal de quantidade
      } else {
        // Adicionar venda sem produto diretamente com vendedor selecionado
        adicionarVendaSemProdutoFinal(vendaSemProdutoAguardando.nome, vendaSemProdutoAguardando.preco, quantidadeAguardandoVendedor > 0 ? quantidadeAguardandoVendedor : 1);
        setVendaSemProdutoAguardando(null);
        setQuantidadeAguardandoVendedor(1);
      }
    }
  };

  const cancelarSelecaoVendedor = () => {
    setShowVendedorModal(false);
    setAguardandoSelecaoVendedor(false);
    setProdutoAguardandoVendedor(null);
    setQuantidadeAguardandoVendedor(1); // ✅ NOVO: Limpar também a quantidade salva
    setVendaSemProdutoAguardando(null); // Limpar venda sem produto aguardando
  };



  // ✅ NOVO: Funções para modal de Nome do Cliente (PRIMEIRA PRIORIDADE)
  const confirmarNomeCliente = async () => {
    const nome = nomeClienteTemp.trim();

    // Validar se o nome foi preenchido
    if (!nome) {
      showMessage('error', 'Por favor, informe o nome do cliente');
      return;
    }

    // ✅ Atualizar estado real com valor temporário
    setNomeCliente(nome);

    // ✅ NOVO: Atualizar venda em andamento se existir
    if (vendaEmAndamento) {
      try {
        const { error } = await supabase
          .from('pdv')
          .update({ nome_cliente: nome })
          .eq('id', vendaEmAndamento.id);

        if (error) {
          console.error('Erro ao atualizar nome do cliente na venda:', error);
        }
      } catch (error) {
        console.error('Erro ao atualizar nome do cliente:', error);
      }
    }

    // Fechar modal
    setShowNomeClienteModal(false);

    // ✅ VERIFICAR: Se há produto aguardando (fluxo inicial) ou se é apenas edição
    if (produtoAguardandoNomeCliente) {
      // ✅ VERIFICAR: Se há próximos modais obrigatórios
      if (pdvConfig?.comandas && !comandaNumero) {
        // Transferir dados para comanda
        setProdutoAguardandoComandaMesa(produtoAguardandoNomeCliente);
        setQuantidadeAguardandoComandaMesa(quantidadeAguardandoNomeCliente);
        setProdutoAguardandoNomeCliente(null);
        setQuantidadeAguardandoNomeCliente(1);
        setShowComandaModal(true);
        return;
      }

      if (pdvConfig?.mesas && !mesaNumero) {
        // Transferir dados para mesa
        setProdutoAguardandoComandaMesa(produtoAguardandoNomeCliente);
        setQuantidadeAguardandoComandaMesa(quantidadeAguardandoNomeCliente);
        setProdutoAguardandoNomeCliente(null);
        setQuantidadeAguardandoNomeCliente(1);
        setShowMesaModal(true);
        return;
      }

      // Se não há mais modais obrigatórios, continuar fluxo normal
      adicionarProdutoSemVerificarModais(produtoAguardandoNomeCliente, quantidadeAguardandoNomeCliente);
      setProdutoAguardandoNomeCliente(null);
      setQuantidadeAguardandoNomeCliente(1);
    } else if (vendaSemProdutoAguardandoNomeCliente) {
      // ✅ VERIFICAR: Se há próximos modais obrigatórios para venda sem produto
      if (pdvConfig?.comandas && !comandaNumero) {
        setVendaSemProdutoAguardandoComandaMesa(vendaSemProdutoAguardandoNomeCliente);
        setVendaSemProdutoAguardandoNomeCliente(null);
        setShowComandaModal(true);
        return;
      }

      if (pdvConfig?.mesas && !mesaNumero) {
        setVendaSemProdutoAguardandoComandaMesa(vendaSemProdutoAguardandoNomeCliente);
        setVendaSemProdutoAguardandoNomeCliente(null);
        setShowMesaModal(true);
        return;
      }

      // Se não há mais modais obrigatórios, continuar fluxo normal
      adicionarVendaSemProdutoComVerificacoes(vendaSemProdutoAguardandoNomeCliente.nome, vendaSemProdutoAguardandoNomeCliente.preco);
      setVendaSemProdutoAguardandoNomeCliente(null);
    }
    // Se não há produto aguardando, é apenas edição - nome já foi atualizado no estado
  };

  const cancelarNomeCliente = () => {
    setShowNomeClienteModal(false);

    // ✅ VERIFICAR: Se há produto aguardando (fluxo inicial), limpar tudo
    if (produtoAguardandoNomeCliente || vendaSemProdutoAguardandoNomeCliente) {
      setNomeCliente('');
      setProdutoAguardandoNomeCliente(null);
      setQuantidadeAguardandoNomeCliente(1);
      setVendaSemProdutoAguardandoNomeCliente(null);
    }
    // Se não há produto aguardando, é apenas edição - manter valor original
  };

  // ✅ NOVO: Função para carregar venda em andamento (recuperar após reload)
  const carregarVendaEmAndamento = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      // Buscar venda em andamento (aberta) do usuário
      const { data: vendaAberta, error } = await supabase
        .from('pdv')
        .select(`
          id,
          numero_venda,
          valor_total,
          valor_subtotal,
          nome_cliente,
          mesa_numero,
          comanda_numero,
          observacao_venda,
          created_at
        `)
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('usuario_id', userData.user.id)
        .eq('status_venda', 'aberta')
        .order('created_at', { ascending: false })
        .limit(1)
        .maybeSingle();

      if (error) {
        console.error('Erro ao carregar venda em andamento:', error);
        return;
      }

      if (vendaAberta) {
        console.log('🔄 Venda em andamento encontrada:', vendaAberta);

        // Restaurar dados da venda
        setVendaEmAndamento(vendaAberta);

        // Restaurar dados do cliente/mesa/comanda
        if (vendaAberta.nome_cliente) {
          setNomeCliente(vendaAberta.nome_cliente);
        }
        if (vendaAberta.mesa_numero) {
          setMesaNumero(vendaAberta.mesa_numero.toString());
        }
        if (vendaAberta.comanda_numero) {
          setComandaNumero(vendaAberta.comanda_numero.toString());
        }
        if (vendaAberta.observacao_venda) {
          setObservacaoVenda(vendaAberta.observacao_venda);
        }

        // Carregar itens da venda
        const { data: itens, error: itensError } = await supabase
          .from('pdv_itens')
          .select(`
            id,
            produto_id,
            codigo_produto,
            nome_produto,
            quantidade,
            valor_unitario,
            valor_total_item,
            vendedor_id,
            vendedores(nome)
          `)
          .eq('pdv_id', vendaAberta.id);

        if (itensError) {
          console.error('Erro ao carregar itens da venda:', itensError);
          return;
        }

        if (itens && itens.length > 0) {
          // Converter itens para formato do carrinho
          const itensCarrinho = itens.map(item => ({
            id: `${item.produto_id}-${Date.now()}-${Math.random()}`,
            produto: {
              id: item.produto_id,
              codigo: item.codigo_produto,
              nome: item.nome_produto,
              preco: item.valor_unitario
            },
            quantidade: item.quantidade,
            subtotal: item.valor_total_item,
            vendedor: item.vendedores ? {
              id: item.vendedor_id,
              nome: item.vendedores.nome
            } : null
          }));

          setCarrinho(itensCarrinho);
          console.log('🛒 Carrinho restaurado com', itensCarrinho.length, 'itens');
        }

        showMessage('success', `Venda ${vendaAberta.numero_venda} recuperada com sucesso!`);
      }

    } catch (error) {
      console.error('Erro ao carregar venda em andamento:', error);
    }
  };

  // ✅ NOVO: Função para liberar comanda de uma venda
  const liberarComanda = async () => {
    if (!vendaParaLiberarComanda) return;

    try {
      setLoadingLiberarComanda(true);

      const { error } = await supabase
        .from('pdv')
        .update({
          comanda_numero: null,
          updated_at: new Date().toISOString()
        })
        .eq('id', vendaParaLiberarComanda.id);

      if (error) {
        console.error('Erro ao liberar comanda:', error);
        showMessage('error', 'Erro ao liberar comanda');
        return;
      }

      showMessage('success', `Comanda ${vendaParaLiberarComanda.comanda_numero} liberada com sucesso!`);

      // Fechar modal
      setShowLiberarComandaModal(false);
      setVendaParaLiberarComanda(null);

      // Recarregar lista de vendas
      carregarVendasAbertas();

    } catch (error) {
      console.error('Erro ao liberar comanda:', error);
      showMessage('error', 'Erro ao liberar comanda');
    } finally {
      setLoadingLiberarComanda(false);
    }
  };

  // ✅ NOVO: Funções para modais de Comanda e Mesa
  const confirmarComanda = async () => {
    const numero = comandaNumeroTemp.trim();

    // Validar se é um número inteiro
    if (!/^\d+$/.test(numero)) {
      showMessage('error', 'Digite apenas números inteiros para a comanda');
      return;
    }

    // Validar se está no range configurado
    if (!validarComanda(numero)) {
      showMessage('error', `Comanda ${numero} não existe. Range válido: ${rangesConfig.comandas.inicio} a ${rangesConfig.comandas.fim}`);
      return;
    }

    // ✅ NOVO: Verificar se a comanda já está sendo usada por outra venda salva
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        showMessage('error', 'Erro de autenticação');
        return;
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        showMessage('error', 'Erro ao obter dados da empresa');
        return;
      }

      // Verificar se existe venda salva com esta comanda (excluindo a venda atual se existir)
      let query = supabase
        .from('pdv')
        .select('id, numero_venda, nome_cliente')
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('comanda_numero', numero)
        .or('status_venda.eq.aberta,status_venda.eq.salva'); // ✅ CORREÇÃO: Usar .or() em vez de .in()

      // Se há venda em andamento atual, excluir ela da verificação
      if (vendaEmAndamento?.id) {
        query = query.neq('id', vendaEmAndamento.id);
      }

      const { data: vendaExistente, error } = await query.maybeSingle(); // ✅ CORREÇÃO: Usar .maybeSingle() em vez de .single()

      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found (ok)
        console.error('Erro ao verificar comanda:', error);
        showMessage('error', 'Erro ao verificar disponibilidade da comanda');
        return;
      }

      if (vendaExistente) {
        const clienteInfo = vendaExistente.nome_cliente ? ` (Cliente: ${vendaExistente.nome_cliente})` : '';
        showMessage('error', `❌ Comanda ${numero} já está sendo usada na venda ${vendaExistente.numero_venda}${clienteInfo}. Escolha outra comanda.`);
        return;
      }

    } catch (error) {
      console.error('Erro ao verificar comanda:', error);
      showMessage('error', 'Erro ao verificar disponibilidade da comanda');
      return;
    }

    // ✅ Atualizar estado real com valor temporário
    setComandaNumero(numero);

    // ✅ NOVO: Atualizar venda em andamento se existir
    if (vendaEmAndamento) {
      try {
        supabase
          .from('pdv')
          .update({ comanda_numero: numero })
          .eq('id', vendaEmAndamento.id)
          .then(({ error }) => {
            if (error) {
              console.error('Erro ao atualizar comanda na venda:', error);
            }
          });
      } catch (error) {
        console.error('Erro ao atualizar comanda:', error);
      }
    }

    // Fechar modal
    setShowComandaModal(false);

    // ✅ VERIFICAR: Se há produto aguardando (fluxo inicial) ou se é apenas edição
    if (produtoAguardandoComandaMesa) {
      // ✅ VERIFICAR: Se há próximo modal obrigatório (mesa)
      if (pdvConfig?.mesas && !mesaNumero) {
        // Continuar para mesa - dados já estão em produtoAguardandoComandaMesa
        setShowMesaModal(true);
        return;
      }

      // Se não há mais modais obrigatórios, continuar fluxo normal
      adicionarProdutoSemVerificarModais(produtoAguardandoComandaMesa, quantidadeAguardandoComandaMesa);
      setProdutoAguardandoComandaMesa(null);
      setQuantidadeAguardandoComandaMesa(1);
    } else if (vendaSemProdutoAguardandoComandaMesa) {
      // ✅ VERIFICAR: Se há próximo modal obrigatório (mesa) para venda sem produto
      if (pdvConfig?.mesas && !mesaNumero) {
        // Continuar para mesa - dados já estão em vendaSemProdutoAguardandoComandaMesa
        setShowMesaModal(true);
        return;
      }

      // Se não há mais modais obrigatórios, continuar fluxo normal
      adicionarVendaSemProdutoComVerificacoes(vendaSemProdutoAguardandoComandaMesa.nome, vendaSemProdutoAguardandoComandaMesa.preco);
      setVendaSemProdutoAguardandoComandaMesa(null);
    }
    // Se não há produto aguardando, é apenas edição - número já foi atualizado no estado
  };

  const confirmarMesa = () => {
    const numero = mesaNumeroTemp.trim();

    // Validar se é um número inteiro
    if (!/^\d+$/.test(numero)) {
      showMessage('error', 'Digite apenas números inteiros para a mesa');
      return;
    }

    // Validar se está no range configurado
    if (!validarMesa(numero)) {
      showMessage('error', `Mesa ${numero} não existe. Range válido: ${rangesConfig.mesas.inicio} a ${rangesConfig.mesas.fim}`);
      return;
    }

    // ✅ Atualizar estado real com valor temporário
    setMesaNumero(numero);

    // ✅ NOVO: Atualizar venda em andamento se existir
    if (vendaEmAndamento) {
      try {
        supabase
          .from('pdv')
          .update({ mesa_numero: numero })
          .eq('id', vendaEmAndamento.id)
          .then(({ error }) => {
            if (error) {
              console.error('Erro ao atualizar mesa na venda:', error);
            }
          });
      } catch (error) {
        console.error('Erro ao atualizar mesa:', error);
      }
    }

    // Fechar modal
    setShowMesaModal(false);

    // ✅ VERIFICAR: Se há produto aguardando (fluxo inicial) ou se é apenas edição
    if (produtoAguardandoComandaMesa) {
      // Fluxo inicial - continuar com adição do produto
      adicionarProdutoSemVerificarModais(produtoAguardandoComandaMesa, quantidadeAguardandoComandaMesa);
      setProdutoAguardandoComandaMesa(null);
      setQuantidadeAguardandoComandaMesa(1);
    } else if (vendaSemProdutoAguardandoComandaMesa) {
      // Fluxo inicial - continuar com venda sem produto
      adicionarVendaSemProdutoComVerificacoes(vendaSemProdutoAguardandoComandaMesa.nome, vendaSemProdutoAguardandoComandaMesa.preco);
      setVendaSemProdutoAguardandoComandaMesa(null);
    }
    // Se não há produto aguardando, é apenas edição - número já foi atualizado no estado
  };

  const cancelarComanda = () => {
    setShowComandaModal(false);

    // ✅ VERIFICAR: Se há produto aguardando (fluxo inicial), limpar tudo
    if (produtoAguardandoComandaMesa || vendaSemProdutoAguardandoComandaMesa) {
      setComandaNumero('');
      setProdutoAguardandoComandaMesa(null);
      setQuantidadeAguardandoComandaMesa(1);
      setVendaSemProdutoAguardandoComandaMesa(null);
    }
    // Se não há produto aguardando, é apenas edição - manter valor original
  };

  const cancelarMesa = () => {
    setShowMesaModal(false);

    // ✅ VERIFICAR: Se há produto aguardando (fluxo inicial), limpar tudo
    if (produtoAguardandoComandaMesa || vendaSemProdutoAguardandoComandaMesa) {
      setMesaNumero('');
      setProdutoAguardandoComandaMesa(null);
      setQuantidadeAguardandoComandaMesa(1);
      setVendaSemProdutoAguardandoComandaMesa(null);
    }
    // Se não há produto aguardando, é apenas edição - manter valor original
  };

  // ✅ NOVO: Funções para modal de quantidade
  const confirmarQuantidade = () => {
    // Verificar se é venda sem produto ou produto normal
    if (vendaSemProdutoAguardando) {
      if (quantidadeModal <= 0) return;

      // Adicionar venda sem produto com quantidade definida
      adicionarVendaSemProdutoFinal(vendaSemProdutoAguardando.nome, vendaSemProdutoAguardando.preco, quantidadeModal);
      setVendaSemProdutoAguardando(null);
    } else {
      if (!produtoParaQuantidade || quantidadeModal <= 0) return;

      // ✅ FLUXO SEQUENCIAL: Se chegou aqui, o vendedor já foi selecionado (se necessário)
      // Adicionar produto com vendedor (se houver) e quantidade definida
      if (vendedorSelecionado) {
        adicionarProdutoComVendedor(produtoParaQuantidade, vendedorSelecionado, quantidadeModal);
      } else {
        adicionarAoCarrinho(produtoParaQuantidade, quantidadeModal);
      }
    }

    // Fechar modal de quantidade e limpar estados
    setShowQuantidadeModal(false);
    setProdutoParaQuantidade(null);
    setQuantidadeModal(1);
    setQuantidadeModalInput('1');

    // ✅ NOVO: Fechar também o modal de produtos se estiver aberto
    if (showAreaProdutos) {
      setShowAreaProdutos(false);
    }
  };

  const cancelarQuantidade = () => {
    setShowQuantidadeModal(false);
    setProdutoParaQuantidade(null);
    setQuantidadeModal(1);
    setQuantidadeModalInput('1');
    setVendaSemProdutoAguardando(null); // Limpar venda sem produto aguardando
  };

  // Função para adicionar venda sem produto com verificações de vendedor e quantidade
  const adicionarVendaSemProdutoComVerificacoes = (nome: string, preco: number) => {
    // ✅ NOVO: PRIMEIRA PRIORIDADE - Verificar se precisa solicitar NOME DO CLIENTE primeiro
    if (pdvConfig?.solicitar_nome_cliente && !nomeCliente && carrinho.length === 0) {
      setVendaSemProdutoAguardandoNomeCliente({ nome, preco });
      setShowNomeClienteModal(true);
      return;
    }

    // ✅ NOVO: SEGUNDA PRIORIDADE - Verificar se precisa selecionar COMANDA primeiro
    if (pdvConfig?.comandas && !comandaNumero && carrinho.length === 0) {
      setVendaSemProdutoAguardandoComandaMesa({ nome, preco });
      setShowComandaModal(true);
      return;
    }

    // ✅ NOVO: TERCEIRA PRIORIDADE - Verificar se precisa selecionar MESA primeiro
    if (pdvConfig?.mesas && !mesaNumero && carrinho.length === 0) {
      setVendaSemProdutoAguardandoComandaMesa({ nome, preco });
      setShowMesaModal(true);
      return;
    }

    // ✅ VERIFICAR: Se é o primeiro item no carrinho e precisa selecionar vendedor
    if (carrinho.length === 0 && pdvConfig?.vendedor && !vendedorSelecionado && !aguardandoSelecaoVendedor) {
      setVendaSemProdutoAguardando({ nome, preco });
      setAguardandoSelecaoVendedor(true);
      setShowVendedorModal(true);
      // Se também tem multiplicação ativa, salvar para usar no fluxo sequencial
      if (pdvConfig?.vendas_itens_multiplicacao) {
        setQuantidadeAguardandoVendedor(0); // 0 indica que deve abrir modal de quantidade depois
      }
      return;
    }

    // ✅ VERIFICAR: Se é o primeiro item e precisa selecionar quantidade
    if (carrinho.length === 0 && pdvConfig?.vendas_itens_multiplicacao) {
      setVendaSemProdutoAguardando({ nome, preco });
      setQuantidadeModal(1);
      setQuantidadeModalInput('1');
      setShowQuantidadeModal(true);
      return;
    }

    // Se chegou aqui, pode adicionar diretamente
    adicionarVendaSemProdutoFinal(nome, preco, 1);
  };

  // Função final para adicionar venda sem produto ao carrinho
  const adicionarVendaSemProdutoFinal = (nome: string, preco: number, quantidade: number = 1) => {
    // Criar um produto fictício para manter compatibilidade com o sistema
    const produtoFicticio = {
      id: `venda-sem-produto-${Date.now()}`,
      nome: nome.trim(),
      preco: preco,
      codigo: '999999', // ✅ CÓDIGO FIXO RESERVADO para venda sem produto (6 chars < 60 limite SEFAZ)
      grupo_id: '',
      promocao: false,
      unidade_medida: 'UN', // ✅ UNIDADE FIXA para NFC-e (obrigatória)
      // ✅ DADOS FISCAIS das configurações PDV para NFC-e (igual venda normal)
      ncm: pdvConfig?.venda_sem_produto_ncm || '22021000', // NCM padrão para bebidas
      cfop: pdvConfig?.venda_sem_produto_cfop === '5405' ? '5102' : (pdvConfig?.venda_sem_produto_cfop || '5102'), // ✅ CORREÇÃO: 5405 não é válido para Simples Nacional
      codigo_barras: null // Venda sem produto não tem código de barras
    };

    const novoItem: ItemCarrinho = {
      id: `${produtoFicticio.id}-${Date.now()}-${Math.random()}`,
      produto: produtoFicticio,
      quantidade: quantidade,
      subtotal: preco * quantidade,
      temOpcoesAdicionais: false,
      vendaSemProduto: true,
      nome: nome.trim(), // ✅ Nome personalizado para venda sem produto
      preco: preco, // ✅ CORREÇÃO: Adicionar campo preco para venda sem produto
      vendedor_id: vendedorSelecionado?.id,
      vendedor_nome: vendedorSelecionado?.nome,
      // ✅ NOVO: Salvar qual tabela de preços foi usada neste item (venda sem produto sempre usa preço padrão)
      tabela_preco_id: null,
      tabela_preco_nome: null
    };

    setCarrinho(prev => [...prev, novoItem]);
    // ✅ REMOVIDO: Toast removido para não confundir com outros processos
  };

  const aumentarQuantidade = () => {
    // Verificar se a unidade de medida permite fracionamento
    const isFracionado = produtoParaQuantidade?.unidade_medida?.fracionado || false;

    if (isFracionado) {
      // Para produtos fracionados, incrementar em 0.1 (100g, 100ml, etc.)
      const novaQuantidade = Math.round((quantidadeModal + 0.1) * 1000) / 1000; // 3 casas decimais
      setQuantidadeModal(novaQuantidade);
      setQuantidadeModalInput(novaQuantidade.toFixed(3));
    } else {
      // Para produtos inteiros, incrementar em 1
      const novaQuantidade = quantidadeModal + 1;
      setQuantidadeModal(novaQuantidade);
      setQuantidadeModalInput(novaQuantidade.toString());
    }
  };

  const diminuirQuantidade = () => {
    // Verificar se a unidade de medida permite fracionamento
    const isFracionado = produtoParaQuantidade?.unidade_medida?.fracionado || false;

    if (isFracionado) {
      // Para produtos fracionados, decrementar em 0.1, mínimo 0.1
      const novaQuantidade = Math.max(0.1, Math.round((quantidadeModal - 0.1) * 1000) / 1000); // 3 casas decimais
      setQuantidadeModal(novaQuantidade);
      setQuantidadeModalInput(novaQuantidade.toFixed(3));
    } else {
      // Para produtos inteiros, decrementar em 1, mínimo 1
      const novaQuantidade = Math.max(1, quantidadeModal - 1);
      setQuantidadeModal(novaQuantidade);
      setQuantidadeModalInput(novaQuantidade.toString());
    }
  };

  // ✅ NOVO: Função para formatar quantidade baseada na unidade de medida
  const formatarQuantidade = (quantidade: number, unidadeMedida?: any) => {
    // Se a unidade de medida permite fracionamento, mostrar 3 casas decimais
    if (unidadeMedida?.fracionado) {
      return quantidade.toFixed(3);
    }
    // Se não permite fracionamento, mostrar como número inteiro
    return quantidade.toString();
  };

  // ✅ NOVO: Função para iniciar edição de quantidade no carrinho
  const iniciarEdicaoQuantidade = (itemId: string, quantidadeAtual: number, unidadeMedida?: any) => {
    setItemEditandoQuantidade(itemId);
    // Formatar a quantidade inicial baseada na unidade de medida
    const quantidadeFormatada = formatarQuantidade(quantidadeAtual, unidadeMedida);
    setQuantidadeEditando(quantidadeFormatada);
  };

  // ✅ NOVO: Função para finalizar edição de quantidade no carrinho
  const finalizarEdicaoQuantidade = (itemId: string, unidadeMedida?: any) => {
    if (quantidadeEditando.trim() === '') {
      // Se campo vazio, cancelar edição
      setItemEditandoQuantidade(null);
      setQuantidadeEditando('');
      return;
    }

    // Converter vírgula para ponto para processamento
    const valorLimpo = quantidadeEditando.replace(',', '.');

    if (!isNaN(parseFloat(valorLimpo))) {
      let novaQuantidade = parseFloat(valorLimpo);

      // Verificar se a unidade de medida permite fracionamento
      const isFracionado = unidadeMedida?.fracionado || false;

      if (isFracionado) {
        // Para produtos fracionados, limitar a 3 casas decimais, mínimo 0.1
        novaQuantidade = Math.max(0.1, Math.round(novaQuantidade * 1000) / 1000);
      } else {
        // Para produtos inteiros, arredondar para inteiro, mínimo 1
        novaQuantidade = Math.max(1, Math.floor(novaQuantidade));
      }

      // Atualizar a quantidade do item
      alterarQuantidade(itemId, novaQuantidade);
    }

    // Limpar estados de edição
    setItemEditandoQuantidade(null);
    setQuantidadeEditando('');
  };

  // ✅ NOVO: Função para cancelar edição de quantidade
  const cancelarEdicaoQuantidade = () => {
    setItemEditandoQuantidade(null);
    setQuantidadeEditando('');
  };

  // ✅ NOVA FUNÇÃO: Calcular preço com desconto por quantidade aplicado sobre o preço promocional
  const calcularPrecoComDescontoQuantidade = (produto: Produto, quantidade: number) => {
    // 1. Primeiro aplicar promoção (se houver e não estiver vencida)
    let precoBase = calcularPrecoFinal(produto);

    // 2. Depois aplicar desconto por quantidade sobre o preço promocional
    if (produto.desconto_quantidade &&
        produto.quantidade_minima &&
        quantidade >= produto.quantidade_minima) {

      if (produto.tipo_desconto_quantidade === 'percentual' && produto.percentual_desconto_quantidade) {
        // Aplicar desconto percentual sobre o preço promocional
        precoBase = precoBase * (1 - produto.percentual_desconto_quantidade / 100);
      } else if (produto.tipo_desconto_quantidade === 'valor' && produto.valor_desconto_quantidade) {
        // Aplicar desconto em valor sobre o preço promocional
        precoBase = precoBase - produto.valor_desconto_quantidade;
      }
    }

    return Math.max(precoBase, 0);
  };

  // ✅ FUNÇÃO ATUALIZADA: Usar a nova lógica cumulativa
  const calcularPrecoModalQuantidade = (produto: Produto, quantidade: number) => {
    return calcularPrecoComDescontoQuantidade(produto, quantidade);
  };

  // Função para adicionar produto com vendedor específico
  const adicionarProdutoComVendedor = async (produto: Produto, vendedor: any, quantidadePersonalizada?: number) => {
    // ✅ FLUXO SEQUENCIAL: Esta função só é chamada quando vendedor já foi selecionado
    // Verificar se há quantidade especificada na busca (formato: quantidade*termo)
    let quantidadeParaAdicionar = quantidadePersonalizada || 1;

    if (!quantidadePersonalizada && searchTerm.includes('*')) {
      const [qtdStr] = searchTerm.split('*');
      const qtdParsed = parseInt(qtdStr.trim());
      if (!isNaN(qtdParsed) && qtdParsed > 0) {
        quantidadeParaAdicionar = qtdParsed;
        // Limpar o campo de busca após adicionar
        setSearchTerm('');
      }
    }

    // Verificar se o produto tem opções adicionais
    const temOpcoesAdicionais = await verificarOpcoesAdicionais(produto.id);

    // ✅ CORRIGIDO: Calcular o preço final considerando promoções E desconto por quantidade
    const precoFinal = calcularPrecoModalQuantidade(produto, quantidadeParaAdicionar);

    // Criar o item do carrinho com o vendedor específico
    const novoItem: ItemCarrinho = {
      id: `${produto.id}-${Date.now()}-${Math.random()}`, // ID único
      produto,
      quantidade: quantidadeParaAdicionar,
      subtotal: precoFinal * quantidadeParaAdicionar,
      temOpcoesAdicionais,
      vendedor_id: vendedor?.id,
      vendedor_nome: vendedor?.nome,
      // ✅ NOVO: Salvar qual tabela de preços foi usada neste item
      tabela_preco_id: trabalhaComTabelaPrecos && tabelaPrecoSelecionada !== 'padrao' ? tabelaPrecoSelecionada : null,
      tabela_preco_nome: trabalhaComTabelaPrecos && tabelaPrecoSelecionada !== 'padrao'
        ? tabelasPrecos.find(t => t.id === tabelaPrecoSelecionada)?.nome
        : null
    };

    // Se o produto tem opções adicionais, abrir modal
    if (temOpcoesAdicionais) {
      setItemParaAdicionais(novoItem);
      setShowAdicionaisModal(true);
    } else {
      // Adicionar diretamente ao carrinho
      setCarrinho(prev => [...prev, novoItem]);

      // Tocar som de sucesso se habilitado
      if (pdvConfig?.som_adicionar_produto) {
        playSuccessSound();
      }

      // Limpar busca se foi usado
      if (searchTerm && !searchTerm.includes('*')) {
        setSearchTerm('');
      }

      // Salvar estado do PDV
      savePDVState();
    }
  };

  const confirmarRemocao = (itemId: string) => {
    setItemParaRemover(itemId);
    setShowConfirmModal(true);
  };

  const cancelarRemocao = () => {
    setShowConfirmModal(false);
    setItemParaRemover(null);
  };

  // ✅ NOVO: Função para remover todas as trocas
  const removerTodasTrocas = () => {
    const novoCarrinho = carrinho.filter(item => !item.isDevolucao);
    setCarrinho(novoCarrinho);
    setShowRemoverTrocasModal(false);

    // ✅ NOVO: Limpar estados de devolução quando todas as trocas forem removidas
    setIsVendaComTroca(false);
    setDevolucaoAplicada(null);

    const quantidadeTrocasRemovidas = carrinho.filter(item => item.isDevolucao).length;
    toast.success(`${quantidadeTrocasRemovidas} troca(s) removida(s) do carrinho`);
  };

  const removerDoCarrinho = (itemId: string) => {
    // Encontrar o item antes de remover para mostrar no toast
    const itemRemovido = carrinho.find(item => item.id === itemId);

    // Atualizar carrinho removendo o item
    const novoCarrinho = carrinho.filter(item => item.id !== itemId);

    // ✅ NOVO: Verificar se há itens de devolução no carrinho
    const temItensDevolucao = novoCarrinho.some(item => item.isDevolucao);

    if (temItensDevolucao) {
      // Calcular o total do carrinho após a remoção
      const totalAposRemocao = novoCarrinho.reduce((total, item) => total + item.subtotal, 0);

      if (totalAposRemocao < 0) {
        // Calcular valores para mostrar no modal
        const valorDevolucoes = novoCarrinho
          .filter(item => item.isDevolucao)
          .reduce((total, item) => total + Math.abs(item.subtotal), 0);

        const valorItensPositivos = novoCarrinho
          .filter(item => !item.isDevolucao)
          .reduce((total, item) => total + item.subtotal, 0);

        // Mostrar modal de aviso
        setValorNegativoInfo({
          itemRemovido: itemRemovido?.produto?.nome || 'Item',
          valorDevolucoes,
          valorItensPositivos,
          totalResultante: totalAposRemocao
        });
        setShowValorNegativoModal(true);

        // Fechar modal de confirmação
        setShowConfirmModal(false);
        setItemParaRemover(null);
        return; // Não remover o item
      }
    }

    // ✅ NOVO: Se é o último item e há venda em andamento, mostrar modal especial
    if (novoCarrinho.length === 0 && vendaEmAndamento) {
      setShowConfirmModal(false);
      setItemParaRemover(null);
      setShowSalvarVendaModal(true); // Mostrar modal especial
      return; // Não remover ainda, deixar o modal decidir
    }

    setCarrinho(novoCarrinho);

    // ✅ NOVO: Verificar se não há mais itens de devolução e limpar estados relacionados
    const temDevolucaoAposRemocao = novoCarrinho.some(item => item.isDevolucao);
    if (!temDevolucaoAposRemocao && (isVendaComTroca || devolucaoAplicada)) {
      setIsVendaComTroca(false);
      setDevolucaoAplicada(null);
    }

    // Se o carrinho ficou vazio, limpar área lateral
    if (novoCarrinho.length === 0) {
      // Limpar área lateral
      setClienteSelecionado(null);
      setPedidosImportados([]);
      setDescontoPrazoSelecionado(null);
      setDescontosCliente({ prazo: [], valor: [] });

      // Limpar dados de finalização
      setCpfCnpjNota('');
      setClienteEncontrado(null);
      setTipoDocumento('cpf');
      setErroValidacao('');
      limparPagamentosParciaisSilencioso();

      // ✅ CORREÇÃO: Fechar tela de finalização para mostrar menu PDV
      setShowFinalizacaoFinal(false);

      // ✅ NOVO: Limpar venda em andamento se não há mais itens
      if (vendaEmAndamento) {
        setVendaEmAndamento(null);
        setIsEditingVenda(false);
      }

      // ✅ CORREÇÃO: Fechar modal de processamento se estiver aberto (caso de erro)
      if (showProcessandoVenda) {
        setShowProcessandoVenda(false);
        setStatusProcessamento('processando');
        setErroProcessamento('');
      }

      // ✅ CORREÇÃO: Limpar observação da venda
      setObservacaoVenda('');

      // ✅ CORREÇÃO: Limpar localStorage para garantir estado limpo
      clearPDVState();
    }

    setShowConfirmModal(false);
    setItemParaRemover(null);

    // Exibir toast de confirmação
    if (itemRemovido) {
      toast.success(`${itemRemovido.produto.nome} removido com sucesso!`);
    }
  };

  const alterarQuantidade = (itemId: string, novaQuantidade: number) => {
    if (novaQuantidade <= 0) {
      confirmarRemocao(itemId);
      return;
    }

    setCarrinho(prev =>
      prev.map(item => {
        if (item.id === itemId) {
          // ✅ CORRIGIDO: Usar o preço com desconto aplicado pelo usuário, ou recalcular considerando promoções E desconto por quantidade
          const precoUnitario = item.desconto ? item.desconto.precoComDesconto : calcularPrecoModalQuantidade(item.produto, novaQuantidade);
          return {
            ...item,
            quantidade: novaQuantidade,
            subtotal: novaQuantidade * precoUnitario
          };
        }
        return item;
      })
    );
  };

  // Funções para gerenciar desconto
  const abrirModalDesconto = (itemId: string) => {
    setItemParaDesconto(itemId);
    setTipoDesconto('percentual');
    setValorDesconto('');
    setNovoValor(0);
    setShowDescontoModal(true);
  };

  const calcularNovoValor = (item: ItemCarrinho, tipo: 'percentual' | 'valor', valor: number) => {
    // Usar o preço final do produto (considerando promoções) como base para o desconto
    const precoBase = calcularPrecoFinal(item.produto);

    if (tipo === 'percentual') {
      const desconto = (precoBase * valor) / 100;
      return Math.max(0, precoBase - desconto);
    } else {
      return Math.max(0, precoBase - valor);
    }
  };

  const aplicarDesconto = () => {
    if (!itemParaDesconto || !valorDesconto) return;

    const valor = parseFloat(valorDesconto.replace(',', '.'));
    if (isNaN(valor) || valor < 0) {
      toast.error('Valor de desconto inválido');
      return;
    }

    setCarrinho(prev =>
      prev.map(item => {
        if (item.id === itemParaDesconto) {
          // Usar o preço final do produto (considerando promoções) como base
          const precoBase = calcularPrecoFinal(item.produto);
          const precoComDesconto = calcularNovoValor(item, tipoDesconto, valor);

          if (tipoDesconto === 'percentual' && valor > 100) {
            toast.error('Desconto não pode ser maior que 100%');
            return item;
          }

          if (tipoDesconto === 'valor' && valor > precoBase) {
            toast.error('Desconto não pode ser maior que o preço do produto');
            return item;
          }

          const valorDesconto = precoBase - precoComDesconto;

          return {
            ...item,
            desconto: {
              tipo: tipoDesconto,
              valor,
              valorDesconto,
              precoOriginal: precoBase, // Usar o preço final como "original" para o desconto
              precoComDesconto,
              percentualDesconto: tipoDesconto === 'percentual' ? valor : undefined
            },
            subtotal: item.quantidade * precoComDesconto
          };
        }
        return item;
      })
    );

    setShowDescontoModal(false);
    setItemParaDesconto(null);
    setValorDesconto('');
    toast.success('Desconto aplicado com sucesso!');
  };

  const removerDesconto = (itemId: string) => {
    setCarrinho(prev =>
      prev.map(item => {
        if (item.id === itemId && item.desconto) {
          // ✅ CORRIGIDO: Voltar ao preço considerando promoções E desconto por quantidade
          const precoFinal = calcularPrecoComDescontoQuantidade(item.produto, item.quantidade);
          return {
            ...item,
            desconto: undefined,
            subtotal: item.quantidade * precoFinal
          };
        }
        return item;
      })
    );
    toast.success('Desconto removido com sucesso!');
  };

  // Funções para gerenciar opções adicionais
  const abrirOpcoesAdicionais = (item: ItemCarrinho) => {
    setProdutoParaAdicionais(item.produto);
    setItemCarrinhoParaAdicionais(item.id);
    setShowOpcoesAdicionaisModal(true);
  };

  // Funções para edição de nome do produto
  const iniciarEdicaoNome = (itemId: string, nomeAtual: string) => {
    setItemEditandoNome(itemId);
    setNomeEditando(nomeAtual);
  };

  const finalizarEdicaoNome = (itemId: string) => {
    if (nomeEditando.trim() === '') {
      // Se o nome estiver vazio, cancela a edição
      cancelarEdicaoNome();
      return;
    }

    // Atualizar o nome do produto no carrinho
    setCarrinho(prev => prev.map(item =>
      item.id === itemId
        ? item.vendaSemProduto
          ? { ...item, nome: nomeEditando.trim() }
          : { ...item, produto: { ...item.produto, nome: nomeEditando.trim() } }
        : item
    ));

    // Limpar estados de edição
    setItemEditandoNome(null);
    setNomeEditando('');
  };

  const cancelarEdicaoNome = () => {
    setItemEditandoNome(null);
    setNomeEditando('');
  };

  // Funções para observação adicional
  const abrirModalObservacao = (itemId: string) => {
    const item = carrinho.find(i => i.id === itemId);
    setItemParaObservacao(itemId);
    setObservacaoTexto(item?.observacao || '');
    setShowObservacaoModal(true);
  };

  const salvarObservacao = () => {
    if (!itemParaObservacao) return;

    // Atualizar o item no carrinho com a observação
    setCarrinho(prev => prev.map(item =>
      item.id === itemParaObservacao
        ? { ...item, observacao: observacaoTexto.trim() || undefined }
        : item
    ));

    // Fechar modal e limpar estados
    setShowObservacaoModal(false);
    setItemParaObservacao(null);
    setObservacaoTexto('');

    toast.success('Observação salva com sucesso!');
  };

  const iniciarEdicaoObservacao = (itemId: string, observacaoAtual: string) => {
    setItemEditandoObservacao(itemId);
    setObservacaoEditando(observacaoAtual);
  };

  const finalizarEdicaoObservacao = (itemId: string) => {
    if (observacaoEditando.trim() === '') {
      // Se a observação estiver vazia, remove ela
      setCarrinho(prev => prev.map(item =>
        item.id === itemId
          ? { ...item, observacao: undefined }
          : item
      ));
    } else {
      // Atualizar a observação no carrinho
      setCarrinho(prev => prev.map(item =>
        item.id === itemId
          ? { ...item, observacao: observacaoEditando.trim() }
          : item
      ));
    }

    // Limpar estados de edição
    setItemEditandoObservacao(null);
    setObservacaoEditando('');
  };

  const cancelarEdicaoObservacao = () => {
    setItemEditandoObservacao(null);
    setObservacaoEditando('');
  };

  // ✅ CORREÇÃO: Função para obter dados fiscais do item (SEM FALLBACKS - Lei Fundamental #2)
  const obterDadosFiscaisItem = (item: ItemCarrinho) => {
    if (item.vendaSemProduto) {
      // Para venda sem produto, usar configurações PDV (SEM FALLBACKS)
      return {
        ncm: pdvConfig?.venda_sem_produto_ncm,
        cfop: pdvConfig?.venda_sem_produto_cfop,
        cst: pdvConfig?.venda_sem_produto_cst,
        csosn: pdvConfig?.venda_sem_produto_csosn,
        cest: pdvConfig?.venda_sem_produto_cest,
        margem_st: pdvConfig?.venda_sem_produto_margem_st,
        aliquota_icms: pdvConfig?.venda_sem_produto_aliquota_icms,
        aliquota_pis: pdvConfig?.venda_sem_produto_aliquota_pis,
        aliquota_cofins: pdvConfig?.venda_sem_produto_aliquota_cofins
      };
    } else {
      // Para produtos normais, usar dados reais do produto (SEM FALLBACKS)
      return {
        ncm: item.produto.ncm,
        cfop: item.produto.cfop,
        cst: item.produto.cst_icms,
        csosn: item.produto.csosn_icms, // ✅ CORREÇÃO: Agora vem da consulta corrigida
        cest: item.produto.cest,
        margem_st: item.produto.margem_st,
        aliquota_icms: item.produto.aliquota_icms,
        aliquota_pis: item.produto.aliquota_pis,
        aliquota_cofins: item.produto.aliquota_cofins
      };
    }
  };

  const confirmarOpcoesAdicionais = (itensSelecionados: Array<{
    item: { id: string; nome: string; preco: number; opcao_id: string };
    quantidade: number;
  }>) => {
    if (!itemCarrinhoParaAdicionais) return;

    // Converter para o formato do carrinho
    const adicionaisFormatados = itensSelecionados.map(itemSelecionado => ({
      id: itemSelecionado.item.id,
      nome: itemSelecionado.item.nome,
      preco: itemSelecionado.item.preco,
      quantidade: itemSelecionado.quantidade
    }));

    // Atualizar o item do carrinho com os adicionais
    setCarrinho(prev =>
      prev.map(item => {
        if (item.id === itemCarrinhoParaAdicionais) {
          // ✅ CORREÇÃO: Agregar adicionais iguais ao invés de duplicar
          const adicionaisExistentes = item.adicionais || [];
          const todosAdicionais = [...adicionaisExistentes];

          // Processar cada novo adicional
          adicionaisFormatados.forEach(novoAdicional => {
            // Verificar se já existe um adicional com o mesmo ID
            const adicionalExistenteIndex = todosAdicionais.findIndex(
              existente => existente.id === novoAdicional.id
            );

            if (adicionalExistenteIndex >= 0) {
              // ✅ ADICIONAL JÁ EXISTE: Somar a quantidade
              console.log(`🔄 Agregando adicional existente: ${novoAdicional.nome} (${todosAdicionais[adicionalExistenteIndex].quantidade} + ${novoAdicional.quantidade})`);
              todosAdicionais[adicionalExistenteIndex].quantidade += novoAdicional.quantidade;
            } else {
              // ✅ ADICIONAL NOVO: Adicionar à lista
              console.log(`➕ Adicionando novo adicional: ${novoAdicional.nome} (qty: ${novoAdicional.quantidade})`);
              todosAdicionais.push(novoAdicional);
            }
          });

          // Calcular valor total dos adicionais (existentes + novos)
          const valorAdicionais = todosAdicionais.reduce((total, adicional) =>
            total + (adicional.preco * adicional.quantidade), 0
          );

          // ✅ CORRIGIDO: Calcular novo subtotal considerando promoções E desconto por quantidade
          const precoUnitario = item.desconto ? item.desconto.precoComDesconto : calcularPrecoComDescontoQuantidade(item.produto, item.quantidade);
          const novoSubtotal = (precoUnitario * item.quantidade) + valorAdicionais;

          console.log(`✅ Adicionais atualizados para ${item.produto.nome}:`, todosAdicionais.map(a => `${a.nome}(${a.quantidade})`));

          return {
            ...item,
            adicionais: todosAdicionais,
            subtotal: novoSubtotal
          };
        }
        return item;
      })
    );

    // Mostrar toast de confirmação
    const totalAdicionais = adicionaisFormatados.length;
    if (totalAdicionais > 0) {
      toast.success(`${totalAdicionais} ${totalAdicionais === 1 ? 'adicional selecionado' : 'adicionais selecionados'}!`);
    }

    setShowOpcoesAdicionaisModal(false);
    setProdutoParaAdicionais(null);
    setItemCarrinhoParaAdicionais(null);
  };

  const removerAdicional = (itemId: string, adicionalIndex: number) => {
    setCarrinho(prev =>
      prev.map(item => {
        if (item.id === itemId) {
          const novosAdicionais = item.adicionais?.filter((_, index) => index !== adicionalIndex) || [];

          // Recalcular subtotal sem o adicional removido
          const valorAdicionais = novosAdicionais.reduce((total, adicional) =>
            total + (adicional.preco * adicional.quantidade), 0
          );

          // ✅ CORRIGIDO: Usar preço com desconto ou calcular considerando promoções E desconto por quantidade
          const precoBase = item.desconto ? item.desconto.precoComDesconto : calcularPrecoComDescontoQuantidade(item.produto, item.quantidade);
          const novoSubtotal = (precoBase * item.quantidade) + valorAdicionais;

          return {
            ...item,
            adicionais: novosAdicionais,
            subtotal: novoSubtotal
          };
        }
        return item;
      })
    );

    toast.success('Adicional removido com sucesso!');
  };

  const alterarQuantidadeAdicional = (itemId: string, adicionalIndex: number, novaQuantidade: number) => {
    if (novaQuantidade <= 0) {
      removerAdicional(itemId, adicionalIndex);
      return;
    }

    setCarrinho(prev =>
      prev.map(item => {
        if (item.id === itemId) {
          const novosAdicionais = item.adicionais?.map((adicional, index) =>
            index === adicionalIndex
              ? { ...adicional, quantidade: novaQuantidade }
              : adicional
          ) || [];

          // Recalcular subtotal com nova quantidade
          const valorAdicionais = novosAdicionais.reduce((total, adicional) =>
            total + (adicional.preco * adicional.quantidade), 0
          );

          // ✅ CORRIGIDO: Usar preço com desconto ou calcular considerando promoções E desconto por quantidade
          const precoBase = item.desconto ? item.desconto.precoComDesconto : calcularPrecoComDescontoQuantidade(item.produto, item.quantidade);
          const novoSubtotal = (precoBase * item.quantidade) + valorAdicionais;

          return {
            ...item,
            adicionais: novosAdicionais,
            subtotal: novoSubtotal
          };
        }
        return item;
      })
    );
  };

  const calcularTotal = () => {
    return carrinho.reduce((total, item) => total + item.subtotal, 0);
  };

  // Função para calcular subtotal SEM descontos (preço original)
  const calcularSubtotalSemDescontos = () => {
    return carrinho.reduce((total, item) => {
      const precoOriginal = item.produto.preco * item.quantidade;
      return total + precoOriginal;
    }, 0);
  };

  // Função para calcular total de descontos nos itens
  const calcularDescontoItens = () => {
    const total = carrinho.reduce((totalDesconto, item) => {
      // Calcular o preço original total (sem nenhum desconto)
      const precoOriginalUnitario = item.produto.preco;
      const totalOriginal = precoOriginalUnitario * item.quantidade;

      // O subtotal já considera todos os descontos aplicados
      const totalComDesconto = item.subtotal;

      // A diferença é o desconto total aplicado no item
      const descontoItem = totalOriginal - totalComDesconto;

      return totalDesconto + Math.max(0, descontoItem); // Garantir que não seja negativo
    }, 0);

    // Arredondar para 2 casas decimais para evitar problemas de precisão
    return Math.round(total * 100) / 100;
  };

  // Função para calcular total com desconto aplicado (para uso em pagamentos)
  const calcularTotalComDesconto = () => {
    let subtotal = calcularTotal();

    // Aplicar desconto global (desconto no total) primeiro
    if (descontoGlobal > 0) {
      subtotal = subtotal - descontoGlobal;
    }

    // Aplicar desconto por prazo se selecionado
    if (descontoPrazoSelecionado) {
      const descontoPrazo = descontosCliente.prazo.find(d => d.id === descontoPrazoSelecionado);
      if (descontoPrazo) {
        const valorDescontoPrazo = (subtotal * descontoPrazo.percentual) / 100;
        if (descontoPrazo.tipo === 'desconto') {
          subtotal = subtotal - valorDescontoPrazo;
        } else {
          subtotal = subtotal + valorDescontoPrazo;
        }
      }
    }

    // Aplicar desconto por valor se aplicável
    const descontoValor = calcularDescontoPorValor(subtotal);
    if (!descontoValor) return subtotal;

    return descontoValor.tipo === 'desconto'
      ? subtotal - descontoValor.valor
      : subtotal + descontoValor.valor;
  };

  const formatCurrency = (value: number) => {
    return formatarPreco(value);
  };

  // Função para converter porcentagem em fração
  const converterPorcentagemParaFracao = (porcentagem: number, totalSabores: number) => {
    // Se há apenas 1 sabor, não mostrar fração
    if (totalSabores === 1) {
      return '';
    }

    // Para sabores com porcentagens iguais, usar frações simples
    if (totalSabores === 2 && porcentagem === 50) {
      return '1/2';
    } else if (totalSabores === 3 && porcentagem === 33) {
      return '1/3';
    } else if (totalSabores === 4 && porcentagem === 25) {
      return '1/4';
    } else {
      // Para casos especiais ou porcentagens diferentes, calcular fração aproximada
      const fracao = Math.round(porcentagem / (100 / totalSabores));
      return `${fracao}/${totalSabores}`;
    }
  };

  const formatCurrencyWithoutSymbol = (value: number) => {
    return value.toLocaleString('pt-BR', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    });
  };

  const formatDateTime = (dateInput: Date | string) => {
    // Converter string para Date se necessário
    const date = typeof dateInput === 'string' ? new Date(dateInput) : dateInput;

    // Verificar se é uma data válida
    if (isNaN(date.getTime())) {
      return 'Data inválida';
    }

    const diasSemana = ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sáb'];
    const diaSemana = diasSemana[date.getDay()];

    const dia = date.getDate().toString().padStart(2, '0');
    const mes = (date.getMonth() + 1).toString().padStart(2, '0');
    const ano = date.getFullYear().toString().slice(-2);

    const horas = date.getHours().toString().padStart(2, '0');
    const minutos = date.getMinutes().toString().padStart(2, '0');
    const segundos = date.getSeconds().toString().padStart(2, '0');

    return `${diaSemana}, ${dia}/${mes}/${ano} ${horas}:${minutos}:${segundos}`;
  };

  const formatarEstoque = (quantidade: number, produto: Produto) => {
    if (produto.unidade_medida?.sigla === 'KG') {
      return quantidade.toFixed(3).replace('.', ',');
    }
    return quantidade.toString();
  };

  // ✅ NOVA FUNÇÃO: Verificar se promoção está vencida
  const verificarPromocaoVencida = (produto: any) => {
    if (!produto.promocao_data_habilitada || !produto.promocao_data_fim) {
      return false; // Sem data definida, promoção não vence
    }

    // ✅ CORREÇÃO: Usar split para evitar problemas de fuso horário
    const [ano, mes, dia] = produto.promocao_data_fim.split('-');
    const dataFim = new Date(parseInt(ano), parseInt(mes) - 1, parseInt(dia));

    const hoje = new Date();

    // Zerar as horas para comparar apenas as datas
    hoje.setHours(0, 0, 0, 0);
    dataFim.setHours(23, 59, 59, 999);

    const vencida = hoje > dataFim;



    return vencida;
  };

  // ✅ NOVA FUNÇÃO: Calcular dias restantes da promoção
  const calcularDiasRestantes = (produto: any) => {
    if (!produto.promocao_data_habilitada || !produto.promocao_data_fim) {
      return null;
    }

    // ✅ CORREÇÃO: Usar split para evitar problemas de fuso horário
    const [ano, mes, dia] = produto.promocao_data_fim.split('-');
    const dataFim = new Date(parseInt(ano), parseInt(mes) - 1, parseInt(dia));

    const hoje = new Date();

    // Zerar as horas para comparar apenas as datas
    hoje.setHours(0, 0, 0, 0);
    dataFim.setHours(0, 0, 0, 0);

    const diffTime = dataFim.getTime() - hoje.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    return diffDays;
  };

  // ✅ NOVA FUNÇÃO: Formatar data para exibição
  const formatarDataPromocao = (dataString: string) => {
    if (!dataString) return '';

    // ✅ CORREÇÃO: Usar split para evitar problemas de fuso horário
    const [ano, mes, dia] = dataString.split('-');
    const data = new Date(parseInt(ano), parseInt(mes) - 1, parseInt(dia));

    return data.toLocaleDateString('pt-BR');
  };

  const calcularPrecoFinal = (produto: Produto) => {


    // ✅ VERIFICAR SE PROMOÇÃO ESTÁ VENCIDA
    if (produto.promocao && verificarPromocaoVencida(produto)) {
      return produto.preco; // Retorna preço normal se promoção vencida
    }

    if (!produto.promocao || !produto.valor_desconto) return produto.preco;

    if (produto.tipo_desconto === 'percentual') {
      return produto.preco * (1 - produto.valor_desconto / 100);
    } else {
      return produto.preco - produto.valor_desconto;
    }
  };

  const getFotoPrincipal = (produto: Produto) => {
    if (!produto.produto_fotos || produto.produto_fotos.length === 0) return null;
    const fotoPrincipal = produto.produto_fotos.find(foto => foto.principal);
    return fotoPrincipal || produto.produto_fotos[0];
  };

  // ✅ NOVA FUNÇÃO: Pré-carregar imagens dos produtos
  const preCarregarImagens = async (produtos: Produto[]) => {
    if (preCarregandoImagens) return; // Evitar múltiplas execuções simultâneas

    setPreCarregandoImagens(true);
    const novasImagensCarregadas = new Set(imagensPreCarregadas);

    // Coletar todas as URLs de imagens dos produtos
    const urlsImagens = produtos
      .map(produto => getFotoPrincipal(produto)?.url)
      .filter(url => url && !novasImagensCarregadas.has(url)) as string[];

    if (urlsImagens.length === 0) {
      setPreCarregandoImagens(false);
      return;
    }

    console.log(`🖼️ Pré-carregando ${urlsImagens.length} imagens dos produtos...`);

    // Pré-carregar imagens em lotes para não sobrecarregar
    const LOTE_SIZE = 10;
    for (let i = 0; i < urlsImagens.length; i += LOTE_SIZE) {
      const lote = urlsImagens.slice(i, i + LOTE_SIZE);

      await Promise.allSettled(
        lote.map(url => {
          return new Promise<void>((resolve, reject) => {
            const img = new Image();
            img.onload = () => {
              novasImagensCarregadas.add(url);
              resolve();
            };
            img.onerror = () => {
              console.warn(`❌ Erro ao pré-carregar imagem: ${url}`);
              resolve(); // Continuar mesmo com erro
            };
            img.src = url;
          });
        })
      );

      // Pequena pausa entre lotes para não bloquear a UI
      await new Promise(resolve => setTimeout(resolve, 50));
    }

    setImagensPreCarregadas(novasImagensCarregadas);
    setPreCarregandoImagens(false);
    console.log(`✅ Pré-carregamento concluído! ${novasImagensCarregadas.size} imagens em cache.`);
  };

  const abrirGaleria = (produto: Produto, event: React.MouseEvent) => {
    event.stopPropagation(); // Impede que o produto seja adicionado ao carrinho
    if (produto.produto_fotos && produto.produto_fotos.length > 0) {
      // Encontrar o índice da foto principal
      const fotoPrincipalIndex = produto.produto_fotos.findIndex(foto => foto.principal);
      const indexInicial = fotoPrincipalIndex !== -1 ? fotoPrincipalIndex : 0;

      setProdutoSelecionadoGaleria(produto);
      setFotoAtualIndex(indexInicial);
      setShowGaleriaModal(true);
    }
  };

  const proximaFoto = () => {
    if (produtoSelecionadoGaleria?.produto_fotos) {
      setFotoAtualIndex(prev =>
        prev < produtoSelecionadoGaleria.produto_fotos.length - 1 ? prev + 1 : 0
      );
    }
  };

  const fotoAnterior = () => {
    if (produtoSelecionadoGaleria?.produto_fotos) {
      setFotoAtualIndex(prev =>
        prev > 0 ? prev - 1 : produtoSelecionadoGaleria.produto_fotos.length - 1
      );
    }
  };

  const fecharGaleria = () => {
    setShowGaleriaModal(false);
    setProdutoSelecionadoGaleria(null);
    setFotoAtualIndex(0);
  };

  const confirmarLimparCarrinho = () => {
    if (carrinho.length === 0) {
      return;
    }
    setShowConfirmLimparCarrinho(true);
  };

  const limparCarrinho = () => {
    // Contar itens antes de limpar
    const totalItens = carrinho.reduce((total, item) => total + item.quantidade, 0);
    const totalProdutos = carrinho.length;
    const primeiroProduto = carrinho[0]?.produto.nome; // Salvar antes de limpar

    // Limpar carrinho
    setCarrinho([]);

    // Limpar área lateral
    setClienteSelecionado(null);
    setPedidosImportados([]);
    setDescontoPrazoSelecionado(null);
    setDescontosCliente({ prazo: [], valor: [] });

    // Limpar dados de finalização
    setCpfCnpjNota('');
    setClienteEncontrado(null);
    setTipoDocumento('cpf');
    setErroValidacao('');
    limparPagamentosParciaisSilencioso();

    // ✅ NOVO: Limpar observação da venda
    setObservacaoVenda('');

    // ✅ CORREÇÃO: Fechar tela de finalização para mostrar menu PDV
    setShowFinalizacaoFinal(false);

    // Fechar modal
    setShowLimparCarrinhoModal(false);

    // Exibir toast de confirmação
    if (totalProdutos > 0) {
      if (totalProdutos === 1) {
        toast.success(`${primeiroProduto} removido com sucesso!`);
      } else {
        toast.success(`${totalProdutos} produtos removidos com sucesso! (${totalItens} itens)`);
      }
    }
  };



  // Funções para pagamentos parciais
  const formatCurrencyInput = (value: string) => {
    // Remove tudo que não é número
    const numbers = value.replace(/\D/g, '');

    // Converte para centavos
    const amount = parseFloat(numbers) / 100;

    // Formata como moeda brasileira
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(amount);
  };

  const parseCurrencyToNumber = (value: string): number => {
    return parseFloat(value.replace(/[R$\s.]/g, '').replace(',', '.')) || 0;
  };

  const calcularTotalPago = (): number => {
    return pagamentosParciais.reduce((total, pagamento) => total + pagamento.valor, 0);
  };

  const calcularRestante = (): number => {
    const restante = calcularTotalComDesconto() - calcularTotalPago();
    // Se há troco (restante negativo), considera como 0 (venda quitada)
    return restante < 0 ? 0 : restante;
  };

  const adicionarPagamentoParcial = (formaId: string, formaNome: string, tipo: 'eletronico' | 'dinheiro', parcelasEspecificas?: number) => {
    let valor = parseCurrencyToNumber(valorParcial);
    const totalVenda = calcularTotalComDesconto(); // Usar total com desconto
    const totalPago = calcularTotalPago();
    const restanteReal = totalVenda - totalPago; // Valor real sem limitação

    // Se não há valor digitado, usa o valor restante automaticamente
    if (valor <= 0) {
      valor = restanteReal > 0 ? restanteReal : 0;
      if (valor > 0) {
        toast.info(`Valor automático: ${formatCurrency(valor)}`);
      }
    }

    if (valor <= 0) {
      toast.error('Não há valor restante para pagamento');
      return;
    }

    // Validação para formas eletrônicas
    if (tipo === 'eletronico' && valor > restanteReal) {
      toast.error('O valor parcial não pode ultrapassar o valor restante para formas eletrônicas');
      return;
    }

    // Para dinheiro, pode ultrapassar (gera troco)
    if (tipo === 'dinheiro' && valor > restanteReal) {
      const troco = valor - restanteReal;
      setTrocoCalculado(troco);
      toast.success(`Troco: ${formatCurrency(troco)}`);
    } else {
      setTrocoCalculado(0);
    }

    // Buscar informações da forma de pagamento
    const forma = formasPagamento.find(f => f.id === formaId);

    // Verificar se já existe um pagamento com a mesma forma
    const pagamentoExistente = pagamentosParciais.find(p => p.forma === formaId);

    if (pagamentoExistente) {
      // Agrupar: somar o valor ao pagamento existente e recalcular parcelas
      setPagamentosParciais(prev =>
        prev.map(p => {
          if (p.forma === formaId) {
            const novoValor = p.valor + valor;
            const numeroParcelas = forma?.tipo === 'cartao_credito' && parcelasFormaPagamento[formaId] > 1
              ? parcelasFormaPagamento[formaId]
              : 1;
            const novoValorParcela = numeroParcelas > 1 ? novoValor / numeroParcelas : null;

            return {
              ...p,
              valor: novoValor,
              parcelas: numeroParcelas,
              valorParcela: novoValorParcela
            };
          }
          return p;
        })
      );
      toast.success(`${formaNome}: ${formatCurrency(valor)} adicionado (Total: ${formatCurrency(pagamentoExistente.valor + valor)})`);
    } else {
      // Criar novo pagamento
      // ✅ CORREÇÃO: Usar parcelas específicas se fornecidas, senão usar do estado
      const numeroParcelas = parcelasEspecificas ||
        (forma?.tipo === 'cartao_credito' && parcelasFormaPagamento[formaId] > 1
          ? parcelasFormaPagamento[formaId]
          : 1);
      const valorParcela = numeroParcelas > 1 ? valor / numeroParcelas : null;

      const novoPagamento = {
        id: Date.now(),
        forma: formaId,
        valor: valor,
        tipo: tipo,
        parcelas: numeroParcelas,
        valorParcela: valorParcela
      };

      setPagamentosParciais(prev => [...prev, novoPagamento]);
      toast.success(`${formaNome}: ${formatCurrency(valor)} adicionado`);
    }

    setValorParcial('');
  };

  const confirmarRemocaoItem = (id: number) => {
    setItemToRemove(id);
    setShowConfirmRemoveItem(true);
  };

  const removerPagamentoParcial = (id: number) => {
    setPagamentosParciais(prev => prev.filter(p => p.id !== id));
    setTrocoCalculado(0);
    setShowConfirmRemoveItem(false);
    setItemToRemove(null);
    toast.success('Pagamento removido');
  };

  const confirmarLimparTodos = () => {
    setShowConfirmRemoveAll(true);
  };

  const limparPagamentosParciais = () => {
    setPagamentosParciais([]);
    setTrocoCalculado(0);
    setValorParcial('');
    setShowConfirmRemoveAll(false);
    toast.success('Todos os pagamentos removidos');
  };

  // Versão silenciosa para usar na finalização da venda
  const limparPagamentosParciaisSilencioso = () => {
    setPagamentosParciais([]);
    setTrocoCalculado(0);
    setValorParcial('');
    setShowConfirmRemoveAll(false);
  };

  // Função para verificar se a venda foi inserida corretamente no banco
  const verificarVendaNoBanco = async (vendaId: string, numeroVenda: string, totalItensEsperados: number, tipoControle: string): Promise<boolean> => {
    try {
      setEtapaProcessamento('Verificando venda no banco de dados...');

      // Aguardar um pouco para garantir que a inserção foi processada
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Verificar se a venda principal existe
      const { data: vendaData, error: vendaError } = await supabase
        .from('pdv')
        .select('id, numero_venda, status_venda, valor_total')
        .eq('id', vendaId)
        .single();

      if (vendaError || !vendaData) {
        console.error('Venda não encontrada no banco:', vendaError);
        return false;
      }

      setEtapaProcessamento('Verificando itens da venda...');

      // Verificar se os itens foram inseridos
      const { data: itensData, error: itensError } = await supabase
        .from('pdv_itens')
        .select('id, produto_id, quantidade')
        .eq('pdv_id', vendaId);

      if (itensError) {
        console.error('Erro ao verificar itens:', itensError);
        return false;
      }

      const totalItensInseridos = itensData?.length || 0;

      // ✅ CORREÇÃO: Calcular total de quantidade esperada vs inserida (não número de linhas)
      const totalQuantidadeEsperada = carrinho.reduce((total, item) => total + item.quantidade, 0);
      const totalQuantidadeInserida = itensData?.reduce((total, item) => total + (item.quantidade || 0), 0) || 0;

      // Verificar se as quantidades batem (mais importante que o número de linhas)
      if (totalQuantidadeInserida !== totalQuantidadeEsperada) {
        // ✅ SILENCIAR: Não mostrar warning - é normal devido ao agrupamento de itens
        // console.warn(`⚠️ Divergência de quantidade. Esperado: ${totalQuantidadeEsperada}, Inserido: ${totalQuantidadeInserida}`);
      }

      // Verificar se pelo menos há itens inseridos
      if (totalItensInseridos === 0) {
        console.error('Nenhum item foi inserido na venda');
        return false;
      }

      // Verificar baixa de estoque se configurado para PDV
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return false;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return false;

      if (tipoControle === 'pdv') {
        setEtapaProcessamento('Verificando baixa de estoque...');

        // Agrupar itens do carrinho por produto para calcular quantidade total esperada
        // ✅ EXCEÇÃO: Filtrar produtos de venda sem produto (código 999999) e itens de devolução
        const produtosAgrupados = carrinho.reduce((acc, item) => {
          // Pular produtos de venda sem produto e devoluções
          if (item.vendaSemProduto || item.produto.codigo === '999999' || item.isDevolucao) {
            // Pulando verificação de estoque para venda sem produto e devoluções
            return acc;
          }

          const produtoId = item.produto.id;
          if (!acc[produtoId]) {
            acc[produtoId] = {
              produto: item.produto,
              quantidadeTotal: 0
            };
          }
          acc[produtoId].quantidadeTotal += item.quantidade;
          return acc;
        }, {} as Record<string, { produto: any; quantidadeTotal: number }>);

        // Verificar cada produto único
        for (const [produtoId, dadosProduto] of Object.entries(produtosAgrupados)) {
          // Verificar se existe movimentação de estoque para este produto desta venda
          // Verificando movimentações de estoque
          const cincoMinutosAtras = new Date(Date.now() - 5 * 60 * 1000).toISOString();

          const { data: movimentacaoEstoque, error: estoqueError } = await supabase
            .from('produto_estoque')
            .select('id, tipo_movimento, quantidade, observacao, data_hora_movimento')
            .eq('produto_id', produtoId)
            .eq('tipo_movimento', 'saida')
            .ilike('observacao', `%Venda PDV #${numeroVenda}%`)
            .gte('data_hora_movimento', cincoMinutosAtras)
            .order('data_hora_movimento', { ascending: false });

          if (estoqueError) {
            console.error('Erro ao verificar movimentação de estoque:', estoqueError);
            return false;
          }

          if (!movimentacaoEstoque || movimentacaoEstoque.length === 0) {
            console.error(`❌ Movimentação de estoque não encontrada para produto ${dadosProduto.produto.nome} (ID: ${produtoId})`);
            console.error(`   Esperado: Saída de ${dadosProduto.quantidadeTotal} unidades com observação "Venda PDV #${numeroVenda}"`);
            return false;
          }

          // Somar todas as movimentações desta venda para este produto (caso haja múltiplas)
          const quantidadeMovimentada = movimentacaoEstoque.reduce((total, mov) => total + parseFloat(mov.quantidade), 0);

          if (quantidadeMovimentada !== dadosProduto.quantidadeTotal) {
            console.error(`❌ Quantidade incorreta na movimentação de estoque para produto ${dadosProduto.produto.nome}`);
            console.error(`   Esperado: ${dadosProduto.quantidadeTotal}, Encontrado: ${quantidadeMovimentada}`);
            console.error(`   Movimentações encontradas:`, movimentacaoEstoque);
            return false;
          }

          // Estoque verificado com sucesso
        }

        // Baixa de estoque verificada
      }

      setEtapaProcessamento('Verificando opções adicionais...');

      // Verificar opções adicionais se existirem
      const itensComAdicionais = carrinho.filter(item => item.adicionais && item.adicionais.length > 0);
      if (itensComAdicionais.length > 0 && itensData && itensData.length > 0) {
        // ✅ CORREÇÃO: Filtrar apenas adicionais não deletados
        const { data: adicionaisData, error: adicionaisError } = await supabase
          .from('pdv_itens_adicionais')
          .select('id, pdv_item_id, nome_adicional')
          .in('pdv_item_id', itensData.map(item => item.id))
          .eq('deletado', false); // ✅ NOVO: Filtrar apenas não deletados

        if (adicionaisError) {
          console.error('Erro ao verificar adicionais:', adicionaisError);
          return false;
        }

        const totalAdicionaisEsperados = itensComAdicionais.reduce((total, item) =>
          total + (item.adicionais?.length || 0), 0
        );

        const totalAdicionaisInseridos = adicionaisData?.length || 0;


        console.log('  - Total adicionais esperados:', totalAdicionaisEsperados);
        console.log('  - Total adicionais inseridos (não deletados):', totalAdicionaisInseridos);
        console.log('  - Adicionais encontrados no banco:', adicionaisData?.map(a => `${a.nome_adicional} (item: ${a.pdv_item_id})`));

        if (totalAdicionaisInseridos !== totalAdicionaisEsperados) {
          console.error(`❌ Número de adicionais incorreto. Esperado: ${totalAdicionaisEsperados}, Inserido: ${totalAdicionaisInseridos}`);

          // ✅ LOGS ADICIONAIS: Para debug detalhado
          console.error('🔍 DETALHES DOS ITENS COM ADICIONAIS:');
          itensComAdicionais.forEach((item, index) => {
            console.error(`  Item ${index + 1}: ${item.produto.nome}`);
            console.error(`    - Adicionais no carrinho: ${item.adicionais?.length || 0}`);
            item.adicionais?.forEach((adicional, addIndex) => {
              console.error(`      ${addIndex + 1}. ${adicional.nome} (qty: ${adicional.quantidade})`);
            });
          });

          return false;
        }

        console.log('✅ Verificação de adicionais concluída com sucesso');
      }

      setEtapaProcessamento('Venda verificada com sucesso!');
      return true;

    } catch (error) {
      console.error('Erro na verificação da venda:', error);
      return false;
    }
  };

  // Funções para CPF/CNPJ e Nota Fiscal Paulista
  const formatCpf = (value: string) => {
    const numbers = value.replace(/\D/g, '').slice(0, 11);
    return numbers.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4');
  };

  const formatCnpj = (value: string) => {
    const numbers = value.replace(/\D/g, '').slice(0, 14);
    return numbers.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, '$1.$2.$3/$4-$5');
  };

  const formatDocumento = (value: string) => {
    if (tipoDocumento === 'cpf') {
      return formatCpf(value);
    } else {
      return formatCnpj(value);
    }
  };

  const validarCpf = (cpf: string): boolean => {
    const numbers = cpf.replace(/\D/g, '');
    if (numbers.length !== 11) return false;

    // Verifica se todos os dígitos são iguais
    if (/^(\d)\1{10}$/.test(numbers)) return false;

    // Validação do primeiro dígito verificador
    let sum = 0;
    for (let i = 0; i < 9; i++) {
      sum += parseInt(numbers[i]) * (10 - i);
    }
    let digit1 = 11 - (sum % 11);
    if (digit1 >= 10) digit1 = 0;

    // Validação do segundo dígito verificador
    sum = 0;
    for (let i = 0; i < 10; i++) {
      sum += parseInt(numbers[i]) * (11 - i);
    }
    let digit2 = 11 - (sum % 11);
    if (digit2 >= 10) digit2 = 0;

    return parseInt(numbers[9]) === digit1 && parseInt(numbers[10]) === digit2;
  };

  const validarCnpj = (cnpj: string): boolean => {
    const numbers = cnpj.replace(/\D/g, '');
    if (numbers.length !== 14) return false;

    // Verifica se todos os dígitos são iguais
    if (/^(\d)\1{13}$/.test(numbers)) return false;

    // Validação do primeiro dígito verificador
    const weights1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
    let sum = 0;
    for (let i = 0; i < 12; i++) {
      sum += parseInt(numbers[i]) * weights1[i];
    }
    let digit1 = sum % 11;
    digit1 = digit1 < 2 ? 0 : 11 - digit1;

    // Validação do segundo dígito verificador
    const weights2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
    sum = 0;
    for (let i = 0; i < 13; i++) {
      sum += parseInt(numbers[i]) * weights2[i];
    }
    let digit2 = sum % 11;
    digit2 = digit2 < 2 ? 0 : 11 - digit2;

    return parseInt(numbers[12]) === digit1 && parseInt(numbers[13]) === digit2;
  };

  const buscarClientePorDocumento = async (documento: string) => {
    const numbers = documento.replace(/\D/g, '');
    if (numbers.length < 11) return;

    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      const { data, error } = await supabase
        .from('clientes')
        .select('id, nome, telefone')
        .eq('empresa_id', usuarioData.empresa_id)
        .or('deletado.is.null,deletado.eq.false') // ✅ FILTRAR: Excluir clientes deletados
        .or(`cpf.eq.${numbers},cnpj.eq.${numbers}`)
        .single();

      if (error && error.code !== 'PGRST116') {
        console.error('Erro ao buscar cliente:', error);
        return;
      }

      if (data) {
        setClienteEncontrado(data);
      } else {
        setClienteEncontrado(null);
      }
    } catch (error) {
      console.error('Erro ao buscar cliente:', error);
    }
  };

  // Funções para cadastro rápido de cliente
  const formatarTelefoneCliente = (value: string, tipo: 'Celular' | 'Fixo') => {
    const numbers = value.replace(/\D/g, '');

    if (tipo === 'Celular') {
      // Formato: (00) 0 0000-0000
      if (numbers.length <= 11) {
        return numbers
          .replace(/(\d{2})(\d)/, '($1) $2')
          .replace(/(\d{4})(\d)/, '$1-$2');
      }
    } else {
      // Formato: (00) 0000-0000
      if (numbers.length <= 10) {
        return numbers
          .replace(/(\d{2})(\d)/, '($1) $2')
          .replace(/(\d{4})(\d)/, '$1-$2');
      }
    }

    return value;
  };

  const handleNovoTelefoneClienteChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formatted = formatarTelefoneCliente(e.target.value, novoTelefoneCliente.tipo);
    setNovoTelefoneCliente({
      ...novoTelefoneCliente,
      numero: formatted
    });
  };

  const adicionarTelefoneCliente = () => {
    if (!novoTelefoneCliente.numero) {
      toast.error('Digite um número de telefone');
      return;
    }

    // Validar o número de telefone
    const numeroLimpo = novoTelefoneCliente.numero.replace(/\D/g, '');
    if ((novoTelefoneCliente.tipo === 'Fixo' && numeroLimpo.length !== 10) ||
        (novoTelefoneCliente.tipo === 'Celular' && numeroLimpo.length !== 11)) {
      toast.error(`Número de ${novoTelefoneCliente.tipo.toLowerCase()} inválido`);
      return;
    }

    // Adicionar à lista de telefones
    setCadastroClienteData({
      ...cadastroClienteData,
      telefones: [...cadastroClienteData.telefones, { ...novoTelefoneCliente }]
    });

    // Limpar o campo para adicionar outro telefone
    setNovoTelefoneCliente({
      numero: '',
      tipo: 'Celular',
      whatsapp: false
    });
  };

  const removerTelefoneCliente = (index: number) => {
    const novosTelefones = cadastroClienteData.telefones.filter((_, i) => i !== index);
    setCadastroClienteData({
      ...cadastroClienteData,
      telefones: novosTelefones
    });
  };

  const buscarCEP = async (cep: string) => {
    const cepLimpo = cep.replace(/\D/g, '');
    if (cepLimpo.length !== 8) return;

    try {
      const response = await fetch(`https://viacep.com.br/ws/${cepLimpo}/json/`);
      const data = await response.json();

      if (!data.erro) {
        const novosDados = {
          ...cadastroClienteData,
          endereco: data.logradouro || '',
          bairro: data.bairro || '',
          cidade: data.localidade || '',
          estado: data.uf || ''
        };

        setCadastroClienteData(novosDados);

        // Validar área de entrega se configuração estiver carregada
        if (taxaEntregaConfig) {
          await validarAreaEntrega(cep, data.bairro || '');
        }
      }
    } catch (error) {
      console.error('Erro ao buscar CEP:', error);
    }
  };

  const formatarCEP = (value: string) => {
    const numbers = value.replace(/\D/g, '');
    if (numbers.length <= 5) {
      return numbers;
    }
    return numbers.replace(/(\d{5})(\d{1,3})/, '$1-$2');
  };

  const handleCEPChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const formatted = formatarCEP(e.target.value);
    setCadastroClienteData({
      ...cadastroClienteData,
      cep: formatted
    });

    // Limpar validação anterior
    setAreaEntregaValida(null);
    setMensagemAreaEntrega('');
    setShowBairrosDropdown(false);

    // Buscar automaticamente quando CEP estiver completo
    const cepLimpo = formatted.replace(/\D/g, '');
    if (cepLimpo.length === 8) {
      await buscarCEP(formatted);
    }
  };

  const salvarNovoCliente = async () => {
    if (!cadastroClienteData.nome.trim()) {
      toast.error('Nome é obrigatório');
      return;
    }

    if (cadastroClienteData.telefones.length === 0) {
      toast.error('Adicione pelo menos um telefone');
      return;
    }

    setSalvandoCliente(true);

    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        toast.error('Usuário não autenticado');
        return;
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        toast.error('Empresa não encontrada');
        return;
      }

      // Preparar dados do cliente
      const clienteData = {
        nome: cadastroClienteData.nome.trim(),
        telefones: cadastroClienteData.telefones,
        telefone: cadastroClienteData.telefones[0]?.numero || '', // Telefone principal para compatibilidade
        cep: cadastroClienteData.cep.replace(/\D/g, '') || null,
        endereco: cadastroClienteData.endereco.trim() || null,
        numero: cadastroClienteData.numero.trim() || null,
        complemento: cadastroClienteData.complemento.trim() || null,
        bairro: bairroSelecionado || cadastroClienteData.bairro.trim() || null,
        cidade: cadastroClienteData.cidade.trim() || null,
        estado: cadastroClienteData.estado.trim() || null,
        origem: 'delivery_local', // ✅ NOVO: Marcar origem como delivery local
        empresa_id: usuarioData.empresa_id
      };

      let clienteResultado;

      if (clienteParaEdicao) {
        // Editar cliente existente
        const { data: clienteEditado, error } = await supabase
          .from('clientes')
          .update(clienteData)
          .eq('id', clienteParaEdicao.id)
          .eq('empresa_id', usuarioData.empresa_id)
          .select()
          .single();

        if (error) {
          console.error('Erro ao editar cliente:', error);
          toast.error('Erro ao editar cliente');
          return;
        }

        clienteResultado = clienteEditado;
        toast.success('Cliente editado com sucesso!');
      } else {
        // Criar novo cliente
        const { data: novoCliente, error } = await supabase
          .from('clientes')
          .insert([clienteData])
          .select()
          .single();

        if (error) {
          console.error('Erro ao salvar cliente:', error);
          toast.error('Erro ao salvar cliente');
          return;
        }

        clienteResultado = novoCliente;
        toast.success('Cliente cadastrado com sucesso!');
      }

      // Selecionar o cliente (novo ou editado)
      setClienteSelecionado(clienteResultado);

      // Recarregar lista de clientes
      await carregarClientes();

      // Fechar modais
      setShowCadastroClienteModal(false);
      setShowClienteModal(false);

      // Limpar formulário
      setClienteParaEdicao(null);
      setCadastroClienteData({
        nome: '',
        telefones: [],
        cep: '',
        endereco: '',
        numero: '',
        complemento: '',
        bairro: '',
        cidade: '',
        estado: ''
      });
      setNovoTelefoneCliente({
        numero: '',
        tipo: 'Celular',
        whatsapp: false
      });

    } catch (error) {
      console.error('Erro ao salvar cliente:', error);
      toast.error('Erro inesperado ao salvar cliente');
    } finally {
      setSalvandoCliente(false);
    }
  };

  const cancelarCadastroCliente = () => {
    setShowCadastroClienteModal(false);
    setClienteParaEdicao(null); // Limpar cliente em edição
    // Limpar formulário
    setCadastroClienteData({
      nome: '',
      telefones: [],
      cep: '',
      endereco: '',
      numero: '',
      complemento: '',
      bairro: '',
      cidade: '',
      estado: ''
    });
    setNovoTelefoneCliente({
      numero: '',
      tipo: 'Celular',
      whatsapp: false
    });
    // Limpar validação de área de entrega
    setAreaEntregaValida(null);
    setMensagemAreaEntrega('');
    setBairroSelecionado('');
    setShowBairrosDropdown(false);
    setSearchBairro('');
    setBairrosFiltrados([]);
  };

  // Abrir modal para editar cliente
  const editarCliente = (cliente: Cliente) => {
    setClienteParaEdicao(cliente);

    // Preencher formulário com dados do cliente
    setCadastroClienteData({
      nome: cliente.nome || '',
      telefones: cliente.telefones || [],
      cep: cliente.cep || '',
      endereco: cliente.endereco || '',
      numero: cliente.numero || '',
      complemento: cliente.complemento || '',
      bairro: cliente.bairro || '',
      cidade: cliente.cidade || '',
      estado: cliente.estado || ''
    });

    // Se tem bairro e está configurado para validação por bairro, validar
    if (cliente.bairro && taxaEntregaConfig?.tipo === 'bairro') {
      const bairroEncontrado = bairrosDisponiveis.find(
        b => b.bairro.toLowerCase() === cliente.bairro.toLowerCase()
      );
      if (bairroEncontrado) {
        setBairroSelecionado(bairroEncontrado.bairro);
        setAreaEntregaValida(true);
        setMensagemAreaEntrega(`Entrega disponível para ${bairroEncontrado.bairro} - R$ ${bairroEncontrado.valor.toFixed(2)}`);
      }
    }

    setShowCadastroClienteModal(true);
  };

  // Calcular taxa de entrega para um cliente
  const calcularTaxaEntregaCliente = async (cliente: Cliente) => {
    if (!taxaEntregaConfig) return null;

    try {
      if (taxaEntregaConfig.tipo === 'bairro' && cliente.bairro) {
        const bairroEncontrado = bairrosDisponiveis.find(
          b => b.bairro.toLowerCase() === cliente.bairro.toLowerCase()
        );
        return bairroEncontrado ? {
          valor: bairroEncontrado.valor,
          tipo: 'bairro',
          descricao: bairroEncontrado.bairro,
          tempo: bairroEncontrado.tempo_entrega
        } : null;
      } else if (taxaEntregaConfig.tipo === 'distancia' && cliente.cep) {
        const { taxaEntregaService } = await import('../../services/taxaEntregaService');

        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) return null;

        const { data: usuarioData } = await supabase
          .from('usuarios')
          .select('empresa_id')
          .eq('id', userData.user.id)
          .single();

        if (!usuarioData?.empresa_id) return null;

        const resultado = await taxaEntregaService.calcularTaxa(usuarioData.empresa_id, cliente.cep);
        return resultado ? {
          valor: resultado.valor,
          tipo: 'distancia',
          descricao: `${resultado.distancia_km.toFixed(1)}km`,
          tempo: null
        } : null;
      }
    } catch (error) {
      console.error('Erro ao calcular taxa de entrega:', error);
    }

    return null;
  };

  // Carregar configuração de taxa de entrega
  const carregarTaxaEntregaConfig = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      // Verificar se cardápio digital está habilitado
      const { data: pdvConfigData } = await supabase
        .from('pdv_config')
        .select('cardapio_digital')
        .eq('empresa_id', usuarioData.empresa_id)
        .single();

      if (!pdvConfigData?.cardapio_digital) {
        setTaxaEntregaConfig(null);
        return;
      }

      // Buscar configuração de taxa de entrega
      const { data: configData } = await supabase
        .from('taxa_entrega_config')
        .select('*')
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('habilitado', true)
        .single();

      if (configData) {
        setTaxaEntregaConfig(configData);

        // Se for tipo bairro, carregar bairros disponíveis
        if (configData.tipo === 'bairro') {
          const { data: bairrosData } = await supabase
            .from('taxa_entrega')
            .select('bairro, valor, tempo_entrega')
            .eq('empresa_id', usuarioData.empresa_id)
            .not('bairro', 'is', null)
            .neq('bairro', '')
            .order('bairro');

          // Filtrar bairros válidos no frontend também (dupla proteção)
          const bairrosValidos = (bairrosData || []).filter(b =>
            b.bairro &&
            b.bairro.trim() !== '' &&
            b.valor !== null &&
            b.valor !== undefined
          );

          setBairrosDisponiveis(bairrosValidos);
          setBairrosFiltrados(bairrosValidos);
        }
      } else {
        setTaxaEntregaConfig(null);
      }
    } catch (error) {
      console.error('Erro ao carregar configuração de taxa de entrega:', error);
      setTaxaEntregaConfig(null);
    }
  };

  // Validar área de entrega
  const validarAreaEntrega = async (cep: string, bairro: string) => {
    if (!taxaEntregaConfig) return;

    setValidandoAreaEntrega(true);
    setAreaEntregaValida(null);
    setMensagemAreaEntrega('');

    try {
      if (taxaEntregaConfig.tipo === 'bairro') {
        // Validação por bairro
        const bairroEncontrado = bairrosDisponiveis.find(
          b => b.bairro.toLowerCase() === bairro.toLowerCase()
        );

        if (bairroEncontrado) {
          setAreaEntregaValida(true);
          setBairroSelecionado(bairroEncontrado.bairro);
          setMensagemAreaEntrega(`Entrega disponível para ${bairroEncontrado.bairro} - R$ ${bairroEncontrado.valor.toFixed(2)}`);
          setShowBairrosDropdown(false);
        } else {
          setAreaEntregaValida(false);
          setMensagemAreaEntrega('Bairro não atendido. Clique no campo bairro para selecionar um bairro disponível.');
          setShowBairrosDropdown(false);
        }
      } else if (taxaEntregaConfig.tipo === 'distancia') {
        // Validação por distância usando o serviço existente
        const { taxaEntregaService } = await import('../../services/taxaEntregaService');

        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) return;

        const { data: usuarioData } = await supabase
          .from('usuarios')
          .select('empresa_id')
          .eq('id', userData.user.id)
          .single();

        if (!usuarioData?.empresa_id) return;

        const resultado = await taxaEntregaService.calcularTaxa(usuarioData.empresa_id, cep);

        if (resultado) {
          setAreaEntregaValida(true);
          setMensagemAreaEntrega(`Entrega disponível - R$ ${resultado.valor.toFixed(2)} (${resultado.distancia_km.toFixed(1)}km)`);
        } else {
          setAreaEntregaValida(false);
          setMensagemAreaEntrega('CEP fora da área de entrega');
        }
      }
    } catch (error) {
      console.error('Erro ao validar área de entrega:', error);
      setAreaEntregaValida(false);
      setMensagemAreaEntrega('Erro ao validar área de entrega');
    } finally {
      setValidandoAreaEntrega(false);
    }
  };

  // Filtrar bairros baseado na pesquisa
  const filtrarBairros = (termo: string) => {
    setSearchBairro(termo);

    // Sempre filtrar bairros válidos primeiro
    const bairrosValidos = bairrosDisponiveis.filter(bairro =>
      bairro.bairro &&
      bairro.bairro.trim() !== '' &&
      bairro.valor !== null &&
      bairro.valor !== undefined
    );

    if (!termo.trim()) {
      setBairrosFiltrados(bairrosValidos);
    } else {
      const filtrados = bairrosValidos.filter(bairro =>
        bairro.bairro.toLowerCase().includes(termo.toLowerCase())
      );
      setBairrosFiltrados(filtrados);
    }
  };

  // Selecionar bairro do dropdown
  const selecionarBairro = (bairro: string) => {
    setBairroSelecionado(bairro);
    setCadastroClienteData({
      ...cadastroClienteData,
      bairro: bairro
    });
    setShowBairrosDropdown(false);
    setSearchBairro('');
    setAreaEntregaValida(true);

    const bairroData = bairrosDisponiveis.find(b => b.bairro === bairro);
    if (bairroData) {
      setMensagemAreaEntrega(`Entrega disponível para ${bairro} - R$ ${bairroData.valor.toFixed(2)}`);
    }
  };

  // ✅ NOVA FUNÇÃO: Adicionar taxa de entrega ao carrinho (igual ao faturamento do cardápio)
  const adicionarTaxaEntregaAoCarrinho = async (valorTaxa: number, descricaoTaxa: string) => {
    try {
      // Verificar se já existe taxa de entrega no carrinho
      const taxaExistente = carrinho.find(item => item.taxaEntregaCardapio === true);
      if (taxaExistente) {
        // Remover taxa existente antes de adicionar nova
        setCarrinho(prev => prev.filter(item => item.taxaEntregaCardapio !== true));
      }

      // Encontrar item de maior valor no carrinho para duplicar configurações fiscais
      let itemMaiorValor = null;
      let maiorValor = 0;

      carrinho.forEach(item => {
        const valorItem = item.quantidade * (item.produto?.preco || 0);
        if (valorItem > maiorValor) {
          maiorValor = valorItem;
          itemMaiorValor = item;
        }
      });

      // Se não há itens no carrinho, buscar um produto padrão para configurações fiscais
      if (!itemMaiorValor) {
        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) return;

        const { data: usuarioData } = await supabase
          .from('usuarios')
          .select('empresa_id')
          .eq('id', userData.user.id)
          .single();

        if (!usuarioData?.empresa_id) return;

        // Buscar primeiro produto ativo da empresa para usar como base fiscal
        const { data: produtoBase } = await supabase
          .from('produtos')
          .select(`
            id, nome, preco, codigo, descricao, grupo_id, unidade_medida_id,
            ncm, cfop, origem_produto, situacao_tributaria, cst_icms, csosn_icms,
            cst_pis, cst_cofins, cst_ipi, aliquota_icms, aliquota_pis, aliquota_cofins,
            aliquota_ipi, valor_ipi, cest, margem_st, peso_liquido,
            unidade_medida:unidade_medida_id (id, sigla, nome)
          `)
          .eq('empresa_id', usuarioData.empresa_id)
          .eq('ativo', true)
          .limit(1)
          .single();

        if (!produtoBase) {
          toast.error('Nenhum produto encontrado para configurar taxa de entrega');
          return;
        }

        itemMaiorValor = {
          produto: produtoBase,
          quantidade: 1,
          subtotal: produtoBase.preco
        };
      }

      if (itemMaiorValor && itemMaiorValor.produto) {
        // Criar produto para taxa de entrega baseado no item de maior valor
        const produtoTaxaEntrega = {
          id: `taxa-entrega-${Date.now()}`,
          nome: 'Taxa de Entrega',
          preco: valorTaxa,
          codigo: itemMaiorValor.produto.codigo,
          descricao: `Taxa de entrega - ${descricaoTaxa}`,
          categoria: itemMaiorValor.produto.categoria,
          ativo: itemMaiorValor.produto.ativo,
          promocao: false,
          grupo_id: itemMaiorValor.produto.grupo_id,
          unidade_medida_id: itemMaiorValor.produto.unidade_medida_id,
          unidade_medida: itemMaiorValor.produto.unidade_medida,
          produto_fotos: [],
          foto_url: null,
          // Manter dados fiscais do produto base
          codigo_barras: itemMaiorValor.produto.codigo_barras,
          ncm: itemMaiorValor.produto.ncm,
          cfop: itemMaiorValor.produto.cfop,
          origem_produto: itemMaiorValor.produto.origem_produto,
          situacao_tributaria: itemMaiorValor.produto.situacao_tributaria,
          cst_icms: itemMaiorValor.produto.cst_icms,
          csosn_icms: itemMaiorValor.produto.csosn_icms,
          cst_pis: itemMaiorValor.produto.cst_pis,
          cst_cofins: itemMaiorValor.produto.cst_cofins,
          cst_ipi: itemMaiorValor.produto.cst_ipi,
          aliquota_icms: itemMaiorValor.produto.aliquota_icms,
          aliquota_pis: itemMaiorValor.produto.aliquota_pis,
          aliquota_cofins: itemMaiorValor.produto.aliquota_cofins,
          aliquota_ipi: itemMaiorValor.produto.aliquota_ipi,
          valor_ipi: itemMaiorValor.produto.valor_ipi,
          cest: itemMaiorValor.produto.cest,
          margem_st: itemMaiorValor.produto.margem_st,
          peso_liquido: itemMaiorValor.produto.peso_liquido,
          tipo_desconto: null,
          valor_desconto: null,
          estoque_inicial: null,
          desconto_quantidade: false,
          quantidade_minima: null,
          tipo_desconto_quantidade: null,
          valor_desconto_quantidade: null,
          percentual_desconto_quantidade: null
        };

        const itemTaxaEntrega: ItemCarrinho = {
          id: `taxa-entrega-${Date.now()}`,
          produto: produtoTaxaEntrega,
          quantidade: 1,
          subtotal: valorTaxa,
          vendaSemProduto: true,
          nome: 'Taxa de Entrega',
          preco: valorTaxa,
          observacao: null,
          sabores: [],
          descricaoSabores: null,
          adicionais: [],
          tabela_preco_id: null,
          tabela_preco_nome: null,
          taxaEntregaCardapio: true // Marcar como taxa de entrega
        };

        // Adicionar ao carrinho
        setCarrinho(prev => [...prev, itemTaxaEntrega]);
      }
    } catch (error) {
      console.error('❌ Erro ao adicionar taxa de entrega ao carrinho:', error);
      toast.error('Erro ao adicionar taxa de entrega');
    }
  };

  // Abrir dropdown de bairros
  const abrirDropdownBairros = () => {
    setShowBairrosDropdown(true);
    setBairrosFiltrados(bairrosDisponiveis);
    setSearchBairro('');
  };

  const handleCpfCnpjChange = (value: string) => {
    const formatted = formatDocumento(value);
    setCpfCnpjNota(formatted);

    const numbers = value.replace(/\D/g, '');
    const expectedLength = tipoDocumento === 'cpf' ? 11 : 14;

    if (numbers.length === expectedLength) {
      const isValid = tipoDocumento === 'cpf' ? validarCpf(formatted) : validarCnpj(formatted);
      if (isValid) {
        buscarClientePorDocumento(formatted);
      } else {
        setClienteEncontrado(null);
      }
    } else {
      setClienteEncontrado(null);
    }
  };

  const handleTipoDocumentoChange = (tipo: 'cpf' | 'cnpj') => {
    setTipoDocumento(tipo);
    setCpfCnpjNota('');
    setClienteEncontrado(null);
    setErroValidacao('');
  };

  const validarDocumentoOnBlur = () => {
    if (!cpfCnpjNota.trim()) {
      setErroValidacao('');
      return;
    }

    const numbers = cpfCnpjNota.replace(/\D/g, '');
    const expectedLength = tipoDocumento === 'cpf' ? 11 : 14;

    if (numbers.length !== expectedLength) {
      setErroValidacao(`${tipoDocumento.toUpperCase()} deve ter ${expectedLength} dígitos`);
      return;
    }

    const isValid = tipoDocumento === 'cpf' ? validarCpf(cpfCnpjNota) : validarCnpj(cpfCnpjNota);

    if (!isValid) {
      setErroValidacao(`${tipoDocumento.toUpperCase()} inválido`);
    } else {
      setErroValidacao('');
    }
  };

  // Função para verificar se o documento é inválido (para bloquear botões NFC-e)
  const isDocumentoInvalido = (): boolean => {
    if (!cpfCnpjNota.trim()) return false; // Se vazio, não é inválido (pode ser consumidor final)

    const numbers = cpfCnpjNota.replace(/\D/g, '');
    const expectedLength = tipoDocumento === 'cpf' ? 11 : 14;

    // Se não tem o tamanho correto, é inválido
    if (numbers.length !== expectedLength) return true;

    // Se tem o tamanho correto, valida o documento
    const isValid = tipoDocumento === 'cpf' ? validarCpf(cpfCnpjNota) : validarCnpj(cpfCnpjNota);
    return !isValid;
  };

  // ✅ NOVO: Funções para o modal de itens
  const handleCpfCnpjModalItensChange = (value: string) => {
    const formatted = formatDocumento(value);
    setCpfCnpjModalItens(formatted);

    const numbers = value.replace(/\D/g, '');
    const expectedLength = tipoDocumentoModalItens === 'cpf' ? 11 : 14;

    if (numbers.length === expectedLength) {
      const isValid = tipoDocumentoModalItens === 'cpf' ? validarCpf(formatted) : validarCnpj(formatted);
      if (!isValid) {
        setErroValidacaoModalItens(`${tipoDocumentoModalItens.toUpperCase()} inválido`);
      } else {
        setErroValidacaoModalItens('');
      }
    } else {
      setErroValidacaoModalItens('');
    }
  };

  const validarDocumentoModalItensOnBlur = () => {
    if (!cpfCnpjModalItens.trim()) {
      setErroValidacaoModalItens('');
      return;
    }

    const numbers = cpfCnpjModalItens.replace(/\D/g, '');
    const expectedLength = tipoDocumentoModalItens === 'cpf' ? 11 : 14;

    if (numbers.length !== expectedLength) {
      setErroValidacaoModalItens(`${tipoDocumentoModalItens.toUpperCase()} deve ter ${expectedLength} dígitos`);
      return;
    }

    const isValid = tipoDocumentoModalItens === 'cpf' ? validarCpf(cpfCnpjModalItens) : validarCnpj(cpfCnpjModalItens);

    if (!isValid) {
      setErroValidacaoModalItens(`${tipoDocumentoModalItens.toUpperCase()} inválido`);
    } else {
      setErroValidacaoModalItens('');
    }
  };

  const isDocumentoModalItensInvalido = (): boolean => {
    if (!cpfCnpjModalItens.trim()) return false;

    const numbers = cpfCnpjModalItens.replace(/\D/g, '');
    const expectedLength = tipoDocumentoModalItens === 'cpf' ? 11 : 14;

    if (numbers.length !== expectedLength) return true;

    const isValid = tipoDocumentoModalItens === 'cpf' ? validarCpf(cpfCnpjModalItens) : validarCnpj(cpfCnpjModalItens);
    return !isValid;
  };

  // ✅ NOVO: Função para emitir NFC-e a partir do modal de itens
  const emitirNfceModalItens = async () => {
    if (!vendaParaExibirItens) return;

    // Validar documento se informado
    if (cpfCnpjModalItens.trim() && isDocumentoModalItensInvalido()) {
      toast.error('CPF/CNPJ inválido');
      return;
    }

    try {
      setEmitindoNfceModalItens(true);

      // Obter dados do usuário atual
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        toast.error('Usuário não autenticado');
        return;
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id, serie_nfce')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        toast.error('Empresa não encontrada');
        return;
      }

      // Buscar dados da empresa
      const { data: empresaData } = await supabase
        .from('empresas')
        .select('*')
        .eq('id', usuarioData.empresa_id)
        .single();

      if (!empresaData) {
        toast.error('Dados da empresa não encontrados');
        return;
      }

      // Buscar configuração NFe
      const { data: nfeConfigData } = await supabase
        .from('nfe_config')
        .select('ambiente')
        .eq('empresa_id', usuarioData.empresa_id)
        .single();

      if (!nfeConfigData) {
        toast.error('Configuração NFe não encontrada');
        return;
      }

      // ✅ Verificar se os itens já foram carregados com dados fiscais
      if (!itensVenda || itensVenda.length === 0) {
        throw new Error('Nenhum item encontrado na venda. Reabra o modal.');
      }

      console.log('✅ Usando itens já carregados com dados fiscais:', itensVenda);

      // ✅ NOVO: Usar número editável do modal ou gerar próximo número
      let proximoNumero: number;
      if (numeroNfceModalItens && parseInt(numeroNfceModalItens) > 0) {
        proximoNumero = parseInt(numeroNfceModalItens);
        console.log('🔢 MODAL: Usando número editado pelo usuário:', proximoNumero);
      } else {
        // Buscar dados do usuário para gerar próximo número
        const { data: userDataLocal } = await supabase.auth.getUser();
        if (!userDataLocal.user) throw new Error('Usuário não autenticado');

        const { data: usuarioDataLocal } = await supabase
          .from('usuarios')
          .select('empresa_id')
          .eq('id', userDataLocal.user.id)
          .single();

        if (!usuarioDataLocal?.empresa_id) throw new Error('Empresa não encontrada');

        proximoNumero = await gerarProximoNumeroNFCe(usuarioDataLocal.empresa_id);
        console.log('🔢 MODAL: Usando próximo número automático:', proximoNumero);
      }

      // Buscar série do usuário
      const { data: usuarioDataSerie } = await supabase
        .from('usuarios')
        .select('serie_nfce')
        .eq('id', userData.user.id)
        .single();

      const serieUsuario = usuarioDataSerie?.serie_nfce || 1;

      // Preparar dados da NFC-e
      const getCodigoUF = (estado: string): number => {
        const codigosUF: { [key: string]: number } = {
          'AC': 12, 'AL': 17, 'AP': 16, 'AM': 13, 'BA': 29, 'CE': 23, 'DF': 53,
          'ES': 32, 'GO': 52, 'MA': 21, 'MT': 51, 'MS': 50, 'MG': 31, 'PA': 15,
          'PB': 25, 'PR': 41, 'PE': 26, 'PI': 22, 'RJ': 33, 'RN': 24, 'RS': 43,
          'RO': 11, 'RR': 14, 'SC': 42, 'SP': 35, 'SE': 28, 'TO': 27
        };
        return codigosUF[estado] || 35;
      };

      const nfceData = {
        empresa: {
          razao_social: empresaData.razao_social,
          cnpj: empresaData.documento,
          nome_fantasia: empresaData.nome_fantasia,
          inscricao_estadual: empresaData.inscricao_estadual,
          regime_tributario: empresaData.regime_tributario || 1,
          uf: empresaData.estado,
          codigo_municipio: parseInt(empresaData.codigo_municipio) || 3524402,
          codigo_uf: getCodigoUF(empresaData.estado),
          endereco: {
            logradouro: empresaData.endereco,
            numero: empresaData.numero,
            bairro: empresaData.bairro,
            cidade: empresaData.cidade,
            cep: empresaData.cep
          },
          csc_homologacao: empresaData.csc_homologacao,
          csc_id_homologacao: empresaData.csc_id_homologacao,
          csc_producao: empresaData.csc_producao,
          csc_id_producao: empresaData.csc_id_producao
        },
        ambiente: nfeConfigData.ambiente,
        identificacao: {
          numero: proximoNumero,
          serie: serieUsuario,
          codigo_numerico: Math.floor(10000000 + Math.random() * 90000000).toString(),
          natureza_operacao: 'Venda de mercadoria'
        },
        destinatario: cpfCnpjModalItens.trim() ? {
          documento: cpfCnpjModalItens.replace(/\D/g, ''),
          nome: 'CONSUMIDOR'
        } : {},
        produtos: itensVenda.map(item => ({
          codigo: item.produto?.codigo || item.codigo_produto,
          descricao: item.nome_produto,
          quantidade: item.quantidade,
          valor_unitario: item.valor_unitario,
          unidade: item.produto?.unidade_medida?.sigla, // ❌ SEM FALLBACK: Deve dar erro se não tiver unidade configurada
          ncm: item.ncm_editavel || item.produto?.ncm || '00000000',
          cfop: item.cfop_editavel || item.cfop || '5102',
          cst_icms: empresaData.regime_tributario === 1 ? undefined : (item.cst_editavel || item.cst_icms || '00'),
          csosn_icms: empresaData.regime_tributario === 1 ? (item.csosn_editavel || item.csosn_icms) : undefined, // ✅ SEM FALLBACK
          codigo_barras: item.produto?.codigo_barras
        }))
      };

      // Emitir NFC-e
      const response = await fetch('/backend/public/emitir-nfce.php', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          empresa_id: usuarioData.empresa_id,
          nfce_data: nfceData
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText);
      }

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || 'Erro na emissão da NFC-e');
      }

      // Atualizar venda no banco
      const updateData: any = {
        modelo_documento: 65,
        numero_documento: proximoNumero,
        serie_documento: serieUsuario, // ✅ CORREÇÃO: Usar serieUsuario ao invés de serieDocumentoReservado
        chave_nfe: result.data.chave,
        protocolo_nfe: result.data.protocolo,
        status_fiscal: 'autorizada',
        erro_fiscal: null,
        data_emissao_nfe: result.data.data_autorizacao,
        tentativa_nfce: true
      };

      // Incluir documento do cliente se informado
      if (cpfCnpjModalItens.trim()) {
        updateData.documento_cliente = cpfCnpjModalItens.replace(/\D/g, '');
        updateData.tipo_documento_cliente = tipoDocumentoModalItens;
      }

      const { error: updateError } = await supabase
        .from('pdv')
        .update(updateData)
        .eq('id', vendaParaExibirItens.id);

      if (updateError) {
        console.error('Erro ao atualizar venda:', updateError);
      }

      toast.success('NFC-e emitida com sucesso!');

      // Fechar modal, limpar campos e recarregar vendas
      fecharModalItens();
      loadVendas();

    } catch (error: any) {
      console.error('Erro ao emitir NFC-e:', error);
      toast.error(`Erro ao emitir NFC-e: ${error.message}`);
    } finally {
      setEmitindoNfceModalItens(false);
    }
  };

  // Função para verificar se pelo menos um botão de NFC-e está ativo
  const temBotaoNfceAtivo = (): boolean => {
    return !pdvConfig?.ocultar_nfce_com_impressao ||
           !pdvConfig?.ocultar_nfce_sem_impressao ||
           !pdvConfig?.ocultar_nfce_producao;
  };

  // Função para lidar com seleção de forma de pagamento
  const handleSelecionarFormaPagamento = (forma: any) => {
    // Verificar se é cartão de crédito com mais de 1 parcela
    if (forma.tipo === 'cartao_credito' && forma.max_parcelas > 1) {
      setFormaPagamentoPendente(forma);
      setParcelasSelecionadas(1);
      setShowModalParcelas(true);
    } else {
      // Para outras formas de pagamento, selecionar diretamente
      setFormaPagamentoSelecionada(forma.id);
    }
  };

  // Função para confirmar seleção de parcelas
  const handleConfirmarParcelas = () => {
    if (formaPagamentoPendente) {
      // Salvar quantidade de parcelas para esta forma de pagamento
      setParcelasFormaPagamento(prev => ({
        ...prev,
        [formaPagamentoPendente.id]: parcelasSelecionadas
      }));

      // Se há callback (modo parcial), executar; senão, selecionar forma (modo à vista)
      if (modalParcelasCallback) {
        // ✅ CORREÇÃO: Executar callback com as parcelas selecionadas
        modalParcelasCallback(parcelasSelecionadas);
        setModalParcelasCallback(null);
      } else {
        setFormaPagamentoSelecionada(formaPagamentoPendente.id);
      }

      setShowModalParcelas(false);
      setFormaPagamentoPendente(null);
    }
  };

  // ✅ NOVA: Função para lidar com seleção de forma de pagamento no modo parcial
  const handleSelecionarFormaPagamentoParcial = (forma: any) => {
    // Verificar se é cartão de crédito com mais de 1 parcela
    if (forma.tipo === 'cartao_credito' && forma.max_parcelas > 1) {
      setFormaPagamentoPendente(forma);
      setParcelasSelecionadas(1);
      setShowModalParcelas(true);
      // ✅ CORREÇÃO: Callback que recebe as parcelas selecionadas
      setModalParcelasCallback(() => (parcelasSelecionadas: number) => {
        adicionarPagamentoParcial(
          forma.id,
          forma.nome,
          forma.nome.toLowerCase() === 'dinheiro' ? 'dinheiro' : 'eletronico',
          parcelasSelecionadas // ✅ Passar parcelas específicas
        );
      });
    } else {
      // Para outras formas de pagamento, adicionar diretamente
      adicionarPagamentoParcial(
        forma.id,
        forma.nome,
        forma.nome.toLowerCase() === 'dinheiro' ? 'dinheiro' : 'eletronico'
      );
    }
  };

  // Função para cancelar seleção de parcelas
  const handleCancelarParcelas = () => {
    setShowModalParcelas(false);
    setFormaPagamentoPendente(null);
    setParcelasSelecionadas(1);
  };

  // Função para gerar QR Code PIX conforme padrão BR Code do Banco Central
  const gerarQrCodePix = (valor: number, chave: string, tipoChave: string, nomeRecebedor: string = 'ESTABELECIMENTO') => {
    console.log('🔍 GERANDO PIX BR CODE:', { valor, chave, tipoChave, nomeRecebedor });

    // Formatar chave PIX conforme o tipo - VERSÃO SIMPLIFICADA
    const formatarChave = (chave: string, tipo: string) => {
      switch (tipo) {
        case 'telefone':
          // Para telefone PIX, usar formato internacional E.164: +5511987654321
          // Conforme documentação oficial do Banco Central
          let numeroLimpo = chave.replace(/\D/g, '');

          // Se não tem +55, adicionar
          if (!numeroLimpo.startsWith('55')) {
            numeroLimpo = '55' + numeroLimpo;
          }

          // Formato final: +55 + DDD (2 dígitos) + número (9 dígitos)
          // Exemplo: +5512974060613
          const numeroFormatado = '+' + numeroLimpo;

          console.log('📱 FORMATAÇÃO TELEFONE E.164:', {
            original: chave,
            limpo: numeroLimpo,
            formatado: numeroFormatado,
            tamanho: numeroFormatado.length
          });

          return numeroFormatado;

        case 'email':
          return chave.toLowerCase().trim();
        case 'cpf':
          return chave.replace(/\D/g, '');
        case 'cnpj':
          return chave.replace(/\D/g, '');
        case 'chave_aleatoria':
          return chave.trim();
        default:
          return chave.trim();
      }
    };

    // Função auxiliar para criar campo EMV (ID + Length + Value)
    const criarCampo = (id: string, valor: string) => {
      const tamanho = valor.length.toString().padStart(2, '0');
      return `${id}${tamanho}${valor}`;
    };

    // Função para calcular CRC16 CCITT conforme especificação BR Code
    const calcularCRC16 = (payload: string) => {
      const polynomial = 0x1021;
      let crc = 0xFFFF;

      for (let i = 0; i < payload.length; i++) {
        crc ^= (payload.charCodeAt(i) << 8);
        for (let j = 0; j < 8; j++) {
          if (crc & 0x8000) {
            crc = (crc << 1) ^ polynomial;
          } else {
            crc <<= 1;
          }
          crc &= 0xFFFF;
        }
      }

      return crc.toString(16).toUpperCase().padStart(4, '0');
    };

    const chaveFormatada = formatarChave(chave, tipoChave);
    const valorFormatado = valor.toFixed(2);
    const nomeFormatado = nomeRecebedor.toUpperCase().replace(/[^A-Z0-9\s]/g, '').substring(0, 25);



    // Construir payload PIX conforme padrão BR Code EMV
    let payload = '';

    // 00 - Payload Format Indicator
    payload += criarCampo('00', '01');

    // 01 - Point of Initiation Method
    payload += criarCampo('01', '12');

    // 26 - Merchant Account Information (PIX)
    const gui = 'br.gov.bcb.pix';
    const pixInfo = criarCampo('00', gui) + criarCampo('01', chaveFormatada);
    payload += criarCampo('26', pixInfo);

    // 52 - Merchant Category Code
    payload += criarCampo('52', '0000');

    // 53 - Transaction Currency
    payload += criarCampo('53', '986');

    // 54 - Transaction Amount
    if (valor > 0) {
      payload += criarCampo('54', valorFormatado);
    }

    // 58 - Country Code
    payload += criarCampo('58', 'BR');

    // 59 - Merchant Name
    payload += criarCampo('59', nomeFormatado);

    // 60 - Merchant City
    payload += criarCampo('60', 'SAO PAULO');

    // 62 - Additional Data Field Template
    const txId = Date.now().toString().slice(-10);
    const additionalData = criarCampo('05', txId);
    payload += criarCampo('62', additionalData);

    // 63 - CRC16
    payload += '6304';
    const crc = calcularCRC16(payload);
    payload += crc;

    console.log('✅ PAYLOAD PIX GERADO:', payload);
    console.log('📏 TAMANHO:', payload.length);

    return payload;
  };

  // Função para abrir modal PIX (pagamento à vista)
  const abrirModalPix = () => {
    console.log('🚀 ABRINDO MODAL PIX À VISTA');
    const forma = formasPagamento.find(f => f.id === formaPagamentoSelecionada);

    if (forma && forma.utilizar_chave_pix && forma.chave_pix) {
      const valorTotal = calcularTotalComDesconto();
      const qrCode = gerarQrCodePix(valorTotal, forma.chave_pix, forma.tipo_chave_pix);

      setQrCodePix(qrCode);
      setChavePix(forma.chave_pix);
      setValorPix(valorTotal); // Armazenar valor específico
      setShowModalPix(true);
      console.log('✅ MODAL PIX À VISTA ABERTO:', { valor: valorTotal });
    } else {
      console.log('❌ PIX não configurado à vista:', {
        forma: !!forma,
        utilizar_chave_pix: forma?.utilizar_chave_pix,
        chave_pix: !!forma?.chave_pix
      });
    }
  };

  // Função para abrir modal PIX (pagamento parcial)
  const abrirModalPixParcial = () => {
    console.log('🚀 ABRINDO MODAL PIX PARCIAL');
    console.log('📊 PAGAMENTOS PARCIAIS:', pagamentosParciais);

    // Encontrar o primeiro pagamento PIX nos pagamentos parciais
    const pagamentoPix = pagamentosParciais.find(pagamento => {
      const forma = formasPagamento.find(f => f.id === pagamento.forma);

      return forma && forma.tipo === 'pix' && forma.utilizar_chave_pix && forma.chave_pix;
    });



    if (pagamentoPix) {
      const forma = formasPagamento.find(f => f.id === pagamentoPix.forma);

      if (forma && forma.utilizar_chave_pix && forma.chave_pix) {
        console.log('🎯 GERANDO QR CODE PIX PARCIAL:', {
          valor_pix: pagamentoPix.valor,
          chave: forma.chave_pix,
          tipo_chave: forma.tipo_chave_pix
        });

        // Usar o valor específico do pagamento PIX
        const qrCode = gerarQrCodePix(pagamentoPix.valor, forma.chave_pix, forma.tipo_chave_pix);

        setQrCodePix(qrCode);
        setChavePix(forma.chave_pix);
        setValorPix(pagamentoPix.valor); // Armazenar valor específico do PIX
        setShowModalPix(true);
        console.log('✅ MODAL PIX PARCIAL ABERTO:', {
          valor: pagamentoPix.valor,
          forma: forma.nome,
          chave: forma.chave_pix
        });
      }
    } else {
      console.log('❌ PIX não encontrado nos pagamentos parciais');
    }
  };

  // Função intermediária para verificar PIX antes de finalizar
  const verificarPixEFinalizar = (tipoFinalizacao: string) => {
    // Verificando PIX antes de finalizar

    if (tipoPagamento === 'vista') {
      // Pagamento à vista - verificar forma selecionada
      const forma = formasPagamento.find(f => f.id === formaPagamentoSelecionada);
      // Verificando PIX à vista

      if (forma && forma.tipo === 'pix' && forma.utilizar_chave_pix && forma.chave_pix) {
        // PIX detectado à vista
        setTipoFinalizacaoPendente(tipoFinalizacao);
        abrirModalPix();
      } else {
        // PIX não detectado - finalizando diretamente
        finalizarVendaCompleta(tipoFinalizacao);
      }
    } else if (tipoPagamento === 'parcial') {
      // Pagamento parcial - verificar se há PIX nos pagamentos
      const temPix = pagamentosParciais.some(pagamento => {
        const forma = formasPagamento.find(f => f.id === pagamento.forma);
        return forma && forma.tipo === 'pix' && forma.utilizar_chave_pix && forma.chave_pix;
      });

      if (temPix) {
        setTipoFinalizacaoPendente(tipoFinalizacao);
        abrirModalPixParcial();
      } else {
        console.log('❌ PIX não detectado no parcial - Finalizando diretamente');
        finalizarVendaCompleta(tipoFinalizacao);
      }
    }
  };

  // Função para confirmar recebimento PIX
  const confirmarRecebimentoPix = () => {
    setShowModalPix(false);

    // Continuar com a finalização usando o tipo salvo
    if (tipoFinalizacaoPendente) {
      finalizarVendaCompleta(tipoFinalizacaoPendente);
      setTipoFinalizacaoPendente(null);
    }
  };

  // Função para cancelar PIX
  const cancelarPix = () => {
    console.log('❌ PIX CANCELADO');
    setShowModalPix(false);
    setQrCodePix('');
    setChavePix('');
    setValorPix(0);
    setTipoFinalizacaoPendente(null);
  };

  // Função para verificar se há pagamento com cartão
  const temPagamentoCartao = () => {
    if (tipoPagamento === 'vista' && formaPagamentoSelecionada) {
      const forma = formasPagamento.find(f => f.id === formaPagamentoSelecionada);
      return forma && (forma.tipo === 'cartao_credito' || forma.tipo === 'cartao_debito');
    }

    if (tipoPagamento === 'parcial') {
      return pagamentosParciais.some(p => {
        const forma = formasPagamento.find(f => f.id === p.forma);
        return forma && (forma.tipo === 'cartao_credito' || forma.tipo === 'cartao_debito');
      });
    }

    return false;
  };

  // Função para verificar se deve ocultar botões de finalização simples
  const deveOcultarFinalizacaoSimples = () => {
    return pdvConfig?.forca_venda_fiscal_cartao && temPagamentoCartao();
  };

  // ✅ NOVO: Função para obter o texto do tipo de impressão configurado
  const obterTextoTipoImpressao = (): string => {
    const usarImpressao50mm = pdvConfig?.tipo_impressao_50mm === true && pdvConfig?.tipo_impressao_80mm === false;
    return usarImpressao50mm ? '50mm' : '80mm';
  };

  // Função para gerar número sequencial da venda
  const gerarNumeroVenda = async (empresaId: string): Promise<string> => {
    try {
      const { data, error } = await supabase
        .from('pdv')
        .select('numero_venda')
        .eq('empresa_id', empresaId)
        .not('numero_venda', 'is', null)
        .order('numero_venda', { ascending: false })
        .limit(1);

      if (error && error.code !== 'PGRST116') {
        console.error('❌ Erro ao buscar último número de venda:', error);
        return `PDV-${Date.now()}`;
      }

      let proximoNumero = 1;
      if (data && data.length > 0 && data[0].numero_venda) {
        const ultimoNumero = data[0].numero_venda.replace('PDV-', '');
        proximoNumero = parseInt(ultimoNumero) + 1;
      }

      return `PDV-${proximoNumero.toString().padStart(6, '0')}`;
    } catch (error) {
      console.error('❌ Erro ao gerar número de venda:', error);
      return `PDV-${Date.now()}`;
    }
  };

  // ✅ NOVO: Função para limpar campos do modal de itens
  const limparCamposModalItens = () => {
    setCpfCnpjModalItens('');
    setTipoDocumentoModalItens('cpf');
    setErroValidacaoModalItens('');
    setNumeroNfceModalItens('');
    setEmitindoNfceModalItens(false);
  };

  // ✅ NOVO: Função para fechar modal de itens
  const fecharModalItens = () => {
    setShowItensVendaModal(false);
    limparCamposModalItens();
  };

  // ✅ NOVO: Função para carregar próximo número da NFC-e no modal de itens
  const carregarProximoNumeroNfceModal = async () => {

    try {
      setLoadingProximoNumero(true);

      // Buscar dados do usuário atual
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        return;
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        return;
      }

      const proximoNumero = await gerarProximoNumeroNFCe(usuarioData.empresa_id);
      setNumeroNfceModalItens(proximoNumero.toString());
    } catch (error) {
      console.error('Erro ao carregar próximo número:', error);
      setNumeroNfceModalItens('1'); // Fallback
    } finally {
      setLoadingProximoNumero(false);
    }
  };

  // Função para gerar próximo número de NFC-e (modelo 65)
  const gerarProximoNumeroNFCe = async (empresaId: string): Promise<number> => {
    try {
      if (!empresaId) {
        throw new Error('Empresa ID não fornecido para geração de número NFC-e');
      }

      // ✅ CORREÇÃO: Buscar o último número de NFC-e da empresa (modelo 65) incluindo pendentes

      const { data, error } = await supabase
        .from('pdv')
        .select('numero_documento, status_fiscal')
        .eq('empresa_id', empresaId)
        .eq('modelo_documento', 65) // NFC-e modelo 65
        .not('numero_documento', 'is', null)
        .order('numero_documento', { ascending: false })
        .limit(1);

      if (error) {
        throw new Error(`Falha ao consultar numeração NFC-e: ${error.message}`);
      }
      // Se não encontrou nenhum registro, começar do 1
      let proximoNumero = 1;
      if (data && data.length > 0 && data[0].numero_documento) {
        proximoNumero = data[0].numero_documento + 1;
      }

      return proximoNumero;

    } catch (error) {
      throw error; // ✅ LEI FUNDAMENTAL #2: NUNCA usar fallbacks - propagar erro
    }
  };

  // ✅ NOVA: Função para criar venda em andamento no primeiro item (adaptada do sistema de rascunhos NFe)
  const criarVendaEmAndamento = async (): Promise<boolean> => {
    console.log('🔍 DEBUG criarVendaEmAndamento INICIADO');

    try {
      // Obter dados do usuário
      const { data: userData, error: userError } = await supabase.auth.getUser();
      if (userError) {
        return false;
      }
      if (!userData.user) {
        return false;
      }

      // Obter dados da empresa
      const { data: usuarioData, error: usuarioError } = await supabase
        .from('usuarios')
        .select('empresa_id, serie_nfce')
        .eq('id', userData.user.id)
        .single();

      if (usuarioError) {
        return false;
      }

      if (!usuarioData?.empresa_id) {
        return false;
      }

      // Gerar número da venda
      const numeroVenda = `PDV-${Date.now()}`;

      // Reservar número da NFC-e
      const numeroNfceReservado = await gerarProximoNumeroNFCe(usuarioData.empresa_id);
      const serieUsuario = usuarioData.serie_nfce;

      // Preparar dados da venda em andamento (similar ao rascunho NFe)
      const vendaData = {
        empresa_id: usuarioData.empresa_id,
        usuario_id: userData.user.id,
        numero_venda: numeroVenda,
        status_venda: 'aberta', // ✅ Status para venda em andamento
        data_venda: new Date().toISOString(),
        valor_total: 0, // Será atualizado conforme itens são adicionados
        valor_subtotal: 0,
        valor_desconto: 0,
        valor_desconto_itens: 0,
        valor_desconto_total: 0,
        observacao_venda: observacaoVenda || null, // ✅ NOVO: Incluir observação da venda
        // ✅ NOVO: Incluir informações de nome do cliente, mesa e comanda
        nome_cliente: nomeCliente || null,
        mesa_numero: mesaNumero || null,
        comanda_numero: comandaNumero || null,
        // ✅ Reservar numeração NFC-e desde o início
        numero_documento: numeroNfceReservado,
        serie_documento: serieUsuario,
        modelo_documento: null, // Será definido na finalização (65 para NFC-e)
        status_fiscal: 'nao_fiscal', // Inicial
        tentativa_nfce: false, // Será definido na finalização
        // ✅ NOVO: Incluir ambiente da empresa (homologação/produção)
        ambiente: ambienteNFe, // Usar o ambiente carregado da configuração NFe
        // Campos de auditoria
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      // Inserir venda na tabela pdv

      const { data: vendaInserida, error: vendaError } = await supabase
        .from('pdv')
        .insert(vendaData)
        .select('id, numero_venda, numero_documento, serie_documento')
        .single();

      if (vendaError) {
        throw new Error(`Falha ao inserir venda: ${vendaError.message}`);
      }

      // Atualizar estado da venda em andamento
      const novaVendaEmAndamento = {
        id: vendaInserida.id,
        numero_venda: vendaInserida.numero_venda,
        numero_nfce_reservado: vendaInserida.numero_documento,
        serie_usuario: vendaInserida.serie_documento,
        status_venda: 'aberta'
      };

      setVendaEmAndamento(novaVendaEmAndamento);

      // ✅ CORREÇÃO: Venda NOVA deve ter isEditingVenda = false
      setIsEditingVenda(false);

      console.log('✅ DEBUG criarVendaEmAndamento SUCESSO:', {
        vendaId: novaVendaEmAndamento.id,
        numero: novaVendaEmAndamento.numero_venda
      });

      return true;

    } catch (error) {
      console.error('❌ Erro ao criar venda em andamento:', error);
      return false;
    }
  };

  // ✅ NOVA: Função para salvar item na venda em andamento (adaptada do sistema de rascunhos NFe)
  const salvarItemNaVendaEmAndamento = async (item: ItemCarrinho): Promise<any> => {
    console.log('🔍 DEBUG salvarItemNaVendaEmAndamento INICIADO:', {
      produto: item.produto.nome,
      vendaEmAndamento: !!vendaEmAndamento
    });

    try {
      if (!vendaEmAndamento) {
        console.log('❌ DEBUG: Sem venda em andamento para salvar item:', item.produto.nome);
        return false;
      }

      // Obter dados do usuário
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        return false;
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        return false;
      }

      // ✅ NOVO: Preparar dados completos do item incluindo imagem e dados de promoção
      const itemData = {
        empresa_id: usuarioData.empresa_id,
        usuario_id: userData.user.id,
        pdv_id: vendaEmAndamento.id,
        produto_id: item.vendaSemProduto ? null : item.produto.id,
        codigo_produto: item.vendaSemProduto ? '999999' : item.produto.codigo,
        nome_produto: item.vendaSemProduto ? item.nome : item.produto.nome,
        descricao_produto: item.vendaSemProduto ? item.nome : item.produto.descricao,
        quantidade: item.quantidade,
        valor_unitario: item.vendaSemProduto ? item.preco : item.produto.preco,
        valor_subtotal: item.subtotal, // ✅ Campo correto da tabela
        valor_total_item: item.subtotal,
        vendedor_id: item.vendedor_id || null,
        vendedor_nome: item.vendedor_nome || null,
        // ✅ CORREÇÃO: Campo correto é 'observacao_item' (não 'observacao')
        observacao_item: item.observacao || null,
        // ✅ NOVO: Dados completos do produto para recuperação
        imagem_produto: item.vendaSemProduto ? null : (item.produto.imagem || null),
        promocao_ativa: item.vendaSemProduto ? false : (item.produto.promocao || false),
        preco_promocional: item.vendaSemProduto ? null : (item.produto.preco_promocional || null),
        preco_original: item.vendaSemProduto ? null : (item.produto.preco || null),
        desconto_maximo: item.vendaSemProduto ? null : (item.produto.valor_desconto || null),
        // ✅ NOVO: Salvar fotos do produto como JSON
        produto_fotos_json: item.vendaSemProduto ? null : (item.produto.produto_fotos || null),
        // ✅ Campos básicos obrigatórios
        tem_desconto: false,
        valor_desconto_item: 0,
        valor_desconto_aplicado: 0,
        created_at: new Date().toISOString(),
        // ✅ NOVO: Campos da tabela de preços
        tabela_preco_id: item.tabela_preco_id || null,
        tabela_preco_nome: item.tabela_preco_nome || null,
        // ✅ NOVO: Campos dos sabores
        sabores_json: item.sabores ? JSON.stringify(item.sabores) : null,
        descricao_sabores: item.descricaoSabores || null
      };

      // Inserir item na tabela pdv_itens
      const { data: itemInserido, error: itemError } = await supabase
        .from('pdv_itens')
        .insert(itemData)
        .select('id, nome_produto, quantidade, valor_total_item')
        .single();

      if (itemError) {
        // ✅ NOVO: Mostrar toast com erro específico
        toast.error(`Erro ao salvar item: ${itemError.message}`);
        return false;
      }

      if (!itemInserido) {
        toast.error('Erro: Item não foi salvo no banco de dados');
        return false;
      }

      // ✅ NOVO: Salvar adicionais do item se existirem
      if (item.adicionais && item.adicionais.length > 0) {
        // Converter adicionais do carrinho para o formato esperado pela função utilitária
        const adicionaisFormatados = item.adicionais.map(adicional => ({
          item: {
            id: adicional.id,
            nome: adicional.nome,
            preco: adicional.preco,
            opcao_id: '' // Este campo pode não ser necessário para adicionais do carrinho
          },
          quantidade: adicional.quantidade
        }));

        const sucessoAdicionais = await salvarAdicionaisItem(
          itemInserido.id, // ID do item recém-criado
          adicionaisFormatados, // Adicionais formatados
          usuarioData.empresa_id,
          userData.user.id
        );

        if (!sucessoAdicionais) {
          // Não falhar a operação inteira por causa dos adicionais, mas registrar o erro
          toast.error(`Aviso: Adicionais do item ${itemData.nome_produto} não foram salvos`);
        }
      }

      // ✅ NOVO: Toast de confirmação para debug (removido para não poluir a interface)
      // toast.success(`Item ${itemData.nome_produto} salvo com sucesso!`);
      return itemInserido; // Retornar o item inserido com o ID

    } catch (error) {
      console.error('❌ ERRO em salvarItemNaVendaEmAndamento:', error);
      console.error('❌ Item que falhou:', item.produto.nome);
      console.error('❌ Detalhes do erro:', error);
      toast.error(`Erro ao salvar item ${item.produto.nome}: ${error.message}`);
      return false;
    }
  };

  // ✅ NOVA: Função para sincronizar itens da venda (UPDATE existentes + INSERT novos)
  const sincronizarItensVenda = async (): Promise<boolean> => {
    try {
      if (!vendaEmAndamento) {
        console.error('❌ Nenhuma venda em andamento para sincronizar');
        return false;
      }



      // Obter dados do usuário
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        console.error('❌ Usuário não autenticado');
        return false;
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        console.error('❌ Empresa não encontrada');
        return false;
      }

      // Separar itens existentes (com pdv_item_id) dos novos (sem pdv_item_id)
      const itensExistentes = carrinho.filter(item => item.pdv_item_id);
      const itensNovos = carrinho.filter(item => !item.pdv_item_id);

      console.log('📊 Análise dos itens:', {
        total: carrinho.length,
        existentes: itensExistentes.length,
        novos: itensNovos.length
      });

      // ✅ ATUALIZAR itens existentes (que já foram salvos anteriormente)
      if (itensExistentes.length > 0) {
        console.log('🔄 Atualizando itens existentes...');
        for (const item of itensExistentes) {
          console.log('🔄 Atualizando item existente:', item.produto.nome, 'ID:', item.pdv_item_id);

        const dadosAtualizacao = {
          quantidade: item.quantidade,
          valor_unitario: item.vendaSemProduto ? item.preco : item.produto.preco,
          valor_subtotal: item.subtotal,
          valor_total_item: item.subtotal,
          vendedor_id: item.vendedor_id || null,
          vendedor_nome: item.vendedor_nome || null,
          observacao_item: item.observacao || null,
          // ✅ NOVO: Atualizar campos dos sabores
          sabores_json: item.sabores ? JSON.stringify(item.sabores) : null,
          descricao_sabores: item.descricaoSabores || null,
          tabela_preco_id: item.tabela_preco_id || null,
          tabela_preco_nome: item.tabela_preco_nome || null,
          updated_at: new Date().toISOString()
        };

        const { error: updateError } = await supabase
          .from('pdv_itens')
          .update(dadosAtualizacao)
          .eq('id', item.pdv_item_id)
          .eq('pdv_id', vendaEmAndamento.id);

        if (updateError) {
          console.error('❌ Erro ao atualizar item:', item.produto.nome, updateError);
          toast.error(`Erro ao atualizar item: ${item.produto.nome}`);
          return false;
        }

        // ✅ NOVO: Atualizar adicionais do item se existirem
        if (item.adicionais && item.adicionais.length > 0) {

          // Converter adicionais do carrinho para o formato esperado
          const adicionaisFormatados = item.adicionais.map(adicional => ({
            item: {
              id: adicional.id,
              nome: adicional.nome,
              preco: adicional.preco,
              opcao_id: ''
            },
            quantidade: adicional.quantidade
          }));

          // Importar função de atualização de adicionais
          const { atualizarAdicionaisItem } = await import('../../utils/pdvAdicionaisUtils');

          const sucessoAdicionais = await atualizarAdicionaisItem(
            item.pdv_item_id!, // ID do item existente
            adicionaisFormatados,
            usuarioData.empresa_id,
            userData.user.id
          );

          if (!sucessoAdicionais) {
            console.error('❌ ERRO: Falha ao atualizar adicionais do item:', item.produto.nome);
            toast.error(`Aviso: Adicionais do item ${item.produto.nome} não foram atualizados`);
          } else {
            console.log('✅ SUCESSO: Adicionais atualizados para o item:', item.produto.nome);
          }
        }

          console.log('✅ Item atualizado:', item.produto.nome);
        }
      } else {
        console.log('ℹ️ Nenhum item existente para atualizar');
      }

      // ✅ INSERIR itens novos (que ainda não foram salvos)
      if (itensNovos.length > 0) {
        console.log('➕ Inserindo itens novos...');
        for (const item of itensNovos) {
          console.log('➕ Inserindo item novo:', item.produto.nome);

        const itemSalvo = await salvarItemNaVendaEmAndamento(item);
        if (!itemSalvo) {
          console.error('❌ Erro ao inserir item novo:', item.produto.nome);
          return false;
        }

        // Atualizar o item no carrinho com o ID salvo
        setCarrinho(prev => prev.map(carrinhoItem =>
          carrinhoItem.id === item.id
            ? { ...carrinhoItem, pdv_item_id: itemSalvo.id }
            : carrinhoItem
        ));

          console.log('✅ Item novo inserido:', item.produto.nome);
        }
      } else {
        console.log('ℹ️ Nenhum item novo para inserir');
      }

      console.log('✅ Sincronização de itens concluída com sucesso');
      return true;

    } catch (error) {
      console.error('❌ Erro ao sincronizar itens da venda:', error);
      return false;
    }
  };

  // ✅ NOVA: Função para salvar venda em andamento e limpar PDV
  const salvarVendaEmAndamento = async (): Promise<boolean> => {
    try {
      if (!vendaEmAndamento) {
        console.error('❌ Nenhuma venda em andamento para salvar');
        return false;
      }

      console.log('💾 SALVANDO venda em andamento e sincronizando itens:', vendaEmAndamento.numero_venda);

      // ✅ NOVO: Sincronizar todos os itens do carrinho com a base de dados
      const sucesso = await sincronizarItensVenda();
      if (!sucesso) {
        console.error('❌ Erro ao sincronizar itens da venda');
        toast.error('Erro ao salvar itens da venda');
        return false;
      }

      // ✅ NOVO: Atualizar status da venda para "salva"
      const { error: updateStatusError } = await supabase
        .from('pdv')
        .update({
          status_venda: 'salva',
          updated_at: new Date().toISOString()
        })
        .eq('id', vendaEmAndamento.id);

      if (updateStatusError) {
        console.error('❌ Erro ao atualizar status da venda:', updateStatusError);
        toast.error('Erro ao salvar status da venda');
        return false;
      }

      const numeroVendaSalva = vendaEmAndamento.numero_venda;

      // ✅ NOVO: Verificar se há itens de produção e imprimir cupons
      console.log('🖨️ [SALVAR-VENDA] Verificando itens de produção...');
      console.log('🖨️ [SALVAR-VENDA] Carrinho atual:', carrinho.map(item => ({
        nome: item.produto?.nome || item.nome,
        vendaSemProduto: item.vendaSemProduto,
        produto_id: item.produto?.id
      })));
      console.log('🖨️ [SALVAR-VENDA] Produtos carregados:', produtos.map(p => ({
        id: p.id,
        nome: p.nome,
        producao: p.producao
      })));

      // ✅ TESTE: Verificar especificamente o produto X Salada
      const xSalada = produtos.find(p => p.nome?.includes('Salada'));
      if (xSalada) {
        console.log('🖨️ [SALVAR-VENDA] TESTE - X Salada encontrado:', {
          id: xSalada.id,
          nome: xSalada.nome,
          producao: xSalada.producao,
          tipo_producao: typeof xSalada.producao
        });
      } else {
        console.log('🖨️ [SALVAR-VENDA] TESTE - X Salada NÃO encontrado nos produtos');
      }

      try {
        // Verificar se há itens com produção = true
        const itensComProducao = carrinho.filter(item => {
          if (item.vendaSemProduto) {
            console.log('🖨️ [SALVAR-VENDA] Item ignorado (venda sem produto):', item.nome);
            return false;
          }
          const produto = produtos.find(p => p.id === item.produto.id);
          console.log('🖨️ [SALVAR-VENDA] Verificando item:', {
            nome: item.produto?.nome,
            produto_id: item.produto?.id,
            produto_encontrado: !!produto,
            producao: produto?.producao
          });
          return produto?.producao === true;
        });

        console.log('🖨️ [SALVAR-VENDA] Itens com produção encontrados:', itensComProducao.length);

        if (itensComProducao.length > 0) {
          console.log('🖨️ [SALVAR-VENDA] Encontrados', itensComProducao.length, 'itens de produção');

          // Preparar dados do pedido para impressão
          const pedidoParaImpressao = {
            numero_pedido: numeroVendaSalva,
            nome_cliente: nomeCliente || clienteSelecionado?.nome || 'Cliente não informado',
            telefone_cliente: clienteSelecionado?.telefone || '',
            mesa_numero: mesaNumero || null,
            comanda_numero: comandaNumero || null,
            created_at: new Date().toISOString()
          };

          // Usar configuração de impressão 50mm ou 80mm
          const usarImpressao50mm = pdvConfig?.tipo_impressao_50mm || false;

          console.log('🖨️ [SALVAR-VENDA] Iniciando impressão de cupons de produção...');
          // Imprimir cupons de produção
          await imprimirCuponsProducaoPorGrupo(pedidoParaImpressao, itensComProducao, usarImpressao50mm);

          console.log('🖨️ [SALVAR-VENDA] ✅ Cupons de produção enviados para impressão');
        } else {
          console.log('🖨️ [SALVAR-VENDA] Nenhum item de produção encontrado');
        }
      } catch (errorImpressao) {
        console.error('❌ [SALVAR-VENDA] Erro ao imprimir cupons de produção:', errorImpressao);
        // Não interromper o salvamento por erro de impressão
      }

      // ✅ CORREÇÃO: Limpar PDV após salvar a venda
      console.log('🧹 Limpando PDV após salvar venda:', numeroVendaSalva);

      // Limpar estados da venda em andamento
      setVendaEmAndamento(null);
      setIsEditingVenda(false);

      // Limpar carrinho
      setCarrinho([]);

      // Limpar cliente selecionado
      setClienteSelecionado(null);

      // Limpar vendedor selecionado
      setVendedorSelecionado(null);

      // ✅ NOVO: Limpar TODOS os estados dos modais para nova venda
      setNomeCliente('');
      setComandaNumero('');
      setMesaNumero('');

      // Limpar estados temporários dos modais
      setNomeClienteTemp('');
      setComandaNumeroTemp('');
      setMesaNumeroTemp('');

      // Limpar produtos aguardando modais
      setProdutoAguardandoNomeCliente(null);
      setQuantidadeAguardandoNomeCliente(1);
      setVendaSemProdutoAguardandoNomeCliente(null);
      setProdutoAguardandoComandaMesa(null);
      setQuantidadeAguardandoComandaMesa(1);
      setVendaSemProdutoAguardandoComandaMesa(null);

      // Limpar estados do modal de vendedor
      setProdutoAguardandoVendedor(null);
      setQuantidadeAguardandoVendedor(1);
      setVendaSemProdutoAguardando(null);
      setAguardandoSelecaoVendedor(false);

      // Limpar estados do modal de quantidade
      setProdutoParaQuantidade(null);
      setQuantidadeModal(1);
      setQuantidadeModalInput('1');

      // Limpar pedidos importados
      setPedidosImportados([]);

      // Limpar descontos
      setDescontosCliente({ prazo: [], valor: [] });
      setDescontoPrazoSelecionado(null);
      setDescontoGlobal(0);

      // Resetar tipo de pagamento
      setTipoPagamento('vista');

      // ✅ CORREÇÃO: Resetar para "Dinheiro" como padrão ao invés de null
      const dinheiro = formasPagamento.find(forma =>
        forma.nome?.toLowerCase() === 'dinheiro'
      );
      if (dinheiro) {
        setFormaPagamentoSelecionada(dinheiro.id);
      } else if (formasPagamento.length > 0) {
        setFormaPagamentoSelecionada(formasPagamento[0].id);
      } else {
        setFormaPagamentoSelecionada(null);
      }

      // Limpar pagamentos parciais
      setValorParcial('');
      setPagamentosParciais([]);
      setTrocoCalculado(0);

      // Limpar dados da nota fiscal
      setCpfCnpjNota('');
      setClienteEncontrado(null);
      setTipoDocumento('cpf');
      setErroValidacao('');

      // Limpar observação da venda
      setObservacaoVenda('');

      // Limpar localStorage
      clearPDVState();

      console.log('✅ Venda salva e PDV limpo:', numeroVendaSalva);
      toast.success(`Venda ${numeroVendaSalva} salva com sucesso! PDV limpo para nova venda.`);

      // ✅ NOVO: Atualizar contadores imediatamente após salvar
      console.log('🔄 Atualizando contadores após salvar venda...');
      try {
        await Promise.all([
          carregarVendasMesas(),
          carregarVendasComandas(),
          carregarContadorDelivery(), // ✅ Atualiza contador após salvar
          carregarVendasAbertas()
        ]);
        console.log('✅ Contadores atualizados com sucesso');
      } catch (error) {
        console.error('❌ Erro ao atualizar contadores:', error);
        // Não interromper o fluxo por erro na atualização dos contadores
      }

      return true;

    } catch (error) {
      console.error('❌ Erro ao salvar venda:', error);
      toast.error('Erro ao salvar venda. Tente novamente.');
      return false;
    }
  };

  // ✅ NOVA: Função para salvar delivery (baseada em salvarVendaEmAndamento)
  const salvarDelivery = async (tipoDelivery: 'delivery_com_impressao' | 'delivery_sem_impressao'): Promise<boolean> => {
    try {
      if (!vendaEmAndamento) {
        console.error('❌ Nenhuma venda em andamento para salvar como delivery');
        return false;
      }

      if (!clienteSelecionado && !clienteEncontrado && !(pedidosImportados.length > 0 && pedidosImportados[0]?.cliente)) {
        toast.error('É necessário selecionar um cliente para delivery');
        return false;
      }

      console.log('🚚 SALVANDO delivery:', vendaEmAndamento.numero_venda, 'Tipo:', tipoDelivery);

      // ✅ NOVO: Sincronizar todos os itens do carrinho com a base de dados
      const sucesso = await sincronizarItensVenda();
      if (!sucesso) {
        console.error('❌ Erro ao sincronizar itens do delivery');
        toast.error('Erro ao salvar itens do delivery');
        return false;
      }

      // ✅ CORREÇÃO: Preparar dados completos do cliente para salvar
      const clienteData = clienteSelecionado ||
                         (pedidosImportados.length > 0 ? pedidosImportados[0]?.cliente : null) ||
                         clienteEncontrado;

      // ✅ NOVO: Atualizar status da venda para "salva", marcar como delivery_local E salvar TODOS os dados do cliente
      const updateData: any = {
        status_venda: 'salva',
        delivery_local: true, // ✅ MARCAR COMO DELIVERY LOCAL
        updated_at: new Date().toISOString(),
        // ✅ NOVO: Salvar dados completos do cliente
        nome_cliente: nomeCliente || clienteData?.nome || null,
        cliente_id: clienteData?.id || null,
        observacao_venda: observacaoVenda || null,
        mesa_numero: mesaNumero || null,
        comanda_numero: comandaNumero || null
      };

      // ✅ NOVO: Adicionar dados específicos do cliente se existir
      if (clienteData) {
        // Telefone do cliente
        if (clienteData.telefone) {
          updateData.telefone_cliente = clienteData.telefone;
        } else if (clienteData.telefones && clienteData.telefones.length > 0) {
          updateData.telefone_cliente = clienteData.telefones[0].numero;
        }

        // Documento do cliente (salvar mesmo se for null)
        updateData.documento_cliente = clienteData.documento;
        if (clienteData.documento) {
          // Determinar tipo de documento baseado no tamanho
          const docLimpo = clienteData.documento.replace(/\D/g, '');
          updateData.tipo_documento_cliente = docLimpo.length === 11 ? 'cpf' : 'cnpj';
        } else {
          // Se não tem documento, usar o tipo_documento da tabela clientes
          updateData.tipo_documento_cliente = clienteData.tipo_documento || null;
        }

        // ✅ CORREÇÃO: Endereço do cliente (salvar sempre que disponível, independente do documento)
        if (clienteData.cep) updateData.cep_entrega = clienteData.cep;
        if (clienteData.endereco) updateData.rua_entrega = clienteData.endereco;
        if (clienteData.numero) updateData.numero_entrega = clienteData.numero;
        if (clienteData.complemento) updateData.complemento_entrega = clienteData.complemento;
        if (clienteData.bairro) updateData.bairro_entrega = clienteData.bairro;
        if (clienteData.cidade) updateData.cidade_entrega = clienteData.cidade;
      }

      console.log('🚚 [DELIVERY] Salvando dados completos do cliente:', updateData);

      const { error: updateStatusError } = await supabase
        .from('pdv')
        .update(updateData)
        .eq('id', vendaEmAndamento.id);

      if (updateStatusError) {
        console.error('❌ Erro ao atualizar status do delivery:', updateStatusError);
        toast.error('Erro ao salvar status do delivery');
        return false;
      }

      const numeroDeliverySalvo = vendaEmAndamento.numero_venda;

      // ✅ NOVO: Se for delivery com impressão, imprimir cupom
      if (tipoDelivery === 'delivery_com_impressao') {
        try {
          console.log('🖨️ [DELIVERY] Imprimindo cupom de delivery...');

          // Preparar dados do pedido para impressão
          const pedidoParaImpressao = {
            numero_pedido: numeroDeliverySalvo,
            nome_cliente: nomeCliente || clienteSelecionado?.nome || 'Cliente não informado',
            telefone_cliente: clienteSelecionado?.telefone || '',
            mesa_numero: mesaNumero || null,
            comanda_numero: comandaNumero || null,
            created_at: new Date().toISOString(),
            delivery: true // ✅ MARCAR COMO DELIVERY
          };

          // Usar configuração de impressão 50mm ou 80mm
          const usarImpressao50mm = pdvConfig?.tipo_impressao_50mm || false;

          // Imprimir cupom de delivery
          await imprimirCuponsProducaoPorGrupo(pedidoParaImpressao, carrinho, usarImpressao50mm);

          console.log('🖨️ [DELIVERY] ✅ Cupom de delivery enviado para impressão');
        } catch (errorImpressao) {
          console.error('❌ [DELIVERY] Erro ao imprimir cupom:', errorImpressao);
          // Não interromper o salvamento por erro de impressão
        }
      }

      // ✅ CORREÇÃO: Limpar PDV após salvar o delivery
      console.log('🧹 Limpando PDV após salvar delivery:', numeroDeliverySalvo);

      // Limpar estados da venda em andamento
      setVendaEmAndamento(null);
      setIsEditingVenda(false);

      // Limpar carrinho
      setCarrinho([]);

      // Limpar cliente selecionado
      setClienteSelecionado(null);
      setVendedorSelecionado(null);
      setPedidosImportados([]);
      setDescontoPrazoSelecionado(null);
      setDescontosCliente({ prazo: [], valor: [] });

      // Limpar dados de finalização
      setCpfCnpjNota('');
      setClienteEncontrado(null);
      setTipoDocumento('cpf');
      setErroValidacao('');
      limparPagamentosParciaisSilencioso();

      // Limpar observação da venda
      setObservacaoVenda('');

      // Limpar dados de mesa/comanda
      setMesaNumero('');
      setComandaNumero('');
      setNomeCliente('');

      // Limpar localStorage
      clearPDVState();

      // ✅ CORREÇÃO: Forçar retorno ao menu do PDV
      setShowFinalizacaoFinal(false);
      setShowProcessandoVenda(false);

      console.log('✅ Delivery salvo e PDV limpo:', numeroDeliverySalvo);
      const mensagem = tipoDelivery === 'delivery_com_impressao'
        ? `🚚 Delivery ${numeroDeliverySalvo} salvo e cupom impresso!`
        : `🚚 Delivery ${numeroDeliverySalvo} salvo com sucesso!`;

      toast.success(mensagem);

      // ✅ NOVO: Atualizar contadores imediatamente após salvar
      console.log('🔄 Atualizando contadores após salvar delivery...');
      try {
        await Promise.all([
          carregarVendasMesas(),
          carregarVendasComandas(),
          carregarContadorDelivery(), // ✅ Atualiza contador após recuperar
          carregarVendasAbertas()
        ]);
        console.log('✅ Contadores atualizados com sucesso');
      } catch (error) {
        console.error('❌ Erro ao atualizar contadores:', error);
        // Não interromper o fluxo por erro na atualização dos contadores
      }

      return true;

    } catch (error) {
      console.error('❌ Erro ao salvar delivery:', error);
      toast.error('Erro ao salvar delivery. Tente novamente.');
      return false;
    }
  };

  // ✅ NOVA: Função para deletar venda em andamento completamente
  const deletarVendaEmAndamento = async (): Promise<boolean> => {
    try {
      if (!vendaEmAndamento) {
        console.error('❌ Nenhuma venda em andamento para deletar');
        return false;
      }



      // 1. Deletar itens da venda
      const { error: itensError } = await supabase
        .from('pdv_itens')
        .delete()
        .eq('pdv_id', vendaEmAndamento.id);

      if (itensError) {
        console.error('❌ Erro ao deletar itens da venda:', itensError);
        throw new Error('Erro ao deletar itens da venda');
      }

      // 2. Deletar a venda
      const { error: vendaError } = await supabase
        .from('pdv')
        .delete()
        .eq('id', vendaEmAndamento.id);

      if (vendaError) {
        console.error('❌ Erro ao deletar venda:', vendaError);
        throw new Error('Erro ao deletar venda');
      }

      const numeroVendaDeletada = vendaEmAndamento.numero_venda;

      // 3. Limpar completamente o PDV

      // Limpar estados da venda em andamento
      setVendaEmAndamento(null);
      setIsEditingVenda(false);

      // Limpar carrinho
      setCarrinho([]);

      // Limpar cliente selecionado
      setClienteSelecionado(null);

      // Limpar vendedor selecionado
      setVendedorSelecionado(null);

      // Limpar pedidos importados
      setPedidosImportados([]);

      // Limpar descontos
      setDescontosCliente({ prazo: [], valor: [] });
      setDescontoPrazoSelecionado(null);
      setDescontoGlobal(0);

      // Resetar tipo de pagamento
      setTipoPagamento('vista');

      // ✅ CORREÇÃO: Resetar para "Dinheiro" como padrão ao invés de null
      const dinheiro = formasPagamento.find(forma =>
        forma.nome?.toLowerCase() === 'dinheiro'
      );
      if (dinheiro) {
        setFormaPagamentoSelecionada(dinheiro.id);
      } else if (formasPagamento.length > 0) {
        setFormaPagamentoSelecionada(formasPagamento[0].id);
      } else {
        setFormaPagamentoSelecionada(null);
      }

      // Limpar pagamentos parciais
      setValorParcial('');
      setPagamentosParciais([]);
      setTrocoCalculado(0);

      // Limpar dados da nota fiscal
      setCpfCnpjNota('');
      setClienteEncontrado(null);
      setTipoDocumento('cpf');
      setErroValidacao('');

      // Limpar observação da venda
      setObservacaoVenda('');

      // Limpar localStorage
      clearPDVState();

      toast.success(`Venda ${numeroVendaDeletada} deletada com sucesso! PDV limpo para nova venda.`);

      return true;

    } catch (error) {
      console.error('❌ Erro ao deletar venda:', error);
      toast.error('Erro ao deletar venda. Tente novamente.');
      return false;
    }
  };

  // ✅ NOVA: Função para filtrar vendas abertas
  const filtrarVendasAbertas = (vendas: any[]) => {
    console.log('🔍 DEBUG - Filtros ativos:', {
      filtroNomeCliente,
      filtroMesa,
      filtroComanda,
      filtroDataInicioVendas,
      filtroDataFimVendas,
      totalVendas: vendas.length
    });

    return vendas.filter(venda => {
      // Filtro por nome do cliente
      if (filtroNomeCliente && !venda.nome_cliente?.toLowerCase().includes(filtroNomeCliente.toLowerCase())) {
        return false;
      }

      // Filtro por mesa
      if (filtroMesa && venda.mesa_numero?.toString() !== filtroMesa) {
        return false;
      }

      // Filtro por comanda
      if (filtroComanda && venda.comanda_numero?.toString() !== filtroComanda) {
        return false;
      }

      // Filtro por data início
      if (filtroDataInicioVendas) {
        const dataVenda = new Date(venda.created_at);
        const dataInicio = new Date(filtroDataInicioVendas);
        if (dataVenda < dataInicio) {
          return false;
        }
      }

      // Filtro por data fim
      if (filtroDataFimVendas) {
        const dataVenda = new Date(venda.created_at);
        const dataFim = new Date(filtroDataFimVendas);
        dataFim.setHours(23, 59, 59, 999); // Incluir todo o dia
        if (dataVenda > dataFim) {
          return false;
        }
      }

      return true;
    });
  };

  // ✅ NOVA: Função para filtrar vendas de mesas
  const filtrarVendasMesas = (vendas: any[]) => {
    return vendas.filter(venda => {
      // Filtro por número da mesa
      if (filtroMesaNumero && venda.mesa_numero?.toString() !== filtroMesaNumero) {
        return false;
      }

      // Filtro por nome do cliente
      if (filtroClienteMesa && !venda.nome_cliente?.toLowerCase().includes(filtroClienteMesa.toLowerCase())) {
        return false;
      }

      // Filtro por data início
      if (filtroDataInicioMesas) {
        const dataVenda = new Date(venda.created_at);
        const dataInicio = new Date(filtroDataInicioMesas);
        if (dataVenda < dataInicio) {
          return false;
        }
      }

      // Filtro por data fim
      if (filtroDataFimMesas) {
        const dataVenda = new Date(venda.created_at);
        const dataFim = new Date(filtroDataFimMesas);
        dataFim.setHours(23, 59, 59, 999);
        if (dataVenda > dataFim) {
          return false;
        }
      }

      return true;
    });
  };

  // ✅ NOVA: Função para filtrar vendas de comandas
  const filtrarVendasComandas = (vendas: any[]) => {
    return vendas.filter(venda => {
      // Filtro por número da comanda
      if (filtroComandaNumero && venda.comanda_numero?.toString() !== filtroComandaNumero) {
        return false;
      }

      // Filtro por nome do cliente
      if (filtroClienteComanda && !venda.nome_cliente?.toLowerCase().includes(filtroClienteComanda.toLowerCase())) {
        return false;
      }

      // Filtro por data início
      if (filtroDataInicioComandas) {
        const dataVenda = new Date(venda.created_at);
        const dataInicio = new Date(filtroDataInicioComandas);
        if (dataVenda < dataInicio) {
          return false;
        }
      }

      // Filtro por data fim
      if (filtroDataFimComandas) {
        const dataVenda = new Date(venda.created_at);
        const dataFim = new Date(filtroDataFimComandas);
        dataFim.setHours(23, 59, 59, 999);
        if (dataVenda > dataFim) {
          return false;
        }
      }

      return true;
    });
  };

  // ✅ NOVA: Função para carregar vendas abertas (salvas)
  const carregarVendasAbertas = async (): Promise<void> => {
    try {
      setCarregandoVendasAbertas(true);

      // Obter dados do usuário
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        console.error('❌ Usuário não autenticado');
        return;
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        console.error('❌ Empresa não encontrada');
        return;
      }

      // Buscar vendas abertas da empresa
      const { data: vendas, error } = await supabase
        .from('pdv')
        .select(`
          id,
          numero_venda,
          numero_documento,
          serie_documento,
          valor_total,
          valor_subtotal,
          status_venda,
          created_at,
          updated_at,
          nome_cliente,
          mesa_numero,
          comanda_numero,
          observacao_venda
        `)
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('status_venda', 'salva')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('❌ Erro ao carregar vendas abertas:', error);
        return;
      }

      // Para cada venda, buscar a quantidade de itens
      const vendasComItens = await Promise.all(
        (vendas || []).map(async (venda) => {
          const { data: itens, error: itensError } = await supabase
            .from('pdv_itens')
            .select('id, nome_produto, quantidade, valor_total_item')
            .eq('pdv_id', venda.id);

          if (itensError) {
            console.error('❌ Erro ao carregar itens da venda:', itensError);
            return { ...venda, itens: [], totalItens: 0 };
          }

          // Calcular total real dos itens
          const totalCalculado = (itens || []).reduce((acc, item) => acc + (item.valor_total_item || 0), 0);

          return {
            ...venda,
            itens: itens || [],
            totalItens: (itens || []).reduce((acc, item) => acc + item.quantidade, 0),
            valor_total: totalCalculado // Sobrescrever com total calculado dos itens
          };
        })
      );

      // ✅ DEBUG: Log para verificar dados das vendas
      console.log('🔍 DEBUG - Vendas carregadas:', vendasComItens.map(v => ({
        numero_venda: v.numero_venda,
        comanda_numero: v.comanda_numero,
        mesa_numero: v.mesa_numero,
        status_venda: v.status_venda
      })));

      // ✅ DEBUG: Log específico para a venda problemática
      const vendaProblematica = vendasComItens.find(v => v.numero_venda === 'PDV-1754424573029');
      if (vendaProblematica) {
        console.log('🎯 DEBUG - Venda PDV-1754424573029 encontrada:', {
          numero_venda: vendaProblematica.numero_venda,
          comanda_numero: vendaProblematica.comanda_numero,
          mesa_numero: vendaProblematica.mesa_numero,
          status_venda: vendaProblematica.status_venda,
          valor_total: vendaProblematica.valor_total,
          totalItens: vendaProblematica.totalItens
        });
      } else {
        console.log('❌ DEBUG - Venda PDV-1754424573029 NÃO encontrada na lista!');
      }

      // ✅ DEBUG: Log para verificar se a venda está sendo adicionada ao estado
      console.log('🔍 DEBUG - Definindo vendasAbertas:', vendasComItens.length, vendasComItens.map(v => v.numero_venda));

      setVendasAbertas(vendasComItens);
      setContadorVendasAbertas(vendasComItens.length);

    } catch (error) {
      console.error('❌ Erro ao carregar vendas abertas:', error);
    } finally {
      setCarregandoVendasAbertas(false);
    }
  };

  // ✅ NOVA: Função para carregar vendas de mesas
  const carregarVendasMesas = async (): Promise<void> => {
    try {
      setCarregandoVendasMesas(true);

      // Obter dados do usuário
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        console.error('❌ Usuário não autenticado');
        return;
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        console.error('❌ Empresa não encontrada');
        return;
      }

      // Buscar vendas abertas com mesa da empresa
      const { data: vendas, error } = await supabase
        .from('pdv')
        .select(`
          id,
          numero_venda,
          numero_documento,
          serie_documento,
          valor_total,
          valor_subtotal,
          created_at,
          updated_at,
          nome_cliente,
          mesa_numero,
          comanda_numero,
          observacao_venda
        `)
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('status_venda', 'salva')
        .not('mesa_numero', 'is', null)
        .order('mesa_numero', { ascending: true });

      if (error) {
        console.error('❌ Erro ao carregar vendas de mesas:', error);
        return;
      }

      // Para cada venda, buscar a quantidade de itens
      const vendasComItens = await Promise.all(
        (vendas || []).map(async (venda) => {
          const { data: itens, error: itensError } = await supabase
            .from('pdv_itens')
            .select('id, nome_produto, quantidade, valor_total_item')
            .eq('pdv_id', venda.id);

          if (itensError) {
            console.error('❌ Erro ao carregar itens da venda:', itensError);
            return { ...venda, itens: [], totalItens: 0 };
          }

          const totalCalculado = (itens || []).reduce((acc, item) => acc + (item.valor_total_item || 0), 0);

          return {
            ...venda,
            itens: itens || [],
            totalItens: (itens || []).reduce((acc, item) => acc + item.quantidade, 0),
            valor_total: totalCalculado
          };
        })
      );

      setVendasMesas(vendasComItens);
      setContadorVendasMesas(vendasComItens.length);

    } catch (error) {
      console.error('❌ Erro ao carregar vendas de mesas:', error);
    } finally {
      setCarregandoVendasMesas(false);
    }
  };

  // ✅ NOVA: Função para carregar apenas contador de delivery local (otimizada)
  const carregarContadorDelivery = async (): Promise<void> => {
    try {
      // Obter dados do usuário
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) return;

      // Buscar apenas a contagem de vendas de delivery local
      const { count, error } = await supabase
        .from('pdv')
        .select('id', { count: 'exact' })
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('status_venda', 'salva')
        .eq('delivery_local', true);

      if (!error && count !== null) {
        setContadorVendasDelivery(count);
      }
    } catch (error) {
      console.error('❌ Erro ao carregar contador de delivery:', error);
    }
  };

  // ✅ NOVA: Função para carregar vendas de delivery local (completa)
  const carregarVendasDelivery = async (): Promise<void> => {
    try {
      console.log('🚚 Iniciando carregamento de vendas de delivery...');
      setCarregandoVendasDelivery(true);

      // Obter dados do usuário
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        console.error('❌ Usuário não autenticado');
        toast.error('Usuário não autenticado');
        return;
      }

      console.log('✅ Usuário autenticado:', userData.user.id);

      const { data: usuarioData, error: usuarioError } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (usuarioError) {
        console.error('❌ Erro ao buscar dados do usuário:', usuarioError);
        toast.error('Erro ao buscar dados do usuário');
        return;
      }

      if (!usuarioData?.empresa_id) {
        console.error('❌ Empresa não encontrada');
        toast.error('Empresa não encontrada');
        return;
      }

      console.log('✅ Empresa encontrada:', usuarioData.empresa_id);

      // Buscar vendas de delivery local (delivery_local = true e status_venda = 'salva')
      console.log('🔍 Buscando vendas de delivery para empresa:', usuarioData.empresa_id);
      const { data: vendas, error } = await supabase
        .from('pdv')
        .select(`
          id,
          numero_venda,
          data_venda,
          created_at,
          nome_cliente,
          telefone_cliente,
          observacao_venda
        `)
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('status_venda', 'salva')
        .eq('delivery_local', true)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('❌ Erro ao carregar vendas de delivery:', error);
        toast.error('Erro ao carregar vendas de delivery');
        return;
      }

      console.log('✅ Vendas de delivery encontradas:', vendas?.length || 0);

      // Para cada venda, buscar a quantidade de itens e calcular total
      const vendasComItens = await Promise.all(
        (vendas || []).map(async (venda) => {
          try {
            console.log('🔍 Buscando itens para venda:', venda.id);
            const { data: itens, error: itensError } = await supabase
              .from('pdv_itens')
              .select('quantidade, valor_total_item, nome_produto')
              .eq('pdv_id', venda.id);

            if (itensError) {
              console.error('❌ Erro ao buscar itens da venda:', venda.id, itensError);
              // Continuar sem os itens em caso de erro
              return {
                ...venda,
                total_itens: 0,
                itens: [],
                valor_total: 0
              };
            }

            console.log('✅ Itens encontrados para venda', venda.id, ':', itens?.length || 0);

            const totalItens = itens?.reduce((acc, item) => acc + item.quantidade, 0) || 0;
            const totalCalculado = itens?.reduce((acc, item) => acc + item.valor_total_item, 0) || 0;

            return {
              ...venda,
              total_itens: totalItens,
              itens: itens || [],
              valor_total: totalCalculado
            };
          } catch (error) {
            console.error('❌ Erro ao processar venda:', venda.id, error);
            return {
              ...venda,
              total_itens: 0,
              itens: [],
              valor_total: 0
            };
          }
        })
      );

      setVendasDelivery(vendasComItens);
      setContadorVendasDelivery(vendasComItens.length);

    } catch (error) {
      console.error('❌ Erro ao carregar vendas de delivery:', error);
    } finally {
      setCarregandoVendasDelivery(false);
    }
  };

  // ✅ NOVA: Função para carregar vendas de comandas
  const carregarVendasComandas = async (): Promise<void> => {
    try {
      setCarregandoVendasComandas(true);

      // Obter dados do usuário
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        console.error('❌ Usuário não autenticado');
        return;
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        console.error('❌ Empresa não encontrada');
        return;
      }

      // Buscar vendas abertas com comanda da empresa
      const { data: vendas, error } = await supabase
        .from('pdv')
        .select(`
          id,
          numero_venda,
          numero_documento,
          serie_documento,
          valor_total,
          valor_subtotal,
          created_at,
          updated_at,
          nome_cliente,
          mesa_numero,
          comanda_numero,
          observacao_venda
        `)
        .eq('empresa_id', usuarioData.empresa_id)
        .eq('status_venda', 'salva')
        .not('comanda_numero', 'is', null)
        .order('comanda_numero', { ascending: true });

      if (error) {
        console.error('❌ Erro ao carregar vendas de comandas:', error);
        return;
      }

      // Para cada venda, buscar a quantidade de itens
      const vendasComItens = await Promise.all(
        (vendas || []).map(async (venda) => {
          const { data: itens, error: itensError } = await supabase
            .from('pdv_itens')
            .select('id, nome_produto, quantidade, valor_total_item')
            .eq('pdv_id', venda.id);

          if (itensError) {
            console.error('❌ Erro ao carregar itens da venda:', itensError);
            return { ...venda, itens: [], totalItens: 0 };
          }

          const totalCalculado = (itens || []).reduce((acc, item) => acc + (item.valor_total_item || 0), 0);

          return {
            ...venda,
            itens: itens || [],
            totalItens: (itens || []).reduce((acc, item) => acc + item.quantidade, 0),
            valor_total: totalCalculado
          };
        })
      );

      setVendasComandas(vendasComItens);
      setContadorVendasComandas(vendasComItens.length);

    } catch (error) {
      console.error('❌ Erro ao carregar vendas de comandas:', error);
    } finally {
      setCarregandoVendasComandas(false);
    }
  };

  // ✅ NOVA: Função para recuperar uma venda salva
  const recuperarVendaSalva = async (vendaId: string): Promise<boolean> => {
    try {
      console.log('🔄 Recuperando venda salva:', vendaId);

      // ✅ NOVO: Verificar se a venda já está aberta por outro terminal
      const { data: vendaStatus, error: statusError } = await supabase
        .from('pdv')
        .select('id, numero_venda, status_venda')
        .eq('id', vendaId)
        .single();

      if (statusError || !vendaStatus) {
        console.error('❌ Erro ao verificar status da venda:', statusError);
        toast.error('Erro ao verificar status da venda');
        return false;
      }

      // ✅ NOVO: Impedir abertura se já está aberta
      if (vendaStatus.status_venda === 'aberta') {
        toast.error(`❌ Venda ${vendaStatus.numero_venda} já está aberta em outro terminal. Aguarde a finalização ou escolha outra venda.`);
        return false;
      }

      // ✅ NOVO: Atualizar status para "aberta" para bloquear outros terminais
      const { error: updateStatusError } = await supabase
        .from('pdv')
        .update({
          status_venda: 'aberta',
          updated_at: new Date().toISOString()
        })
        .eq('id', vendaId);

      if (updateStatusError) {
        console.error('❌ Erro ao atualizar status da venda:', updateStatusError);
        toast.error('Erro ao reabrir venda para edição');
        return false;
      }

      // Buscar dados da venda
      const { data: venda, error: vendaError } = await supabase
        .from('pdv')
        .select('*')
        .eq('id', vendaId)
        .single();

      if (vendaError || !venda) {
        console.error('❌ Erro ao buscar venda:', vendaError);
        toast.error('Erro ao carregar venda');
        return false;
      }

      // ✅ NOVO: Buscar itens da venda com dados completos já salvos
      const { data: itens, error: itensError } = await supabase
        .from('pdv_itens')
        .select(`
          *,
          imagem_produto, promocao_ativa, preco_promocional,
          preco_original, desconto_maximo, produto_fotos_json
        `)
        .eq('pdv_id', vendaId)
        .order('created_at');

      if (itensError) {
        console.error('❌ Erro ao buscar itens da venda:', itensError);
        toast.error('Erro ao carregar itens da venda');
        return false;
      }

      // ✅ NOVO: Converter itens para formato do carrinho usando dados já salvos
      const itensCarrinho = await Promise.all((itens || []).map(async (item) => {
        // Montar produto com dados salvos na pdv_itens
        const produtoCompleto = {
          id: item.produto_id || '',
          nome: item.nome_produto,
          codigo: item.codigo_produto,
          preco: item.valor_unitario,
          descricao: item.descricao_produto || '',
          // ✅ NOVO: Usar dados salvos na pdv_itens
          imagem: item.imagem_produto,
          promocao: item.promocao_ativa || false,
          preco_promocional: item.preco_promocional,
          preco_original: item.preco_original,
          valor_desconto: item.desconto_maximo,
          // ✅ NOVO: Restaurar fotos do produto
          produto_fotos: item.produto_fotos_json || [],
          // Dados fiscais já estão salvos nos campos existentes
          ncm: item.ncm,
          cfop: item.cfop,
          origem: item.origem_produto,
          cst_icms: item.cst_icms,
          csosn_icms: item.csosn_icms,
          cst_pis: item.cst_pis,
          cst_cofins: item.cst_cofins,
          aliquota_icms: item.aliquota_icms,
          aliquota_pis: item.aliquota_pis,
          aliquota_cofins: item.aliquota_cofins,
          cest: item.cest,
          unidade_medida: item.unidade,
          ean: item.ean
        };

        console.log('✅ RECUPERAÇÃO: Produto completo restaurado:', produtoCompleto.nome);

        // ✅ NOVO: Carregar adicionais do item se existirem
        let adicionaisItem = [];
        try {
          const { buscarAdicionaisItem } = await import('../../utils/pdvAdicionaisUtils');
          const adicionaisCarregados = await buscarAdicionaisItem(item.id);

          if (adicionaisCarregados && adicionaisCarregados.length > 0) {
            console.log('✅ RECUPERAÇÃO: Adicionais carregados para o item:', produtoCompleto.nome, adicionaisCarregados.length);

            // Converter para o formato do carrinho
            adicionaisItem = adicionaisCarregados.map(adicional => ({
              id: adicional.item.id,
              nome: adicional.item.nome,
              preco: adicional.item.preco,
              quantidade: adicional.quantidade
            }));
          }
        } catch (error) {
          console.error('❌ Erro ao carregar adicionais do item:', produtoCompleto.nome, error);
          // Não falhar a recuperação por causa dos adicionais
        }

        // ✅ NOVO: Verificar se o produto tem opções adicionais para mostrar o botão +
        let temOpcoesAdicionais = false;
        try {
          if (item.produto_id) { // Só verificar se não for venda sem produto
            temOpcoesAdicionais = await verificarOpcoesAdicionais(item.produto_id);
            console.log('✅ RECUPERAÇÃO: Produto tem opções adicionais:', produtoCompleto.nome, temOpcoesAdicionais);
          }
        } catch (error) {
          console.error('❌ Erro ao verificar opções adicionais do item:', produtoCompleto.nome, error);
          // Não falhar a recuperação por causa da verificação
        }

        return {
          id: `${Date.now()}-${Math.random()}`, // ✅ CORREÇÃO: Gerar novo ID único para evitar conflitos
          produto: produtoCompleto,
          quantidade: item.quantidade,
          subtotal: item.valor_total_item,
          vendaSemProduto: item.codigo_produto === '999999',
          nome: item.codigo_produto === '999999' ? item.nome_produto : undefined,
          preco: item.codigo_produto === '999999' ? item.valor_unitario : undefined,
          vendedor_id: item.vendedor_id,
          vendedor_nome: item.vendedor_nome,
          observacao: item.observacao_item,
          // ✅ CORREÇÃO: Usar a verificação real de opções adicionais
          temOpcoesAdicionais: temOpcoesAdicionais,
          // ✅ NOVO: Incluir adicionais carregados
          adicionais: adicionaisItem,
          // ✅ NOVO: Manter referência ao ID original do banco para futuras atualizações
          pdv_item_id: item.id,
          // ✅ NOVO: Incluir dados da tabela de preços
          tabela_preco_id: item.tabela_preco_id,
          tabela_preco_nome: item.tabela_preco_nome,
          // ✅ NOVO: Incluir sabores recuperados
          sabores: item.sabores_json ? JSON.parse(item.sabores_json) : null,
          descricaoSabores: item.descricao_sabores || null
        };
      }));

      // Restaurar estado da venda em andamento
      setVendaEmAndamento({
        id: venda.id,
        numero_venda: venda.numero_venda,
        numero_nfce_reservado: venda.numero_documento,
        serie_usuario: venda.serie_documento,
        status_venda: 'aberta'
      });
      setIsEditingVenda(true);

      // Restaurar carrinho
      setCarrinho(itensCarrinho);

      // ✅ CORREÇÃO: Restaurar TODOS os dados dos modais
      if (venda.nome_cliente) {
        setNomeCliente(venda.nome_cliente);
        console.log('✅ Nome do cliente restaurado:', venda.nome_cliente);
      }

      if (venda.comanda_numero) {
        setComandaNumero(venda.comanda_numero.toString());
        console.log('✅ Comanda restaurada:', venda.comanda_numero);
      }

      if (venda.mesa_numero) {
        setMesaNumero(venda.mesa_numero.toString());
        console.log('✅ Mesa restaurada:', venda.mesa_numero);
      }

      if (venda.observacao_venda) {
        setObservacaoVenda(venda.observacao_venda);
        console.log('✅ Observação restaurada:', venda.observacao_venda);
      }

      // ✅ NOVO: Restaurar cliente selecionado se existir
      if (venda.cliente_id) {
        try {
          const { data: clienteData } = await supabase
            .from('clientes')
            .select('id, nome, telefone, email')
            .eq('id', venda.cliente_id)
            .single();

          if (clienteData) {
            setClienteSelecionado(clienteData);
            console.log('✅ Cliente selecionado restaurado:', clienteData.nome);
          }
        } catch (error) {
          console.error('❌ Erro ao restaurar cliente selecionado:', error);
        }
      }

      // ✅ NOVO: Restaurar vendedor selecionado se existir
      if (venda.vendedor_id) {
        try {
          const { data: vendedorData } = await supabase
            .from('vendedores')
            .select('id, nome')
            .eq('id', venda.vendedor_id)
            .single();

          if (vendedorData) {
            setVendedorSelecionado(vendedorData);
            console.log('✅ Vendedor selecionado restaurado:', vendedorData.nome);
          }
        } catch (error) {
          console.error('❌ Erro ao restaurar vendedor selecionado:', error);
        }
      }

      // ✅ CORREÇÃO: Log dos dados específicos do delivery local (sem tentar setar estados que não existem)
      if (venda.delivery_local) {
        console.log('🚚 [DELIVERY] Dados do delivery local restaurados:');

        if (venda.telefone_cliente) {
          console.log('✅ Telefone do cliente:', venda.telefone_cliente);
        }

        if (venda.documento_cliente) {
          console.log('✅ Documento do cliente:', venda.documento_cliente);
        }

        if (venda.tipo_documento_cliente) {
          console.log('✅ Tipo documento:', venda.tipo_documento_cliente);
        }

        if (venda.cep_entrega || venda.rua_entrega) {
          const enderecoEntrega = {
            cep: venda.cep_entrega || '',
            rua: venda.rua_entrega || '',
            numero: venda.numero_entrega || '',
            complemento: venda.complemento_entrega || '',
            bairro: venda.bairro_entrega || '',
            cidade: venda.cidade_entrega || '',
            estado: venda.estado_entrega || ''
          };
          console.log('✅ Endereço de entrega:', enderecoEntrega);
        }

        if (venda.observacao_entrega) {
          console.log('✅ Observação de entrega:', venda.observacao_entrega);
        }

        if (venda.valor_entrega) {
          console.log('✅ Valor de entrega:', venda.valor_entrega);
        }
      }

      // Fechar modais e atualizar contadores
      setShowVendasAbertasModal(false);
      setShowMesasModal(false);
      setShowComandasModal(false);
      setShowDeliveryModal(false); // ✅ NOVO: Fechar modal de delivery local

      // ✅ NOVO: Atualizar todos os contadores após recuperar venda
      console.log('🔄 Atualizando contadores após recuperar venda...');
      try {
        await Promise.all([
          carregarVendasAbertas(),
          carregarVendasMesas(),
          carregarVendasComandas(),
          carregarContadorDelivery() // ✅ Atualiza contador após salvar delivery
        ]);
        console.log('✅ Contadores atualizados com sucesso');
      } catch (error) {
        console.error('❌ Erro ao atualizar contadores:', error);
        // Não interromper o fluxo por erro na atualização dos contadores
      }

      toast.success(`Venda ${venda.numero_venda} recuperada com sucesso!`);
      console.log('✅ Venda recuperada:', venda.numero_venda);

      return true;

    } catch (error) {
      console.error('❌ Erro ao recuperar venda:', error);
      toast.error('Erro ao recuperar venda');
      return false;
    }
  };

  // Função principal para finalizar e salvar a venda
  // ✅ FUNÇÃO FUNCIONAL RESTAURADA (backup do commit funcionando)
  const finalizarVendaCompleta = async (tipoFinalizacao: string = 'finalizar_sem_impressao') => {
    if (carrinho.length === 0) {
      toast.error('Carrinho vazio! Adicione itens antes de finalizar.');
      return;
    }

    // Abrir modal de processamento
    setShowProcessandoVenda(true);
    setEtapaProcessamento('Iniciando processamento da venda...');
    setVendaProcessadaId(null);
    setNumeroVendaProcessada('');
    setStatusProcessamento('processando');
    setErroProcessamento('');
    setNumeroDocumentoReservado(null); // ✅ Limpar número reservado
    setSerieDocumentoReservado(null); // ✅ NOVO: Limpar série reservada
    setTipoFinalizacaoAtual(tipoFinalizacao); // ✅ Salvar tipo de finalização
    setDadosImpressao(null); // ✅ Limpar dados de impressão

    try {
      // Obter dados do usuário
      setEtapaProcessamento('Validando usuário...');
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        setEtapaProcessamento('Erro: Usuário não autenticado');
        await new Promise(resolve => setTimeout(resolve, 2000));
        setShowProcessandoVenda(false);
        toast.error('Usuário não autenticado');
        return;
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData?.empresa_id) {
        setEtapaProcessamento('Erro: Empresa não encontrada');
        await new Promise(resolve => setTimeout(resolve, 2000));
        setShowProcessandoVenda(false);
        toast.error('Empresa não encontrada');
        return;
      }

      // ✅ CORREÇÃO: Buscar regime tributário da empresa
      setEtapaProcessamento('Buscando dados da empresa...');
      const { data: empresaData } = await supabase
        .from('empresas')
        .select('regime_tributario')
        .eq('id', usuarioData.empresa_id)
        .single();

      const regimeTributario = empresaData?.regime_tributario || 1; // Default: Simples Nacional

      // Gerar número da venda
      setEtapaProcessamento('Gerando número da venda...');
      const numeroVenda = await gerarNumeroVenda(usuarioData.empresa_id);
      setNumeroVendaProcessada(numeroVenda);

      // Calcular valores (excluindo itens de devolução dos cálculos principais)
      setEtapaProcessamento('Calculando valores da venda...');
      const itensVenda = carrinho.filter(item => !item.isDevolucao);
      const itensDevolucao = carrinho.filter(item => item.isDevolucao);

      // Subtotal apenas dos itens de venda (sem devoluções)
      const valorSubtotal = itensVenda.reduce((acc, item) => acc + item.subtotal, 0);

      // Valor das devoluções (será aplicado como desconto no total)
      const valorDevolucoes = itensDevolucao.reduce((acc, item) => acc + Math.abs(item.subtotal), 0);

      const valorDescontoPrazo = descontoPrazoSelecionado ? calcularDescontoPrazo() : 0;

      // Calcular valor total considerando desconto por prazo e devoluções
      // Se valorDescontoPrazo for negativo, significa que é acréscimo
      const valorTotal = valorSubtotal - valorDescontoPrazo - valorDevolucoes;

      // Para salvar no banco, o valor do desconto deve ser sempre positivo
      const valorDesconto = Math.abs(valorDescontoPrazo);

      // Preparar dados do cliente
      setEtapaProcessamento('Preparando dados do cliente...');
      let clienteData = null;
      if (clienteSelecionado) {
        clienteData = {
          cliente_id: clienteSelecionado.id, // ✅ SEMPRE SALVAR ID DO CLIENTE REAL
          nome_cliente: clienteSelecionado.nome,
          telefone_cliente: clienteSelecionado.telefone,
          documento_cliente: clienteSelecionado.documento,
          tipo_documento_cliente: clienteSelecionado.tipo_documento
        };


      } else if (pedidosImportados.length > 0 && pedidosImportados[0]?.cliente) {
        const cliente = pedidosImportados[0].cliente;
        clienteData = {
          cliente_id: cliente.id,
          nome_cliente: cliente.nome,
          telefone_cliente: cliente.telefone,
          documento_cliente: cliente.documento,
          tipo_documento_cliente: cliente.tipo_documento
        };
      } else if (cpfCnpjNota && clienteEncontrado) {
        clienteData = {
          cliente_id: clienteEncontrado.id,
          nome_cliente: clienteEncontrado.nome,
          telefone_cliente: clienteEncontrado.telefone,
          documento_cliente: clienteEncontrado.documento,
          tipo_documento_cliente: clienteEncontrado.tipo_documento
        };
      } else if (cpfCnpjNota && cpfCnpjNota.trim()) {
        // ✅ NOVO: Salvar documento mesmo quando cliente não foi encontrado
        clienteData = {
          documento_cliente: cpfCnpjNota.replace(/\D/g, ''), // Apenas números
          tipo_documento_cliente: tipoDocumento
        };
      }

      // Preparar dados de pagamento
      setEtapaProcessamento('Preparando dados de pagamento...');
      let pagamentoData = {};
      if (tipoPagamento === 'vista' && formaPagamentoSelecionada) {
        // Buscar informações da forma de pagamento selecionada
        const formaSelecionada = formasPagamento.find(f => f.id === formaPagamentoSelecionada);
        const numeroParcelas = parcelasFormaPagamento[formaPagamentoSelecionada] || 1;
        const valorParcela = numeroParcelas > 1 ? valorTotal / numeroParcelas : null;

        // ✅ CORREÇÃO: Tratar fiado de forma especial (não salvar ID customizado)
        const isFiadoSelecionado = formaSelecionada?.nome?.toLowerCase() === 'fiado';

        pagamentoData = {
          tipo_pagamento: 'vista',
          forma_pagamento_id: isFiadoSelecionado ? null : formaPagamentoSelecionada, // ✅ NULL para fiado
          valor_pago: valorTotal,
          valor_troco: 0,
          parcelas: numeroParcelas,
          // ✅ NOVO: Estrutura expandida para formas_pagamento
          formas_pagamento: [{
            forma_id: isFiadoSelecionado ? null : formaPagamentoSelecionada, // ✅ NULL para fiado
            forma_nome: formaSelecionada?.nome || 'Forma de Pagamento',
            valor: valorTotal,
            tipo: formaSelecionada?.nome?.toLowerCase() === 'dinheiro' ? 'dinheiro' : 'eletronico',
            parcelas: numeroParcelas,
            valor_parcela: valorParcela
          }]
        };
      } else if (tipoPagamento === 'parcial' && pagamentosParciais.length > 0) {
        const totalPago = calcularTotalPago();

        // ✅ NOVO: Expandir dados dos pagamentos parciais com informações de parcelamento
        const formasExpandidas = pagamentosParciais.map(pagamento => {
          const forma = formasPagamento.find(f => f.id === pagamento.forma);
          // ✅ CORREÇÃO: Tratar fiado de forma especial nos pagamentos parciais
          const isFiadoParcial = forma?.nome?.toLowerCase() === 'fiado';

          return {
            forma_id: isFiadoParcial ? null : pagamento.forma, // ✅ NULL para fiado
            forma_nome: forma?.nome || 'Forma de Pagamento',
            valor: pagamento.valor,
            tipo: pagamento.tipo,
            parcelas: pagamento.parcelas || 1,
            valor_parcela: pagamento.valorParcela || null
          };
        });

        pagamentoData = {
          tipo_pagamento: 'parcial',
          formas_pagamento: formasExpandidas,
          valor_pago: totalPago,
          valor_troco: trocoCalculado
        };
      }

      // ✅ NOVO: CONTROLE DE FIADO - Detectar se a venda é fiado
      setEtapaProcessamento('Verificando se é venda fiado...');
      let isVendaFiado = false;
      let valorFiado = 0;

      if (tipoPagamento === 'vista' && formaPagamentoSelecionada) {
        const formaSelecionada = formasPagamento.find(f => f.id === formaPagamentoSelecionada);

        if (formaSelecionada?.nome?.toLowerCase() === 'fiado') {
          isVendaFiado = true;
          valorFiado = valorTotal;
        }
      } else if (tipoPagamento === 'parcial' && pagamentosParciais.length > 0) {
        // Verificar se algum pagamento parcial é fiado
        for (const pagamento of pagamentosParciais) {
          const forma = formasPagamento.find(f => f.id === pagamento.forma);

          if (forma?.nome?.toLowerCase() === 'fiado') {
            isVendaFiado = true;
            valorFiado += pagamento.valor;
          }
        }
      }

      // ✅ VALIDAÇÃO CRÍTICA: Se é fiado, deve ter cliente
      if (isVendaFiado && !clienteData.cliente_id) {
        setEtapaProcessamento('ERRO: Venda fiado sem cliente identificado!');
        await new Promise(resolve => setTimeout(resolve, 3000));
        setShowProcessandoVenda(false);
        toast.error('ERRO: Vendas fiado devem ter um cliente identificado!');
        return;
      }

      // Buscar configuração de controle de estoque
      setEtapaProcessamento('Verificando configuração de estoque...');
      const { data: estoqueConfig } = await supabase
        .from('tipo_controle_estoque_config')
        .select('tipo_controle')
        .eq('empresa_id', usuarioData.empresa_id)
        .single();

      const tipoControle = estoqueConfig?.tipo_controle || 'pedidos';

      // Preparar dados da venda principal
      setEtapaProcessamento('Preparando dados da venda...');

      // ✅ NOVO: Gerar número da NFC-e ANTES de salvar (se for NFC-e)
      let numeroDocumentoNfce = null;
      if (tipoFinalizacao.startsWith('nfce_')) {
        setEtapaProcessamento('Reservando número da NFC-e...');
        numeroDocumentoNfce = await gerarProximoNumeroNFCe(usuarioData.empresa_id);
        setNumeroDocumentoReservado(numeroDocumentoNfce);

        // ✅ CORREÇÃO: Buscar série do usuário (SEM FALLBACK - Lei Fundamental #2)
        const { data: usuarioSerieData, error: serieError } = await supabase
          .from('usuarios')
          .select('serie_nfce')
          .eq('id', userData.user.id)
          .single();

        if (serieError) {
          console.error('❌ ERRO ao buscar série do usuário:', serieError);
          throw new Error('Erro ao buscar série do usuário');
        }

        if (!usuarioSerieData?.serie_nfce) {
          console.error('❌ ERRO: Usuário não tem série NFC-e configurada');
          throw new Error('Usuário não tem série NFC-e configurada. Configure nas Configurações > Usuários');
        }

        const serieUsuario = usuarioSerieData.serie_nfce; // ✅ SEM FALLBACK
        setSerieDocumentoReservado(serieUsuario);
      }

      // ✅ NOVO: Coletar todos os vendedores únicos do carrinho
      setEtapaProcessamento('Coletando vendedores da venda...');
      const vendedoresUnicos = new Map();

      // Adicionar vendedor principal se existir
      if (vendedorSelecionado) {
        vendedoresUnicos.set(vendedorSelecionado.id, {
          id: vendedorSelecionado.id,
          nome: vendedorSelecionado.nome
        });
      }

      // Adicionar vendedores dos itens do carrinho
      carrinho.forEach(item => {
        if (item.vendedor_id && item.vendedor_nome) {
          vendedoresUnicos.set(item.vendedor_id, {
            id: item.vendedor_id,
            nome: item.vendedor_nome
          });
        }
      });

      // Converter para array de IDs
      const vendedoresIds = Array.from(vendedoresUnicos.keys());

      // ✅ NOVO: Calcular valores de desconto detalhados (com arredondamento para 2 casas decimais, excluindo devoluções)
      const valorDescontoItens = Math.round(
        itensVenda
          .filter(item => item.desconto)
          .reduce((total, item) => total + (item.desconto?.valorDesconto || 0), 0) * 100
      ) / 100;

      // ✅ CORRIGIDO: Desconto total apenas do desconto global (sem incluir devoluções)
      const valorDescontoTotal = Math.round(descontoGlobal * 100) / 100;

      // ✅ NOVO: Preparar observação da venda incluindo informações de troca
      let observacaoFinal = observacaoVenda || '';

      // ✅ NOVO: Identificar informações de devolução no carrinho
      const itensDevolucaoInfo = itensDevolucao.map(item => ({
        devolucao_origem_id: item.devolucao_origem_id,
        devolucao_codigo: item.devolucao_codigo,
        venda_origem_id: item.venda_origem_id,
        venda_origem_numero: item.venda_origem_numero
      })).filter(info => info.devolucao_origem_id);

      // Dados de devolução para a tabela pdv
      let dadosDevolucao = {};
      if (itensDevolucaoInfo.length > 0) {
        // Usar a primeira devolução encontrada (caso principal - compatibilidade)
        const primeiraDevolucao = itensDevolucaoInfo[0];

        // ✅ NOVO: Preparar listas de múltiplas devoluções
        const devolucaoIds = [...new Set(itensDevolucaoInfo.map(item => item.devolucao_origem_id).filter(Boolean))];
        const devolucaoCodigos = [...new Set(itensDevolucaoInfo.map(item => item.devolucao_codigo).filter(Boolean))];
        const vendaOrigemIds = [...new Set(itensDevolucaoInfo.map(item => item.venda_origem_id).filter(Boolean))];
        const vendaOrigemNumeros = [...new Set(itensDevolucaoInfo.map(item => item.venda_origem_numero).filter(Boolean))];

        dadosDevolucao = {
          // ✅ Campos principais (primeira devolução - compatibilidade)
          devolucao_origem_id: primeiraDevolucao.devolucao_origem_id,
          devolucao_origem_numero: primeiraDevolucao.devolucao_codigo,
          devolucao_origem_codigo: primeiraDevolucao.devolucao_codigo,
          venda_origem_troca_id: primeiraDevolucao.venda_origem_id,
          venda_origem_troca_numero: primeiraDevolucao.venda_origem_numero

          // ✅ NOTA: Campos no plural removidos pois não existem na tabela pdv
          // A tabela pdv só suporta uma devolução por venda nos campos individuais
        };

        // Log para debug
        console.log('🔄 Dados de devolução para tabela PDV:', {
          ...dadosDevolucao,
          totalDevolucoesEncontradas: itensDevolucaoInfo.length,
          devolucaoIds,
          vendaOrigemIds
        });
      }

      // ✅ NOVO: Adicionar informação de devolução na observação sempre que houver itens de devolução
      if (itensDevolucao.length > 0) {
        const itensTroca = carrinho.filter(item => item.isDevolucao);
        if (itensTroca.length > 0) {
          // Obter número da troca do primeiro item de devolução
          const numeroTroca = itensTroca[0].devolucao_codigo;

          if (Math.abs(valorTotal) < 0.01) {
            // Se for troca exata (valor zero)
            const observacaoTroca = `TROCA EXATA - Devolução ${numeroTroca}`;
            observacaoFinal = observacaoFinal ? `${observacaoFinal} | ${observacaoTroca}` : observacaoTroca;
          } else {
            // Se for venda com devolução (mas não troca exata)
            const observacaoTroca = `Venda com devolução ${numeroTroca}`;
            observacaoFinal = observacaoFinal ? `${observacaoFinal} | ${observacaoTroca}` : observacaoTroca;
          }
        }
      }

      const vendaData = {
        empresa_id: usuarioData.empresa_id,
        usuario_id: userData.user.id,
        vendedores_ids: vendedoresIds.length > 0 ? vendedoresIds : null, // ✅ NOVO: Salvar lista de vendedores
        numero_venda: numeroVenda,
        data_venda: new Date().toISOString(),
        status_venda: 'finalizada',
        valor_subtotal: valorSubtotal,
        valor_desconto: valorDesconto,
        valor_desconto_itens: valorDescontoItens, // ✅ NOVO: Desconto nos itens
        valor_desconto_total: valorDescontoTotal, // ✅ NOVO: Desconto no total
        valor_total: valorTotal,
        desconto_prazo_id: descontoPrazoSelecionado,
        pedidos_importados: pedidosImportados.length > 0 ? pedidosImportados.map(p => p.id) : null,
        observacao_venda: observacaoFinal || null, // ✅ NOVO: Incluir observação da venda com informações de troca
        // ✅ NOVO: Incluir informações de nome do cliente, mesa e comanda
        nome_cliente: nomeCliente || null,
        mesa_numero: mesaNumero || null,
        comanda_numero: comandaNumero || null,
        finalizada_em: new Date().toISOString(),
        // ✅ NOVO: Marcar tentativa de NFC-e e salvar número reservado
        tentativa_nfce: tipoFinalizacao.startsWith('nfce_'),
        status_fiscal: tipoFinalizacao.startsWith('nfce_') ? 'processando' : 'nao_fiscal',
        // ✅ CORREÇÃO: Salvar dados fiscais já no início (COM LOGS)
        modelo_documento: tipoFinalizacao.startsWith('nfce_') ? 65 : null,
        numero_documento: numeroDocumentoNfce,
        serie_documento: tipoFinalizacao.startsWith('nfce_') ? serieDocumentoReservado : null,
        // ✅ NOVO: Marcar como delivery local quando tipo de finalização for delivery
        delivery_local: tipoFinalizacao.startsWith('delivery_'),
        // ✅ NOVO: CONTROLE DE FIADO - Marcar se a venda é fiado
        fiado: isVendaFiado,
        // ✅ NOVO: Dados de devolução/troca
        ...dadosDevolucao,
        ...clienteData,
        ...pagamentoData
      };

      // ✅ CORREÇÃO: UPDATE ou INSERT baseado na venda em andamento
      let vendaInserida;
      let vendaError;

      if (vendaEmAndamento) {
        // ✅ ATUALIZAR venda em andamento existente (sempre que há venda em andamento)
        setEtapaProcessamento('Finalizando venda em andamento...');

        // ✅ CORREÇÃO: Para venda em andamento, não sobrescrever série/número que já estão corretos
        const { serie_documento, numero_documento, ...vendaDataSemSerie } = vendaData;

        const result = await supabase
          .from('pdv')
          .update({
            ...vendaDataSemSerie,
            status_venda: 'finalizada', // ✅ Mudar status para finalizada
            finalizada_em: new Date().toISOString(),
            updated_at: new Date().toISOString()
            // ✅ NÃO incluir serie_documento e numero_documento - manter os que já estão no banco
          })
          .eq('id', vendaEmAndamento.id)
          .select('id, serie_documento, numero_documento, modelo_documento')
          .single();

        vendaInserida = result.data;
        vendaError = result.error;

        // Venda em andamento atualizada
      } else {
        // ✅ CRIAR nova venda (apenas se não há venda em andamento)
        setEtapaProcessamento('Salvando venda no banco de dados...');

        const result = await supabase
          .from('pdv')
          .insert(vendaData)
          .select('id, serie_documento, numero_documento, modelo_documento')
          .single();

        vendaInserida = result.data;
        vendaError = result.error;

        // Nova venda criada
      }

      if (vendaError) {
        console.error('❌ [FINALIZAÇÃO] Erro ao salvar venda:', vendaError);
        console.error('❌ [FINALIZAÇÃO] Detalhes completos do erro:', {
          message: vendaError.message,
          details: vendaError.details,
          hint: vendaError.hint,
          code: vendaError.code,
          stack: vendaError.stack
        });
        setEtapaProcessamento('Erro ao salvar venda: ' + vendaError.message);
        await new Promise(resolve => setTimeout(resolve, 3000));
        setShowProcessandoVenda(false);
        toast.error('Erro ao salvar venda: ' + vendaError.message);
        return;
      }

      if (!vendaInserida?.id) {
        console.error('❌ [FINALIZAÇÃO] Venda não retornou ID válido');
        console.error('❌ [FINALIZAÇÃO] Dados retornados:', vendaInserida);
        setEtapaProcessamento('Erro: Venda não foi salva corretamente');
        await new Promise(resolve => setTimeout(resolve, 3000));
        setShowProcessandoVenda(false);
        toast.error('Venda não foi salva corretamente no banco de dados!');
        return;
      }

      const vendaId = vendaInserida.id;
      setVendaProcessadaId(vendaId);

      // ✅ NOVO: CONTROLE DE FIADO - Atualizar saldo devedor do cliente
      if (isVendaFiado && clienteData.cliente_id && valorFiado > 0) {
        setEtapaProcessamento('Atualizando saldo devedor do cliente...');

        try {
          // Buscar saldo atual do cliente
          const { data: clienteAtual, error: clienteError } = await supabase
            .from('clientes')
            .select('saldo_devedor')
            .eq('id', clienteData.cliente_id)
            .single();

          if (clienteError) {
            console.error('❌ Erro ao buscar saldo do cliente:', clienteError);
          } else {
            const saldoAtual = clienteAtual?.saldo_devedor || 0;
            const novoSaldo = saldoAtual + valorFiado;

            // Atualizar saldo devedor do cliente
            const { error: updateSaldoError } = await supabase
              .from('clientes')
              .update({
                saldo_devedor: novoSaldo,
                updated_at: new Date().toISOString()
              })
              .eq('id', clienteData.cliente_id);

            if (updateSaldoError) {
              console.error('❌ Erro ao atualizar saldo devedor:', updateSaldoError);
              // ✅ NÃO parar a venda por erro de saldo - apenas logar
            } else {
              console.log(`✅ Saldo devedor atualizado: ${clienteData.nome_cliente} - R$ ${novoSaldo.toFixed(2)}`);
            }
          }
        } catch (saldoError) {
          console.error('❌ Erro inesperado ao atualizar saldo devedor:', saldoError);
          // ✅ NÃO parar a venda por erro de saldo - apenas logar
        }
      }

      // ✅ CORREÇÃO: Buscar configurações PDV para venda sem produto
      let configVendaSemProduto = null;
      if (carrinho.some(item => item.produto.codigo === '999999')) {
        const { data: pdvConfigData } = await supabase
          .from('pdv_config')
          .select(`
            venda_sem_produto_ncm,
            venda_sem_produto_cfop,
            venda_sem_produto_origem,
            venda_sem_produto_situacao_tributaria,
            venda_sem_produto_cest,
            venda_sem_produto_margem_st,
            venda_sem_produto_aliquota_icms,
            venda_sem_produto_aliquota_pis,
            venda_sem_produto_aliquota_cofins,
            venda_sem_produto_peso_liquido,
            venda_sem_produto_cst,
            venda_sem_produto_csosn
          `)
          .eq('empresa_id', usuarioData.empresa_id)
          .single();

        configVendaSemProduto = pdvConfigData;
      }

      // Preparar itens para inserção
      setEtapaProcessamento('Preparando itens da venda...');

      // ✅ CORREÇÃO: Filtrar apenas itens que ainda não foram salvos (sem pdv_item_id) E que não são devoluções
      const itensNaoSalvos = carrinho.filter(item => !item.pdv_item_id && !item.isDevolucao);
      const itensJaSalvos = carrinho.filter(item => item.pdv_item_id && !item.isDevolucao);

      // ✅ NOVO: Log para debug - mostrar itens excluídos
      const itensExcluidos = carrinho.filter(item => item.isDevolucao);
      if (itensExcluidos.length > 0) {
        console.log('🔄 Itens de devolução excluídos do processamento:', itensExcluidos.map(item => item.produto.nome));
      }

      const itensParaInserir = itensNaoSalvos.map(item => {
        // 🔍 DEBUG: Log do item antes de preparar para inserção
        console.log('🔍 ITEM ANTES DE INSERIR NO BANCO:', {
          produtoNome: item.produto.nome,
          produtoId: item.produto.id,
          temDevolucaoProps: !!(item as any).devolucao_codigo || !!(item as any).isDevolucao,
          devolucao_codigo: (item as any).devolucao_codigo,
          isDevolucao: (item as any).isDevolucao,
          itemCompleto: item
        });

        const precoUnitario = item.desconto ? item.desconto.precoComDesconto : (item.subtotal / item.quantidade);

        // ✅ CORREÇÃO: Para venda sem produto, produto_id deve ser null
        const produtoId = item.vendaSemProduto ? null : item.produto.id;

        // ✅ CORREÇÃO: Dados fiscais - usar configuração PDV para produto 999999
        let dadosFiscais = {};
        if (item.produto.codigo === '999999' && configVendaSemProduto) {
          // Aplicar dados fiscais da configuração PDV
          const situacaoTributaria = configVendaSemProduto.venda_sem_produto_situacao_tributaria;
          const cstIcms = configVendaSemProduto.venda_sem_produto_cst;
          const csosnIcms = configVendaSemProduto.venda_sem_produto_csosn;

          dadosFiscais = {
            // ✅ SEM FALLBACK: Usar dados diretos da configuração PDV
            ncm: configVendaSemProduto.venda_sem_produto_ncm,
            cfop: configVendaSemProduto.venda_sem_produto_cfop,
            origem_produto: configVendaSemProduto.venda_sem_produto_origem,
            cst_icms: configVendaSemProduto.venda_sem_produto_cst,
            csosn_icms: configVendaSemProduto.venda_sem_produto_csosn,
            cest: configVendaSemProduto.venda_sem_produto_cest,
            margem_st: configVendaSemProduto.venda_sem_produto_margem_st,
            aliquota_icms: configVendaSemProduto.venda_sem_produto_aliquota_icms,
            aliquota_pis: configVendaSemProduto.venda_sem_produto_aliquota_pis,
            aliquota_cofins: configVendaSemProduto.venda_sem_produto_aliquota_cofins,
            cst_pis: configVendaSemProduto.venda_sem_produto_cst_pis,
            cst_cofins: configVendaSemProduto.venda_sem_produto_cst_cofins
          };
        } else {
          // ✅ Dados fiscais do produto normal - todos os campos da tabela pdv_itens
          dadosFiscais = {
            ncm: item.produto.ncm || null,
            cfop: item.produto.cfop || null,
            origem_produto: item.produto.origem_produto || null,
            cst_icms: item.produto.cst_icms || null,
            csosn_icms: item.produto.csosn_icms || null,
            cest: item.produto.cest || null,
            margem_st: item.produto.margem_st || null,
            aliquota_icms: item.produto.aliquota_icms || null,
            aliquota_pis: item.produto.aliquota_pis || null,
            aliquota_cofins: item.produto.aliquota_cofins || null,
            cst_pis: item.produto.cst_pis || null,
            cst_cofins: item.produto.cst_cofins || null
          };
        }

        return {
          empresa_id: usuarioData.empresa_id,
          usuario_id: userData.user.id,
          pdv_id: vendaId,
          produto_id: produtoId,
          codigo_produto: item.produto.codigo,
          nome_produto: item.produto.nome,
          descricao_produto: item.produto.descricao,
          quantidade: item.quantidade,
          valor_unitario: precoUnitario,
          valor_subtotal: item.subtotal,
          valor_total_item: item.subtotal,
          tem_desconto: !!item.desconto,
          tipo_desconto: item.desconto?.tipo || null,
          percentual_desconto: item.desconto?.percentualDesconto || null,
          valor_desconto_aplicado: item.desconto?.valorDesconto || 0,
          origem_desconto: item.desconto ? 'manual' : null,
          origem_item: item.isDevolucao ? 'devolucao' : (item.pedido_origem_numero ? 'pedido_importado' : 'manual'),
          pedido_origem_id: item.pedido_origem_id || null,
          pedido_origem_numero: item.pedido_origem_numero || null,
          // ✅ NOVO: Incluir dados do vendedor do item
          vendedor_id: item.vendedor_id || null,
          vendedor_nome: item.vendedor_nome || null,
          observacao_item: item.observacao || null,
          // ✅ NOVO: Incluir dados da tabela de preços
          tabela_preco_id: item.tabela_preco_id || null,
          tabela_preco_nome: item.tabela_preco_nome || null,
          // ✅ NOVO: Incluir dados de devolução (se aplicável)
          devolucao_origem_id: item.devolucao_origem_id || null,
          devolucao_codigo: item.devolucao_codigo || null,
          // ✅ CORREÇÃO: Incluir dados fiscais
          ...dadosFiscais
        };
      });

      // ✅ CORREÇÃO: Verificar itens existentes e fazer UPDATE/INSERT conforme necessário
      setEtapaProcessamento('Salvando itens da venda...');

      if (vendaEmAndamento) {
        // ✅ VENDA EM ANDAMENTO: Sempre verificar itens existentes para UPDATE/INSERT
        // Verificando itens existentes na venda em andamento

        // Buscar itens já salvos na venda
        const { data: itensExistentes, error: buscarError } = await supabase
          .from('pdv_itens')
          .select('id, codigo_produto, produto_id, quantidade, valor_total_item')
          .eq('pdv_id', vendaEmAndamento.id);

        if (buscarError) {
          console.error('❌ Erro ao buscar itens existentes:', buscarError);
          setEtapaProcessamento('Erro ao verificar itens: ' + buscarError.message);
          await new Promise(resolve => setTimeout(resolve, 3000));
          setShowProcessandoVenda(false);
          toast.error('Erro ao verificar itens: ' + buscarError.message);
          return;
        }

        // Itens encontrados para processamento

        // ✅ CORREÇÃO: Processar cada item do carrinho individualmente (excluindo devoluções)
        const itensParaProcessar = carrinho.filter(item => !item.isDevolucao);

        for (const [index, item] of itensParaProcessar.entries()) {

          // ✅ CORREÇÃO CIRÚRGICA: Buscar itemData apenas se o item não foi salvo ainda
          let itemData = null;
          if (!item.pdv_item_id) {
            // Item não salvo - buscar no array itensParaInserir
            const indexNoArray = itensNaoSalvos.findIndex(itemNaoSalvo =>
              itemNaoSalvo.produto.id === item.produto.id &&
              itemNaoSalvo.quantidade === item.quantidade
            );
            itemData = itensParaInserir[indexNoArray];
          }

          // ✅ CORREÇÃO: Verificar se item já existe no banco de dados
          let itemExistente = null;

          if (item.pdv_item_id) {
            // Item tem pdv_item_id - verificar se ainda existe no banco
            itemExistente = itensExistentes?.find(existente => existente.id === item.pdv_item_id);
            // Item verificado no banco
          } else {
            // Item sem pdv_item_id - verificar se já existe por código/produto_id
            if (item.vendaSemProduto) {
              // Para venda sem produto, verificar por código 999999
              itemExistente = itensExistentes?.find(existente => existente.codigo_produto === '999999');
            } else {
              // Para produto normal, verificar por produto_id
              itemExistente = itensExistentes?.find(existente => existente.produto_id === item.produto.id);
            }
            // Item verificado por produto
          }

          if (itemExistente) {
            // ✅ ITEM EXISTE: Fazer UPDATE apenas se temos itemData válido
            if (itemData) {
              // Atualizando item existente com dados do carrinho

              const { error: updateError } = await supabase
                .from('pdv_itens')
                .update({
                  quantidade: itemData.quantidade,
                  valor_unitario: itemData.valor_unitario,
                  valor_total_item: itemData.valor_total_item,
                  tem_desconto: itemData.tem_desconto,
                  valor_desconto_aplicado: itemData.valor_desconto_aplicado,
                  vendedor_id: itemData.vendedor_id,
                  vendedor_nome: itemData.vendedor_nome,
                  observacao_item: itemData.observacao_item,
                  tabela_preco_id: itemData.tabela_preco_id,
                  tabela_preco_nome: itemData.tabela_preco_nome,
                  updated_at: new Date().toISOString()
                })
                .eq('id', itemExistente.id);

              if (updateError) {
                console.error(`❌ Erro ao atualizar item ${item.produto.nome}:`, updateError);
                throw new Error(`Erro ao atualizar item: ${updateError.message}`);
              }

            }
          } else {
            // ✅ ITEM NÃO EXISTE: Fazer INSERT apenas se temos itemData válido
            if (itemData) {
              // Inserindo novo item

              const { error: insertError } = await supabase
                .from('pdv_itens')
                .insert(itemData);

              if (insertError) {
                console.error(`❌ Erro ao inserir item ${item.produto.nome}:`, insertError);
                throw new Error(`Erro ao inserir item: ${insertError.message}`);
              }

            } else {
              console.error(`ERRO: Tentativa de inserir item sem itemData: ${item.produto.nome}`);
              throw new Error(`Erro: Item ${item.produto.nome} não pode ser processado - dados incompletos`);
            }
          }
        }

        // Todos os itens processados
      } else {
        // ✅ VENDA NOVA: Inserir apenas itens que ainda não foram salvos
        if (itensParaInserir.length > 0) {
          const { error: itensError } = await supabase
            .from('pdv_itens')
            .insert(itensParaInserir);

          if (itensError) {
            console.error('❌ Erro ao inserir itens:', itensError);
            setEtapaProcessamento('Erro ao salvar itens: ' + itensError.message);
            await new Promise(resolve => setTimeout(resolve, 3000));
            setShowProcessandoVenda(false);
            toast.error('Erro ao salvar itens: ' + itensError.message);
            return;
          }
        }
      }

      // ✅ CORREÇÃO: Processar opções adicionais com verificação de duplicação (excluindo devoluções)
      const itensComAdicionais = carrinho.filter(item => item.adicionais && item.adicionais.length > 0 && !item.isDevolucao);
      if (itensComAdicionais.length > 0) {
        setEtapaProcessamento('Salvando opções adicionais...');

        for (const [index, item] of itensComAdicionais.entries()) {
          // ✅ CORREÇÃO: Buscar item considerando venda sem produto
          const produtoId = item.vendaSemProduto ? null : item.produto.id;

          let query = supabase
            .from('pdv_itens')
            .select('id')
            .eq('pdv_id', vendaId)
            .eq('codigo_produto', item.produto.codigo);

          // Adicionar filtro de produto_id apenas se não for venda sem produto
          if (!item.vendaSemProduto) {
            query = query.eq('produto_id', produtoId);
          } else {
            query = query.is('produto_id', null);
          }

          const { data: itemInserido } = await query
            .limit(1)
            .maybeSingle();

          if (itemInserido && item.adicionais) {

            // ✅ CORREÇÃO: Abordagem simplificada - sempre remover e reinserir adicionais
            if (vendaEmAndamento) {
              // ✅ VENDA EM ANDAMENTO: Remover todos os adicionais antigos e inserir os novos
              console.log(`🔄 FRONTEND: Removendo adicionais antigos e inserindo novos para: ${item.produto.nome}`);

              // 1. Marcar todos os adicionais antigos como deletados
              const { error: deleteError } = await supabase
                .from('pdv_itens_adicionais')
                .update({
                  deletado: true,
                  deletado_em: new Date().toISOString(),
                  deletado_por: userData.user.id
                })
                .eq('pdv_item_id', itemInserido.id)
                .eq('deletado', false);

              if (deleteError) {
                console.error(`❌ Erro ao remover adicionais antigos:`, deleteError);
                throw new Error(`Erro ao remover adicionais antigos: ${deleteError.message}`);
              }

              console.log(`✅ FRONTEND: Adicionais antigos removidos para: ${item.produto.nome}`);

              // 2. Inserir todos os adicionais atuais do carrinho
              if (item.adicionais && item.adicionais.length > 0) {
                const adicionaisParaInserir = item.adicionais.map(adicional => ({
                  empresa_id: usuarioData.empresa_id,
                  usuario_id: userData.user.id,
                  pdv_item_id: itemInserido.id,
                  item_adicional_id: adicional.id,
                  nome_adicional: adicional.nome,
                  quantidade: adicional.quantidade,
                  valor_unitario: adicional.preco,
                  valor_total: adicional.preco * adicional.quantidade,
                  origem_adicional: 'manual'
                }));

                const { error: insertError } = await supabase
                  .from('pdv_itens_adicionais')
                  .insert(adicionaisParaInserir);

                if (insertError) {
                  console.error(`❌ Erro ao inserir novos adicionais:`, insertError);
                  throw new Error(`Erro ao inserir novos adicionais: ${insertError.message}`);
                }

                console.log(`✅ FRONTEND: ${adicionaisParaInserir.length} novos adicionais inseridos para: ${item.produto.nome}`);
              }
            } else {
              // ✅ VENDA NOVA: Inserir todos os adicionais normalmente
              console.log('➕ FRONTEND: Inserindo todos os adicionais (venda nova)...');

              const adicionaisParaInserir = item.adicionais.map(adicional => ({
                empresa_id: usuarioData.empresa_id,
                usuario_id: userData.user.id,
                pdv_item_id: itemInserido.id,
                item_adicional_id: adicional.id,
                nome_adicional: adicional.nome,
                quantidade: adicional.quantidade,
                valor_unitario: adicional.preco,
                valor_total: adicional.preco * adicional.quantidade,
                origem_adicional: 'manual'
              }));

              const { error: adicionaisError } = await supabase
                .from('pdv_itens_adicionais')
                .insert(adicionaisParaInserir);

              if (adicionaisError) {
                console.error('❌ Erro ao inserir adicionais:', adicionaisError);
                throw new Error(`Erro ao inserir adicionais: ${adicionaisError.message}`);
              }

              console.log(`✅ FRONTEND: ${adicionaisParaInserir.length} adicionais inseridos para: ${item.produto.nome}`);
            }
          }
        }

        console.log('✅ FRONTEND: Todos os adicionais processados com sucesso');
      }

      // Atualizar estoque se configurado para PDV
      if (tipoControle === 'pdv') {
        setEtapaProcessamento('Atualizando estoque...');
        // Iniciando baixa de estoque

        for (const item of carrinho) {
          // ✅ EXCEÇÃO: Pular controle de estoque para venda sem produto (código 999999) e itens de devolução
          if (item.vendaSemProduto || item.produto.codigo === '999999' || item.isDevolucao) {
            // Pulando controle de estoque para venda sem produto e devoluções
            continue;
          }

          // Baixando estoque do produto

          const { error: estoqueError } = await supabase.rpc('atualizar_estoque_produto', {
            p_produto_id: item.produto.id,
            p_quantidade: -item.quantidade, // Quantidade negativa para baixa
            p_tipo_operacao: 'venda_pdv',
            p_observacao: `Venda PDV #${numeroVenda}`
          });

          if (estoqueError) {
            console.error('❌ FRONTEND: Erro ao atualizar estoque:', estoqueError);
            setEtapaProcessamento('ERRO: Falha na baixa de estoque: ' + estoqueError.message);
            await new Promise(resolve => setTimeout(resolve, 3000));
            setShowProcessandoVenda(false);
            toast.error('ERRO: Falha na baixa de estoque: ' + estoqueError.message);
            return;
          } else {
            // Estoque baixado com sucesso
          }
        }
        // Baixa de estoque concluída

        // ✅ NOVO: Baixa automática de insumos
        setEtapaProcessamento('Processando baixa de insumos...');

        for (const item of carrinho) {
          // ✅ EXCEÇÃO: Pular insumos para venda sem produto (código 999999) e itens de devolução
          if (item.vendaSemProduto || item.produto.codigo === '999999' || item.isDevolucao) {
            continue;
          }

          // ✅ Verificar se o produto tem insumos configurados
          if (!item.produto.insumos || !Array.isArray(item.produto.insumos) || item.produto.insumos.length === 0) {
            continue;
          }

          // ✅ Processar cada insumo do produto
          for (const insumo of item.produto.insumos) {
            try {
              // ✅ Calcular quantidade proporcional do insumo
              const quantidadeInsumo = insumo.quantidade * item.quantidade;

              // ✅ Dar baixa no estoque do insumo
              const { error: insumoError } = await supabase.rpc('atualizar_estoque_produto', {
                p_produto_id: insumo.produto_id,
                p_quantidade: -quantidadeInsumo, // Quantidade negativa para baixa
                p_tipo_operacao: 'consumo_insumo',
                p_observacao: `Consumo de insumo - Venda PDV #${numeroVenda} - Produto: ${item.produto.nome}`
              });

              if (insumoError) {
                console.error(`❌ [INSUMOS] Erro ao baixar insumo ${insumo.nome}:`, insumoError);
                // ✅ NÃO INTERROMPER a venda por erro de insumo - apenas logar
                console.warn(`⚠️ [INSUMOS] Continuando venda apesar do erro no insumo: ${insumo.nome}`);
              }

            } catch (error) {
              console.error(`❌ [INSUMOS] Erro inesperado ao processar insumo ${insumo.nome}:`, error);
              // ✅ Continuar processamento mesmo com erro
            }
          }
        }


        // Baixa de insumos concluída

        setEtapaProcessamento('Processamento de insumos concluído');

        // Aguardar um pouco para garantir que todas as movimentações foram processadas
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      // VERIFICAÇÃO CRÍTICA: Confirmar se tudo foi salvo corretamente
      // ✅ CORREÇÃO: Usar total de itens esperados (incluindo já salvos + novos inseridos)
      const totalItensEsperados = itensJaSalvos.length + itensParaInserir.length;
      const vendaVerificada = await verificarVendaNoBanco(vendaId, numeroVenda, totalItensEsperados, tipoControle);

      if (!vendaVerificada) {
        setEtapaProcessamento('ERRO: Venda não foi salva corretamente!');
        await new Promise(resolve => setTimeout(resolve, 3000));
        setShowProcessandoVenda(false);
        toast.error('ERRO: Venda não foi salva corretamente no banco de dados!');
        return;
      }

      // Atualizar status dos pedidos importados para "faturado"
      if (pedidosImportados.length > 0) {
        setEtapaProcessamento('Atualizando status dos pedidos...');

        try {
          const dataFaturamento = new Date().toISOString();

          for (const pedido of pedidosImportados) {
            const { error: pedidoError } = await supabase
              .from('pedidos')
              .update({
                status: 'faturado',
                data_faturamento: dataFaturamento,
                observacao_faturamento: `Faturado via PDV - Venda #${numeroVenda}`
              })
              .eq('id', pedido.id);

            if (pedidoError) {
              console.error(`Erro ao atualizar pedido ${pedido.numero}:`, pedidoError);
              // Não interrompe o processo, apenas loga o erro
            }
          }

          // Disparar eventos do sistema para cada pedido faturado
          for (const pedido of pedidosImportados) {
            // Disparar evento padrão do sistema
            window.dispatchEvent(new CustomEvent(EVENT_TYPES.PEDIDO_FATURADO, {
              detail: {
                pedidoId: pedido.id,
                numero: pedido.numero,
                status: 'faturado',
                empresaId: usuarioData.empresa_id,
                valorTotal: pedido.valor_total || 0,
                clienteNome: pedido.cliente?.nome,
                action: 'invoiced'
              }
            }));
          }

          // Disparar evento customizado adicional
          window.dispatchEvent(new CustomEvent('pedidoStatusChanged', {
            detail: {
              pedidosIds: pedidosImportados.map(p => p.id),
              novoStatus: 'faturado',
              numeroVenda: numeroVenda
            }
          }));

        } catch (error) {
          console.error('Erro ao atualizar status dos pedidos:', error);
          // Não interrompe o processo, pois a venda já foi salva com sucesso
        }
      }

      // VERIFICAR SE É EMISSÃO DE NFC-e
      if (tipoFinalizacao.startsWith('nfce_')) {
        // Iniciando processo de emissão NFC-e

        setEtapaProcessamento('Carregando dados da empresa...');

        // ✅ CORREÇÃO: Buscar dados da empresa (igual à NFe que funciona)
        // Buscando dados da empresa
        const { data: empresaData } = await supabase
          .from('empresas')
          .select('*')
          .eq('id', usuarioData.empresa_id)
          .single();

        if (!empresaData) {
          throw new Error('Dados da empresa não encontrados');
        }
        // Dados da empresa carregados

        // ✅ NOVO: Buscar série da NFC-e do usuário logado
        // Buscando série da NFC-e
        const { data: usuarioSerieData } = await supabase
          .from('usuarios')
          .select('serie_nfce')
          .eq('id', userData.user.id)
          .single();

        const serieUsuario = usuarioSerieData?.serie_nfce || 1; // Fallback para série 1
        // Série da NFC-e obtida

        // Buscar configuração NFe
        // Buscando configuração NFe
        const { data: nfeConfigData, error: nfeConfigError } = await supabase
          .from('nfe_config')
          .select('ambiente')
          .eq('empresa_id', usuarioData.empresa_id)
          .single();

        if (nfeConfigError) {
          console.error('❌ FRONTEND: Erro na consulta nfe_config:', nfeConfigError);
          throw new Error(`Erro ao buscar configuração NFe: ${nfeConfigError.message}`);
        }

        if (!nfeConfigData) {
          throw new Error('Configuração NFe não encontrada');
        }
        // Configuração NFe carregada

        setEtapaProcessamento('Preparando dados para NFC-e...');

        try {
          // ✅ NOVO: Validar se número foi salvo corretamente
          setEtapaProcessamento('Validando numeração da NFC-e...');
          // Validando número NFC-e

          const { data: vendaSalva, error: validacaoError } = await supabase
            .from('pdv')
            .select('numero_documento, modelo_documento')
            .eq('id', vendaId)
            .single();

          if (validacaoError || !vendaSalva) {
            throw new Error('Erro ao validar venda salva');
          }

          if (!vendaSalva.numero_documento) {
            throw new Error('Número da NFC-e não foi reservado corretamente');
          }

          const proximoNumero = vendaSalva.numero_documento;

          const codigoNumerico = Math.floor(10000000 + Math.random() * 90000000).toString();

          // ✅ CORREÇÃO: Calcular codigo_uf a partir do estado
          const getCodigoUF = (estado: string): number => {
            const codigosUF: { [key: string]: number } = {
              'AC': 12, 'AL': 17, 'AP': 16, 'AM': 13, 'BA': 29, 'CE': 23, 'DF': 53,
              'ES': 32, 'GO': 52, 'MA': 21, 'MT': 51, 'MS': 50, 'MG': 31, 'PA': 15,
              'PB': 25, 'PR': 41, 'PE': 26, 'PI': 22, 'RJ': 33, 'RN': 24, 'RS': 43,
              'RO': 11, 'RR': 14, 'SC': 42, 'SP': 35, 'SE': 28, 'TO': 27
            };
            return codigosUF[estado] || 35; // Default SP se não encontrar
          };

          const nfceData = {
            // ✅ CORREÇÃO: Adicionar dados da empresa (igual à NFe que funciona)
            empresa: {
              razao_social: empresaData.razao_social,
              cnpj: empresaData.documento, // Campo correto é 'documento'
              nome_fantasia: empresaData.nome_fantasia,
              inscricao_estadual: empresaData.inscricao_estadual,
              regime_tributario: empresaData.regime_tributario || 1,
              uf: empresaData.estado, // Campo correto é 'estado'
              codigo_municipio: parseInt(empresaData.codigo_municipio) || 3524402, // Converter para int
              codigo_uf: getCodigoUF(empresaData.estado), // ✅ CORREÇÃO: Calcular a partir do estado
              endereco: {
                logradouro: empresaData.endereco,
                numero: empresaData.numero,
                bairro: empresaData.bairro,
                cidade: empresaData.cidade,
                cep: empresaData.cep
              },
              // Campos CSC para NFC-e
              csc_homologacao: empresaData.csc_homologacao,
              csc_id_homologacao: empresaData.csc_id_homologacao,
              csc_producao: empresaData.csc_producao,
              csc_id_producao: empresaData.csc_id_producao
            },
            // ✅ CORREÇÃO: Adicionar ambiente (igual à NFe que funciona)
            ambiente: nfeConfigData.ambiente, // 'producao' ou 'homologacao'
            identificacao: {
              numero: proximoNumero,
              serie: serieUsuario, // ✅ NOVO: Série individual do usuário logado
              codigo_numerico: codigoNumerico,
              natureza_operacao: 'Venda de mercadoria'
            },
            // ✅ CORREÇÃO: Usar CPF/CNPJ digitado mesmo se cliente não foi encontrado
            destinatario: (() => {
              // Se tem cliente encontrado, usar dados do cliente
              if (clienteData) {
                return {
                  documento: clienteData.documento_cliente,
                  nome: clienteData.nome_cliente
                };
              }
              // Se tem CPF/CNPJ digitado mas cliente não encontrado, usar o digitado
              if (cpfCnpjNota && cpfCnpjNota.trim()) {
                return {
                  documento: cpfCnpjNota.replace(/\D/g, ''), // Apenas números
                  nome: 'CONSUMIDOR'
                };
              }
              // Sem documento = consumidor não identificado
              return {};
            })(),
            produtos: carrinho.filter(item => !item.isDevolucao).map(item => ({
              codigo: item.produto.codigo, // Código real do produto (SEM FALLBACK)
              descricao: item.produto.nome,
              quantidade: item.quantidade,
              valor_unitario: item.produto.preco,
              // ✅ CORREÇÃO: Para venda sem produto, usar unidade_medida diretamente
              unidade: item.vendaSemProduto ? item.produto.unidade_medida : item.produto.unidade_medida?.sigla,
              ncm: item.produto.ncm, // NCM real do produto (SEM FALLBACK)
              cfop: item.produto.cfop, // CFOP real do produto (SEM FALLBACK)
              codigo_barras: item.produto.codigo_barras, // Código de barras real (SEM FALLBACK)
              adicionais: item.adicionais || [] // ✅ NOVO: Incluir adicionais para NFC-e
            }))
          };

          // Dados NFC-e preparados

          setEtapaProcessamento('Emitindo NFC-e na SEFAZ...');

          // Chamar endpoint de emissão de NFC-e
          const requestData = {
            empresa_id: usuarioData.empresa_id,
            nfce_data: nfceData
          };



          const nfceResponse = await fetch('/backend/public/emitir-nfce.php', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestData)
          });



          if (!nfceResponse.ok) {
            console.error('❌ [EMISSÃO NFC-e] Resposta com erro HTTP:', nfceResponse.status);

            // ✅ CORREÇÃO: Capturar e mostrar erro específico do backend
            let errorResponse;
            try {
              errorResponse = await nfceResponse.text();
            } catch (textError) {
              console.error('❌ [EMISSÃO NFC-e] Erro ao ler resposta de erro:', textError);
              throw new Error(`Erro HTTP ${nfceResponse.status}: ${nfceResponse.statusText}`);
            }

            // Tentar fazer parse JSON da resposta de erro
            try {
              const errorJson = JSON.parse(errorResponse);

              // ✅ CORREÇÃO: Mostrar mensagem específica do backend
              const mensagemErro = errorJson.error || errorJson.message || 'Erro desconhecido do backend';
              throw new Error(mensagemErro);
            } catch (jsonError) {
              // ✅ CORREÇÃO: Se jsonError for a mensagem específica, usar ela
              if (jsonError instanceof Error && jsonError.message.includes('Status')) {
                throw jsonError; // Re-lançar o erro específico
              }

              // ✅ CORREÇÃO: Verificar se errorResponse contém mensagem específica
              if (errorResponse.includes('ERRO:') || errorResponse.includes('Status')) {
                throw new Error(errorResponse);
              }

              // Se não conseguir fazer parse, mostrar resposta bruta (limitada)
              const mensagemErro = errorResponse.length > 200
                ? errorResponse.substring(0, 200) + '...'
                : errorResponse;
              throw new Error(`Erro de comunicação: ${mensagemErro}`);
            }
          }

          // Processar resposta de sucesso
          let nfceResult;
          try {
            const responseText = await nfceResponse.text();

            nfceResult = JSON.parse(responseText);
          } catch (parseError) {
            console.error('❌ [EMISSÃO NFC-e] Erro ao parsear resposta de sucesso:', parseError);
            throw new Error('Resposta inválida do servidor de NFC-e');
          }

          if (!nfceResult.success) {
            console.error('❌ [EMISSÃO NFC-e] Backend retornou erro:', nfceResult);
            // ✅ CORREÇÃO: Mostrar mensagem específica do backend sem prefixo genérico
            throw new Error(nfceResult.error || 'Erro desconhecido na emissão da NFC-e');
          }

          setStatusProcessamento('sucesso');
          setEtapaProcessamento('NFC-e emitida com sucesso!');

          // Atualizar registro da venda com dados da NFC-e
          const updateData = {
            // ✅ NOVO: Não atualizar numero_documento - já foi salvo no início
            chave_nfe: nfceResult.data.chave,
            protocolo_nfe: nfceResult.data.protocolo,
            status_fiscal: 'autorizada', // ✅ NFC-e autorizada com sucesso
            erro_fiscal: null, // ✅ Limpar qualquer erro anterior
            data_emissao_nfe: nfceResult.data.data_autorizacao
            // ✅ CORREÇÃO: xml_path e pdf_path removidos - arquivos salvos localmente em /root/nexo-pedidos/backend/storage
          };

          const { error: updateError } = await supabase
            .from('pdv')
            .update(updateData)
            .eq('id', vendaId);

          if (updateError) {
            // Não interrompe o processo, pois a NFC-e já foi emitida
          } else {
            // Venda atualizada com dados da NFC-e
          }

          // Para NFC-e, fechar automaticamente após 2 segundos de sucesso
          await new Promise(resolve => setTimeout(resolve, 2000));

        } catch (nfceError) {
          setStatusProcessamento('erro');

          // ✅ CORREÇÃO: Usar mensagem específica do erro
          const mensagemErroEspecifica = (nfceError as Error).message;

          // ✅ NOVO: Atualizar venda com status pendente quando há erro na NFC-e
          try {
            const { error: updateError } = await supabase
              .from('pdv')
              .update({
                status_fiscal: 'pendente', // ✅ Marcar como pendente para correção
                erro_fiscal: mensagemErroEspecifica // ✅ Salvar erro para análise
              })
              .eq('id', vendaId);

            if (updateError) {
              // Erro ao atualizar status da venda
            } else {
              // Venda marcada como pendente devido ao erro na NFC-e
            }
          } catch (updateError) {
            // Erro ao atualizar venda com erro
          }

          // ✅ NOVO: Mostrar modal de erro e parar aqui
          setErroProcessamento(mensagemErroEspecifica);
          setEtapaProcessamento(`Erro na NFC-e: ${mensagemErroEspecifica}`);
          setStatusProcessamento('erro');

          // ✅ NOVO: Limpar carrinho silenciosamente (sem toast de sucesso)
          setCarrinho([]);
          setClienteSelecionado(null);
          setShowFinalizacaoFinal(false);
          limparPagamentosParciaisSilencioso();
          setCpfCnpjNota('');
          setClienteEncontrado(null);
          setTipoDocumento('cpf');
          setPedidosImportados([]);
          setDescontoPrazoSelecionado(null);

          // ✅ NOVO: Limpar observação da venda
          setObservacaoVenda('');

          // ✅ NOVO: Limpar TODOS os estados dos modais mesmo em caso de erro
          setNomeCliente('');
          setComandaNumero('');
          setMesaNumero('');
          setNomeClienteTemp('');
          setComandaNumeroTemp('');
          setMesaNumeroTemp('');
          setProdutoAguardandoNomeCliente(null);
          setQuantidadeAguardandoNomeCliente(1);
          setVendaSemProdutoAguardandoNomeCliente(null);
          setProdutoAguardandoComandaMesa(null);
          setQuantidadeAguardandoComandaMesa(1);
          setVendaSemProdutoAguardandoComandaMesa(null);
          setProdutoAguardandoVendedor(null);
          setQuantidadeAguardandoVendedor(1);
          setVendaSemProdutoAguardando(null);
          setAguardandoSelecaoVendedor(false);
          setProdutoParaQuantidade(null);
          setQuantidadeModal(1);
          setQuantidadeModalInput('1');

          // ✅ CORREÇÃO: Limpar venda em andamento se houver erro
          if (vendaEmAndamento) {
            setVendaEmAndamento(null);
            setIsEditingVenda(false);
          }

          clearPDVState();

          // ✅ NOVO: Atualizar contador de NFC-e pendentes
          loadContadorNfcePendentes();

          // ✅ NOVO: Parar aqui - não mostrar mensagem de sucesso
          return;
        }
      }

      // VERIFICAR SE É FINALIZAÇÃO COM IMPRESSÃO
      if (tipoFinalizacao === 'finalizar_com_impressao') {
        setEtapaProcessamento('Carregando dados da empresa...');

        try {
          // Buscar dados da empresa para impressão
          const { data: empresaData } = await supabase
            .from('empresas')
            .select('*')
            .eq('id', usuarioData.empresa_id)
            .single();

          if (!empresaData) {
            throw new Error('Dados da empresa não encontrados para impressão');
          }

          setEtapaProcessamento('Preparando cupom para impressão...');

          // Preparar dados completos para impressão
          const dadosImpressaoCompletos = {
            venda: {
              id: vendaId,
              numero: numeroVenda,
              data: new Date().toLocaleString('pt-BR'),
              valor_total: valorTotal,
              valor_subtotal: valorSubtotal,
              valor_desconto: valorDesconto,
              valor_desconto_itens: Math.round(calcularDescontoItens() * 100) / 100,
              valor_desconto_total: Math.round(descontoGlobal * 100) / 100,
              observacao_venda: observacaoVenda || null // ✅ CORREÇÃO: Incluir observação da venda
            },
            empresa: {
              razao_social: empresaData.razao_social,
              nome_fantasia: empresaData.nome_fantasia,
              cnpj: empresaData.documento,
              inscricao_estadual: empresaData.inscricao_estadual,
              endereco: `${empresaData.endereco}, ${empresaData.numero}`,
              bairro: empresaData.bairro,
              cidade: empresaData.cidade,
              uf: empresaData.estado,
              cep: empresaData.cep,
              telefone: empresaData.telefone
            },
            cliente: clienteData || {},
            vendedor: vendedorSelecionado || null, // Incluir dados do vendedor principal
            vendedores: (() => {
              // Coletar todos os vendedores únicos do carrinho
              const vendedoresUnicos = new Map();
              carrinho.forEach(item => {
                if (item.vendedor_id && item.vendedor_nome) {
                  vendedoresUnicos.set(item.vendedor_id, item.vendedor_nome);
                }
              });
              return Array.from(vendedoresUnicos.entries()).map(([id, nome]) => ({ id, nome }));
            })(),
            operador: userData || null, // Incluir dados do operador (usuário atual)
            itens: carrinho.filter(item => !item.isDevolucao).map(item => ({
              codigo: item.produto.codigo,
              nome: item.descricaoSabores ?
                `${item.produto.nome}\n${item.descricaoSabores}` :
                item.produto.nome, // ✅ NOVO: Incluir sabores na impressão
              quantidade: item.quantidade,
              valor_unitario: item.produto.preco,
              valor_total: item.subtotal,
              unidade: item.vendaSemProduto ? 'UN' : (item.produto.unidade_medida?.sigla || 'UN'), // ✅ NOVO: Incluir unidade de medida do carrinho
              vendedor_id: item.vendedor_id || null,
              vendedor_nome: item.vendedor_nome || null,
              adicionais: item.adicionais || [], // ✅ NOVO: Incluir adicionais
              sabores: item.sabores || null // ✅ NOVO: Incluir sabores para referência
            })),
            pagamento: pagamentoData,
            timestamp: new Date().toISOString(),
            tipo: 'cupom_nao_fiscal' // Identificar tipo
          };

          // Salvar dados de impressão no estado
          setDadosImpressao(dadosImpressaoCompletos);

          console.log('🖨️ FRONTEND: Dados preparados, aguardando ação do usuário');
          setEtapaProcessamento('Venda finalizada com sucesso! Deseja imprimir o cupom?');
          setStatusProcessamento('aguardando_impressao');

          // NÃO continuar automaticamente - aguardar ação do usuário no modal
          return;

        } catch (impressaoError) {
          console.error('❌ FRONTEND: Erro na preparação da impressão:', impressaoError);
          // Continuar sem impressão
          setEtapaProcessamento('Erro na preparação da impressão, mas venda foi salva com sucesso');
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }

      // ✅ NOVO: VERIFICAR SE É NFC-e COM IMPRESSÃO
      if (tipoFinalizacao === 'nfce_com_impressao') {
        console.log('🖨️ FRONTEND: NFC-e emitida com sucesso, preparando dados para impressão');
        setEtapaProcessamento('Carregando dados da empresa para impressão...');

        try {
          // Buscar dados da empresa para impressão
          const { data: empresaData } = await supabase
            .from('empresas')
            .select('*')
            .eq('id', usuarioData.empresa_id)
            .single();

          if (!empresaData) {
            throw new Error('Dados da empresa não encontrados para impressão');
          }

          console.log('🏢 FRONTEND: Dados da empresa carregados para impressão da NFC-e:', empresaData.razao_social);
          setEtapaProcessamento('Preparando cupom da NFC-e para impressão...');

          // Buscar dados atualizados da venda (com chave da NFC-e)
          const { data: vendaAtualizada } = await supabase
            .from('pdv')
            .select('*')
            .eq('id', vendaId)
            .single();

          // Preparar dados completos para impressão da NFC-e
          const dadosImpressaoNfce = {
            venda: {
              id: vendaId,
              numero: numeroVenda,
              data: new Date().toLocaleString('pt-BR'),
              valor_total: valorTotal,
              valor_subtotal: valorSubtotal,
              valor_desconto: valorDesconto,
              valor_desconto_itens: Math.round(calcularDescontoItens() * 100) / 100,
              valor_desconto_total: Math.round(descontoGlobal * 100) / 100,
              chave_nfe: vendaAtualizada?.chave_nfe || null,
              numero_nfe: vendaAtualizada?.numero_documento || null,
              serie_nfe: serieDocumentoReservado, // ✅ CORREÇÃO: Usar série do modal que já está correta
              protocolo_nfe: vendaAtualizada?.protocolo_nfe || null,
              data_emissao: vendaAtualizada?.data_emissao_nfe ? new Date(vendaAtualizada.data_emissao_nfe).toLocaleDateString('pt-BR') : new Date().toLocaleDateString('pt-BR'),
              hora_emissao: vendaAtualizada?.data_emissao_nfe ? new Date(vendaAtualizada.data_emissao_nfe).toLocaleTimeString('pt-BR') : new Date().toLocaleTimeString('pt-BR'),
              data_autorizacao: vendaAtualizada?.data_emissao_nfe ? new Date(vendaAtualizada.data_emissao_nfe).toLocaleDateString('pt-BR') : new Date().toLocaleDateString('pt-BR'),
              hora_autorizacao: vendaAtualizada?.data_emissao_nfe ? new Date(vendaAtualizada.data_emissao_nfe).toLocaleTimeString('pt-BR') : new Date().toLocaleTimeString('pt-BR'),
              observacao_venda: observacaoVenda || null // ✅ CORREÇÃO: Incluir observação da venda
            },
            empresa: {
              razao_social: empresaData.razao_social,
              nome_fantasia: empresaData.nome_fantasia,
              cnpj: empresaData.documento,
              inscricao_estadual: empresaData.inscricao_estadual,
              endereco: `${empresaData.endereco}, ${empresaData.numero}`,
              bairro: empresaData.bairro,
              cidade: empresaData.cidade,
              uf: empresaData.estado,
              cep: empresaData.cep,
              telefone: empresaData.telefone
            },
            cliente: {
              ...clienteData,
              documento_cliente: vendaAtualizada?.documento_cliente || clienteData?.documento_cliente || null
            },
            vendedor: vendedorSelecionado || null, // Incluir dados do vendedor principal
            vendedores: (() => {
              // Coletar todos os vendedores únicos do carrinho
              const vendedoresUnicos = new Map();
              carrinho.forEach(item => {
                if (item.vendedor_id && item.vendedor_nome) {
                  vendedoresUnicos.set(item.vendedor_id, item.vendedor_nome);
                }
              });
              return Array.from(vendedoresUnicos.entries()).map(([id, nome]) => ({ id, nome }));
            })(),
            operador: userData || null, // Incluir dados do operador (usuário atual)
            itens: carrinho.filter(item => !item.isDevolucao).map(item => ({
              codigo: item.produto.codigo,
              nome: item.descricaoSabores ?
                `${item.produto.nome}\n${item.descricaoSabores}` :
                item.produto.nome, // ✅ NOVO: Incluir sabores na impressão
              quantidade: item.quantidade,
              valor_unitario: item.produto.preco,
              valor_total: item.subtotal,
              unidade: item.vendaSemProduto ? 'UN' : (item.produto.unidade_medida?.sigla || 'UN'), // ✅ NOVO: Incluir unidade de medida do carrinho
              vendedor_id: item.vendedor_id || null,
              vendedor_nome: item.vendedor_nome || null,
              adicionais: item.adicionais || [], // ✅ NOVO: Incluir adicionais
              sabores: item.sabores || null // ✅ NOVO: Incluir sabores para referência
            })),
            pagamento: pagamentoData,
            timestamp: new Date().toISOString(),
            tipo: 'nfce' // Identificar que é NFC-e
          };

          // Salvar dados de impressão no estado
          setDadosImpressao(dadosImpressaoNfce);

          console.log('🖨️ FRONTEND: Dados da NFC-e preparados, aguardando ação do usuário');
          setEtapaProcessamento('NFC-e emitida com sucesso! Deseja imprimir o cupom fiscal?');
          setStatusProcessamento('aguardando_impressao');

          // NÃO continuar automaticamente - aguardar ação do usuário no modal
          return;

        } catch (impressaoError) {
          console.error('❌ FRONTEND: Erro na preparação da impressão da NFC-e:', impressaoError);
          // Continuar sem impressão
          setEtapaProcessamento('NFC-e emitida com sucesso, mas erro na preparação da impressão');
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }

      // SUCESSO CONFIRMADO!
      const mensagemSucesso = (() => {
        if (tipoFinalizacao === 'nfce_com_impressao') {
          return 'Venda finalizada e NFC-e emitida com sucesso!';
        } else if (tipoFinalizacao.startsWith('nfce_')) {
          return 'Venda finalizada e NFC-e emitida com sucesso!';
        } else if (tipoFinalizacao === 'finalizar_com_impressao') {
          return 'Venda finalizada e impressa com sucesso!';
        } else {
          return 'Venda finalizada com sucesso!';
        }
      })();

      setEtapaProcessamento(mensagemSucesso);
      await new Promise(resolve => setTimeout(resolve, 1500));

      // Fechar modal de processamento
      setShowProcessandoVenda(false);

      // Mostrar sucesso
      const toastMessage = (() => {
        if (tipoFinalizacao === 'nfce_com_impressao') {
          return `Venda #${numeroVenda} finalizada e NFC-e emitida com sucesso!`;
        } else if (tipoFinalizacao.startsWith('nfce_')) {
          return `Venda #${numeroVenda} finalizada e NFC-e emitida com sucesso!`;
        } else if (tipoFinalizacao === 'finalizar_com_impressao') {
          return `Venda #${numeroVenda} finalizada e impressa com sucesso!`;
        } else {
          return `Venda #${numeroVenda} finalizada com sucesso!`;
        }
      })();

      toast.success(toastMessage);

      // Disparar evento customizado para atualizar modal de movimentos
      window.dispatchEvent(new CustomEvent('vendaPdvFinalizada', {
        detail: {
          vendaId: vendaId,
          numeroVenda: numeroVenda,
          empresaId: usuarioData.empresa_id,
          valorTotal: valorTotal
        }
      }));

      // ✅ MARCAR PEDIDO DO CARDÁPIO DIGITAL COMO FATURADO
      await marcarPedidoCardapioComoFaturado(vendaId, numeroVenda);

      // ✅ NOVO: PROCESSAR TROCA PENDENTE (se aplicável)
      if (isVendaComTroca && devolucaoAplicada && devolucaoAplicada.codigo_troca) {
        setEtapaProcessamento('Processando troca pendente...');
        try {
          const { error: updateTrocaError } = await supabase
            .from('devolucoes')
            .update({
              status: 'processada',
              processada_em: new Date().toISOString(),
              processada_por_usuario_id: userData.user.id,
              venda_processamento_id: vendaId, // ✅ NOVO: ID da venda que processou a devolução
              venda_processamento_numero: numeroVenda, // ✅ NOVO: Número da venda que processou a devolução
              observacoes: `Troca processada automaticamente - Venda #${numeroVenda}`
            })
            .eq('codigo_troca', devolucaoAplicada.codigo_troca)
            .eq('empresa_id', usuarioData.empresa_id)
            .eq('status', 'pendente');

          if (updateTrocaError) {
            console.error('❌ Erro ao processar troca:', updateTrocaError);
            // Não interrompe o processo, apenas loga o erro
          } else {
            console.log('✅ Troca processada com sucesso:', devolucaoAplicada.codigo_troca);
            console.log('✅ Venda de processamento registrada:', { vendaId, numeroVenda });
          }
        } catch (trocaError) {
          console.error('❌ Erro inesperado ao processar troca:', trocaError);
          // Não interrompe o processo
        }
      }

      // ✅ NOVO: Limpar venda em andamento (adaptado do sistema de rascunhos NFe)
      setVendaEmAndamento(null);
      setIsEditingVenda(false);

      // Limpar todos os estados
      setCarrinho([]);
      setClienteSelecionado(null);
      setVendedorSelecionado(null); // ✅ IMPORTANTE: Limpar vendedor selecionado
      setShowFinalizacaoFinal(false);
      limparPagamentosParciaisSilencioso(); // Versão silenciosa para não mostrar toast duplicado
      setCpfCnpjNota('');
      setClienteEncontrado(null);
      setTipoDocumento('cpf');
      setPedidosImportados([]);
      setDescontoPrazoSelecionado(null);

      // ✅ NOVO: Limpar observação da venda
      setObservacaoVenda('');

      // ✅ NOVO: Limpar estados de troca/devolução
      setIsVendaComTroca(false);
      setDevolucaoAplicada(null);
      setDescontoGlobal(0);

      // ✅ NOVO: Limpar TODOS os estados dos modais para nova venda
      setNomeCliente('');
      setComandaNumero('');
      setMesaNumero('');

      // Limpar estados temporários dos modais
      setNomeClienteTemp('');
      setComandaNumeroTemp('');
      setMesaNumeroTemp('');

      // Limpar produtos aguardando modais
      setProdutoAguardandoNomeCliente(null);
      setQuantidadeAguardandoNomeCliente(1);
      setVendaSemProdutoAguardandoNomeCliente(null);
      setProdutoAguardandoComandaMesa(null);
      setQuantidadeAguardandoComandaMesa(1);
      setVendaSemProdutoAguardandoComandaMesa(null);

      // Limpar estados do modal de vendedor
      setProdutoAguardandoVendedor(null);
      setQuantidadeAguardandoVendedor(1);
      setVendaSemProdutoAguardando(null);
      setAguardandoSelecaoVendedor(false);

      // Limpar estados do modal de quantidade
      setProdutoParaQuantidade(null);
      setQuantidadeModal(1);
      setQuantidadeModalInput('1');

      clearPDVState();

      // Recarregar estoque se necessário
      if (pdvConfig?.baixa_estoque_pdv) {
        loadEstoque();
      }

      // Atualizar contador de NFC-e pendentes se foi uma venda com NFC-e
      if (tipoFinalizacao.startsWith('nfce_')) {
        loadContadorNfcePendentes();
      }

    } catch (error) {
      console.error('Erro ao finalizar venda:', error);

      // ✅ CORREÇÃO: Não sobrescrever erros específicos da NFC-e
      const mensagemErro = (error as Error).message;

      // Se o erro já foi tratado pela NFC-e, não sobrescrever
      if (statusProcessamento === 'erro') {
        return;
      }

      setEtapaProcessamento('ERRO INESPERADO: ' + mensagemErro);
      await new Promise(resolve => setTimeout(resolve, 3000));
      setShowProcessandoVenda(false);
      toast.error('Erro inesperado ao finalizar venda');
    }
  };

  // Função para executar impressão
  const executarImpressao = async () => {
    if (!dadosImpressao) {
      console.error('❌ FRONTEND: Dados de impressão não encontrados');
      return;
    }

    try {
      console.log('🖨️ FRONTEND: Iniciando impressão...');
      console.log('🖨️ FRONTEND: Tipo de impressão:', dadosImpressao.tipo);
      setEtapaProcessamento('Enviando para impressão...');
      setStatusProcessamento('processando');

      // Verificar tipo de impressão e usar função apropriada
      if (dadosImpressao.tipo === 'nfce') {
        console.log('📄 FRONTEND: Imprimindo cupom da NFC-e');
        await gerarEImprimirCupomNfce(dadosImpressao);
      } else {
        console.log('🧾 FRONTEND: Imprimindo cupom não fiscal');
        await gerarEImprimirCupom(dadosImpressao);
      }

      // Aguardar um pouco para a impressão ser processada
      await new Promise(resolve => setTimeout(resolve, 2000));

      console.log('✅ FRONTEND: Impressão concluída com sucesso');
      finalizarProcessamento();

    } catch (impressaoError) {
      console.error('❌ FRONTEND: Erro na impressão:', impressaoError);
      setEtapaProcessamento('Erro na impressão: ' + impressaoError.message);
      await new Promise(resolve => setTimeout(resolve, 2000));
      finalizarProcessamento();
    }
  };

  // Função para finalizar sem impressão
  const finalizarSemImpressao = () => {
    console.log('✅ FRONTEND: Finalizando sem impressão');
    finalizarProcessamento();
  };

  // ✅ NOVA: Função para reimprimir cupom
  const reimprimirCupom = async (venda: any) => {
    try {
      console.log('🖨️ FRONTEND: Iniciando reimpressão de cupom para venda:', venda.numero_venda);

      // Buscar dados do usuário atual
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        throw new Error('Usuário não autenticado');
      }

      const { data: usuarioData } = await supabase
        .from('usuarios')
        .select('empresa_id')
        .eq('id', userData.user.id)
        .single();

      if (!usuarioData) {
        throw new Error('Dados do usuário não encontrados');
      }

      // Verificar se é uma venda com NFC-e autorizada
      if (venda.tentativa_nfce && venda.status_fiscal === 'autorizada' && venda.chave_nfe) {
        console.log('📄 FRONTEND: Venda com NFC-e autorizada - buscando PDF');
        await reimprimirNfcePdf(venda, usuarioData);
      } else {
        console.log('🧾 FRONTEND: Venda sem NFC-e - gerando cupom não fiscal');
        await reimprimirCupomNaoFiscal(venda, usuarioData);
      }

    } catch (error) {
      console.error('❌ FRONTEND: Erro na reimpressão:', error);
      toast.error('Erro ao reimprimir cupom: ' + error.message);
    }
  };

  // Função para reimprimir NFC-e (como cupom fiscal)
  const reimprimirNfcePdf = async (venda: any, usuarioData: any) => {
    try {
      console.log('📄 FRONTEND: Gerando cupom NFC-e para venda:', venda.numero_venda);

      toast.info('Preparando NFC-e para impressão...');

      // Buscar dados da empresa
      const { data: empresaData } = await supabase
        .from('empresas')
        .select('*')
        .eq('id', usuarioData.empresa_id)
        .single();

      if (!empresaData) {
        throw new Error('Dados da empresa não encontrados');
      }

      // Buscar itens da venda
      const { data: itensData, error: itensError } = await supabase
        .from('pdv_itens')
        .select('*')
        .eq('pdv_id', venda.id)
        .eq('empresa_id', usuarioData.empresa_id);

      if (itensError) {
        throw new Error('Erro ao carregar itens da venda');
      }

      if (!itensData || itensData.length === 0) {
        throw new Error('Nenhum item encontrado para esta venda');
      }

      console.log('📦 FRONTEND: Itens carregados:', itensData.length);

      // Buscar dados do vendedor principal se existir
      let vendedorData = null;
      if (venda.usuario_id) {
        const { data: vendedorInfo } = await supabase
          .from('usuarios')
          .select('id, nome')
          .eq('id', venda.usuario_id)
          .single();

        if (vendedorInfo) {
          vendedorData = {
            id: vendedorInfo.id,
            nome: vendedorInfo.nome
          };
        }
      }

      // ✅ NOVO: Buscar todos os vendedores da venda (do campo vendedores_ids)
      let vendedoresData = [];
      if (venda.vendedores_ids && Array.isArray(venda.vendedores_ids) && venda.vendedores_ids.length > 0) {
        const { data: vendedoresInfo } = await supabase
          .from('usuarios')
          .select('id, nome')
          .in('id', venda.vendedores_ids);

        if (vendedoresInfo && vendedoresInfo.length > 0) {
          vendedoresData = vendedoresInfo.map(v => ({
            id: v.id,
            nome: v.nome
          }));
        }
      }

      // ✅ NOVO: Buscar vendedores dos itens individuais
      const vendedoresItens = new Map();
      for (const item of itensData) {
        if (item.vendedor_id) {
          if (!vendedoresItens.has(item.vendedor_id)) {
            const { data: vendedorItem } = await supabase
              .from('usuarios')
              .select('id, nome')
              .eq('id', item.vendedor_id)
              .single();

            if (vendedorItem) {
              vendedoresItens.set(item.vendedor_id, vendedorItem.nome);
            }
          }
        }
      }

      // ✅ NOVO: Usar dados de pagamento da própria venda (salvos na tabela pdv)
      console.log('💳 FRONTEND: Dados de pagamento da venda:', {
        tipo_pagamento: venda.tipo_pagamento,
        forma_pagamento_id: venda.forma_pagamento_id,
        formas_pagamento: venda.formas_pagamento,
        valor_pago: venda.valor_pago,
        valor_troco: venda.valor_troco
      });

      let dadosPagamento = null;

      // Os dados de pagamento estão salvos diretamente na tabela pdv
      if (venda.tipo_pagamento) {
        if (venda.tipo_pagamento === 'vista' && venda.forma_pagamento_id) {
          // Pagamento à vista - incluir formas_pagamento se existir (para parcelamento)
          dadosPagamento = {
            tipo_pagamento: 'vista',
            forma_pagamento_id: venda.forma_pagamento_id,
            formas_pagamento: venda.formas_pagamento || null, // ✅ CORREÇÃO: Incluir dados expandidos
            valor_pago: venda.valor_pago || venda.valor_total,
            valor_troco: venda.valor_troco || 0
          };
        } else if (venda.tipo_pagamento === 'parcial' && venda.formas_pagamento) {
          // Pagamento parcial (múltiplas formas)
          dadosPagamento = {
            tipo_pagamento: 'parcial',
            formas_pagamento: venda.formas_pagamento,
            valor_pago: venda.valor_pago || venda.valor_total,
            valor_troco: venda.valor_troco || 0
          };
        }
        console.log('💳 FRONTEND: Dados de pagamento preparados:', dadosPagamento);
      } else {
        console.log('⚠️ FRONTEND: Nenhum pagamento encontrado para a venda');
      }

      // Preparar dados para impressão da NFC-e
      const dadosImpressaoNfce = {
        venda: {
          id: venda.id,
          numero: venda.numero_venda,
          data: venda.data_venda ? new Date(venda.data_venda).toLocaleString('pt-BR') :
                venda.created_at ? new Date(venda.created_at).toLocaleString('pt-BR') :
                new Date().toLocaleString('pt-BR'),
          valor_total: venda.valor_total,
          valor_subtotal: venda.valor_subtotal || venda.valor_total,
          valor_desconto: venda.valor_desconto || 0,
          valor_desconto_itens: venda.valor_desconto_itens || 0,
          valor_desconto_total: venda.valor_desconto_total || 0,
          chave_nfe: venda.chave_nfe,
          numero_nfe: venda.numero_documento || null,
          serie_nfe: venda.serie_documento || '001', // ✅ CORREÇÃO: Manter fallback aqui pois não temos acesso ao usuário
          protocolo_nfe: venda.protocolo_nfe || null,
          data_emissao: venda.data_emissao_nfe ? new Date(venda.data_emissao_nfe).toLocaleDateString('pt-BR') : new Date().toLocaleDateString('pt-BR'),
          hora_emissao: venda.data_emissao_nfe ? new Date(venda.data_emissao_nfe).toLocaleTimeString('pt-BR') : new Date().toLocaleTimeString('pt-BR'),
          data_autorizacao: venda.data_emissao_nfe ? new Date(venda.data_emissao_nfe).toLocaleDateString('pt-BR') : new Date().toLocaleDateString('pt-BR'),
          hora_autorizacao: venda.data_emissao_nfe ? new Date(venda.data_emissao_nfe).toLocaleTimeString('pt-BR') : new Date().toLocaleTimeString('pt-BR'),
          observacao_venda: venda.observacao_venda || null // ✅ CORREÇÃO: Incluir observação da venda do banco
        },
        empresa: {
          razao_social: empresaData.razao_social,
          nome_fantasia: empresaData.nome_fantasia,
          cnpj: empresaData.documento,
          inscricao_estadual: empresaData.inscricao_estadual,
          endereco: `${empresaData.endereco}, ${empresaData.numero}`,
          bairro: empresaData.bairro,
          cidade: empresaData.cidade,
          uf: empresaData.estado,
          cep: empresaData.cep,
          telefone: empresaData.telefone
        },
        cliente: {
          nome_cliente: venda.nome_cliente,
          documento_cliente: venda.documento_cliente
        },
        vendedor: vendedorData, // Incluir dados do vendedor principal
        vendedores: vendedoresData, // ✅ NOVO: Incluir todos os vendedores da venda
        itens: itensData.map(item => ({
          codigo: item.codigo_produto || 'N/A',
          nome: item.descricao_sabores ?
            `${item.nome_produto}\n${item.descricao_sabores}` :
            item.nome_produto, // ✅ NOVO: Incluir sabores na reimpressão
          quantidade: item.quantidade,
          valor_unitario: item.valor_unitario,
          valor_total: item.valor_total_item || item.valor_total || (item.quantidade * item.valor_unitario),
          unidade: item.unidade || 'UN', // ✅ NOVO: Incluir unidade de medida para impressão
          vendedor_id: item.vendedor_id || null, // ✅ NOVO: ID do vendedor do item
          vendedor_nome: vendedoresItens.get(item.vendedor_id) || null, // ✅ NOVO: Nome do vendedor do item
          sabores: item.sabores_json ? JSON.parse(item.sabores_json) : null // ✅ NOVO: Incluir sabores para referência
        })),
        pagamento: dadosPagamento, // ✅ NOVO: Incluir dados de pagamento
        timestamp: new Date().toISOString(),
        tipo: 'nfce' // Identificar que é NFC-e
      };



      // Gerar e imprimir cupom da NFC-e
      await gerarEImprimirCupomNfce(dadosImpressaoNfce);

    } catch (error) {
      console.error('❌ FRONTEND: Erro ao gerar cupom da NFC-e:', error);
      throw error;
    }
  };

  // Função para reimprimir cupom não fiscal
  const reimprimirCupomNaoFiscal = async (venda: any, usuarioData: any) => {
    try {
      console.log('🧾 FRONTEND: Gerando cupom não fiscal para venda:', venda.numero_venda);

      // Buscar dados da empresa
      const { data: empresaData } = await supabase
        .from('empresas')
        .select('*')
        .eq('id', usuarioData.empresa_id)
        .single();

      if (!empresaData) {
        throw new Error('Dados da empresa não encontrados');
      }

      // Buscar itens da venda
      const { data: itensData, error: itensError } = await supabase
        .from('pdv_itens')
        .select('*')
        .eq('pdv_id', venda.id)
        .eq('empresa_id', usuarioData.empresa_id);

      if (itensError) {
        throw new Error('Erro ao carregar itens da venda');
      }

      if (!itensData || itensData.length === 0) {
        throw new Error('Nenhum item encontrado para esta venda');
      }

      console.log('📦 FRONTEND: Itens carregados:', itensData.length);

      // Buscar dados do vendedor principal se existir
      let vendedorData = null;
      if (venda.usuario_id) {
        const { data: vendedorInfo } = await supabase
          .from('usuarios')
          .select('id, nome')
          .eq('id', venda.usuario_id)
          .single();

        if (vendedorInfo) {
          vendedorData = {
            id: vendedorInfo.id,
            nome: vendedorInfo.nome
          };
        }
      }

      // ✅ NOVO: Buscar todos os vendedores da venda (do campo vendedores_ids)
      let vendedoresDataCupom = [];
      if (venda.vendedores_ids && Array.isArray(venda.vendedores_ids) && venda.vendedores_ids.length > 0) {
        const { data: vendedoresInfo } = await supabase
          .from('usuarios')
          .select('id, nome')
          .in('id', venda.vendedores_ids);

        if (vendedoresInfo && vendedoresInfo.length > 0) {
          vendedoresDataCupom = vendedoresInfo.map(v => ({
            id: v.id,
            nome: v.nome
          }));
        }
      }

      // ✅ NOVO: Buscar vendedores dos itens individuais
      const vendedoresItensCupom = new Map();
      for (const item of itensData) {
        if (item.vendedor_id) {
          if (!vendedoresItensCupom.has(item.vendedor_id)) {
            const { data: vendedorItem } = await supabase
              .from('usuarios')
              .select('id, nome')
              .eq('id', item.vendedor_id)
              .single();

            if (vendedorItem) {
              vendedoresItensCupom.set(item.vendedor_id, vendedorItem.nome);
            }
          }
        }
      }

      // ✅ NOVO: Usar dados de pagamento da própria venda (salvos na tabela pdv)
      console.log('💳 FRONTEND: Dados de pagamento para cupom não fiscal:', {
        tipo_pagamento: venda.tipo_pagamento,
        forma_pagamento_id: venda.forma_pagamento_id,
        formas_pagamento: venda.formas_pagamento,
        valor_pago: venda.valor_pago,
        valor_troco: venda.valor_troco
      });

      let dadosPagamentoCupom = null;

      // Os dados de pagamento estão salvos diretamente na tabela pdv
      if (venda.tipo_pagamento) {
        if (venda.tipo_pagamento === 'vista' && venda.forma_pagamento_id) {
          // Pagamento à vista - incluir formas_pagamento se existir (para parcelamento)
          dadosPagamentoCupom = {
            tipo_pagamento: 'vista',
            forma_pagamento_id: venda.forma_pagamento_id,
            formas_pagamento: venda.formas_pagamento || null, // ✅ CORREÇÃO: Incluir dados expandidos
            valor_pago: venda.valor_pago || venda.valor_total,
            valor_troco: venda.valor_troco || 0
          };
        } else if (venda.tipo_pagamento === 'parcial' && venda.formas_pagamento) {
          // Pagamento parcial (múltiplas formas)
          dadosPagamentoCupom = {
            tipo_pagamento: 'parcial',
            formas_pagamento: venda.formas_pagamento,
            valor_pago: venda.valor_pago || venda.valor_total,
            valor_troco: venda.valor_troco || 0
          };
        }
        console.log('💳 FRONTEND: Dados de pagamento preparados para cupom:', dadosPagamentoCupom);
      } else {
        console.log('⚠️ FRONTEND: Nenhum pagamento encontrado para o cupom não fiscal');
      }

      // Preparar dados para impressão
      const dadosImpressao = {
        venda: {
          id: venda.id,
          numero: venda.numero_venda,
          data: venda.data_venda ? new Date(venda.data_venda).toLocaleString('pt-BR') :
                venda.created_at ? new Date(venda.created_at).toLocaleString('pt-BR') :
                new Date().toLocaleString('pt-BR'),
          valor_total: venda.valor_total,
          valor_subtotal: venda.valor_subtotal || venda.valor_total,
          valor_desconto: venda.valor_desconto || 0,
          valor_desconto_itens: venda.valor_desconto_itens || 0,
          valor_desconto_total: venda.valor_desconto_total || 0,
          observacao_venda: venda.observacao_venda || null // ✅ CORREÇÃO: Incluir observação da venda do banco
        },
        empresa: {
          razao_social: empresaData.razao_social,
          nome_fantasia: empresaData.nome_fantasia,
          cnpj: empresaData.documento,
          inscricao_estadual: empresaData.inscricao_estadual,
          endereco: `${empresaData.endereco}, ${empresaData.numero}`,
          bairro: empresaData.bairro,
          cidade: empresaData.cidade,
          uf: empresaData.estado,
          cep: empresaData.cep,
          telefone: empresaData.telefone
        },
        cliente: {
          nome_cliente: venda.nome_cliente,
          documento_cliente: venda.documento_cliente
        },
        vendedor: vendedorData, // Incluir dados do vendedor principal
        vendedores: vendedoresDataCupom, // ✅ NOVO: Incluir todos os vendedores da venda
        itens: itensData.map(item => ({
          codigo: item.codigo_produto || 'N/A',
          nome: item.descricao_sabores ?
            `${item.nome_produto}\n${item.descricao_sabores}` :
            item.nome_produto, // ✅ NOVO: Incluir sabores salvos no banco para reimpressão
          quantidade: item.quantidade,
          valor_unitario: item.valor_unitario,
          valor_total: item.valor_total_item || item.valor_total || (item.quantidade * item.valor_unitario),
          unidade: item.unidade || 'UN', // ✅ NOVO: Incluir unidade de medida para impressão
          vendedor_id: item.vendedor_id || null, // ✅ NOVO: ID do vendedor do item
          vendedor_nome: vendedoresItensCupom.get(item.vendedor_id) || null, // ✅ NOVO: Nome do vendedor do item
          sabores: item.sabores_json ? JSON.parse(item.sabores_json) : null // ✅ NOVO: Incluir sabores para referência
        })),
        pagamento: dadosPagamentoCupom, // ✅ NOVO: Incluir dados de pagamento
        timestamp: new Date().toISOString()
      };

      console.log('🖨️ FRONTEND: Dados preparados para reimpressão');

      // Gerar e imprimir cupom
      await gerarEImprimirCupom(dadosImpressao);

    } catch (error) {
      console.error('❌ FRONTEND: Erro ao gerar cupom não fiscal:', error);
      throw error;
    }
  };

  // Função auxiliar para gerar e imprimir cupom da NFC-e
  const gerarEImprimirCupomNfce = async (dadosImpressao: any) => {
    try {
      // ✅ NOVO: Detectar tipo de impressão configurado
      const tipoImpressao80mm = pdvConfig?.tipo_impressao_80mm ?? true;
      const tipoImpressao50mm = pdvConfig?.tipo_impressao_50mm ?? false;

      console.log('🖨️ Tipo de impressão detectado:', {
        '80mm': tipoImpressao80mm,
        '50mm': tipoImpressao50mm
      });

      // ✅ DEBUG: Verificar dados de impressão
      console.log('📋 Dados de impressão NFC-e:', {
        vendedor: dadosImpressao.vendedor,
        vendedores: dadosImpressao.vendedores,
        operador: dadosImpressao.operador,
        pagamento: dadosImpressao.pagamento,
        cliente: dadosImpressao.cliente
      });



      // Função para formatar moeda
      const formatCurrency = (value: number) => {
        return new Intl.NumberFormat('pt-BR', {
          style: 'currency',
          currency: 'BRL'
        }).format(value);
      };

      // Função para formatar chave NFe
      const formatarChaveNfe = (chave: string) => {
        if (!chave || chave.length !== 44) return chave;
        return chave.replace(/(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})(\d{4})/,
          '$1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11');
      };

      // ✅ CORREÇÃO: Determinar tipo de impressão baseado na configuração
      const usarImpressao50mm = pdvConfig?.tipo_impressao_50mm === true && pdvConfig?.tipo_impressao_80mm === false;

      console.log('🖨️ Configuração de impressão NFC-e:', {
        'config_50mm': pdvConfig?.tipo_impressao_50mm,
        'config_80mm': pdvConfig?.tipo_impressao_80mm,
        'usar_50mm': usarImpressao50mm,
        'pdvConfig_completo': pdvConfig
      });

      console.log('🖨️ TIPO DE IMPRESSÃO DETECTADO:', usarImpressao50mm ? '50MM' : '80MM');

      // ✅ NOVO: Gerar CSS responsivo baseado no tipo de impressão
      const gerarCSSImpressao = () => {
        if (usarImpressao50mm) {
          // CSS otimizado para impressão 50mm (compacta)
          return `
            @media print {
              @page { margin: 0; size: 50mm auto; }
              body { margin: 0; }
            }
            body {
              font-family: 'Courier New', monospace;
              font-size: 10px; /* Aumentada de 9px para 10px para melhor legibilidade */
              font-weight: 600; /* Aumentado de 500 para 600 para impressão mais forte */
              color: #000000;
              text-shadow: 0.5px 0 0 currentColor, 0 0.5px 0 currentColor; /* Text-shadow mais forte */
              line-height: 1.1;
              letter-spacing: 0.1px;
              margin: 3px;
              max-width: 42mm;
              -webkit-print-color-adjust: exact; /* Força cores na impressão */
              print-color-adjust: exact;
            }
            .center { text-align: center; }
            .bold { font-weight: 900; font-size: 11px; } /* Aumentado para melhor destaque */
            .linha { border-top: 2px dashed #000; margin: 3px 0; } /* Linha mais grossa para 50mm */
            .item { margin: 1px 0; }
            .item-linha {
              display: flex;
              justify-content: space-between;
              font-size: 9px; /* Aumentado de 8px para 9px */
              font-weight: 600; /* Peso maior para melhor impressão */
              word-wrap: break-word;
            }
            .chave {
              font-size: 8px; /* Aumentado de 7px para 8px */
              font-weight: 600;
              word-break: break-all;
              line-height: 1.1;
            }
            .empresa-info {
              font-size: 9px; /* Aumentado de 8px para 9px */
              font-weight: 600;
              line-height: 1.1;
            }
            .qr-code { width: 80px !important; height: 80px !important; }
            .total-section { font-size: 11px; font-weight: 900; } /* Aumentado para destaque */
            .valor-monetario { white-space: nowrap; font-weight: 700; } /* Peso maior para valores */
          `;
        } else {
          // CSS para impressão 80mm - PREVINE SCALING DO NAVEGADOR
          return `
            @media print {
              @page {
                margin: 0;
                size: 3.15in auto; /* 80mm = 3.15 polegadas - mais compatível */
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
              }
              html {
                width: 3.15in !important; /* 80mm em polegadas */
                margin: 0 !important;
                padding: 0 !important;
                font-size: 12pt !important; /* Tamanho em pontos para impressão */
              }
              body {
                margin: 0 !important;
                padding: 0.1in !important; /* Padding em polegadas */
                width: 3.15in !important;
                min-width: 3.15in !important;
                max-width: 3.15in !important;
                transform: scale(1) !important;
                transform-origin: top left !important;
                zoom: 1 !important;
                -webkit-transform: scale(1) !important;
                -moz-transform: scale(1) !important;
                -ms-transform: scale(1) !important;
                -o-transform: scale(1) !important;
              }
              * {
                -webkit-print-color-adjust: exact !important;
                print-color-adjust: exact !important;
                color-adjust: exact !important;
                box-sizing: border-box !important;
                max-width: none !important; /* Previne redimensionamento automático */
                overflow: visible !important;
              }
            }
            @media screen {
              body {
                width: 3.15in !important; /* 80mm em polegadas para tela */
                min-width: 3.15in !important;
                max-width: 3.15in !important;
              }
            }
            html, body {
              width: 3.15in !important; /* 80mm = 3.15 polegadas */
              max-width: 3.15in !important;
              min-width: 3.15in !important;
              margin: 0 !important;
              padding: 0 !important;
              box-sizing: border-box !important;
              zoom: 1 !important;
              transform: none !important;
              -webkit-text-size-adjust: 100% !important; /* Previne ajuste automático */
              -ms-text-size-adjust: 100% !important;
            }
            body {
              font-family: 'Courier New', monospace;
              font-size: 12px; /* Fonte original */
              font-weight: 600; /* Aumentado de 500 para 600 para melhor impressão */
              color: #000000;
              text-shadow: 0.4px 0 0 currentColor; /* Aumentado de 0.3px para 0.4px */
              line-height: 1.2;
              letter-spacing: 0.2px; /* Espaçamento original */
              padding: 0.1in !important; /* Padding em polegadas - MANTÉM */
              width: 3.15in !important;
              max-width: 3.15in !important;
              min-width: 3.15in !important;
              box-sizing: border-box !important;
              overflow-x: hidden !important;
              background: white !important;
              word-wrap: break-word !important;
              -webkit-text-size-adjust: none !important; /* Força tamanho fixo - MANTÉM */
              -moz-text-size-adjust: none !important;
              -ms-text-size-adjust: none !important;
            }
            .center {
              text-align: center;
            }
            .bold {
              font-weight: 900; /* Peso original */
            }
            .linha {
              border-top: 1px dashed #000; /* Linha original */
              margin: 5px 0; /* Margem original */
            }
            .item {
              margin: 2px 0; /* Margem original */
            }
            .item-linha {
              display: flex;
              justify-content: space-between;
            }
            .chave {
              font-size: 10px; /* Tamanho original */
              word-break: break-all;
            }
            .empresa-info {
              font-size: 12px; /* Tamanho original */
            }
            .qr-code {
              width: 120px !important; /* QR Code original */
              height: 120px !important;
            }
            .total-section {
              font-size: 14px; /* Tamanho original */
            }
            .valor-monetario {
              white-space: nowrap;
              font-weight: 700; /* Peso original */
            }
          `;
        }
      };

      // Criar HTML formatado para impressão da NFC-e
      const htmlCupomNfce = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>NFC-e - ${dadosImpressao.venda.numero}</title>
          <style>
            ${gerarCSSImpressao()}
          </style>
        </head>
        <body>
          <div class="center empresa-info">
            <div class="bold">${dadosImpressao.empresa.razao_social}</div>
            ${dadosImpressao.empresa.nome_fantasia ? `<div>${dadosImpressao.empresa.nome_fantasia}</div>` : ''}
            <div>CNPJ: ${dadosImpressao.empresa.cnpj}</div>
            ${dadosImpressao.empresa.inscricao_estadual ? `<div>IE: ${dadosImpressao.empresa.inscricao_estadual}</div>` : ''}
            <div>${dadosImpressao.empresa.endereco}</div>
            <div>${dadosImpressao.empresa.bairro} - ${dadosImpressao.empresa.cidade}/${dadosImpressao.empresa.uf}</div>
            <div>CEP: ${dadosImpressao.empresa.cep}</div>
            ${dadosImpressao.empresa.telefone ? `<div>Tel: ${dadosImpressao.empresa.telefone}</div>` : ''}
          </div>

          <div class="linha"></div>

          <div class="center bold">NOTA FISCAL DE CONSUMIDOR ELETRÔNICA</div>
          <div class="center bold">NFC-e</div>
          <div class="center">Venda: ${dadosImpressao.venda.numero}</div>
          <div class="center">${dadosImpressao.venda.data}</div>

          ${dadosImpressao.cliente?.nome_cliente || dadosImpressao.vendedor?.nome ? `
            <div class="linha"></div>
            ${dadosImpressao.cliente?.nome_cliente ? `
              <div class="center">
                <div class="bold">CLIENTE: ${dadosImpressao.cliente.nome_cliente}</div>
                ${dadosImpressao.cliente.documento_cliente ? `<div>Doc: ${dadosImpressao.cliente.documento_cliente}</div>` : ''}
              </div>
            ` : ''}
            ${(() => {
              // Se há múltiplos vendedores, mostrar todos separados por /
              if (dadosImpressao.vendedores && dadosImpressao.vendedores.length > 1) {
                const nomesVendedores = dadosImpressao.vendedores.map(v => v.nome).join(' / ');
                return `
                  <div class="center">
                    <div class="bold">VENDEDORES: ${nomesVendedores}</div>
                  </div>
                `;
              }
              // Se há apenas um vendedor, mostrar normalmente
              else if (dadosImpressao.vendedor?.nome) {
                return `
                  <div class="center">
                    <div class="bold">VENDEDOR: ${dadosImpressao.vendedor.nome}</div>
                  </div>
                `;
              }
              return '';
            })()}
          ` : ''}

          <div class="linha"></div>

          ${dadosImpressao.itens.map(item => {
            // ✅ NOVO: Formatar nome com sabores em linhas separadas e unidade na mesma linha
            const formatarNomeComSabores = (nome, unidade) => {
              if (nome.includes('\n')) {
                const linhas = nome.split('\n');
                const nomePrincipal = linhas[0];
                const sabores = linhas.slice(1);

                return `
                  <div class="bold">${nomePrincipal} <span style="font-size: 10px;">(${unidade})</span></div>
                  ${sabores.map(sabor => `<div style="font-size: 11px; color: #666; margin-left: 5px;">${sabor}</div>`).join('')}
                `;
              }
              return `<div class="bold">${nome} <span style="font-size: 10px;">(${unidade})</span></div>`;
            };

            return `
            <div class="item">
              <div>
                ${formatarNomeComSabores(item.nome, item.unidade)}
              </div>
              <div class="item-linha">
                <span>${item.quantidade} x ${formatCurrency(item.valor_unitario)}</span>
                <span class="valor-monetario">${formatCurrency(item.valor_total)}</span>
              </div>
              ${(() => {
                // ✅ NOVO: Mostrar adicionais identados abaixo do produto principal
                let adicionaisHtml = '';
                if (item.adicionais && item.adicionais.length > 0) {
                  adicionaisHtml = item.adicionais.map(adicional => `
                    <div style="margin-left: 15px; font-size: 10px; color: #666; margin-top: 1px; font-weight: bold;">
                      + ${adicional.quantidade}x ${adicional.nome} - ${formatCurrency(adicional.preco * adicional.quantidade)}
                    </div>
                  `).join('');
                }

                // Mostrar vendedor do item apenas se há múltiplos vendedores na venda
                let vendedorHtml = '';
                if (dadosImpressao.vendedores && dadosImpressao.vendedores.length > 1 && item.vendedor_nome) {
                  vendedorHtml = `<div style="font-size: 10px; color: #000; margin-top: 2px; font-weight: 900;"><strong>Vendedor: ${item.vendedor_nome}</strong></div>`;
                }

                return adicionaisHtml + vendedorHtml;
              })()}
            </div>`;
          }).join('')}


          <div class="linha"></div>

          ${dadosImpressao.venda.valor_desconto > 0 ? `
            <div class="item-linha">
              <span>Subtotal:</span>
              <span>${formatCurrency(dadosImpressao.venda.valor_subtotal)}</span>
            </div>
            <div class="item-linha">
              <span>Desconto:</span>
              <span>-${formatCurrency(dadosImpressao.venda.valor_desconto)}</span>
            </div>
          ` : ''}

          <div class="item-linha bold total-section" style="margin: 5px 0;">
            <span>TOTAL:</span>
            <span class="valor-monetario">${formatCurrency(dadosImpressao.venda.valor_total)}</span>
          </div>

          ${dadosImpressao.pagamento && dadosImpressao.pagamento.tipo_pagamento ? `
            ${dadosImpressao.pagamento.tipo_pagamento === 'vista' && dadosImpressao.pagamento.forma_pagamento_id ? `
              ${(() => {
                const forma = formasPagamento.find(f => f.id === dadosImpressao.pagamento.forma_pagamento_id);
                return forma ? `
                  <div class="item-linha">
                    <span>${forma.nome}:</span>
                    <span>${formatCurrency(dadosImpressao.pagamento.valor_pago)}</span>
                  </div>
                ` : '';
              })()}
            ` : ''}
            ${dadosImpressao.pagamento.tipo_pagamento === 'parcial' && dadosImpressao.pagamento.formas_pagamento ? `
              ${dadosImpressao.pagamento.formas_pagamento.map(pag => {
                const forma = formasPagamento.find(f => f.id === (pag.forma_id || pag.forma));
                return forma ? `
                  <div class="item-linha">
                    <span>${forma.nome}:</span>
                    <span>${formatCurrency(pag.valor)}</span>
                  </div>
                ` : '';
              }).join('')}
            ` : ''}
            ${dadosImpressao.pagamento.valor_troco && dadosImpressao.pagamento.valor_troco > 0 ? `
              <div class="item-linha bold" style="margin-top: 3px;">
                <span>TROCO:</span>
                <span>${formatCurrency(dadosImpressao.pagamento.valor_troco)}</span>
              </div>
            ` : ''}
          ` : ''}

          ${(() => {
            // ✅ NOVO: EXIBIR OBSERVAÇÃO DA VENDA APÓS FORMAS DE PAGAMENTO
            const observacaoVenda = dadosImpressao.venda.observacao_venda;
            if (observacaoVenda && observacaoVenda.trim()) {
              return `
                <div class="linha"></div>
                <div class="center bold" style="font-size: 12px; margin: 5px 0;">OBSERVAÇÃO</div>
                <div class="center" style="font-size: 11px; margin: 3px 0; word-wrap: break-word;">
                  ${observacaoVenda}
                </div>
              `;
            }
            return '';
          })()}

          ${(() => {
            // ✅ EXIBIR DESCONTOS DETALHADOS APÓS FORMAS DE PAGAMENTO
            const descontoItens = dadosImpressao.venda.valor_desconto_itens || 0;
            const descontoTotal = dadosImpressao.venda.valor_desconto_total || 0;

            if (descontoItens > 0 || descontoTotal > 0) {
              return `
                <div class="linha"></div>
                <div class="center bold" style="font-size: 12px; margin: 5px 0;">DETALHAMENTO DOS DESCONTOS</div>
                ${descontoItens > 0 ? `
                  <div class="item-linha" style="font-size: 11px;">
                    <span>Desconto nos Itens:</span>
                    <span class="bold">-${formatCurrency(descontoItens)}</span>
                  </div>
                ` : ''}
                ${descontoTotal > 0 ? `
                  <div class="item-linha" style="font-size: 11px;">
                    <span>Desconto no Total:</span>
                    <span class="bold">-${formatCurrency(descontoTotal)}</span>
                  </div>
                ` : ''}
              `;
            }
            return '';
          })()}

          ${(() => {
            // ✅ NOVO: EXIBIR DETALHAMENTO DO PARCELAMENTO PARA CARTÃO DE CRÉDITO
            if (dadosImpressao.pagamento?.formas_pagamento) {
              const formasComParcelamento = dadosImpressao.pagamento.formas_pagamento.filter(forma =>
                forma.parcelas && forma.parcelas > 1 && forma.valor_parcela
              );

              if (formasComParcelamento.length > 0) {
                return `
                  <div class="linha"></div>
                  <div class="center bold" style="font-size: 12px; margin: 5px 0;">DETALHAMENTO DO PARCELAMENTO</div>
                  ${formasComParcelamento.map(forma => `
                    <div class="item-linha" style="font-size: 11px;">
                      <span>${forma.forma_nome}:</span>
                      <span class="bold">${forma.parcelas}x de ${formatCurrency(forma.valor_parcela)}</span>
                    </div>
                  `).join('')}
                `;
              }
            }
            return '';
          })()}

          ${(() => {
            // ✅ NOVO: EXIBIR OBSERVAÇÃO DA VENDA NA ÚLTIMA POSIÇÃO
            const observacaoVenda = dadosImpressao.venda.observacao_venda;
            if (observacaoVenda && observacaoVenda.trim()) {
              return `
                <div class="linha"></div>
                <div class="center bold" style="font-size: 12px; margin: 5px 0;">OBSERVAÇÃO</div>
                <div class="center" style="font-size: 11px; margin: 3px 0; word-wrap: break-word;">
                  ${observacaoVenda}
                </div>
              `;
            }
            return '';
          })()}

          <div class="linha"></div>

          <div class="center">
            <div class="bold">INFORMAÇÕES FISCAIS</div>
            <div>Documento autorizado pela SEFAZ</div>
            ${dadosImpressao.venda.chave_nfe ? `
              <div class="chave">
                <div>Chave de Acesso:</div>
                <div>${formatarChaveNfe(dadosImpressao.venda.chave_nfe)}</div>
              </div>
            ` : ''}

            ${dadosImpressao.venda.chave_nfe ? `
              <div style="margin: 10px 0;">
                <div>Consulte pela Chave de Acesso em:</div>
                <div style="font-size: 10px;">https://www.homologacao.nfce.fazenda.sp.gov.br/NFCeConsultaPublica</div>

                ${dadosImpressao.cliente?.documento_cliente ? `
                  <div style="margin: 5px 0;">
                    <div class="bold">CONSUMIDOR - ${dadosImpressao.cliente.documento_cliente.length === 11 ? 'CPF' : 'CNPJ'} ${dadosImpressao.cliente.documento_cliente.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4').replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, '$1.$2.$3/$4-$5')}</div>
                    <div>NFC-e n. ${dadosImpressao.venda.numero_nfe || 'N/A'} Série ${String(dadosImpressao.venda.serie_nfe || '001').padStart(3, '0')} ${dadosImpressao.venda.data_emissao || new Date().toLocaleDateString('pt-BR')} ${dadosImpressao.venda.hora_emissao || new Date().toLocaleTimeString('pt-BR')}</div>
                  </div>
                ` : `
                  <div style="margin: 5px 0;">
                    <div>NFC-e n. ${dadosImpressao.venda.numero_nfe || 'N/A'} Série ${String(dadosImpressao.venda.serie_nfe || '001').padStart(3, '0')} ${dadosImpressao.venda.data_emissao || new Date().toLocaleDateString('pt-BR')} ${dadosImpressao.venda.hora_emissao || new Date().toLocaleTimeString('pt-BR')}</div>
                  </div>
                `}

                ${dadosImpressao.venda.protocolo_nfe ? `
                  <div style="margin: 5px 0;">
                    <div>Protocolo de Autorização: ${dadosImpressao.venda.protocolo_nfe}</div>
                    <div>Data de Autorização: ${dadosImpressao.venda.data_autorizacao || new Date().toLocaleDateString('pt-BR')} ${dadosImpressao.venda.hora_autorizacao || new Date().toLocaleTimeString('pt-BR')}</div>
                  </div>
                ` : ''}

                <div style="margin: 5px 0;">
                  <img src="https://api.qrserver.com/v1/create-qr-code/?size=${usarImpressao50mm ? '80x80' : '120x120'}&data=${encodeURIComponent(dadosImpressao.venda.chave_nfe)}"
                       alt="QR Code NFC-e"
                       class="qr-code"
                       style="margin: 5px auto; display: block;">
                </div>

                <div style="font-size: 10px;">Tributos Totais Incidentes (Lei Federal 12.741/2012): R$ ----</div>
                <div style="font-size: 10px;">NFC-e emitida pelo Sistema Nexo PDV</div>
              </div>
            ` : ''}
          </div>

          <div class="linha"></div>

          <div class="center">
            <div>${pdvConfig?.rodape_personalizado || 'Obrigado pela preferencia volte sempre!'}</div>
          </div>

          <script>
            window.onload = function() {
              window.print();
              setTimeout(function() {
                window.close();
              }, 1000);
            };
          </script>
        </body>
        </html>
      `;

      // Abrir janela de impressão
      const janelaImpressao = window.open('', '_blank', 'width=400,height=600');
      if (janelaImpressao) {
        janelaImpressao.document.write(htmlCupomNfce);
        janelaImpressao.document.close();
        console.log('✅ FRONTEND: Janela de impressão da NFC-e aberta');
        toast.success('NFC-e enviada para impressão!');
      } else {
        throw new Error('Não foi possível abrir janela de impressão. Verifique se pop-ups estão bloqueados.');
      }

    } catch (error) {
      console.error('❌ FRONTEND: Erro ao gerar cupom da NFC-e:', error);
      throw error;
    }
  };

  // Função auxiliar para gerar e imprimir cupom (reutilizada)
  const gerarEImprimirCupom = async (dadosImpressao: any) => {
    try {
      // ✅ CORREÇÃO: Determinar tipo de impressão baseado na configuração
      const usarImpressao50mm = pdvConfig?.tipo_impressao_50mm === true && pdvConfig?.tipo_impressao_80mm === false;

      console.log('🖨️ Cupom não fiscal - Configuração de impressão:', {
        'config_50mm': pdvConfig?.tipo_impressao_50mm,
        'config_80mm': pdvConfig?.tipo_impressao_80mm,
        'usar_50mm': usarImpressao50mm,
        'pdvConfig_completo': pdvConfig
      });

      console.log('🖨️ CUPOM NÃO FISCAL - TIPO DE IMPRESSÃO DETECTADO:', usarImpressao50mm ? '50MM' : '80MM');

      // ✅ DEBUG: Verificar dados de impressão cupom
      console.log('📋 Dados de impressão cupom:', {
        vendedor: dadosImpressao.vendedor,
        vendedores: dadosImpressao.vendedores,
        operador: dadosImpressao.operador,
        pagamento: dadosImpressao.pagamento,
        cliente: dadosImpressao.cliente
      });



      // Função para formatar moeda
      const formatCurrency = (value: number) => {
        return new Intl.NumberFormat('pt-BR', {
          style: 'currency',
          currency: 'BRL'
        }).format(value);
      };

      // ✅ NOVO: Gerar CSS responsivo baseado no tipo de impressão (reutilizando a mesma função)
      const gerarCSSImpressaoCupom = () => {
        if (usarImpressao50mm) {
          // CSS otimizado para impressão 50mm (compacta)
          return `
            @media print {
              @page { margin: 0; size: 50mm auto; }
              body { margin: 0; }
            }
            body {
              font-family: 'Courier New', monospace;
              font-size: 10px; /* Aumentada de 9px para 10px para melhor legibilidade */
              font-weight: 600; /* Aumentado de 500 para 600 para impressão mais forte */
              color: #000000;
              text-shadow: 0.5px 0 0 currentColor, 0 0.5px 0 currentColor; /* Text-shadow mais forte */
              line-height: 1.1;
              letter-spacing: 0.1px;
              margin: 3px;
              max-width: 42mm;
              -webkit-print-color-adjust: exact; /* Força cores na impressão */
              print-color-adjust: exact;
            }
            .center { text-align: center; }
            .bold { font-weight: 900; font-size: 11px; } /* Aumentado para melhor destaque */
            .linha { border-top: 2px dashed #000; margin: 3px 0; } /* Linha mais grossa para 50mm */
            .item { margin: 1px 0; }
            .item-linha {
              display: flex;
              justify-content: space-between;
              font-size: 9px; /* Aumentado de 8px para 9px */
              font-weight: 600; /* Peso maior para melhor impressão */
              word-wrap: break-word;
            }
            .empresa-info {
              font-size: 9px; /* Aumentado de 8px para 9px */
              font-weight: 600;
              line-height: 1.1;
            }
            .total-section { font-size: 11px; font-weight: 900; } /* Aumentado para destaque */
            .valor-monetario { white-space: nowrap; font-weight: 700; } /* Peso maior para valores */
          `;
        } else {
          // CSS para impressão 80mm - PREVINE SCALING DO NAVEGADOR
          return `
            @media print {
              @page {
                margin: 0;
                size: 3.15in auto; /* 80mm = 3.15 polegadas - mais compatível */
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
              }
              html {
                width: 3.15in !important; /* 80mm em polegadas */
                margin: 0 !important;
                padding: 0 !important;
                font-size: 12pt !important; /* Tamanho em pontos para impressão */
              }
              body {
                margin: 0 !important;
                padding: 0.1in !important; /* Padding em polegadas */
                width: 3.15in !important;
                min-width: 3.15in !important;
                max-width: 3.15in !important;
                transform: scale(1) !important;
                transform-origin: top left !important;
                zoom: 1 !important;
                -webkit-transform: scale(1) !important;
                -moz-transform: scale(1) !important;
                -ms-transform: scale(1) !important;
                -o-transform: scale(1) !important;
              }
              * {
                -webkit-print-color-adjust: exact !important;
                print-color-adjust: exact !important;
                color-adjust: exact !important;
                box-sizing: border-box !important;
                max-width: none !important; /* Previne redimensionamento automático */
                overflow: visible !important;
              }
            }
            @media screen {
              body {
                width: 3.15in !important; /* 80mm em polegadas para tela */
                min-width: 3.15in !important;
                max-width: 3.15in !important;
              }
            }
            html, body {
              width: 3.15in !important; /* 80mm = 3.15 polegadas */
              max-width: 3.15in !important;
              min-width: 3.15in !important;
              margin: 0 !important;
              padding: 0 !important;
              box-sizing: border-box !important;
              zoom: 1 !important;
              transform: none !important;
              -webkit-text-size-adjust: 100% !important; /* Previne ajuste automático */
              -ms-text-size-adjust: 100% !important;
            }
            body {
              font-family: 'Courier New', monospace;
              font-size: 12px; /* Fonte original */
              font-weight: 600; /* Aumentado de 500 para 600 para melhor impressão */
              color: #000000;
              text-shadow: 0.4px 0 0 currentColor; /* Aumentado de 0.3px para 0.4px */
              line-height: 1.2;
              letter-spacing: 0.2px; /* Espaçamento original */
              padding: 0.1in !important; /* Padding em polegadas - MANTÉM */
              width: 3.15in !important;
              max-width: 3.15in !important;
              min-width: 3.15in !important;
              box-sizing: border-box !important;
              overflow-x: hidden !important;
              background: white !important;
              word-wrap: break-word !important;
              -webkit-text-size-adjust: none !important; /* Força tamanho fixo - MANTÉM */
              -moz-text-size-adjust: none !important;
              -ms-text-size-adjust: none !important;
            }
            .center {
              text-align: center;
            }
            .bold {
              font-weight: 900; /* Peso original */
            }
            .linha {
              border-top: 1px dashed #000; /* Linha original */
              margin: 5px 0; /* Margem original */
            }
            .item {
              margin: 2px 0; /* Margem original */
            }
            .item-linha {
              display: flex;
              justify-content: space-between;
            }
            .empresa-info {
              font-size: 12px; /* Tamanho original */
              font-weight: 600; /* Adicionado peso para melhor impressão */
            }
            .total-section {
              font-size: 14px; /* Tamanho original */
            }
            .valor-monetario {
              white-space: nowrap;
              font-weight: 700; /* Peso original */
            }
          `;
        }
      };

      // Criar HTML formatado para impressão
      const htmlCupom = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>Cupom - Venda ${dadosImpressao.venda.numero}</title>
          <style>
            ${gerarCSSImpressaoCupom()}
          </style>
        </head>
        <body>
          <div class="center empresa-info">
            ${pdvConfig?.mostrar_razao_social_cupom_finalizar ? `<div class="bold">${dadosImpressao.empresa.razao_social}</div>` : ''}
            ${dadosImpressao.empresa.nome_fantasia ? `<div class="bold">${dadosImpressao.empresa.nome_fantasia}</div>` : ''}
            <div>CNPJ: ${dadosImpressao.empresa.cnpj}</div>
            ${pdvConfig?.mostrar_endereco_cupom_finalizar ? `
              <div>${dadosImpressao.empresa.endereco}</div>
              <div>${dadosImpressao.empresa.bairro} - ${dadosImpressao.empresa.cidade}/${dadosImpressao.empresa.uf}</div>
              <div>CEP: ${dadosImpressao.empresa.cep}</div>
            ` : ''}
            ${dadosImpressao.empresa.telefone ? `<div>Tel: ${dadosImpressao.empresa.telefone}</div>` : ''}
          </div>

          <div class="linha"></div>

          <div class="center bold">CUPOM NÃO FISCAL</div>
          <div class="center">Venda: ${dadosImpressao.venda.numero}</div>
          <div class="center">${dadosImpressao.venda.data}</div>

          ${(dadosImpressao.cliente?.nome_cliente && pdvConfig?.seleciona_clientes) ||
            (dadosImpressao.vendedor?.nome && pdvConfig?.vendedor) ||
            (dadosImpressao.operador?.nome && pdvConfig?.mostrar_operador_cupom_finalizar) ? `
            <div class="linha"></div>
          ` : ''}

          ${dadosImpressao.cliente?.nome_cliente && pdvConfig?.seleciona_clientes ? `
            <div class="center">
              <div class="bold">CLIENTE: ${dadosImpressao.cliente.nome_cliente}</div>
              ${dadosImpressao.cliente.documento_cliente ? `<div>Doc: ${dadosImpressao.cliente.documento_cliente}</div>` : ''}
            </div>
          ` : ''}

          ${pdvConfig?.vendedor ? `
            ${(() => {
              // Se há múltiplos vendedores, mostrar todos separados por /
              if (dadosImpressao.vendedores && dadosImpressao.vendedores.length > 1) {
                const nomesVendedores = dadosImpressao.vendedores.map(v => v.nome).join(' / ');
                return `
                  <div class="center">
                    <div class="bold">VENDEDORES: ${nomesVendedores}</div>
                  </div>
                `;
              }
              // Se há apenas um vendedor, mostrar normalmente
              else if (dadosImpressao.vendedor?.nome) {
                return `
                  <div class="center">
                    <div class="bold">VENDEDOR: ${dadosImpressao.vendedor.nome}</div>
                  </div>
                `;
              }
              return '';
            })()}
          ` : ''}

          ${dadosImpressao.operador?.nome && pdvConfig?.mostrar_operador_cupom_finalizar ? `
            <div class="center">
              <div class="bold">OPERADOR: ${dadosImpressao.operador.nome}</div>
            </div>
          ` : ''}

          <div class="linha"></div>

          ${dadosImpressao.itens.map(item => {
            // ✅ NOVO: Formatar nome com sabores em linhas separadas e unidade na mesma linha
            const formatarNomeComSabores = (nome, unidade) => {
              if (nome.includes('\n')) {
                const linhas = nome.split('\n');
                const nomePrincipal = linhas[0];
                const sabores = linhas.slice(1);

                return `
                  <div class="bold">${nomePrincipal} <span style="font-size: 10px;">(${unidade})</span></div>
                  ${sabores.map(sabor => `<div style="font-size: 11px; color: #666; margin-left: 5px;">${sabor}</div>`).join('')}
                `;
              }
              return `<div class="bold">${nome} <span style="font-size: 10px;">(${unidade})</span></div>`;
            };

            return `
            <div class="item">
              <div>
                ${formatarNomeComSabores(item.nome, item.unidade)}
              </div>
              <div class="item-linha">
                <span>${item.quantidade} x ${formatCurrency(item.valor_unitario)}</span>
                <span class="valor-monetario">${formatCurrency(item.valor_total)}</span>
              </div>
              ${(() => {
                // ✅ NOVO: Mostrar adicionais identados abaixo do produto principal
                let adicionaisHtml = '';
                if (item.adicionais && item.adicionais.length > 0) {
                  adicionaisHtml = item.adicionais.map(adicional => `
                    <div style="margin-left: 15px; font-size: 10px; color: #666; margin-top: 1px; font-weight: bold;">
                      + ${adicional.quantidade}x ${adicional.nome} - ${formatCurrency(adicional.preco * adicional.quantidade)}
                    </div>
                  `).join('');
                }

                // Mostrar vendedor do item apenas se há múltiplos vendedores na venda
                let vendedorHtml = '';
                if (dadosImpressao.vendedores && dadosImpressao.vendedores.length > 1 && item.vendedor_nome) {
                  vendedorHtml = `<div style="font-size: 10px; color: #000; margin-top: 2px; font-weight: 900;"><strong>Vendedor: ${item.vendedor_nome}</strong></div>`;
                }

                return adicionaisHtml + vendedorHtml;
              })()}
            </div>`;
          }).join('')}


          <div class="linha"></div>

          ${dadosImpressao.venda.valor_desconto > 0 ? `
            <div class="item-linha">
              <span>Subtotal:</span>
              <span>${formatCurrency(dadosImpressao.venda.valor_subtotal)}</span>
            </div>
            <div class="item-linha">
              <span>Desconto:</span>
              <span>-${formatCurrency(dadosImpressao.venda.valor_desconto)}</span>
            </div>
          ` : ''}

          <div class="item-linha bold total-section" style="margin: 5px 0;">
            <span>TOTAL:</span>
            <span class="valor-monetario">${formatCurrency(dadosImpressao.venda.valor_total)}</span>
          </div>

          ${dadosImpressao.pagamento && dadosImpressao.pagamento.tipo_pagamento ? `
            ${dadosImpressao.pagamento.tipo_pagamento === 'vista' && dadosImpressao.pagamento.forma_pagamento_id ? `
              ${(() => {
                const forma = formasPagamento.find(f => f.id === dadosImpressao.pagamento.forma_pagamento_id);
                return forma ? `
                  <div class="item-linha">
                    <span>${forma.nome}:</span>
                    <span>${formatCurrency(dadosImpressao.pagamento.valor_pago)}</span>
                  </div>
                ` : '';
              })()}
            ` : ''}
            ${dadosImpressao.pagamento.tipo_pagamento === 'parcial' && dadosImpressao.pagamento.formas_pagamento ? `
              ${dadosImpressao.pagamento.formas_pagamento.map(pag => {
                const forma = formasPagamento.find(f => f.id === (pag.forma_id || pag.forma));
                return forma ? `
                  <div class="item-linha">
                    <span>${forma.nome}:</span>
                    <span>${formatCurrency(pag.valor)}</span>
                  </div>
                ` : '';
              }).join('')}
            ` : ''}
            ${dadosImpressao.pagamento.valor_troco && dadosImpressao.pagamento.valor_troco > 0 ? `
              <div class="item-linha bold" style="margin-top: 3px;">
                <span>TROCO:</span>
                <span>${formatCurrency(dadosImpressao.pagamento.valor_troco)}</span>
              </div>
            ` : ''}
          ` : ''}

          ${(() => {
            // ✅ EXIBIR DESCONTOS DETALHADOS APÓS FORMAS DE PAGAMENTO
            const descontoItens = dadosImpressao.venda.valor_desconto_itens || 0;
            const descontoTotal = dadosImpressao.venda.valor_desconto_total || 0;

            if (descontoItens > 0 || descontoTotal > 0) {
              return `
                <div class="linha"></div>
                <div class="center bold" style="font-size: 12px; margin: 5px 0;">DETALHAMENTO DOS DESCONTOS</div>
                ${descontoItens > 0 ? `
                  <div class="item-linha" style="font-size: 11px;">
                    <span>Desconto nos Itens:</span>
                    <span class="bold">-${formatCurrency(descontoItens)}</span>
                  </div>
                ` : ''}
                ${descontoTotal > 0 ? `
                  <div class="item-linha" style="font-size: 11px;">
                    <span>Desconto no Total:</span>
                    <span class="bold">-${formatCurrency(descontoTotal)}</span>
                  </div>
                ` : ''}
              `;
            }
            return '';
          })()}

          ${(() => {
            // ✅ NOVO: EXIBIR DETALHAMENTO DO PARCELAMENTO PARA CARTÃO DE CRÉDITO
            if (dadosImpressao.pagamento?.formas_pagamento) {
              const formasComParcelamento = dadosImpressao.pagamento.formas_pagamento.filter(forma =>
                forma.parcelas && forma.parcelas > 1 && forma.valor_parcela
              );

              if (formasComParcelamento.length > 0) {
                return `
                  <div class="linha"></div>
                  <div class="center bold" style="font-size: 12px; margin: 5px 0;">DETALHAMENTO DO PARCELAMENTO</div>
                  ${formasComParcelamento.map(forma => `
                    <div class="item-linha" style="font-size: 11px;">
                      <span>${forma.forma_nome}:</span>
                      <span class="bold">${forma.parcelas}x de ${formatCurrency(forma.valor_parcela)}</span>
                    </div>
                  `).join('')}
                `;
              }
            }
            return '';
          })()}

          ${(() => {
            // ✅ NOVO: EXIBIR OBSERVAÇÃO DA VENDA NA ÚLTIMA POSIÇÃO
            const observacaoVenda = dadosImpressao.venda.observacao_venda;
            if (observacaoVenda && observacaoVenda.trim()) {
              return `
                <div class="linha"></div>
                <div class="center bold" style="font-size: 12px; margin: 5px 0;">OBSERVAÇÃO</div>
                <div class="center" style="font-size: 11px; margin: 3px 0; word-wrap: break-word;">
                  ${observacaoVenda}
                </div>
              `;
            }
            return '';
          })()}

          <div class="linha"></div>

          <div class="center">
            <div>${pdvConfig?.rodape_personalizado || 'Obrigado pela preferencia volte sempre!'}</div>
          </div>

          <script>
            window.onload = function() {
              window.print();
              setTimeout(function() {
                window.close();
              }, 1000);
            };
          </script>
        </body>
        </html>
      `;

      // Abrir janela de impressão
      const janelaImpressao = window.open('', '_blank', 'width=400,height=600');
      if (janelaImpressao) {
        janelaImpressao.document.write(htmlCupom);
        janelaImpressao.document.close();
        console.log('✅ FRONTEND: Janela de impressão aberta');
        toast.success('Cupom enviado para impressão!');
      } else {
        throw new Error('Não foi possível abrir janela de impressão. Verifique se pop-ups estão bloqueados.');
      }

    } catch (error) {
      console.error('❌ FRONTEND: Erro ao gerar cupom:', error);
      throw error;
    }
  };

  // ✅ FUNÇÃO PARA GERAR E IMPRIMIR CUPOM DO CARDÁPIO DIGITAL
  const gerarEImprimirCupomCardapio = async (dadosImpressao: any, usarImpressao50mm: boolean = false) => {
    try {
      console.log('🖨️ [CARDAPIO-CUPOM] Gerando cupom do pedido:', dadosImpressao.pedido.numero);
      console.log('🖨️ [CARDAPIO-CUPOM] Tipo de impressão:', usarImpressao50mm ? '50MM' : '80MM');

      // Função para formatar moeda
      const formatCurrency = (value: number) => {
        return new Intl.NumberFormat('pt-BR', {
          style: 'currency',
          currency: 'BRL'
        }).format(value);
      };

      // Gerar CSS baseado no tipo de impressão
      const gerarCSSImpressao = () => {
        if (usarImpressao50mm) {
          // CSS para impressão 50mm
          return `
            @media print {
              @page {
                margin: 0;
                size: 1.97in auto; /* 50mm = 1.97 polegadas */
              }
              html {
                width: 1.97in !important;
                font-size: 10pt !important;
              }
              body {
                width: 1.97in !important;
                padding: 0.05in !important;
                transform: scale(1) !important;
                zoom: 1 !important;
              }
              * {
                max-width: none !important;
                overflow: visible !important;
                -webkit-text-size-adjust: none !important;
              }
            }

            @media screen {
              body {
                width: 1.97in !important;
              }
            }

            body {
              font-family: 'Courier New', monospace;
              font-size: 10px;
              font-weight: 600;
              color: #000000;
              text-shadow: 0.3px 0 0 currentColor;
              line-height: 1.1;
              letter-spacing: 0.1px;
              margin: 0;
              padding: 0.05in !important;
              -webkit-text-size-adjust: none !important;
            }
          `;
        } else {
          // CSS para impressão 80mm
          return `
            @media print {
              @page {
                margin: 0;
                size: 3.15in auto; /* 80mm = 3.15 polegadas */
              }
              html {
                width: 3.15in !important;
                font-size: 12pt !important;
              }
              body {
                width: 3.15in !important;
                padding: 0.1in !important;
                transform: scale(1) !important;
                zoom: 1 !important;
              }
              * {
                max-width: none !important;
                overflow: visible !important;
                -webkit-text-size-adjust: none !important;
              }
            }

            @media screen {
              body {
                width: 3.15in !important;
              }
            }

            body {
              font-family: 'Courier New', monospace;
              font-size: 12px;
              font-weight: 600;
              color: #000000;
              text-shadow: 0.3px 0 0 currentColor;
              line-height: 1.2;
              letter-spacing: 0.2px;
              margin: 0;
              padding: 0.1in !important;
              -webkit-text-size-adjust: none !important;
            }
          `;
        }
      };

      // Gerar HTML do cupom
      const htmlCupom = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>Pedido Cardápio Digital #${dadosImpressao.pedido.numero}</title>
          <style>
            ${gerarCSSImpressao()}

            .bold {
              font-weight: 900;
            }

            .center {
              text-align: center;
            }

            .linha {
              border-top: 1px dashed #000;
              margin: 5px 0;
            }

            .item {
              margin: 2px 0;
            }

            .item-linha {
              display: flex;
              justify-content: space-between;
            }

            .valor-monetario {
              font-weight: 900;
            }

            .total-section {
              font-size: ${usarImpressao50mm ? '12px' : '14px'} !important;
              border-top: 1px solid #000;
              border-bottom: 1px solid #000;
              padding: 3px 0;
            }

            .pagamento-section {
              font-size: ${usarImpressao50mm ? '11px' : '12px'} !important;
              margin: 5px 0;
            }

            .endereco-section {
              font-size: ${usarImpressao50mm ? '13px' : '15px'} !important;
              font-weight: 900;
              border: 2px solid #000;
              padding: 8px;
              margin: 8px 0;
              background-color: #f0f0f0;
            }

            .endereco-title {
              font-size: ${usarImpressao50mm ? '14px' : '16px'} !important;
              font-weight: 900;
              text-align: center;
              margin-bottom: 5px;
            }
          </style>
        </head>
        <body>
          <div class="center">
            <div class="bold">${dadosImpressao.empresa.razao_social}</div>
            ${dadosImpressao.empresa.nome_fantasia ? `<div class="bold">${dadosImpressao.empresa.nome_fantasia}</div>` : ''}
            <div>CNPJ: ${dadosImpressao.empresa.cnpj}</div>
            <div>${dadosImpressao.empresa.endereco}</div>
            <div>${dadosImpressao.empresa.bairro} - ${dadosImpressao.empresa.cidade}/${dadosImpressao.empresa.uf}</div>
            <div>CEP: ${dadosImpressao.empresa.cep}</div>
            ${dadosImpressao.empresa.telefone ? `<div>Tel: ${dadosImpressao.empresa.telefone}</div>` : ''}
          </div>

          <div class="linha"></div>

          <div class="center bold">PEDIDO CARDÁPIO DIGITAL</div>
          <div class="center">Pedido: ${dadosImpressao.pedido.numero}</div>
          <div class="center">${dadosImpressao.pedido.data}</div>
          <div class="center">Status: ${dadosImpressao.pedido.status.toUpperCase()}</div>
          ${dadosImpressao.pedido.tipo_entrega ? `<div class="center">Tipo: ${dadosImpressao.pedido.tipo_entrega.toUpperCase()}</div>` : ''}

          <div class="linha"></div>

          ${dadosImpressao.cliente?.nome_cliente ? `
            <div class="center">
              <div class="bold">CLIENTE: ${dadosImpressao.cliente.nome_cliente}</div>
              ${dadosImpressao.cliente.telefone_cliente ? `<div>Tel: ${dadosImpressao.cliente.telefone_cliente}</div>` : ''}
            </div>
            <div class="linha"></div>
          ` : ''}

          ${dadosImpressao.itens && dadosImpressao.itens.length > 0 ? dadosImpressao.itens.map(item => `
            <div class="item">
              <div class="bold">${item.produto_nome || item.nome || 'Item sem nome'}</div>
              <div class="item-linha">
                <span>${item.quantidade || 1} x ${formatCurrency(item.preco_unitario || item.preco || 0)}</span>
                <span class="valor-monetario">${formatCurrency(item.preco_total || ((item.quantidade || 1) * (item.preco_unitario || item.preco || 0)))}</span>
              </div>
              ${item.observacao ? `<div style="font-size: 10px; color: #666; margin-top: 1px;">Obs: ${item.observacao}</div>` : ''}
              ${item.sabores && item.sabores.length > 0 ? `
                <div style="font-size: ${usarImpressao50mm ? '8px' : '10px'}; color: #333; margin-top: 2px;">
                  ${item.sabores.length > 1 ? 'Sabores:' : 'Sabor:'}
                  ${item.sabores.map(sabor => {
                    const nomeSabor = sabor.produto?.nome || sabor.nome || 'Sabor';
                    if (item.sabores.length > 1) {
                      // Para múltiplos sabores, mostrar fração baseada na porcentagem
                      const fracao = sabor.porcentagem === 50 ? '1/2' :
                                   sabor.porcentagem === 33 ? '1/3' :
                                   sabor.porcentagem === 25 ? '1/4' :
                                   `${sabor.porcentagem}%`;
                      return `<div style="margin-left: 10px; margin-top: 1px;">• ${fracao} ${nomeSabor}</div>`;
                    } else {
                      return `<div style="margin-left: 10px; margin-top: 1px;">• ${nomeSabor}</div>`;
                    }
                  }).join('')}
                </div>
              ` : ''}
              ${item.adicionais && item.adicionais.length > 0 ? `
                <div style="font-size: 10px; color: #666; margin-top: 1px;">
                  Adicionais: ${item.adicionais.map(adicional => `${adicional.quantidade || 1}x ${adicional.nome}`).join(', ')}
                </div>
              ` : ''}
            </div>
          `).join('') : '<div class="item"><div class="bold">Nenhum item encontrado</div></div>'}

          <div class="linha"></div>

          <!-- Subtotal e Taxa de Entrega -->
          ${dadosImpressao.pedido.valor_produtos && dadosImpressao.pedido.valor_taxa_entrega ? `
            <div class="item-linha">
              <span>Subtotal Produtos:</span>
              <span class="valor-monetario">${formatCurrency(dadosImpressao.pedido.valor_produtos)}</span>
            </div>
            <div class="item-linha">
              <span>Taxa de Entrega:</span>
              <span class="valor-monetario">${formatCurrency(dadosImpressao.pedido.valor_taxa_entrega)}</span>
            </div>
            <div class="linha"></div>
          ` : ''}

          <div class="item-linha bold total-section">
            <span>TOTAL:</span>
            <span class="valor-monetario">${formatCurrency(dadosImpressao.pedido.valor_total)}</span>
          </div>

          <!-- Forma de Pagamento -->
          ${dadosImpressao.pagamento?.forma_pagamento_nome ? `
            <div class="pagamento-section">
              <div class="bold">FORMA DE PAGAMENTO</div>
              <div>${dadosImpressao.pagamento.forma_pagamento_nome}${(() => {
                // Se for dinheiro, mostrar informações de troco
                if (dadosImpressao.pagamento.forma_pagamento_tipo === 'dinheiro') {
                  const detalhes = dadosImpressao.pagamento.forma_pagamento_detalhes;
                  if (detalhes) {
                    if (detalhes.precisa_troco === false) {
                      return ' (SEM TROCO)';
                    } else if (detalhes.precisa_troco === true && detalhes.troco > 0) {
                      return ` (Troco ${formatCurrency(detalhes.troco)})`;
                    }
                  }
                }
                return '';
              })()}</div>
            </div>
          ` : ''}

          <!-- Endereço de Entrega -->
          ${dadosImpressao.entrega?.tem_entrega ? `
            <div class="endereco-section">
              <div class="endereco-title">🚚 ENDEREÇO DE ENTREGA</div>

              ${dadosImpressao.entrega.endereco_entrega ? `
                <div class="bold">${dadosImpressao.entrega.endereco_entrega}${dadosImpressao.entrega.numero_entrega ? `, ${dadosImpressao.entrega.numero_entrega}` : ''}</div>
              ` : ''}

              ${dadosImpressao.entrega.complemento_entrega ? `
                <div>${dadosImpressao.entrega.complemento_entrega}</div>
              ` : ''}

              ${dadosImpressao.entrega.bairro_entrega || dadosImpressao.entrega.cidade_entrega ? `
                <div>${dadosImpressao.entrega.bairro_entrega ? `${dadosImpressao.entrega.bairro_entrega}` : ''}${dadosImpressao.entrega.bairro_entrega && dadosImpressao.entrega.cidade_entrega ? ' - ' : ''}${dadosImpressao.entrega.cidade_entrega ? `${dadosImpressao.entrega.cidade_entrega}` : ''}${dadosImpressao.entrega.estado_entrega ? `/${dadosImpressao.entrega.estado_entrega}` : ''}</div>
              ` : ''}

              ${dadosImpressao.entrega.cep_entrega ? `
                <div>CEP: ${dadosImpressao.entrega.cep_entrega}</div>
              ` : ''}

              ${dadosImpressao.entrega.tipo_endereco === 'condominio' ? `
                ${dadosImpressao.entrega.nome_condominio ? `<div>Condomínio: ${dadosImpressao.entrega.nome_condominio}</div>` : ''}
                ${dadosImpressao.entrega.bloco_endereco ? `<div>Bloco: ${dadosImpressao.entrega.bloco_endereco}</div>` : ''}
              ` : ''}

              ${dadosImpressao.entrega.proximo_a ? `
                <div>Próximo a: ${dadosImpressao.entrega.proximo_a}</div>
              ` : ''}

              ${dadosImpressao.entrega.observacao_entrega ? `
                <div style="margin-top: 5px; font-style: italic;">Obs: ${dadosImpressao.entrega.observacao_entrega}</div>
              ` : ''}
            </div>
          ` : dadosImpressao.pedido.tem_entrega === false ? `
            <div class="endereco-section">
              <div class="endereco-title">🏪 RETIRADA NO BALCÃO</div>
              <div class="center">Cliente irá retirar no estabelecimento</div>
            </div>
          ` : ''}

          <div class="linha"></div>

          <div class="center">
            <div>Pedido realizado via Cardápio Digital</div>
            <div>Obrigado pela preferência!</div>
          </div>

          <script>
            window.onload = function() {
              window.print();
              setTimeout(function() {
                window.close();
              }, 1000);
            };
          </script>
        </body>
        </html>
      `;

      // Abrir janela de impressão
      const janelaImpressao = window.open('', '_blank', 'width=400,height=600');
      if (janelaImpressao) {
        janelaImpressao.document.write(htmlCupom);
        janelaImpressao.document.close();
        console.log('✅ [CARDAPIO-CUPOM] Janela de impressão aberta');
        toast.success(`Cupom do pedido #${dadosImpressao.pedido.numero} enviado para impressão!`);
      } else {
        throw new Error('Não foi possível abrir janela de impressão. Verifique se pop-ups estão bloqueados.');
      }

    } catch (error) {
      console.error('❌ [CARDAPIO-CUPOM] Erro ao gerar cupom:', error);
      throw error;
    }
  };

  // Função para finalizar o processamento
  const finalizarProcessamento = () => {
    const mensagemSucesso = tipoFinalizacaoAtual === 'finalizar_com_impressao'
      ? 'Venda finalizada e impressa com sucesso!'
      : 'Venda finalizada com sucesso!';

    setEtapaProcessamento(mensagemSucesso);
    setStatusProcessamento('sucesso');

    setTimeout(() => {
      // Fechar modal de processamento
      setShowProcessandoVenda(false);

      // Mostrar toast de sucesso
      const toastMessage = tipoFinalizacaoAtual === 'finalizar_com_impressao'
        ? `Venda #${numeroVendaProcessada} finalizada e impressa com sucesso!`
        : `Venda #${numeroVendaProcessada} finalizada com sucesso!`;

      toast.success(toastMessage);

      // ✅ CORREÇÃO: Limpar TODOS os estados (igual ao "Finalizar sem Impressão")
      setCarrinho([]);
      setClienteSelecionado(null);
      setVendedorSelecionado(null); // ✅ IMPORTANTE: Limpar vendedor selecionado
      setShowFinalizacaoFinal(false); // ✅ IMPORTANTE: Fechar modal de finalização
      limparPagamentosParciaisSilencioso(); // ✅ IMPORTANTE: Limpar pagamentos
      setCpfCnpjNota('');
      setClienteEncontrado(null);
      setTipoDocumento('cpf');
      setPedidosImportados([]);
      setDescontoPrazoSelecionado(null);

      // ✅ NOVO: Limpar observação da venda
      setObservacaoVenda('');

      clearPDVState(); // ✅ IMPORTANTE: Limpar localStorage

      // Reset estados específicos da impressão
      setStatusProcessamento('processando');
      setDadosImpressao(null);
      setTipoFinalizacaoAtual('');

      // Recarregar estoque se necessário
      if (pdvConfig?.baixa_estoque_pdv) {
        loadEstoque();
      }
    }, 1500);
  };

  const limparCarrinhoCompleto = () => {
    // Limpar carrinho
    setCarrinho([]);

    // Limpar área lateral
    setClienteSelecionado(null);
    setVendedorSelecionado(null); // ✅ IMPORTANTE: Limpar vendedor selecionado
    setPedidosImportados([]);
    setDescontoPrazoSelecionado(null);
    setDescontosCliente({ prazo: [], valor: [] });

    // Limpar dados de finalização
    setCpfCnpjNota('');
    setClienteEncontrado(null);
    setTipoDocumento('cpf');
    setErroValidacao('');
    limparPagamentosParciaisSilencioso();

    // ✅ NOVO: Limpar observação da venda
    setObservacaoVenda('');

    // Limpar localStorage e fechar modal
    clearPDVState();
    setShowConfirmLimparCarrinho(false);

    toast.success('PDV limpo com sucesso!');
  };

  const handleSearchKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && searchTerm.trim()) {
      const codigoDigitado = searchTerm.trim();

      // ✅ ATIVAR LOADING INSTANTANEAMENTE E PROCESSAR EM BACKGROUND
      setCodigoBuscando(codigoDigitado);
      setEnterPressionado(true);
      setCarregandoNovoItem(true);
      setSearchTerm(''); // Limpar campo imediatamente

      // Se há produtos filtrados, processar em background SEM AWAIT
      if (produtosFiltrados.length > 0) {
        // ✅ Verificar se é o primeiro item para ativar modal especial
        const isPrimeiroItem = carrinho.length === 0;
        if (isPrimeiroItem) {
          setLoadingPrimeiroItem(true);
        }

        // ✅ Processar em background sem bloquear a UI
        (async () => {
          try {
            // Processar em background - loading já está ativo
            await adicionarAoCarrinho(produtosFiltrados[0]);

            // Aguardar um pouco para mostrar o efeito
            await new Promise(resolve => setTimeout(resolve, 300));
          } finally {
            // Desativar efeito de carregamento
            setCarregandoNovoItem(false);
            setCodigoBuscando('');
            setEnterPressionado(false);

            // ✅ Desativar modal do primeiro item
            if (isPrimeiroItem) {
              setLoadingPrimeiroItem(false);
            }
          }
        })();

        // Manter o foco no campo para próxima digitação
        setTimeout(() => {
          const input = e.target as HTMLInputElement;
          input.focus();
        }, 10);
      } else {
        // Produto não encontrado - desativar loading e mostrar modal
        setCarregandoNovoItem(false);
        setEnterPressionado(false);
        setCodigoBuscando('');

        // Extrair o termo de busca real
        let termoBusca = codigoDigitado;
        if (codigoDigitado.includes('*')) {
          const partes = codigoDigitado.split('*');
          if (partes.length >= 2) {
            termoBusca = partes.slice(1).join('*').trim(); // Pega tudo após o primeiro *
          }
        }

        // Mostrar modal de produto não encontrado
        mostrarProdutoNaoEncontrado(termoBusca);

        // Manter o foco
        setTimeout(() => {
          const input = e.target as HTMLInputElement;
          input.focus();
        }, 10);
      }
    }
  };

  const abrirModalProdutos = async () => {
    try {
      // Ativar fullscreen antes de abrir o modal
      if (!isFullscreen) {
        await enterFullscreen();
      }

      // ✅ NOVO: Carregar produtos com preços da tabela selecionada
      const produtosComPrecos = await carregarProdutosComPrecos();

      // Temporariamente substituir produtos para o modal
      setProdutos(produtosComPrecos);

      // Abrir o modal de produtos
      setShowAreaProdutos(true);
    } catch (error) {
      console.log('Erro ao ativar fullscreen para modal de produtos:', error);
      // Abrir o modal mesmo se o fullscreen falhar
      setShowAreaProdutos(true);
    }
  };

  const mostrarProdutoNaoEncontrado = (termo: string) => {
    setProdutoNaoEncontradoTermo(termo);
    setShowProdutoNaoEncontrado(true);
  };

  // ✅ REALTIME MELHORADO PARA MODAL DE PEDIDOS - Baseado no padrão do cardápio digital
  useEffect(() => {
    if (!showPedidosModal) return;

    let modalSubscription: any = null;

    const setupModalRealtime = async () => {
      try {
        const { data: userData } = await supabase.auth.getUser();
        if (!userData.user) return;

        const { data: usuarioData } = await supabase
          .from('usuarios')
          .select('empresa_id')
          .eq('id', userData.user.id)
          .single();

        if (!usuarioData?.empresa_id) return;

        const channelName = `pedidos-modal-${usuarioData.empresa_id}-${Date.now()}`;

        modalSubscription = supabase
          .channel(channelName)
          .on('postgres_changes',
            {
              event: 'INSERT',
              schema: 'public',
              table: 'pedidos',
              filter: `empresa_id=eq.${usuarioData.empresa_id}`
            },
            (payload) => {
              // Recarregar pedidos automaticamente sem loading visível
              const loadPedidosSilencioso = async () => {

                const { data: userData } = await supabase.auth.getUser();
                if (!userData.user) return;

                const { data: usuarioData } = await supabase
                  .from('usuarios')
                  .select('empresa_id')
                  .eq('id', userData.user.id)
                  .single();

                if (!usuarioData?.empresa_id) return;

                try {
                  const { data, error } = await supabase
                    .from('pedidos')
                    .select(`
                      id,
                      numero,
                      created_at,
                      status,
                      valor_total,
                      empresa_id,
                      desconto_prazo_id,
                      desconto_valor_id,
                      usuario_id,
                      cliente:clientes(id, nome, telefone, documento),
                      pedidos_itens(
                        id,
                        quantidade,
                        valor_unitario,
                        valor_total,
                        produto:produtos(
                          id,
                          nome,
                          preco,
                          codigo,
                          codigo_barras,
                          descricao,
                          promocao,
                          tipo_desconto,
                          valor_desconto,
                          unidade_medida_id,
                          grupo_id,
                          ncm,
                          cfop,
                          cst_icms,
                          cst_pis,
                          cst_cofins,
                          unidade_medida:unidade_medida_id (
                            id,
                            sigla,
                            nome
                          ),
                          produto_fotos(url, principal)
                        )
                      )
                    `)
                    .eq('empresa_id', usuarioData.empresa_id)
                    .eq('deletado', false)
                    .order('created_at', { ascending: false })
                    .limit(100);

                  if (error) throw error;
                  let pedidosData = data || [];

                  // Buscar nomes dos usuários se houver pedidos com usuario_id
                  if (pedidosData.length > 0) {
                    const usuarioIds = [...new Set(pedidosData.filter(p => p.usuario_id).map(p => p.usuario_id))];

                    if (usuarioIds.length > 0) {
                      const { data: usuariosData } = await supabase
                        .from('usuarios')
                        .select('id, nome')
                        .in('id', usuarioIds);

                      if (usuariosData) {
                        // Criar mapa de ID -> nome
                        const usuariosMap = usuariosData.reduce((acc, user) => {
                          acc[user.id] = user.nome;
                          return acc;
                        }, {} as Record<string, string>);

                        // Adicionar nome do usuário aos pedidos
                        pedidosData = pedidosData.map(pedido => ({
                          ...pedido,
                          usuario: pedido.usuario_id ? {
                            id: pedido.usuario_id,
                            nome: usuariosMap[pedido.usuario_id] || 'Usuário não encontrado'
                          } : null
                        }));
                      }
                    }
                  }

                  setPedidos(pedidosData);
                  // ✅ APLICAR FILTROS APÓS CARREGAR
                  aplicarFiltrosPedidos(pedidosData);
                  // ✅ ATUALIZAR CONTADOR APENAS COM PEDIDOS PENDENTES
                  const pedidosPendentes = pedidosData.filter(p => p.status === 'pendente');
                  setContadorPedidosPendentes(pedidosPendentes.length);
                } catch (error) {
                  // Silenciar erro de carregamento
                }
              };

              setTimeout(() => loadPedidosSilencioso(), 500);
            }
          )
          .on('postgres_changes',
            {
              event: 'UPDATE',
              schema: 'public',
              table: 'pedidos',
              filter: `empresa_id=eq.${usuarioData.empresa_id}`
            },
            (payload) => {
              // Recarregar pedidos automaticamente
              const loadPedidosSilencioso = async () => {

                const { data: userData } = await supabase.auth.getUser();
                if (!userData.user) return;

                const { data: usuarioData } = await supabase
                  .from('usuarios')
                  .select('empresa_id')
                  .eq('id', userData.user.id)
                  .single();

                if (!usuarioData?.empresa_id) return;

                try {
                  const { data, error } = await supabase
                    .from('pedidos')
                    .select(`
                      id,
                      numero,
                      created_at,
                      status,
                      valor_total,
                      empresa_id,
                      desconto_prazo_id,
                      desconto_valor_id,
                      usuario_id,
                      cliente:clientes(id, nome, telefone, documento),
                      pedidos_itens(
                        id,
                        quantidade,
                        valor_unitario,
                        valor_total,
                        produto:produtos(
                          id,
                          nome,
                          preco,
                          codigo,
                          codigo_barras,
                          descricao,
                          promocao,
                          tipo_desconto,
                          valor_desconto,
                          unidade_medida_id,
                          grupo_id,
                          ncm,
                          cfop,
                          cst_icms,
                          cst_pis,
                          cst_cofins,
                          unidade_medida:unidade_medida_id (
                            id,
                            sigla,
                            nome
                          ),
                          produto_fotos(url, principal)
                        )
                      )
                    `)
                    .eq('empresa_id', usuarioData.empresa_id)
                    .eq('deletado', false)
                    .order('created_at', { ascending: false })
                    .limit(100);

                  if (error) throw error;
                  let pedidosData = data || [];

                  // Buscar nomes dos usuários se houver pedidos com usuario_id
                  if (pedidosData.length > 0) {
                    const usuarioIds = [...new Set(pedidosData.filter(p => p.usuario_id).map(p => p.usuario_id))];

                    if (usuarioIds.length > 0) {
                      const { data: usuariosData } = await supabase
                        .from('usuarios')
                        .select('id, nome')
                        .in('id', usuarioIds);

                      if (usuariosData) {
                        const usuariosMap = usuariosData.reduce((acc, user) => {
                          acc[user.id] = user.nome;
                          return acc;
                        }, {} as Record<string, string>);

                        pedidosData = pedidosData.map(pedido => ({
                          ...pedido,
                          usuario: pedido.usuario_id ? {
                            id: pedido.usuario_id,
                            nome: usuariosMap[pedido.usuario_id] || 'Usuário não encontrado'
                          } : null
                        }));
                      }
                    }
                  }

                  setPedidos(pedidosData);
                  aplicarFiltrosPedidos(pedidosData);
                  const pedidosPendentes = pedidosData.filter(p => p.status === 'pendente');
                  setContadorPedidosPendentes(pedidosPendentes.length);
                } catch (error) {
                  // Silenciar erro de carregamento
                }
              };

              setTimeout(() => loadPedidosSilencioso(), 500);
            }
          )
          .subscribe();

      } catch (error) {
        // Silenciar erro de configuração do Realtime
      }
    };

    // Não carregar pedidos automaticamente quando o modal abre
    // O carregamento será feito apenas quando necessário pelo onClick do botão

    // Configurar realtime com delay para evitar conflitos
    setTimeout(() => {
      setupModalRealtime();
    }, 100);

    return () => {
      if (modalSubscription) {
        modalSubscription.unsubscribe();
      }
    };
  }, [showPedidosModal]);

  // ✅ POLLING INTELIGENTE PARA PEDIDOS - Backup do realtime
  useEffect(() => {
    if (!showPedidosModal) return;

    const interval = setInterval(() => {
      loadPedidos(); // Usar a função existente que já tem logs
    }, 10000); // 10 segundos - mais conservador que o cardápio

    return () => {
      clearInterval(interval);
    };
  }, [showPedidosModal]);

  // ✅ NOVO: useEffect para carregar unidades de medida quando modal abrir
  useEffect(() => {
    if (showSeletorUnidadeModal) {
      loadUnidadesMedida();
    }
  }, [showSeletorUnidadeModal]);

  // ✅ NOVO: useEffect para restaurar produtos quando modal de produtos fechar
  useEffect(() => {
    if (!showAreaProdutos) {
      // Quando modal fechar, recarregar produtos originais
      loadProdutos();
    }
  }, [showAreaProdutos]);

  // useEffect para focar no campo valor quando modal de venda sem produto abrir
  useEffect(() => {
    if (showVendaSemProdutoModal && valorVendaSemProdutoRef.current) {
      // Usar setTimeout para garantir que o modal esteja renderizado
      setTimeout(() => {
        valorVendaSemProdutoRef.current?.focus();
      }, 100);
    }
  }, [showVendaSemProdutoModal]);

  // ✅ NOVO: useEffect para resetar filtros quando modal de vendas abertas fechar
  useEffect(() => {
    if (!showVendasAbertasModal) {
      // Resetar todos os filtros quando modal fechar
      setFiltroNomeCliente('');
      setFiltroMesa('');
      setFiltroComanda('');
      setFiltroDataInicioVendas('');
      setFiltroDataFimVendas('');
      setShowFiltrosVendasAbertas(false); // Também fechar o painel de filtros
    }
  }, [showVendasAbertasModal]);

  // ✅ NOVO: useEffect para resetar filtros quando modal de mesas fechar
  useEffect(() => {
    if (!showMesasModal) {
      setFiltroMesaNumero('');
      setFiltroClienteMesa('');
      setFiltroDataInicioMesas('');
      setFiltroDataFimMesas('');
      setShowFiltrosMesas(false);
    }
  }, [showMesasModal]);

  // ✅ NOVO: useEffect para resetar filtros quando modal de comandas fechar
  useEffect(() => {
    if (!showComandasModal) {
      setFiltroComandaNumero('');
      setFiltroClienteComanda('');
      setFiltroDataInicioComandas('');
      setFiltroDataFimComandas('');
      setShowFiltrosComandas(false);
    }
  }, [showComandasModal]);

  if (isLoading) {
    return (
      <LoadingScreen
        message="Carregando PDV..."
        subMessage={preCarregandoImagens ? "Pré-carregando imagens dos produtos" : undefined}
        showSubLoading={preCarregandoImagens}
      />
    );
  }

  // ✅ NOVO: Verificar se caixa está carregando
  if (loadingCaixa) {
    return (
      <LoadingScreen
        message="Verificando status do caixa..."
        subMessage="Aguarde enquanto verificamos se o caixa está aberto"
      />
    );
  }

  // ✅ NOVO: Bloquear PDV se controle de caixa estiver habilitado e caixa não estiver aberto
  if (pdvConfig?.controla_caixa && !caixaAberto) {
    return (
      <>
        {/* Modal de Bloqueio */}
        <div className="bg-background-dark h-screen flex items-center justify-center">
          <div className="bg-gray-800 rounded-lg p-8 max-w-md w-full mx-4 text-center">
            <div className="w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <X size={32} className="text-red-400" />
            </div>
            <h2 className="text-xl font-semibold text-white mb-2">Caixa Fechado</h2>
            <p className="text-gray-400 mb-6">
              O controle de caixa está habilitado. É necessário abrir o caixa antes de operar o PDV.
            </p>

            <button
              onClick={() => {
                setShowAberturaCaixaModal(true);
              }}
              className="w-full bg-primary-600 hover:bg-primary-700 text-white font-medium py-3 px-4 rounded-lg transition-colors"
            >
              Abrir Caixa
            </button>
          </div>
        </div>

        {/* ✅ MODAL DE ABERTURA - AGORA DENTRO DO RETURN */}
        {showAberturaCaixaModal && (
          <div
            style={{
              position: 'fixed',
              top: '0px',
              left: '0px',
              width: '100vw',
              height: '100vh',
              backgroundColor: 'rgba(0, 0, 0, 0.9)',
              zIndex: 999999,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              padding: '20px'
            }}
          >
            <div
              style={{
                backgroundColor: '#1f2937',
                borderRadius: '12px',
                border: '2px solid #10b981',
                padding: '24px',
                maxWidth: '400px',
                width: '100%',
                color: 'white'
              }}
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <div style={{ marginBottom: '24px', textAlign: 'center' }}>
                <h3 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '8px' }}>
                  💰 Abertura de Caixa
                </h3>
                <p style={{ fontSize: '14px', color: '#9ca3af' }}>
                  Registre a abertura do caixa para iniciar as operações
                </p>
              </div>

              {/* Informações do usuário */}
              <div style={{
                backgroundColor: '#374151',
                borderRadius: '8px',
                padding: '16px',
                marginBottom: '20px',
                border: '1px solid #4b5563'
              }}>
                <div style={{ marginBottom: '12px' }}>
                  <span style={{ fontSize: '14px', color: '#9ca3af' }}>👤 Operador: </span>
                  <span style={{ fontWeight: 'bold' }}>
                    {userData?.nome || 'Usuário'}
                  </span>
                </div>
                <div>
                  <span style={{ fontSize: '14px', color: '#9ca3af' }}>🕒 Data/Hora: </span>
                  <span style={{ fontWeight: 'bold' }}>
                    {formatDateTime(currentDateTime)}
                  </span>
                </div>
              </div>

              {/* Campo de valor */}
              <div style={{ marginBottom: '24px' }}>
                <label style={{
                  display: 'block',
                  fontSize: '14px',
                  color: '#9ca3af',
                  marginBottom: '8px',
                  fontWeight: 'bold'
                }}>
                  Valor de Abertura
                </label>
                <div style={{ position: 'relative' }}>
                  <span style={{
                    position: 'absolute',
                    left: '12px',
                    top: '50%',
                    transform: 'translateY(-50%)',
                    color: '#9ca3af',
                    fontWeight: 'bold'
                  }}>
                    R$
                  </span>
                  <input
                    type="text"
                    value={valorAberturaCaixa}
                    onChange={(e) => setValorAberturaCaixa(formatarValorMonetario(e.target.value))}
                    placeholder="0,00"
                    style={{
                      width: '100%',
                      backgroundColor: '#374151',
                      border: '1px solid #4b5563',
                      borderRadius: '8px',
                      paddingLeft: '40px',
                      paddingRight: '16px',
                      paddingTop: '12px',
                      paddingBottom: '12px',
                      color: 'white',
                      fontSize: '18px',
                      fontWeight: 'bold',
                      outline: 'none'
                    }}
                    autoFocus
                  />
                </div>
                <p style={{ fontSize: '12px', color: '#6b7280', marginTop: '4px' }}>
                  Informe o valor inicial em dinheiro no caixa (opcional)
                </p>
              </div>

              {/* Botões */}
              <div style={{ display: 'flex', gap: '12px' }}>
                <button
                  onClick={() => {
                    console.log('🚫 Botão Cancelar clicado');
                    setShowAberturaCaixaModal(false);
                    setValorAberturaCaixa('');
                  }}
                  style={{
                    flex: 1,
                    backgroundColor: '#4b5563',
                    color: 'white',
                    padding: '12px 16px',
                    borderRadius: '8px',
                    border: 'none',
                    fontWeight: 'bold',
                    cursor: 'pointer',
                    fontSize: '16px'
                  }}
                >
                  Cancelar
                </button>
                <button
                  onClick={() => {
                    console.log('✅ Botão Abrir Caixa clicado');
                    abrirCaixa();
                  }}
                  style={{
                    flex: 1,
                    backgroundColor: '#10b981',
                    color: 'white',
                    padding: '12px 16px',
                    borderRadius: '8px',
                    border: 'none',
                    fontWeight: 'bold',
                    cursor: 'pointer',
                    fontSize: '16px'
                  }}
                >
                  Abrir Caixa
                </button>
              </div>
            </div>
          </div>
        )}


      </>
    );
  }

  return (
    <div className="bg-background-dark overflow-hidden flex" style={{ height: '100vh' }}>
      {/* ✅ NOVO: Componente para manter sessão ativa no PDV */}
      <KeepAlive
        intervalMinutes={3}
        debug={false}
        onSessionRefreshed={() => console.log('🔄 PDV: Sessão renovada automaticamente')}
        onSessionExpired={() => console.log('❌ PDV: Sessão expirou')}
      />

      {/* Sidebar do menu - aparece quando showMenuPDV é true */}
      <AnimatePresence>
        {showMenuPDV && (
          <motion.div
            initial={{ width: 0, opacity: 0 }}
            animate={{ width: isExpanded ? '240px' : '72px', opacity: 1 }}
            exit={{ width: 0, opacity: 0 }}
            transition={{ duration: 0.3, ease: 'easeInOut' }}
            className="flex-shrink-0 overflow-hidden"
          >
            <div style={{ width: isExpanded ? '240px' : '72px' }}>
              <Sidebar />
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Conteúdo principal do PDV */}
      <motion.div
        initial={{ marginLeft: 0 }}
        animate={{ marginLeft: 0 }}
        transition={{ duration: 0.3, ease: 'easeInOut' }}
        className="flex-1 bg-background-dark overflow-hidden"
        style={{ height: '100vh' }}
      >
      {/* Header - Compacto */}
      <div className="bg-background-card border-b border-gray-800 h-14 flex items-center justify-between pl-2 pr-3">
        {/* Botões do lado esquerdo - Compactos */}
        <div className="flex items-center gap-1.5">
          {/* Botão para mostrar/ocultar menu */}
          <button
            onClick={() => {
              setShowMenuPDV(!showMenuPDV);
              // Forçar o sidebar a ficar retraído quando abrir no PDV
              if (!showMenuPDV && isExpanded) {
                toggle();
              }
            }}
            className="w-9 h-9 bg-gray-600/20 hover:bg-gray-500/30 border border-gray-600/20 hover:border-gray-500/40 rounded-full flex items-center justify-center text-gray-400 hover:text-gray-300 transition-all duration-200 group"
            title={showMenuPDV ? "Ocultar menu" : "Mostrar menu"}
          >
            {showMenuPDV ? (
              <ChevronLeft size={16} className="group-hover:scale-110 transition-transform" />
            ) : (
              <ChevronRight size={16} className="group-hover:scale-110 transition-transform" />
            )}
          </button>

          {/* Botão para alternar fullscreen */}
          <button
            onClick={() => {
              if (isFullscreen) {
                exitFullscreen();
              } else {
                enterFullscreen();
              }
            }}
            className="w-9 h-9 bg-gray-600/20 hover:bg-gray-500/30 border border-gray-600/20 hover:border-gray-500/40 rounded-full flex items-center justify-center text-gray-400 hover:text-gray-300 transition-all duration-200 group"
            title={isFullscreen ? "Sair do modo tela cheia" : "Entrar em tela cheia"}
          >
            {isFullscreen ? (
              <Minimize2 size={16} className="group-hover:scale-110 transition-transform" />
            ) : (
              <Maximize2 size={16} className="group-hover:scale-110 transition-transform" />
            )}
          </button>

          {/* ✅ NOVA: Tag de Homologação - só aparece quando ambiente é homologação */}
          {ambienteNFe === 'homologacao' && (
            <span className="inline-flex px-2 py-1 text-xs font-medium rounded-full border bg-orange-500/10 text-orange-400 border-orange-500/20">
              HOMOLOG.
            </span>
          )}

          {/* ✅ BOTÃO DE SOM DO CARDÁPIO DIGITAL - só aparece quando cardápio digital está ativo */}
          {pdvConfig?.cardapio_digital === true && (
            <button
              onClick={alternarSom}
              className={`inline-flex items-center gap-1 px-2 py-1 text-xs font-medium rounded-full border transition-all duration-200 ${
                audioHabilitado && somContinuoAtivo && !somDesabilitadoPeloUsuario
                  ? 'bg-green-500/10 text-green-400 border-green-500/20 hover:bg-green-500/20'
                  : 'bg-red-500/10 text-red-400 border-red-500/20 hover:bg-red-500/20'
              }`}
              title={
                audioHabilitado && somContinuoAtivo && !somDesabilitadoPeloUsuario
                  ? 'Som do cardápio ativo - Clique para desabilitar'
                  : 'Som do cardápio desabilitado - Clique para ativar'
              }
            >
              {audioHabilitado && somContinuoAtivo && !somDesabilitadoPeloUsuario ? (
                <>
                  <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"/>
                    <path d="M19.07 4.93a10 10 0 0 1 0 14.14"/>
                  </svg>
                  SOM
                </>
              ) : (
                <>
                  <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2.5">
                    <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"/>
                    <line x1="23" y1="9" x2="17" y2="15"/>
                    <line x1="17" y1="9" x2="23" y2="15"/>
                  </svg>
                  SOM
                </>
              )}
            </button>
          )}
        </div>
        <div className="text-4xl font-bold text-primary-400">
          {formatCurrencyWithoutSymbol(calcularTotalComDesconto())}
        </div>
        <div className="text-right">
          <div className="text-xs text-gray-400 flex items-center justify-end gap-1 mb-0.5">
            <User size={12} />
            {userData?.nome || 'Usuário'}
          </div>
          <div className="text-xs text-gray-400 font-mono">
            {formatDateTime(currentDateTime)}
          </div>
        </div>
      </div>

      <div
        className="flex overflow-hidden relative"
        style={{ height: 'calc(100vh - 56px)' }}
      >

        {/* Área dos Itens do Carrinho - ocupa toda largura quando vazio, 65% quando há itens */}
        <div className={`${carrinho.length > 0 ? 'w-[65%]' : 'w-full'} p-4 flex flex-col h-full relative overflow-hidden transition-all duration-500`}>
          {/* Overlay removido - estava causando problemas no layout lado a lado */}
            <div className="h-full flex flex-col">


              {/* Barra de Busca com Seletor de Tabela - Lado a Lado */}
              <div className="mb-3">
                <div className="flex gap-2">
                  {/* Campo de Busca - Flex para ocupar espaço restante */}
                  <div className="relative flex-1">
                  <input
                    type="text"
                    placeholder="Produto"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    onKeyDown={handleSearchKeyPress}
                    autoFocus
                    className="w-full bg-gray-800/50 border border-gray-700 rounded py-2 pl-9 pr-12 text-white placeholder-gray-300 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                  />
                  <QrCode size={18} className="absolute left-2.5 top-1/2 -translate-y-1/2 text-gray-300" />

                  {/* Ícone de busca com F1 - clicável - Compacto */}
                  <button
                    onClick={abrirModalProdutos}
                    className="absolute right-2.5 top-1/2 -translate-y-1/2 flex items-center gap-1 hover:bg-gray-700/50 rounded px-1 py-0.5 transition-colors"
                    title="Abrir lista de produtos (F1)"
                  >
                    <Search size={14} className="text-gray-300 hover:text-gray-200" />
                    <span className="text-xs text-gray-300 bg-gray-700 px-1 py-0.5 rounded">F1</span>
                  </button>

                  {/* ✅ CORRIGIDO: Indicadores com posicionamento inteligente */}
                  {/* Indicador de quantidade - posição dinâmica */}
                  {searchTerm.includes('*') && (
                    <div className={`absolute top-1/2 -translate-y-1/2 ${
                      pdvConfig?.venda_codigo_barras && codigoBarrasBuffer
                        ? 'right-20' // Mais à esquerda quando há código de barras
                        : 'right-3'  // Posição normal quando não há código de barras
                    }`}>
                      <div className="bg-primary-500 text-white text-xs px-2 py-1 rounded-full">
                        Qtd: {searchTerm.split('*')[0]}
                      </div>
                    </div>
                  )}

                  {/* Indicador de código de barras buffer - sempre à direita */}
                  {pdvConfig?.venda_codigo_barras && codigoBarrasBuffer && (
                    <div className="absolute right-3 top-1/2 -translate-y-1/2">
                      <div className="bg-green-500 text-white text-xs px-2 py-1 rounded-full animate-pulse">
                        Código: {codigoBarrasBuffer}
                      </div>
                    </div>
                  )}
                  </div>

                  {/* ✅ NOVO: Dropdown de Tabela de Preços - LADO DIREITO */}
                  {trabalhaComTabelaPrecos && tabelasPrecos.length > 0 && (
                    <div className="relative w-44 flex-shrink-0">
                      <select
                        value={tabelaPrecoSelecionada}
                        onChange={(e) => setTabelaPrecoSelecionada(e.target.value)}
                        className="w-full h-[42px] bg-gray-800/50 border border-gray-700 rounded py-2 pl-3 pr-8 text-white text-sm focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20 cursor-pointer"
                        style={{
                          appearance: 'none',
                          WebkitAppearance: 'none',
                          MozAppearance: 'none',
                          backgroundImage: 'none'
                        }}
                      >
                        <option value="padrao">📋 Preço Padrão</option>
                        {tabelasPrecos.map((tabela) => (
                          <option key={tabela.id} value={tabela.id}>
                            📋 {tabela.nome}
                          </option>
                        ))}
                      </select>
                      {/* Seta dropdown simples e bonita */}
                      <div className="absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none">
                        <div className="w-0 h-0 border-l-[4px] border-r-[4px] border-t-[6px] border-l-transparent border-r-transparent border-t-gray-300"></div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Indicador de captura automática ativa */}
                {pdvConfig?.venda_codigo_barras && (
                  <div className="mt-2 flex items-center gap-2 text-xs text-green-400">
                    <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                    Captura automática de código de barras ativa - Digite números para adicionar produtos
                  </div>
                )}
              </div>

              {/* Lista de Itens do Carrinho - Compacta */}
              <div
                className="flex-1 overflow-y-auto custom-scrollbar"
                style={{ paddingBottom: '50px' }}
              >
                {carrinho.length === 0 ? (
                  <div className="flex items-center justify-center h-full">
                    <div className="text-center text-gray-500">
                      <ShoppingCart size={56} className="mx-auto mb-3 opacity-50" />
                      <p className="text-base font-medium mb-2">Carrinho vazio</p>
                      <p className="text-sm">Use o botão "Produtos" para adicionar itens</p>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {/* ✅ NOVO: Card de carregamento - aparece INSTANTANEAMENTE quando Enter é pressionado */}
                    {(carregandoNovoItem || enterPressionado) && (
                      <motion.div
                        initial={{ opacity: 0, y: -20 }}
                        animate={{
                          opacity: 1,
                          y: 0
                        }}
                        exit={{ opacity: 0, y: -20 }}
                        className="bg-blue-500/10 border border-blue-500/30 rounded p-2.5"
                      >
                        <div className="flex gap-2.5">
                          {/* Número sequencial do item - Carregando */}
                          <div className="w-5 h-5 bg-blue-500/20 border border-blue-500/40 rounded-full flex items-center justify-center flex-shrink-0 self-center">
                            <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
                          </div>

                          {/* Foto do Produto - Carregando */}
                          <div className="w-12 h-12 lg:w-10 lg:h-10 bg-blue-500/20 rounded overflow-hidden flex-shrink-0 relative self-start">
                            <div className="w-full h-full flex items-center justify-center">
                              <div className="w-4 h-4 border-2 border-blue-400/30 border-t-blue-400 rounded-full animate-spin"></div>
                            </div>
                          </div>

                          {/* Informações do Produto - Carregando */}
                          <div className="flex-1 min-w-0">
                            <div className="flex items-start justify-between">
                              <div className="flex-1 min-w-0">
                                {/* Nome do produto - Skeleton */}
                                <div className="h-4 bg-blue-400/20 rounded animate-pulse mb-1"></div>

                                {/* Preço - Skeleton */}
                                <div className="h-3 bg-blue-400/10 rounded animate-pulse w-16"></div>
                              </div>

                              {/* Valor total - Skeleton */}
                              <div className="ml-2 text-right">
                                <div className="h-4 bg-blue-400/20 rounded animate-pulse w-12"></div>
                              </div>
                            </div>

                            {/* Texto de carregamento */}
                            <div className="mt-1 text-xs text-blue-400 flex items-center gap-1">
                              <div className="w-1 h-1 bg-blue-400 rounded-full animate-bounce"></div>
                              <div className="w-1 h-1 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                              <div className="w-1 h-1 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                              <span className="ml-1">
                                {codigoBuscando ? `Buscando código: ${codigoBuscando}` : 'Adicionando produto...'}
                              </span>
                            </div>
                          </div>
                        </div>
                      </motion.div>
                    )}

                    {carrinho.filter(item => !item.isDevolucao).map((item, index) => (
                      <motion.div
                        key={item.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        className="rounded p-2.5 bg-gray-800/50"
                      >
                        {/* Layout responsivo baseado na largura da tela - Compacto */}
                        <div className="flex gap-2.5">
                          {/* Número sequencial do item - Compacto */}
                          <div className="w-5 h-5 bg-background-card border border-gray-700 rounded-full flex items-center justify-center flex-shrink-0 self-center shadow-lg">
                            <span className="text-xs font-medium text-gray-100">
                              {index + 1}
                            </span>
                          </div>

                          {/* Foto do Produto - Compacta */}
                          <div
                            className={`w-12 h-12 lg:w-10 lg:h-10 bg-gray-900 rounded overflow-hidden flex-shrink-0 relative self-start ${
                              !item.vendaSemProduto ? 'cursor-pointer hover:opacity-80 transition-opacity' : ''
                            }`}
                            onClick={!item.vendaSemProduto ? (e) => abrirGaleria(item.produto, e) : undefined}
                          >
                            {!item.vendaSemProduto && getFotoPrincipal(item.produto) ? (
                              <img
                                src={getFotoPrincipal(item.produto)!.url}
                                alt={item.produto.nome}
                                className="w-full h-full object-cover"
                              />
                            ) : (
                              <div className="w-full h-full flex items-center justify-center">
                                {item.vendaSemProduto ? (
                                  item.taxaEntregaCardapio ? (
                                    <Bike size={14} className="text-blue-400" />
                                  ) : (
                                    <DollarSign size={14} className="text-green-400" />
                                  )
                                ) : (
                                  <Package size={14} className="text-gray-700" />
                                )}
                              </div>
                            )}

                            {/* Indicador de múltiplas fotos - Compacto */}
                            {!item.vendaSemProduto && item.produto.produto_fotos && item.produto.produto_fotos.length > 1 && (
                              <div className="absolute top-0.5 left-0.5 bg-black/60 text-white text-xs px-1 py-0.5 rounded">
                                {item.produto.produto_fotos.length}
                              </div>
                            )}
                          </div>

                          {/* Container principal do conteúdo */}
                          <div className="flex-1 min-w-0">
                            {/* Seção superior - Dados do produto com controles */}
                            <div className="lg:grid lg:grid-cols-[1fr_auto_auto] lg:items-center lg:gap-4">
                                <div className="flex justify-between items-start mb-2 lg:mb-0">
                                  <div className="flex-1 min-w-0">
                                    {/* Nome do produto com edição inline */}
                                    <div className="mb-1">
                                      {itemEditandoNome === item.id ? (
                                        <div className="flex items-center gap-1">
                                          <input
                                            type="text"
                                            value={nomeEditando}
                                            onChange={(e) => setNomeEditando(e.target.value)}
                                            onKeyDown={(e) => {
                                              if (e.key === 'Enter') {
                                                finalizarEdicaoNome(item.id);
                                              } else if (e.key === 'Escape') {
                                                cancelarEdicaoNome();
                                              }
                                            }}
                                            onBlur={() => finalizarEdicaoNome(item.id)}
                                            onFocus={(e) => {
                                              // Posicionar cursor no final do texto
                                              const input = e.target as HTMLInputElement;
                                              setTimeout(() => {
                                                input.setSelectionRange(input.value.length, input.value.length);
                                              }, 0);
                                            }}
                                            className="flex-1 bg-gray-800 border border-gray-600 rounded px-2 py-1 text-white text-sm focus:outline-none focus:border-primary-500"
                                            autoFocus
                                            style={{ minWidth: '0' }}
                                          />
                                          <button
                                            onClick={() => finalizarEdicaoNome(item.id)}
                                            className="text-green-400 hover:text-green-300 transition-colors flex-shrink-0"
                                            title="Confirmar edição"
                                          >
                                            <Check size={14} />
                                          </button>
                                        </div>
                                      ) : (
                                        <div className="flex items-center gap-1">
                                          <div className="flex-1">
                                            <div className="flex items-center gap-2 flex-wrap">
                                              <h4 className="text-white font-medium text-sm line-clamp-1">
                                                {item.vendaSemProduto ? item.nome : item.produto.nome}
                                              </h4>
                                              {!item.vendaSemProduto && item.produto.unidade_medida?.sigla && (
                                                <span className="px-1.5 py-0.5 text-xs bg-blue-500/20 text-blue-400 rounded border border-blue-500/30">
                                                  {item.produto.unidade_medida.sigla}
                                                </span>
                                              )}
                                              {item.isDevolucao && (
                                                <span className="px-1.5 py-0.5 text-xs bg-red-500/20 text-red-400 rounded border border-red-500/30">
                                                  DEVOLUÇÃO
                                                </span>
                                              )}
                                            </div>
                                            {/* ✅ NOVO: Exibir sabores em linhas separadas */}
                                            {item.descricaoSabores && (
                                              <div className="mt-1 text-xs text-gray-300 leading-tight">
                                                {item.descricaoSabores.split('\n').map((sabor, index) => (
                                                  <div key={index} className="text-gray-400">
                                                    {sabor}
                                                  </div>
                                                ))}
                                              </div>
                                            )}
                                          </div>
                                          <div className="flex items-center gap-1 flex-shrink-0">
                                            {/* ✅ NOVO: Tag da tabela de preços (fixa no item quando foi adicionado) */}
                                            {item.tabela_preco_nome && (
                                              <span className="ml-2 px-1.5 py-0.5 text-xs bg-purple-500/20 text-purple-400 rounded border border-purple-500/30">
                                                {item.tabela_preco_nome}
                                              </span>
                                            )}
                                          {pdvConfig?.editar_nome_produto && (
                                            <button
                                              onClick={() => iniciarEdicaoNome(item.id, item.vendaSemProduto ? item.nome : item.produto.nome)}
                                              className="text-gray-500 hover:text-gray-300 transition-colors opacity-60 hover:opacity-100"
                                              title="Editar nome do produto"
                                            >
                                              <Pencil size={12} />
                                            </button>
                                          )}
                                          </div>
                                        </div>
                                      )}
                                    </div>
                                    <div className="flex items-center gap-2 text-xs text-gray-400">
                                      {!item.vendaSemProduto && (
                                        <>
                                          {/* Ocultar código apenas para importação do cardápio digital */}
                                          {!item.cardapio_digital && (
                                            <span>Código {item.produto.codigo}</span>
                                          )}
                                          {item.produto.codigo_barras && item.produto.codigo_barras.trim() !== '' && (
                                            <div className="flex items-center gap-1">
                                              <QrCode size={10} className="text-gray-500" />
                                              <span>{item.produto.codigo_barras}</span>
                                            </div>
                                          )}
                                        </>
                                      )}
                                      {item.vendaSemProduto && !item.taxaEntregaCardapio && (
                                        <span className="text-green-400">Venda sem produto</span>
                                      )}
                                      {/* ✅ NOVO: Mostrar valor unitário quando tem adicionais */}
                                      {!item.vendaSemProduto && item.adicionais && item.adicionais.length > 0 && (
                                        <div className="flex items-center gap-1 text-primary-400">
                                          <span>•</span>
                                          <span>{formatCurrency(item.produto.preco)} x {formatarQuantidade(item.quantidade, item.produto.unidade_medida)}</span>
                                          <span>•</span>
                                          <span>{item.produto.unidade_medida?.sigla || 'UN'}</span>
                                        </div>
                                      )}
                                    </div>

                                    {/* ✅ CORREÇÃO: Sempre exibir valor unitário para todos os produtos */}
                                    {!item.vendaSemProduto && (
                                      <div className="mt-1">
                                        {/* Valor unitário sempre visível */}
                                        <p className="text-sm">
                                          {/* Se tem promoção ou desconto, mostrar preço riscado */}
                                          {(item.produto.promocao || (item.produto.desconto_quantidade && item.quantidade >= (item.produto.quantidade_minima || 0))) ? (
                                            <>
                                              <span className="text-gray-400 line-through">{formatCurrency(item.produto.preco)}</span>
                                              <span className="text-primary-400 ml-2">{formatCurrency(calcularPrecoModalQuantidade(item.produto, item.quantidade))}</span>
                                            </>
                                          ) : (
                                            /* Se não tem promoção, mostrar preço normal */
                                            <span className="text-gray-400">{formatCurrency(item.produto.preco)}</span>
                                          )}
                                        </p>

                                        {/* ✅ NOVA LÓGICA: Mostrar ambos os descontos quando aplicáveis */}
                                        {(item.produto.promocao || (item.produto.desconto_quantidade && item.quantidade >= (item.produto.quantidade_minima || 0))) && (
                                          <div className="text-xs text-green-400 space-y-1">
                                            {/* Mostrar promoção se houver */}
                                            {item.produto.promocao && !verificarPromocaoVencida(item.produto) && (
                                              <div>
                                                <span>Produto em promoção</span>
                                                {/* ✅ EXIBIR DATA E DIAS RESTANTES SE DEFINIDOS */}
                                                {item.produto.promocao_data_habilitada && item.produto.promocao_data_fim && (
                                                  <div className="mt-1">
                                                    <div>Válida até: {formatarDataPromocao(item.produto.promocao_data_fim)}</div>
                                                    {(() => {
                                                      const diasRestantes = calcularDiasRestantes(item.produto);
                                                      if (diasRestantes !== null) {
                                                        if (diasRestantes === 0) {
                                                          return <div className="text-yellow-400">⏰ Último dia!</div>;
                                                        } else if (diasRestantes === 1) {
                                                          return <div className="text-yellow-400">⏰ 1 dia restante</div>;
                                                        } else if (diasRestantes > 1) {
                                                          return <div>⏰ {diasRestantes} dias restantes</div>;
                                                        }
                                                      }
                                                      return null;
                                                    })()}
                                                  </div>
                                                )}
                                              </div>
                                            )}

                                            {/* Mostrar promoção vencida */}
                                            {item.produto.promocao && verificarPromocaoVencida(item.produto) && (
                                              <div className="text-red-400">Promoção vencida</div>
                                            )}

                                            {/* Mostrar desconto por quantidade se aplicável */}
                                            {item.produto.desconto_quantidade && item.quantidade >= (item.produto.quantidade_minima || 0) && (
                                              <div>
                                                Desconto por quantidade:
                                                {item.produto.tipo_desconto_quantidade === 'percentual'
                                                  ? ` ${item.produto.percentual_desconto_quantidade}%`
                                                  : ` ${formatCurrency(item.produto.valor_desconto_quantidade || 0)}`
                                                }
                                              </div>
                                            )}
                                          </div>
                                        )}
                                      </div>
                                    )}

                                    {/* Informações de origem do pedido - Ocultar apenas para cardápio digital */}
                                    {item.pedido_origem_numero && !item.cardapio_digital && (
                                      <div className="text-xs text-green-400 mt-1 lg:mt-0">
                                        📦 Pedido #{item.pedido_origem_numero}
                                      </div>
                                    )}

                                    {/* Informações de desconto */}
                                    {item.desconto && (
                                      <div className="text-xs text-blue-400 mt-1 lg:mt-0">
                                        💰 {item.desconto.tipo === 'percentual' && item.desconto.percentualDesconto
                                          ? `${Math.round(item.desconto.percentualDesconto)}% OFF`
                                          : `${formatCurrency(item.desconto.valorDesconto)} OFF`}
                                        {item.desconto.origemPedido && ' (do pedido)'}
                                      </div>
                                    )}

                                    {/* Informações do vendedor */}
                                    {pdvConfig?.vendedor && item.vendedor_nome && (
                                      <div className="text-xs text-green-400 mt-1 lg:mt-0">
                                        👤 {item.vendedor_nome}
                                      </div>
                                    )}


                                  </div>

                                  {/* Botão remover - mobile */}
                                  <button
                                    onClick={() => confirmarRemocao(item.id)}
                                    className="text-red-400 hover:text-red-300 transition-colors ml-2 lg:hidden"
                                    title="Remover item"
                                  >
                                    <Trash2 size={14} />
                                  </button>
                                </div>

                              {/* Controles de quantidade - desktop - Compactos */}
                              <div className="hidden lg:flex items-center gap-1.5">
                                <button
                                  onClick={() => alterarQuantidade(item.id, item.quantidade - 1)}
                                  className="w-6 h-6 bg-gray-700 hover:bg-gray-600 rounded-full flex items-center justify-center text-white transition-colors"
                                >
                                  <Minus size={10} />
                                </button>
                                {/* Campo editável de quantidade */}
                                {itemEditandoQuantidade === item.id ? (
                                  <input
                                    type="text"
                                    value={quantidadeEditando}
                                    onChange={(e) => {
                                      // Permitir apenas números, vírgulas e pontos
                                      const valorDigitado = e.target.value.replace(/[^\d.,]/g, '');
                                      setQuantidadeEditando(valorDigitado);
                                    }}
                                    onBlur={() => finalizarEdicaoQuantidade(item.id, item.produto?.unidade_medida)}
                                    onKeyDown={(e) => {
                                      if (e.key === 'Enter') {
                                        finalizarEdicaoQuantidade(item.id, item.produto?.unidade_medida);
                                      } else if (e.key === 'Escape') {
                                        cancelarEdicaoQuantidade();
                                      }
                                    }}
                                    className="w-12 h-6 bg-gray-700 border border-gray-600 rounded text-white text-xs text-center focus:outline-none focus:border-primary-500"
                                    autoFocus
                                    placeholder={(() => {
                                      const isFracionado = item.produto?.unidade_medida?.fracionado || false;
                                      return isFracionado ? "0,000" : "1";
                                    })()}
                                  />
                                ) : (
                                  <span
                                    className="text-white font-medium min-w-[1.2rem] text-center text-xs cursor-pointer hover:bg-gray-600/50 rounded px-1 py-0.5 transition-colors"
                                    onClick={() => iniciarEdicaoQuantidade(item.id, item.quantidade, item.produto?.unidade_medida)}
                                    title="Clique para editar a quantidade"
                                  >
                                    {formatarQuantidade(item.quantidade, item.produto?.unidade_medida)}
                                  </span>
                                )}
                                <button
                                  onClick={() => alterarQuantidade(item.id, item.quantidade + 1)}
                                  className="w-6 h-6 bg-primary-500/30 hover:bg-primary-500/50 rounded-full flex items-center justify-center text-white transition-colors"
                                >
                                  <Plus size={10} />
                                </button>

                                {/* Botões de desconto - desktop - Compactos */}
                                {!item.vendaSemProduto && pdvConfig?.desconto_no_item && !item.desconto && (
                                  <button
                                    onClick={() => abrirModalDesconto(item.id)}
                                    className="w-6 h-6 bg-yellow-600/20 hover:bg-yellow-600/40 rounded-full flex items-center justify-center text-yellow-200 transition-colors"
                                    title="Aplicar desconto"
                                  >
                                    <Percent size={10} />
                                  </button>
                                )}

                                {!item.vendaSemProduto && pdvConfig?.desconto_no_item && item.desconto && (
                                  <button
                                    onClick={() => removerDesconto(item.id)}
                                    className="w-6 h-6 bg-red-600 hover:bg-red-700 rounded-full flex items-center justify-center text-white transition-colors"
                                    title="Remover desconto"
                                  >
                                    <X size={10} />
                                  </button>
                                )}

                                {/* Botão para opções adicionais - desktop - Compacto */}
                                {!item.vendaSemProduto && item.temOpcoesAdicionais && (
                                  <button
                                    onClick={() => abrirOpcoesAdicionais(item)}
                                    className="w-6 h-6 bg-purple-600/20 hover:bg-purple-600/40 rounded-full flex items-center justify-center text-purple-200 transition-colors"
                                    title="Opções adicionais"
                                  >
                                    <Plus size={10} />
                                  </button>
                                )}

                                {/* Botão para observação adicional - desktop - Compacto */}
                                {pdvConfig?.observacao_no_item && (
                                  <button
                                    onClick={() => abrirModalObservacao(item.id)}
                                    className="w-6 h-6 bg-blue-600/20 hover:bg-blue-600/40 rounded-full flex items-center justify-center text-blue-200 transition-colors"
                                    title="Adicionar observação"
                                  >
                                    <MessageSquare size={10} />
                                  </button>
                                )}
                              </div>

                              {/* Preço e botão remover - desktop */}
                              <div className="hidden lg:flex items-center gap-3">
                                <div className="text-right">
                                  {item.desconto ? (
                                    <>
                                      <div className="flex items-center gap-2 justify-end mb-1">
                                        <span className="text-gray-400 line-through text-xs">
                                          {formatCurrency(item.desconto.precoOriginal)}
                                        </span>
                                        <span className="text-primary-400 font-bold text-sm">
                                          {formatCurrency(item.desconto.precoComDesconto)}
                                        </span>
                                      </div>
                                      <div className="text-white font-bold">
                                        {formatCurrency(item.subtotal)}
                                      </div>
                                    </>
                                  ) : (
                                    <div className="text-white font-bold">
                                      {formatCurrency(item.subtotal)}
                                    </div>
                                  )}
                                </div>
                                <button
                                  onClick={() => confirmarRemocao(item.id)}
                                  className="text-red-400 hover:text-red-300 transition-colors"
                                  title="Remover item"
                                >
                                  <Trash2 size={14} />
                                </button>
                              </div>

                            {/* Seção de Adicionais - Separada */}
                            {item.adicionais && item.adicionais.length > 0 && (
                              <div className="mt-3 pt-3 border-t border-gray-700/50">
                                <div className="flex items-center justify-between mb-2">
                                  <div className="inline-flex items-center gap-1 px-2 py-1 bg-purple-500/10 border border-purple-500/30 rounded-full text-sm text-purple-300 font-medium">
                                    <span>Adicionais</span>
                                  </div>
                                </div>
                                <div className="space-y-2">
                                  {item.adicionais.map((adicional, index) => (
                                    <div key={index} className="flex items-center justify-between bg-gray-800/30 rounded-lg p-2">
                                      <div className="flex items-center gap-2 flex-1">
                                        <span className="text-gray-300 text-sm font-medium">
                                          {adicional.nome}
                                        </span>
                                      </div>
                                      <div className="flex items-center gap-2">
                                        {/* Controles de quantidade */}
                                        <div className="flex items-center gap-1">
                                          <button
                                            onClick={() => alterarQuantidadeAdicional(item.id, index, adicional.quantidade - 1)}
                                            className="w-6 h-6 bg-gray-700 hover:bg-gray-600 rounded-full flex items-center justify-center text-white transition-colors"
                                          >
                                            <Minus size={10} />
                                          </button>
                                          <span className="text-white font-medium min-w-[1.5rem] text-center text-sm">
                                            {adicional.quantidade}
                                          </span>
                                          <button
                                            onClick={() => alterarQuantidadeAdicional(item.id, index, adicional.quantidade + 1)}
                                            className="w-6 h-6 bg-purple-500/30 hover:bg-purple-500/50 rounded-full flex items-center justify-center text-white transition-colors"
                                          >
                                            <Plus size={10} />
                                          </button>
                                        </div>
                                        {/* Preço */}
                                        <span className="text-purple-300 text-sm font-medium min-w-[4rem] text-right">
                                          {adicional.preco > 0 ? `+${formatCurrency(adicional.preco * adicional.quantidade)}` : 'Grátis'}
                                        </span>
                                        {/* Botão remover */}
                                        <button
                                          onClick={() => removerAdicional(item.id, index)}
                                          className="w-6 h-6 bg-red-600/20 hover:bg-red-600/40 rounded-full flex items-center justify-center text-red-400 hover:text-red-300 transition-colors"
                                          title="Remover adicional"
                                        >
                                          <X size={10} />
                                        </button>
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              </div>
                            )}

                            {/* Seção de Observação - Aparece por último */}
                            {item.observacao && (
                              <div className={`${item.adicionais && item.adicionais.length > 0 ? 'mt-3' : 'mt-3 pt-3 border-t border-gray-700/50'}`}>
                                <div className="flex items-center justify-between mb-2">
                                  <div className="inline-flex items-center gap-1 px-2 py-1 bg-blue-500/10 border border-blue-500/30 rounded-full text-sm text-blue-300 font-medium">
                                    <span>Observação</span>
                                  </div>
                                </div>
                                <div className="bg-gray-800/30 rounded-lg p-2">
                                  {itemEditandoObservacao === item.id ? (
                                    <div className="flex items-center gap-2">
                                      <input
                                        type="text"
                                        value={observacaoEditando}
                                        onChange={(e) => setObservacaoEditando(e.target.value)}
                                        onKeyDown={(e) => {
                                          if (e.key === 'Enter') {
                                            finalizarEdicaoObservacao(item.id);
                                          } else if (e.key === 'Escape') {
                                            cancelarEdicaoObservacao();
                                          }
                                        }}
                                        onBlur={() => finalizarEdicaoObservacao(item.id)}
                                        onFocus={(e) => {
                                          const input = e.target as HTMLInputElement;
                                          setTimeout(() => {
                                            input.setSelectionRange(input.value.length, input.value.length);
                                          }, 0);
                                        }}
                                        className="flex-1 bg-gray-800 border border-gray-600 rounded px-2 py-1 text-white text-sm focus:outline-none focus:border-blue-500"
                                        autoFocus
                                        placeholder="Digite a observação..."
                                      />
                                      <button
                                        onClick={() => finalizarEdicaoObservacao(item.id)}
                                        className="text-green-400 hover:text-green-300 transition-colors flex-shrink-0"
                                        title="Confirmar edição"
                                      >
                                        <Check size={14} />
                                      </button>
                                    </div>
                                  ) : (
                                    <div className="flex items-center justify-between">
                                      <span className="text-gray-300 text-sm italic flex-1">
                                        {item.observacao}
                                      </span>
                                      <button
                                        onClick={() => iniciarEdicaoObservacao(item.id, item.observacao!)}
                                        className="text-gray-500 hover:text-gray-300 transition-colors flex-shrink-0 ml-2"
                                        title="Editar observação"
                                      >
                                        <Pencil size={12} />
                                      </button>
                                    </div>
                                  )}
                                </div>
                              </div>
                            )}

                            {/* ✅ NOVA: Seção de Dados Fiscais - Debug */}
                            {pdvConfig?.exibir_dados_fiscais_venda && (
                              <div className={`${(item.adicionais && item.adicionais.length > 0) || item.observacao ? 'mt-3' : 'mt-3 pt-3 border-t border-gray-700/50'}`}>
                                <div className="flex items-center justify-between mb-2">
                                  <div className="inline-flex items-center gap-1 px-2 py-1 bg-orange-500/10 border border-orange-500/30 rounded-full text-sm text-orange-300 font-medium">
                                    <span>Dados Fiscais</span>
                                  </div>
                                </div>
                                {/* ✅ NOVO: Container simples e estável */}
                                <div className="bg-gray-800/30 rounded-lg p-3 -mr-6">
                                  {(() => {
                                    const dadosFiscais = obterDadosFiscaisItem(item);
                                    const regimeTributario = empresaData?.regime_tributario || 1; // 1 = Simples Nacional
                                    const isSimples = regimeTributario === 1;
                                    const isST = isSimples ? dadosFiscais.csosn === '500' : dadosFiscais.cst === '60';

                                    return (
                                      <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-2 text-xs">
                                        <div>
                                          <span className="text-gray-400">NCM:</span>
                                          <div className="text-white font-mono">{dadosFiscais.ncm}</div>
                                        </div>
                                        <div>
                                          <span className="text-gray-400">CFOP:</span>
                                          <div className="text-white font-mono">{dadosFiscais.cfop}</div>
                                        </div>
                                        {isSimples ? (
                                          <div>
                                            <span className="text-gray-400">CSOSN:</span>
                                            <div className="text-white font-mono">{dadosFiscais.csosn}</div>
                                          </div>
                                        ) : (
                                          <div>
                                            <span className="text-gray-400">CST:</span>
                                            <div className="text-white font-mono">{dadosFiscais.cst}</div>
                                          </div>
                                        )}
                                        <div>
                                          <span className="text-gray-400">Alíquota:</span>
                                          <div className="text-white font-mono">{dadosFiscais.aliquota_icms}%</div>
                                        </div>
                                        <div>
                                          <span className="text-gray-400">PIS:</span>
                                          <div className="text-white font-mono">{dadosFiscais.aliquota_pis}%</div>
                                        </div>
                                        <div>
                                          <span className="text-gray-400">COFINS:</span>
                                          <div className="text-white font-mono">{dadosFiscais.aliquota_cofins}%</div>
                                        </div>
                                        {isST && dadosFiscais.cest && (
                                          <div>
                                            <span className="text-gray-400">CEST:</span>
                                            <div className="text-white font-mono">{dadosFiscais.cest}</div>
                                          </div>
                                        )}
                                        {isST && dadosFiscais.margem_st > 0 && (
                                          <div>
                                            <span className="text-gray-400">Margem:</span>
                                            <div className="text-white font-mono">{dadosFiscais.margem_st}%</div>
                                          </div>
                                        )}
                                      </div>
                                    );
                                  })()}
                                </div>
                              </div>
                            )}

                            {/* Preço - mobile */}
                            <div className="text-sm lg:hidden mt-2">
                              {item.desconto ? (
                                <div className="flex items-center gap-2">
                                  <span className="text-gray-400 line-through text-xs">
                                    {formatCurrency(item.desconto.precoOriginal)}
                                  </span>
                                  <span className="text-primary-400 font-bold">
                                    {formatCurrency(item.desconto.precoComDesconto)}
                                  </span>
                                </div>
                              ) : (
                                <span className="text-primary-400 font-bold">
                                  {formatCurrency(item.subtotal / item.quantidade)}
                                </span>
                              )}
                            </div>

                            {/* Controles de quantidade - mobile */}
                            <div className="flex justify-between items-center mt-2 lg:hidden">
                              <div className="flex items-center gap-2">
                                <button
                                  onClick={() => alterarQuantidade(item.id, item.quantidade - 1)}
                                  className="w-8 h-8 bg-gray-700 hover:bg-gray-600 rounded-full flex items-center justify-center text-white transition-colors"
                                >
                                  <Minus size={14} />
                                </button>
                                {/* Campo editável de quantidade - mobile */}
                                {itemEditandoQuantidade === item.id ? (
                                  <input
                                    type="text"
                                    value={quantidadeEditando}
                                    onChange={(e) => {
                                      // Permitir apenas números, vírgulas e pontos
                                      const valorDigitado = e.target.value.replace(/[^\d.,]/g, '');
                                      setQuantidadeEditando(valorDigitado);
                                    }}
                                    onBlur={() => finalizarEdicaoQuantidade(item.id, item.produto?.unidade_medida)}
                                    onKeyDown={(e) => {
                                      if (e.key === 'Enter') {
                                        finalizarEdicaoQuantidade(item.id, item.produto?.unidade_medida);
                                      } else if (e.key === 'Escape') {
                                        cancelarEdicaoQuantidade();
                                      }
                                    }}
                                    className="w-16 h-8 bg-gray-700 border border-gray-600 rounded text-white text-sm text-center focus:outline-none focus:border-primary-500"
                                    autoFocus
                                    placeholder={(() => {
                                      const isFracionado = item.produto?.unidade_medida?.fracionado || false;
                                      return isFracionado ? "0,000" : "1";
                                    })()}
                                  />
                                ) : (
                                  <span
                                    className="text-white font-medium min-w-[2rem] text-center cursor-pointer hover:bg-gray-600/50 rounded px-2 py-1 transition-colors"
                                    onClick={() => iniciarEdicaoQuantidade(item.id, item.quantidade, item.produto?.unidade_medida)}
                                    title="Clique para editar a quantidade"
                                  >
                                    {formatarQuantidade(item.quantidade, item.produto?.unidade_medida)}
                                  </span>
                                )}
                                <button
                                  onClick={() => alterarQuantidade(item.id, item.quantidade + 1)}
                                  className="w-8 h-8 bg-primary-500/30 hover:bg-primary-500/50 rounded-full flex items-center justify-center text-white transition-colors"
                                >
                                  <Plus size={14} />
                                </button>

                                {/* Botão para aplicar desconto */}
                                {pdvConfig?.desconto_no_item && !item.desconto && (
                                  <button
                                    onClick={() => abrirModalDesconto(item.id)}
                                    className="w-8 h-8 bg-yellow-600/20 hover:bg-yellow-600/40 rounded-full flex items-center justify-center text-yellow-200 transition-colors"
                                    title="Aplicar desconto"
                                  >
                                    <Percent size={14} />
                                  </button>
                                )}

                                {/* Botão para remover desconto */}
                                {pdvConfig?.desconto_no_item && item.desconto && (
                                  <button
                                    onClick={() => removerDesconto(item.id)}
                                    className="w-8 h-8 bg-red-600 hover:bg-red-700 rounded-full flex items-center justify-center text-white transition-colors"
                                    title="Remover desconto"
                                  >
                                    <X size={14} />
                                  </button>
                                )}

                                {/* Botão para opções adicionais */}
                                {item.temOpcoesAdicionais && (
                                  <button
                                    onClick={() => abrirOpcoesAdicionais(item)}
                                    className="w-8 h-8 bg-purple-600/20 hover:bg-purple-600/40 rounded-full flex items-center justify-center text-purple-200 transition-colors"
                                    title="Opções adicionais"
                                  >
                                    <Plus size={14} />
                                  </button>
                                )}

                                {/* Botão para observação adicional */}
                                {pdvConfig?.observacao_no_item && (
                                  <button
                                    onClick={() => abrirModalObservacao(item.id)}
                                    className="w-8 h-8 bg-blue-600/20 hover:bg-blue-600/40 rounded-full flex items-center justify-center text-blue-200 transition-colors"
                                    title="Adicionar observação"
                                  >
                                    <MessageSquare size={14} />
                                  </button>
                                )}
                              </div>
                              <div className="text-white font-bold">
                                {formatCurrency(item.subtotal)}
                              </div>
                            </div>
                            </div>
                          </div>
                        </div>
                      </motion.div>
                    ))}
                  </div>
                )}
              </div>

            {/* Menu Fixo no Footer da Área de Produtos - Só aparece quando NÃO está na finalização - Compacto */}
            {!showFinalizacaoFinal && (
              <div className="absolute bottom-0 left-0 right-0 bg-background-card border-t border-gray-800 z-40">
                {/* Container sem padding para maximizar espaço - Compacto */}
                <div className="h-12 flex items-center">
                  {/* Botão Anterior - Compacto */}
                  {menuStartIndex > 0 && (
                    <button
                      onClick={navegarMenuAnterior}
                      className="w-9 h-full flex items-center justify-center text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors border-r border-gray-800"
                    >
                      <ChevronLeft size={18} />
                    </button>
                  )}

                  {/* Itens do Menu Visíveis - Compactos */}
                  <div className="flex items-center h-full flex-1">
                    {menuPDVItems.slice(menuStartIndex, menuStartIndex + visibleMenuItems).map((item, index) => {
                      const IconComponent = item.icon;
                      const originalIndex = menuStartIndex + index;
                      const teclaAtalho = originalIndex === 0 ? 'F0' : `F${originalIndex}`;

                      return (
                        <button
                          key={item.id}
                          onClick={(e) => item.onClick(e)}
                          className={`flex flex-col items-center justify-center text-gray-400 ${getColorClasses(item.color)} transition-all duration-200 h-full relative ${
                            item.id === 'cardapio-digital' && contadorCardapio > 0
                              ? 'bg-red-500/10 border-red-500/20 text-red-400 animate-pulse'
                              : ''
                          }`}
                          style={{ flex: '1 1 100px', minWidth: '100px' }}
                        >
                          {/* Wrapper do ícone com contador - Compacto */}
                          <div className="relative">
                            <IconComponent size={18} />
                            {/* Contador de pedidos pendentes - só aparece no botão Pedidos */}
                            {item.id === 'pedidos' && contadorPedidosPendentes > 0 && (
                              <div className="absolute -top-3 -right-10 bg-red-500 text-white text-sm rounded-full min-w-[22px] h-[22px] flex items-center justify-center font-bold border-2 border-background-card shadow-lg z-[60]">
                                {contadorPedidosPendentes > 99 ? '99+' : contadorPedidosPendentes}
                              </div>
                            )}
                            {/* Contador de pedidos do cardápio digital - só aparece no botão Cardápio Digital */}
                            {item.id === 'cardapio-digital' && contadorCardapio > 0 && (
                              <div className={`absolute -top-3 -right-10 text-white text-sm rounded-full min-w-[22px] h-[22px] flex items-center justify-center font-bold border-2 border-background-card shadow-lg z-[60] ${
                                contadorCardapio > 0 ? 'bg-orange-500 animate-pulse' : 'bg-gray-500'
                              }`}>
                                {contadorCardapio > 99 ? '99+' : contadorCardapio}
                              </div>
                            )}
                            {/* Contador de NFC-e pendentes - só aparece no botão Movimentos */}
                            {item.id === 'movimentos' && contadorNfcePendentes > 0 && (
                              <div className="absolute -top-3 -right-10 bg-yellow-500 text-white text-sm rounded-full min-w-[22px] h-[22px] flex items-center justify-center font-bold border-2 border-background-card shadow-lg z-[60]">
                                {contadorNfcePendentes > 99 ? '99+' : contadorNfcePendentes}
                              </div>
                            )}
                            {/* Contador de mesas abertas - só aparece no botão Mesas */}
                            {item.id === 'mesas' && contadorVendasMesas > 0 && (
                              <div className="absolute -top-3 -right-10 bg-red-500 text-white text-sm rounded-full min-w-[22px] h-[22px] flex items-center justify-center font-bold border-2 border-background-card shadow-lg z-[60]">
                                {contadorVendasMesas > 99 ? '99+' : contadorVendasMesas}
                              </div>
                            )}
                            {/* Contador de comandas abertas - só aparece no botão Comandas */}
                            {item.id === 'comandas' && contadorVendasComandas > 0 && (
                              <div className="absolute -top-3 -right-10 bg-red-500 text-white text-sm rounded-full min-w-[22px] h-[22px] flex items-center justify-center font-bold border-2 border-background-card shadow-lg z-[60]">
                                {contadorVendasComandas > 99 ? '99+' : contadorVendasComandas}
                              </div>
                            )}
                            {/* ✅ NOVO: Contador de delivery local - só aparece no botão Delivery Local */}
                            {item.id === 'delivery-local' && contadorVendasDelivery > 0 && (
                              <div className="absolute -top-3 -right-10 bg-orange-500 text-white text-sm rounded-full min-w-[22px] h-[22px] flex items-center justify-center font-bold border-2 border-background-card shadow-lg z-[60]">
                                {contadorVendasDelivery > 99 ? '99+' : contadorVendasDelivery}
                              </div>
                            )}
                          </div>
                          <div className="flex items-center gap-1 mt-0.5">
                            <span className="text-xs whitespace-nowrap">{item.label}</span>
                            <span className="text-xs bg-gray-700 px-1 py-0.5 rounded text-gray-300 font-mono">
                              {teclaAtalho}
                            </span>
                          </div>
                        </button>
                      );
                    })}
                  </div>

                  {/* Botão Próximo - Compacto */}
                  {menuStartIndex + visibleMenuItems < menuPDVItems.length && (
                    <button
                      onClick={navegarMenuProximo}
                      className="w-9 h-full flex items-center justify-center text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors border-l border-gray-800"
                    >
                      <ChevronRight size={18} />
                    </button>
                  )}
                </div>
              </div>
            )}
            </div>
          </div>



        {/* Área Lateral de Informações - Aparece quando há configurações habilitadas OU pedidos importados OU itens do cardápio digital */}
        {carrinho.length > 0 && (
          pedidosImportados.length > 0 ||
          carrinho.some(item => item.cardapio_digital) ||
          (pdvConfig?.seleciona_clientes ||
           pdvConfig?.vendedor ||
           pdvConfig?.comandas ||
           pdvConfig?.mesas ||
           pdvConfig?.exibe_foto_item ||
           pdvConfig?.solicitar_nome_cliente ||
           pdvConfig?.delivery)
        ) && (
          <motion.div
            initial={{ x: '100%', opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{
              type: "tween",
              duration: 0.3,
              ease: [0.25, 0.46, 0.45, 0.94]
            }}
            className={`w-48 bg-background-card border-l border-gray-800 flex flex-col h-full ${
              showFinalizacaoFinal ? 'z-20' : ''
            }`}
          >
            {/* Conteúdo scrollável da área lateral */}
            <div className="flex-1 overflow-y-auto custom-scrollbar p-2 space-y-2">

              {/* ✅ CORREÇÃO: Foto do Item - PRIMEIRA POSIÇÃO - Aparece se configuração habilitada */}
              {pdvConfig?.exibe_foto_item && carrinho.length > 0 && (
                <div className="bg-orange-500/10 border border-orange-500/30 rounded p-2">
                  <div className="space-y-1">
                    <div className="flex items-center gap-1">
                      <Camera size={12} className="text-orange-400" />
                      <div className="text-xs text-orange-400 font-medium">Foto do Item</div>
                    </div>
                    {/* Foto do último item adicionado */}
                    {(() => {
                      const ultimoItem = carrinho[carrinho.length - 1];
                      const fotoItem = getFotoPrincipal(ultimoItem?.produto);
                      return (
                        <div className="space-y-1">
                          <div className="text-white text-xs font-medium truncate">
                            {ultimoItem?.produto.nome}
                          </div>
                          <div className="w-full h-20 bg-gray-900 rounded overflow-hidden">
                            {fotoItem ? (
                              <img
                                src={fotoItem.url}
                                alt={ultimoItem?.produto.nome}
                                className="w-full h-full object-cover cursor-pointer hover:opacity-80 transition-opacity"
                                onClick={(e) => abrirGaleria(ultimoItem?.produto, e)}
                              />
                            ) : (
                              <div className="w-full h-full flex items-center justify-center">
                                <Package size={16} className="text-gray-700" />
                              </div>
                            )}
                          </div>
                        </div>
                      );
                    })()}
                  </div>
                </div>
              )}

              {/* Cliente - Aparece se configuração habilitada OU se há pedidos importados OU itens do cardápio digital OU delivery habilitado */}
              {(pdvConfig?.seleciona_clientes || pdvConfig?.delivery || pedidosImportados.length > 0 || carrinho.some(item => item.cardapio_digital)) && (
                <div className="bg-blue-500/10 border border-blue-500/30 rounded p-2">
                  {/* Cliente selecionado manualmente - para seleciona_clientes ou delivery */}
                  {(pdvConfig?.seleciona_clientes || pdvConfig?.delivery) ? (
                    clienteSelecionado ? (
                      <div className="space-y-1">
                        <div className="flex items-center gap-1">
                          <User size={12} className="text-blue-400" />
                          <div className="text-xs text-blue-400 font-medium">
                            {(() => {
                              let texto = '';
                              if (pdvConfig?.delivery && !pdvConfig?.seleciona_clientes) {
                                texto = 'Cliente do Delivery';
                              } else {
                                texto = 'Cliente';
                              }

                              // Adicionar "/ Fiado" se estiver habilitado
                              if (pdvConfig?.fiado) {
                                texto += ' / Fiado';
                              }

                              return texto;
                            })()}
                          </div>
                        </div>
                        <div className="text-white text-xs font-medium truncate">{clienteSelecionado.nome}</div>

                        {/* Exibir múltiplos telefones formatados um abaixo do outro */}
                        {(clienteSelecionado.telefones && clienteSelecionado.telefones.length > 0) ? (
                          <div className="space-y-0.5">
                            {clienteSelecionado.telefones.map((telefone, index) => (
                              <div key={index} className="text-xs text-gray-400 flex items-center gap-1">
                                <span>{formatarTelefone(telefone.numero, telefone.tipo)}</span>
                                {telefone.whatsapp && (
                                  <span className="text-green-400 text-xs">WhatsApp</span>
                                )}
                              </div>
                            ))}
                          </div>
                        ) : clienteSelecionado.telefone && (
                          <div className="text-xs text-gray-400">
                            {formatarTelefone(clienteSelecionado.telefone, clienteSelecionado.telefone.replace(/\D/g, '').length === 11 ? 'Celular' : 'Fixo')}
                          </div>
                        )}
                        {/* Botões só aparecem quando NÃO há pedidos importados */}
                        {pedidosImportados.length === 0 && (
                          <div className="flex gap-2 mt-1">
                            <button
                              onClick={() => setShowClienteModal(true)}
                              className="text-xs text-blue-400 hover:text-blue-300 transition-colors"
                            >
                              Trocar
                            </button>
                            <button
                              onClick={() => {
                                setClienteSelecionado(null);
                                // Limpar também o CPF/CNPJ se estiver preenchido
                                setCpfCnpjNota('');
                                setClienteEncontrado(null);
                                // Limpar opções de faturamento do cliente removido
                                setDescontosCliente({ prazo: [], valor: [] });
                                setDescontoPrazoSelecionado(null);
                              }}
                              className="text-xs text-red-400 hover:text-red-300 transition-colors"
                            >
                              Remover
                            </button>
                          </div>
                        )}
                      </div>
                    ) : (
                      <button
                        onClick={() => setShowClienteModal(true)}
                        className="w-full text-left space-y-1 hover:bg-blue-500/20 transition-colors rounded p-1"
                      >
                        <div className="flex items-center gap-1">
                          <User size={12} className="text-blue-400" />
                          <div className="text-xs text-blue-400 font-medium">
                            {(() => {
                              let texto = '';
                              if (pdvConfig?.delivery && !pdvConfig?.seleciona_clientes) {
                                texto = 'Cliente do Delivery';
                              } else {
                                texto = 'Cliente';
                              }

                              // Adicionar "/ Fiado" se estiver habilitado
                              if (pdvConfig?.fiado) {
                                texto += ' / Fiado';
                              }

                              return texto;
                            })()}
                          </div>
                        </div>
                        <div className="text-white text-xs">Selecionar</div>
                      </button>
                    )
                  ) : (
                    /* Cliente dos pedidos importados OU do cardápio digital */
                    (pedidosImportados.length > 0 && pedidosImportados[0]?.cliente) ? (
                      <div className="space-y-1">
                        <div className="flex items-center gap-1">
                          <User size={12} className="text-blue-400" />
                          <div className="text-xs text-blue-400 font-medium">Cliente dos Pedidos</div>
                        </div>
                        <div className="text-white text-xs font-medium truncate">{pedidosImportados[0].cliente.nome}</div>
                        {pedidosImportados[0].cliente.telefone && (
                          <div className="text-xs text-gray-400">{pedidosImportados[0].cliente.telefone}</div>
                        )}
                        {pedidosImportados[0].cliente.email && (
                          <div className="text-xs text-gray-500 truncate">{pedidosImportados[0].cliente.email}</div>
                        )}
                      </div>
                    ) : (
                      /* Cliente do cardápio digital */
                      clienteSelecionado && carrinho.some(item => item.cardapio_digital) && (
                        <div className="space-y-1">
                          <div className="flex items-center gap-1">
                            <User size={12} className="text-blue-400" />
                            <div className="text-xs text-blue-400 font-medium">Cliente do Cardápio</div>
                          </div>
                          <div className="text-white text-xs font-medium truncate">{clienteSelecionado.nome}</div>

                          {/* Exibir múltiplos telefones formatados um abaixo do outro */}
                          {(clienteSelecionado.telefones && clienteSelecionado.telefones.length > 0) ? (
                            <div className="space-y-0.5">
                              {clienteSelecionado.telefones.map((telefone, index) => (
                                <div key={index} className="text-xs text-gray-400 flex items-center gap-1">
                                  <span>{formatarTelefone(telefone.numero, telefone.tipo)}</span>
                                  {telefone.whatsapp && (
                                    <span className="text-green-400 text-xs">WhatsApp</span>
                                  )}
                                </div>
                              ))}
                            </div>
                          ) : clienteSelecionado.telefone && (
                            <div className="text-xs text-gray-400">
                              {formatarTelefone(clienteSelecionado.telefone, clienteSelecionado.telefone.replace(/\D/g, '').length === 11 ? 'Celular' : 'Fixo')}
                            </div>
                          )}

                          {clienteSelecionado.documento && (
                            <div className="text-xs text-gray-500 truncate">{clienteSelecionado.documento}</div>
                          )}
                        </div>
                      )
                    )
                  )}
                </div>
              )}

              {/* ✅ NOVO: Nome do Cliente - Aparece se configuração habilitada */}
              {pdvConfig?.solicitar_nome_cliente && (
                <div className="bg-blue-500/10 border border-blue-500/30 rounded p-2">
                  <div className="space-y-1">
                    <div className="flex items-center gap-1">
                      <User size={12} className="text-blue-400" />
                      <div className="text-xs text-blue-400 font-medium">Nome do Cliente</div>
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="text-white text-xs font-medium">
                        {nomeCliente || 'Nenhum informado'}
                      </div>
                      <button
                        onClick={() => {
                          // ✅ Inicializar estado temporário com valor atual
                          setNomeClienteTemp(nomeCliente);
                          setShowNomeClienteModal(true);
                        }}
                        className="text-xs text-blue-400 hover:text-blue-300 transition-colors"
                      >
                        {nomeCliente ? 'Editar' : 'Informar'}
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {/* Vendedor - Aparece se configuração habilitada */}
              {pdvConfig?.vendedor && (
                <div className="bg-green-500/10 border border-green-500/30 rounded p-2">
                  <div className="space-y-1">
                    <div className="flex items-center gap-1">
                      <UserCheck size={12} className="text-green-400" />
                      <div className="text-xs text-green-400 font-medium">Vendedor</div>
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="text-white text-xs font-medium">
                        {vendedorSelecionado ? vendedorSelecionado.nome : 'Nenhum selecionado'}
                      </div>
                      <button
                        onClick={() => setShowVendedorModal(true)}
                        className="text-xs text-green-400 hover:text-green-300 transition-colors"
                      >
                        {vendedorSelecionado ? 'Trocar' : 'Selecionar'}
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {/* ✅ ATUALIZADO: Comanda - Aparece se configuração habilitada */}
              {pdvConfig?.comandas && (
                <div className="bg-yellow-500/10 border border-yellow-500/30 rounded p-2">
                  <div className="space-y-1">
                    <div className="flex items-center gap-1">
                      <FileText size={12} className="text-yellow-400" />
                      <div className="text-xs text-yellow-400 font-medium">Comanda</div>
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="text-white text-xs font-medium">
                        {comandaNumero ? `Nº ${comandaNumero}` : 'Nenhuma selecionada'}
                      </div>
                      <button
                        onClick={() => {
                          // ✅ Inicializar estado temporário com valor atual
                          setComandaNumeroTemp(comandaNumero);
                          setShowComandaModal(true);
                        }}
                        className="text-xs text-yellow-400 hover:text-yellow-300 transition-colors"
                      >
                        {comandaNumero ? 'Editar' : 'Selecionar'}
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {/* ✅ ATUALIZADO: Mesa - Aparece se configuração habilitada */}
              {pdvConfig?.mesas && (
                <div className="bg-purple-500/10 border border-purple-500/30 rounded p-2">
                  <div className="space-y-1">
                    <div className="flex items-center gap-1">
                      <Utensils size={12} className="text-purple-400" />
                      <div className="text-xs text-purple-400 font-medium">Mesa</div>
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="text-white text-xs font-medium">
                        {mesaNumero ? `Nº ${mesaNumero}` : 'Nenhuma selecionada'}
                      </div>
                      <button
                        onClick={() => {
                          // ✅ Inicializar estado temporário com valor atual
                          setMesaNumeroTemp(mesaNumero);
                          setShowMesaModal(true);
                        }}
                        className="text-xs text-purple-400 hover:text-purple-300 transition-colors"
                      >
                        {mesaNumero ? 'Editar' : 'Selecionar'}
                      </button>
                    </div>
                  </div>
                </div>
              )}


              {/* Opções de Faturamento - Descontos do Cliente */}
              {pedidosImportados.length === 0 && (descontosCliente.prazo.length > 0 || descontosCliente.valor.length > 0) && (
                <div className="bg-blue-500/10 border border-blue-500/30 rounded p-2">
                  <div className="space-y-1">
                    <div className="flex items-center gap-1">
                      <Percent size={12} className="text-blue-400" />
                      <div className="text-xs text-blue-400 font-medium">Opções de Faturamento</div>
                    </div>

                    {/* Descontos por Prazo */}
                    {descontosCliente.prazo.length > 0 && (
                      <div className="space-y-1">
                        <div className="text-xs text-gray-400">Prazo de Faturamento</div>
                        <div className="grid grid-cols-2 gap-1">
                          {getDescontosPrazoDisponiveis().map((desconto, idx) => {
                            const isSelected = descontoPrazoSelecionado === desconto.id;
                            return (
                              <div
                                key={idx}
                                className={`p-1 rounded border cursor-pointer transition-colors text-xs ${
                                  isSelected
                                    ? 'bg-blue-500/20 border-blue-500 ring-1 ring-blue-500/50'
                                    : desconto.tipo === 'desconto'
                                      ? 'bg-green-500/10 border-green-500/30 hover:bg-green-500/20'
                                      : 'bg-red-500/10 border-red-500/30 hover:bg-red-500/20'
                                }`}
                                onClick={() => setDescontoPrazoSelecionado(isSelected ? null : desconto.id)}
                              >
                                <div className="relative flex items-center justify-center">
                                  <div className="flex items-center gap-0.5">
                                    <span className="text-white font-medium text-xs">
                                      {desconto.prazo_dias}d
                                    </span>
                                    <span className={`text-xs ${
                                      isSelected
                                        ? 'text-blue-400'
                                        : desconto.tipo === 'desconto' ? 'text-green-400' : 'text-red-400'
                                    }`}>
                                      {desconto.tipo === 'desconto' ? '+' : '-'}{desconto.percentual}%
                                    </span>
                                  </div>
                                  {isSelected && (
                                    <span className="absolute right-0.5 text-xs text-blue-400">✓</span>
                                  )}
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    )}

                    {/* Desconto por Valor (se aplicável) */}
                    {(() => {
                      const descontoValor = calcularDescontoPorValor(calcularTotal());
                      return descontoValor && (
                        <div className="mt-1 pt-1 border-t border-blue-500/20">
                          <div className="text-xs text-gray-400 mb-1">Desconto por Valor</div>
                          <div className={`p-1 rounded border text-center text-xs ${
                            descontoValor.tipo === 'desconto'
                              ? 'bg-green-500/10 border-green-500/30'
                              : 'bg-red-500/10 border-red-500/30'
                          }`}>
                            <div className="text-white font-medium text-xs">
                              A partir de {formatCurrency(descontoValor.valorMinimo)}
                            </div>
                            <div className={`text-xs ${
                              descontoValor.tipo === 'desconto' ? 'text-green-400' : 'text-red-400'
                            }`}>
                              {descontoValor.tipo === 'desconto' ? '+' : '-'}{descontoValor.percentual}%
                            </div>
                          </div>
                        </div>
                      );
                    })()}
                  </div>
                </div>
              )}

              {/* Pedidos Importados - Aparece quando há pedidos importados */}
              {pedidosImportados.length > 0 && (
                <div className="space-y-2">
                  {pedidosImportados.map((pedido, index) => (
                    <div key={pedido.id} className="bg-green-500/10 border border-green-500/30 rounded p-2">
                      <div className="space-y-1">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-1">
                            <ShoppingBag size={12} className="text-green-400" />
                            <div className="text-xs text-green-400 font-medium">Pedido Importado</div>
                          </div>
                          <button
                            onClick={() => {
                              setPedidoParaRemover(pedido);
                              setShowConfirmRemovePedidoImportado(true);
                            }}
                            className="text-red-400 hover:text-red-300 transition-colors"
                            title="Remover pedido importado"
                          >
                            <X size={12} />
                          </button>
                        </div>
                        <div className="text-white text-xs font-medium">#{pedido.numero}</div>
                        <div className="text-xs text-gray-400">
                          {new Date(pedido.created_at).toLocaleDateString('pt-BR')} - {new Date(pedido.created_at).toLocaleTimeString('pt-BR', {
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                        </div>
                        {pedido.usuario && (
                          <div className="text-xs text-gray-500">{pedido.usuario.nome}</div>
                        )}

                        {/* Opções de Faturamento do Pedido Importado */}
                        {(pedido.desconto_prazo_id || (descontosCliente.prazo.length > 0 || descontosCliente.valor.length > 0)) && (
                          <div className="border-t border-green-500/20 pt-1 mt-1">
                            <div className="flex items-center gap-1 mb-1">
                              <Percent size={10} className="text-green-400" />
                              <div className="text-xs text-green-400 font-medium">Opções de Faturamento</div>
                            </div>

                            {/* Descontos por Prazo */}
                            {descontosCliente.prazo.length > 0 && (
                              <div className="space-y-1">
                                <div className="text-xs text-gray-400">Prazo de Faturamento</div>
                                <div className="grid grid-cols-2 gap-1">
                                  {descontosCliente.prazo.map((desconto, idx) => {
                                    const isSelected = descontoPrazoSelecionado === desconto.id;
                                    const wasOriginallySelected = pedido.desconto_prazo_id === desconto.id;
                                    return (
                                      <div
                                        key={idx}
                                        className={`p-1 rounded border cursor-pointer transition-colors text-xs ${
                                          isSelected
                                            ? 'bg-blue-500/20 border-blue-500 ring-1 ring-blue-500/50'
                                            : wasOriginallySelected
                                              ? 'bg-green-500/20 border-green-500/50 ring-1 ring-green-500/30'
                                              : desconto.tipo === 'desconto'
                                                ? 'bg-green-500/5 border-green-500/20 hover:bg-green-500/10'
                                                : 'bg-red-500/5 border-red-500/20 hover:bg-red-500/10'
                                        }`}
                                        onClick={() => setDescontoPrazoSelecionado(isSelected ? null : desconto.id)}
                                      >
                                        <div className="relative flex items-center justify-center">
                                          <div className="flex items-center gap-0.5">
                                            <span className="text-white font-medium text-xs">
                                              {desconto.prazo_dias}d
                                            </span>
                                            <span className={`text-xs ${
                                              isSelected
                                                ? 'text-blue-400'
                                                : wasOriginallySelected
                                                  ? 'text-green-400'
                                                  : desconto.tipo === 'desconto' ? 'text-green-400' : 'text-red-400'
                                            }`}>
                                              {desconto.tipo === 'desconto' ? '-' : '+'}%{desconto.percentual}
                                            </span>
                                          </div>
                                          {isSelected && (
                                            <span className="absolute right-0.5 text-xs text-blue-400">✓</span>
                                          )}
                                          {!isSelected && wasOriginallySelected && (
                                            <span className="absolute right-0.5 text-xs text-green-400">Orig</span>
                                          )}
                                        </div>
                                      </div>
                                    );
                                  })}
                                </div>
                              </div>
                            )}

                            {/* Desconto por Valor (se aplicável) */}
                            {(() => {
                              const descontoValor = calcularDescontoPorValor(calcularTotal());
                              return descontoValor && (
                                <div className="mt-1 pt-1 border-t border-green-500/20">
                                  <div className="text-xs text-gray-400 mb-1">Desconto por Valor</div>
                                  <div className={`p-1 rounded border text-center text-xs ${
                                    descontoValor.tipo === 'desconto'
                                      ? 'bg-green-500/10 border-green-500/30'
                                      : 'bg-red-500/10 border-red-500/30'
                                  }`}>
                                    <div className="text-white font-medium text-xs">
                                      A partir de {formatCurrency(descontoValor.valorMinimo)}
                                    </div>
                                    <div className={`text-xs ${
                                      descontoValor.tipo === 'desconto' ? 'text-green-400' : 'text-red-400'
                                    }`}>
                                      {descontoValor.tipo === 'desconto' ? '-' : '+'}%{descontoValor.percentual}
                                    </div>
                                  </div>
                                </div>
                              );
                            })()}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}

            </div>
          </motion.div>
        )}



        {/* Container das Áreas de Finalização - Agrupa primeira e segunda tela */}
        {carrinho.length > 0 && (
          <div
            className={`flex-1 transition-all duration-300`}
            style={{
              display: 'flex',
              position: 'relative',
              height: '100%',
              flexShrink: 0
            }}
          >

            {/* Área de Finalização de Venda - Primeira tela - Oculta quando segunda tela está ativa */}
            {!showFinalizacaoFinal && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.3 }}
                className="w-full bg-background-card border-l border-gray-800 flex flex-col h-full transition-all duration-300"
                style={{
                  position: 'relative',
                  flexShrink: 0
                }}
              >




            {/* Conteúdo scrollável - Altura otimizada */}
            <div className="flex-1 overflow-y-auto custom-scrollbar p-3"
              style={{ maxHeight: 'calc(100vh - 200px)' }}
            >

              {/* Seção de Pagamento quando NÃO há pedidos importados */}
              {pedidosImportados.length === 0 && (
                <div className="space-y-3">
                  {/* ✅ NOVO: Exibir numeração reservada da venda em andamento */}
                  {vendaEmAndamento && (
                    <div className="bg-blue-900/20 border border-blue-800/30 rounded-lg p-3">
                      <div className="flex items-center justify-between text-sm">
                        <div className="text-blue-300 font-medium">
                          📋 Venda: {vendaEmAndamento.numero_venda}
                        </div>
                        {vendaEmAndamento.numero_nfce_reservado && vendaEmAndamento.serie_usuario && (
                          <div className="text-blue-400">
                            🧾 NFC-e #{vendaEmAndamento.numero_nfce_reservado} Série {vendaEmAndamento.serie_usuario}
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Tipo de Pagamento - Compacto */}
                  <div>
                    <label className="block text-sm font-medium text-white mb-1.5">
                      Tipo de Pagamento
                    </label>
                    <div className="flex gap-1.5">
                      <button
                        onClick={() => {
                          setTipoPagamento('vista');
                          limparPagamentosParciais();

                          // ✅ CORREÇÃO: Sempre resetar para "Dinheiro" quando selecionar "À Vista"
                          const dinheiro = formasPagamento.find(forma =>
                            forma.nome?.toLowerCase() === 'dinheiro'
                          );
                          if (dinheiro) {
                            setFormaPagamentoSelecionada(dinheiro.id);
                          } else if (formasPagamento.length > 0) {
                            setFormaPagamentoSelecionada(formasPagamento[0].id);
                          }
                        }}
                        className={`flex-1 py-1.5 px-2.5 rounded border transition-colors text-sm ${
                          tipoPagamento === 'vista'
                            ? 'bg-gray-700 border-gray-600 text-white'
                            : 'bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600 hover:bg-gray-750'
                        }`}
                      >
                        À Vista
                      </button>
                      <button
                        onClick={() => {
                          setTipoPagamento('parcial');
                          setFormaPagamentoSelecionada(null);
                        }}
                        className={`flex-1 py-1.5 px-2.5 rounded border transition-colors text-sm ${
                          tipoPagamento === 'parcial'
                            ? 'bg-gray-700 border-gray-600 text-white'
                            : 'bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600 hover:bg-gray-750'
                        }`}
                      >
                        Parciais
                      </button>
                    </div>
                  </div>

                  {/* Formas de Pagamento - Compacto */}
                  <div>
                    <label className="block text-sm font-medium text-white mb-1.5">
                      {tipoPagamento === 'vista' ? 'Forma de Pagamento' : 'Formas de Pagamento'}
                    </label>

                    {tipoPagamento === 'vista' ? (
                      // Pagamento à vista - interface compacta
                      <div className="grid grid-cols-2 gap-1.5">
                        {formasPagamento.map((forma) => (
                          <button
                            key={forma.id}
                            onClick={() => handleSelecionarFormaPagamento(forma)}
                            className={`p-2 rounded border transition-colors text-sm ${
                              formaPagamentoSelecionada === forma.id
                                ? 'bg-gray-700 border-gray-600 text-white'
                                : 'bg-gray-800/50 border-gray-700 text-gray-300 hover:border-gray-600 hover:bg-gray-750'
                            }`}
                          >
                            {forma.nome}
                            {forma.tipo === 'cartao_credito' && forma.max_parcelas > 1 && (
                              <span className="text-xs text-gray-400 block">
                                {parcelasFormaPagamento[forma.id]
                                  ? `${parcelasFormaPagamento[forma.id]}x de ${formatCurrency(calcularTotalComDesconto() / parcelasFormaPagamento[forma.id])}`
                                  : `até ${forma.max_parcelas}x`
                                }
                              </span>
                            )}
                          </button>
                        ))}
                      </div>
                    ) : (
                      // Pagamentos parciais - interface compacta
                      <div className="space-y-3">
                        {/* Campo de valor - Compacto */}
                        <div>
                          <label className="block text-sm font-medium text-white mb-1.5">
                            Valor do Pagamento
                          </label>
                          <input
                            type="text"
                            value={valorParcial}
                            onChange={(e) => setValorParcial(formatCurrencyInput(e.target.value))}
                            placeholder={`R$ 0,00 (vazio = ${formatCurrency(calcularTotalComDesconto() - calcularTotalPago() > 0 ? calcularTotalComDesconto() - calcularTotalPago() : 0)})`}
                            className="w-full bg-gray-800/50 border border-gray-700 rounded py-1.5 px-2.5 text-white text-sm focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                          />
                          <div className="text-xs text-gray-500 mt-1">
                            💡 Deixe vazio para usar o valor restante automaticamente
                          </div>
                        </div>

                        {/* Botões das formas de pagamento - Compacto */}
                        <div className="grid grid-cols-2 gap-1.5">
                          {formasPagamento.map((forma) => (
                            <button
                              key={forma.id}
                              onClick={() => handleSelecionarFormaPagamentoParcial(forma)}
                              className="p-2 rounded border border-gray-700 bg-gray-800/50 text-gray-300 hover:border-gray-600 hover:bg-gray-750 transition-colors text-sm"
                            >
                              {forma.nome}
                              {forma.tipo === 'cartao_credito' && forma.max_parcelas > 1 && (
                                <span className="text-xs text-gray-400 block">
                                  {parcelasFormaPagamento[forma.id]
                                    ? `${parcelasFormaPagamento[forma.id]}x de ${formatCurrency(calcularTotalComDesconto() / parcelasFormaPagamento[forma.id])}`
                                    : `até ${forma.max_parcelas}x`
                                  }
                                </span>
                              )}
                            </button>
                          ))}
                        </div>

                        {/* Lista de pagamentos adicionados - Compacta */}
                        {pagamentosParciais.length > 0 && (
                          <div className="space-y-1.5">
                            <div className="flex justify-between items-center">
                              <span className="text-xs font-medium text-gray-400">Pagamentos Adicionados:</span>
                              <button
                                onClick={confirmarLimparTodos}
                                className="text-xs text-red-400 hover:text-red-300"
                              >
                                Limpar Todos
                              </button>
                            </div>

                            {pagamentosParciais.map((pagamento) => {
                              const forma = formasPagamento.find(f => f.id === pagamento.forma);
                              return (
                                <div key={pagamento.id} className="flex justify-between items-center bg-gray-800/30 rounded p-1.5">
                                  <div>
                                    <span className="text-white text-xs">{forma?.nome || pagamento.forma}</span>
                                    {pagamento.parcelas && pagamento.valorParcela && (
                                      <span className="text-gray-400 text-xs block">
                                        {pagamento.parcelas}x de {formatCurrency(pagamento.valorParcela)}
                                      </span>
                                    )}
                                    <span className="text-primary-400 text-xs ml-2">{formatCurrency(pagamento.valor)}</span>
                                  </div>
                                  <button
                                    onClick={() => confirmarRemocaoItem(pagamento.id)}
                                    className="text-red-400 hover:text-red-300"
                                  >
                                    <X size={14} />
                                  </button>
                                </div>
                              );
                            })}

                            {/* Resumo dos valores - Compacto */}
                            <div className="bg-gray-800/50 rounded p-2 space-y-1">
                              <div className="flex justify-between text-xs">
                                <span className="text-gray-400">Total da Venda:</span>
                                <span className="text-white font-medium">{formatCurrency(calcularTotalComDesconto())}</span>
                              </div>
                              {/* Restante só aparece para pagamentos parciais */}
                              {tipoPagamento === 'parcial' && (
                                <div className="flex justify-between text-xs font-bold">
                                  <span className="text-gray-400">Restante:</span>
                                  <span className={calcularRestante() > 0 ? 'text-yellow-400' : 'text-green-400'}>
                                    {formatCurrency(calcularRestante())}
                                  </span>
                                </div>
                              )}
                              {trocoCalculado > 0 && (
                                <div className="flex justify-between items-center font-bold border-t border-gray-700 pt-1 mt-1">
                                  <span className="text-gray-400 text-xs">Troco:</span>
                                  <span className="text-blue-400 text-sm font-extrabold">{formatCurrency(trocoCalculado)}</span>
                                </div>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              )}
              {/* Seção de Pagamento quando HÁ pedidos importados */}
              {pedidosImportados.length > 0 && (
                <div className="space-y-3">
                  {/* ✅ NOVO: Exibir numeração reservada da venda em andamento */}
                  {vendaEmAndamento && (
                    <div className="bg-blue-900/20 border border-blue-800/30 rounded-lg p-3">
                      <div className="flex items-center justify-between text-sm">
                        <div className="text-blue-300 font-medium">
                          📋 Venda: {vendaEmAndamento.numero_venda}
                        </div>
                        {vendaEmAndamento.numero_nfce_reservado && vendaEmAndamento.serie_usuario && (
                          <div className="text-blue-400">
                            🧾 NFC-e #{vendaEmAndamento.numero_nfce_reservado} Série {vendaEmAndamento.serie_usuario}
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Tipo de Pagamento - Compacto */}
                  <div>
                    <label className="block text-sm font-medium text-white mb-1.5">
                      Tipo de Pagamento
                    </label>
                    <div className="flex gap-1.5">
                      <button
                        onClick={() => {
                          setTipoPagamento('vista');
                          limparPagamentosParciais();

                          // ✅ CORREÇÃO: Sempre resetar para "Dinheiro" quando selecionar "À Vista"
                          const dinheiro = formasPagamento.find(forma =>
                            forma.nome?.toLowerCase() === 'dinheiro'
                          );
                          if (dinheiro) {
                            setFormaPagamentoSelecionada(dinheiro.id);
                          } else if (formasPagamento.length > 0) {
                            setFormaPagamentoSelecionada(formasPagamento[0].id);
                          }
                        }}
                        className={`flex-1 py-1.5 px-2.5 rounded border transition-colors text-sm ${
                          tipoPagamento === 'vista'
                            ? 'bg-gray-700 border-gray-600 text-white'
                            : 'bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600 hover:bg-gray-750'
                        }`}
                      >
                        À Vista
                      </button>
                      <button
                        onClick={() => {
                          setTipoPagamento('parcial');
                          setFormaPagamentoSelecionada(null);
                        }}
                        className={`flex-1 py-1.5 px-2.5 rounded border transition-colors text-sm ${
                          tipoPagamento === 'parcial'
                            ? 'bg-gray-700 border-gray-600 text-white'
                            : 'bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600 hover:bg-gray-750'
                        }`}
                      >
                        Parciais
                      </button>
                    </div>
                  </div>

                  {/* Formas de Pagamento - Compacto */}
                  <div>
                    <label className="block text-sm font-medium text-white mb-1.5">
                      {tipoPagamento === 'vista' ? 'Forma de Pagamento' : 'Formas de Pagamento'}
                    </label>

                    {tipoPagamento === 'vista' ? (
                      // Pagamento à vista - interface compacta
                      <div className="grid grid-cols-2 gap-1.5">
                        {formasPagamento.map((forma) => (
                          <button
                            key={forma.id}
                            onClick={() => handleSelecionarFormaPagamento(forma)}
                            className={`p-2 rounded border transition-colors text-sm ${
                              formaPagamentoSelecionada === forma.id
                                ? 'bg-gray-700 border-gray-600 text-white'
                                : 'bg-gray-800/50 border-gray-700 text-gray-300 hover:border-gray-600 hover:bg-gray-750'
                            }`}
                          >
                            {forma.nome}
                            {forma.tipo === 'cartao_credito' && forma.max_parcelas > 1 && (
                              <span className="text-xs text-gray-400 block">
                                {parcelasFormaPagamento[forma.id]
                                  ? `${parcelasFormaPagamento[forma.id]}x de ${formatCurrency(calcularTotalComDesconto() / parcelasFormaPagamento[forma.id])}`
                                  : `até ${forma.max_parcelas}x`
                                }
                              </span>
                            )}
                          </button>
                        ))}
                      </div>
                    ) : (
                      // Pagamentos parciais - interface compacta
                      <div className="space-y-3">
                        {/* Campo de valor - Compacto */}
                        <div>
                          <label className="block text-sm font-medium text-white mb-1.5">
                            Valor do Pagamento
                          </label>
                          <input
                            type="text"
                            value={valorParcial}
                            onChange={(e) => setValorParcial(formatCurrencyInput(e.target.value))}
                            placeholder={`R$ 0,00 (vazio = ${formatCurrency(calcularTotalComDesconto() - calcularTotalPago() > 0 ? calcularTotalComDesconto() - calcularTotalPago() : 0)})`}
                            className="w-full bg-gray-800/50 border border-gray-700 rounded py-1.5 px-2.5 text-white text-sm focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                          />
                          <div className="text-xs text-gray-500 mt-1">
                            💡 Deixe vazio para usar o valor restante automaticamente
                          </div>
                        </div>

                        {/* Botões das formas de pagamento - Compacto */}
                        <div className="grid grid-cols-2 gap-1.5">
                          {formasPagamento.map((forma) => (
                            <button
                              key={forma.id}
                              onClick={() => handleSelecionarFormaPagamentoParcial(forma)}
                              className="p-2 rounded border border-gray-700 bg-gray-800/50 text-gray-300 hover:border-gray-600 hover:bg-gray-750 transition-colors text-sm"
                            >
                              {forma.nome}
                              {forma.tipo === 'cartao_credito' && forma.max_parcelas > 1 && (
                                <span className="text-xs text-gray-400 block">
                                  {parcelasFormaPagamento[forma.id]
                                    ? `${parcelasFormaPagamento[forma.id]}x de ${formatCurrency(calcularTotalComDesconto() / parcelasFormaPagamento[forma.id])}`
                                    : `até ${forma.max_parcelas}x`
                                  }
                                </span>
                              )}
                            </button>
                          ))}
                        </div>

                        {/* Lista de pagamentos adicionados - Compacta */}
                        {pagamentosParciais.length > 0 && (
                          <div className="space-y-1.5">
                            <div className="flex justify-between items-center">
                              <span className="text-xs font-medium text-gray-400">Pagamentos Adicionados:</span>
                              <button
                                onClick={confirmarLimparTodos}
                                className="text-xs text-red-400 hover:text-red-300"
                              >
                                Limpar Todos
                              </button>
                            </div>

                            {pagamentosParciais.map((pagamento) => {
                              const forma = formasPagamento.find(f => f.id === pagamento.forma);
                              return (
                                <div key={pagamento.id} className="flex justify-between items-center bg-gray-800/30 rounded p-1.5">
                                  <div>
                                    <span className="text-white text-xs">{forma?.nome || pagamento.forma}</span>
                                    {pagamento.parcelas && pagamento.valorParcela && (
                                      <span className="text-gray-400 text-xs block">
                                        {pagamento.parcelas}x de {formatCurrency(pagamento.valorParcela)}
                                      </span>
                                    )}
                                    <span className="text-primary-400 text-xs ml-2">{formatCurrency(pagamento.valor)}</span>
                                  </div>
                                  <button
                                    onClick={() => confirmarRemocaoItem(pagamento.id)}
                                    className="text-red-400 hover:text-red-300"
                                  >
                                    <X size={14} />
                                  </button>
                                </div>
                              );
                            })}

                            {/* Resumo dos valores - Compacto */}
                            <div className="bg-gray-800/50 rounded p-2 space-y-1">
                              <div className="flex justify-between text-xs">
                                <span className="text-gray-400">Total da Venda:</span>
                                <span className="text-white font-medium">{formatCurrency(calcularTotalComDesconto())}</span>
                              </div>
                              {/* Restante só aparece para pagamentos parciais */}
                              {tipoPagamento === 'parcial' && (
                                <div className="flex justify-between text-xs font-bold">
                                  <span className="text-gray-400">Restante:</span>
                                  <span className={calcularRestante() > 0 ? 'text-yellow-400' : 'text-green-400'}>
                                    {formatCurrency(calcularRestante())}
                                  </span>
                                </div>
                              )}
                              {trocoCalculado > 0 && (
                                <div className="flex justify-between items-center font-bold border-t border-gray-700 pt-1 mt-1">
                                  <span className="text-gray-400 text-xs">Troco:</span>
                                  <span className="text-blue-400 text-sm font-extrabold">{formatCurrency(trocoCalculado)}</span>
                                </div>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              )}







            </div>

            {/* Área fixa de pagamento - sempre visível quando há itens - Compacta */}
            {carrinho.length > 0 && (
              <div className="p-3 bg-background-card flex-shrink-0">


                {/* Resumo da Venda - sempre presente - Compacto */}
                <div className="bg-gray-800/50 rounded p-2.5 mb-1">
                  {(() => {
                    const subtotalSemDescontos = calcularSubtotalSemDescontos(); // Subtotal sem descontos
                    const subtotal = calcularTotal(); // Total com descontos nos itens
                    const totalFinal = calcularTotalComDesconto();

                    // Calcular desconto por prazo se selecionado (baseado no subtotal com descontos nos itens)
                    let descontoPrazo = null;
                    if (descontoPrazoSelecionado) {
                      const desconto = descontosCliente.prazo.find(d => d.id === descontoPrazoSelecionado);
                      if (desconto) {
                        const valorDesconto = (subtotal * desconto.percentual) / 100;
                        descontoPrazo = {
                          tipo: desconto.tipo,
                          percentual: desconto.percentual,
                          valor: valorDesconto,
                          prazo_dias: desconto.prazo_dias
                        };
                      }
                    }

                    // Calcular desconto por valor (aplicado após desconto por prazo)
                    const subtotalComDescontoPrazo = descontoPrazo
                      ? (descontoPrazo.tipo === 'desconto' ? subtotal - descontoPrazo.valor : subtotal + descontoPrazo.valor)
                      : subtotal;
                    const descontoValor = calcularDescontoPorValor(subtotalComDescontoPrazo);

                    return (
                      <>
                        {/* Itens - Primeiro (excluindo trocas) */}
                        <div className="flex justify-between items-center text-xs mb-1.5">
                          <span className="text-white">Itens:</span>
                          <span className="text-white">{carrinho.filter(item => !item.isDevolucao).reduce((total, item) => total + item.quantidade, 0)}</span>
                        </div>

                        {/* Subtotal - Segundo (sem descontos e sem trocas) */}
                        <div className="flex justify-between items-center text-xs mb-1.5">
                          <span className="text-white">Subtotal:</span>
                          <span className="text-white">{formatCurrency(carrinho.filter(item => !item.isDevolucao).reduce((total, item) => total + item.subtotal, 0))}</span>
                        </div>

                        {/* Área de Descontos (excluindo trocas) */}
                        {(() => {
                          // Calcular desconto apenas de itens que não são trocas
                          const descontoItens = carrinho
                            .filter(item => !item.isDevolucao && item.desconto)
                            .reduce((total, item) => total + (item.desconto?.valorDesconto || 0), 0);

                          const temDescontoItens = descontoItens > 0;
                          const temDescontoTotal = descontoGlobal > 0;

                          return (temDescontoItens || temDescontoTotal) && (
                            <>
                              {/* Desconto no Item - Aparece sempre que houver desconto (manual ou automático) */}
                              {temDescontoItens && (
                                <div className="flex justify-between items-center text-xs mb-1.5">
                                  <span className="text-orange-400">Desconto no Item:</span>
                                  <span className="text-orange-400">-{formatCurrency(descontoItens)}</span>
                                </div>
                              )}

                              {/* Desconto no Total - Aparece se configuração habilitada OU se for devolução aplicada */}
                              {(pdvConfig?.desconto_no_total || isVendaComTroca) && temDescontoTotal && (
                                <div className="flex justify-between items-center text-xs mb-1.5">
                                  <span className="text-red-400">
                                    {isVendaComTroca ? 'Devolução Aplicada:' : 'Desconto no Total:'}
                                  </span>
                                  <span className="text-red-400">-{formatCurrency(descontoGlobal)}</span>
                                </div>
                              )}
                            </>
                          );
                        })()}

                        {/* Devolução - Nova linha para mostrar valor das trocas */}
                        {(() => {
                          const itensTroca = carrinho.filter(item => item.isDevolucao);
                          const valorTotalTrocas = itensTroca.reduce((total, item) => total + Math.abs(item.subtotal), 0);

                          // Obter número da troca do primeiro item de devolução
                          const numeroTroca = itensTroca.length > 0 ? itensTroca[0].devolucao_codigo : null;

                          return itensTroca.length > 0 && (
                            <div className="flex justify-between items-center text-xs mb-1.5">
                              <div className="flex items-center gap-2">
                                <span className="text-green-400">
                                  Devolução{numeroTroca ? ` ${numeroTroca}` : ''}:
                                </span>
                                <button
                                  onClick={() => setShowRemoverTrocasModal(true)}
                                  className="text-red-400 hover:text-red-300 transition-colors"
                                  title="Remover todas as trocas"
                                >
                                  <X size={12} />
                                </button>
                              </div>
                              <span className="text-green-400">-{formatCurrency(valorTotalTrocas)}</span>
                            </div>
                          );
                        })()}

                        {/* Desconto por Prazo (se aplicável) - Compacto */}
                        {descontoPrazo && (
                          <div className="flex justify-between items-center text-xs mb-1.5">
                            <span className={`${
                              descontoPrazo.tipo === 'desconto' ? 'text-blue-400' : 'text-orange-400'
                            }`}>
                              {descontoPrazo.tipo === 'desconto' ? 'Desconto' : 'Acréscimo'} Prazo ({descontoPrazo.prazo_dias}d):
                            </span>
                            <span className={`${
                              descontoPrazo.tipo === 'desconto' ? 'text-blue-400' : 'text-orange-400'
                            }`}>
                              {descontoPrazo.tipo === 'desconto' ? '-' : '+'}{formatCurrency(descontoPrazo.valor)}
                            </span>
                          </div>
                        )}

                        {/* Desconto por Valor (se aplicável) - Compacto */}
                        {descontoValor && (
                          <div className="flex justify-between items-center text-xs mb-1.5">
                            <span className={`${
                              descontoValor.tipo === 'desconto' ? 'text-green-400' : 'text-red-400'
                            }`}>
                              {descontoValor.tipo === 'desconto' ? 'Desconto' : 'Acréscimo'} ({descontoValor.percentual}%):
                            </span>
                            <span className={`${
                              descontoValor.tipo === 'desconto' ? 'text-green-400' : 'text-red-400'
                            }`}>
                              {descontoValor.tipo === 'desconto' ? '-' : '+'}{formatCurrency(descontoValor.valor)}
                            </span>
                          </div>
                        )}

                        {/* Forma de Pagamento Selecionada */}
                        {formaPagamentoSelecionada && (
                          <div className="flex justify-between items-center text-xs mb-1.5">
                            <span className="text-gray-400">Forma de Pagamento:</span>
                            <span className="text-blue-400 font-medium">
                              {(() => {
                                const forma = formasPagamento.find(f => f.id === formaPagamentoSelecionada);
                                if (!forma) return 'Não selecionada';

                                let texto = forma.nome;

                                // Adicionar informações específicas para cartão de crédito
                                if (forma.tipo === 'cartao_credito' && parcelasFormaPagamento[forma.id] > 1) {
                                  const valorParcela = calcularTotalComDesconto() / parcelasFormaPagamento[forma.id];
                                  texto += ` (${parcelasFormaPagamento[forma.id]}x de ${formatCurrency(valorParcela)})`;
                                }

                                // Adicionar informações específicas para PIX
                                if (forma.tipo === 'pix' && forma.utilizar_chave_pix && forma.tipo_chave_pix) {
                                  const tipoChave = forma.tipo_chave_pix.replace('_', ' ');
                                  texto += ` (${tipoChave})`;
                                }

                                return texto;
                              })()}
                            </span>
                          </div>
                        )}

                        {/* Total Final - Compacto */}
                        <div className="flex justify-between items-center mb-0 pt-1.5 border-t border-gray-700">
                          <span className="text-white text-sm">Total da Venda:</span>
                          <span className="text-lg font-bold text-primary-400">
                            {formatCurrency(totalFinal)}
                          </span>
                        </div>
                      </>
                    );
                  })()}
                </div>
              </div>
            )}

            {/* Footer fixo com botões de ação - Só aparece quando há itens - Compacto */}
            {carrinho.length > 0 && (
              <div className="px-3 pt-1 pb-2 flex-shrink-0">
                <div className="flex gap-2">
                  <button
                    onClick={() => setShowConfirmLimparTudoPDV(true)}
                    className="flex-1 bg-gray-700 hover:bg-gray-600 border border-gray-600 text-white py-2 px-3 rounded transition-colors text-sm"
                  >
                    Cancelar
                  </button>
                  <button
                    onClick={() => {
                      // ✅ VALIDAÇÃO FIADO: Verificar se é fiado e se há cliente selecionado
                      if (tipoPagamento === 'vista' && isFormaPagamentoFiado() && !hasClienteSelecionado()) {
                        setShowFiadoSemClienteModal(true);
                        return;
                      }

                      // Validação para pagamento à vista
                      if (tipoPagamento === 'vista') {
                        if (!formaPagamentoSelecionada) {
                          toast.error('Selecione uma forma de pagamento');
                          return;
                        }
                        // Avança para a tela de finalização final
                        setShowFinalizacaoFinal(true);
                      } else {
                        // ✅ VALIDAÇÃO FIADO: Para pagamentos parciais, verificar se algum é fiado
                        const temFiadoNosParciais = pagamentosParciais.some(pagamento => {
                          const forma = formasPagamento.find(f => f.id === pagamento.forma_pagamento_id);
                          return forma?.nome?.toLowerCase() === 'fiado';
                        });

                        if (temFiadoNosParciais && !hasClienteSelecionado()) {
                          setShowFiadoSemClienteModal(true);
                          return;
                        }

                        // Validação para pagamentos parciais
                        if (pagamentosParciais.length === 0) {
                          toast.error('Adicione pelo menos uma forma de pagamento');
                          return;
                        }

                        const restante = calcularRestante();
                        if (restante > 0) {
                          toast.error(`Ainda falta pagar ${formatCurrency(restante)}`);
                          return;
                        }

                        // Avança para a tela de finalização final
                        setShowFinalizacaoFinal(true);
                      }
                    }}
                    disabled={(() => {
                      // Se for pagamento parcial e ainda falta pagar, desabilitar
                      if (tipoPagamento === 'parcial' && calcularRestante() > 0) return true;

                      // Se total da venda for 0, só permitir se for troca exata
                      if (calcularTotal() === 0) return !isTrocaExata();

                      // Se total da venda for negativo, sempre desabilitar
                      if (calcularTotal() < 0) return true;

                      return false;
                    })()}
                    className={`flex-1 py-2 px-3 rounded border transition-colors text-sm ${
                      (() => {
                        if (tipoPagamento === 'parcial' && calcularRestante() > 0) {
                          return 'bg-gray-600 border-gray-600 text-gray-400 cursor-not-allowed';
                        }
                        if (calcularTotal() === 0 && !isTrocaExata()) {
                          return 'bg-gray-600 border-gray-600 text-gray-400 cursor-not-allowed';
                        }
                        if (calcularTotal() < 0) {
                          return 'bg-gray-600 border-gray-600 text-gray-400 cursor-not-allowed';
                        }
                        return 'bg-gray-700 hover:bg-gray-600 border-gray-600 text-white';
                      })()
                    }`}
                  >
                    {(() => {
                      if (tipoPagamento === 'parcial' && calcularRestante() > 0) {
                        return `Falta ${formatCurrency(calcularRestante())}`;
                      }
                      if (calcularTotal() === 0 && isTrocaExata()) {
                        return 'Confirmar Troca';
                      }
                      if (calcularTotal() === 0 && !isTrocaExata()) {
                        return 'Total deve ser > R$ 0,00';
                      }
                      if (calcularTotal() < 0) {
                        return 'Valor negativo';
                      }
                      return 'Confirmar';
                    })()}
                  </button>
                </div>
              </div>
            )}
          </motion.div>
        )}

            {/* Área de Finalização Final - Segunda tela ocupa todo o espaço */}
            {showFinalizacaoFinal && (
              <motion.div
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.3 }}
                className="w-full bg-background-card border-l border-gray-800 flex flex-col h-full"
                style={{
                  position: 'relative',
                  flexShrink: 0
                }}
          >
            {/* Header fixo compacto */}
            <div className="flex items-center justify-between px-4 py-3 border-b border-gray-800 flex-shrink-0">
              <h3 className="text-base font-semibold text-white">
                Finalizar Venda
              </h3>
              <button
                onClick={() => setShowFinalizacaoFinal(false)}
                className="text-gray-400 hover:text-white transition-colors"
              >
                <X size={16} />
              </button>
            </div>

            {/* Conteúdo scrollável compacto */}
            <div className="flex-1 overflow-y-auto custom-scrollbar px-4 py-3"
              style={{ maxHeight: 'calc(100vh - 120px)' }}
            >

            {/* Formas de Pagamento Utilizadas - Compacto */}
            {!isTrocaExata() && ((tipoPagamento === 'vista' && formaPagamentoSelecionada) || (tipoPagamento === 'parcial' && pagamentosParciais.length > 0)) ? (
              <div className="bg-gray-800/50 rounded-lg p-3 mb-3">
                <div className="text-sm font-medium text-white mb-2">Pagamentos:</div>
                <div className="space-y-1">
                  {tipoPagamento === 'vista' && formaPagamentoSelecionada ? (
                    (() => {
                      const forma = formasPagamento.find(f => f.id === formaPagamentoSelecionada);

                      if (!forma) return null;

                      return (
                        <div className="flex items-center justify-between py-1.5 px-2 bg-gray-700/30 rounded text-sm">
                          <span className="font-medium text-white">
                            {forma.nome}
                          </span>
                          <span className="text-white font-medium">
                            {formatCurrency(calcularTotalComDesconto())}
                          </span>
                        </div>
                      );
                    })()
                  ) : (
                    pagamentosParciais.map((pagamento, index) => {
                      const forma = formasPagamento.find(f => f.id === pagamento.forma);

                      if (!forma) return null;

                      return (
                        <div key={index} className="flex items-center justify-between py-1.5 px-2 bg-gray-700/30 rounded text-sm">
                          <div className="flex flex-col">
                            <span className="font-medium text-white">
                              {forma.nome}
                            </span>
                            {pagamento.parcelas && pagamento.valorParcela && (
                              <span className="text-xs text-gray-400">
                                {pagamento.parcelas}x de {formatCurrency(pagamento.valorParcela)}
                              </span>
                            )}
                          </div>
                          <span className="text-white font-medium">
                            {formatCurrency(pagamento.valor)}
                          </span>
                        </div>
                      );
                    })
                  )}
                </div>
              </div>
            ) : null}

            {/* Resumo da Venda - Compacto */}
            <div className="bg-gray-800/50 rounded-lg p-3 mb-3">
              <div className="space-y-1 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-400">Total:</span>
                  <span className="text-white font-medium">{formatCurrency(calcularTotalComDesconto())}</span>
                </div>
                {/* Restante só aparece para pagamentos parciais */}
                {tipoPagamento === 'parcial' && (
                  <div className="flex justify-between">
                    <span className="text-gray-400">Restante:</span>
                    <span className={calcularRestante() > 0 ? 'text-yellow-400' : 'text-green-400'}>
                      {formatCurrency(calcularRestante())}
                    </span>
                  </div>
                )}
                {trocoCalculado > 0 && (
                  <div className="flex justify-between items-center font-bold border-t border-gray-700 pt-1.5 mt-1.5">
                    <span className="text-gray-400">Troco:</span>
                    <span className="text-blue-400 text-lg font-bold">{formatCurrency(trocoCalculado)}</span>
                  </div>
                )}
              </div>
            </div>

            {/* Campo CPF/CNPJ - Compacto */}
            {temBotaoNfceAtivo() && !isTrocaExata() && (
              <div className="mb-3">
                <div className="space-y-2">
                  {/* Botões CPF/CNPJ */}
                  <div>
                    <label className="block text-sm font-medium text-white mb-2">
                      Nota Fiscal Paulista
                    </label>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleTipoDocumentoChange('cpf')}
                        className={`flex-1 py-2 px-3 rounded border transition-colors text-sm font-medium ${
                          tipoDocumento === 'cpf'
                            ? 'bg-primary-500 border-primary-500 text-white'
                            : 'bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600 hover:bg-gray-700'
                        }`}
                      >
                        CPF
                      </button>
                      <button
                        onClick={() => handleTipoDocumentoChange('cnpj')}
                        className={`flex-1 py-2 px-3 rounded border transition-colors text-sm font-medium ${
                          tipoDocumento === 'cnpj'
                            ? 'bg-primary-500 border-primary-500 text-white'
                            : 'bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600 hover:bg-gray-700'
                        }`}
                      >
                        CNPJ
                      </button>
                    </div>
                  </div>

                  {/* Campo de entrada */}
                  <div>
                    <input
                      type="text"
                      value={cpfCnpjNota}
                      onChange={(e) => {
                        handleCpfCnpjChange(e.target.value);
                        // Limpa erro ao digitar
                        if (erroValidacao) {
                          setErroValidacao('');
                        }
                      }}
                      onBlur={validarDocumentoOnBlur}
                      placeholder={tipoDocumento === 'cpf' ? '000.000.000-00' : '00.000.000/0000-00'}
                      className={`w-full bg-gray-800/50 border rounded py-1.5 px-2 text-sm text-white focus:outline-none focus:ring-1 transition-colors ${
                        erroValidacao
                          ? 'border-red-500 focus:border-red-500 focus:ring-red-500/20'
                          : 'border-gray-700 focus:border-primary-500 focus:ring-primary-500/20'
                      }`}
                    />

                    {/* Mensagem de erro */}
                    {erroValidacao && (
                      <div className="mt-1 text-xs text-red-400 flex items-center gap-1">
                        <span>⚠️</span>
                        <span>{erroValidacao}</span>
                      </div>
                    )}
                  </div>

                  {/* Cliente encontrado - Compacto */}
                  {clienteEncontrado ? (
                    <div className="bg-green-500/20 border border-green-500/30 rounded p-2">
                      <div className="flex items-center gap-1 mb-1">
                        <UserCheck size={14} className="text-green-400" />
                        <span className="text-green-400 text-xs font-medium">Cliente Encontrado</span>
                      </div>
                      <div className="text-white text-sm">{clienteEncontrado.nome}</div>
                      {clienteEncontrado.telefone && (
                        <div className="text-gray-300 text-xs">{clienteEncontrado.telefone}</div>
                      )}
                    </div>
                  ) : cpfCnpjNota && (
                    <div className="bg-gray-600/20 border border-gray-600/30 rounded p-2">
                      <div className="flex items-center gap-1">
                        <User size={14} className="text-gray-400" />
                        <span className="text-gray-400 text-xs">Consumidor Final</span>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}

              {/* Botões de Finalização - Compactos */}
              <div className="space-y-2 pb-3">
                {/* Grupo: Finalização Simples - Oculto quando CPF/CNPJ preenchido OU quando força venda fiscal com cartão */}
                {!cpfCnpjNota && !deveOcultarFinalizacaoSimples() && (
                  <div className="space-y-2">
                    {/* Finalizar com Impressão */}
                    {!pdvConfig?.ocultar_finalizar_com_impressao && (
                      <button
                        onClick={() => {
                          // Proteção contra duplo clique
                          if (showProcessandoVenda) {
                            console.log('🛑 FRONTEND: Bloqueando duplo clique - venda já está sendo processada');
                            return;
                          }
                          verificarPixEFinalizar('finalizar_com_impressao');
                        }}
                        disabled={showProcessandoVenda}
                        className={`w-full py-2.5 px-3 rounded transition-colors border text-sm font-medium ${
                          showProcessandoVenda
                            ? 'bg-gray-600/20 border-gray-600/30 text-gray-500 cursor-not-allowed'
                            : 'bg-green-900/20 hover:bg-green-800/30 text-green-300 border-green-800/30'
                        }`}
                      >
                        Finalizar com Impressão ({obterTextoTipoImpressao()})
                      </button>
                    )}

                    {/* Finalizar sem Impressão */}
                    {!pdvConfig?.ocultar_finalizar_sem_impressao && (
                      <button
                        onClick={() => {
                          // Proteção contra duplo clique
                          if (showProcessandoVenda) {
                            console.log('🛑 FRONTEND: Bloqueando duplo clique - venda já está sendo processada');
                            return;
                          }
                          verificarPixEFinalizar('finalizar_sem_impressao');
                        }}
                        disabled={showProcessandoVenda}
                        className={`w-full py-2.5 px-3 rounded transition-colors border text-sm font-medium ${
                          showProcessandoVenda
                            ? 'bg-gray-600/20 border-gray-600/30 text-gray-500 cursor-not-allowed'
                            : 'bg-green-800/20 hover:bg-green-700/30 text-green-400 border-green-700/30'
                        }`}
                      >
                        Finalizar sem Impressão
                      </button>
                    )}
                  </div>
                )}

                {/* Grupo: NFC-e */}
                {!isTrocaExata() && (
                  <div className="space-y-2">
                    {/* NFC-e com Impressão */}
                    {!pdvConfig?.ocultar_nfce_com_impressao && (
                    <button
                      onClick={() => {
                        if (isDocumentoInvalido()) {
                          toast.error('CPF/CNPJ inválido. Corrija o documento para emitir NFC-e.');
                          return;
                        }
                        // Proteção contra duplo clique
                        if (showProcessandoVenda) {
                          return;
                        }
                        verificarPixEFinalizar('nfce_com_impressao');
                      }}
                      disabled={isDocumentoInvalido() || showProcessandoVenda}
                      className={`w-full py-2.5 px-3 rounded transition-colors border text-sm font-medium ${
                        isDocumentoInvalido() || showProcessandoVenda
                          ? 'bg-gray-600/20 border-gray-600/30 text-gray-500 cursor-not-allowed'
                          : 'bg-blue-900/20 hover:bg-blue-800/30 text-blue-300 border-blue-800/30'
                      }`}
                    >
                      <div>NFC-e com Impressão ({obterTextoTipoImpressao()})</div>
                      {isDocumentoInvalido() && (
                        <div className="text-xs text-gray-400 mt-0.5">
                          CPF/CNPJ inválido
                        </div>
                      )}
                    </button>
                  )}

                  {/* NFC-e sem Impressão */}
                  {!pdvConfig?.ocultar_nfce_sem_impressao && (
                    <button
                      onClick={() => {
                        if (isDocumentoInvalido()) {
                          toast.error('CPF/CNPJ inválido. Corrija o documento para emitir NFC-e.');
                          return;
                        }
                        // Proteção contra duplo clique
                        if (showProcessandoVenda) {
                          return;
                        }
                        verificarPixEFinalizar('nfce_sem_impressao');
                      }}
                      disabled={isDocumentoInvalido() || showProcessandoVenda}
                      className={`w-full py-2.5 px-3 rounded transition-colors border text-sm font-medium ${
                        isDocumentoInvalido() || showProcessandoVenda
                          ? 'bg-gray-600/20 border-gray-600/30 text-gray-500 cursor-not-allowed'
                          : 'bg-blue-800/20 hover:bg-blue-700/30 text-blue-400 border-blue-700/30'
                      }`}
                    >
                      <div>NFC-e sem Impressão</div>
                      {isDocumentoInvalido() && (
                        <div className="text-xs text-gray-400 mt-0.5">
                          CPF/CNPJ inválido
                        </div>
                      )}
                    </button>
                    )}
                  </div>
                )}

                {/* Grupo: Delivery Local - Aparece apenas se configuração habilitada E há cliente */}
                {pdvConfig?.delivery && (clienteSelecionado || (pedidosImportados.length > 0 && pedidosImportados[0]?.cliente) || clienteEncontrado) && (
                  <div className="space-y-2">
                    {/* Delivery com Impressão */}
                    <button
                      onClick={async () => {
                        // Proteção contra duplo clique
                        if (showProcessandoVenda) {
                          return;
                        }
                        await salvarDelivery('delivery_com_impressao');
                      }}
                      disabled={showProcessandoVenda}
                      className={`w-full py-2.5 px-3 rounded transition-colors border text-sm font-medium ${
                        showProcessandoVenda
                          ? 'bg-gray-600/20 border-gray-600/30 text-gray-500 cursor-not-allowed'
                          : 'bg-orange-900/20 hover:bg-orange-800/30 text-orange-300 border-orange-800/30'
                      }`}
                    >
                      <div>🚚 Delivery com Impressão ({obterTextoTipoImpressao()})</div>
                    </button>

                    {/* Delivery sem Impressão */}
                    <button
                      onClick={async () => {
                        // Proteção contra duplo clique
                        if (showProcessandoVenda) {
                          return;
                        }
                        await salvarDelivery('delivery_sem_impressao');
                      }}
                      disabled={showProcessandoVenda}
                      className={`w-full py-2.5 px-3 rounded transition-colors border text-sm font-medium ${
                        showProcessandoVenda
                          ? 'bg-gray-600/20 border-gray-600/30 text-gray-500 cursor-not-allowed'
                          : 'bg-orange-800/20 hover:bg-orange-700/30 text-orange-400 border-orange-700/30'
                      }`}
                    >
                      <div>🚚 Delivery sem Impressão</div>
                    </button>
                  </div>
                )}

                {/* Grupo: NFC-e + Produção */}
                <div className="space-y-2">
                  {/* NFC-e + Produção - OCULTO POR PADRÃO */}
                  {false && !pdvConfig?.ocultar_nfce_producao && (
                    <button
                      onClick={() => {
                        if (isDocumentoInvalido()) {
                          toast.error('CPF/CNPJ inválido. Corrija o documento para emitir NFC-e.');
                          return;
                        }
                        // Proteção contra duplo clique
                        if (showProcessandoVenda) {
                          return;
                        }
                        finalizarVendaCompleta('nfce_producao');
                      }}
                      disabled={isDocumentoInvalido() || showProcessandoVenda}
                      className={`w-full py-2.5 px-3 rounded transition-colors border text-sm font-medium ${
                        isDocumentoInvalido() || showProcessandoVenda
                          ? 'bg-gray-600/20 border-gray-600/30 text-gray-500 cursor-not-allowed'
                          : 'bg-blue-700/20 hover:bg-blue-600/30 text-blue-500 border-blue-600/30'
                      }`}
                    >
                      <div>NFC-e + Produção</div>
                      {isDocumentoInvalido() && (
                        <div className="text-xs text-gray-400 mt-0.5">
                          CPF/CNPJ inválido
                        </div>
                      )}
                    </button>
                  )}
                </div>

                {/* Grupo: Produção - Oculto quando CPF/CNPJ preenchido OU quando força venda fiscal com cartão */}
                {!cpfCnpjNota && !deveOcultarFinalizacaoSimples() && (
                  <div className="space-y-2">
                    {/* Produção - OCULTO POR PADRÃO */}
                    {false && !pdvConfig?.ocultar_producao && (
                      <button
                        onClick={() => {
                          // Proteção contra duplo clique
                          if (showProcessandoVenda) {
                            return;
                          }
                          finalizarVendaCompleta('producao');
                        }}
                        disabled={showProcessandoVenda}
                        className={`w-full py-2.5 px-3 rounded transition-colors border text-sm font-medium ${
                          showProcessandoVenda
                            ? 'bg-gray-600/20 border-gray-600/30 text-gray-500 cursor-not-allowed'
                            : 'bg-orange-900/20 hover:bg-orange-800/30 text-orange-300 border-orange-800/30'
                        }`}
                      >
                        Produção
                      </button>
                    )}
                  </div>
                )}
              </div>
            </div>

            {/* Footer fixo com botão Voltar - Compacto */}
            <div className="border-t border-gray-800 px-4 py-3 flex-shrink-0">
              <button
                onClick={() => setShowFinalizacaoFinal(false)}
                className="w-full bg-gray-800/30 hover:bg-gray-700/50 text-gray-300 py-2.5 px-3 rounded transition-colors border border-gray-700/50 text-sm font-medium"
              >
                ← Voltar para Pagamento
              </button>
            </div>
          </motion.div>
            )}
          </div>
        )}
      </div>

      {/* Modal de Seleção de Cliente */}
      <AnimatePresence>
        {showClienteModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => {
              setShowClienteModal(false);
              setSearchClienteTerm(''); // Limpar busca ao fechar
            }}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 w-full max-w-2xl mx-4 h-[90vh] flex flex-col"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header fixo */}
              <div className="flex items-center justify-between p-6 border-b border-gray-800">
                <h3 className="text-lg font-semibold text-white">Selecionar Cliente</h3>
                <div className="flex items-center gap-3">
                  <button
                    onClick={() => setShowCadastroClienteModal(true)}
                    className="flex items-center gap-2 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors text-sm"
                  >
                    <Plus size={16} />
                    Cadastrar Cliente
                  </button>
                  <button
                    onClick={() => {
                      setShowClienteModal(false);
                      setSearchClienteTerm(''); // Limpar busca ao fechar
                    }}
                    className="text-gray-400 hover:text-white transition-colors"
                  >
                    <X size={20} />
                  </button>
                </div>
              </div>

              {/* Campo de busca fixo */}
              <div className="p-6 border-b border-gray-800">
                <div className="relative">
                  <Search size={18} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                  <input
                    type="text"
                    value={searchClienteTerm}
                    onChange={(e) => setSearchClienteTerm(e.target.value)}
                    placeholder="Buscar por nome, telefone ou documento..."
                    className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-3 pl-10 pr-4 text-white placeholder-gray-400 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                    autoFocus
                  />
                </div>
              </div>

              {/* Lista de clientes com scroll */}
              <div className="flex-1 overflow-y-auto custom-scrollbar p-6">
                <div className="space-y-2">
                  <button
                    onClick={() => {
                      setClienteSelecionado(null);
                      setShowClienteModal(false);
                      setSearchClienteTerm(''); // Limpar busca
                    }}
                    className="w-full text-left p-3 rounded bg-gray-800/50 hover:bg-gray-700/50 transition-colors"
                  >
                    <div className="text-white text-sm font-medium">Venda sem cliente</div>
                    <div className="text-xs text-gray-400">Consumidor final</div>
                  </button>

                  {filteredClientes.length === 0 && searchClienteTerm ? (
                    <div className="text-center py-8 text-gray-400">
                      <Search size={32} className="mx-auto mb-2 opacity-50" />
                      <p>Nenhum cliente encontrado</p>
                      <p className="text-xs">Tente buscar por outro termo</p>
                    </div>
                  ) : (
                    filteredClientes.map(cliente => (
                  <div
                    key={cliente.id}
                    className="relative bg-gray-800/50 hover:bg-gray-700/50 transition-colors border border-gray-700/50 hover:border-gray-600 rounded"
                  >
                    <button
                      onClick={async () => {
                        setClienteSelecionado(cliente);
                        setShowClienteModal(false);
                        setSearchClienteTerm(''); // Limpar busca
                        // Carregar descontos do cliente selecionado
                        carregarDescontosCliente(cliente.id);

                        // ✅ NOVO: Calcular taxa de entrega e adicionar ao carrinho se necessário
                        if (pdvConfig?.delivery && taxaEntregaConfig) {
                          try {
                            let taxaCalculada = null;

                            // Calcular taxa baseada no tipo de configuração
                            if (taxaEntregaConfig.tipo === 'distancia' && cliente.cep) {
                              taxaCalculada = await calcularTaxaEntregaCliente(cliente);
                            } else if (taxaEntregaConfig.tipo === 'bairro' && cliente.bairro) {
                              taxaCalculada = await calcularTaxaEntregaCliente(cliente);
                            }

                            if (taxaCalculada && taxaCalculada.valor > 0) {
                              // Mostrar notificação da taxa calculada
                              toast.success(`Taxa de entrega: R$ ${taxaCalculada.valor.toFixed(2)} (${taxaCalculada.descricao})`);

                              // ✅ ADICIONAR TAXA DE ENTREGA AO CARRINHO (igual ao faturamento do cardápio)
                              await adicionarTaxaEntregaAoCarrinho(taxaCalculada.valor, taxaCalculada.descricao);
                            } else if (taxaEntregaConfig.tipo === 'distancia' && cliente.cep) {
                              toast.warning('CEP fora da área de entrega');
                            } else if (taxaEntregaConfig.tipo === 'bairro' && cliente.bairro) {
                              toast.warning('Bairro não atendido');
                            }
                          } catch (error) {
                            console.error('Erro ao calcular taxa de entrega:', error);
                            toast.error('Erro ao calcular taxa de entrega');
                          }
                        }

                        // ✅ NOVO: Preencher automaticamente CPF/CNPJ na Nota Fiscal Paulista
                        if (cliente.documento && cliente.documento.trim()) {
                          const documentoLimpo = cliente.documento.replace(/\D/g, '');
                          if (documentoLimpo.length === 11) {
                            // CPF
                            setTipoDocumento('cpf');
                            setCpfCnpjNota(formatCpf(documentoLimpo));
                            setClienteEncontrado(cliente);
                            // CPF preenchido automaticamente
                          } else if (documentoLimpo.length === 14) {
                            // CNPJ
                            setTipoDocumento('cnpj');
                            setCpfCnpjNota(formatCnpj(documentoLimpo));
                            setClienteEncontrado(cliente);
                            // CNPJ preenchido automaticamente
                          }
                          setErroValidacao(''); // Limpar qualquer erro anterior
                        }
                      }}
                      className="w-full text-left p-4"
                    >
                      <div className="space-y-2">
                        {/* Tag de origem */}
                        <div className="flex items-center gap-2 mb-2">
                          {cliente.origem === 'cardapio_digital' ? (
                            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-500/20 text-purple-300 border border-purple-500/30">
                              📱 Cardápio Digital
                            </span>
                          ) : (
                            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-500/20 text-orange-300 border border-orange-500/30">
                              🏪 Delivery Local
                            </span>
                          )}
                        </div>

                        {/* Nome do cliente */}
                        <div className="text-white text-base font-medium">{cliente.nome}</div>

                        {/* Informações de contato */}
                        <div className="space-y-2">
                          {/* Telefones */}
                          {(cliente.telefones && cliente.telefones.length > 0) ? (
                            <div className="flex flex-wrap gap-2">
                              {cliente.telefones.map((telefone, index) => (
                                <div key={index} className="flex items-center gap-1 text-gray-400 bg-gray-800/30 px-2 py-1 rounded text-sm">
                                  <Phone size={12} />
                                  <span>{formatarTelefone(telefone.numero, telefone.tipo)}</span>
                                  {telefone.whatsapp && (
                                    <span className="text-green-400 text-xs">WhatsApp</span>
                                  )}
                                </div>
                              ))}
                            </div>
                          ) : cliente.telefone && (
                            <div className="flex items-center gap-1 text-gray-400">
                              <Phone size={14} />
                              <span>{formatarTelefone(cliente.telefone, cliente.telefone.replace(/\D/g, '').length === 11 ? 'Celular' : 'Fixo')}</span>
                            </div>
                          )}

                          {/* Documento */}
                          {cliente.documento && (
                            <div className="flex items-center gap-1 text-gray-400">
                              <FileText size={14} />
                              <span>
                                {cliente.documento.length === 11 ? 'CPF' : 'CNPJ'}:
                                {cliente.documento.length === 11
                                  ? cliente.documento.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4')
                                  : cliente.documento.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, '$1.$2.$3/$4-$5')
                                }
                              </span>
                            </div>
                          )}

                          {/* Endereço - Só aparece se delivery local estiver ativo */}
                          {pdvConfig?.delivery && (cliente.endereco || cliente.bairro || cliente.cidade) && (
                            <div className="mt-3 p-3 bg-orange-500/10 border border-orange-500/30 rounded">
                              <div className="flex items-center gap-1 mb-2">
                                <MapPin size={14} className="text-orange-400" />
                                <span className="text-orange-400 text-sm font-medium">Endereço de Entrega</span>
                              </div>
                              <div className="space-y-1 text-sm">
                                {cliente.endereco && (
                                  <div className="text-gray-300">
                                    {cliente.endereco}
                                    {cliente.numero && `, ${cliente.numero}`}
                                    {cliente.complemento && `, ${cliente.complemento}`}
                                  </div>
                                )}
                                {cliente.bairro && (
                                  <div className="flex items-center gap-2">
                                    <span className="text-orange-300 font-medium bg-orange-500/20 px-2 py-1 rounded">
                                      {cliente.bairro}
                                    </span>
                                    {cliente.cidade && cliente.estado && (
                                      <span className="text-gray-400">
                                        {cliente.cidade}/{cliente.estado}
                                      </span>
                                    )}
                                  </div>
                                )}
                                {cliente.cep && (
                                  <div className="text-gray-400">
                                    CEP: {cliente.cep.replace(/(\d{5})(\d{3})/, '$1-$2')}
                                  </div>
                                )}
                              </div>

                              {/* Taxa de entrega - Só para bairros */}
                              {taxaEntregaConfig?.tipo === 'bairro' && cliente.bairro && (() => {
                                const bairroEncontrado = bairrosDisponiveis.find(
                                  b => b.bairro.toLowerCase() === cliente.bairro.toLowerCase()
                                );
                                return bairroEncontrado ? (
                                  <div className="mt-2 flex items-center justify-between">
                                    <span className="text-green-400 text-sm font-medium">
                                      Taxa de entrega: R$ {bairroEncontrado.valor.toFixed(2)}
                                    </span>
                                    {bairroEncontrado.tempo_entrega && (
                                      <span className="text-gray-400 text-xs">
                                        {bairroEncontrado.tempo_entrega} min
                                      </span>
                                    )}
                                  </div>
                                ) : (
                                  <div className="mt-2">
                                    <span className="text-red-400 text-sm">
                                      Bairro não atendido
                                    </span>
                                  </div>
                                );
                              })()}

                              {/* Aviso para cálculo por distância */}
                              {taxaEntregaConfig?.tipo === 'distancia' && cliente.cep && (
                                <div className="mt-2">
                                  <span className="text-blue-400 text-sm">
                                    Taxa calculada na seleção
                                  </span>
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                      </div>
                    </button>

                    {/* Botão de editar - Só aparece se delivery local estiver ativo */}
                    {pdvConfig?.delivery && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          editarCliente(cliente);
                        }}
                        className="absolute top-3 right-3 p-2 bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white rounded transition-colors"
                        title="Editar cliente"
                      >
                        <Edit size={16} />
                      </button>
                    )}
                  </div>
                    ))
                  )}
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Pagamento */}
      <AnimatePresence>
        {showPagamentoModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => setShowPagamentoModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-lg mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-xl font-semibold text-white">Finalizar Pagamento</h3>
                <button
                  onClick={() => setShowPagamentoModal(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="mb-6">
                <div className="bg-gray-800/50 rounded-lg p-4 mb-4">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-gray-400">Total da Venda:</span>
                    <span className="text-2xl font-bold text-primary-400">
                      {formatCurrency(calcularTotal())}
                    </span>
                  </div>
                  {clienteSelecionado && (
                    <div className="flex justify-between items-center">
                      <span className="text-gray-400">Cliente:</span>
                      <span className="text-white">{clienteSelecionado.nome}</span>
                    </div>
                  )}
                  {pedidosImportados.length > 0 && (
                    <div className="flex justify-between items-center">
                      <span className="text-gray-400">Pedidos:</span>
                      <span className="text-green-400">
                        {pedidosImportados.map(p => `#${p.numero}`).join(', ')}
                      </span>
                    </div>
                  )}
                </div>

                <div className={`grid gap-3 ${pdvConfig?.fiado ? 'grid-cols-2' : 'grid-cols-3'}`}>
                  <button className="bg-green-500/20 border border-green-500/30 text-green-400 p-4 rounded-lg hover:bg-green-500/30 transition-colors flex flex-col items-center gap-2">
                    <DollarSign size={24} />
                    <span className="font-medium">Dinheiro</span>
                  </button>
                  <button className="bg-blue-500/20 border border-blue-500/30 text-blue-400 p-4 rounded-lg hover:bg-blue-500/30 transition-colors flex flex-col items-center gap-2">
                    <CreditCard size={24} />
                    <span className="font-medium">Cartão</span>
                  </button>
                  <button className="bg-purple-500/20 border border-purple-500/30 text-purple-400 p-4 rounded-lg hover:bg-purple-500/30 transition-colors flex flex-col items-center gap-2">
                    <Calculator size={24} />
                    <span className="font-medium">PIX</span>
                  </button>
                  {/* ✅ NOVO: Botão Fiado controlado pela configuração PDV */}
                  {pdvConfig?.fiado && (
                    <button className="bg-orange-500/20 border border-orange-500/30 text-orange-400 p-4 rounded-lg hover:bg-orange-500/30 transition-colors flex flex-col items-center gap-2">
                      <Receipt size={24} />
                      <span className="font-medium">Fiado</span>
                    </button>
                  )}
                </div>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={() => setShowPagamentoModal(false)}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={() => {
                    // Proteção contra duplo clique
                    if (showProcessandoVenda) {
                      return;
                    }

                    setShowPagamentoModal(false);
                    verificarPixEFinalizar('finalizar_sem_impressao');
                  }}
                  disabled={showProcessandoVenda}
                  className={`flex-1 py-3 px-4 rounded-lg transition-colors ${
                    showProcessandoVenda
                      ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                      : 'bg-primary-500 hover:bg-primary-600 text-white'
                  }`}
                >
                  Confirmar Venda
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Confirmação de Remoção */}
      <AnimatePresence>
        {showConfirmModal && itemParaRemover && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={cancelarRemocao}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-white">Confirmar Remoção</h3>
                <button
                  onClick={cancelarRemocao}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="mb-6">
                <p className="text-gray-300">
                  Tem certeza que deseja remover este item do carrinho?
                </p>
                {(() => {
                  const item = carrinho.find(item => item.id === itemParaRemover);
                  return item ? (
                    <div className="mt-3 p-3 bg-gray-800/50 rounded-lg">
                      <div className="text-white font-medium">{item.produto.nome}</div>
                      <div className="text-sm text-gray-400">
                        Quantidade: {formatarQuantidade(item.quantidade, item.produto.unidade_medida)} | Total: {formatCurrency(item.subtotal)}
                      </div>
                    </div>
                  ) : null;
                })()}
              </div>

              <div className="flex gap-3">
                <button
                  onClick={cancelarRemocao}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={() => itemParaRemover && removerDoCarrinho(itemParaRemover)}
                  className="flex-1 bg-red-500 hover:bg-red-600 text-white py-3 px-4 rounded-lg transition-colors"
                >
                  Remover
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Confirmação para Limpar Carrinho */}
      <AnimatePresence>
        {showLimparCarrinhoModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => setShowLimparCarrinhoModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-lg mx-4 max-h-[80vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-white">Limpar Carrinho</h3>
                <button
                  onClick={() => setShowLimparCarrinhoModal(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="mb-6">
                <p className="text-gray-300 mb-4">
                  Tem certeza que deseja remover todos os itens do carrinho?
                </p>

                <div className="bg-gray-800/50 rounded-lg p-4 mb-4">
                  <div className="flex justify-between items-center mb-3">
                    <span className="text-white font-medium">Total de itens:</span>
                    <span className="text-primary-400 font-bold">
                      {carrinho.reduce((total, item) => total + item.quantidade, 0)}
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-white font-medium">Valor total:</span>
                    <span className="text-primary-400 font-bold text-lg">
                      {formatCurrency(calcularTotal())}
                    </span>
                  </div>
                </div>

                <div className="space-y-2 max-h-48 overflow-y-auto custom-scrollbar">
                  <div className="text-sm text-gray-400 mb-2">Itens que serão removidos:</div>
                  {carrinho.map((item, index) => (
                    <div key={item.id} className="bg-gray-800/30 rounded-lg p-3">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <div className="text-white font-medium text-sm">{item.produto.nome}</div>
                          <div className="text-xs text-gray-400">
                            Qtd: {formatarQuantidade(item.quantidade, item.produto.unidade_medida)} × {formatCurrency(item.produto.preco)}
                          </div>
                        </div>
                        <div className="text-primary-400 font-bold text-sm">
                          {formatCurrency(item.subtotal)}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={() => setShowLimparCarrinhoModal(false)}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={limparCarrinho}
                  className="flex-1 bg-red-500 hover:bg-red-600 text-white py-3 px-4 rounded-lg transition-colors"
                >
                  Limpar Carrinho
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Galeria de Fotos */}
      <AnimatePresence>
        {showGaleriaModal && produtoSelecionadoGaleria && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/90 flex items-center justify-center z-50"
            onClick={fecharGaleria}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="relative w-full h-full flex items-center justify-center p-4"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Botão Fechar */}
              <button
                onClick={fecharGaleria}
                className="absolute top-4 right-4 z-10 bg-black/50 text-white p-2 rounded-full hover:bg-black/70 transition-colors"
              >
                <X size={24} />
              </button>

              {/* Informações do Produto */}
              <div className="absolute top-4 left-4 z-10 bg-black/50 text-white p-3 rounded-lg">
                <h3 className="font-bold text-lg">{produtoSelecionadoGaleria.nome}</h3>
                <p className="text-sm text-gray-300">
                  Foto {fotoAtualIndex + 1} de {produtoSelecionadoGaleria.produto_fotos?.length || 0}
                </p>
              </div>

              {/* Navegação - Foto Anterior */}
              {produtoSelecionadoGaleria.produto_fotos && produtoSelecionadoGaleria.produto_fotos.length > 1 && (
                <button
                  onClick={fotoAnterior}
                  className="absolute left-4 top-1/2 -translate-y-1/2 z-10 bg-black/50 text-white p-3 rounded-full hover:bg-black/70 transition-colors"
                >
                  <ChevronLeft size={24} />
                </button>
              )}

              {/* Imagem Principal */}
              <div className="max-w-4xl max-h-full flex items-center justify-center">
                {produtoSelecionadoGaleria.produto_fotos && produtoSelecionadoGaleria.produto_fotos[fotoAtualIndex] ? (
                  <img
                    src={produtoSelecionadoGaleria.produto_fotos[fotoAtualIndex].url}
                    alt={`${produtoSelecionadoGaleria.nome} - Foto ${fotoAtualIndex + 1}`}
                    className="max-w-full max-h-full object-contain rounded-lg"
                  />
                ) : (
                  <div className="w-96 h-96 bg-gray-800 rounded-lg flex items-center justify-center">
                    <Package size={48} className="text-gray-600" />
                  </div>
                )}
              </div>

              {/* Navegação - Próxima Foto */}
              {produtoSelecionadoGaleria.produto_fotos && produtoSelecionadoGaleria.produto_fotos.length > 1 && (
                <button
                  onClick={proximaFoto}
                  className="absolute right-4 top-1/2 -translate-y-1/2 z-10 bg-black/50 text-white p-3 rounded-full hover:bg-black/70 transition-colors"
                >
                  <ChevronRight size={24} />
                </button>
              )}

              {/* Miniaturas */}
              {produtoSelecionadoGaleria.produto_fotos && produtoSelecionadoGaleria.produto_fotos.length > 1 && (
                <div className="absolute bottom-4 left-1/2 -translate-x-1/2 z-10">
                  <div className="flex gap-2 bg-black/50 p-2 rounded-lg">
                    {produtoSelecionadoGaleria.produto_fotos.map((foto, index) => (
                      <button
                        key={index}
                        onClick={() => setFotoAtualIndex(index)}
                        className={`w-12 h-12 rounded border-2 overflow-hidden transition-all ${
                          index === fotoAtualIndex
                            ? 'border-primary-400 scale-110'
                            : 'border-gray-600 hover:border-gray-400'
                        }`}
                      >
                        <img
                          src={foto.url}
                          alt={`Miniatura ${index + 1}`}
                          className="w-full h-full object-cover"
                        />
                      </button>
                    ))}
                  </div>
                </div>
              )}
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Pedidos */}
      <AnimatePresence>
        {showPedidosModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className={`fixed inset-0 z-50 flex items-center justify-center ${
              isFullscreen
                ? 'bg-background-dark p-0'
                : 'bg-black/50 p-4'
            }`}
            onClick={() => {
              setShowPedidosModal(false);
              setSearchPedidos('');
            }}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className={`bg-background-card border border-gray-800 flex flex-col ${
                isFullscreen
                  ? 'w-full h-full rounded-none'
                  : 'rounded-lg w-full max-w-4xl mx-4 max-h-[80vh]'
              }`}
              onClick={(e) => e.stopPropagation()}
              data-modal="pedidos"
            >
              {/* Cabeçalho Fixo */}
              <div className="flex-shrink-0 p-6 border-b border-gray-800">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-2">
                    <h3 className="text-lg font-semibold text-white">
                      {statusFilterPedidos === 'todos' ? 'Todos os Pedidos' :
                       statusFilterPedidos === 'pendente' ? 'Pedidos Pendentes' :
                       statusFilterPedidos === 'faturado' ? 'Pedidos Faturados' :
                       statusFilterPedidos === 'cancelado' ? 'Pedidos Cancelados' :
                       'Pedidos'}
                    </h3>

                  </div>
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => setShowFiltersPedidos(!showFiltersPedidos)}
                      className="text-gray-400 hover:text-white transition-colors p-1"
                      title="Filtros"
                    >
                      <Filter size={18} />
                    </button>

                    {/* Botão para alternar fullscreen */}
                    <button
                      onClick={() => {
                        if (isFullscreen) {
                          exitFullscreen();
                        } else {
                          enterFullscreen();
                        }
                      }}
                      className="w-8 h-8 bg-gray-600/20 hover:bg-gray-500/30 border border-gray-600/20 hover:border-gray-500/40 rounded-full flex items-center justify-center text-gray-400 hover:text-gray-300 transition-all duration-200 group"
                      title={isFullscreen ? "Sair do modo tela cheia" : "Entrar em tela cheia"}
                    >
                      {isFullscreen ? (
                        <Minimize2 size={16} className="group-hover:scale-110 transition-transform" />
                      ) : (
                        <Maximize2 size={16} className="group-hover:scale-110 transition-transform" />
                      )}
                    </button>

                    <button
                      onClick={() => {
                        setShowPedidosModal(false);
                        setSearchPedidos('');
                        setStatusFilterPedidos('pendente');
                        setShowFiltersPedidos(false);
                      }}
                      className="text-gray-400 hover:text-white transition-colors"
                    >
                      <X size={20} />
                    </button>
                  </div>
                </div>

                {/* Campo de Pesquisa */}
                <div className="relative mb-4">
                  <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Pesquisar por número do pedido, cliente ou telefone..."
                    value={searchPedidos}
                    onChange={(e) => filtrarPedidos(e.target.value)}
                    className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                  />
                </div>

                {/* Filtros */}
                <AnimatePresence>
                  {showFiltersPedidos && (
                    <motion.div
                      initial={{ height: 0, opacity: 0 }}
                      animate={{ height: 'auto', opacity: 1 }}
                      exit={{ height: 0, opacity: 0 }}
                      className="overflow-hidden mb-4"
                    >
                      <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-2">
                            Status do Pedido
                          </label>
                          <div className="flex flex-wrap gap-2">
                            {[
                              { value: 'pendente', label: 'Pendentes', count: contadorPedidosPendentes },
                              { value: 'faturado', label: 'Faturados', count: pedidos.filter(p => p.status === 'faturado').length },
                              { value: 'cancelado', label: 'Cancelados', count: pedidos.filter(p => p.status === 'cancelado').length },
                              { value: 'todos', label: 'Todos', count: pedidos.length }
                            ].map((status) => (
                              <button
                                key={status.value}
                                onClick={() => filtrarPedidosPorStatus(status.value)}
                                className={`px-3 py-1 rounded-full text-xs font-medium flex items-center gap-1 ${
                                  statusFilterPedidos === status.value
                                    ? 'bg-primary-500 text-white'
                                    : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                                }`}
                              >
                                {status.label}
                                <span className={`px-1.5 py-0.5 rounded-full text-xs ${
                                  statusFilterPedidos === status.value
                                    ? 'bg-white/20 text-white'
                                    : 'bg-gray-600 text-gray-300'
                                }`}>
                                  {status.count}
                                </span>
                              </button>
                            ))}
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>

              {/* Conteúdo Rolável */}
              <div className="flex-1 overflow-y-auto custom-scrollbar p-6">
                <div className="space-y-4">
                {pedidosFiltrados.length === 0 ? (
                  <div className="text-center py-8">
                    <ShoppingBag size={48} className="mx-auto mb-4 text-gray-500" />
                    <p className="text-gray-400">
                      {searchPedidos ? 'Nenhum pedido encontrado para esta pesquisa' :
                       statusFilterPedidos === 'pendente' ? 'Nenhum pedido pendente encontrado' :
                       statusFilterPedidos === 'faturado' ? 'Nenhum pedido faturado encontrado' :
                       statusFilterPedidos === 'cancelado' ? 'Nenhum pedido cancelado encontrado' :
                       'Nenhum pedido encontrado'}
                    </p>
                    {(searchPedidos || statusFilterPedidos !== 'pendente') && (
                      <button
                        onClick={() => {
                          setSearchPedidos('');
                          setStatusFilterPedidos('pendente');
                          aplicarFiltrosPedidos();
                        }}
                        className="mt-2 text-primary-400 hover:text-primary-300 text-sm"
                      >
                        {searchPedidos ? 'Limpar pesquisa' : 'Ver pedidos pendentes'}
                      </button>
                    )}
                  </div>
                ) : (
                  <div className={`grid gap-4 ${
                    isFullscreen
                      ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5'
                      : 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3'
                  }`}>
                    {pedidosFiltrados.map((pedido) => (
                      <div
                        key={pedido.id}
                        className="bg-gray-800/50 rounded-lg p-4 border border-gray-700 hover:border-gray-600 transition-colors flex flex-col h-full"
                      >
                        {/* Header do Card */}
                        <div className="flex flex-col gap-2 mb-3">
                          <div className="flex items-center justify-between">
                            <div className="text-white font-medium text-sm">
                              Pedido #{pedido.numero}
                            </div>
                            <div className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(pedido.status).replace('text-', 'bg-').replace('-400', '-500/20').replace('-500', '-500/20').replace('-600', '-600/20')} ${getStatusColor(pedido.status)}`}>
                              {getStatusText(pedido.status)}
                            </div>
                          </div>
                          <div className="text-primary-400 font-bold text-lg">
                            {formatCurrency(pedido.valor_total)}
                          </div>
                        </div>

                        {/* Informações do Cliente e Data */}
                        <div className="flex-1 space-y-2 mb-3">
                          <div className="text-sm text-gray-400 truncate">
                            Cliente: {pedido.cliente?.nome || 'Consumidor Final'}
                          </div>
                          <div className="text-xs text-gray-500">
                            {new Date(pedido.created_at).toLocaleString('pt-BR', {
                              day: '2-digit',
                              month: '2-digit',
                              year: '2-digit',
                              hour: '2-digit',
                              minute: '2-digit'
                            })}
                          </div>
                          {/* Informações do Vendedor */}
                          {pedido.usuario && (
                            <div className="text-xs text-gray-500 truncate">
                              Vendedor: {pedido.usuario.nome}
                            </div>
                          )}
                        </div>

                        {/* Resumo de Itens */}
                        {pedido.pedidos_itens && pedido.pedidos_itens.length > 0 && (
                          <div className="flex-1 mb-3">
                            <div className="text-xs text-gray-400 font-medium mb-1">
                              Itens ({pedido.pedidos_itens.length}):
                            </div>
                            <div className="space-y-1 max-h-20 overflow-y-auto custom-scrollbar">
                              {pedido.pedidos_itens.slice(0, 2).map((item: any, index: number) => {
                                // Verificar se há desconto no item
                                const temDesconto = item.produto?.preco && item.valor_unitario < item.produto.preco;
                                const temPromocao = item.produto?.promocao;

                                return (
                                  <div key={index} className="text-xs">
                                    <div className="flex justify-between items-start">
                                      <span className="text-gray-500 truncate flex-1 mr-2">
                                        {item.quantidade}x {item.produto?.nome}
                                      </span>
                                      <span className="text-gray-500 flex-shrink-0">
                                        {formatCurrency(item.valor_unitario * item.quantidade)}
                                      </span>
                                    </div>
                                    {(temDesconto || temPromocao) && (
                                      <div className="text-xs mt-0.5">
                                        {temPromocao && (
                                          <span className="text-green-400">🏷️ Promoção</span>
                                        )}
                                        {temDesconto && !temPromocao && (
                                          <span className="text-blue-400">💰 Desconto</span>
                                        )}
                                      </div>
                                    )}
                                  </div>
                                );
                              })}
                              {pedido.pedidos_itens.length > 2 && (
                                <div className="text-xs text-gray-500 italic">
                                  +{pedido.pedidos_itens.length - 2} item(s) a mais...
                                </div>
                              )}
                            </div>
                          </div>
                        )}

                        {/* Botões de Ação */}
                        <div className="flex flex-col gap-2 mt-auto">
                          {pedido.status === 'pendente' && (
                            <button
                              onClick={() => importarPedidoParaCarrinho(pedido)}
                              className="w-full px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded text-xs transition-colors font-medium"
                            >
                              Importar para Carrinho
                            </button>
                          )}
                          <div className="flex gap-2">
                            <button
                              onClick={async () => {
                                const url = await gerarLinkPedido(pedido);
                                if (url) {
                                  window.open(url, '_blank');
                                }
                              }}
                              className="flex-1 px-3 py-1.5 bg-blue-500/80 hover:bg-blue-600/90 text-white rounded text-xs transition-colors"
                              title="Abrir nota de pedido em nova página"
                            >
                              Abrir
                            </button>
                            {/* Botão Ver Detalhes temporariamente oculto */}
                            {false && (
                              <button
                                onClick={() => carregarDetalhesPedido(pedido.id)}
                                className="flex-1 px-3 py-1.5 bg-gray-600 hover:bg-gray-500 text-white rounded text-xs transition-colors"
                              >
                                Detalhes
                              </button>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Detalhes do Pedido */}
      <AnimatePresence>
        {showDetalhePedido && pedidoDetalhado && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => {
              setShowDetalhePedido(false);
              setPedidoDetalhado(null);
            }}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 w-full max-w-4xl mx-4 max-h-[90vh] flex flex-col"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Cabeçalho Fixo */}
              <div className="flex-shrink-0 p-6 border-b border-gray-800">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <FileText size={24} className="text-primary-400" />
                    <div>
                      <h3 className="text-xl font-semibold text-white">Detalhes do Pedido</h3>
                      <p className="text-sm text-gray-400">Visualização completa</p>
                    </div>
                  </div>
                  <button
                    onClick={() => {
                      setShowDetalhePedido(false);
                      setPedidoDetalhado(null);
                    }}
                    className="text-gray-400 hover:text-white transition-colors"
                  >
                    <X size={20} />
                  </button>
                </div>
              </div>

              {/* Conteúdo Rolável */}
              <div className="flex-1 overflow-y-auto custom-scrollbar p-6">
                <div className="space-y-6">
                  {/* Informações Gerais do Pedido */}
                  <div className="bg-gray-800/50 rounded-lg p-4">
                    <h4 className="text-lg font-medium text-white mb-4 flex items-center gap-2">
                      <Receipt size={18} className="text-primary-400" />
                      Informações Gerais
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      <div>
                        <label className="text-sm text-gray-400">Número do Pedido</label>
                        <p className="text-white font-medium">#{pedidoDetalhado.numero}</p>
                      </div>
                      <div>
                        <label className="text-sm text-gray-400">Status</label>
                        <p className={`font-medium ${getStatusColor(pedidoDetalhado.status)}`}>
                          {getStatusText(pedidoDetalhado.status)}
                        </p>
                      </div>
                      <div>
                        <label className="text-sm text-gray-400">Data de Criação</label>
                        <p className="text-white">{formatarDataHora(pedidoDetalhado.created_at)}</p>
                      </div>
                      {pedidoDetalhado.data_faturamento && (
                        <div>
                          <label className="text-sm text-gray-400">Data de Faturamento</label>
                          <p className="text-white">{formatarDataHora(pedidoDetalhado.data_faturamento)}</p>
                        </div>
                      )}
                      {pedidoDetalhado.usuario && (
                        <div>
                          <label className="text-sm text-gray-400">Criado por</label>
                          <p className="text-white">{pedidoDetalhado.usuario.nome}</p>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Informações do Cliente */}
                  {pedidoDetalhado.cliente && (
                    <div className="bg-gray-800/50 rounded-lg p-4">
                      <h4 className="text-lg font-medium text-white mb-4 flex items-center gap-2">
                        <User size={18} className="text-blue-400" />
                        Informações do Cliente
                      </h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="text-sm text-gray-400">Nome</label>
                          <p className="text-white font-medium">{pedidoDetalhado.cliente.nome}</p>
                        </div>
                        {pedidoDetalhado.cliente.telefone && (
                          <div>
                            <label className="text-sm text-gray-400">Telefone</label>
                            <p className="text-white">{pedidoDetalhado.cliente.telefone}</p>
                          </div>
                        )}
                        {pedidoDetalhado.cliente.documento && (
                          <div>
                            <label className="text-sm text-gray-400">
                              {pedidoDetalhado.cliente.tipo_documento === 'CNPJ' ? 'CNPJ' : 'CPF'}
                            </label>
                            <p className="text-white">{pedidoDetalhado.cliente.documento}</p>
                          </div>
                        )}
                        {pedidoDetalhado.cliente.razao_social && (
                          <div>
                            <label className="text-sm text-gray-400">Razão Social</label>
                            <p className="text-white">{pedidoDetalhado.cliente.razao_social}</p>
                          </div>
                        )}
                        {pedidoDetalhado.cliente.nome_fantasia && (
                          <div>
                            <label className="text-sm text-gray-400">Nome Fantasia</label>
                            <p className="text-white">{pedidoDetalhado.cliente.nome_fantasia}</p>
                          </div>
                        )}
                      </div>


                    </div>
                  )}

                  {/* Itens do Pedido */}
                  <div className="bg-gray-800/50 rounded-lg p-4">
                    <h4 className="text-lg font-medium text-white mb-4 flex items-center gap-2">
                      <Package size={18} className="text-green-400" />
                      Itens do Pedido ({pedidoDetalhado.pedidos_itens?.length || 0})
                    </h4>
                    <div className="overflow-x-auto">
                      <table className="w-full text-sm">
                        <thead className="text-xs uppercase bg-gray-700/50 text-gray-400">
                          <tr>
                            <th className="px-4 py-3 text-left">Produto</th>
                            <th className="px-4 py-3 text-center">Qtde</th>
                            <th className="px-4 py-3 text-right">Valor Unit.</th>
                            <th className="px-4 py-3 text-right">Subtotal</th>
                          </tr>
                        </thead>
                        <tbody>
                          {pedidoDetalhado.pedidos_itens?.map((item: any) => (
                            <tr key={item.id} className="border-b border-gray-700">
                              <td className="px-4 py-3">
                                <div>
                                  <p className="font-medium text-white">{item.produto?.nome}</p>
                                  <p className="text-xs text-gray-400">
                                    Cód: {item.produto?.codigo}
                                    {item.produto?.codigo_barras && ` | Barras: ${item.produto.codigo_barras}`}
                                  </p>
                                  {item.observacao && (
                                    <p className="text-xs text-yellow-400 mt-1">Obs: {item.observacao}</p>
                                  )}
                                </div>
                              </td>
                              <td className="px-4 py-3 text-center text-white">
                                {item.quantidade}
                              </td>
                              <td className="px-4 py-3 text-right text-white">
                                {formatCurrency(item.valor_unitario)}
                              </td>
                              <td className="px-4 py-3 text-right text-white font-medium">
                                {formatCurrency(item.valor_total)}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>

                  {/* Resumo Financeiro */}
                  <div className="bg-gray-800/50 rounded-lg p-4">
                    <h4 className="text-lg font-medium text-white mb-4 flex items-center gap-2">
                      <DollarSign size={18} className="text-primary-400" />
                      Resumo Financeiro
                    </h4>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-gray-400">Subtotal:</span>
                        <span className="text-white">{formatCurrency(pedidoDetalhado.valor_subtotal || 0)}</span>
                      </div>
                      {pedidoDetalhado.valor_desconto > 0 && (
                        <div className="flex justify-between">
                          <span className="text-gray-400">Desconto:</span>
                          <span className="text-red-400">-{formatCurrency(pedidoDetalhado.valor_desconto)}</span>
                        </div>
                      )}
                      {pedidoDetalhado.valor_acrescimo > 0 && (
                        <div className="flex justify-between">
                          <span className="text-gray-400">Acréscimo:</span>
                          <span className="text-green-400">+{formatCurrency(pedidoDetalhado.valor_acrescimo)}</span>
                        </div>
                      )}
                      <div className="border-t border-gray-700 pt-2">
                        <div className="flex justify-between">
                          <span className="text-white font-medium">Total:</span>
                          <span className="text-primary-400 font-bold text-lg">
                            {formatCurrency(pedidoDetalhado.valor_total)}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>


                </div>
              </div>

              {/* Rodapé com Ações */}
              <div className="flex-shrink-0 p-6 border-t border-gray-800">
                <div className="flex gap-3 justify-end">
                  <button
                    onClick={() => {
                      setShowDetalhePedido(false);
                      setPedidoDetalhado(null);
                    }}
                    className="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors"
                  >
                    Fechar
                  </button>
                  <button
                    onClick={async () => {
                      const url = await gerarLinkPedido(pedidoDetalhado);
                      if (url) {
                        window.open(url, '_blank');
                      }
                    }}
                    className="px-4 py-2 bg-blue-500/80 hover:bg-blue-600/90 text-white rounded-lg transition-colors"
                    title="Abrir nota de pedido em nova página"
                  >
                    Abrir
                  </button>
                  {pedidoDetalhado?.status === 'pendente' && (
                    <button
                      onClick={() => {
                        importarPedidoParaCarrinho(pedidoDetalhado);
                        setShowDetalhePedido(false);
                        setPedidoDetalhado(null);
                      }}
                      className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
                    >
                      Importar para Carrinho
                    </button>
                  )}
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* ✅ NOVO: Modal de Mesas - Tela Cheia */}
      <AnimatePresence>
        {showMesasModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="w-full h-full bg-background-card flex flex-col"
            >
              {/* Header compacto para tela cheia */}
              <div className="border-b border-gray-700 bg-background-card">
                <div className="flex items-center justify-between px-6 py-4">
                  <div className="flex items-center gap-3">
                    <Table size={24} className="text-purple-400" />
                    <h3 className="text-xl font-semibold text-white">Mesas Abertas</h3>
                    {contadorVendasMesas > 0 && (
                      <span className="bg-purple-600 text-white px-3 py-1 rounded-full text-sm font-medium">
                        {contadorVendasMesas}
                      </span>
                    )}
                  </div>
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => setShowFiltrosMesas(!showFiltrosMesas)}
                      className={`px-3 py-1 rounded-lg text-xs transition-colors flex items-center gap-1 relative ${
                        showFiltrosMesas
                          ? 'bg-primary-500/20 text-primary-400 border border-primary-500/30'
                          : 'bg-gray-700 text-gray-400 hover:bg-gray-600'
                      }`}
                      title="Filtros"
                    >
                      <Filter size={14} />
                      Filtros
                      {/* Indicador de filtros ativos */}
                      {(filtroMesaNumero || filtroClienteMesa || filtroDataInicioMesas || filtroDataFimMesas) && (
                        <span className="absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full"></span>
                      )}
                    </button>
                    <button
                      onClick={carregarVendasMesas}
                      className="text-gray-400 hover:text-white transition-colors p-1"
                      title="Atualizar"
                    >
                      <ArrowUpDown size={18} />
                    </button>
                    <button
                      onClick={() => setShowMesasModal(false)}
                      className="text-gray-400 hover:text-white transition-colors p-2 hover:bg-gray-700 rounded-lg"
                    >
                      <X size={24} />
                    </button>
                  </div>
                </div>
              </div>

              {/* Painel de Filtros */}
              <AnimatePresence>
                {showFiltrosMesas && (
                  <motion.div
                    initial={{ height: 0, opacity: 0 }}
                    animate={{ height: 'auto', opacity: 1 }}
                    exit={{ height: 0, opacity: 0 }}
                    className="border-b border-gray-800 bg-gray-800/30 overflow-hidden"
                  >
                    <div className="p-4 space-y-4">
                      {/* Primeira linha - Filtros de texto */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Número da Mesa</label>
                          <input
                            type="text"
                            value={filtroMesaNumero}
                            onChange={(e) => setFiltroMesaNumero(e.target.value)}
                            placeholder="Digite o número da mesa..."
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-purple-500 text-sm"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Nome do Cliente</label>
                          <input
                            type="text"
                            value={filtroClienteMesa}
                            onChange={(e) => setFiltroClienteMesa(e.target.value)}
                            placeholder="Digite o nome do cliente..."
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-purple-500 text-sm"
                          />
                        </div>
                      </div>

                      {/* Segunda linha - Filtros de data */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Data Início</label>
                          <input
                            type="date"
                            value={filtroDataInicioMesas}
                            onChange={(e) => setFiltroDataInicioMesas(e.target.value)}
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-purple-500 text-sm"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Data Fim</label>
                          <input
                            type="date"
                            value={filtroDataFimMesas}
                            onChange={(e) => setFiltroDataFimMesas(e.target.value)}
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-purple-500 text-sm"
                          />
                        </div>
                      </div>

                      {/* Botões de ação */}
                      <div className="flex gap-2">
                        <button
                          onClick={() => {
                            setFiltroMesaNumero('');
                            setFiltroClienteMesa('');
                            setFiltroDataInicioMesas('');
                            setFiltroDataFimMesas('');
                          }}
                          className="px-3 py-1 bg-gray-600 hover:bg-gray-500 text-white rounded-lg text-sm transition-colors"
                        >
                          Limpar Filtros
                        </button>
                      </div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>

              {/* Conteúdo principal com scroll */}
              <div className="flex-1 overflow-y-auto p-6">
                {carregandoVendasMesas ? (
                  <div className="flex items-center justify-center py-12">
                    <div className="text-gray-400">Carregando mesas...</div>
                  </div>
                ) : (() => {
                  const mesasFiltradas = filtrarVendasMesas(vendasMesas);
                  return mesasFiltradas.length === 0 ? (
                    <div className="flex flex-col items-center justify-center py-12 text-gray-400">
                      <Table size={48} className="mb-4 opacity-50" />
                      <p className="text-lg font-medium">
                        {vendasMesas.length === 0 ? 'Nenhuma mesa ocupada' : 'Nenhuma mesa encontrada'}
                      </p>
                      <p className="text-sm">
                        {vendasMesas.length === 0 ? 'Todas as mesas estão livres' : 'Tente ajustar os filtros de busca'}
                      </p>
                    </div>
                  ) : (
                    <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5">
                      {mesasFiltradas.map((venda) => (
                        <div
                          key={venda.id}
                          className="bg-purple-800/20 border border-purple-700/50 rounded-lg p-4 hover:bg-purple-800/30 transition-colors flex flex-col h-full"
                        >
                          {/* Header do card */}
                          <div className="mb-3">
                            <div className="flex items-center gap-2 mb-2">
                              <Table size={16} className="text-purple-400" />
                              <span className="text-purple-400 text-sm font-medium bg-purple-500/20 px-2 py-1 rounded">
                                Mesa {venda.mesa_numero}
                              </span>
                            </div>

                            <div className="text-white font-medium mb-1">
                              📋 {venda.numero_venda}
                            </div>
                            {venda.numero_documento && venda.serie_documento && (
                              <div className="text-blue-400 text-xs">
                                🧾 NFC-e #{venda.numero_documento} Série {venda.serie_documento}
                              </div>
                            )}
                            <div className="text-gray-400 text-xs mt-1">
                              {new Date(venda.created_at).toLocaleString('pt-BR')}
                            </div>
                          </div>

                          {/* Informações principais */}
                          <div className="space-y-2 text-sm flex-1">
                            <div className="flex justify-between">
                              <span className="text-gray-400">Itens:</span>
                              <span className="text-gray-300">{venda.totalItens}</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-400">Total:</span>
                              <span className="text-green-400 font-medium">{formatCurrency(venda.valor_total || 0)}</span>
                            </div>
                            {venda.nome_cliente && (
                              <div className="flex justify-between">
                                <span className="text-gray-400">Cliente:</span>
                                <span className="text-gray-300">{venda.nome_cliente}</span>
                              </div>
                            )}
                          </div>

                          {venda.itens && venda.itens.length > 0 && (
                            <div className="mt-3 pt-3 border-t border-gray-700">
                              <button
                                onClick={() => {
                                  const novasVendasExpandidas = new Set(vendasMesasExpandidas);
                                  if (novasVendasExpandidas.has(venda.id)) {
                                    novasVendasExpandidas.delete(venda.id);
                                  } else {
                                    novasVendasExpandidas.add(venda.id);
                                  }
                                  setVendasMesasExpandidas(novasVendasExpandidas);
                                }}
                                className="flex items-center justify-between w-full text-xs text-gray-400 hover:text-gray-300 transition-colors"
                              >
                                <span>Produtos ({venda.itens.length})</span>
                                <span className="text-lg">
                                  {vendasMesasExpandidas.has(venda.id) ? '▼' : '▶'}
                                </span>
                              </button>

                              {vendasMesasExpandidas.has(venda.id) && (
                                <div className="mt-2 space-y-1">
                                  {venda.itens.map((item: any, index: number) => (
                                    <div key={index} className="text-xs text-gray-300 flex justify-between">
                                      <span>{item.nome_produto}</span>
                                      <span>{item.quantidade}x {formatCurrency(item.valor_total_item)}</span>
                                    </div>
                                  ))}
                                </div>
                              )}
                            </div>
                          )}

                          {/* Botão de recuperar */}
                          <div className="mt-4 pt-3 border-t border-gray-700">
                            <button
                              onClick={() => recuperarVendaSalva(venda.id)}
                              className="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg transition-colors font-medium text-sm"
                            >
                              🔄 Recuperar Mesa
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  );
                })()}
              </div>

              {vendasMesas.length > 0 && (
                <div className="mt-6 pt-4 border-t border-gray-700 flex justify-between items-center">
                  <div className="text-sm text-gray-400">
                    {vendasMesas.length} mesa(s) ocupada(s)
                  </div>
                  <button
                    onClick={carregarVendasMesas}
                    className="text-purple-400 hover:text-purple-300 text-sm transition-colors"
                  >
                    🔄 Atualizar Lista
                  </button>
                </div>
              )}
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* ✅ NOVO: Modal de Comandas - Tela Cheia */}
      <AnimatePresence>
        {showComandasModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="w-full h-full bg-background-card flex flex-col"
            >
              {/* Header compacto para tela cheia */}
              <div className="border-b border-gray-700 bg-background-card">
                <div className="flex items-center justify-between px-6 py-4">
                  <div className="flex items-center gap-3">
                    <FileText size={24} className="text-yellow-400" />
                    <h3 className="text-xl font-semibold text-white">Comandas Abertas</h3>
                    {contadorVendasComandas > 0 && (
                      <span className="bg-yellow-600 text-white px-3 py-1 rounded-full text-sm font-medium">
                        {contadorVendasComandas}
                      </span>
                    )}
                  </div>
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => setShowFiltrosComandas(!showFiltrosComandas)}
                      className={`px-3 py-1 rounded-lg text-xs transition-colors flex items-center gap-1 relative ${
                        showFiltrosComandas
                          ? 'bg-primary-500/20 text-primary-400 border border-primary-500/30'
                          : 'bg-gray-700 text-gray-400 hover:bg-gray-600'
                      }`}
                      title="Filtros"
                    >
                      <Filter size={14} />
                      Filtros
                      {/* Indicador de filtros ativos */}
                      {(filtroComandaNumero || filtroClienteComanda || filtroDataInicioComandas || filtroDataFimComandas) && (
                        <span className="absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full"></span>
                      )}
                    </button>
                    <button
                      onClick={carregarVendasComandas}
                      className="text-gray-400 hover:text-white transition-colors p-1"
                      title="Atualizar"
                    >
                      <ArrowUpDown size={18} />
                    </button>
                    <button
                      onClick={() => setShowComandasModal(false)}
                      className="text-gray-400 hover:text-white transition-colors p-2 hover:bg-gray-700 rounded-lg"
                    >
                      <X size={24} />
                    </button>
                  </div>
                </div>
              </div>

              {/* Painel de Filtros */}
              <AnimatePresence>
                {showFiltrosComandas && (
                  <motion.div
                    initial={{ height: 0, opacity: 0 }}
                    animate={{ height: 'auto', opacity: 1 }}
                    exit={{ height: 0, opacity: 0 }}
                    className="border-b border-gray-800 bg-gray-800/30 overflow-hidden"
                  >
                    <div className="p-4 space-y-4">
                      {/* Primeira linha - Filtros de texto */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Número da Comanda</label>
                          <input
                            type="text"
                            value={filtroComandaNumero}
                            onChange={(e) => setFiltroComandaNumero(e.target.value)}
                            placeholder="Digite o número da comanda..."
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-yellow-500 text-sm"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Nome do Cliente</label>
                          <input
                            type="text"
                            value={filtroClienteComanda}
                            onChange={(e) => setFiltroClienteComanda(e.target.value)}
                            placeholder="Digite o nome do cliente..."
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-yellow-500 text-sm"
                          />
                        </div>
                      </div>

                      {/* Segunda linha - Filtros de data */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Data Início</label>
                          <input
                            type="date"
                            value={filtroDataInicioComandas}
                            onChange={(e) => setFiltroDataInicioComandas(e.target.value)}
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-yellow-500 text-sm"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Data Fim</label>
                          <input
                            type="date"
                            value={filtroDataFimComandas}
                            onChange={(e) => setFiltroDataFimComandas(e.target.value)}
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-yellow-500 text-sm"
                          />
                        </div>
                      </div>

                      {/* Botões de ação */}
                      <div className="flex gap-2">
                        <button
                          onClick={() => {
                            setFiltroComandaNumero('');
                            setFiltroClienteComanda('');
                            setFiltroDataInicioComandas('');
                            setFiltroDataFimComandas('');
                          }}
                          className="px-3 py-1 bg-gray-600 hover:bg-gray-500 text-white rounded-lg text-sm transition-colors"
                        >
                          Limpar Filtros
                        </button>
                      </div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>

              {/* Conteúdo principal com scroll */}
              <div className="flex-1 overflow-y-auto p-6">
                {carregandoVendasComandas ? (
                  <div className="flex items-center justify-center py-12">
                    <div className="text-gray-400">Carregando comandas...</div>
                  </div>
                ) : (() => {
                  const comandasFiltradas = filtrarVendasComandas(vendasComandas);
                  return comandasFiltradas.length === 0 ? (
                    <div className="flex flex-col items-center justify-center py-12 text-gray-400">
                      <FileText size={48} className="mb-4 opacity-50" />
                      <p className="text-lg font-medium">
                        {vendasComandas.length === 0 ? 'Nenhuma comanda aberta' : 'Nenhuma comanda encontrada'}
                      </p>
                      <p className="text-sm">
                        {vendasComandas.length === 0 ? 'Todas as comandas foram finalizadas' : 'Tente ajustar os filtros de busca'}
                      </p>
                    </div>
                  ) : (
                    <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5">
                      {comandasFiltradas.map((venda) => (
                        <div
                          key={venda.id}
                          className="bg-yellow-800/20 border border-yellow-700/50 rounded-lg p-4 hover:bg-yellow-800/30 transition-colors flex flex-col h-full"
                        >
                          {/* Header do card */}
                          <div className="mb-3">
                            <div className="flex items-center gap-2 mb-2">
                              <FileText size={16} className="text-yellow-400" />
                              <span className="text-yellow-400 text-sm font-medium bg-yellow-500/20 px-2 py-1 rounded">
                                Comanda {venda.comanda_numero}
                              </span>
                            </div>

                            <div className="text-white font-medium mb-1">
                              📋 {venda.numero_venda}
                            </div>
                            {venda.numero_documento && venda.serie_documento && (
                              <div className="text-blue-400 text-xs">
                                🧾 NFC-e #{venda.numero_documento} Série {venda.serie_documento}
                              </div>
                            )}
                            <div className="text-gray-400 text-xs mt-1">
                              {new Date(venda.created_at).toLocaleString('pt-BR')}
                            </div>
                          </div>

                          {/* Informações principais */}
                          <div className="space-y-2 text-sm flex-1">
                            <div className="flex justify-between">
                              <span className="text-gray-400">Itens:</span>
                              <span className="text-gray-300">{venda.totalItens}</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-400">Total:</span>
                              <span className="text-green-400 font-medium">{formatCurrency(venda.valor_total || 0)}</span>
                            </div>
                            {venda.nome_cliente && (
                              <div className="flex justify-between">
                                <span className="text-gray-400">Cliente:</span>
                                <span className="text-gray-300">{venda.nome_cliente}</span>
                              </div>
                            )}
                          </div>

                          {venda.itens && venda.itens.length > 0 && (
                            <div className="mt-3 pt-3 border-t border-gray-700">
                              <button
                                onClick={() => {
                                  const novasVendasExpandidas = new Set(vendasComandasExpandidas);
                                  if (novasVendasExpandidas.has(venda.id)) {
                                    novasVendasExpandidas.delete(venda.id);
                                  } else {
                                    novasVendasExpandidas.add(venda.id);
                                  }
                                  setVendasComandasExpandidas(novasVendasExpandidas);
                                }}
                                className="flex items-center justify-between w-full text-xs text-gray-400 hover:text-gray-300 transition-colors"
                              >
                                <span>Produtos ({venda.itens.length})</span>
                                <span className="text-lg">
                                  {vendasComandasExpandidas.has(venda.id) ? '▼' : '▶'}
                                </span>
                              </button>

                              {vendasComandasExpandidas.has(venda.id) && (
                                <div className="mt-2 space-y-1">
                                  {venda.itens.map((item: any, index: number) => (
                                    <div key={index} className="text-xs text-gray-300 flex justify-between">
                                      <span>{item.nome_produto}</span>
                                      <span>{item.quantidade}x {formatCurrency(item.valor_total_item)}</span>
                                    </div>
                                  ))}
                                </div>
                              )}
                            </div>
                          )}

                          {/* Botão de recuperar */}
                          <div className="mt-4 pt-3 border-t border-gray-700">
                            <button
                              onClick={() => recuperarVendaSalva(venda.id)}
                              className="w-full bg-yellow-600 hover:bg-yellow-700 text-white py-2 px-4 rounded-lg transition-colors font-medium text-sm"
                            >
                              🔄 Recuperar Comanda
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  );
                })()}
              </div>

              {vendasComandas.length > 0 && (
                <div className="mt-6 pt-4 border-t border-gray-700 flex justify-between items-center">
                  <div className="text-sm text-gray-400">
                    {vendasComandas.length} comanda(s) aberta(s)
                  </div>
                  <button
                    onClick={carregarVendasComandas}
                    className="text-yellow-400 hover:text-yellow-300 text-sm transition-colors"
                  >
                    🔄 Atualizar Lista
                  </button>
                </div>
              )}
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Delivery Local */}
      <AnimatePresence>
        {showDeliveryModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => setShowDeliveryModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 w-full h-full max-w-none max-h-none overflow-hidden flex flex-col"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header compacto para tela cheia */}
              <div className="border-b border-gray-700 bg-background-card">
                <div className="flex items-center justify-between px-6 py-4">
                  <div className="flex items-center gap-3">
                    <Bike size={24} className="text-orange-400" />
                    <h3 className="text-xl font-semibold text-white">Delivery Local</h3>
                    {contadorVendasDelivery > 0 && (
                      <span className="bg-orange-600 text-white px-3 py-1 rounded-full text-sm font-medium">
                        {contadorVendasDelivery}
                      </span>
                    )}
                  </div>
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => setShowFiltrosDelivery(!showFiltrosDelivery)}
                      className={`px-3 py-1 rounded-lg text-xs transition-colors flex items-center gap-1 relative ${
                        showFiltrosDelivery
                          ? 'bg-primary-500/20 text-primary-400 border border-primary-500/30'
                          : 'bg-gray-700 text-gray-400 hover:bg-gray-600'
                      }`}
                      title="Filtros"
                    >
                      <Filter size={14} />
                      Filtros
                      {/* Indicador de filtros ativos */}
                      {(filtroClienteDelivery || filtroDataInicioDelivery || filtroDataFimDelivery) && (
                        <span className="absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full"></span>
                      )}
                    </button>
                    <button
                      onClick={carregarVendasDelivery}
                      className="text-gray-400 hover:text-white transition-colors p-1"
                      title="Atualizar"
                    >
                      <ArrowUpDown size={18} />
                    </button>
                    <button
                      onClick={() => setShowDeliveryModal(false)}
                      className="text-gray-400 hover:text-white transition-colors p-2 hover:bg-gray-700 rounded-lg"
                    >
                      <X size={24} />
                    </button>
                  </div>
                </div>
              </div>

              {/* Painel de Filtros */}
              <AnimatePresence>
                {showFiltrosDelivery && (
                  <motion.div
                    initial={{ height: 0, opacity: 0 }}
                    animate={{ height: 'auto', opacity: 1 }}
                    exit={{ height: 0, opacity: 0 }}
                    className="border-b border-gray-800 bg-gray-800/30 overflow-hidden"
                  >
                    <div className="p-4 space-y-4">
                      {/* Primeira linha - Filtros de texto */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Nome do Cliente</label>
                          <input
                            type="text"
                            value={filtroClienteDelivery}
                            onChange={(e) => setFiltroClienteDelivery(e.target.value)}
                            placeholder="Digite o nome do cliente..."
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-orange-500 text-sm"
                          />
                        </div>
                      </div>

                      {/* Segunda linha - Filtros de data */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Data Início</label>
                          <input
                            type="date"
                            value={filtroDataInicioDelivery}
                            onChange={(e) => setFiltroDataInicioDelivery(e.target.value)}
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500 text-sm"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Data Fim</label>
                          <input
                            type="date"
                            value={filtroDataFimDelivery}
                            onChange={(e) => setFiltroDataFimDelivery(e.target.value)}
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500 text-sm"
                          />
                        </div>
                      </div>

                      {/* Botões de ação dos filtros */}
                      <div className="flex gap-2">
                        <button
                          onClick={() => {
                            setFiltroClienteDelivery('');
                            setFiltroDataInicioDelivery('');
                            setFiltroDataFimDelivery('');
                          }}
                          className="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-gray-300 rounded-lg text-xs transition-colors"
                        >
                          Limpar Filtros
                        </button>
                      </div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>

              {/* Conteúdo principal */}
              <div className="flex-1 overflow-y-auto p-6">
                {carregandoVendasDelivery ? (
                  <div className="flex items-center justify-center py-12">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"></div>
                    <span className="ml-3 text-gray-400">Carregando deliveries...</span>
                  </div>
                ) : (
                  <>
                    {(() => {
                      // Aplicar filtros
                      let vendasFiltradas = vendasDelivery;

                      if (filtroClienteDelivery) {
                        vendasFiltradas = vendasFiltradas.filter(venda =>
                          venda.nome_cliente?.toLowerCase().includes(filtroClienteDelivery.toLowerCase())
                        );
                      }

                      if (filtroDataInicioDelivery) {
                        vendasFiltradas = vendasFiltradas.filter(venda => {
                          const dataVenda = new Date(venda.data_venda || venda.created_at);
                          const dataInicio = new Date(filtroDataInicioDelivery);
                          return dataVenda >= dataInicio;
                        });
                      }

                      if (filtroDataFimDelivery) {
                        vendasFiltradas = vendasFiltradas.filter(venda => {
                          const dataVenda = new Date(venda.data_venda || venda.created_at);
                          const dataFim = new Date(filtroDataFimDelivery);
                          dataFim.setHours(23, 59, 59, 999); // Incluir o dia inteiro
                          return dataVenda <= dataFim;
                        });
                      }

                      if (vendasFiltradas.length === 0) {
                        return (
                          <div className="text-center py-12">
                            <Bike size={48} className="mx-auto mb-4 text-gray-500" />
                            <p className="text-gray-400 text-lg">
                              {vendasDelivery.length === 0 ? 'Nenhum delivery encontrado' : 'Nenhum delivery corresponde aos filtros'}
                            </p>
                            {vendasDelivery.length === 0 && (
                              <p className="text-gray-500 text-sm mt-2">
                                Os deliveries salvos aparecerão aqui
                              </p>
                            )}
                          </div>
                        );
                      }

                      return (
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                          {vendasFiltradas.map((venda) => (
                            <div
                              key={venda.id}
                              className="bg-gray-800/30 border border-gray-700 rounded-lg p-4 hover:border-orange-500/50 transition-colors cursor-pointer"
                              onClick={() => recuperarVendaSalva(venda.id)}
                            >
                              <div className="flex items-center justify-between mb-3">
                                <div className="flex items-center gap-2">
                                  <Bike size={16} className="text-orange-400" />
                                  <span className="font-medium text-white">#{venda.numero_venda}</span>
                                </div>
                                <span className="text-xs text-gray-400">
                                  {formatarDataHora(venda.data_venda || venda.created_at)}
                                </span>
                              </div>

                              <div className="space-y-2">
                                {venda.nome_cliente && (
                                  <div className="flex items-center gap-2">
                                    <User size={14} className="text-gray-400" />
                                    <span className="text-sm text-gray-300 truncate">{venda.nome_cliente}</span>
                                  </div>
                                )}

                                {venda.telefone_cliente && (
                                  <div className="flex items-center gap-2">
                                    <Phone size={14} className="text-gray-400" />
                                    <span className="text-sm text-gray-300">{formatarTelefone(venda.telefone_cliente, venda.telefone_cliente.replace(/\D/g, '').length === 11 ? 'Celular' : 'Fixo')}</span>
                                  </div>
                                )}

                                <div className="flex items-center justify-between">
                                  <div className="flex items-center gap-2">
                                    <Package size={14} className="text-gray-400" />
                                    <span className="text-sm text-gray-300">{venda.total_itens} item(s)</span>
                                  </div>
                                  <span className="text-sm font-medium text-orange-400">
                                    {formatCurrency(venda.valor_total)}
                                  </span>
                                </div>

                                {venda.observacao_venda && (
                                  <div className="flex items-start gap-2">
                                    <FileText size={14} className="text-gray-400 mt-0.5" />
                                    <span className="text-xs text-gray-400 line-clamp-2">{venda.observacao_venda}</span>
                                  </div>
                                )}
                              </div>

                              <div className="mt-3 pt-3 border-t border-gray-700">
                                <div className="flex items-center justify-between">
                                  <span className="text-xs text-orange-400 font-medium">🚴 DELIVERY LOCAL</span>
                                  <span className="text-xs text-gray-500">Clique para recuperar</span>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      );
                    })()}
                  </>
                )}

                {vendasDelivery.length > 0 && (
                  <div className="mt-6 pt-4 border-t border-gray-700 flex justify-between items-center">
                    <div className="text-sm text-gray-400">
                      {vendasDelivery.length} delivery(s) salvo(s)
                    </div>
                    <button
                      onClick={carregarVendasDelivery}
                      className="text-orange-400 hover:text-orange-300 text-sm transition-colors"
                    >
                      🔄 Atualizar Lista
                    </button>
                  </div>
                )}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Sangria */}
      <AnimatePresence>
        {showSangriaModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => setShowSangriaModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-white">Sangria</h3>
                <button
                  onClick={() => setShowSangriaModal(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-2">
                    Valor da Sangria
                  </label>
                  <input
                    type="text"
                    placeholder="R$ 0,00"
                    className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-red-500 focus:ring-1 focus:ring-red-500/20"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-2">
                    Motivo
                  </label>
                  <textarea
                    placeholder="Descreva o motivo da sangria..."
                    rows={3}
                    className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-red-500 focus:ring-1 focus:ring-red-500/20"
                  />
                </div>
                <div className="flex gap-3">
                  <button
                    onClick={() => setShowSangriaModal(false)}
                    className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors"
                  >
                    Cancelar
                  </button>
                  <button
                    onClick={() => {
                      toast.success('Sangria registrada com sucesso!');
                      setShowSangriaModal(false);
                    }}
                    className="flex-1 bg-red-500 hover:bg-red-600 text-white py-3 px-4 rounded-lg transition-colors"
                  >
                    Registrar Sangria
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Suprimento */}
      <AnimatePresence>
        {showSuprimentoModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => setShowSuprimentoModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-white">Suprimento</h3>
                <button
                  onClick={() => setShowSuprimentoModal(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-2">
                    Valor do Suprimento
                  </label>
                  <input
                    type="text"
                    placeholder="R$ 0,00"
                    className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-green-500 focus:ring-1 focus:ring-green-500/20"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-2">
                    Motivo
                  </label>
                  <textarea
                    placeholder="Descreva o motivo do suprimento..."
                    rows={3}
                    className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-green-500 focus:ring-1 focus:ring-green-500/20"
                  />
                </div>
                <div className="flex gap-3">
                  <button
                    onClick={() => setShowSuprimentoModal(false)}
                    className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors"
                  >
                    Cancelar
                  </button>
                  <button
                    onClick={() => {
                      toast.success('Suprimento registrado com sucesso!');
                      setShowSuprimentoModal(false);
                    }}
                    className="flex-1 bg-green-500 hover:bg-green-600 text-white py-3 px-4 rounded-lg transition-colors"
                  >
                    Registrar Suprimento
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Pagamentos */}
      <AnimatePresence>
        {showPagamentosModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => setShowPagamentosModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-2xl mx-4 max-h-[80vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-white">Relatório de Pagamentos</h3>
                <button
                  onClick={() => setShowPagamentosModal(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-gray-800/50 p-4 rounded-lg">
                    <div className="text-sm text-gray-400">Dinheiro</div>
                    <div className="text-xl font-bold text-green-400">R$ 0,00</div>
                  </div>
                  <div className="bg-gray-800/50 p-4 rounded-lg">
                    <div className="text-sm text-gray-400">Cartão</div>
                    <div className="text-xl font-bold text-blue-400">R$ 0,00</div>
                  </div>
                  <div className="bg-gray-800/50 p-4 rounded-lg">
                    <div className="text-sm text-gray-400">PIX</div>
                    <div className="text-xl font-bold text-purple-400">R$ 0,00</div>
                  </div>
                  <div className="bg-gray-800/50 p-4 rounded-lg">
                    <div className="text-sm text-gray-400">Total</div>
                    <div className="text-xl font-bold text-primary-400">R$ 0,00</div>
                  </div>
                </div>

                <div className="text-center py-8">
                  <CreditCard size={48} className="mx-auto mb-4 text-gray-500" />
                  <p className="text-gray-400">Nenhuma venda registrada hoje</p>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Fiados - Tela Completa */}
      <AnimatePresence>
        {showFiadosModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/90 z-50"
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              className="bg-background-card h-full w-full overflow-hidden flex flex-col"
            >
              {/* Header */}
              <div className="flex items-center justify-between px-6 py-3 border-b border-gray-800">
                <h3 className="text-xl font-bold text-white">Controle de Fiados</h3>
                <button
                  onClick={() => setShowFiadosModal(false)}
                  className="text-gray-400 hover:text-white transition-colors p-1 hover:bg-gray-800 rounded-lg"
                >
                  <X size={20} />
                </button>
              </div>

              {/* Conteúdo Principal */}
              <div className="flex-1 overflow-hidden flex flex-col p-4 space-y-4">
                {/* Seção Superior: Filtros à esquerda e Total à direita */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  {/* Filtros */}
                  <div className="bg-gray-800/30 p-4 rounded-lg space-y-3">
                    <div className="flex items-center gap-3 mb-3">
                      <Filter size={20} className="text-blue-400" />
                      <h4 className="text-lg font-medium text-white">Filtros</h4>
                      <button
                        onClick={() => setShowFiltrosData(!showFiltrosData)}
                        className="ml-auto p-2 hover:bg-gray-700 rounded-lg transition-colors"
                        title={showFiltrosData ? "Ocultar filtros de data" : "Mostrar filtros de data"}
                      >
                        <Filter size={16} className={`text-gray-400 hover:text-white transition-colors ${showFiltrosData ? 'text-blue-400' : ''}`} />
                      </button>
                    </div>

                    {/* Campo de Pesquisa */}
                    <div>
                      <label className="block text-sm text-gray-400 mb-2">Pesquisar Cliente</label>
                      <input
                        type="text"
                        value={pesquisaClienteFiado}
                        onChange={(e) => setPesquisaClienteFiado(e.target.value)}
                        placeholder="Nome, telefone ou documento..."
                        className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                      />
                    </div>

                    {/* Filtros de Data - Colapsáveis */}
                    <AnimatePresence>
                      {showFiltrosData && (
                        <motion.div
                          initial={{ height: 0, opacity: 0 }}
                          animate={{ height: 'auto', opacity: 1 }}
                          exit={{ height: 0, opacity: 0 }}
                          transition={{ duration: 0.2 }}
                          className="overflow-hidden"
                        >
                          <div className="grid grid-cols-2 gap-4 pt-2">
                            <div>
                              <label className="block text-sm text-gray-400 mb-2">Data Início</label>
                              <input
                                type="date"
                                value={dataInicioFiltro}
                                onChange={(e) => setDataInicioFiltro(e.target.value)}
                                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                              />
                            </div>
                            <div>
                              <label className="block text-sm text-gray-400 mb-2">Data Fim</label>
                              <input
                                type="date"
                                value={dataFimFiltro}
                                onChange={(e) => setDataFimFiltro(e.target.value)}
                                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                              />
                            </div>
                          </div>
                        </motion.div>
                      )}
                    </AnimatePresence>

                    {/* Botão Limpar Filtros */}
                    {(pesquisaClienteFiado || dataInicioFiltro || dataFimFiltro) && (
                      <button
                        onClick={() => {
                          setPesquisaClienteFiado('');
                          setDataInicioFiltro('');
                          setDataFimFiltro('');
                          setShowFiltrosData(false);
                        }}
                        className="text-sm text-blue-400 hover:text-blue-300 transition-colors font-medium"
                      >
                        Limpar filtros
                      </button>
                    )}
                  </div>

                  {/* Total em Fiados */}
                  <div className="bg-gray-800/50 p-4 rounded-lg">
                    <div className="text-sm text-gray-400 mb-1">Total em Fiados</div>
                    <div className="text-3xl font-bold text-yellow-400 mb-1">
                      R$ {totalSaldoDevedor.toFixed(2).replace('.', ',')}
                    </div>
                    <div className="text-sm text-gray-500">
                      {clientesDevedores.length} cliente{clientesDevedores.length !== 1 ? 's' : ''} devedor{clientesDevedores.length !== 1 ? 'es' : ''}
                    </div>
                  </div>
                </div>

                {/* Lista de Clientes Devedores */}
                <div className="flex-1 bg-gray-800/30 rounded-lg overflow-hidden flex flex-col">
                  <div className="p-4 border-b border-gray-700">
                    <h4 className="text-lg font-medium text-white">Clientes Devedores</h4>
                  </div>

                  <div className="flex-1 overflow-y-auto">
                    {loadingClientesDevedores ? (
                      <div className="p-12 text-center">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-6"></div>
                        <p className="text-gray-400 text-lg">Carregando clientes...</p>
                      </div>
                    ) : clientesDevedores.length === 0 ? (
                      <div className="p-12 text-center">
                        <Clock size={64} className="mx-auto mb-6 text-gray-500" />
                        <p className="text-gray-400 text-lg">
                          {pesquisaClienteFiado || dataInicioFiltro || dataFimFiltro
                            ? 'Nenhum cliente encontrado com os filtros aplicados'
                            : 'Nenhum cliente com saldo devedor'
                          }
                        </p>
                      </div>
                    ) : (
                      <div className="divide-y divide-gray-700">
                        {clientesDevedores.map((cliente) => (
                          <div
                            key={cliente.id}
                            className="p-4 hover:bg-gray-700/30 transition-colors cursor-pointer"
                            onClick={() => abrirDetalhesCliente(cliente)}
                          >
                            <div className="flex justify-between items-start">
                              <div className="flex-1">
                                <div className="font-semibold text-white text-base mb-1">{cliente.nome}</div>
                                <div className="space-y-1">
                                  {cliente.documento && (
                                    <div className="text-sm text-gray-400 flex items-center">
                                      📄 {cliente.documento}
                                    </div>
                                  )}
                                  <div className="text-xs text-gray-500">
                                    Atualizado em: {new Date(cliente.updated_at).toLocaleDateString('pt-BR')}
                                  </div>
                                </div>
                              </div>
                              <div className="text-right ml-4">
                                <div className="text-xl font-bold text-yellow-400 mb-1">
                                  R$ {cliente.saldo_devedor.toFixed(2).replace('.', ',')}
                                </div>
                                <div className="text-xs text-gray-400">saldo devedor</div>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Detalhes do Cliente */}
      <AnimatePresence>
        {showDetalhesClienteModal && clienteSelecionadoDetalhes && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/90 z-50"
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              className="bg-background-card h-full w-full overflow-hidden flex flex-col"
            >
              {/* Header */}
              <div className="flex items-center justify-between px-6 py-3 border-b border-gray-800">
                <h3 className="text-xl font-bold text-white">Detalhes do Cliente</h3>
                <button
                  onClick={() => setShowDetalhesClienteModal(false)}
                  className="text-gray-400 hover:text-white transition-colors p-1 hover:bg-gray-800 rounded-lg"
                >
                  <X size={20} />
                </button>
              </div>

              {/* Conteúdo Principal */}
              <div className="flex-1 overflow-hidden flex flex-col p-4 space-y-4">
                {/* Informações do Cliente */}
                <div className="bg-gray-800/50 p-4 rounded-lg">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <div className="text-sm text-gray-400 mb-1">Nome do Cliente</div>
                      <div className="text-lg font-semibold text-white">{clienteSelecionadoDetalhes.nome}</div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-400 mb-1">Documento</div>
                      <div className="text-base text-gray-300">{clienteSelecionadoDetalhes.documento || 'Não informado'}</div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-400 mb-1">Saldo Devedor</div>
                      <div className="text-xl font-bold text-yellow-400">
                        R$ {clienteSelecionadoDetalhes.saldo_devedor.toFixed(2).replace('.', ',')}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Lista de Vendas Fiado */}
                <div className="flex-1 bg-gray-800/30 rounded-lg overflow-hidden flex flex-col">
                  <div className="p-4 border-b border-gray-700">
                    <h4 className="text-lg font-medium text-white">Histórico de Vendas Fiado</h4>
                  </div>

                  <div className="flex-1 overflow-y-auto">
                    {loadingVendasFiado ? (
                      <div className="p-12 text-center">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-6"></div>
                        <p className="text-gray-400 text-lg">Carregando vendas...</p>
                      </div>
                    ) : vendasFiadoCliente.length === 0 ? (
                      <div className="p-12 text-center">
                        <Clock size={64} className="mx-auto mb-6 text-gray-500" />
                        <p className="text-gray-400 text-lg">Nenhuma venda fiado encontrada</p>
                      </div>
                    ) : (
                      <div className="divide-y divide-gray-700">
                        {vendasFiadoCliente.map((venda) => (
                          <div key={venda.id} className="p-4">
                            {/* Cabeçalho da Venda */}
                            <div
                              className="flex justify-between items-center cursor-pointer hover:bg-gray-700/30 p-3 rounded-lg transition-colors"
                              onClick={() => toggleVendaExpandida(venda.id)}
                            >
                              <div className="flex-1">
                                <div className="flex items-center gap-3">
                                  <div className="font-semibold text-white">Venda #{venda.numero_venda}</div>
                                  <div className="text-sm text-gray-400">
                                    {new Date(venda.data_venda || venda.created_at).toLocaleDateString('pt-BR')}
                                  </div>
                                </div>
                                {venda.observacao_venda && (
                                  <div className="text-sm text-gray-500 mt-1">{venda.observacao_venda}</div>
                                )}
                              </div>
                              <div className="flex items-center gap-3">
                                <div className="text-lg font-bold text-yellow-400">
                                  R$ {venda.valor_total.toFixed(2).replace('.', ',')}
                                </div>
                                {vendaExpandida === venda.id ? (
                                  <ChevronUp size={20} className="text-gray-400" />
                                ) : (
                                  <ChevronDown size={20} className="text-gray-400" />
                                )}
                              </div>
                            </div>

                            {/* Itens da Venda - Expandido */}
                            <AnimatePresence>
                              {vendaExpandida === venda.id && (
                                <motion.div
                                  initial={{ height: 0, opacity: 0 }}
                                  animate={{ height: 'auto', opacity: 1 }}
                                  exit={{ height: 0, opacity: 0 }}
                                  transition={{ duration: 0.3 }}
                                  className="overflow-hidden"
                                >
                                  <div className="mt-3 bg-gray-900/50 rounded-lg p-4">
                                    <h5 className="text-sm font-medium text-white mb-3">Itens da Venda</h5>
                                    {itensVendaExpandida.length === 0 ? (
                                      <p className="text-gray-400 text-sm">Carregando itens...</p>
                                    ) : (
                                      <div className="space-y-2">
                                        {itensVendaExpandida.map((item) => (
                                          <div key={item.id} className="flex justify-between items-center py-2 border-b border-gray-700 last:border-b-0">
                                            <div className="flex-1">
                                              <div className="text-sm font-medium text-white">{item.nome_produto}</div>
                                              <div className="text-xs text-gray-400">
                                                {item.quantidade} {item.unidade} × R$ {item.valor_unitario.toFixed(2).replace('.', ',')}
                                              </div>
                                              {item.observacao_item && (
                                                <div className="text-xs text-gray-500 mt-1">{item.observacao_item}</div>
                                              )}
                                            </div>
                                            <div className="text-sm font-semibold text-yellow-400">
                                              R$ {item.valor_subtotal.toFixed(2).replace('.', ',')}
                                            </div>
                                          </div>
                                        ))}
                                        <div className="flex justify-between items-center pt-2 border-t border-gray-600">
                                          <div className="text-sm font-semibold text-white">Total da Venda</div>
                                          <div className="text-lg font-bold text-yellow-400">
                                            R$ {venda.valor_total.toFixed(2).replace('.', ',')}
                                          </div>
                                        </div>
                                      </div>
                                    )}
                                  </div>
                                </motion.div>
                              )}
                            </AnimatePresence>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Venda sem Produto */}
      <AnimatePresence>
        {showVendaSemProdutoModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => setShowVendaSemProdutoModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card border border-gray-800 rounded-lg p-6 w-full max-w-md"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-white">Venda sem Produto</h3>
                <button
                  onClick={() => setShowVendaSemProdutoModal(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Descrição
                  </label>
                  <input
                    type="text"
                    value={descricaoVendaSemProduto}
                    onChange={(e) => setDescricaoVendaSemProduto(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        e.preventDefault();
                        // Focar no campo valor quando pressionar Enter na descrição
                        valorVendaSemProdutoRef.current?.focus();
                      }
                    }}
                    placeholder="Digite a descrição do produto..."
                    className="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Valor (R$)
                  </label>
                  <input
                    ref={valorVendaSemProdutoRef}
                    type="number"
                    step="0.01"
                    min="0"
                    value={valorVendaSemProduto}
                    onChange={(e) => setValorVendaSemProduto(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        e.preventDefault();
                        // Verificar se os campos estão preenchidos antes de adicionar
                        if (descricaoVendaSemProduto.trim() && valorVendaSemProduto && parseFloat(valorVendaSemProduto) > 0) {
                          // Usar a nova função que verifica vendedor e quantidade
                          adicionarVendaSemProdutoComVerificacoes(descricaoVendaSemProduto.trim(), parseFloat(valorVendaSemProduto));
                          setDescricaoVendaSemProduto('');
                          setValorVendaSemProduto('');
                          setShowVendaSemProdutoModal(false);
                        } else {
                          toast.error('Preencha todos os campos corretamente');
                        }
                      }
                    }}
                    placeholder="0,00"
                    className="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500"
                  />
                </div>

                <div className="flex gap-3 pt-4">
                  <button
                    onClick={() => setShowVendaSemProdutoModal(false)}
                    className="flex-1 px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors"
                  >
                    Cancelar
                  </button>
                  <button
                    onClick={() => {
                      if (descricaoVendaSemProduto.trim() && valorVendaSemProduto && parseFloat(valorVendaSemProduto) > 0) {
                        // Usar a nova função que verifica vendedor e quantidade
                        adicionarVendaSemProdutoComVerificacoes(descricaoVendaSemProduto.trim(), parseFloat(valorVendaSemProduto));
                        setDescricaoVendaSemProduto('');
                        setValorVendaSemProduto('');
                        setShowVendaSemProdutoModal(false);
                      } else {
                        toast.error('Preencha todos os campos corretamente');
                      }
                    }}
                    disabled={!descricaoVendaSemProduto.trim() || !valorVendaSemProduto || parseFloat(valorVendaSemProduto) <= 0}
                    className="flex-1 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors disabled:bg-gray-600 disabled:cursor-not-allowed"
                  >
                    Adicionar
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Movimentos */}
      <AnimatePresence>
        {showMovimentosModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className={`fixed inset-0 z-50 flex items-center justify-center ${
              isFullscreen
                ? 'bg-background-dark p-0'
                : 'bg-black/50 p-4'
            }`}
            onClick={() => setShowMovimentosModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className={`bg-background-card border border-gray-800 flex flex-col ${
                isFullscreen
                  ? 'w-full h-full rounded-none'
                  : 'rounded-lg w-full max-w-6xl h-[90vh]'
              }`}
              onClick={(e) => e.stopPropagation()}
            >
              {/* Cabeçalho */}
              <div className="flex-shrink-0 p-4 border-b border-gray-800">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <h3 className="text-lg font-semibold text-white">Vendas do PDV</h3>
                  </div>
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => setShowFiltrosVendas(!showFiltrosVendas)}
                      className={`px-3 py-1 rounded-lg text-xs transition-colors flex items-center gap-1 relative ${
                        showFiltrosVendas
                          ? 'bg-primary-500/20 text-primary-400 border border-primary-500/30'
                          : 'bg-gray-700 text-gray-400 hover:bg-gray-600'
                      }`}
                      title="Filtros"
                    >
                      <Filter size={14} />
                      Filtros
                      {/* Indicador de filtros ativos */}
                      {(filtroStatus !== 'todas' || filtroNfce !== 'todas' || filtroDataInicio || filtroDataFim || filtroNumeroVenda || filtroNumeroPedido) && (
                        <span className="absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full"></span>
                      )}
                    </button>
                    <button
                      onClick={loadVendas}
                      className="text-gray-400 hover:text-white transition-colors p-1"
                      title="Atualizar"
                    >
                      <ArrowUpDown size={18} />
                    </button>

                    {/* Botão para alternar fullscreen */}
                    <button
                      onClick={() => {
                        if (isFullscreen) {
                          exitFullscreen();
                        } else {
                          enterFullscreen();
                        }
                      }}
                      className="w-8 h-8 bg-gray-600/20 hover:bg-gray-500/30 border border-gray-600/20 hover:border-gray-500/40 rounded-full flex items-center justify-center text-gray-400 hover:text-gray-300 transition-all duration-200 group"
                      title={isFullscreen ? "Sair do modo tela cheia" : "Entrar em tela cheia"}
                    >
                      {isFullscreen ? (
                        <Minimize2 size={16} className="group-hover:scale-110 transition-transform" />
                      ) : (
                        <Maximize2 size={16} className="group-hover:scale-110 transition-transform" />
                      )}
                    </button>

                    <button
                      onClick={() => setShowMovimentosModal(false)}
                      className="text-gray-400 hover:text-white transition-colors"
                    >
                      <X size={20} />
                    </button>
                  </div>
                </div>
              </div>

              {/* Painel de Filtros */}
              <AnimatePresence>
                {showFiltrosVendas && (
                  <motion.div
                    initial={{ height: 0, opacity: 0 }}
                    animate={{ height: 'auto', opacity: 1 }}
                    exit={{ height: 0, opacity: 0 }}
                    className="border-b border-gray-800 bg-gray-800/30 overflow-hidden"
                  >
                    <div className="p-3 space-y-3">
                      {/* Filtros por Status */}
                      <div>
                        <label className="block text-sm font-medium text-gray-400 mb-2">Status</label>
                        <div className="flex flex-wrap gap-2">
                          {[
                            { value: 'todas', label: 'Todas', icon: '📋' },
                            { value: 'finalizadas', label: 'Finalizadas', icon: '✅' },
                            { value: 'canceladas', label: 'Canceladas', icon: '❌' },
                            { value: 'pedidos', label: 'Pedidos', icon: '📦' }
                          ].map((status) => (
                            <button
                              key={status.value}
                              onClick={() => {
                                setFiltroStatus(status.value as any);
                                // Aplicar filtro imediatamente
                                setTimeout(() => loadVendas(), 100);
                              }}
                              className={`px-3 py-1 rounded-lg text-xs transition-colors flex items-center gap-1 ${
                                filtroStatus === status.value
                                  ? 'bg-primary-500/20 text-primary-400 border border-primary-500/30'
                                  : 'bg-gray-700 text-gray-400 hover:bg-gray-600'
                              }`}
                            >
                              <span>{status.icon}</span>
                              {status.label}
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* ✅ NOVO: Filtros por NFC-e */}
                      <div>
                        <label className="block text-sm font-medium text-gray-400 mb-2">NFC-e</label>
                        <div className="flex flex-wrap gap-2">
                          {[
                            { value: 'todas', label: 'Todas as vendas', icon: '📋' },
                            { value: 'pendentes', label: 'NFC-e Pendentes', icon: '⏳' },
                            { value: 'autorizadas', label: 'NFC-e Autorizadas', icon: '✅' },
                            { value: 'canceladas', label: 'NFC-e Canceladas', icon: '❌' }
                          ].map((nfce) => (
                            <button
                              key={nfce.value}
                              onClick={() => {
                                setFiltroNfce(nfce.value as any);
                                // Aplicar filtro imediatamente
                                setTimeout(() => loadVendas(), 100);
                              }}
                              className={`px-3 py-1 rounded-lg text-xs transition-colors flex items-center gap-1 ${
                                filtroNfce === nfce.value
                                  ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30'
                                  : 'bg-gray-700 text-gray-400 hover:bg-gray-600'
                              }`}
                            >
                              <span>{nfce.icon}</span>
                              {nfce.label}
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* Filtros por Data e Hora */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Data e Hora Início</label>
                          <input
                            type="datetime-local"
                            value={filtroDataInicio}
                            onChange={(e) => {
                              setFiltroDataInicio(e.target.value);
                              // Aplicar filtro automaticamente após mudança
                              setTimeout(() => loadVendas(), 500);
                            }}
                            className="w-full bg-gray-700 border border-gray-600 rounded-lg py-2 px-3 text-white text-sm focus:outline-none focus:border-primary-500"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Data e Hora Fim</label>
                          <input
                            type="datetime-local"
                            value={filtroDataFim}
                            onChange={(e) => {
                              setFiltroDataFim(e.target.value);
                              // Aplicar filtro automaticamente após mudança
                              setTimeout(() => loadVendas(), 500);
                            }}
                            className="w-full bg-gray-700 border border-gray-600 rounded-lg py-2 px-3 text-white text-sm focus:outline-none focus:border-primary-500"
                          />
                        </div>
                      </div>

                      {/* Filtros por Número */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Número da Venda</label>
                          <input
                            type="text"
                            value={filtroNumeroVenda}
                            onChange={(e) => {
                              setFiltroNumeroVenda(e.target.value);
                              // Aplicar filtro automaticamente após mudança (com debounce maior para texto)
                              setTimeout(() => loadVendas(), 800);
                            }}
                            placeholder="Ex: PDV-000123"
                            className="w-full bg-gray-700 border border-gray-600 rounded-lg py-2 px-3 text-white text-sm focus:outline-none focus:border-primary-500"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Número do Pedido</label>
                          <input
                            type="text"
                            value={filtroNumeroPedido}
                            onChange={(e) => {
                              setFiltroNumeroPedido(e.target.value);
                              // Aplicar filtro automaticamente após mudança (com debounce maior para texto)
                              setTimeout(() => loadVendas(), 800);
                            }}
                            placeholder="Ex: 123"
                            className="w-full bg-gray-700 border border-gray-600 rounded-lg py-2 px-3 text-white text-sm focus:outline-none focus:border-primary-500"
                          />
                        </div>
                      </div>

                      {/* Botões de Ação */}
                      <div className="flex gap-2 pt-2">
                        <button
                          onClick={loadVendas}
                          className="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg text-sm font-medium transition-colors"
                        >
                          Aplicar Filtros
                        </button>
                        <button
                          onClick={() => {
                            setFiltroStatus('todas');
                            setFiltroNfce('todas'); // ✅ NOVO: Limpar filtro de NFC-e
                            setFiltroDataInicio('');
                            setFiltroDataFim('');
                            setFiltroNumeroPedido('');
                            setFiltroNumeroVenda('');
                            setTimeout(() => loadVendas(), 100);
                          }}
                          className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg text-sm font-medium transition-colors"
                        >
                          Limpar Filtros
                        </button>
                      </div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>

              {/* Conteúdo */}
              <div className="flex-1 overflow-y-auto p-4 min-h-0" style={{ scrollbarWidth: 'thin', scrollbarColor: '#4B5563 #1F2937' }}>
                {loadingVendas ? (
                  <div className="flex items-center justify-center py-12">
                    <div className="text-center">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500 mx-auto mb-4"></div>
                      <p className="text-gray-400">Carregando vendas...</p>
                    </div>
                  </div>
                ) : vendas.length === 0 ? (
                  <div className="text-center py-12">
                    <ArrowUpDown size={48} className="mx-auto mb-4 text-gray-500" />
                    <p className="text-gray-400 text-lg">Nenhuma venda registrada</p>
                    <p className="text-gray-500 text-sm mt-2">
                      As vendas realizadas no PDV aparecerão aqui
                    </p>
                  </div>
                ) : (
                  <div className={`grid gap-4 pb-4 ${
                    isFullscreen
                      ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5'
                      : 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3'
                  }`}>
                    {vendas.map((venda) => (
                      <div
                        key={venda.id}
                        className="bg-gray-800/50 rounded-lg border border-gray-700 p-4 hover:border-gray-600 transition-colors flex flex-col h-full"
                      >
                        {/* Header do Card */}
                        <div className="flex flex-col gap-2 mb-3">
                          <div className="flex items-center justify-between">
                            <div className="text-white font-medium text-sm">
                              Venda #{venda.numero_venda}
                            </div>
                            <div className={`px-2 py-1 rounded-full text-xs font-medium ${
                              venda.status_venda === 'finalizada'
                                ? 'bg-green-500/20 text-green-400'
                                : venda.status_venda === 'cancelada'
                                ? 'bg-red-500/20 text-red-400'
                                : 'bg-yellow-500/20 text-yellow-400'
                            }`}>
                              {venda.status_venda === 'finalizada' ? 'Finalizada' :
                               venda.status_venda === 'cancelada' ? 'Cancelada' :
                               venda.status_venda}
                            </div>
                          </div>

                          {/* Tags de Origem e Status Fiscal */}
                          <div className="flex flex-wrap gap-1">
                            {/* Tag de Origem */}
                            {venda.pedidos_origem && venda.pedidos_origem.length > 0 ? (
                              <span className="px-2 py-1 bg-blue-500/20 text-blue-400 text-xs font-medium rounded-full border border-blue-500/30">
                                {venda.pedidos_origem.length === 1
                                  ? `Pedido #${venda.pedidos_origem[0]}`
                                  : `${venda.pedidos_origem.length} Pedidos`
                                }
                              </span>
                            ) : (
                              <span className="px-2 py-1 bg-green-500/20 text-green-400 text-xs font-medium rounded-full border border-green-500/30">
                                Venda Direta
                              </span>
                            )}

                            {/* ✅ Tag NFC-e - Quando tentou emitir NFC-e */}
                            {venda.tentativa_nfce && (
                              <span className="px-2 py-1 bg-purple-500/20 text-purple-400 text-xs font-medium rounded-full border border-purple-500/30">
                                {venda.numero_documento ?
                                  `NFC-e #${venda.numero_documento} Série ${venda.serie_documento}`
                                  : 'NFC-e'
                                }
                              </span>
                            )}

                            {/* ✅ Tag Pendente - Quando há erro fiscal */}
                            {venda.status_fiscal === 'pendente' && (
                              <span className="px-2 py-1 bg-yellow-500/20 text-yellow-400 text-xs font-medium rounded-full border border-yellow-500/30 animate-pulse">
                                Pendente
                              </span>
                            )}

                            {/* ✅ Tag Autorizada - Quando NFC-e foi autorizada */}
                            {venda.status_fiscal === 'autorizada' && (
                              <span className="px-2 py-1 bg-green-500/20 text-green-400 text-xs font-medium rounded-full border border-green-500/30">
                                Autorizada
                              </span>
                            )}

                            {/* ✅ NOVO: Tag Cancelada Fiscalmente - Quando NFC-e foi cancelada na SEFAZ */}
                            {venda.status_fiscal === 'cancelada' && venda.modelo_documento === 65 && (
                              <span className="px-2 py-1 bg-red-500/20 text-red-400 text-xs font-medium rounded-full border border-red-500/30">
                                NFC-e Cancelada
                              </span>
                            )}

                            {/* ✅ CORREÇÃO: Tag Homologação - Aparece APENAS para NFC-e em homologação */}
                            {venda.ambiente === 'homologacao' && venda.tentativa_nfce && (
                              <span className="px-2 py-1 bg-orange-500/20 text-orange-400 text-xs font-medium rounded-full border border-orange-500/30">
                                HOMOLOG.
                              </span>
                            )}

                            {/* ✅ NOVO: Tag de Devolução - Quando há devolução aplicada */}
                            {venda.devolucao_origem_numero && (
                              <span className="px-2 py-1 bg-cyan-500/20 text-cyan-400 text-xs font-medium rounded-full border border-cyan-500/30">
                                Troca #{venda.devolucao_origem_numero}
                              </span>
                            )}
                          </div>

                          {/* Valor Total */}
                          <div className="text-primary-400 font-bold text-lg">
                            {formatCurrency(venda.valor_final)}
                          </div>
                        </div>

                        {/* Informações do Cliente e Data */}
                        <div className="flex-1 space-y-2 mb-3">
                          {venda.cliente ? (
                            <div className="space-y-1">
                              {/* ✅ NOVO: Mostrar documento quando disponível */}
                              {venda.cliente.documento && (
                                <div className="text-xs text-gray-500 truncate">
                                  {venda.cliente.documento.length === 11 ? 'CPF' : 'CNPJ'}: {venda.cliente.documento}
                                </div>
                              )}
                              <div className="text-sm text-gray-400 truncate">
                                Cliente: {venda.cliente.nome}
                              </div>
                            </div>
                          ) : venda.documento_cliente ? (
                            <div className="space-y-1">
                              {/* ✅ NOVO: Mostrar documento mesmo sem nome do cliente */}
                              <div className="text-xs text-gray-500 truncate">
                                {venda.documento_cliente.length === 11 ? 'CPF' : 'CNPJ'}: {venda.documento_cliente}
                              </div>
                              <div className="text-sm text-gray-400">
                                Cliente: Consumidor Final
                              </div>
                            </div>
                          ) : (
                            <div className="text-sm text-gray-400">
                              Cliente: Consumidor Final
                            </div>
                          )}
                          <div className="text-xs text-gray-500">
                            {venda.data_venda_formatada ||
                             (venda.created_at ? new Date(venda.created_at).toLocaleString('pt-BR', {
                               day: '2-digit',
                               month: '2-digit',
                               year: '2-digit',
                               hour: '2-digit',
                               minute: '2-digit'
                             }) : 'Data não disponível')}
                          </div>
                          {/* Informações do Operador */}
                          {venda.usuario_venda && (
                            <div className="text-xs text-gray-500 truncate">
                              Operador: {venda.usuario_venda.nome}
                            </div>
                          )}
                          {/* Informações dos Vendedores */}
                          {venda.vendedores_venda && venda.vendedores_venda.length > 0 && (
                            <div className="text-xs text-gray-500 truncate">
                              Vendedor{venda.vendedores_venda.length > 1 ? 'es' : ''}: {
                                venda.vendedores_venda.map(v => v.nome).join(', ')
                              }
                            </div>
                          )}
                        </div>

                        {/* Resumo dos Itens */}
                        {venda.vendas_pdv_itens && venda.vendas_pdv_itens.length > 0 && (
                          <div className="flex-1 mb-3">
                            <div className="text-xs text-gray-400 font-medium mb-1">
                              Itens ({venda.vendas_pdv_itens.length}):
                            </div>
                            <div className="space-y-1 max-h-16 overflow-y-auto custom-scrollbar">
                              {venda.vendas_pdv_itens.slice(0, 2).map((item: any, index: number) => (
                                <div key={index} className="text-xs">
                                  <div className="flex justify-between items-start">
                                    <span className="text-gray-500 truncate flex-1 mr-2">
                                      {item.quantidade}x {item.produto?.nome || 'Produto'}
                                    </span>
                                    <span className="text-gray-500 flex-shrink-0">
                                      {formatCurrency(item.valor_total_item)}
                                    </span>
                                  </div>
                                </div>
                              ))}
                              {venda.vendas_pdv_itens.length > 2 && (
                                <div className="text-xs text-gray-500 italic">
                                  +{venda.vendas_pdv_itens.length - 2} item(s) a mais...
                                </div>
                              )}
                            </div>
                          </div>
                        )}

                        {/* Resumo de Valores Compacto */}
                        <div className="mb-3">
                          {(venda.desconto_total > 0 || venda.acrescimo_total > 0) && (
                            <div className="space-y-1 text-xs">
                              {venda.desconto_total > 0 && (
                                <div className="flex justify-between">
                                  <span className="text-red-400">💰 Desconto:</span>
                                  <span className="text-red-400">-{formatCurrency(venda.desconto_total)}</span>
                                </div>
                              )}
                              {venda.acrescimo_total > 0 && (
                                <div className="flex justify-between">
                                  <span className="text-yellow-400">📈 Acréscimo:</span>
                                  <span className="text-yellow-400">+{formatCurrency(venda.acrescimo_total)}</span>
                                </div>
                              )}
                            </div>
                          )}
                        </div>

                        {/* Formas de Pagamento Compacto */}
                        {venda.vendas_pdv_pagamentos && venda.vendas_pdv_pagamentos.length > 0 && (
                          <div className="mb-3">
                            <div className="text-xs text-gray-400 font-medium mb-1">
                              Pagamento ({venda.vendas_pdv_pagamentos.length}):
                            </div>
                            <div className="space-y-1 max-h-12 overflow-y-auto custom-scrollbar">
                              {venda.vendas_pdv_pagamentos.slice(0, 2).map((pagamento: any, index: number) => (
                                <div key={index} className="flex justify-between text-xs">
                                  <span className="text-gray-300 truncate flex-1 mr-2">
                                    {pagamento.forma_pagamento}
                                    {pagamento.parcelas && pagamento.parcelas > 1 && ` (${pagamento.parcelas}x)`}
                                  </span>
                                  <span className="text-white flex-shrink-0">{formatCurrency(pagamento.valor)}</span>
                                </div>
                              ))}
                              {venda.vendas_pdv_pagamentos.length > 2 && (
                                <div className="text-xs text-gray-500 italic">
                                  +{venda.vendas_pdv_pagamentos.length - 2} forma(s) a mais...
                                </div>
                              )}
                            </div>
                          </div>
                        )}

                        {/* Informações de Cancelamento Compacto */}
                        {(venda.status_venda === 'cancelada' || venda.status_fiscal === 'cancelada') && (
                          <div className="mb-3 p-2 bg-red-500/10 border border-red-500/20 rounded-lg">
                            <div className="text-xs text-red-400 font-medium mb-1">
                              🚫 {venda.status_fiscal === 'cancelada' && venda.modelo_documento === 65 ? 'NFC-e Cancelada' : 'Cancelada'}
                            </div>
                            {venda.usuario_cancelamento && (
                              <div className="text-xs text-gray-400 truncate">
                                Por: {venda.usuario_cancelamento.nome}
                              </div>
                            )}
                            {venda.motivo_cancelamento && (
                              <div className="text-xs text-gray-400 truncate">
                                Motivo: {venda.motivo_cancelamento}
                              </div>
                            )}
                            {/* ✅ NOVO: Informações específicas do cancelamento fiscal */}
                            {venda.status_fiscal === 'cancelada' && venda.modelo_documento === 65 && venda.protocolo_cancelamento && (
                              <div className="text-xs text-gray-400 truncate">
                                Protocolo: {venda.protocolo_cancelamento}
                              </div>
                            )}
                            {venda.status_fiscal === 'cancelada' && venda.modelo_documento === 65 && venda.cancelada_em && (
                              <div className="text-xs text-gray-400 truncate">
                                Data: {new Date(venda.cancelada_em).toLocaleString('pt-BR', {
                                  day: '2-digit',
                                  month: '2-digit',
                                  year: '2-digit',
                                  hour: '2-digit',
                                  minute: '2-digit'
                                })}
                              </div>
                            )}
                          </div>
                        )}

                        {/* Botões de Ação */}
                        <div className="flex flex-col gap-2 mt-auto">
                          <button
                            onClick={async () => {
                              setVendaParaExibirItens(venda);
                              setShowItensVendaModal(true);
                              carregarItensVenda(venda.id);
                              // ✅ NOVO: Carregar próximo número da NFC-e se for venda sem NFC-e
                              if (!venda.tentativa_nfce && venda.status_venda === 'finalizada') {
                                // Aguardar um pouco para garantir que o modal abriu
                                setTimeout(() => {
                                  carregarProximoNumeroNfceModal();
                                }, 100);
                              }
                            }}
                            className="w-full px-3 py-2 bg-blue-600/20 hover:bg-blue-600/30 text-blue-400 rounded text-xs transition-colors font-medium border border-blue-600/30 hover:border-blue-600/50"
                          >
                            Exibir Itens
                          </button>

                          {/* ✅ NOVO: Botão Editar NFC-e para vendas pendentes */}
                          {venda.status_fiscal === 'pendente' && venda.tentativa_nfce && (
                            <button
                              onClick={async () => {
                                setVendaParaEditarNfce(venda);
                                setShowEditarNfceModal(true);
                                carregarItensParaEdicaoNfce(venda.id);

                                // ✅ NOVO: Carregar série da NFC-e do usuário logado
                                try {
                                  const { data: userData } = await supabase.auth.getUser();
                                  if (userData.user) {
                                    const { data: usuarioData } = await supabase
                                      .from('usuarios')
                                      .select('serie_nfce')
                                      .eq('id', userData.user.id)
                                      .single();

                                    if (usuarioData?.serie_nfce) {
                                      setSerieNfce(usuarioData.serie_nfce);
                                    } else {
                                      setSerieNfce(1); // Fallback para série 1
                                    }
                                  }
                                } catch (error) {
                                  setSerieNfce(1); // Fallback para série 1
                                }
                              }}
                              className="w-full px-3 py-2 bg-yellow-600/20 hover:bg-yellow-600/30 text-yellow-400 rounded text-xs transition-colors font-medium border border-yellow-600/30 hover:border-yellow-600/50"
                            >
                              Editar NFC-e
                            </button>
                          )}

                          {venda.status_venda === 'finalizada' && (
                            <button
                              onClick={() => {
                                setVendaParaCancelar(venda);
                                setShowCancelamentoModal(true);
                              }}
                              className="w-full px-3 py-2 bg-red-600/20 hover:bg-red-600/30 text-red-400 rounded text-xs transition-colors font-medium border border-red-600/30 hover:border-red-600/50"
                            >
                              Cancelar Venda
                            </button>
                          )}

                          {/* ✅ NOVO: Botão Reimprimir Cupom */}
                          {venda.status_venda === 'finalizada' && (
                            <button
                              onClick={() => reimprimirCupom(venda)}
                              className="w-full px-3 py-2 bg-purple-600/20 hover:bg-purple-600/30 text-purple-400 rounded text-xs transition-colors font-medium border border-purple-600/30 hover:border-purple-600/50 flex items-center justify-center gap-1"
                            >
                              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
                              </svg>
                              Reimprimir Cupom ({obterTextoTipoImpressao()})
                            </button>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Cancelamento de Venda */}
      <AnimatePresence>
        {showCancelamentoModal && vendaParaCancelar && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => setShowCancelamentoModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center">
                  <X size={20} className="text-red-400" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">Cancelar Venda</h3>
                  <p className="text-gray-400 text-sm">Esta ação não pode ser desfeita</p>
                </div>
              </div>

              <div className="mb-4 p-3 bg-gray-800/50 rounded-lg">
                <div className="text-white font-medium">Venda #{vendaParaCancelar.numero_venda}</div>
                <div className="text-sm text-gray-400">
                  Valor: {formatCurrency(vendaParaCancelar.valor_total)}
                </div>
                {vendaParaCancelar.nome_cliente && (
                  <div className="text-sm text-gray-400">
                    Cliente: {vendaParaCancelar.nome_cliente}
                  </div>
                )}

                {/* ✅ NOVO: Informações específicas para NFC-e */}
                {vendaParaCancelar.modelo_documento === 65 && vendaParaCancelar.status_fiscal === 'autorizada' && (
                  <div className="mt-3 p-2 bg-yellow-900/30 border border-yellow-600/30 rounded">
                    <div className="text-yellow-400 text-xs font-medium mb-1">⚠️ CANCELAMENTO FISCAL NFC-e</div>
                    <div className="text-xs text-yellow-300">
                      • Prazo: 15 minutos da emissão<br/>
                      • Será cancelada na SEFAZ<br/>
                      • Chave: {vendaParaCancelar.chave_nfe?.substring(0, 20)}...
                    </div>
                  </div>
                )}

                {vendaParaCancelar.modelo_documento === 65 && vendaParaCancelar.status_fiscal !== 'autorizada' && (
                  <div className="mt-3 p-2 bg-blue-900/30 border border-blue-600/30 rounded">
                    <div className="text-blue-400 text-xs font-medium mb-1">ℹ️ CANCELAMENTO APENAS NO SISTEMA</div>
                    <div className="text-xs text-blue-300">
                      NFC-e não autorizada - cancelamento apenas local
                    </div>
                  </div>
                )}
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-400 mb-2">
                  Motivo do Cancelamento *
                </label>
                <div className="relative">
                  <textarea
                    value={motivoCancelamento}
                    onChange={(e) => setMotivoCancelamento(e.target.value)}
                    placeholder="Informe o motivo do cancelamento (mínimo 15 caracteres)..."
                    className={`w-full bg-gray-800/50 border rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 resize-none pr-16 ${
                      motivoCancelamento.length >= 15
                        ? 'border-green-500 focus:border-green-500 focus:ring-green-500/20'
                        : 'border-red-500 focus:border-red-500 focus:ring-red-500/20'
                    }`}
                    rows={3}
                    maxLength={255}
                  />

                  {/* Contador de caracteres */}
                  <div className="absolute bottom-2 right-2 text-xs font-medium pointer-events-none">
                    <span className={`${
                      motivoCancelamento.length >= 15
                        ? 'text-green-400'
                        : 'text-red-400'
                    }`}>
                      {motivoCancelamento.length}
                    </span>
                    <span className="text-gray-500">/15</span>
                  </div>
                </div>

                {/* Indicador visual do status */}
                <div className="mt-2 flex items-center text-xs">
                  {motivoCancelamento.length >= 15 ? (
                    <div className="flex items-center text-green-400">
                      <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                      Motivo válido para cancelamento
                    </div>
                  ) : (
                    <div className="flex items-center text-red-400">
                      <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                      Mínimo de 15 caracteres obrigatório (faltam {15 - motivoCancelamento.length})
                    </div>
                  )}
                </div>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={() => {
                    setShowCancelamentoModal(false);
                    setVendaParaCancelar(null);
                    setMotivoCancelamento('');
                  }}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors"
                >
                  Sair
                </button>
                <button
                  onClick={cancelarVenda}
                  disabled={motivoCancelamento.length < 15}
                  className={`flex-1 py-3 px-4 rounded-lg transition-colors font-medium ${
                    motivoCancelamento.length >= 15
                      ? 'bg-red-600 hover:bg-red-700 text-white cursor-pointer'
                      : 'bg-gray-600 text-gray-400 cursor-not-allowed'
                  }`}
                >
                  {motivoCancelamento.length >= 15 ? 'Confirmar Cancelamento' : `Faltam ${15 - motivoCancelamento.length} caracteres`}
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Itens da Venda */}
      <AnimatePresence>
        {showItensVendaModal && vendaParaExibirItens && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={fecharModalItens}
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              className="bg-background-card w-full h-full flex flex-col"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Cabeçalho */}
              <div className="flex-shrink-0 p-6 border-b border-gray-800">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <div>
                      <h3 className="text-lg font-semibold text-white">
                        Itens da Venda #{vendaParaExibirItens.numero_venda}
                      </h3>
                      <p className="text-sm text-gray-400">
                        {vendaParaExibirItens.created_at} • Total: {formatCurrency(vendaParaExibirItens.valor_final)}
                      </p>
                    </div>

                  </div>
                  <button
                    onClick={fecharModalItens}
                    className="text-gray-400 hover:text-white transition-colors"
                  >
                    <X size={20} />
                  </button>
                </div>

                {/* ✅ NOVO: Seção para emitir NFC-e (apenas para vendas que não são NFC-e) */}
                {!vendaParaExibirItens.tentativa_nfce && vendaParaExibirItens.status_venda === 'finalizada' && (
                  <div className="mt-4 p-4 bg-green-500/10 border border-green-500/30 rounded-lg">
                    <div className="flex items-center gap-2 mb-3">
                      <div className="w-6 h-6 bg-green-500/20 rounded-full flex items-center justify-center">
                        <svg className="w-4 h-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                      </div>
                      <h4 className="text-green-400 font-medium">Emitir NFC-e</h4>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
                      {/* Tipo de Documento */}
                      <div>
                        <label className="block text-green-300 text-xs font-medium mb-2">
                          Tipo de Documento (Opcional)
                        </label>
                        <div className="flex gap-2">
                          <button
                            onClick={() => {
                              setTipoDocumentoModalItens('cpf');
                              setCpfCnpjModalItens('');
                              setErroValidacaoModalItens('');
                            }}
                            className={`flex-1 py-1.5 px-3 rounded text-xs font-medium transition-colors ${
                              tipoDocumentoModalItens === 'cpf'
                                ? 'bg-green-500 text-white'
                                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                            }`}
                          >
                            CPF
                          </button>
                          <button
                            onClick={() => {
                              setTipoDocumentoModalItens('cnpj');
                              setCpfCnpjModalItens('');
                              setErroValidacaoModalItens('');
                            }}
                            className={`flex-1 py-1.5 px-3 rounded text-xs font-medium transition-colors ${
                              tipoDocumentoModalItens === 'cnpj'
                                ? 'bg-green-500 text-white'
                                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                            }`}
                          >
                            CNPJ
                          </button>
                        </div>
                      </div>

                      {/* Campo CPF/CNPJ */}
                      <div>
                        <label className="block text-green-300 text-xs font-medium mb-2">
                          {tipoDocumentoModalItens === 'cpf' ? 'CPF' : 'CNPJ'} (Opcional)
                        </label>
                        <input
                          type="text"
                          value={cpfCnpjModalItens}
                          onChange={(e) => {
                            handleCpfCnpjModalItensChange(e.target.value);
                            if (erroValidacaoModalItens) {
                              setErroValidacaoModalItens('');
                            }
                          }}
                          onBlur={validarDocumentoModalItensOnBlur}
                          placeholder={tipoDocumentoModalItens === 'cpf' ? '000.000.000-00' : '00.000.000/0000-00'}
                          className={`w-full bg-gray-800/50 border rounded py-1.5 px-2 text-sm text-white focus:outline-none focus:ring-1 transition-colors ${
                            erroValidacaoModalItens
                              ? 'border-red-500 focus:border-red-500 focus:ring-red-500/20'
                              : 'border-gray-700 focus:border-green-500 focus:ring-green-500/20'
                          }`}
                        />
                        {erroValidacaoModalItens && (
                          <div className="mt-1 text-xs text-red-400 flex items-center gap-1">
                            <span>⚠️</span>
                            <span>{erroValidacaoModalItens}</span>
                          </div>
                        )}
                      </div>

                      {/* ✅ NOVO: Campo Número da NFC-e */}
                      <div>
                        <label className="block text-green-300 text-xs font-medium mb-1">
                          Número da NFC-e
                        </label>
                        <div className="text-xs text-gray-400 mb-1">
                          Será usado na emissão da NFC-e
                        </div>
                        <div className="flex items-center gap-2">
                          <input
                            type="number"
                            value={numeroNfceModalItens}
                            onChange={(e) => setNumeroNfceModalItens(e.target.value)}
                            placeholder="Próximo número"
                            min="1"
                            className="flex-1 bg-gray-800/50 border border-gray-700 rounded py-1.5 px-2 text-sm text-white focus:outline-none focus:border-green-500 focus:ring-1 focus:ring-green-500/20 transition-colors"
                          />
                          {loadingProximoNumero && (
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-green-400"></div>
                          )}
                        </div>
                      </div>

                      {/* Botão Emitir */}
                      <div>
                        <button
                          onClick={emitirNfceModalItens}
                          disabled={emitindoNfceModalItens || isDocumentoModalItensInvalido()}
                          className={`w-full py-2 px-4 rounded-lg text-sm font-medium transition-colors flex items-center justify-center gap-2 ${
                            emitindoNfceModalItens || isDocumentoModalItensInvalido()
                              ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                              : 'bg-green-600 hover:bg-green-700 text-white'
                          }`}
                        >
                          {emitindoNfceModalItens ? (
                            <>
                              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                              Emitindo...
                            </>
                          ) : (
                            <>
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                              </svg>
                              Emitir NFC-e
                            </>
                          )}
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* Conteúdo */}
              <div className="flex-1 overflow-y-auto custom-scrollbar p-6">
                {loadingItensVenda ? (
                  <div className="flex items-center justify-center py-12">
                    <div className="text-center">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500 mx-auto mb-4"></div>
                      <p className="text-gray-400">Carregando itens...</p>
                    </div>
                  </div>
                ) : itensVenda.length === 0 ? (
                  <div className="text-center py-12">
                    <ShoppingCart size={48} className="mx-auto mb-4 text-gray-500" />
                    <p className="text-gray-400 text-lg">Nenhum item encontrado</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {/* ✅ CORRIGIDO: Tabela de itens - sempre exibir */}
                    <div className="bg-gray-800/30 rounded-lg p-4 mb-4">
                      <div className="flex items-center justify-between mb-4">
                        <h4 className="text-lg font-medium text-white flex items-center gap-2">
                          <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                          {!vendaParaExibirItens.tentativa_nfce && vendaParaExibirItens.status_venda === 'finalizada'
                            ? 'Dados Fiscais (Editáveis para NFC-e)'
                            : 'Itens da Venda'
                          }
                        </h4>
                        {/* ✅ Botão de atualizar dados apenas para vendas sem NFC-e */}
                        {!vendaParaExibirItens.tentativa_nfce && vendaParaExibirItens.status_venda === 'finalizada' && itensVenda.length > 0 && (
                          <button
                            onClick={handleAtualizarDadosProdutosNfce}
                            className="flex items-center gap-2 px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors"
                            title="Atualizar dados fiscais dos produtos com informações do cadastro"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                              <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/>
                              <path d="M21 3v5h-5"/>
                              <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/>
                              <path d="M3 21v-5h5"/>
                            </svg>
                            Atualizar dados dos produtos
                          </button>
                        )}
                      </div>
                      {/* ✅ Descrição apenas para vendas editáveis */}
                      {!vendaParaExibirItens.tentativa_nfce && vendaParaExibirItens.status_venda === 'finalizada' && (
                        <p className="text-gray-400 text-sm mb-4">
                          Revise e corrija os dados fiscais dos produtos. Clique no ícone de lápis para editar os campos CFOP, NCM, CEST, Margem, Aliquota, CST ou CSOSN.
                        </p>
                      )}

                      <div className="overflow-x-auto">
                        <table className="w-full">
                          <thead>
                            <tr className="border-b border-gray-700">
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Item</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Código</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Cód. Barras</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Nome</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Qtd</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Preço</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Total</th>
                              {/* ✅ Campos fiscais apenas para vendas editáveis */}
                              {!vendaParaExibirItens.tentativa_nfce && vendaParaExibirItens.status_venda === 'finalizada' && (
                                <>
                                  <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">NCM</th>
                                  <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">CFOP</th>
                                  <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">CEST</th>
                                  <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Margem</th>
                                  <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Aliquota</th>
                                  <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">
                                    {itensVenda[0]?.regime_tributario === 1 ? 'CSOSN' : 'CST'}
                                  </th>
                                </>
                              )}
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Unidade</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Vendedor</th>
                            </tr>
                          </thead>
                            <tbody>
                              {itensVenda.filter(item => !item.isDevolucao).map((item, index) => (
                                <tr key={item.id} className={`border-b border-gray-800/50 ${
                                  item.isDevolucao ? 'bg-red-900/20 border-red-600/30' : ''
                                }`}>
                                  <td className="py-3 px-2 text-white font-medium">{index + 1}</td>
                                  <td className="py-3 px-2 text-gray-300">{item.produto?.codigo || item.codigo_produto}</td>
                                  <td className="py-3 px-2 text-gray-300">{item.produto?.codigo_barras || '-'}</td>
                                  <td className="py-3 px-2">
                                    <div className="flex items-center gap-2">
                                      <span className="text-white">{item.nome_produto}</span>
                                      {item.isDevolucao && (
                                        <span className="px-1.5 py-0.5 text-xs bg-red-500/20 text-red-400 rounded border border-red-500/30">
                                          DEVOLUÇÃO
                                        </span>
                                      )}
                                    </div>
                                  </td>
                                  <td className="py-3 px-2 text-gray-300">{item.quantidade}</td>
                                  <td className="py-3 px-2 text-white">{formatCurrency(item.valor_unitario)}</td>
                                  <td className="py-3 px-2 text-primary-400 font-medium">{formatCurrency(item.valor_total_item)}</td>

                                  {/* ✅ Campos fiscais apenas para vendas editáveis */}
                                  {!vendaParaExibirItens.tentativa_nfce && vendaParaExibirItens.status_venda === 'finalizada' && (
                                    <>
                                      {/* NCM */}
                                      <td className="py-3 px-2">
                                    <div className="flex items-center gap-2">
                                      {item.editando_ncm ? (
                                        <div className="flex items-center gap-1">
                                          <input
                                            type="text"
                                            value={item.ncm_editavel}
                                            onChange={(e) => {
                                              const novoValor = e.target.value.replace(/\D/g, ''); // Só números
                                              setItensVenda(prev => prev.map((it, idx) =>
                                                idx === index ? { ...it, ncm_editavel: novoValor } : it
                                              ));
                                            }}
                                            className="w-20 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                            maxLength={8}
                                            placeholder="00000000"
                                          />
                                          <button
                                            onClick={() => salvarEdicaoCampoModalItens(index, 'ncm', item.ncm_editavel)}
                                            className="text-green-400 hover:text-green-300"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                            </svg>
                                          </button>
                                          <button
                                            onClick={() => cancelarEdicaoCampoModalItens(index, 'ncm')}
                                            className="text-red-400 hover:text-red-300"
                                          >
                                            <X size={16} />
                                          </button>
                                        </div>
                                      ) : (
                                        <div className="flex items-center gap-2">
                                          <span className="text-white font-mono text-sm">{item.ncm_editavel || '00000000'}</span>
                                          <button
                                            onClick={() => habilitarEdicaoCampoModalItens(index, 'ncm')}
                                            className="text-gray-400 hover:text-white"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                            </svg>
                                          </button>
                                        </div>
                                      )}
                                    </div>
                                  </td>

                                  {/* CFOP */}
                                  <td className="py-3 px-2">
                                    <div className="flex items-center gap-2">
                                      {item.editando_cfop ? (
                                        <div className="flex items-center gap-1">
                                          <input
                                            type="text"
                                            value={item.cfop_editavel}
                                            onChange={(e) => {
                                              const novoValor = e.target.value;
                                              setItensVenda(prev => prev.map((it, idx) =>
                                                idx === index ? { ...it, cfop_editavel: novoValor } : it
                                              ));
                                            }}
                                            className="w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                            maxLength={4}
                                          />
                                          <button
                                            onClick={() => salvarEdicaoCampoModalItens(index, 'cfop', item.cfop_editavel)}
                                            className="text-green-400 hover:text-green-300"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                            </svg>
                                          </button>
                                          <button
                                            onClick={() => cancelarEdicaoCampoModalItens(index, 'cfop')}
                                            className="text-red-400 hover:text-red-300"
                                          >
                                            <X size={16} />
                                          </button>
                                        </div>
                                      ) : (
                                        <div className="flex items-center gap-2">
                                          <span className="text-white">{item.cfop_editavel || '-'}</span>
                                          <button
                                            onClick={() => habilitarEdicaoCampoModalItens(index, 'cfop')}
                                            className="text-gray-400 hover:text-white"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                            </svg>
                                          </button>
                                        </div>
                                      )}
                                    </div>
                                  </td>

                                  {/* CEST */}
                                  <td className="py-3 px-2">
                                    <div className="flex items-center gap-2">
                                      {item.editando_cest ? (
                                        <div className="flex items-center gap-1">
                                          <input
                                            type="text"
                                            value={item.cest_editavel}
                                            onChange={(e) => {
                                              const novoValor = e.target.value.replace(/\D/g, ''); // Só números
                                              setItensVenda(prev => prev.map((it, idx) =>
                                                idx === index ? { ...it, cest_editavel: novoValor } : it
                                              ));
                                            }}
                                            className="w-20 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                            maxLength={7}
                                            placeholder="0000000"
                                          />
                                          <button
                                            onClick={() => salvarEdicaoCampoModalItens(index, 'cest', item.cest_editavel)}
                                            className="text-green-400 hover:text-green-300"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                            </svg>
                                          </button>
                                          <button
                                            onClick={() => cancelarEdicaoCampoModalItens(index, 'cest')}
                                            className="text-red-400 hover:text-red-300"
                                          >
                                            <X size={16} />
                                          </button>
                                        </div>
                                      ) : (
                                        <div className="flex items-center gap-2">
                                          <span className="text-white font-mono text-sm">{item.cest_editavel || '-'}</span>
                                          <button
                                            onClick={() => habilitarEdicaoCampoModalItens(index, 'cest')}
                                            className="text-gray-400 hover:text-white"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                            </svg>
                                          </button>
                                        </div>
                                      )}
                                    </div>
                                  </td>

                                  {/* Margem ST */}
                                  <td className="py-3 px-2">
                                    <div className="flex items-center gap-2">
                                      {item.editando_margem_st ? (
                                        <div className="flex items-center gap-1">
                                          <input
                                            type="number"
                                            value={item.margem_st_editavel}
                                            onChange={(e) => {
                                              const novoValor = e.target.value;
                                              setItensVenda(prev => prev.map((it, idx) =>
                                                idx === index ? { ...it, margem_st_editavel: novoValor } : it
                                              ));
                                            }}
                                            className="w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                            step="0.01"
                                            min="0"
                                            max="100"
                                            placeholder="0.00"
                                          />
                                          <span className="text-gray-400 text-xs">%</span>
                                          <button
                                            onClick={() => salvarEdicaoCampoModalItens(index, 'margem_st', item.margem_st_editavel)}
                                            className="text-green-400 hover:text-green-300"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                            </svg>
                                          </button>
                                          <button
                                            onClick={() => cancelarEdicaoCampoModalItens(index, 'margem_st')}
                                            className="text-red-400 hover:text-red-300"
                                          >
                                            <X size={16} />
                                          </button>
                                        </div>
                                      ) : (
                                        <div className="flex items-center gap-2">
                                          <span className="text-white">{item.margem_st_editavel ? `${item.margem_st_editavel}%` : '-'}</span>
                                          <button
                                            onClick={() => habilitarEdicaoCampoModalItens(index, 'margem_st')}
                                            className="text-gray-400 hover:text-white"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                            </svg>
                                          </button>
                                        </div>
                                      )}
                                    </div>
                                  </td>

                                  {/* Aliquota ICMS */}
                                  <td className="py-3 px-2">
                                    <div className="flex items-center gap-2">
                                      {item.editando_aliquota_icms ? (
                                        <div className="flex items-center gap-1">
                                          <input
                                            type="number"
                                            value={item.aliquota_icms_editavel}
                                            onChange={(e) => {
                                              const novoValor = e.target.value;
                                              setItensVenda(prev => prev.map((it, idx) =>
                                                idx === index ? { ...it, aliquota_icms_editavel: novoValor } : it
                                              ));
                                            }}
                                            className="w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                            step="0.01"
                                            min="0"
                                            max="100"
                                            placeholder="0.00"
                                          />
                                          <span className="text-gray-400 text-xs">%</span>
                                          <button
                                            onClick={() => salvarEdicaoCampoModalItens(index, 'aliquota_icms', item.aliquota_icms_editavel)}
                                            className="text-green-400 hover:text-green-300"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                            </svg>
                                          </button>
                                          <button
                                            onClick={() => cancelarEdicaoCampoModalItens(index, 'aliquota_icms')}
                                            className="text-red-400 hover:text-red-300"
                                          >
                                            <X size={16} />
                                          </button>
                                        </div>
                                      ) : (
                                        <div className="flex items-center gap-2">
                                          <span className="text-white">{item.aliquota_icms_editavel ? `${item.aliquota_icms_editavel}%` : '-'}</span>
                                          <button
                                            onClick={() => habilitarEdicaoCampoModalItens(index, 'aliquota_icms')}
                                            className="text-gray-400 hover:text-white"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                            </svg>
                                          </button>
                                        </div>
                                      )}
                                    </div>
                                  </td>

                                  {/* CST/CSOSN */}
                                  <td className="py-3 px-2">
                                    <div className="flex items-center gap-2">
                                      {item.regime_tributario === 1 ? (
                                        // CSOSN para Simples Nacional
                                        item.editando_csosn ? (
                                          <div className="flex items-center gap-1">
                                            <input
                                              type="text"
                                              value={item.csosn_editavel}
                                              onChange={(e) => {
                                                const novoValor = e.target.value;
                                                setItensVenda(prev => prev.map((it, idx) =>
                                                  idx === index ? { ...it, csosn_editavel: novoValor } : it
                                                ));
                                              }}
                                              className="w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                              maxLength={3}
                                            />
                                            <button
                                              onClick={() => salvarEdicaoCampoModalItens(index, 'csosn', item.csosn_editavel)}
                                              className="text-green-400 hover:text-green-300"
                                            >
                                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                              </svg>
                                            </button>
                                            <button
                                              onClick={() => cancelarEdicaoCampoModalItens(index, 'csosn')}
                                              className="text-red-400 hover:text-red-300"
                                            >
                                              <X size={16} />
                                            </button>
                                          </div>
                                        ) : (
                                          <div className="flex items-center gap-2">
                                            <span className="text-white">{item.csosn_editavel || '-'}</span>
                                            <button
                                              onClick={() => habilitarEdicaoCampoModalItens(index, 'csosn')}
                                              className="text-gray-400 hover:text-white"
                                            >
                                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                              </svg>
                                            </button>
                                          </div>
                                        )
                                      ) : (
                                        // CST para Lucro Real/Presumido
                                        item.editando_cst ? (
                                          <div className="flex items-center gap-1">
                                            <input
                                              type="text"
                                              value={item.cst_editavel}
                                              onChange={(e) => {
                                                const novoValor = e.target.value;
                                                setItensVenda(prev => prev.map((it, idx) =>
                                                  idx === index ? { ...it, cst_editavel: novoValor } : it
                                                ));
                                              }}
                                              className="w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                              maxLength={3}
                                            />
                                            <button
                                              onClick={() => salvarEdicaoCampoModalItens(index, 'cst', item.cst_editavel)}
                                              className="text-green-400 hover:text-green-300"
                                            >
                                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                              </svg>
                                            </button>
                                            <button
                                              onClick={() => cancelarEdicaoCampoModalItens(index, 'cst')}
                                              className="text-red-400 hover:text-red-300"
                                            >
                                              <X size={16} />
                                            </button>
                                          </div>
                                        ) : (
                                          <div className="flex items-center gap-2">
                                            <span className="text-white">{item.cst_editavel || '-'}</span>
                                            <button
                                              onClick={() => habilitarEdicaoCampoModalItens(index, 'cst')}
                                              className="text-gray-400 hover:text-white"
                                            >
                                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                              </svg>
                                            </button>
                                          </div>
                                        )
                                      )}
                                    </div>
                                  </td>
                                    </>
                                  )}

                                  {/* Unidade */}
                                  <td className="py-3 px-2 text-gray-300">{item.produto?.unidade_medida?.sigla || 'UN'}</td>

                                  {/* Vendedor */}
                                  <td className="py-3 px-2 text-gray-300">
                                    {item.vendedor_nome || '-'}
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                    </div>
                  </div>
                )}

                {/* ✅ NOVO: Seção de Vendedores da Venda */}
                {!loadingItensVenda && itensVenda.length > 0 && (() => {
                  // Buscar vendedores únicos dos itens (excluindo devoluções)
                  const vendedoresUnicos = new Map();

                  itensVenda.filter(item => !item.isDevolucao).forEach(item => {
                    if (item.vendedor_id && item.vendedor_nome) {
                      vendedoresUnicos.set(item.vendedor_id, item.vendedor_nome);
                    }
                  });

                  const vendedoresArray = Array.from(vendedoresUnicos.values());

                  if (vendedoresArray.length > 0) {
                    return (
                      <div className="mt-6 p-4 bg-gray-800/30 rounded-lg">
                        <h4 className="text-lg font-medium text-white mb-4">
                          Vendedor{vendedoresArray.length > 1 ? 'es' : ''} da Venda
                        </h4>
                        <div className="text-white">
                          {vendedoresArray.join(', ')}
                        </div>
                      </div>
                    );
                  }
                  return null;
                })()}

                {/* ✅ NOVO: Seção de Totais da Venda */}
                {!loadingItensVenda && itensVenda.length > 0 && (
                  <div className="mt-6 p-4 bg-gray-800/30 rounded-lg">
                    <h4 className="text-lg font-medium text-white mb-4">Resumo da Venda</h4>

                    {(() => {
                      // ✅ CORRIGIDO: Filtrar apenas itens que não são devolução
                      const itensVendaFiltrados = itensVenda.filter(item => !item.isDevolucao);

                      // Calcular subtotal sem descontos (preço original * quantidade)
                      const subtotalSemDescontos = itensVendaFiltrados.reduce((total, item) => {
                        // ✅ CORRIGIDO: Usar valor_unitario * quantidade para garantir o valor original
                        const valorOriginal = item.valor_unitario * item.quantidade;
                        return total + valorOriginal;
                      }, 0);

                      // Calcular total com descontos aplicados nos itens
                      const totalComDescontosItens = itensVendaFiltrados.reduce((total, item) => {
                        return total + (item.valor_total_item || 0);
                      }, 0);

                      // Usar os valores de desconto que já vêm da venda, ou calcular dinamicamente
                      let descontoItens = vendaParaExibirItens.valor_desconto_itens || 0;
                      let descontoTotal = vendaParaExibirItens.valor_desconto_total || 0;
                      const descontoPrazo = vendaParaExibirItens.valor_desconto || 0;

                      // ✅ CORRIGIDO: Para vendas antigas, calcular apenas desconto nos itens dinamicamente
                      if (descontoItens === 0 && descontoTotal === 0) {
                        // Calcular desconto nos itens (diferença entre subtotal original e total com desconto)
                        descontoItens = Math.max(0, subtotalSemDescontos - totalComDescontosItens);

                        // ✅ CORRIGIDO: Desconto no total deve ser 0 se não estiver salvo no banco
                        // Não calcular dinamicamente pois isso incluiria devoluções
                        descontoTotal = 0;
                      }

                      return (
                        <div className="space-y-2">
                          {/* Itens */}
                          <div className="flex justify-between items-center text-sm">
                            <span className="text-white">Itens:</span>
                            <span className="text-white">{itensVendaFiltrados.reduce((total, item) => total + item.quantidade, 0)}</span>
                          </div>

                          {/* Subtotal */}
                          <div className="flex justify-between items-center text-sm">
                            <span className="text-white">Subtotal:</span>
                            <span className="text-white">{formatCurrency(subtotalSemDescontos)}</span>
                          </div>

                          {/* Área de Descontos */}
                          {(descontoItens > 0 || descontoTotal > 0 || descontoPrazo > 0) && (
                            <>
                              {/* Desconto no Item */}
                              {descontoItens > 0 && (
                                <div className="flex justify-between items-center text-sm">
                                  <span className="text-orange-400">Desconto no Item:</span>
                                  <span className="text-orange-400">-{formatCurrency(descontoItens)}</span>
                                </div>
                              )}

                              {/* Desconto no Total */}
                              {descontoTotal > 0 && (
                                <div className="flex justify-between items-center text-sm">
                                  <span className="text-red-400">Desconto no Total:</span>
                                  <span className="text-red-400">-{formatCurrency(descontoTotal)}</span>
                                </div>
                              )}

                              {/* Desconto por Prazo/Valor */}
                              {descontoPrazo > 0 && (
                                <div className="flex justify-between items-center text-sm">
                                  <span className="text-yellow-400">Desconto por Prazo:</span>
                                  <span className="text-yellow-400">-{formatCurrency(descontoPrazo)}</span>
                                </div>
                              )}
                            </>
                          )}

                          {/* ✅ NOVO: Devolução - Quando há devolução aplicada */}
                          {vendaParaExibirItens.devolucao_origem_numero && (
                            <div className="flex justify-between items-center text-sm">
                              <span className="text-cyan-400">Devolução #{vendaParaExibirItens.devolucao_origem_numero}:</span>
                              <span className="text-cyan-400">
                                -{formatCurrency(
                                  // Calcular valor da devolução baseado na diferença entre subtotal e total
                                  Math.max(0, subtotalSemDescontos - (vendaParaExibirItens.valor_total || vendaParaExibirItens.valor_final || 0) - descontoItens - descontoPrazo)
                                )}
                              </span>
                            </div>
                          )}

                          {/* Linha separadora */}
                          <div className="border-t border-gray-700 my-3"></div>

                          {/* Total da Venda */}
                          <div className="flex justify-between items-center text-lg font-bold">
                            <span className="text-white">Total da Venda:</span>
                            <span className="text-primary-400">{formatCurrency(vendaParaExibirItens.valor_total || vendaParaExibirItens.valor_final)}</span>
                          </div>

                          {/* ✅ NOVO: Formas de Pagamento - Ocultar quando valor total for R$ 0,00 */}
                          {(vendaParaExibirItens.tipo_pagamento || vendaParaExibirItens.forma_pagamento_id || vendaParaExibirItens.formas_pagamento) &&
                           (vendaParaExibirItens.valor_total || vendaParaExibirItens.valor_final || 0) > 0 && (
                            <>
                              {/* Linha separadora */}
                              <div className="border-t border-gray-700 my-3"></div>

                              <div className="text-sm font-medium text-gray-300 mb-2">Formas de Pagamento:</div>

                              {/* Pagamento à vista */}
                              {vendaParaExibirItens.tipo_pagamento === 'vista' && vendaParaExibirItens.forma_pagamento_id && (
                                <div className="flex justify-between items-center text-sm">
                                  <span className="text-gray-300">
                                    {(() => {
                                      const forma = formasPagamento.find(f => f.id === vendaParaExibirItens.forma_pagamento_id);
                                      return forma ? forma.nome : 'Forma de Pagamento';
                                    })()}:
                                  </span>
                                  <span className="text-white">{formatCurrency(vendaParaExibirItens.valor_pago || vendaParaExibirItens.valor_total)}</span>
                                </div>
                              )}

                              {/* Pagamento parcial */}
                              {vendaParaExibirItens.tipo_pagamento === 'parcial' && vendaParaExibirItens.formas_pagamento && (
                                <>
                                  {vendaParaExibirItens.formas_pagamento.map((pag: any, index: number) => {
                                    const forma = formasPagamento.find(f => f.id === (pag.forma_id || pag.forma));
                                    return (
                                      <div key={index} className="flex justify-between items-center text-sm">
                                        <span className="text-gray-300">{forma ? forma.nome : 'Forma de Pagamento'}:</span>
                                        <span className="text-white">{formatCurrency(pag.valor)}</span>
                                      </div>
                                    );
                                  })}
                                </>
                              )}

                              {/* Troco */}
                              {vendaParaExibirItens.valor_troco && vendaParaExibirItens.valor_troco > 0 && (
                                <div className="flex justify-between items-center text-sm font-medium">
                                  <span className="text-green-400">TROCO:</span>
                                  <span className="text-green-400">{formatCurrency(vendaParaExibirItens.valor_troco)}</span>
                                </div>
                              )}
                            </>
                          )}
                        </div>
                      );
                    })()}
                  </div>
                )}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Desconto */}
      <AnimatePresence>
        {showDescontoModal && itemParaDesconto && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => setShowDescontoModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              {(() => {
                const item = carrinho.find(i => i.id === itemParaDesconto);
                if (!item) return null;

                return (
                  <>
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-semibold text-white">Aplicar Desconto</h3>
                      <button
                        onClick={() => setShowDescontoModal(false)}
                        className="text-gray-400 hover:text-white transition-colors"
                      >
                        <X size={20} />
                      </button>
                    </div>

                    <div className="mb-4 p-3 bg-gray-800/50 rounded-lg">
                      <div className="text-white font-medium">{item.produto.nome}</div>
                      <div className="text-sm text-gray-400">
                        Preço atual: {formatCurrency(calcularPrecoFinal(item.produto))}
                        {item.produto.promocao && item.produto.valor_desconto && (
                          <div className="text-xs text-green-400 mt-1">
                            (Preço original: {formatCurrency(item.produto.preco)} - Em promoção)
                          </div>
                        )}
                      </div>
                    </div>

                    <div className="space-y-4">
                      {/* Tipo de Desconto */}
                      <div>
                        <label className="block text-sm font-medium text-gray-400 mb-2">
                          Tipo de Desconto
                        </label>
                        <div className="flex gap-2">
                          <button
                            onClick={() => setTipoDesconto('percentual')}
                            className={`flex-1 py-2 px-3 rounded-lg border transition-colors ${
                              tipoDesconto === 'percentual'
                                ? 'bg-primary-500 border-primary-500 text-white'
                                : 'bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600'
                            }`}
                          >
                            Percentual (%)
                          </button>
                          <button
                            onClick={() => setTipoDesconto('valor')}
                            className={`flex-1 py-2 px-3 rounded-lg border transition-colors ${
                              tipoDesconto === 'valor'
                                ? 'bg-primary-500 border-primary-500 text-white'
                                : 'bg-gray-800 border-gray-700 text-gray-400 hover:border-gray-600'
                            }`}
                          >
                            Valor (R$)
                          </button>
                        </div>
                      </div>

                      {/* Valor do Desconto */}
                      <div>
                        <label className="block text-sm font-medium text-gray-400 mb-2">
                          {tipoDesconto === 'percentual' ? 'Percentual de Desconto' : 'Valor do Desconto'}
                        </label>
                        <input
                          type="text"
                          value={valorDesconto}
                          onChange={(e) => setValorDesconto(e.target.value)}
                          placeholder={tipoDesconto === 'percentual' ? 'Ex: 10' : 'Ex: 5,00'}
                          className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                        />
                      </div>

                      {/* Novo Valor */}
                      {valorDesconto && (
                        <div className="p-3 bg-green-500/10 border border-green-500/20 rounded-lg">
                          <div className="text-sm text-gray-400 mb-1">Novo preço:</div>
                          <div className="text-lg font-bold text-green-400">
                            {formatCurrency(novoValor)}
                          </div>
                          <div className="text-xs text-gray-500">
                            Desconto: {formatCurrency(calcularPrecoFinal(item.produto) - novoValor)}
                          </div>
                        </div>
                      )}

                      {/* Botões */}
                      <div className="flex gap-3">
                        <button
                          onClick={() => setShowDescontoModal(false)}
                          className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors"
                        >
                          Cancelar
                        </button>
                        <button
                          onClick={aplicarDesconto}
                          disabled={!valorDesconto}
                          className="flex-1 bg-primary-500 hover:bg-primary-600 disabled:bg-gray-600 disabled:cursor-not-allowed text-white py-3 px-4 rounded-lg transition-colors"
                        >
                          Aplicar Desconto
                        </button>
                      </div>
                    </div>
                  </>
                );
              })()}
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Confirmação - Remover Item */}
      <AnimatePresence>
        {showConfirmRemoveItem && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              className="bg-background-card rounded-lg p-6 max-w-md w-full"
            >
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center">
                  <X size={20} className="text-red-400" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">Remover Pagamento</h3>
                  <p className="text-gray-400 text-sm">Esta ação não pode ser desfeita</p>
                </div>
              </div>

              <p className="text-gray-300 mb-6">
                Tem certeza que deseja remover este pagamento?
              </p>

              <div className="flex gap-3">
                <button
                  onClick={() => {
                    setShowConfirmRemoveItem(false);
                    setItemToRemove(null);
                  }}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={() => itemToRemove && removerPagamentoParcial(itemToRemove)}
                  className="flex-1 bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Remover
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Confirmação - Remover Todos */}
      <AnimatePresence>
        {showConfirmRemoveAll && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              className="bg-background-card rounded-lg p-6 max-w-md w-full"
            >
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center">
                  <Trash2 size={20} className="text-red-400" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">Limpar Todos os Pagamentos</h3>
                  <p className="text-gray-400 text-sm">Esta ação não pode ser desfeita</p>
                </div>
              </div>

              <p className="text-gray-300 mb-6">
                Tem certeza que deseja remover todos os pagamentos adicionados?
                Você perderá {pagamentosParciais.length} pagamento(s) no valor total de {formatCurrency(calcularTotalPago())}.
              </p>

              <div className="flex gap-3">
                <button
                  onClick={() => setShowConfirmRemoveAll(false)}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={limparPagamentosParciais}
                  className="flex-1 bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Limpar Todos
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Confirmação - Limpar Carrinho */}
      <AnimatePresence>
        {showConfirmLimparCarrinho && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              className="bg-background-card rounded-lg p-6 max-w-md w-full"
            >
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center">
                  <Trash2 size={20} className="text-red-400" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">Limpar PDV Completo</h3>
                  <p className="text-gray-400 text-sm">Esta ação não pode ser desfeita</p>
                </div>
              </div>

              <p className="text-gray-300 mb-6">
                Tem certeza que deseja limpar todo o PDV?
                Você perderá {carrinho.length} produto(s) no carrinho{pedidosImportados.length > 0 && `, ${pedidosImportados.length} pedido(s) importado(s)`}, cliente selecionado e pagamentos em andamento.
              </p>

              <div className="flex gap-3">
                <button
                  onClick={() => setShowConfirmLimparCarrinho(false)}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={limparCarrinhoCompleto}
                  className="flex-1 bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Limpar PDV
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Confirmação - Importar Pedido */}
      <AnimatePresence>
        {showConfirmImportarPedido && pedidoParaImportar && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              className="bg-background-card rounded-lg p-6 max-w-md w-full"
            >
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center">
                  <ShoppingCart size={20} className="text-blue-400" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">Importar Pedido</h3>
                  <p className="text-gray-400 text-sm">Há itens no carrinho atual</p>
                </div>
              </div>

              <p className="text-gray-300 mb-4">
                Há <span className="text-primary-400 font-medium">{carrinho.filter(item => !item.pedido_origem_id).length} produto(s)</span> adicionados manualmente no carrinho.
              </p>

              <p className="text-gray-300 mb-6">
                Deseja limpar estes itens e importar o pedido?
                <br />
                <span className="text-green-400 font-medium">Pedido #{pedidoParaImportar.numero}</span>
                {pedidoParaImportar.cliente && (
                  <>
                    <br />
                    <span className="text-blue-400">Cliente: {pedidoParaImportar.cliente.nome}</span>
                  </>
                )}
              </p>

              <div className="flex gap-3">
                <button
                  onClick={() => {
                    setShowConfirmImportarPedido(false);
                    setPedidoParaImportar(null);
                  }}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={confirmarImportarPedido}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Importar
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Confirmação - Faturar Pedido do Cardápio Digital */}
      <AnimatePresence>
        {showConfirmFaturarPedido && pedidoParaFaturar && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 z-[100] flex items-center justify-center p-4"
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              className="bg-background-card rounded-lg p-6 max-w-md w-full"
            >
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-indigo-500/20 rounded-full flex items-center justify-center">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" className="text-indigo-400">
                    <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/>
                  </svg>
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">Faturar Pedido</h3>
                  <p className="text-gray-400 text-sm">Importar para o PDV</p>
                </div>
              </div>

              <p className="text-gray-300 mb-4">
                Deseja importar este pedido do cardápio digital para o PDV e gerar a nota fiscal?
              </p>

              <div className="bg-gray-800/50 rounded-lg p-3 mb-4">
                <p className="text-green-400 font-medium">Pedido #{pedidoParaFaturar.numero_pedido}</p>
                <p className="text-blue-400">Cliente: {pedidoParaFaturar.nome_cliente}</p>
                <p className="text-gray-300">Valor: {formatarPreco(pedidoParaFaturar.valor_total)}</p>
              </div>

              <p className="text-yellow-400 text-sm mb-6">
                ⚠️ O carrinho atual será limpo e substituído pelos itens deste pedido.
              </p>

              <div className="flex gap-3">
                <button
                  onClick={() => {
                    setShowConfirmFaturarPedido(false);
                    setPedidoParaFaturar(null);
                  }}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={confirmarFaturarPedido}
                  className="flex-1 bg-indigo-600 hover:bg-indigo-700 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  💰 Faturar
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Confirmação - Remover Pedido Importado */}
      <AnimatePresence>
        {showConfirmRemovePedidoImportado && pedidoParaRemover && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              className="bg-background-card rounded-lg p-6 max-w-md w-full"
            >
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-orange-500/20 rounded-full flex items-center justify-center">
                  <ShoppingBag size={20} className="text-orange-400" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">Remover Pedido Importado</h3>
                  <p className="text-gray-400 text-sm">Esta ação não pode ser desfeita</p>
                </div>
              </div>

              <p className="text-gray-300 mb-4">
                Tem certeza que deseja remover as informações do pedido importado?
                <br />
                <span className="text-green-400 font-medium">Pedido #{pedidoParaRemover.numero}</span>
                {pedidoParaRemover.cliente && (
                  <>
                    <br />
                    <span className="text-blue-400">Cliente: {pedidoParaRemover.cliente.nome}</span>
                  </>
                )}
              </p>

              {(() => {
                const itensDoCarrinho = carrinho.filter(item => item.pedido_origem_id === pedidoParaRemover.id);
                const totalItens = itensDoCarrinho.reduce((total, item) => total + item.quantidade, 0);

                return itensDoCarrinho.length > 0 && (
                  <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-3 mb-6">
                    <p className="text-yellow-400 text-sm font-medium mb-1">⚠️ Atenção!</p>
                    <p className="text-gray-300 text-sm">
                      Os <span className="text-primary-400 font-medium">{itensDoCarrinho.length} produto(s)</span> deste pedido
                      serão removidos do carrinho ({totalItens} item(s) no total).
                    </p>
                    {carrinho.length > itensDoCarrinho.length && (
                      <p className="text-gray-400 text-xs mt-1">
                        Os demais produtos no carrinho serão mantidos.
                      </p>
                    )}
                  </div>
                );
              })()}

              <div className="flex gap-3">
                <button
                  onClick={() => setShowConfirmRemovePedidoImportado(false)}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={removerPedidoImportado}
                  className="flex-1 bg-orange-600 hover:bg-orange-700 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Remover
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Produtos */}
      <AnimatePresence>
        {showAreaProdutos && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className={`fixed inset-0 z-50 flex items-center justify-center ${
              isFullscreen
                ? 'bg-background-dark p-0'
                : 'bg-black/50 p-4'
            }`}
            onClick={() => setShowAreaProdutos(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className={`bg-background-card flex flex-col ${
                isFullscreen
                  ? 'w-full h-full rounded-none'
                  : 'rounded-lg w-full max-w-6xl h-[90vh]'
              }`}
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <div className="flex items-center justify-between p-4 border-b border-gray-800">
                <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                  <Package size={20} />
                  Produtos
                  {preCarregandoImagens && (
                    <div className="flex items-center gap-2 text-sm text-gray-400">
                      <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-gray-400"></div>
                      <span className="text-xs">Carregando imagens...</span>
                    </div>
                  )}
                  {!preCarregandoImagens && imagensPreCarregadas.size > 0 && (
                    <div className="text-xs text-green-400 bg-green-400/10 px-2 py-1 rounded">
                      ✓ {imagensPreCarregadas.size} imagens em cache
                    </div>
                  )}
                </h3>

                <div className="flex items-center gap-2">
                  {/* Botão para alternar fullscreen */}
                  <button
                    onClick={() => {
                      if (isFullscreen) {
                        exitFullscreen();
                      } else {
                        enterFullscreen();
                      }
                    }}
                    className="w-8 h-8 bg-gray-600/20 hover:bg-gray-500/30 border border-gray-600/20 hover:border-gray-500/40 rounded-full flex items-center justify-center text-gray-400 hover:text-gray-300 transition-all duration-200 group"
                    title={isFullscreen ? "Sair do modo tela cheia" : "Entrar em tela cheia"}
                  >
                    {isFullscreen ? (
                      <Minimize2 size={16} className="group-hover:scale-110 transition-transform" />
                    ) : (
                      <Maximize2 size={16} className="group-hover:scale-110 transition-transform" />
                    )}
                  </button>

                  {/* Botão para fechar */}
                  <button
                    onClick={() => setShowAreaProdutos(false)}
                    className="text-gray-400 hover:text-white transition-colors"
                  >
                    <X size={18} />
                  </button>
                </div>
              </div>

              {/* Conteúdo */}
              <div className="flex-1 p-4 flex flex-col overflow-hidden">
                {/* Barra de Busca */}
                <div className="mb-4">
                  <div className="relative">
                    <input
                      type="text"
                      placeholder="Pesquisar produtos por nome ou código..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      onKeyDown={async (e) => {
                        if (e.key === 'Escape') {
                          setShowAreaProdutos(false);
                        } else if (e.key === 'Enter' && searchTerm.trim()) {
                          // ✅ CORREÇÃO DEFINITIVA: ATIVAR LOADING INSTANTANEAMENTE E PROCESSAR EM BACKGROUND
                          const codigoDigitado = searchTerm.trim();
                          setCodigoBuscando(codigoDigitado);
                          setEnterPressionado(true);
                          setCarregandoNovoItem(true);
                          setSearchTerm(''); // Limpar campo imediatamente

                          // Se há produtos filtrados, processar em background SEM AWAIT
                          if (produtosFiltrados.length > 0) {
                            // ✅ NOVO: Verificar se é o primeiro item para ativar modal especial
                            const isPrimeiroItem = carrinho.length === 0;
                            if (isPrimeiroItem) {
                              setLoadingPrimeiroItem(true);
                            }

                            // ✅ CORREÇÃO: Processar em background sem bloquear a UI
                            (async () => {
                              try {
                                // Processar em background - loading já está ativo
                                await adicionarAoCarrinho(produtosFiltrados[0]);

                                // Aguardar um pouco para mostrar o efeito
                                await new Promise(resolve => setTimeout(resolve, 300));
                              } finally {
                                // Desativar efeito de carregamento
                                setCarregandoNovoItem(false);
                                setCodigoBuscando('');
                                setEnterPressionado(false);

                                // ✅ NOVO: Desativar modal do primeiro item
                                if (isPrimeiroItem) {
                                  setLoadingPrimeiroItem(false);
                                }
                              }
                            })();

                            // ✅ NOVO: Só fechar o modal se não abrir o modal de quantidade
                            if (!pdvConfig?.vendas_itens_multiplicacao) {
                              // Manter o foco no campo para próxima digitação
                              setTimeout(() => {
                                const input = e.target as HTMLInputElement;
                                input.focus();
                              }, 10);
                            }
                          } else {
                            // Produto não encontrado - desativar loading e mostrar modal
                            setCarregandoNovoItem(false);
                            setEnterPressionado(false);
                            setCodigoBuscando('');

                            // Extrair o termo de busca real
                            let termoBusca = codigoDigitado;
                            if (codigoDigitado.includes('*')) {
                              const partes = codigoDigitado.split('*');
                              if (partes.length >= 2) {
                                termoBusca = partes.slice(1).join('*').trim(); // Pega tudo após o primeiro *
                              }
                            }

                            // Mostrar modal de produto não encontrado
                            mostrarProdutoNaoEncontrado(termoBusca);

                            // Manter o foco
                            setTimeout(() => {
                              const input = e.target as HTMLInputElement;
                              input.focus();
                            }, 10);
                          }
                        }
                      }}
                      autoFocus
                      className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-3 pl-10 pr-12 text-white placeholder-gray-300 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                    />
                    <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-300" />

                    {/* ✅ CORRIGIDO: Posicionamento inteligente dos indicadores */}
                    {/* Indicador de quantidade - posição dinâmica */}
                    {searchTerm.includes('*') ? (
                      <div className="absolute right-3 top-1/2 -translate-y-1/2">
                        <div className="bg-primary-500 text-white text-xs px-2 py-1 rounded-full">
                          Qtd: {searchTerm.split('*')[0]}
                        </div>
                      </div>
                    ) : (
                      /* Ícone ESC - só aparece quando não há indicador de quantidade */
                      <div className="absolute right-3 top-1/2 -translate-y-1/2 flex items-center gap-1">
                        <span className="text-xs text-gray-300 bg-gray-700 px-1 py-0.5 rounded">ESC</span>
                      </div>
                    )}
                  </div>
                </div>

                {/* Filtros por Categoria */}
                {grupos.length > 0 && (
                  <div className="mb-4">
                    <div className="flex flex-wrap gap-2">
                      <button
                        onClick={() => setGrupoSelecionado('todos')}
                        className={`px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${
                          grupoSelecionado === 'todos'
                            ? 'bg-primary-500 text-white'
                            : 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50'
                        }`}
                      >
                        Todos
                      </button>
                      {grupos.map(grupo => (
                        <button
                          key={grupo.id}
                          onClick={() => setGrupoSelecionado(grupo.id)}
                          className={`px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${
                            grupoSelecionado === grupo.id
                              ? 'bg-primary-500 text-white'
                              : 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50'
                          }`}
                        >
                          {grupo.nome}
                        </button>
                      ))}
                    </div>
                  </div>
                )}

                {/* Grid de Produtos - Compacto */}
                <div className="flex-1 overflow-y-auto custom-scrollbar">
                  {produtosFiltrados.length === 0 ? (
                    <div className="text-center py-6">
                      <Package size={40} className="mx-auto mb-3 text-gray-500" />
                      <p className="text-gray-400 text-sm">Nenhum produto encontrado</p>
                    </div>
                  ) : (
                    <div className="grid gap-2" style={{ gridTemplateColumns: 'repeat(auto-fill, minmax(140px, 1fr))' }}>
                      {produtosFiltrados.map(produto => (
                        <motion.div
                          key={produto.id}
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                          onClick={async () => {
                            // ✅ CORREÇÃO: Fechar o modal de produtos IMEDIATAMENTE (igual ao comportamento da busca por código)
                            setShowAreaProdutos(false);

                            // ✅ CORREÇÃO: Ativar efeito de carregamento IMEDIATAMENTE
                            setCarregandoNovoItem(true);

                            try {
                              // Aguardar um frame para garantir que o loading apareça
                              await new Promise(resolve => requestAnimationFrame(resolve));

                              // Agora sim chamar a função de adicionar (que vai abrir os modais necessários)
                              await adicionarAoCarrinho(produto);

                              // Aguardar um pouco mais para mostrar o efeito
                              await new Promise(resolve => setTimeout(resolve, 300));
                            } finally {
                              // Desativar efeito de carregamento
                              setCarregandoNovoItem(false);
                            }
                          }}
                          className="bg-gray-800 rounded overflow-hidden border border-gray-700 hover:border-gray-600 transition-colors cursor-pointer flex flex-col"
                        >
                          {/* Imagem do produto - Compacta */}
                          <div
                            className="h-20 bg-gray-900 relative cursor-pointer"
                            onClick={(e) => {
                              e.stopPropagation();
                              abrirGaleria(produto, e);
                            }}
                          >
                            {getFotoPrincipal(produto) ? (
                              <>
                                <img
                                  src={getFotoPrincipal(produto)!.url}
                                  alt={produto.nome}
                                  className="w-full h-full object-cover hover:opacity-90 transition-opacity"
                                />
                                {/* Indicador de imagem em cache */}
                                {imagensPreCarregadas.has(getFotoPrincipal(produto)!.url) && (
                                  <div className="absolute bottom-0.5 right-0.5 w-2 h-2 bg-green-400 rounded-full"
                                       title="Imagem pré-carregada"></div>
                                )}
                              </>
                            ) : (
                              <div className="w-full h-full flex items-center justify-center">
                                <Package size={20} className="text-gray-700" />
                              </div>
                            )}

                            {/* Indicador de múltiplas fotos - Compacto */}
                            {produto.produto_fotos && produto.produto_fotos.length > 1 && (
                              <div className="absolute top-0.5 left-0.5 bg-black/60 text-white text-xs px-1 py-0.5 rounded">
                                {produto.produto_fotos.length}
                              </div>
                            )}

                            {/* Badge de promoção - Compacto */}
                            {produto.promocao && (
                              <div className="absolute top-0.5 right-0.5 bg-red-500 text-white text-xs font-bold px-1 py-0.5 rounded">
                                {produto.tipo_desconto === 'percentual'
                                  ? `-${produto.valor_desconto}%`
                                  : formatCurrency(produto.valor_desconto || 0)}
                              </div>
                            )}
                          </div>

                          {/* Informações do produto - Compactas */}
                          <div className="p-2">
                            <h3 className="text-white text-xs font-medium line-clamp-2 mb-1">{produto.nome}</h3>

                            <div className="mb-1">
                              <p className="text-gray-400 text-xs">Código {produto.codigo}</p>
                            </div>

                            {/* Preço - Compacto */}
                            <div className="mb-1">
                              {produto.promocao ? (
                                <div>
                                  <span className="text-gray-400 line-through text-xs block">
                                    {formatCurrency(produto.preco)}
                                  </span>
                                  <div className="flex items-center gap-1.5">
                                    <span className="text-primary-400 font-bold text-sm">
                                      {formatCurrency(calcularPrecoFinal(produto))}
                                    </span>
                                    {produto.unidade_medida && (
                                      <span className="text-xs px-1.5 py-0.5 rounded-full bg-gray-700 text-gray-300">
                                        {produto.unidade_medida.sigla}
                                      </span>
                                    )}
                                  </div>
                                </div>
                              ) : (
                                <div className="flex items-center gap-1.5">
                                  <span className="text-primary-400 font-bold text-sm">
                                    {formatCurrency(produto.preco)}
                                  </span>
                                  {produto.unidade_medida && (
                                    <span className="text-xs px-1.5 py-0.5 rounded-full bg-gray-700 text-gray-300">
                                      {produto.unidade_medida.sigla}
                                    </span>
                                  )}
                                </div>
                              )}
                            </div>

                            {/* Estoque - Compacto */}
                            <div className="text-xs text-gray-300 mb-0.5">
                              Estoque: {
                                loadingEstoque && Object.keys(produtosEstoque).length === 0 ? (
                                  <span className="inline-flex items-center gap-1">
                                    <div className="w-3 h-3 border border-gray-400 border-t-transparent rounded-full animate-spin"></div>
                                    <span className="text-gray-400">...</span>
                                  </span>
                                ) : (
                                  produtosEstoque[produto.id] !== undefined
                                    ? formatarEstoque(produtosEstoque[produto.id].total, produto)
                                    : produto.estoque_inicial
                                      ? formatarEstoque(produto.estoque_inicial, produto)
                                      : loadingEstoque ? (
                                        <span className="inline-flex items-center gap-1">
                                          <div className="w-3 h-3 border border-gray-400 border-t-transparent rounded-full animate-spin"></div>
                                          <span className="text-gray-400">...</span>
                                        </span>
                                      ) : '0'
                                )
                              }
                            </div>

                            {/* Desconto por quantidade - Compacto */}
                            {produto.desconto_quantidade && produto.quantidade_minima &&
                             ((produto.tipo_desconto_quantidade === 'percentual' && produto.percentual_desconto_quantidade) ||
                              (produto.tipo_desconto_quantidade === 'valor' && produto.valor_desconto_quantidade)) && (
                              <div className="text-xs text-green-400">
                                {produto.quantidade_minima}+ unid:
                                {produto.tipo_desconto_quantidade === 'percentual'
                                  ? ` -${produto.percentual_desconto_quantidade}%`
                                  : ` -${formatCurrency(produto.valor_desconto_quantidade || 0)}`}
                              </div>
                            )}
                          </div>
                        </motion.div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de confirmação para remover pedido importado */}
      {showConfirmRemovePedidoImportado && pedidoParaRemover && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-background-card border border-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center">
                <AlertTriangle size={20} className="text-red-400" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-white">Remover Pedido Importado</h3>
                <p className="text-sm text-gray-400">Esta ação não pode ser desfeita</p>
              </div>
            </div>

            <p className="text-gray-300 mb-6">
              Tem certeza que deseja remover o pedido <span className="text-white font-medium">#{pedidoParaRemover.numero}</span>?
              <br />
              <br />
              <span className="text-yellow-400">⚠️ Isso irá remover:</span>
              <br />
              • Todos os itens deste pedido do carrinho
              <br />
              • As informações do pedido importado
              <br />
              {pedidosImportados.length === 1 && !pdvConfig?.seleciona_clientes && (
                <>
                  • O cliente importado
                  <br />
                  • Os descontos de faturamento
                  <br />
                </>
              )}
            </p>

            <div className="flex gap-3">
              <button
                onClick={() => {
                  setShowConfirmRemovePedidoImportado(false);
                  setPedidoParaRemover(null);
                }}
                className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={removerPedidoImportado}
                className="flex-1 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-lg transition-colors"
              >
                Remover
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal de confirmação para limpeza geral do PDV */}
      {showConfirmLimparTudoPDV && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-background-card border border-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center">
                <AlertTriangle size={20} className="text-red-400" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-white">Cancelar Venda</h3>
                <p className="text-sm text-gray-400">Esta ação irá limpar todos os dados</p>
              </div>
            </div>

            <p className="text-gray-300 mb-6">
              Tem certeza que deseja cancelar a venda e limpar todos os dados do PDV?
              <br />
              <br />
              <span className="text-yellow-400">⚠️ Isso irá remover:</span>
              <br />
              • Todos os itens do carrinho
              <br />
              • Cliente selecionado
              <br />
              • Pedidos importados
              <br />
              • Formas de pagamento configuradas
              <br />
              • Dados da nota fiscal
              <br />
              • Todos os descontos aplicados
              <br />
              <br />
              <span className="text-red-400 font-medium">Esta ação não pode ser desfeita!</span>
            </p>

            <div className="flex gap-3">
              <button
                onClick={() => setShowConfirmLimparTudoPDV(false)}
                className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
              >
                Manter Dados
              </button>
              <button
                onClick={limparTudoPDV}
                className="flex-1 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-lg transition-colors"
              >
                Limpar Tudo
              </button>
            </div>
          </div>
        </div>
      )}
      </motion.div>

      {/* Modal de Processamento da Venda */}
      <AnimatePresence>
        {showProcessandoVenda && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/80 flex items-center justify-center z-50"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card border border-gray-800 rounded-lg p-8 max-w-md w-full mx-4 max-h-[90vh] overflow-hidden flex flex-col"
            >
              {/* Conteúdo com scroll */}
              <div className="flex-1 overflow-y-auto">
                <div className="text-center">
                {/* Ícone baseado no status */}
                <div className={`w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-6 ${
                  statusProcessamento === 'sucesso'
                    ? 'bg-green-500/20'
                    : statusProcessamento === 'erro'
                    ? 'bg-red-500/20'
                    : statusProcessamento === 'aguardando_impressao'
                    ? 'bg-blue-500/20'
                    : 'bg-primary-500/20'
                }`}>
                  {statusProcessamento === 'sucesso' ? (
                    <svg className="w-8 h-8 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                  ) : statusProcessamento === 'erro' ? (
                    <svg className="w-8 h-8 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  ) : statusProcessamento === 'aguardando_impressao' ? (
                    <svg className="w-8 h-8 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
                    </svg>
                  ) : (
                    <div className="w-8 h-8 border-2 border-primary-500 border-t-transparent rounded-full animate-spin"></div>
                  )}
                </div>

                {/* Título */}
                <h3 className={`text-xl font-semibold mb-2 ${
                  statusProcessamento === 'sucesso'
                    ? 'text-green-400'
                    : statusProcessamento === 'erro'
                    ? 'text-red-400'
                    : statusProcessamento === 'aguardando_impressao'
                    ? 'text-blue-400'
                    : 'text-white'
                }`}>
                  {statusProcessamento === 'sucesso'
                    ? 'Sucesso!'
                    : statusProcessamento === 'erro'
                    ? 'Erro na Emissão'
                    : statusProcessamento === 'aguardando_impressao'
                    ? 'Venda Finalizada!'
                    : 'Processando Venda'}
                </h3>

                {/* Número da venda se disponível */}
                {numeroVendaProcessada && (
                  <p className="text-primary-400 font-medium mb-4">
                    #{numeroVendaProcessada}
                  </p>
                )}

                {/* ✅ NOVO: Mostrar número e série da NFC-e quando disponível */}
                {statusProcessamento === 'processando' && (numeroDocumentoReservado || serieDocumentoReservado) && (
                  <div className="bg-purple-500/10 border border-purple-500/30 rounded-lg p-3 mb-4">
                    <p className="text-purple-400 text-sm font-medium mb-1">
                      🧾 NFC-e reservada:
                    </p>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <span className="text-purple-300">Número:</span>
                        <span className="text-white font-medium ml-2">#{numeroDocumentoReservado || 'Carregando...'}</span>
                      </div>
                      <div>
                        <span className="text-purple-300">Série:</span>
                        <span className="text-white font-medium ml-2">#{serieDocumentoReservado || 'Carregando...'}</span>
                      </div>
                    </div>
                  </div>
                )}

                {/* Etapa atual */}
                <div className="bg-gray-800/50 rounded-lg p-4 mb-6 max-h-60 overflow-y-auto">
                  <p className="text-gray-300 text-sm leading-relaxed break-words">
                    {etapaProcessamento}
                  </p>

                  {/* ✅ NOVO: Botão para copiar log de erro */}
                  {statusProcessamento === 'erro' && erroProcessamento && (
                    <div className="mt-4 pt-4 border-t border-gray-700">
                      <div className="flex items-center justify-between gap-3">
                        <span className="text-xs text-gray-400">Log do erro:</span>
                        <button
                          onClick={async () => {
                            try {
                              const logCompleto = `#${numeroVendaProcessada || 'PDV-' + Date.now()}\n\n${erroProcessamento}`;
                              await navigator.clipboard.writeText(logCompleto);
                              toast.success('Log de erro copiado!');
                            } catch (error) {
                              toast.error('Erro ao copiar log');
                            }
                          }}
                          className="flex items-center gap-2 px-3 py-1.5 bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white rounded-lg transition-colors text-xs"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                          </svg>
                          Copiar Log
                        </button>
                      </div>
                    </div>
                  )}
                </div>

                {/* ✅ NOVO: Instrução específica para erro na NFC-e */}
                {statusProcessamento === 'erro' && (
                  <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4 mb-6">
                    <div className="flex items-start gap-3">
                      <div className="w-5 h-5 bg-blue-500/20 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                        <svg className="w-3 h-3 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      </div>
                      <div className="text-left">
                        <h4 className="text-blue-400 font-medium text-sm mb-2">Situação da Venda:</h4>
                        <div className="space-y-2 text-xs text-blue-300">
                          <p>✅ <strong>Venda local finalizada com sucesso</strong></p>
                          <p>❌ <strong>Emissão fiscal (NFC-e) falhou</strong></p>
                        </div>
                        <div className="mt-3 pt-3 border-t border-blue-500/20">
                          <p className="text-xs text-blue-300 leading-relaxed">
                            <strong>Próximos passos:</strong> Acesse a listagem de <strong>Movimentos</strong>,
                            localize esta venda (marcada como "Pendente"), clique em <strong>"Editar NFC-e"</strong>
                            para analisar e corrigir o problema fiscal, depois retransmita para o SEFAZ.
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Barra de progresso animada - apenas durante processamento */}
                {statusProcessamento === 'processando' && (
                  <div className="w-full bg-gray-700 rounded-full h-2 mb-4">
                    <div className="bg-primary-500 h-2 rounded-full animate-pulse" style={{ width: '100%' }}></div>
                  </div>
                )}

                {/* Aviso importante - apenas durante processamento */}
                {statusProcessamento === 'processando' && (
                  <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-3">
                    <p className="text-yellow-300 text-xs">
                      ⚠️ Não feche esta janela durante o processamento
                    </p>
                  </div>
                )}

                {/* Aviso para impressão */}
                {statusProcessamento === 'aguardando_impressao' && (
                  <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-3">
                    <p className="text-blue-300 text-xs">
                      🖨️ Escolha se deseja imprimir o cupom ou finalizar sem impressão
                    </p>
                  </div>
                )}
                </div>
              </div>

              {/* Área de botões fixa no final */}
              <div className="flex-shrink-0 pt-4 border-t border-gray-800">
                {/* Botões para impressão */}
                {statusProcessamento === 'aguardando_impressao' && (
                  <div className="space-y-3">
                    {/* Botão Imprimir */}
                    <button
                      onClick={executarImpressao}
                      className="w-full bg-blue-500 hover:bg-blue-600 text-white py-3 px-4 rounded-lg transition-colors font-medium flex items-center justify-center gap-2"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
                      </svg>
                      Imprimir Cupom ({obterTextoTipoImpressao()})
                    </button>

                    {/* Botão Finalizar sem Impressão */}
                    <button
                      onClick={finalizarSemImpressao}
                      className="w-full bg-gray-600 hover:bg-gray-700 text-white py-3 px-4 rounded-lg transition-colors font-medium"
                    >
                      Finalizar sem Impressão
                    </button>
                  </div>
                )}

                {/* Botões para erro */}
                {statusProcessamento === 'erro' && (
                  <div className="space-y-3">
                    {/* Botão Fechar */}
                    <button
                      onClick={() => {
                        // ✅ CORREÇÃO: Limpar completamente todos os estados quando há erro
                        setShowProcessandoVenda(false);
                        setStatusProcessamento('processando');
                        setErroProcessamento('');

                        // ✅ GARANTIR: Fechar tela de finalização para mostrar menu PDV
                        setShowFinalizacaoFinal(false);

                        // ✅ GARANTIR: Limpar venda em andamento se houver
                        if (vendaEmAndamento) {
                          setVendaEmAndamento(null);
                          setIsEditingVenda(false);
                        }

                        // ✅ GARANTIR: Limpar localStorage para evitar estados inconsistentes
                        clearPDVState();
                      }}
                      className="w-full bg-red-500 hover:bg-red-600 text-white py-3 px-4 rounded-lg transition-colors font-medium"
                    >
                      Fechar
                    </button>
                  </div>
                )}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Opções Adicionais */}
      {produtoParaAdicionais && (
        <OpcoesAdicionaisModal
          isOpen={showOpcoesAdicionaisModal}
          onClose={() => {
            setShowOpcoesAdicionaisModal(false);
            setProdutoParaAdicionais(null);
            setItemCarrinhoParaAdicionais(null);
          }}
          produto={produtoParaAdicionais}
          onConfirm={confirmarOpcoesAdicionais}
          // ✅ NOVO: Passar informações da tabela de preços
          trabalhaComTabelaPrecos={trabalhaComTabelaPrecos}
          tabelaPrecoSelecionada={tabelaPrecoSelecionada}
        />
      )}

      {/* ✅ ADICIONADO: Modal de Adicionais para Produtos Novos */}
      {itemParaAdicionais && (
        <OpcoesAdicionaisModal
          isOpen={showAdicionaisModal}
          onClose={() => {
            setShowAdicionaisModal(false);
            setItemParaAdicionais(null);
          }}
          produto={itemParaAdicionais.produto}
          onConfirm={(adicionaisSelecionados) => {
            // Converter adicionais para o formato do carrinho
            const adicionaisFormatados = adicionaisSelecionados.map(item => ({
              id: item.item.id,
              nome: item.item.nome,
              preco: item.item.preco,
              quantidade: item.quantidade
            }));

            // Calcular valor total dos adicionais
            const valorAdicionais = adicionaisFormatados.reduce((total, adicional) =>
              total + (adicional.preco * adicional.quantidade), 0
            );

            // ✅ CORRIGIDO: Calcular novo subtotal considerando promoções E desconto por quantidade
            const precoUnitario = calcularPrecoComDescontoQuantidade(itemParaAdicionais.produto, itemParaAdicionais.quantidade);
            const novoSubtotal = (precoUnitario * itemParaAdicionais.quantidade) + valorAdicionais;

            // Adicionar produto ao carrinho com adicionais e subtotal correto
            const itemComAdicionais = {
              ...itemParaAdicionais,
              adicionais: adicionaisFormatados,
              subtotal: novoSubtotal
            };

            setCarrinho(prev => [...prev, itemComAdicionais]);
            setShowAdicionaisModal(false);
            setItemParaAdicionais(null);

            // Tocar som de sucesso se habilitado
            if (pdvConfig?.som_adicionar_produto) {
              playSuccessSound();
            }

            // ✅ REMOVIDO: Toasts removidos para não confundir com outros processos
            // const totalAdicionais = adicionaisSelecionados.length;
            // if (totalAdicionais > 0) {
            //   toast.success(`Produto adicionado com ${totalAdicionais} ${totalAdicionais === 1 ? 'adicional' : 'adicionais'}!`);
            // } else {
            //   toast.success('Produto adicionado ao carrinho!');
            // }
          }}
          // ✅ NOVO: Passar informações da tabela de preços
          trabalhaComTabelaPrecos={trabalhaComTabelaPrecos}
          tabelaPrecoSelecionada={tabelaPrecoSelecionada}
        />
      )}

      {/* Modal de Observação Adicional */}
      {showObservacaoModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-background-card border border-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center">
                <MessageSquare size={20} className="text-blue-400" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-white">Observação Adicional</h3>
                <p className="text-sm text-gray-400">Adicione uma observação para este produto</p>
              </div>
            </div>

            <div className="mb-6">
              <label className="block text-sm font-medium text-white mb-2">
                Observação
              </label>
              <textarea
                value={observacaoTexto}
                onChange={(e) => setObservacaoTexto(e.target.value)}
                placeholder="Digite uma observação para este produto..."
                className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500/20 resize-none"
                rows={3}
                autoFocus
              />
              <p className="text-gray-400 text-xs mt-1">
                Esta observação aparecerá junto com o produto no carrinho
              </p>
            </div>

            <div className="flex gap-3">
              <button
                onClick={() => {
                  setShowObservacaoModal(false);
                  setItemParaObservacao(null);
                  setObservacaoTexto('');
                }}
                className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={salvarObservacao}
                className="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-lg transition-colors"
              >
                Salvar
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Produto Não Encontrado */}
      {showProdutoNaoEncontrado && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-background-card border border-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-orange-500/20 rounded-full flex items-center justify-center">
                <Package size={20} className="text-orange-400" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-white">Produto Não Encontrado</h3>
                <p className="text-sm text-gray-400">O item digitado não existe no sistema</p>
              </div>
            </div>

            <div className="mb-6">
              <p className="text-gray-300 mb-3">
                O produto <span className="text-white font-medium bg-gray-800 px-2 py-1 rounded">"{produtoNaoEncontradoTermo}"</span> não foi encontrado.
              </p>
              <p className="text-gray-400 text-sm">
                Verifique se o código ou nome está correto e tente novamente.
              </p>
            </div>

            <div className="flex gap-3">
              <button
                onClick={() => setShowProdutoNaoEncontrado(false)}
                className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
              >
                Fechar
              </button>
              <button
                onClick={() => {
                  setShowProdutoNaoEncontrado(false);
                  setShowAreaProdutos(true);
                }}
                className="flex-1 bg-primary-500 hover:bg-primary-600 text-white py-2 px-4 rounded-lg transition-colors"
              >
                Ver Produtos
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ✅ NOVO: Modal de Edição da NFC-e */}
      <AnimatePresence>
        {showEditarNfceModal && vendaParaEditarNfce && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => setShowEditarNfceModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 w-full max-w-6xl mx-4 max-h-[90vh] flex flex-col"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Cabeçalho */}
              <div className="flex-shrink-0 p-6 border-b border-gray-800">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-xl font-semibold text-white">
                      Editar NFC-e - Venda #{vendaParaEditarNfce.numero_venda}
                    </h3>

                    {/* ✅ NOVO: Campos para editar número e série da NFC-e */}
                    <div className="mt-3 p-3 bg-blue-500/10 border border-blue-500/30 rounded-lg">
                      <div className="flex items-center gap-2 mb-2">
                        <p className="text-blue-400 text-sm font-medium">Dados da NFC-e:</p>
                        {/* ✅ NOVO: Tag de homologação no modal de edição NFC-e */}
                        {vendaParaEditarNfce?.ambiente === 'homologacao' && (
                          <span className="px-2 py-1 bg-orange-500/20 text-orange-400 text-xs font-medium rounded-full border border-orange-500/30">
                            HOMOLOG.
                          </span>
                        )}
                      </div>
                      <div className="grid grid-cols-2 gap-4">
                        {/* Campo Número */}
                        <div>
                          <label className="block text-blue-300 text-xs font-medium mb-1">Número:</label>
                          <div className="flex items-center gap-2">
                            {editandoNumeroNfce ? (
                              <div className="flex flex-col gap-2">
                                <div className="flex items-center gap-2">
                                  <input
                                    type="number"
                                    value={numeroNfceEditavel}
                                    onChange={(e) => {
                                      const valor = e.target.value;
                                      setNumeroNfceEditavel(valor);

                                      // ✅ VALIDAÇÃO EM TEMPO REAL
                                      if (valor && valor.trim() !== '') {
                                        // Debounce para evitar muitas consultas
                                        clearTimeout(window.validationTimeout);
                                        window.validationTimeout = setTimeout(() => {
                                          validarNumeroNfceTempoReal(valor);
                                        }, 500);
                                      } else {
                                        setNumeroValido(null);
                                        setMensagemValidacao('');
                                      }
                                    }}
                                    className={`w-24 bg-gray-700 border rounded px-3 py-1 text-white text-sm ${
                                      numeroValido === true ? 'border-green-500' :
                                      numeroValido === false ? 'border-red-500' :
                                      'border-gray-600'
                                    }`}
                                    placeholder="Número"
                                    min="1"
                                  />
                                  {validandoNumero && (
                                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-400"></div>
                                  )}
                                  {numeroValido === true && (
                                    <svg className="w-4 h-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                    </svg>
                                  )}
                                  {numeroValido === false && (
                                    <svg className="w-4 h-4 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                  )}
                                </div>
                                {/* Mensagem de validação */}
                                {mensagemValidacao && (
                                  <div className={`text-xs px-2 py-1 rounded ${
                                    numeroValido === true ? 'text-green-400 bg-green-500/10' :
                                    'text-red-400 bg-red-500/10'
                                  }`}>
                                    {mensagemValidacao}
                                  </div>
                                )}
                                <div className="flex items-center gap-2">
                                  <button
                                  onClick={async () => {
                                    // ✅ VALIDAÇÃO: Só permitir salvar se número for válido
                                    if (numeroValido !== true) {
                                      toast.error('Número inválido ou já em uso!');
                                      return;
                                    }

                                    try {
                                      const novoNumero = parseInt(numeroNfceEditavel) || vendaParaEditarNfce.numero_documento;

                                      // ✅ CORREÇÃO CRÍTICA: Salvar no banco de dados IMEDIATAMENTE
                                      console.log('💾 SALVANDO: Atualizando número no banco para:', novoNumero);
                                      const { error: updateError } = await supabase
                                        .from('pdv')
                                        .update({
                                          numero_documento: novoNumero
                                        })
                                        .eq('id', vendaParaEditarNfce.id);

                                      if (updateError) {
                                        throw new Error(`Erro ao salvar número: ${updateError.message}`);
                                      }

                                      // Salvar o número editado no estado do modal
                                      setVendaParaEditarNfce(prev => ({
                                        ...prev,
                                        numero_documento: novoNumero
                                      }));

                                      // ✅ NOVO: Atualizar também o estado da lista de vendas em tempo real
                                      setVendas(prev => prev.map(venda =>
                                        venda.id === vendaParaEditarNfce.id
                                          ? { ...venda, numero_documento: novoNumero }
                                          : venda
                                      ));

                                      // Limpar estados de validação
                                      setEditandoNumeroNfce(false);
                                      setNumeroValido(null);
                                      setMensagemValidacao('');

                                      // Mostrar feedback visual
                                      toast.success(`✅ Número da NFC-e salvo no banco: #${novoNumero}`);
                                      console.log('✅ SALVANDO: Número atualizado com sucesso no banco:', novoNumero);

                                    } catch (error: any) {
                                      console.error('❌ ERRO ao salvar número:', error);
                                      toast.error(`Erro ao salvar número: ${error.message}`);
                                    }
                                  }}
                                  disabled={numeroValido !== true}
                                  className={`p-1 ${
                                    numeroValido === true
                                      ? 'text-green-400 hover:text-green-300'
                                      : 'text-gray-500 cursor-not-allowed'
                                  }`}
                                  title={numeroValido === true ? "Salvar" : "Número inválido"}
                                >
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                  </svg>
                                </button>
                                <button
                                  onClick={() => {
                                    setEditandoNumeroNfce(false);
                                    setNumeroNfceEditavel(vendaParaEditarNfce.numero_documento?.toString() || '');
                                    // ✅ LIMPAR estados de validação
                                    setNumeroValido(null);
                                    setMensagemValidacao('');
                                    setValidandoNumero(false);
                                  }}
                                  className="text-red-400 hover:text-red-300 p-1"
                                  title="Cancelar"
                                >
                                  <X size={16} />
                                </button>
                                </div>
                              </div>
                            ) : (
                              <div className="flex items-center gap-2">
                                <span className="text-blue-300 font-medium">
                                  #{vendaParaEditarNfce.numero_documento || 'Não definido'}
                                </span>
                                <button
                                  onClick={() => {
                                    setEditandoNumeroNfce(true);
                                    setNumeroNfceEditavel(vendaParaEditarNfce.numero_documento?.toString() || '');
                                    // ✅ LIMPAR estados de validação ao iniciar edição
                                    setNumeroValido(null);
                                    setMensagemValidacao('');
                                    setValidandoNumero(false);
                                  }}
                                  className="text-gray-400 hover:text-white p-1"
                                  title="Editar número"
                                >
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                  </svg>
                                </button>
                              </div>
                            )}
                          </div>
                        </div>

                        {/* Campo Série */}
                        <div>
                          <label className="block text-blue-300 text-xs font-medium mb-1">Série:</label>
                          <div className="flex items-center gap-2">
                            <span className="text-blue-300 font-medium">
                              #{serieNfce}
                            </span>
                            <span className="text-gray-400 text-xs">(série do usuário)</span>
                          </div>
                        </div>
                      </div>
                      <p className="text-blue-300 text-xs mt-2">
                        ⚠️ Altere o número apenas em caso de duplicação ou conflito de numeração
                      </p>
                    </div>

                    <div className="mt-3 p-3 bg-red-500/10 border border-red-500/30 rounded-lg">
                      <p className="text-red-400 text-sm font-medium">Erro Fiscal:</p>
                      <p className="text-red-300 text-sm mt-1">{vendaParaEditarNfce.erro_fiscal}</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Conteúdo */}
              <div className="flex-1 overflow-y-auto custom-scrollbar p-6">
                {loadingItensNfce ? (
                  <div className="flex items-center justify-center py-12">
                    <div className="text-center">
                      <div className="w-8 h-8 border-2 border-primary-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
                      <p className="text-gray-400">Carregando itens...</p>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div className="bg-gray-800/30 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-4">
                        <h4 className="text-lg font-medium text-white">Itens da Venda</h4>
                        <button
                          onClick={handleAtualizarDadosProdutos}
                          className="flex items-center gap-2 px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors"
                          title="Atualizar dados fiscais dos produtos com informações do cadastro"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/>
                            <path d="M21 3v5h-5"/>
                            <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/>
                            <path d="M3 21v-5h5"/>
                          </svg>
                          Atualizar dados dos produtos
                        </button>
                      </div>
                      <p className="text-gray-400 text-sm mb-4">
                        Revise e corrija os dados fiscais dos produtos. Clique no ícone de lápis para editar os campos CFOP, NCM, CEST, Margem ST, Alíquota, CST ou CSOSN.
                      </p>

                      <div className="overflow-x-auto">
                        <table className="w-full">
                          <thead>
                            <tr className="border-b border-gray-700">
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Item</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Código</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Cód. Barras</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Nome</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Unidade</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Preço</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">NCM</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">CEST</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Margem</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">Alíquota</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">CFOP</th>
                              <th className="text-left py-3 px-2 text-gray-400 font-medium text-sm">
                                {itensNfceEdicao[0]?.regime_tributario === 1 ? 'CSOSN' : 'CST'}
                              </th>
                            </tr>
                          </thead>
                          <tbody>
                            {itensNfceEdicao.map((item, index) => (
                              <tr key={item.id} className="border-b border-gray-800/50">
                                <td className="py-3 px-2 text-white font-medium">{item.sequencia}</td>
                                <td className="py-3 px-2 text-gray-300">{item.produto?.codigo || item.codigo_produto}</td>
                                <td className="py-3 px-2 text-gray-300">{item.produto?.codigo_barras || '-'}</td>
                                <td className="py-3 px-2 text-white">{item.nome_produto}</td>
                                <td className="py-3 px-2 text-gray-300">
                                  <div className="flex items-center gap-2">
                                    <span>
                                      {item.unidade || item.produto?.unidade_medida?.sigla || (
                                        <span className="text-red-400 font-medium">SEM UNIDADE</span>
                                      )}
                                    </span>
                                    <button
                                      onClick={() => {
                                        setItemParaEditarUnidade(item);
                                        setShowSeletorUnidadeModal(true);
                                      }}
                                      className="text-blue-400 hover:text-blue-300 transition-colors"
                                      title="Selecionar unidade de medida"
                                    >
                                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                      </svg>
                                    </button>
                                  </div>
                                </td>
                                <td className="py-3 px-2 text-white">{formatCurrency(item.valor_unitario)}</td>

                                {/* NCM */}
                                <td className="py-3 px-2">
                                  <div className="flex items-center gap-2">
                                    {item.editando_ncm ? (
                                      <div className="flex items-center gap-1">
                                        <input
                                          type="text"
                                          value={item.ncm_editavel}
                                          onChange={(e) => {
                                            const novoValor = e.target.value.replace(/\D/g, ''); // Só números
                                            setItensNfceEdicao(prev => prev.map((it, idx) =>
                                              idx === index ? { ...it, ncm_editavel: novoValor } : it
                                            ));
                                          }}
                                          className="w-20 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                          maxLength={8}
                                          placeholder="00000000"
                                        />
                                        <button
                                          onClick={() => salvarEdicaoCampo(index, 'ncm', item.ncm_editavel)}
                                          className="text-green-400 hover:text-green-300"
                                        >
                                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                          </svg>
                                        </button>
                                        <button
                                          onClick={() => cancelarEdicaoCampo(index, 'ncm')}
                                          className="text-red-400 hover:text-red-300"
                                        >
                                          <X size={16} />
                                        </button>
                                      </div>
                                    ) : (
                                      <div className="flex items-center gap-2">
                                        <span className="text-white font-mono text-sm">{item.ncm_editavel || '00000000'}</span>
                                        <button
                                          onClick={() => habilitarEdicaoCampo(index, 'ncm')}
                                          className="text-gray-400 hover:text-white"
                                        >
                                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                          </svg>
                                        </button>
                                      </div>
                                    )}
                                  </div>
                                </td>

                                {/* CEST */}
                                <td className="py-3 px-2">
                                  <div className="flex items-center gap-2">
                                    {item.editando_cest ? (
                                      <div className="flex items-center gap-1">
                                        <input
                                          type="text"
                                          value={item.cest_editavel}
                                          onChange={(e) => {
                                            const novoValor = e.target.value.replace(/\D/g, ''); // Só números
                                            setItensNfceEdicao(prev => prev.map((it, idx) =>
                                              idx === index ? { ...it, cest_editavel: novoValor } : it
                                            ));
                                          }}
                                          className="w-20 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                          maxLength={7}
                                          placeholder="0000000"
                                        />
                                        <button
                                          onClick={() => salvarEdicaoCampo(index, 'cest', item.cest_editavel)}
                                          className="text-green-400 hover:text-green-300"
                                        >
                                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                          </svg>
                                        </button>
                                        <button
                                          onClick={() => cancelarEdicaoCampo(index, 'cest')}
                                          className="text-red-400 hover:text-red-300"
                                        >
                                          <X size={16} />
                                        </button>
                                      </div>
                                    ) : (
                                      <div className="flex items-center gap-2">
                                        <span className="text-white font-mono text-sm">{item.cest_editavel || '-'}</span>
                                        <button
                                          onClick={() => habilitarEdicaoCampo(index, 'cest')}
                                          className="text-gray-400 hover:text-white"
                                        >
                                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                          </svg>
                                        </button>
                                      </div>
                                    )}
                                  </div>
                                </td>

                                {/* Margem ST */}
                                <td className="py-3 px-2">
                                  <div className="flex items-center gap-2">
                                    {item.editando_margem_st ? (
                                      <div className="flex items-center gap-1">
                                        <input
                                          type="text"
                                          value={item.margem_st_editavel}
                                          onChange={(e) => {
                                            const novoValor = e.target.value.replace(/[^\d,]/g, ''); // Só números e vírgula
                                            setItensNfceEdicao(prev => prev.map((it, idx) =>
                                              idx === index ? { ...it, margem_st_editavel: novoValor } : it
                                            ));
                                          }}
                                          className="w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                          maxLength={5}
                                          placeholder="0"
                                        />
                                        <span className="text-gray-400 text-sm">%</span>
                                        <button
                                          onClick={() => salvarEdicaoCampo(index, 'margem_st', item.margem_st_editavel)}
                                          className="text-green-400 hover:text-green-300"
                                        >
                                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                          </svg>
                                        </button>
                                        <button
                                          onClick={() => cancelarEdicaoCampo(index, 'margem_st')}
                                          className="text-red-400 hover:text-red-300"
                                        >
                                          <X size={16} />
                                        </button>
                                      </div>
                                    ) : (
                                      <div className="flex items-center gap-2">
                                        <span className="text-white text-sm">{item.margem_st_editavel || '0'}%</span>
                                        <button
                                          onClick={() => habilitarEdicaoCampo(index, 'margem_st')}
                                          className="text-gray-400 hover:text-white"
                                        >
                                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                          </svg>
                                        </button>
                                      </div>
                                    )}
                                  </div>
                                </td>

                                {/* Alíquota ICMS */}
                                <td className="py-3 px-2">
                                  <div className="flex items-center gap-2">
                                    {item.editando_aliquota_icms ? (
                                      <div className="flex items-center gap-1">
                                        <input
                                          type="text"
                                          value={item.aliquota_icms_editavel}
                                          onChange={(e) => {
                                            const novoValor = e.target.value.replace(/[^\d,]/g, ''); // Só números e vírgula
                                            setItensNfceEdicao(prev => prev.map((it, idx) =>
                                              idx === index ? { ...it, aliquota_icms_editavel: novoValor } : it
                                            ));
                                          }}
                                          className="w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                          maxLength={5}
                                          placeholder="0"
                                        />
                                        <span className="text-gray-400 text-sm">%</span>
                                        <button
                                          onClick={() => salvarEdicaoCampo(index, 'aliquota_icms', item.aliquota_icms_editavel)}
                                          className="text-green-400 hover:text-green-300"
                                        >
                                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                          </svg>
                                        </button>
                                        <button
                                          onClick={() => cancelarEdicaoCampo(index, 'aliquota_icms')}
                                          className="text-red-400 hover:text-red-300"
                                        >
                                          <X size={16} />
                                        </button>
                                      </div>
                                    ) : (
                                      <div className="flex items-center gap-2">
                                        <span className="text-white text-sm">{item.aliquota_icms_editavel || '0'}%</span>
                                        <button
                                          onClick={() => habilitarEdicaoCampo(index, 'aliquota_icms')}
                                          className="text-gray-400 hover:text-white"
                                        >
                                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                          </svg>
                                        </button>
                                      </div>
                                    )}
                                  </div>
                                </td>

                                {/* CFOP */}
                                <td className="py-3 px-2">
                                  <div className="flex items-center gap-2">
                                    {item.editando_cfop ? (
                                      <div className="flex items-center gap-1">
                                        <input
                                          type="text"
                                          value={item.cfop_editavel}
                                          onChange={(e) => {
                                            const novoValor = e.target.value;
                                            setItensNfceEdicao(prev => prev.map((it, idx) =>
                                              idx === index ? { ...it, cfop_editavel: novoValor } : it
                                            ));
                                          }}
                                          className="w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                          maxLength={4}
                                        />
                                        <button
                                          onClick={() => salvarEdicaoCampo(index, 'cfop', item.cfop_editavel)}
                                          className="text-green-400 hover:text-green-300"
                                        >
                                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                          </svg>
                                        </button>
                                        <button
                                          onClick={() => cancelarEdicaoCampo(index, 'cfop')}
                                          className="text-red-400 hover:text-red-300"
                                        >
                                          <X size={16} />
                                        </button>
                                      </div>
                                    ) : (
                                      <div className="flex items-center gap-2">
                                        <span className="text-white">{item.cfop_editavel || '-'}</span>
                                        <button
                                          onClick={() => habilitarEdicaoCampo(index, 'cfop')}
                                          className="text-gray-400 hover:text-white"
                                        >
                                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                          </svg>
                                        </button>
                                      </div>
                                    )}
                                  </div>
                                </td>

                                {/* CST/CSOSN */}
                                <td className="py-3 px-2">
                                  <div className="flex items-center gap-2">
                                    {item.regime_tributario === 1 ? (
                                      // CSOSN para Simples Nacional
                                      item.editando_csosn ? (
                                        <div className="flex items-center gap-1">
                                          <input
                                            type="text"
                                            value={item.csosn_editavel}
                                            onChange={(e) => {
                                              const novoValor = e.target.value;
                                              setItensNfceEdicao(prev => prev.map((it, idx) =>
                                                idx === index ? { ...it, csosn_editavel: novoValor } : it
                                              ));
                                            }}
                                            className="w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                            maxLength={3}
                                          />
                                          <button
                                            onClick={() => salvarEdicaoCampo(index, 'csosn', item.csosn_editavel)}
                                            className="text-green-400 hover:text-green-300"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                            </svg>
                                          </button>
                                          <button
                                            onClick={() => cancelarEdicaoCampo(index, 'csosn')}
                                            className="text-red-400 hover:text-red-300"
                                          >
                                            <X size={16} />
                                          </button>
                                        </div>
                                      ) : (
                                        <div className="flex items-center gap-2">
                                          <span className="text-white">{item.csosn_editavel || '-'}</span>
                                          <button
                                            onClick={() => habilitarEdicaoCampo(index, 'csosn')}
                                            className="text-gray-400 hover:text-white"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                            </svg>
                                          </button>
                                        </div>
                                      )
                                    ) : (
                                      // CST para Lucro Real/Presumido
                                      item.editando_cst ? (
                                        <div className="flex items-center gap-1">
                                          <input
                                            type="text"
                                            value={item.cst_editavel}
                                            onChange={(e) => {
                                              const novoValor = e.target.value;
                                              setItensNfceEdicao(prev => prev.map((it, idx) =>
                                                idx === index ? { ...it, cst_editavel: novoValor } : it
                                              ));
                                            }}
                                            className="w-16 bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm"
                                            maxLength={3}
                                          />
                                          <button
                                            onClick={() => salvarEdicaoCampo(index, 'cst', item.cst_editavel)}
                                            className="text-green-400 hover:text-green-300"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                            </svg>
                                          </button>
                                          <button
                                            onClick={() => cancelarEdicaoCampo(index, 'cst')}
                                            className="text-red-400 hover:text-red-300"
                                          >
                                            <X size={16} />
                                          </button>
                                        </div>
                                      ) : (
                                        <div className="flex items-center gap-2">
                                          <span className="text-white">{item.cst_editavel || '-'}</span>
                                          <button
                                            onClick={() => habilitarEdicaoCampo(index, 'cst')}
                                            className="text-gray-400 hover:text-white"
                                          >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                            </svg>
                                          </button>
                                        </div>
                                      )
                                    )}
                                  </div>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* Footer */}
              <div className="flex-shrink-0 p-6 border-t border-gray-800">
                <div className="flex gap-3 justify-end">
                  <button
                    onClick={() => setShowEditarNfceModal(false)}
                    className="px-6 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors"
                  >
                    Fechar
                  </button>
                  <button
                    onClick={reprocessarNfce}
                    disabled={reprocessandoNfce || loadingItensNfce}
                    className="px-6 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors flex items-center gap-2"
                  >
                    {reprocessandoNfce ? (
                      <>
                        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        Reprocessando...
                      </>
                    ) : (
                      <>
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                        </svg>
                        Reprocessar Envio
                      </>
                    )}
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Seleção de Unidade de Medida */}
      <AnimatePresence>
        {showSeletorUnidadeModal && itemParaEditarUnidade && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"
            onClick={() => {
              setShowSeletorUnidadeModal(false);
              setItemParaEditarUnidade(null);
            }}
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              className="bg-background-card rounded-lg p-6 max-w-md w-full max-h-[80vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center">
                  <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">Selecionar Unidade de Medida</h3>
                  <p className="text-gray-400 text-sm">
                    Produto: {itemParaEditarUnidade.nome_produto}
                  </p>
                </div>
              </div>

              {loadingUnidades ? (
                <div className="flex items-center justify-center py-8">
                  <div className="w-6 h-6 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                  <span className="ml-2 text-gray-400">Carregando unidades...</span>
                </div>
              ) : (
                <div className="space-y-2 max-h-60 overflow-y-auto">
                  {unidadesMedida.length === 0 ? (
                    <p className="text-gray-400 text-center py-4">
                      Nenhuma unidade de medida cadastrada
                    </p>
                  ) : (
                    unidadesMedida.map((unidade) => (
                      <button
                        key={unidade.id}
                        onClick={() => atualizarUnidadeProduto(unidade)}
                        className="w-full text-left p-3 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg transition-colors border border-gray-600/50 hover:border-blue-500/50"
                      >
                        <div className="flex items-center justify-between">
                          <div>
                            <span className="text-white font-medium">{unidade.sigla}</span>
                            <span className="text-gray-400 ml-2">- {unidade.nome}</span>
                          </div>
                          <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </button>
                    ))
                  )}
                </div>
              )}

              <div className="flex gap-3 mt-6">
                <button
                  onClick={() => {
                    setShowSeletorUnidadeModal(false);
                    setItemParaEditarUnidade(null);
                  }}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Cadastro Rápido de Cliente */}
      <AnimatePresence>
        {showCadastroClienteModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => cancelarCadastroCliente()}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 w-full max-w-4xl mx-4 h-[90vh] flex flex-col"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <div className="flex items-center justify-between p-6 border-b border-gray-800">
                <h3 className="text-lg font-semibold text-white">
                  {clienteParaEdicao ? 'Editar Cliente' : 'Cadastrar Novo Cliente'}
                </h3>
                <button
                  onClick={cancelarCadastroCliente}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              {/* Conteúdo com scroll */}
              <div className="flex-1 overflow-y-auto custom-scrollbar p-6">
                <div className="space-y-6">
                  {/* Nome */}
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-2">
                      Nome <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      value={cadastroClienteData.nome}
                      onChange={(e) => setCadastroClienteData({
                        ...cadastroClienteData,
                        nome: e.target.value
                      })}
                      className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-3 px-4 text-white placeholder-gray-400 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                      placeholder="Digite o nome do cliente"
                      autoFocus
                    />
                  </div>

                  {/* Telefones */}
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-2">
                      Telefones <span className="text-red-500">*</span>
                    </label>

                    {/* Lista de telefones adicionados */}
                    {cadastroClienteData.telefones.length > 0 && (
                      <div className="space-y-2 mb-4">
                        {cadastroClienteData.telefones.map((telefone, index) => (
                          <div key={index} className="flex items-center justify-between bg-gray-800/30 p-3 rounded-lg">
                            <div className="flex items-center gap-3">
                              <Phone size={16} className="text-gray-400" />
                              <span className="text-white">{telefone.numero}</span>
                              <span className="text-xs text-gray-400 bg-gray-700 px-2 py-1 rounded">
                                {telefone.tipo}
                              </span>
                              {telefone.whatsapp && (
                                <span className="text-xs text-green-400 bg-green-500/20 px-2 py-1 rounded">
                                  WhatsApp
                                </span>
                              )}
                            </div>
                            <button
                              onClick={() => removerTelefoneCliente(index)}
                              className="text-red-400 hover:text-red-300 transition-colors"
                            >
                              <Trash2 size={16} />
                            </button>
                          </div>
                        ))}
                      </div>
                    )}

                    {/* Adicionar novo telefone */}
                    <div className="space-y-3 bg-gray-800/20 p-4 rounded-lg">
                      <div className="text-sm font-medium text-gray-300">Adicionar telefone</div>

                      {/* Tipo de telefone */}
                      <div className="flex gap-4">
                        <label className="flex items-center gap-2 text-sm text-gray-300">
                          <input
                            type="radio"
                            name="tipoTelefone"
                            checked={novoTelefoneCliente.tipo === 'Celular'}
                            onChange={() => setNovoTelefoneCliente({
                              ...novoTelefoneCliente,
                              tipo: 'Celular'
                            })}
                            className="text-primary-500"
                          />
                          Celular
                        </label>
                        <label className="flex items-center gap-2 text-sm text-gray-300">
                          <input
                            type="radio"
                            name="tipoTelefone"
                            checked={novoTelefoneCliente.tipo === 'Fixo'}
                            onChange={() => setNovoTelefoneCliente({
                              ...novoTelefoneCliente,
                              tipo: 'Fixo'
                            })}
                            className="text-primary-500"
                          />
                          Fixo
                        </label>
                      </div>

                      {/* WhatsApp */}
                      <label className="flex items-center gap-2 text-sm text-gray-300">
                        <input
                          type="checkbox"
                          checked={novoTelefoneCliente.whatsapp}
                          onChange={(e) => setNovoTelefoneCliente({
                            ...novoTelefoneCliente,
                            whatsapp: e.target.checked
                          })}
                          className="text-primary-500"
                        />
                        Este número tem WhatsApp
                      </label>

                      {/* Campo de telefone */}
                      <div className="flex gap-2">
                        <div className="relative flex-1">
                          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <Phone size={18} className="text-gray-500" />
                          </div>
                          <input
                            type="text"
                            value={novoTelefoneCliente.numero}
                            onChange={handleNovoTelefoneClienteChange}
                            className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                            placeholder={novoTelefoneCliente.tipo === 'Celular' ? "(00) 0 0000-0000" : "(00) 0000-0000"}
                          />
                        </div>
                        <button
                          type="button"
                          onClick={adicionarTelefoneCliente}
                          className="bg-primary-500 hover:bg-primary-600 text-white px-3 py-2 rounded-lg transition-colors"
                        >
                          <Plus size={18} />
                        </button>
                      </div>
                    </div>
                  </div>

                  {/* Endereço */}
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-2">
                      Endereço (opcional)
                    </label>

                    <div className="space-y-4">
                      {/* CEP */}
                      <div>
                        <label className="block text-xs text-gray-500 mb-1">CEP (opcional)</label>
                        <div className="relative">
                          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <MapPin size={16} className="text-gray-500" />
                          </div>
                          <input
                            type="text"
                            value={cadastroClienteData.cep}
                            onChange={handleCEPChange}
                            className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white placeholder-gray-400 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                            placeholder="00000-000"
                            maxLength={9}
                          />
                        </div>
                      </div>

                      {/* Endereço */}
                      <div>
                        <label className="block text-xs text-gray-500 mb-1">Endereço (opcional)</label>
                        <div className="relative">
                          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <MapPin size={16} className="text-gray-500" />
                          </div>
                          <input
                            type="text"
                            value={cadastroClienteData.endereco}
                            onChange={(e) => setCadastroClienteData({
                              ...cadastroClienteData,
                              endereco: e.target.value
                            })}
                            className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 pl-10 pr-3 text-white placeholder-gray-400 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                            placeholder="Avenida, rua"
                          />
                        </div>
                      </div>

                      {/* Número e Complemento */}
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-xs text-gray-500 mb-1">Número (opcional)</label>
                          <input
                            type="text"
                            value={cadastroClienteData.numero}
                            onChange={(e) => setCadastroClienteData({
                              ...cadastroClienteData,
                              numero: e.target.value
                            })}
                            className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white placeholder-gray-400 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                            placeholder="Número"
                          />
                        </div>
                        <div>
                          <label className="block text-xs text-gray-500 mb-1">Complemento (opcional)</label>
                          <input
                            type="text"
                            value={cadastroClienteData.complemento}
                            onChange={(e) => setCadastroClienteData({
                              ...cadastroClienteData,
                              complemento: e.target.value
                            })}
                            className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white placeholder-gray-400 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                            placeholder="Apto, sala, etc."
                          />
                        </div>
                      </div>

                      {/* Bairro */}
                      <div>
                        <label className="block text-xs text-gray-500 mb-1">
                          Bairro (opcional)
                          {taxaEntregaConfig?.tipo === 'bairro' && (
                            <span className="text-orange-400 ml-1">• Validação de entrega ativa</span>
                          )}
                        </label>
                        {taxaEntregaConfig?.tipo === 'bairro' ? (
                          <div className="relative bairro-dropdown-container">
                            {/* Campo de input/dropdown */}
                            <div
                              onClick={abrirDropdownBairros}
                              className={`w-full border rounded-lg py-2 px-3 text-white cursor-pointer flex items-center justify-between ${
                                areaEntregaValida === true
                                  ? 'bg-green-900/30 border-green-500'
                                  : areaEntregaValida === false
                                  ? 'bg-red-900/30 border-red-500'
                                  : 'bg-gray-800/50 border-gray-700 hover:border-gray-600'
                              }`}
                            >
                              <span className={bairroSelecionado ? 'text-white' : 'text-gray-400'}>
                                {bairroSelecionado || 'Selecione o bairro'}
                              </span>
                              <div className="flex items-center gap-2">
                                {bairroSelecionado && (
                                  <button
                                    type="button"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      setBairroSelecionado('');
                                      setCadastroClienteData({
                                        ...cadastroClienteData,
                                        bairro: ''
                                      });
                                      setAreaEntregaValida(null);
                                      setMensagemAreaEntrega('');
                                    }}
                                    className="text-gray-400 hover:text-white"
                                  >
                                    <X size={16} />
                                  </button>
                                )}
                                <Search size={16} className="text-gray-400" />
                              </div>
                            </div>

                            {/* Dropdown com pesquisa */}
                            {showBairrosDropdown && (
                              <div className="absolute top-full left-0 right-0 mt-1 bg-gray-800 border border-gray-700 rounded-lg shadow-lg z-50 max-h-80 overflow-hidden">
                                {/* Campo de pesquisa */}
                                <div className="p-3 border-b border-gray-700">
                                  <div className="relative">
                                    <Search size={16} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                                    <input
                                      type="text"
                                      value={searchBairro}
                                      onChange={(e) => filtrarBairros(e.target.value)}
                                      className="w-full bg-gray-700 border border-gray-600 rounded-lg py-2 pl-10 pr-3 text-white placeholder-gray-400 focus:outline-none focus:border-primary-500"
                                      placeholder="Pesquisar bairro..."
                                      autoFocus
                                    />
                                  </div>
                                </div>

                                {/* Lista de bairros */}
                                <div className="max-h-60 overflow-y-auto custom-scrollbar">
                                  {bairrosFiltrados.length > 0 ? (
                                    bairrosFiltrados.map((bairro, index) => (
                                      <button
                                        key={index}
                                        type="button"
                                        onClick={() => selecionarBairro(bairro.bairro)}
                                        className="w-full text-left p-3 hover:bg-gray-700 transition-colors border-b border-gray-700/50 last:border-b-0"
                                      >
                                        <div className="flex justify-between items-center">
                                          <span className="text-white font-medium">{bairro.bairro}</span>
                                          <div className="text-right">
                                            <div className="text-green-400 font-medium">
                                              R$ {bairro.valor.toFixed(2)}
                                            </div>
                                            {bairro.tempo_entrega && (
                                              <div className="text-xs text-gray-400">
                                                {bairro.tempo_entrega} min
                                              </div>
                                            )}
                                          </div>
                                        </div>
                                      </button>
                                    ))
                                  ) : (
                                    <div className="p-4 text-center text-gray-400">
                                      {searchBairro ? 'Nenhum bairro encontrado' : 'Carregando bairros...'}
                                    </div>
                                  )}
                                </div>

                                {/* Botão fechar */}
                                <div className="p-2 border-t border-gray-700">
                                  <button
                                    type="button"
                                    onClick={() => setShowBairrosDropdown(false)}
                                    className="w-full py-2 text-sm text-gray-400 hover:text-white transition-colors"
                                  >
                                    Fechar
                                  </button>
                                </div>
                              </div>
                            )}
                          </div>
                        ) : (
                          <input
                            type="text"
                            value={cadastroClienteData.bairro}
                            onChange={(e) => setCadastroClienteData({
                              ...cadastroClienteData,
                              bairro: e.target.value
                            })}
                            className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white placeholder-gray-400 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                            placeholder="Bairro"
                          />
                        )}
                      </div>

                      {/* Cidade e Estado */}
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-xs text-gray-500 mb-1">Cidade (opcional)</label>
                          <input
                            type="text"
                            value={cadastroClienteData.cidade}
                            onChange={(e) => setCadastroClienteData({
                              ...cadastroClienteData,
                              cidade: e.target.value
                            })}
                            className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white placeholder-gray-400 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                            placeholder="Cidade"
                          />
                        </div>
                        <div>
                          <label className="block text-xs text-gray-500 mb-1">Estado (opcional)</label>
                          <input
                            type="text"
                            value={cadastroClienteData.estado}
                            onChange={(e) => setCadastroClienteData({
                              ...cadastroClienteData,
                              estado: e.target.value.toUpperCase()
                            })}
                            className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white placeholder-gray-400 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500/20"
                            placeholder="UF"
                            maxLength={2}
                          />
                        </div>
                      </div>
                    </div>

                    {/* Validação de Área de Entrega */}
                    {taxaEntregaConfig && (
                      <div className="mt-4 p-4 bg-gray-800/30 rounded-lg border border-gray-700">
                        <div className="flex items-center gap-2 mb-3">
                          <Truck size={16} className="text-orange-400" />
                          <span className="text-sm font-medium text-orange-400">
                            Validação de Área de Entrega
                          </span>
                          {validandoAreaEntrega && (
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-orange-400"></div>
                          )}
                        </div>

                        {/* Mensagem de status */}
                        {mensagemAreaEntrega && (
                          <div className={`p-3 rounded-lg mb-3 text-sm ${
                            areaEntregaValida === true
                              ? 'bg-green-900/30 border border-green-500/30 text-green-300'
                              : areaEntregaValida === false
                              ? 'bg-red-900/30 border border-red-500/30 text-red-300'
                              : 'bg-blue-900/30 border border-blue-500/30 text-blue-300'
                          }`}>
                            {mensagemAreaEntrega}
                          </div>
                        )}



                        {/* Informações sobre o tipo de validação */}
                        <div className="text-xs text-gray-500 mt-3">
                          {taxaEntregaConfig.tipo === 'bairro'
                            ? 'Validação por bairro: Digite o CEP para verificar se atendemos sua região'
                            : 'Validação por distância: Digite o CEP para calcular a taxa de entrega'
                          }
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Footer com botões */}
              <div className="flex items-center justify-end gap-3 p-6 border-t border-gray-800">
                <button
                  onClick={cancelarCadastroCliente}
                  className="px-4 py-2 text-gray-400 hover:text-white transition-colors"
                  disabled={salvandoCliente}
                >
                  Cancelar
                </button>
                <button
                  onClick={salvarNovoCliente}
                  disabled={
                    salvandoCliente ||
                    !cadastroClienteData.nome.trim() ||
                    cadastroClienteData.telefones.length === 0 ||
                    (taxaEntregaConfig && cadastroClienteData.cep && areaEntregaValida === false)
                  }
                  className="px-6 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {salvandoCliente ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      {clienteParaEdicao ? 'Salvando...' : 'Salvando...'}
                    </>
                  ) : (
                    <>
                      <Check size={16} />
                      {clienteParaEdicao ? 'Salvar Alterações' : 'Salvar Cliente'}
                    </>
                  )}
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* ✅ NOVO: Modal de Nome do Cliente (PRIMEIRA PRIORIDADE) */}
      <AnimatePresence>
        {showNomeClienteModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            style={{ pointerEvents: 'auto' }}
            onMouseDown={(e) => {
              // Bloquear cliques no fundo
              if (e.target === e.currentTarget) {
                e.preventDefault();
                e.stopPropagation();
              }
            }}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-gray-800 rounded-lg p-6 w-full max-w-md mx-4"
            >
              <h3 className="text-xl font-bold text-white mb-4 text-center">
                👤 Nome do Cliente
              </h3>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Informe o nome do cliente
                  </label>
                  <input
                    type="text"
                    value={nomeClienteTemp}
                    onChange={(e) => setNomeClienteTemp(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        confirmarNomeCliente();
                      } else if (e.key === 'Escape') {
                        cancelarNomeCliente();
                      }
                    }}
                    className="w-full bg-gray-700 border border-gray-600 rounded-lg py-3 px-4 text-white text-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                    placeholder="Digite o nome do cliente"
                    autoFocus
                    maxLength={100}
                  />
                  <p className="text-xs text-gray-400 mt-1">
                    Este nome será usado para identificar o pedido
                  </p>
                </div>
              </div>

              <div className="flex gap-3 mt-6">
                <button
                  onClick={cancelarNomeCliente}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={confirmarNomeCliente}
                  disabled={!nomeClienteTemp.trim()}
                  className="flex-1 bg-primary-600 hover:bg-primary-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Confirmar
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* ✅ NOVO: Modal de Seleção de Comanda */}
      <AnimatePresence>
        {showComandaModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            style={{ pointerEvents: 'auto' }}
            onMouseDown={(e) => {
              // Bloquear cliques no fundo
              if (e.target === e.currentTarget) {
                e.preventDefault();
                e.stopPropagation();
              }
            }}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-gray-800 rounded-lg p-6 w-full max-w-md mx-4"
            >
              <h3 className="text-xl font-bold text-white mb-4 text-center">
                📋 Selecionar Comanda
              </h3>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Número da Comanda
                  </label>
                  <input
                    type="number"
                    value={comandaNumeroTemp}
                    onChange={(e) => setComandaNumeroTemp(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        confirmarComanda();
                      } else if (e.key === 'Escape') {
                        cancelarComanda();
                      }
                    }}
                    className="w-full bg-gray-700 border border-gray-600 rounded-lg py-3 px-4 text-white text-center text-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                    placeholder={`${rangesConfig.comandas.inicio} a ${rangesConfig.comandas.fim}`}
                    autoFocus
                    min={rangesConfig.comandas.inicio}
                    max={rangesConfig.comandas.fim}
                  />
                  <p className="text-xs text-gray-400 mt-1 text-center">
                    Range válido: {rangesConfig.comandas.inicio} a {rangesConfig.comandas.fim}
                  </p>
                </div>
              </div>

              <div className="flex gap-3 mt-6">
                <button
                  onClick={cancelarComanda}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={confirmarComanda}
                  disabled={!comandaNumeroTemp.trim()}
                  className="flex-1 bg-primary-600 hover:bg-primary-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Confirmar
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* ✅ NOVO: Modal de Seleção de Mesa */}
      <AnimatePresence>
        {showMesaModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            style={{ pointerEvents: 'auto' }}
            onMouseDown={(e) => {
              // Bloquear cliques no fundo
              if (e.target === e.currentTarget) {
                e.preventDefault();
                e.stopPropagation();
              }
            }}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-gray-800 rounded-lg p-6 w-full max-w-md mx-4"
            >
              <h3 className="text-xl font-bold text-white mb-4 text-center">
                🏢 Selecionar Mesa
              </h3>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Número da Mesa
                  </label>
                  <input
                    type="number"
                    value={mesaNumeroTemp}
                    onChange={(e) => setMesaNumeroTemp(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        confirmarMesa();
                      } else if (e.key === 'Escape') {
                        cancelarMesa();
                      }
                    }}
                    className="w-full bg-gray-700 border border-gray-600 rounded-lg py-3 px-4 text-white text-center text-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                    placeholder={`${rangesConfig.mesas.inicio} a ${rangesConfig.mesas.fim}`}
                    autoFocus
                    min={rangesConfig.mesas.inicio}
                    max={rangesConfig.mesas.fim}
                  />
                  <p className="text-xs text-gray-400 mt-1 text-center">
                    Range válido: {rangesConfig.mesas.inicio} a {rangesConfig.mesas.fim}
                  </p>
                </div>
              </div>

              <div className="flex gap-3 mt-6">
                <button
                  onClick={cancelarMesa}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={confirmarMesa}
                  disabled={!mesaNumeroTemp.trim()}
                  className="flex-1 bg-primary-600 hover:bg-primary-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Confirmar
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Seleção de Vendedor */}
      <AnimatePresence>
        {showVendedorModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card border border-gray-800 rounded-lg p-6 max-w-md w-full mx-4"
            >
              <div className="flex items-center gap-3 mb-6">
                <div className="w-10 h-10 bg-green-500/20 rounded-full flex items-center justify-center">
                  <UserCheck size={20} className="text-green-400" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">Selecionar Vendedor</h3>
                  <p className="text-sm text-gray-400">Escolha o vendedor responsável por este item</p>
                </div>
              </div>

              <div className="space-y-3 mb-6 max-h-60 overflow-y-auto">
                {vendedores.length === 0 ? (
                  <div className="text-center py-4">
                    <p className="text-gray-400 text-sm mb-2">Nenhum vendedor encontrado</p>
                    <p className="text-gray-500 text-xs">
                      Configure vendedores em: Configurações → Usuários
                    </p>
                  </div>
                ) : (
                  vendedores.map(vendedor => (
                    <button
                      key={vendedor.id}
                      onClick={() => selecionarVendedor(vendedor)}
                      className={`w-full p-3 rounded-lg border transition-colors text-left ${
                        vendedorSelecionado?.id === vendedor.id
                          ? 'bg-green-500/20 border-green-500/50 text-green-300'
                          : 'bg-gray-800/50 border-gray-700 text-gray-300 hover:bg-gray-700/50 hover:border-gray-600'
                      }`}
                    >
                      <div className="font-medium">{vendedor.nome}</div>
                      {vendedor.email && (
                        <div className="text-sm text-gray-400 mt-1">{vendedor.email}</div>
                      )}
                    </button>
                  ))
                )}
              </div>

              <div className="flex gap-3">
                <button
                  onClick={cancelarSelecaoVendedor}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                {vendedorSelecionado && (
                  <button
                    onClick={() => selecionarVendedor(vendedorSelecionado)}
                    className="flex-1 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg transition-colors"
                  >
                    Confirmar
                  </button>
                )}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* ✅ NOVO: Modal de Quantidade */}
      <AnimatePresence>
        {showQuantidadeModal && (produtoParaQuantidade || vendaSemProdutoAguardando) && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card border border-gray-800 rounded-lg p-6 max-w-md w-full mx-4"
            >
              <div className="flex items-center gap-3 mb-6">
                <div className="w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center">
                  <Package size={20} className="text-blue-400" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">Definir Quantidade</h3>
                  <p className="text-sm text-gray-400">Informe a quantidade do produto</p>
                </div>
              </div>

              {/* Informações do produto */}
              <div className="bg-gray-800/50 rounded-lg p-4 mb-6">
                <h4 className="text-white font-medium mb-2">
                  {vendaSemProdutoAguardando ? vendaSemProdutoAguardando.nome : produtoParaQuantidade?.nome}
                </h4>
                <div className="text-sm text-gray-400 space-y-1">
                  {vendaSemProdutoAguardando ? (
                    <p>Venda sem produto</p>
                  ) : (
                    <p>Código: {produtoParaQuantidade?.codigo}</p>
                  )}

                  {/* ✅ NOVO: Exibir informações de preço com desconto */}
                  {vendaSemProdutoAguardando ? (
                    <p>Preço: {formatCurrency(vendaSemProdutoAguardando.preco)}</p>
                  ) : produtoParaQuantidade?.promocao ? (
                    <div>
                      <p>
                        <span className="line-through">{formatCurrency(produtoParaQuantidade.preco)}</span>
                        <span className="text-primary-400 ml-2 font-medium">{formatCurrency(calcularPrecoFinal(produtoParaQuantidade))}</span>
                      </p>
                      <div className="text-xs text-green-400">
                        {/* ✅ VERIFICAR SE PROMOÇÃO ESTÁ VENCIDA */}
                        {verificarPromocaoVencida(produtoParaQuantidade) ? (
                          <span className="text-red-400">Promoção vencida</span>
                        ) : (
                          <>
                            <span>Produto em promoção</span>
                            {/* ✅ EXIBIR DATA E DIAS RESTANTES SE DEFINIDOS */}
                            {produtoParaQuantidade.promocao_data_habilitada && produtoParaQuantidade.promocao_data_fim && (
                              <div className="mt-1">
                                <div>Válida até: {formatarDataPromocao(produtoParaQuantidade.promocao_data_fim)}</div>
                                {(() => {
                                  const diasRestantes = calcularDiasRestantes(produtoParaQuantidade);
                                  if (diasRestantes !== null) {
                                    if (diasRestantes === 0) {
                                      return <div className="text-yellow-400">⏰ Último dia!</div>;
                                    } else if (diasRestantes === 1) {
                                      return <div className="text-yellow-400">⏰ 1 dia restante</div>;
                                    } else if (diasRestantes > 1) {
                                      return <div>⏰ {diasRestantes} dias restantes</div>;
                                    }
                                  }
                                  return null;
                                })()}
                              </div>
                            )}
                          </>
                        )}
                      </div>
                    </div>
                  ) : (
                    <p>Preço: {formatCurrency(calcularPrecoFinal(produtoParaQuantidade!))}</p>
                  )}

                  {/* ✅ NOVO: Informações de desconto por quantidade */}
                  {!vendaSemProdutoAguardando && produtoParaQuantidade?.desconto_quantidade && produtoParaQuantidade?.quantidade_minima && (
                    <div className="text-xs text-green-400 mt-2">
                      Desconto para {produtoParaQuantidade.quantidade_minima}+ unidades:
                      {produtoParaQuantidade.tipo_desconto_quantidade === 'percentual'
                        ? ` ${produtoParaQuantidade.percentual_desconto_quantidade}%`
                        : ` ${formatCurrency(produtoParaQuantidade.valor_desconto_quantidade || 0)}`
                      }
                    </div>
                  )}
                </div>
              </div>

              {/* Campo de quantidade com botões + e - */}
              <div className="mb-6">
                <div className="flex justify-between items-center mb-3">
                  <div className="flex items-center gap-2">
                    <label className="text-sm font-medium text-white">
                      Quantidade
                    </label>
                    {/* ✅ NOVO: Indicação se permite fracionamento */}
                    {!vendaSemProdutoAguardando && produtoParaQuantidade?.unidade_medida?.fracionado && (
                      <span className="px-2 py-0.5 text-xs bg-green-500/20 text-green-400 rounded border border-green-500/30">
                        Fracionado
                      </span>
                    )}
                  </div>
                  {/* ✅ NOVO: Indicação de quantidade mínima para desconto */}
                  {!vendaSemProdutoAguardando && produtoParaQuantidade?.desconto_quantidade && produtoParaQuantidade?.quantidade_minima && (
                    <span className="text-xs text-gray-400">
                      Mín. {produtoParaQuantidade.quantidade_minima} para desconto
                    </span>
                  )}
                </div>

                {/* ✅ NOVO: Explicação sobre fracionamento */}
                {!vendaSemProdutoAguardando && produtoParaQuantidade?.unidade_medida && (
                  <div className="mb-3 text-xs text-gray-400">
                    {produtoParaQuantidade.unidade_medida.fracionado
                      ? `Valores fracionados permitidos (ex: 2,500 ${produtoParaQuantidade.unidade_medida.sigla})`
                      : `Apenas valores inteiros permitidos (ex: 5 ${produtoParaQuantidade.unidade_medida.sigla})`
                    }
                  </div>
                )}
                <div className="flex items-center gap-3">
                  <button
                    onClick={diminuirQuantidade}
                    className="w-10 h-10 bg-gray-700 hover:bg-gray-600 text-white rounded-lg flex items-center justify-center transition-colors"
                  >
                    <Minus size={16} />
                  </button>

                  <div className="flex-1 relative">
                    <input
                      type="text"
                      value={quantidadeModalInput}
                      onChange={(e) => {
                        // Verificar se a unidade de medida permite fracionamento
                        const isFracionado = produtoParaQuantidade?.unidade_medida?.fracionado || false;

                        // Permitir apenas números, vírgulas e pontos
                        const valorDigitado = e.target.value.replace(/[^\d.,]/g, '');

                        // Atualizar o campo de input sempre (permite digitação)
                        setQuantidadeModalInput(valorDigitado);

                        // Se o campo estiver vazio, definir quantidade como mínimo
                        if (valorDigitado === '') {
                          const minimo = isFracionado ? 0.1 : 1;
                          setQuantidadeModal(minimo);
                          return;
                        }

                        // Converter vírgula para ponto para processamento
                        const valorLimpo = valorDigitado.replace(',', '.');

                        // Se for um número válido, atualizar o estado
                        if (!isNaN(parseFloat(valorLimpo))) {
                          let valor = parseFloat(valorLimpo);

                          // Se for fracionado, limitar a 3 casas decimais; se não, arredondar para inteiro
                          if (isFracionado) {
                            valor = Math.max(0.1, Math.round(valor * 1000) / 1000); // 3 casas decimais, mínimo 0.1
                          } else {
                            valor = Math.max(1, Math.floor(valor)); // Número inteiro, mínimo 1
                          }

                          setQuantidadeModal(valor);
                        }
                      }}
                      onBlur={() => {
                        // Formatar o valor final quando sair do campo
                        const isFracionado = produtoParaQuantidade?.unidade_medida?.fracionado || false;

                        // Formatar o valor exibido
                        const valorFormatado = isFracionado
                          ? quantidadeModal.toFixed(3)
                          : quantidadeModal.toString();

                        setQuantidadeModalInput(valorFormatado);
                      }}
                      placeholder={(() => {
                        const isFracionado = produtoParaQuantidade?.unidade_medida?.fracionado || false;
                        return isFracionado ? "0,000" : "1";
                      })()}
                      className={`w-full bg-gray-800/50 border rounded-lg py-2 px-3 text-white text-center focus:outline-none focus:ring-1 focus:ring-primary-500/20 ${
                        !vendaSemProdutoAguardando &&
                        produtoParaQuantidade?.desconto_quantidade &&
                        produtoParaQuantidade?.quantidade_minima &&
                        quantidadeModal >= produtoParaQuantidade?.quantidade_minima
                          ? 'border-green-500 focus:border-green-500'
                          : 'border-gray-700 focus:border-primary-500'
                      }`}
                    />
                    {/* ✅ NOVO: Indicador de desconto aplicado */}
                    {!vendaSemProdutoAguardando &&
                     produtoParaQuantidade?.desconto_quantidade &&
                     produtoParaQuantidade?.quantidade_minima &&
                     quantidadeModal >= produtoParaQuantidade?.quantidade_minima && (
                      <div className="absolute right-2 top-1/2 -translate-y-1/2">
                        <span className="text-xs text-green-400 font-medium">
                          Desconto aplicado!
                        </span>
                      </div>
                    )}
                  </div>

                  <button
                    onClick={aumentarQuantidade}
                    className="w-10 h-10 bg-gray-700 hover:bg-gray-600 text-white rounded-lg flex items-center justify-center transition-colors"
                  >
                    <Plus size={16} />
                  </button>
                </div>
              </div>

              {/* Total */}
              <div className="bg-primary-500/10 border border-primary-500/30 rounded-lg p-3 mb-6">
                {/* ✅ NOVO: Mostrar cálculo detalhado quando há desconto */}
                {vendaSemProdutoAguardando ? (
                  <div className="flex justify-between items-center">
                    <span className="text-primary-300 font-medium">Total:</span>
                    <span className="text-primary-300 font-bold text-lg">
                      {formatCurrency(vendaSemProdutoAguardando.preco * quantidadeModal)}
                    </span>
                  </div>
                ) : (produtoParaQuantidade?.promocao ||
                  (produtoParaQuantidade?.desconto_quantidade &&
                   produtoParaQuantidade?.quantidade_minima &&
                   quantidadeModal >= produtoParaQuantidade?.quantidade_minima)) ? (
                  <div className="space-y-2">
                    <div className="flex justify-between items-center text-sm">
                      <span className="text-gray-400">Preço original:</span>
                      <span className="text-gray-400 line-through">
                        {formatCurrency(produtoParaQuantidade!.preco)} x {quantidadeModal}
                      </span>
                    </div>
                    <div className="flex justify-between items-center text-sm">
                      <span className="text-green-400">Preço com desconto:</span>
                      <span className="text-green-400">
                        {formatCurrency(calcularPrecoModalQuantidade(produtoParaQuantidade!, quantidadeModal))} x {quantidadeModal}
                      </span>
                    </div>
                    <div className="border-t border-primary-500/30 pt-2">
                      <div className="flex justify-between items-center">
                        <span className="text-primary-300 font-medium">Total:</span>
                        <span className="text-primary-300 font-bold text-lg">
                          {formatCurrency(calcularPrecoModalQuantidade(produtoParaQuantidade!, quantidadeModal) * quantidadeModal)}
                        </span>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="flex justify-between items-center">
                    <span className="text-primary-300 font-medium">Total:</span>
                    <span className="text-primary-300 font-bold text-lg">
                      {formatCurrency(calcularPrecoModalQuantidade(produtoParaQuantidade!, quantidadeModal) * quantidadeModal)}
                    </span>
                  </div>
                )}
              </div>

              {/* Botões */}
              <div className="flex gap-3">
                <button
                  onClick={cancelarQuantidade}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={confirmarQuantidade}
                  className="flex-1 bg-primary-500 hover:bg-primary-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Adicionar ao Carrinho
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Desconto no Total */}
      <AnimatePresence>
        {showDescontoTotalModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg p-6 w-full max-w-md"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-xl font-bold text-white flex items-center gap-2">
                  <Percent size={24} className="text-orange-400" />
                  Desconto no Total
                </h3>
                <button
                  onClick={() => setShowDescontoTotalModal(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="space-y-4">
                {/* Tipo de desconto */}
                <div>
                  <label className="text-sm font-medium text-white mb-2 block">
                    Tipo de Desconto
                  </label>
                  <div className="grid grid-cols-2 gap-2">
                    <button
                      onClick={() => setTipoDescontoTotal('percentual')}
                      className={`py-2 px-3 rounded-lg text-sm font-medium transition-colors ${
                        tipoDescontoTotal === 'percentual'
                          ? 'bg-orange-500 text-white'
                          : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                      }`}
                    >
                      Percentual (%)
                    </button>
                    <button
                      onClick={() => setTipoDescontoTotal('valor')}
                      className={`py-2 px-3 rounded-lg text-sm font-medium transition-colors ${
                        tipoDescontoTotal === 'valor'
                          ? 'bg-orange-500 text-white'
                          : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                      }`}
                    >
                      Valor (R$)
                    </button>
                  </div>
                </div>

                {/* Valor do desconto */}
                <div>
                  <label className="text-sm font-medium text-white mb-2 block">
                    {tipoDescontoTotal === 'percentual' ? 'Percentual de Desconto' : 'Valor do Desconto'}
                  </label>
                  <input
                    type="number"
                    value={descontoTotal}
                    onChange={(e) => setDescontoTotal(parseFloat(e.target.value) || 0)}
                    placeholder={tipoDescontoTotal === 'percentual' ? 'Ex: 10' : 'Ex: 50.00'}
                    min="0"
                    max={tipoDescontoTotal === 'percentual' ? '100' : undefined}
                    step={tipoDescontoTotal === 'percentual' ? '1' : '0.01'}
                    className="w-full bg-gray-800/50 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-orange-500/20 focus:border-orange-500"
                    autoFocus
                  />
                  {tipoDescontoTotal === 'percentual' && (
                    <p className="text-xs text-gray-400 mt-1">
                      Máximo: 100%
                    </p>
                  )}
                </div>

                {/* Informações do total */}
                <div className="bg-gray-800/30 rounded-lg p-3">
                  <div className="flex justify-between items-center text-sm">
                    <span className="text-gray-400">Total atual:</span>
                    <span className="text-white font-medium">
                      {formatCurrency(carrinho.reduce((total, item) => total + item.subtotal, 0))}
                    </span>
                  </div>
                  {descontoTotal > 0 && (
                    <>
                      <div className="flex justify-between items-center text-sm mt-1">
                        <span className="text-orange-400">Desconto:</span>
                        <span className="text-orange-400">
                          -{formatCurrency(
                            tipoDescontoTotal === 'percentual'
                              ? (carrinho.reduce((total, item) => total + item.subtotal, 0) * descontoTotal) / 100
                              : descontoTotal
                          )}
                        </span>
                      </div>
                      <div className="border-t border-gray-700 mt-2 pt-2">
                        <div className="flex justify-between items-center">
                          <span className="text-white font-medium">Total com desconto:</span>
                          <span className="text-green-400 font-bold">
                            {formatCurrency(
                              carrinho.reduce((total, item) => total + item.subtotal, 0) -
                              (tipoDescontoTotal === 'percentual'
                                ? (carrinho.reduce((total, item) => total + item.subtotal, 0) * descontoTotal) / 100
                                : descontoTotal)
                            )}
                          </span>
                        </div>
                      </div>
                    </>
                  )}
                </div>
              </div>

              {/* Botões */}
              <div className="flex gap-3 mt-6">
                <button
                  onClick={() => setShowDescontoTotalModal(false)}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={aplicarDescontoTotal}
                  disabled={descontoTotal <= 0}
                  className="flex-1 bg-orange-500 hover:bg-orange-600 disabled:bg-gray-600 disabled:cursor-not-allowed text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Aplicar Desconto
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* ✅ NOVO: Modal de Salvar/Deletar Venda */}
      <AnimatePresence>
        {showSalvarVendaModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"
            onClick={() => setShowSalvarVendaModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-white">Venda em Andamento</h3>
                <button
                  onClick={() => setShowSalvarVendaModal(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="mb-6">
                <p className="text-gray-300 mb-3">
                  O que deseja fazer com esta venda?
                </p>
                {vendaEmAndamento && (
                  <div className="bg-blue-900/20 border border-blue-800/30 rounded-lg p-3">
                    <div className="text-blue-300 font-medium text-sm">
                      📋 {vendaEmAndamento.numero_venda}
                    </div>
                    {vendaEmAndamento.numero_nfce_reservado && vendaEmAndamento.serie_usuario && (
                      <div className="text-blue-400 text-sm">
                        🧾 NFC-e #{vendaEmAndamento.numero_nfce_reservado} Série {vendaEmAndamento.serie_usuario}
                      </div>
                    )}
                  </div>
                )}
              </div>

              <div className="flex gap-3">
                <button
                  onClick={async () => {
                    // Fechar modal imediatamente
                    setShowSalvarVendaModal(false);

                    // Salvar venda
                    const sucesso = await salvarVendaEmAndamento();
                    if (!sucesso) {
                      // Se falhou, reabrir o modal
                      setShowSalvarVendaModal(true);
                    }
                  }}
                  className="flex-1 bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg transition-colors font-medium"
                >
                  💾 Salvar
                </button>
                <button
                  onClick={async () => {
                    const sucesso = await deletarVendaEmAndamento();
                    if (sucesso) {
                      setShowSalvarVendaModal(false);
                    }
                  }}
                  className="flex-1 bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg transition-colors font-medium"
                >
                  🗑️ Deletar Venda
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* ✅ NOVO: Modal de Vendas Abertas - Tela Cheia */}
      <AnimatePresence>
        {showVendasAbertasModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="w-full h-full bg-background-card flex flex-col"
            >
              {/* Header compacto para tela cheia */}
              <div className="border-b border-gray-700 bg-background-card">
                <div className="flex items-center justify-between px-6 py-4">
                  <div className="flex items-center gap-3">
                    <FileText size={24} className="text-blue-400" />
                    <h3 className="text-xl font-semibold text-white">Vendas Abertas</h3>
                    {contadorVendasAbertas > 0 && (
                      <span className="bg-blue-600 text-white px-3 py-1 rounded-full text-sm font-medium">
                        {contadorVendasAbertas}
                      </span>
                    )}
                  </div>
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => setShowFiltrosVendasAbertas(!showFiltrosVendasAbertas)}
                      className={`px-3 py-1 rounded-lg text-xs transition-colors flex items-center gap-1 relative ${
                        showFiltrosVendasAbertas
                          ? 'bg-primary-500/20 text-primary-400 border border-primary-500/30'
                          : 'bg-gray-700 text-gray-400 hover:bg-gray-600'
                      }`}
                      title="Filtros"
                    >
                      <Filter size={14} />
                      Filtros
                      {/* Indicador de filtros ativos */}
                      {(filtroNomeCliente || filtroMesa || filtroComanda || filtroDataInicioVendas || filtroDataFimVendas) && (
                        <span className="absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full"></span>
                      )}
                    </button>
                    <button
                      onClick={carregarVendasAbertas}
                      className="text-gray-400 hover:text-white transition-colors p-1"
                      title="Atualizar"
                    >
                      <ArrowUpDown size={18} />
                    </button>
                    <button
                      onClick={() => setShowVendasAbertasModal(false)}
                      className="text-gray-400 hover:text-white transition-colors p-2 hover:bg-gray-700 rounded-lg"
                    >
                      <X size={24} />
                    </button>
                  </div>
                </div>
              </div>

              {/* Painel de Filtros */}
              <AnimatePresence>
                {showFiltrosVendasAbertas && (
                  <motion.div
                    initial={{ height: 0, opacity: 0 }}
                    animate={{ height: 'auto', opacity: 1 }}
                    exit={{ height: 0, opacity: 0 }}
                    className="border-b border-gray-800 bg-gray-800/30 overflow-hidden"
                  >
                    <div className="p-4 space-y-4">
                      {/* Primeira linha - Filtros de texto */}
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Nome do Cliente</label>
                          <input
                            type="text"
                            value={filtroNomeCliente}
                            onChange={(e) => setFiltroNomeCliente(e.target.value)}
                            placeholder="Digite o nome do cliente..."
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 text-sm"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Mesa</label>
                          <input
                            type="text"
                            value={filtroMesa}
                            onChange={(e) => setFiltroMesa(e.target.value)}
                            placeholder="Número da mesa..."
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 text-sm"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Comanda</label>
                          <input
                            type="text"
                            value={filtroComanda}
                            onChange={(e) => setFiltroComanda(e.target.value)}
                            placeholder="Número da comanda..."
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 text-sm"
                          />
                        </div>
                      </div>

                      {/* Segunda linha - Filtros de data */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Data Início</label>
                          <input
                            type="date"
                            value={filtroDataInicioVendas}
                            onChange={(e) => setFiltroDataInicioVendas(e.target.value)}
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500 text-sm"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-400 mb-1">Data Fim</label>
                          <input
                            type="date"
                            value={filtroDataFimVendas}
                            onChange={(e) => setFiltroDataFimVendas(e.target.value)}
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500 text-sm"
                          />
                        </div>
                      </div>

                      {/* Botões de ação */}
                      <div className="flex gap-2">
                        <button
                          onClick={() => {
                            setFiltroNomeCliente('');
                            setFiltroMesa('');
                            setFiltroComanda('');
                            setFiltroDataInicioVendas('');
                            setFiltroDataFimVendas('');
                          }}
                          className="px-3 py-1 bg-gray-600 hover:bg-gray-500 text-white rounded-lg text-sm transition-colors"
                        >
                          Limpar Filtros
                        </button>
                      </div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>

              {/* Conteúdo principal com scroll */}
              <div className="flex-1 overflow-y-auto p-6">
                {carregandoVendasAbertas ? (
                  <div className="flex items-center justify-center py-12">
                    <div className="text-gray-400">Carregando vendas...</div>
                  </div>
                ) : (() => {
                  // ✅ DEBUG: Log para verificar estado das vendas abertas
                  console.log('🔍 DEBUG - Estado vendasAbertas:', {
                    total: vendasAbertas.length,
                    vendas: vendasAbertas.map(v => v.numero_venda)
                  });

                  const vendasFiltradas = filtrarVendasAbertas(vendasAbertas);
                  return vendasFiltradas.length === 0 ? (
                    <div className="flex flex-col items-center justify-center py-12 text-gray-400">
                      <FileText size={48} className="mb-4 opacity-50" />
                      <p className="text-lg font-medium">
                        {vendasAbertas.length === 0 ? 'Nenhuma venda em aberto' : 'Nenhuma venda encontrada'}
                      </p>
                      <p className="text-sm">
                        {vendasAbertas.length === 0 ? 'Todas as vendas foram finalizadas' : 'Tente ajustar os filtros de busca'}
                      </p>
                    </div>
                  ) : (
                    <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5">
                      {/* ✅ DEBUG: Log para verificar vendas filtradas */}
                      {console.log('🔍 DEBUG - Vendas filtradas para renderização:', vendasFiltradas.length, vendasFiltradas.map(v => v.numero_venda))}
                      {vendasFiltradas.map((venda) => (
                      <div
                        key={venda.id}
                        className="bg-gray-800/50 border border-gray-700 rounded-lg p-4 hover:bg-gray-800/70 transition-colors flex flex-col h-full"
                      >
                        {/* Header do card */}
                        <div className="mb-3">
                          {/* Mesa e Comanda no topo */}
                          {/* ✅ DEBUG: Log para verificar dados da venda */}
                          {console.log('🔍 DEBUG - Venda renderizada:', {
                            numero_venda: venda.numero_venda,
                            comanda_numero: venda.comanda_numero,
                            mesa_numero: venda.mesa_numero,
                            status_venda: venda.status_venda,
                            temComanda: !!venda.comanda_numero,
                            temMesa: !!venda.mesa_numero
                          })}
                          {(venda.mesa_numero || venda.comanda_numero) && (
                            <div className="flex gap-2 mb-2">
                              {venda.mesa_numero && (
                                <span className="text-blue-400 text-xs bg-blue-500/20 px-2 py-1 rounded">Mesa: {venda.mesa_numero}</span>
                              )}
                              {venda.comanda_numero && (
                                <span className="text-green-400 text-xs bg-green-500/20 px-2 py-1 rounded">Comanda: {venda.comanda_numero}</span>
                              )}
                            </div>
                          )}

                          <div className="text-white font-medium mb-1">
                            📋 {venda.numero_venda}
                          </div>
                          {venda.numero_documento && venda.serie_documento && (
                            <div className="text-blue-400 text-xs">
                              🧾 NFC-e #{venda.numero_documento} Série {venda.serie_documento}
                            </div>
                          )}
                          <div className="text-gray-400 text-xs mt-1">
                            {new Date(venda.created_at).toLocaleString('pt-BR')}
                          </div>
                        </div>

                        {/* Informações principais */}
                        <div className="space-y-2 text-sm flex-1">
                          <div className="flex justify-between">
                            <span className="text-gray-400">Itens:</span>
                            <span className="text-gray-300">{venda.totalItens}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-400">Total:</span>
                            <span className="text-green-400 font-medium">{formatCurrency(venda.valor_total || 0)}</span>
                          </div>
                          {venda.nome_cliente && (
                            <div className="flex justify-between">
                              <span className="text-gray-400">Cliente:</span>
                              <span className="text-gray-300">{venda.nome_cliente}</span>
                            </div>
                          )}
                        </div>

                            {venda.itens && venda.itens.length > 0 && (
                              <div className="mt-3 pt-3 border-t border-gray-700">
                                <button
                                  onClick={() => {
                                    const novasVendasExpandidas = new Set(vendasExpandidas);
                                    if (novasVendasExpandidas.has(venda.id)) {
                                      novasVendasExpandidas.delete(venda.id);
                                    } else {
                                      novasVendasExpandidas.add(venda.id);
                                    }
                                    setVendasExpandidas(novasVendasExpandidas);
                                  }}
                                  className="flex items-center justify-between w-full text-xs text-gray-400 hover:text-gray-300 transition-colors"
                                >
                                  <span>Produtos ({venda.itens.length})</span>
                                  <span className="text-lg">
                                    {vendasExpandidas.has(venda.id) ? '▼' : '▶'}
                                  </span>
                                </button>

                                {vendasExpandidas.has(venda.id) && (
                                  <div className="mt-2 space-y-1">
                                    {venda.itens.map((item: any, index: number) => (
                                      <div key={index} className="text-xs text-gray-300 flex justify-between">
                                        <span>{item.nome_produto}</span>
                                        <span>{item.quantidade}x {formatCurrency(item.valor_total_item)}</span>
                                      </div>
                                    ))}
                                  </div>
                                )}
                              </div>
                            )}

                        {/* Botões de ação */}
                        <div className="mt-4 pt-3 border-t border-gray-700 space-y-2">
                          {/* Botão de recuperar */}
                          <button
                            onClick={() => recuperarVendaSalva(venda.id)}
                            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors font-medium text-sm"
                          >
                            🔄 Recuperar
                          </button>

                          {/* ✅ NOVO: Botão para liberar comanda (apenas se tiver comanda e status salva) */}
                          {/* ✅ DEBUG: Log para verificar condição do botão */}
                          {console.log('🔍 DEBUG - Botão Liberar Comanda:', {
                            numero_venda: venda.numero_venda,
                            comanda_numero: venda.comanda_numero,
                            status_venda: venda.status_venda,
                            temComanda: !!venda.comanda_numero,
                            statusSalva: venda.status_venda === 'salva',
                            deveExibir: venda.comanda_numero && venda.status_venda === 'salva'
                          })}
                          {venda.comanda_numero && venda.status_venda === 'salva' && (
                            <button
                              onClick={(e) => {
                                e.stopPropagation(); // Evitar trigger do recuperar
                                setVendaParaLiberarComanda(venda);
                                setShowLiberarComandaModal(true);
                              }}
                              className="w-full bg-orange-600 hover:bg-orange-700 text-white py-2 px-4 rounded-lg transition-colors font-medium text-sm"
                            >
                              🔓 Liberar Comanda {venda.comanda_numero}
                            </button>
                          )}
                        </div>
                      </div>
                      ))}
                    </div>
                  );
                })()}
              </div>

              {vendasAbertas.length > 0 && (
                <div className="mt-6 pt-4 border-t border-gray-700 flex justify-between items-center">
                  <div className="text-sm text-gray-400">
                    {vendasAbertas.length} venda(s) em aberto
                  </div>
                  <button
                    onClick={carregarVendasAbertas}
                    className="text-blue-400 hover:text-blue-300 text-sm transition-colors"
                  >
                    🔄 Atualizar Lista
                  </button>
                </div>
              )}
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* ✅ NOVO: Modal de Observação da Venda */}
      <AnimatePresence>
        {showObservacaoVendaModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"
            onClick={() => setShowObservacaoVendaModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card rounded-lg border border-gray-800 p-6 w-full max-w-md mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-3">
                  <MessageSquare size={24} className="text-blue-400" />
                  <h3 className="text-lg font-semibold text-white">Observação na Venda</h3>
                </div>
                <button
                  onClick={() => setShowObservacaoVendaModal(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Observação (opcional)
                </label>
                <textarea
                  value={observacaoVenda}
                  onChange={(e) => setObservacaoVenda(e.target.value)}
                  placeholder="Digite uma observação para esta venda..."
                  rows={4}
                  className="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                />
                <div className="text-xs text-gray-400 mt-1">
                  Esta observação será salva junto com a venda
                </div>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={() => setShowObservacaoVendaModal(false)}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={() => {
                    setShowObservacaoVendaModal(false);
                    toast.success(observacaoVenda.trim() ? 'Observação salva!' : 'Observação removida!');
                  }}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Salvar
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* ✅ NOVO: Modal de Seleção de Sabores */}
      <SeletorSaboresModal
        isOpen={showSeletorSabores}
        onClose={() => {
          setShowSeletorSabores(false);
          setProdutoParaSabores(null);
          setTabelaParaSabores(null);
        }}
        tabelaPreco={tabelaParaSabores}
        onConfirmar={confirmarSabores}
        tipoPreco={tipoPrecoSabores}
        produtoAtual={produtoParaSabores} // ✅ NOVO: Passar produto atual para filtrar
      />

      {/* Modal de Seleção de Parcelas */}
      <AnimatePresence>
        {showModalParcelas && formaPagamentoPendente && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              className="bg-background-card p-6 rounded-lg shadow-xl max-w-md mx-4 w-full border border-gray-800"
            >
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-xl font-semibold text-white">
                  Selecionar Parcelas
                </h3>
                <button
                  onClick={handleCancelarParcelas}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="mb-6">
                <div className="text-center mb-4">
                  <h4 className="text-lg font-medium text-white mb-2">
                    {formaPagamentoPendente.nome}
                  </h4>
                  <p className="text-gray-400 text-sm">
                    Escolha a quantidade de parcelas para o pagamento
                  </p>
                </div>

                <div className="space-y-3">
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Quantidade de Parcelas
                  </label>

                  <div className="grid grid-cols-3 gap-2">
                    {Array.from({ length: formaPagamentoPendente.max_parcelas }, (_, i) => i + 1).map(parcela => (
                      <button
                        key={parcela}
                        onClick={() => setParcelasSelecionadas(parcela)}
                        className={`p-3 rounded-lg border transition-colors text-sm font-medium ${
                          parcelasSelecionadas === parcela
                            ? 'bg-primary-600 border-primary-500 text-white'
                            : 'bg-gray-800 border-gray-700 text-gray-300 hover:border-gray-600 hover:bg-gray-750'
                        }`}
                      >
                        {parcela}x
                      </button>
                    ))}
                  </div>

                  {/* Informações sobre juros */}
                  {formaPagamentoPendente.juros_por_parcela > 0 && parcelasSelecionadas > 1 && (
                    <div className="bg-yellow-900/20 border border-yellow-600/30 rounded-lg p-3 mt-4">
                      <div className="flex items-start gap-2">
                        <svg className="w-4 h-4 text-yellow-400 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.232 15.5c-.77.833.192 2.5 1.732 2.5z" />
                        </svg>
                        <div>
                          <p className="text-yellow-400 text-sm font-medium">Juros Aplicados</p>
                          <p className="text-yellow-300 text-xs">
                            {formaPagamentoPendente.juros_por_parcela}% de juros por parcela será aplicado
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Valor por parcela */}
                  <div className="bg-gray-800/50 rounded-lg p-3 mt-4">
                    <div className="text-center">
                      <p className="text-gray-400 text-sm">Valor por parcela</p>
                      <p className="text-xl font-bold text-primary-400">
                        {(() => {
                          // ✅ CORREÇÃO: No modo parcial, usar valor restante; no modo à vista, usar total
                          if (tipoPagamento === 'parcial') {
                            const valorDigitado = parseCurrencyToNumber(valorParcial);
                            let valorParaUsar;

                            if (valorDigitado > 0) {
                              // Se há valor digitado, usar esse valor
                              valorParaUsar = valorDigitado;
                            } else {
                              // Se não há valor digitado, usar o valor restante
                              const totalVenda = calcularTotalComDesconto();
                              const totalPago = calcularTotalPago();
                              valorParaUsar = totalVenda - totalPago;
                            }

                            return formatCurrency(valorParaUsar / parcelasSelecionadas);
                          } else {
                            return formatCurrency(calcularTotalComDesconto() / parcelasSelecionadas);
                          }
                        })()}
                      </p>
                      {formaPagamentoPendente.juros_por_parcela > 0 && parcelasSelecionadas > 1 && (
                        <p className="text-xs text-gray-500 mt-1">
                          (sem juros - valor final pode variar)
                        </p>
                      )}
                    </div>
                  </div>
                </div>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={handleCancelarParcelas}
                  className="flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={handleConfirmarParcelas}
                  className="flex-1 px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors"
                >
                  Confirmar {parcelasSelecionadas}x
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal PIX QR Code */}
      <AnimatePresence>
        {showModalPix && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              className="bg-background-card p-6 rounded-lg shadow-xl max-w-md mx-4 w-full border border-gray-800"
            >
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-xl font-semibold text-white">
                  Pagamento PIX
                </h3>
                <button
                  onClick={cancelarPix}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="text-center mb-6">
                <div className="mb-4">
                  <h4 className="text-lg font-medium text-white mb-2">
                    Escaneie o QR Code para pagar
                  </h4>
                  <p className="text-gray-400 text-sm">
                    Valor: <span className="text-primary-400 font-bold">{formatCurrency(valorPix)}</span>
                  </p>
                </div>

                {/* QR Code */}
                <div className="bg-white p-4 rounded-lg mb-4 mx-auto w-fit">
                  {qrCodePix ? (
                    <QRCodeSVG
                      value={qrCodePix}
                      size={200}
                      level="M"
                      includeMargin={true}
                      className="mx-auto"
                    />
                  ) : (
                    <div className="w-48 h-48 bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center">
                      <div className="text-gray-400 text-sm">Gerando QR Code...</div>
                    </div>
                  )}
                </div>

                {/* Informações da chave PIX */}
                <div className="bg-gray-800/50 rounded-lg p-3 mb-4">
                  <div className="text-sm text-gray-400 mb-1">Chave PIX:</div>
                  <div className="text-white font-mono text-sm break-all mb-2">{chavePix}</div>

                  {/* Botão para copiar código PIX */}
                  <button
                    onClick={() => {
                      navigator.clipboard.writeText(qrCodePix);
                      // Código PIX copiado
                    }}
                    className="w-full bg-blue-600 hover:bg-blue-700 text-white text-xs py-2 px-3 rounded transition-colors"
                  >
                    Copiar Código PIX
                  </button>
                </div>

                {/* Instruções */}
                <div className="text-xs text-gray-400 mb-4">
                  <p>1. Abra o app do seu banco</p>
                  <p>2. Escaneie o QR Code ou copie a chave PIX</p>
                  <p>3. Confirme o pagamento no seu banco</p>
                  <p>4. Clique em "Confirmar Recebimento" após o pagamento</p>
                </div>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={cancelarPix}
                  className="flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={confirmarRecebimentoPix}
                  className="flex-1 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
                >
                  Confirmar Recebimento
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal do Cardápio Digital */}
      <AnimatePresence>
        {showCardapioDigitalModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="w-full h-full bg-background-card flex flex-col"
            >
              {/* ✅ HEADER OCULTO - MOSTRAR APENAS AS ABAS */}
              {/* Header com apenas botão fechar */}
              <div className="flex items-center justify-between px-6 py-2 border-b border-gray-700">
                {/* Botões de Status (Abas) */}
                <div className="flex flex-wrap gap-3">
                    {[
                      { value: 'pendente', label: 'Pendente', count: todosOsPedidosCardapio.filter(p => p.status_pedido === 'pendente').length, color: 'bg-orange-500 hover:bg-orange-600' },
                      { value: 'confirmado', label: 'Confirmado', count: todosOsPedidosCardapio.filter(p => p.status_pedido === 'confirmado').length, color: 'bg-blue-500 hover:bg-blue-600' },
                      { value: 'preparando', label: 'Preparando', count: todosOsPedidosCardapio.filter(p => p.status_pedido === 'preparando').length, color: 'bg-yellow-500 hover:bg-yellow-600' },
                      { value: 'pronto', label: 'Pronto', count: todosOsPedidosCardapio.filter(p => p.status_pedido === 'pronto').length, color: 'bg-green-500 hover:bg-green-600' },
                      { value: 'saiu_para_entrega', label: 'Saiu para Entrega', count: todosOsPedidosCardapio.filter(p => p.status_pedido === 'saiu_para_entrega').length, color: 'bg-indigo-500 hover:bg-indigo-600' },
                      { value: 'entregue', label: 'Entregue', count: todosOsPedidosCardapio.filter(p => p.status_pedido === 'entregue').length, color: 'bg-purple-500 hover:bg-purple-600' },
                      { value: 'cancelado', label: 'Cancelado', count: todosOsPedidosCardapio.filter(p => p.status_pedido === 'cancelado').length, color: 'bg-red-500 hover:bg-red-600' }
                    ].map((status) => (
                      <button
                        key={status.value}
                        onClick={() => filtrarCardapioPorStatus(status.value)}
                        className={`px-4 py-2 rounded-full text-sm font-medium text-white transition-all duration-200 flex items-center gap-2 min-w-[120px] justify-center ${
                          statusFilterCardapio === status.value
                            ? status.color
                            : 'bg-gray-600 hover:bg-gray-500'
                        } ${
                          status.value === 'pendente' && status.count > 0
                            ? 'animate-pulse'
                            : ''
                        }`}
                      >
                        <span>{status.label}</span>
                        <span className="bg-white/20 px-2 py-0.5 rounded-full text-xs font-bold min-w-[20px] text-center">
                          {status.count}
                        </span>
                      </button>
                    ))}
                </div>

                <button
                  onClick={() => setShowCardapioDigitalModal(false)}
                  className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              {/* Conteúdo */}
              <div className="flex-1 flex overflow-hidden">
                {/* Lista de Pedidos */}
                <div className="w-1/3 border-r border-gray-700 flex flex-col">
                  <div className="p-2 border-b border-gray-700">
                    {/* Filtro de Data e Ações */}
                    <div className="flex items-center justify-between mb-1">
                      <div className="flex items-center gap-2">
                        <button
                          onClick={() => setShowFiltersCardapio(!showFiltersCardapio)}
                          className="p-1.5 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors"
                          title="Filtros de data"
                        >
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                            <path d="M3 6h18M7 12h10m-7 6h4"/>
                          </svg>
                        </button>
                        {(dataInicioCardapio || dataFimCardapio) && (
                          <button
                            onClick={limparFiltrosCardapio}
                            className="text-xs text-orange-400 hover:text-orange-300"
                          >
                            Limpar filtros
                          </button>
                        )}
                      </div>
                      <div className="flex gap-4 items-center">
                        {/* Impressão Automática */}
                        <label className="flex items-center gap-2 text-sm text-gray-300 cursor-pointer">
                          <input
                            type="checkbox"
                            checked={pdvConfig?.impressao_automatica_cardapio || false}
                            onChange={(e) => {
                              const novoValor = e.target.checked;
                              // Atualizar configuração no banco
                              atualizarConfigCardapio('impressao_automatica_cardapio', novoValor);
                            }}
                            className="w-4 h-4 text-orange-500 bg-gray-700 border-gray-600 rounded focus:ring-orange-500 focus:ring-2"
                          />
                          <span>Impressão automática</span>
                        </label>

                        {/* Aceitar Pedido Automaticamente */}
                        <label className="flex items-center gap-2 text-sm text-gray-300 cursor-pointer">
                          <input
                            type="checkbox"
                            checked={pdvConfig?.aceitar_pedido_automatico_cardapio || false}
                            onChange={(e) => {
                              const novoValor = e.target.checked;
                              // Atualizar configuração no banco
                              atualizarConfigCardapio('aceitar_pedido_automatico_cardapio', novoValor);
                            }}
                            className="w-4 h-4 text-orange-500 bg-gray-700 border-gray-600 rounded focus:ring-orange-500 focus:ring-2"
                          />
                          <span>Aceitar pedido automaticamente</span>
                        </label>
                      </div>
                    </div>

                    {/* Campo de Busca */}
                    <div className="mb-1">
                      <input
                        type="text"
                        placeholder="Buscar por número, nome ou telefone..."
                        value={searchCardapio}
                        onChange={(e) => filtrarCardapioPorBusca(e.target.value)}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-orange-500"
                      />
                    </div>

                    {/* Filtros de Data (Expansível) */}
                    {showFiltersCardapio && (
                      <div className="mt-1 p-3 bg-gray-800/50 rounded-lg border border-gray-600">
                        <div className="grid grid-cols-2 gap-3">
                          <div>
                            <label className="block text-xs text-gray-400 mb-1">Data Início</label>
                            <input
                              type="date"
                              value={dataInicioCardapio}
                              onChange={(e) => setDataInicioCardapio(e.target.value)}
                              className="w-full px-2 py-1 bg-gray-700 border border-gray-600 rounded text-white text-sm focus:outline-none focus:border-orange-500"
                            />
                          </div>
                          <div>
                            <label className="block text-xs text-gray-400 mb-1">Data Fim</label>
                            <input
                              type="date"
                              value={dataFimCardapio}
                              onChange={(e) => setDataFimCardapio(e.target.value)}
                              className="w-full px-2 py-1 bg-gray-700 border border-gray-600 rounded text-white text-sm focus:outline-none focus:border-orange-500"
                            />
                          </div>
                        </div>
                      </div>
                    )}
                  </div>

                  <div className="flex-1 overflow-y-auto">
                    {pedidosCardapioFiltrados.length === 0 ? (
                      <div className="p-6 text-center text-gray-400">
                        <BookOpen size={48} className="mx-auto mb-3 opacity-50" />
                        <p>
                          {searchCardapio || dataInicioCardapio || dataFimCardapio
                            ? 'Nenhum pedido encontrado'
                            : statusFilterCardapio === 'pendente'
                              ? 'Nenhum pedido pendente'
                              : statusFilterCardapio === 'confirmado'
                                ? 'Nenhum pedido confirmado'
                                : statusFilterCardapio === 'preparando'
                                  ? 'Nenhum pedido sendo preparado'
                                  : statusFilterCardapio === 'pronto'
                                    ? 'Nenhum pedido pronto'
                                    : statusFilterCardapio === 'entregue'
                                      ? 'Nenhum pedido entregue'
                                      : 'Nenhum pedido cancelado'
                          }
                        </p>
                        <p className="text-sm mt-1">
                          {searchCardapio || dataInicioCardapio || dataFimCardapio
                            ? 'Tente ajustar os filtros'
                            : 'Os pedidos aparecerão aqui automaticamente'
                          }
                        </p>
                      </div>
                    ) : (
                      <div className="p-4 space-y-3">
                        {pedidosCardapioFiltrados.map((pedido) => (
                          <div
                            key={pedido.id}
                            onClick={() => selecionarPedido(pedido)}
                            className={`bg-gray-800/50 rounded-lg p-4 border transition-colors cursor-pointer ${
                              pedidoSelecionado?.id === pedido.id
                                ? 'border-orange-500 bg-orange-500/10'
                                : 'border-gray-700 hover:border-orange-500/50'
                            }`}
                          >
                            <div className="flex items-center justify-between mb-3">
                              <div>
                                {/* Botão Imprimir Pedido */}
                                <div className="flex items-center gap-2 mb-2">
                                  <button
                                    onClick={(e) => {
                                      e.stopPropagation(); // Evitar seleção do pedido
                                      imprimirPedidoCardapio(pedido);
                                    }}
                                    className="flex items-center gap-1 px-2 py-1 bg-blue-600 hover:bg-blue-700 text-white text-xs rounded-lg transition-colors"
                                    title="Imprimir o pedido"
                                  >
                                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                                      <polyline points="6,9 6,2 18,2 18,9"></polyline>
                                      <path d="M6,18H4a2,2,0,0,1-2-2V11a2,2,0,0,1,2-2H20a2,2,0,0,1,2,2v5a2,2,0,0,1-2,2H18"></path>
                                      <rect x="6" y="14" width="12" height="8"></rect>
                                    </svg>
                                    Imprimir o pedido
                                  </button>
                                </div>
                                <div className="flex items-center gap-2 mb-1">
                                  <h4 className="font-semibold text-white">#{pedido.numero_pedido}</h4>
                                  {/* ✅ TAG DE TIPO DE ENTREGA */}
                                  {pedido.tipo_entrega === 'retirada' ? (
                                    <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-500/20 text-green-300 border border-green-500/30">
                                      🏪 Retirada
                                    </span>
                                  ) : (
                                    <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-500/20 text-blue-300 border border-blue-500/30">
                                      🚴 Entrega
                                    </span>
                                  )}
                                </div>
                                {/* ✅ TAG DE NOTA FISCAL */}
                                {pedido.quer_nota_fiscal && pedido.cpf_cnpj_cliente && (
                                  <div className="mt-1 flex items-center gap-2">
                                    <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-500/20 text-blue-300 border border-blue-500/30">
                                      📄 Nota Fiscal
                                    </span>
                                    <span className="text-xs text-gray-400 font-mono">
                                      {pedido.cpf_cnpj_cliente}
                                    </span>
                                    <button
                                      onClick={(e) => {
                                        e.stopPropagation(); // Evitar que clique no card
                                        copiarCpfCnpj(pedido.cpf_cnpj_cliente);
                                      }}
                                      className="p-1 text-gray-400 hover:text-blue-300 hover:bg-blue-500/10 rounded transition-colors"
                                      title="Copiar CPF/CNPJ (apenas números)"
                                    >
                                      <Copy size={12} />
                                    </button>
                                  </div>
                                )}
                              </div>
                              <div className="text-right">
                                <p className="font-bold text-green-400">{formatarPreco(pedido.valor_total)}</p>
                                <p className="text-xs text-gray-500">
                                  {pedido.data_pedido ? new Date(pedido.data_pedido).toLocaleTimeString('pt-BR', {
                                    hour: '2-digit',
                                    minute: '2-digit'
                                  }) : 'Horário não disponível'}
                                </p>
                              </div>
                            </div>



                            {/* Botões de Ação baseados no status */}
                            {pedido.status_pedido === 'pendente' && (
                              <div className="flex gap-2">
                                <button
                                  onClick={() => aceitarPedidoComMudancaAba(pedido.id)}
                                  disabled={pedidosProcessando.has(pedido.id)}
                                  className={`flex-1 text-white text-sm py-2 px-3 rounded transition-colors flex items-center justify-center gap-2 ${
                                    pedidosProcessando.has(pedido.id)
                                      ? 'bg-gray-500 cursor-not-allowed'
                                      : 'bg-green-600 hover:bg-green-700'
                                  }`}
                                >
                                  {pedidosProcessando.has(pedido.id) ? (
                                    <>
                                      <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                                      Aceitando...
                                    </>
                                  ) : (
                                    <>✅ Aceitar</>
                                  )}
                                </button>
                                <button
                                  onClick={() => rejeitarPedidoComMudancaAba(pedido.id)}
                                  disabled={pedidosProcessando.has(pedido.id)}
                                  className={`flex-1 text-white text-sm py-2 px-3 rounded transition-colors flex items-center justify-center gap-2 ${
                                    pedidosProcessando.has(pedido.id)
                                      ? 'bg-gray-500 cursor-not-allowed'
                                      : 'bg-red-600 hover:bg-red-700'
                                  }`}
                                >
                                  {pedidosProcessando.has(pedido.id) ? (
                                    <>
                                      <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                                      Rejeitando...
                                    </>
                                  ) : (
                                    <>❌ Rejeitar</>
                                  )}
                                </button>
                              </div>
                            )}



                            {/* Botões de ação para todos os status (exceto pendente e o status atual) */}
                            {pedido.status_pedido !== 'pendente' && (
                              <div className="flex flex-col gap-2">
                                {/* Botões dinâmicos de status - Mostra todos os status possíveis exceto o atual e pendente */}
                                <div className="flex flex-wrap gap-2">
                                  {/* Botão Confirmar */}
                                  {pedido.status_pedido !== 'confirmado' && pedido.status_pedido !== 'pendente' && (
                                    <button
                                      onClick={async () => {
                                        const sucesso = await aceitarPedidoComMudancaAba(pedido.id);
                                        if (sucesso) {
                                          await carregarTodosPedidosCardapio();
                                          setTimeout(() => {
                                            setStatusFilterCardapio('confirmado');
                                          }, 200);
                                        }
                                      }}
                                      disabled={pedidosProcessando.has(pedido.id)}
                                      className={`flex-1 text-white text-xs py-2 px-2 rounded transition-colors flex items-center justify-center gap-1 ${
                                        pedidosProcessando.has(pedido.id)
                                          ? 'bg-gray-500 cursor-not-allowed'
                                          : 'bg-blue-600 hover:bg-blue-700'
                                      }`}
                                    >
                                      {pedidosProcessando.has(pedido.id) ? (
                                        <>
                                          <div className="w-3 h-3 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                                          Confirmando...
                                        </>
                                      ) : (
                                        <>✅ Confirmar</>
                                      )}
                                    </button>
                                  )}

                                  {/* Botão Preparar */}
                                  {pedido.status_pedido !== 'preparando' && pedido.status_pedido !== 'pendente' && (
                                    <button
                                      onClick={async () => {
                                        const sucesso = await marcarComoPreparando(pedido.id);
                                        if (sucesso) {
                                          await carregarTodosPedidosCardapio();
                                          setTimeout(() => {
                                            setStatusFilterCardapio('preparando');
                                          }, 200);
                                        }
                                      }}
                                      disabled={pedidosProcessando.has(pedido.id)}
                                      className={`flex-1 text-white text-xs py-2 px-2 rounded transition-colors flex items-center justify-center gap-1 ${
                                        pedidosProcessando.has(pedido.id)
                                          ? 'bg-gray-500 cursor-not-allowed'
                                          : 'bg-yellow-600 hover:bg-yellow-700'
                                      }`}
                                    >
                                      {pedidosProcessando.has(pedido.id) ? (
                                        <>
                                          <div className="w-3 h-3 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                                          Preparando...
                                        </>
                                      ) : (
                                        <>👨‍🍳 Preparar</>
                                      )}
                                    </button>
                                  )}

                                  {/* Botão Pronto */}
                                  {pedido.status_pedido !== 'pronto' && pedido.status_pedido !== 'pendente' && (
                                    <button
                                      onClick={async () => {
                                        const sucesso = await marcarComoPronto(pedido.id);
                                        if (sucesso) {
                                          await carregarTodosPedidosCardapio();
                                          setTimeout(() => {
                                            setStatusFilterCardapio('pronto');
                                          }, 200);
                                        }
                                      }}
                                      disabled={pedidosProcessando.has(pedido.id)}
                                      className={`flex-1 text-white text-xs py-2 px-2 rounded transition-colors flex items-center justify-center gap-1 ${
                                        pedidosProcessando.has(pedido.id)
                                          ? 'bg-gray-500 cursor-not-allowed'
                                          : 'bg-green-600 hover:bg-green-700'
                                      }`}
                                    >
                                      {pedidosProcessando.has(pedido.id) ? (
                                        <>
                                          <div className="w-3 h-3 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                                          Finalizando...
                                        </>
                                      ) : (
                                        <>🍽️ Pronto</>
                                      )}
                                    </button>
                                  )}

                                  {/* Botão Saiu para Entrega - só aparece quando tipo_entrega !== 'retirada' */}
                                  {pedido.status_pedido !== 'saiu_para_entrega' && pedido.status_pedido !== 'pendente' && pedido.tipo_entrega !== 'retirada' && (
                                    <button
                                      onClick={async () => {
                                        const sucesso = await marcarComoSaiuParaEntrega(pedido.id);
                                        if (sucesso) {
                                          await carregarTodosPedidosCardapio();
                                          setTimeout(() => {
                                            setStatusFilterCardapio('saiu_para_entrega');
                                          }, 200);
                                        }
                                      }}
                                      disabled={pedidosProcessando.has(pedido.id)}
                                      className={`flex-1 text-white text-xs py-2 px-2 rounded transition-colors flex items-center justify-center gap-1 ${
                                        pedidosProcessando.has(pedido.id)
                                          ? 'bg-gray-500 cursor-not-allowed'
                                          : 'bg-indigo-600 hover:bg-indigo-700'
                                      }`}
                                    >
                                      {pedidosProcessando.has(pedido.id) ? (
                                        <>
                                          <div className="w-3 h-3 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                                          Saindo...
                                        </>
                                      ) : (
                                        <>🚚 Saiu para Entrega</>
                                      )}
                                    </button>
                                  )}

                                  {/* Botão Entregar */}
                                  {pedido.status_pedido !== 'entregue' && pedido.status_pedido !== 'pendente' && (
                                    <button
                                      onClick={async () => {
                                        const sucesso = await marcarComoEntregue(pedido.id);
                                        if (sucesso) {
                                          await carregarTodosPedidosCardapio();
                                          setTimeout(() => {
                                            setStatusFilterCardapio('entregue');
                                          }, 200);
                                        }
                                      }}
                                      disabled={pedidosProcessando.has(pedido.id)}
                                      className={`flex-1 text-white text-xs py-2 px-2 rounded transition-colors flex items-center justify-center gap-1 ${
                                        pedidosProcessando.has(pedido.id)
                                          ? 'bg-gray-500 cursor-not-allowed'
                                          : 'bg-purple-600 hover:bg-purple-700'
                                      }`}
                                    >
                                      {pedidosProcessando.has(pedido.id) ? (
                                        <>
                                          <div className="w-3 h-3 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                                          Entregando...
                                        </>
                                      ) : (
                                        <>✅ Entregar</>
                                      )}
                                    </button>
                                  )}
                                </div>

                                {/* Linha separada para Faturar, status Faturado e Cancelar */}
                                <div className="flex gap-2">
                                  {/* Botão Faturar - Aparece apenas quando status = entregue E não foi faturado */}
                                  {pedido.status_pedido === 'entregue' && pedido.status_faturamento !== 'faturado' && (
                                    <button
                                      onClick={() => {
                                        setPedidoParaFaturar(pedido);
                                        setShowConfirmFaturarPedido(true);
                                      }}
                                      className="flex-1 text-white text-xs py-2 px-2 rounded transition-colors flex items-center justify-center gap-1 bg-emerald-600 hover:bg-emerald-700"
                                    >
                                      💰 Faturar
                                    </button>
                                  )}

                                  {/* Tag Faturado - Aparece quando status_faturamento = faturado */}
                                  {pedido.status_faturamento === 'faturado' && (
                                    <div className="flex-1 bg-emerald-600/20 border border-emerald-500/30 rounded px-2 py-2 text-center">
                                      <div className="text-emerald-400 text-xs font-medium flex items-center justify-center gap-1">
                                        ✅ Faturado
                                      </div>
                                      {pedido.numero_venda_pdv && (
                                        <div className="text-emerald-300 text-xs mt-1">
                                          Venda #{pedido.numero_venda_pdv}
                                        </div>
                                      )}
                                    </div>
                                  )}

                                  {/* Botão Cancelar - Aparece em todos os status exceto cancelado e faturado */}
                                  {pedido.status_pedido !== 'cancelado' && pedido.status_faturamento !== 'faturado' && (
                                    <button
                                      onClick={async () => {
                                        const sucesso = await rejeitarPedidoComMudancaAba(pedido.id);
                                        if (sucesso) {
                                          await carregarTodosPedidosCardapio();
                                          // Delay maior para garantir que os dados foram atualizados
                                          setTimeout(() => {
                                            setStatusFilterCardapio('cancelado');
                                          }, 200);
                                        }
                                      }}
                                      disabled={pedidosProcessando.has(pedido.id)}
                                      className={`flex-1 text-white text-xs py-2 px-2 rounded transition-colors flex items-center justify-center gap-1 ${
                                        pedidosProcessando.has(pedido.id)
                                          ? 'bg-gray-500 cursor-not-allowed'
                                          : 'bg-red-600 hover:bg-red-700'
                                      }`}
                                    >
                                      {pedidosProcessando.has(pedido.id) ? (
                                        <>
                                          <div className="w-3 h-3 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                                          Cancelando...
                                        </>
                                      ) : (
                                        <>❌ Cancelar</>
                                      )}
                                    </button>
                                  )}
                                </div>
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>

                {/* Área de Detalhes */}
                <div className="flex-1 bg-gray-800/30">
                  {!pedidoSelecionado ? (
                    <div className="flex items-center justify-center h-full">
                      <div className="text-center text-gray-400">
                        <BookOpen size={64} className="mx-auto mb-4 opacity-50" />
                        <h3 className="text-lg font-semibold mb-2">Selecione um pedido</h3>
                        <p className="text-sm">Clique em um pedido para ver os detalhes</p>
                      </div>
                    </div>
                  ) : (
                    <div className="h-full overflow-y-auto">
                      {/* Header do Pedido */}
                      <div className="bg-gray-800/50 border-b border-gray-700 p-6">
                        <div className="flex items-start justify-between mb-4">
                          <div>
                            <h2 className="text-2xl font-bold text-white">#{pedidoSelecionado.numero_pedido || 'S/N'}</h2>
                            <p className="text-gray-400">Pedido realizado em {pedidoSelecionado.data_pedido ? new Date(pedidoSelecionado.data_pedido).toLocaleString('pt-BR') : 'Data não disponível'}</p>
                          </div>
                          <div className="text-right">
                            <p className="text-2xl font-bold text-green-400">{formatarPreco(pedidoSelecionado.valor_total || 0)}</p>
                          </div>
                        </div>

                        {/* Informações do Cliente */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="bg-gray-700/50 rounded-lg p-4">
                            <h3 className="text-sm font-semibold text-gray-300 mb-2">👤 Cliente</h3>
                            <p className="text-white font-medium">{pedidoSelecionado.nome_cliente}</p>
                            <p className="text-gray-400 text-sm">{pedidoSelecionado.telefone_cliente}</p>
                          </div>

                          {/* Dados de Entrega */}
                          {pedidoSelecionado.tem_entrega && (
                            <div className="bg-gray-700/50 rounded-lg p-4">
                              <h3 className="text-sm font-semibold text-gray-300 mb-2">🚚 Entrega</h3>
                              <div className="space-y-1 text-sm">
                                {/* Endereço Principal */}
                                {pedidoSelecionado.endereco_entrega && (
                                  <p className="text-white">
                                    📍 {pedidoSelecionado.endereco_entrega}
                                    {pedidoSelecionado.numero_entrega && `, ${pedidoSelecionado.numero_entrega}`}
                                  </p>
                                )}

                                {/* Bairro e Cidade */}
                                {(pedidoSelecionado.bairro_entrega || pedidoSelecionado.cidade_entrega) && (
                                  <p className="text-gray-300">
                                    {pedidoSelecionado.bairro_entrega && `Bairro: ${pedidoSelecionado.bairro_entrega}`}
                                    {pedidoSelecionado.bairro_entrega && pedidoSelecionado.cidade_entrega && ', '}
                                    {pedidoSelecionado.cidade_entrega && `${pedidoSelecionado.cidade_entrega}`}
                                    {pedidoSelecionado.estado_entrega && ` - ${pedidoSelecionado.estado_entrega}`}
                                  </p>
                                )}

                                {/* CEP */}
                                {pedidoSelecionado.cep_entrega && (
                                  <p className="text-gray-300">CEP: {pedidoSelecionado.cep_entrega}</p>
                                )}

                                {/* Complemento */}
                                {pedidoSelecionado.complemento_entrega && (
                                  <p className="text-gray-300">Complemento: {pedidoSelecionado.complemento_entrega}</p>
                                )}

                                {/* Tipo de Endereço */}
                                {pedidoSelecionado.tipo_endereco && (
                                  <p className="text-blue-400 text-xs">
                                    Tipo: {pedidoSelecionado.tipo_endereco === 'casa' ? '🏠 Casa' : '🏢 Condomínio'}
                                  </p>
                                )}

                                {/* Dados do Condomínio */}
                                {pedidoSelecionado.tipo_endereco === 'condominio' && (
                                  <>
                                    {pedidoSelecionado.nome_condominio && (
                                      <p className="text-gray-300 text-xs">Condomínio: {pedidoSelecionado.nome_condominio}</p>
                                    )}
                                    {pedidoSelecionado.bloco_endereco && (
                                      <p className="text-gray-300 text-xs">Bloco: {pedidoSelecionado.bloco_endereco}</p>
                                    )}
                                  </>
                                )}

                                {/* Ponto de Referência */}
                                {pedidoSelecionado.proximo_a && (
                                  <p className="text-gray-300 text-xs">Próximo a: {pedidoSelecionado.proximo_a}</p>
                                )}

                                {/* Taxa de Entrega e Tempo */}
                                {(pedidoSelecionado.valor_taxa_entrega > 0 || pedidoSelecionado.tempo_estimado_minutos) && (
                                  <div className="mt-2 pt-2 border-t border-gray-600">
                                    {pedidoSelecionado.valor_taxa_entrega > 0 && (
                                      <p className="text-green-400 text-xs">
                                        Taxa: {new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(pedidoSelecionado.valor_taxa_entrega)}
                                      </p>
                                    )}
                                    {pedidoSelecionado.tempo_estimado_minutos && (
                                      <p className="text-yellow-400 text-xs">
                                        Tempo estimado: {pedidoSelecionado.tempo_estimado_minutos} min
                                      </p>
                                    )}
                                    {pedidoSelecionado.distancia_km && (
                                      <p className="text-gray-400 text-xs">
                                        Distância: {pedidoSelecionado.distancia_km} km
                                      </p>
                                    )}
                                  </div>
                                )}
                              </div>
                            </div>
                          )}

                          {/* Retirada no Balcão */}
                          {!pedidoSelecionado.tem_entrega && (
                            <div className="bg-gray-700/50 rounded-lg p-4">
                              <h3 className="text-sm font-semibold text-gray-300 mb-2">🏪 Retirada</h3>
                              <p className="text-white text-sm">Retirada no balcão</p>
                              <p className="text-gray-400 text-xs">Cliente irá retirar no estabelecimento</p>
                            </div>
                          )}
                        </div>

                        {/* Itens do Pedido - Estilo Carrinho Compacto */}
                        <div className="mt-4">
                          <h3 className="text-lg font-semibold text-white mb-4">🛒 Itens do Pedido</h3>
                          <div className="space-y-3">
                            {pedidoSelecionado.itens_pedido && pedidoSelecionado.itens_pedido.length > 0 ? (
                              pedidoSelecionado.itens_pedido.map((item: any, index: number) => (
                              <div key={index} className="bg-gray-700/30 rounded-lg p-4 border border-gray-600">
                                <div className="flex items-start gap-4">
                                  {/* Foto do Produto */}
                                  <div className="w-16 h-16 bg-gray-800 rounded-lg overflow-hidden flex-shrink-0">
                                    {item.produto_foto ? (
                                      <img
                                        src={item.produto_foto}
                                        alt={item.produto_nome || item.nome_produto || 'Produto'}
                                        className="w-full h-full object-cover"
                                        onError={(e) => {
                                          e.currentTarget.style.display = 'none';
                                          e.currentTarget.nextElementSibling?.classList.remove('hidden');
                                        }}
                                      />
                                    ) : null}
                                    <div className={`w-full h-full flex items-center justify-center ${item.produto_foto ? 'hidden' : ''}`}>
                                      <Package size={20} className="text-gray-500" />
                                    </div>
                                  </div>

                                  {/* Informações do Produto */}
                                  <div className="flex-1 min-w-0">
                                    <div className="flex items-start justify-between">
                                      <div className="flex-1">
                                        <h4 className="font-medium text-white text-base leading-tight">
                                          {item.produto_nome || item.nome_produto || 'Produto sem nome'}
                                        </h4>

                                        {/* Preço com desconto (se houver) */}
                                        <div className="mt-1">
                                          {item.desconto_aplicado || item.promocao_ativa ? (
                                            <div className="flex items-center gap-2">
                                              <span className="text-gray-400 line-through text-sm">
                                                {formatarPreco(item.preco_original || item.preco_unitario || 0)}
                                              </span>
                                              <span className="text-green-400 font-medium">
                                                {formatarPreco(item.preco_unitario || 0)}
                                              </span>
                                              {item.percentual_desconto && (
                                                <span className="bg-green-500/20 text-green-400 text-xs px-2 py-1 rounded">
                                                  {item.percentual_desconto}% OFF
                                                </span>
                                              )}
                                            </div>
                                          ) : (
                                            <span className="text-gray-300">
                                              {formatarPreco(item.preco_unitario || 0)}
                                            </span>
                                          )}
                                        </div>

                                        {/* Quantidade */}
                                        <p className="text-sm text-gray-400 mt-1">
                                          {formatarPreco(item.preco_unitario || 0)} x {item.quantidade || 0} = {formatarPreco(item.preco_total || item.subtotal || 0)}
                                        </p>

                                        {/* Sabores (para pizzas) */}
                                        {item.sabores && item.sabores.length > 0 && (
                                          <div className="mt-2">
                                            <p className="text-xs text-gray-400 mb-1">Sabores:</p>
                                            <div className="space-y-1">
                                              {item.sabores.map((sabor: any, idx: number) => {
                                                const fracao = converterPorcentagemParaFracao(sabor.porcentagem || 0, item.sabores.length);
                                                const nomeSabor = sabor.produto?.nome || sabor.nome || sabor.produto_nome || 'Sabor';
                                                return (
                                                  <div key={idx} className="text-xs text-gray-800 dark:text-gray-200">
                                                    <span className="font-bold">
                                                      {fracao && `• ${fracao} `}{nomeSabor}
                                                    </span>
                                                  </div>
                                                );
                                              })}
                                            </div>
                                          </div>
                                        )}

                                        {/* Adicionais */}
                                        {item.adicionais && item.adicionais.length > 0 && (
                                          <div className="mt-2">
                                            <p className="text-xs text-gray-400 mb-1">Adicionais:</p>
                                            {item.adicionais.map((adicional: any, idx: number) => (
                                              <p key={idx} className="text-xs text-purple-400">
                                                + {adicional.nome || adicional.produto_nome || 'Adicional'}
                                                ({formatarPreco(adicional.preco || adicional.preco_unitario || 0)})
                                              </p>
                                            ))}
                                          </div>
                                        )}

                                        {/* Observação */}
                                        {item.observacao && (
                                          <p className="text-xs text-yellow-400 mt-2 bg-yellow-500/10 rounded px-2 py-1">
                                            💬 {item.observacao}
                                          </p>
                                        )}
                                      </div>

                                      {/* Valor Total do Item */}
                                      <div className="text-right ml-4">
                                        <p className="font-bold text-green-400 text-lg">
                                          {formatarPreco(item.preco_total || item.subtotal || 0)}
                                        </p>
                                        {item.desconto_aplicado && (
                                          <p className="text-xs text-green-400">
                                            Economia: {formatarPreco(item.valor_desconto || 0)}
                                          </p>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              ))
                            ) : (
                              <div className="text-center text-gray-400 py-8">
                                <Package size={48} className="mx-auto mb-3 opacity-50" />
                                <p>Nenhum item encontrado para este pedido</p>
                              </div>
                            )}
                          </div>
                        </div>

                        {/* Cards de Observações e Pagamento na mesma linha */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                          {/* Observações - Lado Esquerdo */}
                          {(pedidoSelecionado.observacao_pedido || pedidoSelecionado.observacao_entrega) && (
                            <div className="bg-gray-700/50 rounded-lg p-4">
                              <h3 className="text-sm font-semibold text-gray-300 mb-2">📝 Observações</h3>
                              {pedidoSelecionado.observacao_pedido && (
                                <p className="text-white text-sm mb-2">
                                  <span className="text-gray-400">Pedido:</span> {pedidoSelecionado.observacao_pedido}
                                </p>
                              )}
                              {pedidoSelecionado.observacao_entrega && (
                                <p className="text-white text-sm">
                                  <span className="text-gray-400">Entrega:</span> {pedidoSelecionado.observacao_entrega}
                                </p>
                              )}
                            </div>
                          )}

                          {/* Pagamento - Lado Direito */}
                          {pedidoSelecionado.forma_pagamento_nome && (
                            <div className="bg-gray-700/50 rounded-lg p-4">
                              <h3 className="text-sm font-semibold text-gray-300 mb-2">💳 Pagamento</h3>
                              <p className="text-white">
                                {pedidoSelecionado.forma_pagamento_nome}
                                {(() => {
                                  // Se for dinheiro, mostrar informações de troco
                                  if (pedidoSelecionado.forma_pagamento_tipo === 'dinheiro' && pedidoSelecionado.forma_pagamento_detalhes) {
                                    const detalhes = pedidoSelecionado.forma_pagamento_detalhes;
                                    if (detalhes.precisa_troco === false) {
                                      return ' (SEM TROCO)';
                                    } else if (detalhes.precisa_troco === true && detalhes.troco > 0) {
                                      return ` (Troco ${formatCurrency(detalhes.troco)})`;
                                    }
                                  }
                                  return '';
                                })()}
                              </p>
                              {pedidoSelecionado.forma_pagamento_tipo && pedidoSelecionado.forma_pagamento_tipo !== 'dinheiro' && (
                                <p className="text-gray-400 text-sm">Tipo: {pedidoSelecionado.forma_pagamento_tipo}</p>
                              )}
                            </div>
                          )}
                        </div>

                        {/* Cupom de Desconto - Linha separada se houver */}
                        {pedidoSelecionado.cupom_codigo && (
                          <div className="mt-4">
                            <div className="bg-gray-700/50 rounded-lg p-4">
                              <h3 className="text-sm font-semibold text-gray-300 mb-2">🎫 Cupom de Desconto</h3>
                              <p className="text-white font-medium">{pedidoSelecionado.cupom_codigo}</p>
                              {pedidoSelecionado.cupom_descricao && (
                                <p className="text-gray-400 text-sm">{pedidoSelecionado.cupom_descricao}</p>
                              )}
                            </div>
                          </div>
                        )}
                      </div>

                      {/* Resumo do Pedido */}
                      <div className="p-6">
                        <div className="bg-gray-700/30 rounded-lg p-4 border border-gray-600">
                          <h4 className="font-semibold text-white mb-3">💰 Resumo</h4>
                          <div className="space-y-2">
                            <div className="flex justify-between text-sm">
                              <span className="text-gray-400">Subtotal produtos:</span>
                              <span className="text-white">{formatarPreco(pedidoSelecionado.valor_produtos || pedidoSelecionado.valor_total || 0)}</span>
                            </div>
                            {(pedidoSelecionado.valor_desconto_cupom || 0) > 0 && (
                              <div className="flex justify-between text-sm">
                                <span className="text-gray-400">Desconto cupom:</span>
                                <span className="text-red-400">-{formatarPreco(pedidoSelecionado.valor_desconto_cupom || 0)}</span>
                              </div>
                            )}
                            {(pedidoSelecionado.valor_taxa_entrega || 0) > 0 && (
                              <div className="flex justify-between text-sm">
                                <span className="text-gray-400">Taxa de entrega:</span>
                                <span className="text-white">{formatarPreco(pedidoSelecionado.valor_taxa_entrega || 0)}</span>
                              </div>
                            )}
                            <div className="border-t border-gray-600 pt-2">
                              <div className="flex justify-between font-semibold">
                                <span className="text-white">Total:</span>
                                <span className="text-green-400 text-lg">{formatarPreco(pedidoSelecionado.valor_total || 0)}</span>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Habilitação Inicial - Som do Cardápio Digital */}
      <AnimatePresence>
        {showModalHabilitarSomInicial && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4"
            onClick={(e) => e.stopPropagation()} // Não fechar clicando fora
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card border border-gray-800 rounded-lg p-6 max-w-md w-full mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" className="text-blue-400">
                    <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"/>
                    <path d="M15.54 8.46a5 5 0 0 1 0 7.07"/>
                    <path d="M19.07 4.93a10 10 0 0 1 0 14.14"/>
                  </svg>
                </div>
                <h3 className="text-lg font-semibold text-white">Ativar Som do Cardápio</h3>
              </div>

              <p className="text-gray-300 mb-6">
                Você tem o <span className="text-blue-400 font-medium">Cardápio Digital</span> ativo!
                <br /><br />
                Deseja habilitar o <span className="text-blue-400 font-medium">som de notificação</span> para ser alertado quando chegarem novos pedidos?
                <br /><br />
                <span className="text-green-400 text-sm">
                  ✅ Recomendado para não perder nenhum pedido
                </span>
              </p>

              <div className="flex gap-3">
                <button
                  onClick={cancelarHabilitarSomInicial}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Agora Não
                </button>
                <button
                  onClick={confirmarHabilitarSomInicial}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Sim, Ativar Som
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Confirmação - Desabilitar Som do Cardápio Digital */}
      <AnimatePresence>
        {showModalDesabilitarSom && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center p-4"
            onClick={cancelarDesabilitarSom}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-background-card border border-gray-800 rounded-lg p-6 max-w-md w-full mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-orange-500/20 rounded-full flex items-center justify-center">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" className="text-orange-400">
                    <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"/>
                    <line x1="23" y1="9" x2="17" y2="15"/>
                    <line x1="17" y1="9" x2="23" y2="15"/>
                  </svg>
                </div>
                <h3 className="text-lg font-semibold text-white">Desabilitar Som do Cardápio</h3>
              </div>

              <p className="text-gray-300 mb-6">
                Deseja realmente desabilitar o som do cardápio digital?
                <br /><br />
                <span className="text-orange-400">
                  Você não receberá alertas sonoros de novos pedidos até reativar manualmente.
                </span>
              </p>

              <div className="flex gap-3">
                <button
                  onClick={cancelarDesabilitarSom}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={confirmarDesabilitarSom}
                  className="flex-1 bg-orange-600 hover:bg-orange-700 text-white py-2 px-4 rounded-lg transition-colors"
                >
                  OK
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* ✅ NOVO: Modal de Loading para Primeiro Item */}
      <AnimatePresence>
        {loadingPrimeiroItem && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/70 backdrop-blur-sm z-[9999] flex items-center justify-center"
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              className="bg-gray-800/90 backdrop-blur-md border border-gray-600/50 rounded-2xl p-8 flex flex-col items-center gap-6 shadow-2xl"
            >
              {/* Spinner Grande */}
              <div className="relative">
                <div className="w-16 h-16 border-4 border-blue-500/30 border-t-blue-400 rounded-full animate-spin"></div>
                <div className="absolute inset-0 w-16 h-16 border-4 border-transparent border-r-blue-300 rounded-full animate-spin" style={{ animationDirection: 'reverse', animationDuration: '1.5s' }}></div>
              </div>

              {/* Texto de Loading */}
              <div className="text-center">
                <h3 className="text-xl font-semibold text-white mb-2">
                  Preparando seu primeiro item...
                </h3>
                <p className="text-gray-300 text-sm">
                  Configurando sistema de pagamentos e carrinho
                </p>
              </div>

              {/* Pontos Animados */}
              <div className="flex gap-1">
                <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              </div>

              {/* Código sendo processado */}
              {codigoBuscando && (
                <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg px-4 py-2">
                  <span className="text-blue-300 text-sm">
                    Processando código: <span className="font-mono font-bold">{codigoBuscando}</span>
                  </span>
                </div>
              )}
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* ✅ NOVO: Modal de Aviso - Fiado sem Cliente */}
      <AnimatePresence>
        {showFiadoSemClienteModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/70 backdrop-blur-sm z-[9999] flex items-center justify-center p-4"
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              className="bg-gray-800/95 backdrop-blur-md border border-gray-600/50 rounded-2xl p-6 max-w-md w-full shadow-2xl"
            >
              {/* Ícone de Aviso */}
              <div className="flex items-center justify-center mb-4">
                <div className="w-16 h-16 bg-yellow-500/20 rounded-full flex items-center justify-center">
                  <svg className="w-8 h-8 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                  </svg>
                </div>
              </div>

              {/* Título */}
              <h3 className="text-xl font-bold text-white text-center mb-3">
                Cliente Obrigatório para Fiado
              </h3>

              {/* Mensagem */}
              <p className="text-gray-300 text-center mb-6 leading-relaxed">
                Para realizar uma venda <span className="text-yellow-400 font-semibold">fiado</span>, é necessário selecionar um cliente.
                Isso é obrigatório para controle e cobrança posterior.
              </p>

              {/* Botões */}
              <div className="flex gap-3">
                <button
                  onClick={() => setShowFiadoSemClienteModal(false)}
                  className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-3 px-4 rounded-lg transition-colors font-medium"
                >
                  Cancelar
                </button>
                <button
                  onClick={() => {
                    setShowFiadoSemClienteModal(false);
                    // Abrir modal de seleção de cliente
                    setShowClienteModal(true);
                  }}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg transition-colors font-medium"
                >
                  Selecionar Cliente
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Devoluções Pendentes */}
      <AnimatePresence>
        {showDevolucoesModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/70 backdrop-blur-sm z-[9999] flex items-center justify-center p-0"
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              className="bg-gray-800/95 backdrop-blur-md border border-gray-600/50 w-full h-full overflow-hidden shadow-2xl flex flex-col"
            >
              {/* Header */}
              <div className="flex items-center justify-between p-6 border-b border-gray-700/50">
                <div className="flex items-center gap-3">
                  <RotateCcw className="text-red-400" size={24} />
                  <h2 className="text-xl font-semibold text-white">
                    Devoluções Pendentes
                  </h2>
                </div>
                <button
                  onClick={() => setShowDevolucoesModal(false)}
                  className="text-gray-400 hover:text-white transition-colors p-2 rounded-lg hover:bg-gray-700/50"
                >
                  <X size={20} />
                </button>
              </div>

              {/* Campo de Pesquisa */}
              <div className="p-6 border-b border-gray-700/50">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                  <input
                    type="text"
                    placeholder="Pesquisar por cliente, código de troca ou número da venda..."
                    value={searchDevolucoes}
                    onChange={(e) => setSearchDevolucoes(e.target.value)}
                    className="w-full pl-10 pr-4 py-3 bg-gray-700/50 border border-gray-600/50 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-red-500/50 focus:border-red-500/50"
                  />
                </div>
              </div>

              {/* Lista de Devoluções */}
              <div className="flex-1 overflow-y-auto p-6">
                {loadingDevolucoes ? (
                  <div className="flex items-center justify-center py-12">
                    <div className="flex flex-col items-center gap-4">
                      <div className="w-8 h-8 border-2 border-red-500/30 border-t-red-400 rounded-full animate-spin"></div>
                      <p className="text-gray-400">Carregando devoluções...</p>
                    </div>
                  </div>
                ) : (
                  <>
                    {devolucoesPendentes.filter(devolucao =>
                      !searchDevolucoes ||
                      devolucao.cliente_nome?.toLowerCase().includes(searchDevolucoes.toLowerCase()) ||
                      devolucao.codigo_troca?.toLowerCase().includes(searchDevolucoes.toLowerCase()) ||
                      devolucao.numero?.toLowerCase().includes(searchDevolucoes.toLowerCase()) ||
                      devolucao.venda_origem_numero?.toLowerCase().includes(searchDevolucoes.toLowerCase())
                    ).length === 0 ? (
                      <div className="text-center py-12">
                        <RotateCcw className="mx-auto text-gray-500 mb-4" size={48} />
                        <p className="text-gray-400 text-lg">
                          {searchDevolucoes ? 'Nenhuma devolução encontrada' : 'Nenhuma devolução pendente'}
                        </p>
                        {searchDevolucoes && (
                          <p className="text-gray-500 text-sm mt-2">
                            Tente pesquisar por outro termo
                          </p>
                        )}
                      </div>
                    ) : (
                      <div className="space-y-3">
                        {devolucoesPendentes
                          .filter(devolucao =>
                            !searchDevolucoes ||
                            devolucao.cliente_nome?.toLowerCase().includes(searchDevolucoes.toLowerCase()) ||
                            devolucao.codigo_troca?.toLowerCase().includes(searchDevolucoes.toLowerCase()) ||
                            devolucao.numero?.toLowerCase().includes(searchDevolucoes.toLowerCase()) ||
                            devolucao.venda_origem_numero?.toLowerCase().includes(searchDevolucoes.toLowerCase())
                          )
                          .map((devolucao, index) => (
                            <motion.div
                              key={devolucao.id}
                              initial={{ opacity: 0, y: 20 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: index * 0.05 }}
                              className={`p-2.5 rounded border transition-colors ${
                                devolucao.jaNoCarrinho
                                  ? 'bg-green-900/20 border-green-600/30 opacity-60 cursor-not-allowed'
                                  : 'bg-background-card border-gray-800 hover:border-gray-700 cursor-pointer'
                              }`}
                              onClick={(e) => {
                                if (devolucao.jaNoCarrinho) {
                                  toast.warning('Esta troca já está aplicada no carrinho');
                                  return;
                                }

                                console.log('🔍 Clique no card da devolução detectado!', devolucao.numero);
                                console.log('🛒 Itens no carrinho:', carrinho.length);

                                // Só permite aplicar como desconto se houver itens no carrinho
                                if (carrinho.length > 0) {
                                  console.log('✅ Abrindo modal de confirmação...');
                                  console.log('📋 Devolução selecionada:', devolucao);
                                  setDevolucaoSelecionada(devolucao);
                                  setShowConfirmarDevolucaoModal(true);
                                  console.log('🔄 Estados atualizados - showConfirmarDevolucaoModal: true');

                                  // Verificar se os estados foram atualizados
                                  setTimeout(() => {
                                    console.log('⏰ Verificando estados após timeout...');
                                    console.log('showConfirmarDevolucaoModal:', showConfirmarDevolucaoModal);
                                    console.log('devolucaoSelecionada:', devolucaoSelecionada);
                                  }, 100);
                                } else {
                                  console.log('❌ Carrinho vazio, mostrando erro...');
                                  toast.error('Adicione itens ao carrinho antes de aplicar uma devolução como desconto');
                                }
                              }}
                            >
                              {/* Layout em três colunas - Compacto */}
                              <div className="flex items-start gap-3">
                                {/* Coluna Esquerda - Número e Cliente */}
                                <div className="flex-[2] min-w-0">
                                  {/* Código de Troca */}
                                  {devolucao.codigo_troca && (
                                    <div className="mb-1">
                                      <span className="text-xs px-2 py-1 bg-blue-500/20 text-blue-400 rounded border border-blue-500/30 font-mono">
                                        {devolucao.codigo_troca}
                                      </span>
                                    </div>
                                  )}
                                  <div className="flex items-center gap-2 mb-0.5">
                                    <span className="text-white font-medium text-sm">#{devolucao.numero}</span>
                                    {devolucao.jaNoCarrinho ? (
                                      <span className="text-xs px-1.5 py-0.5 rounded-full text-green-400 border-green-400 bg-green-500/20 border">
                                        No Carrinho
                                      </span>
                                    ) : (
                                      <span className="text-xs px-1.5 py-0.5 rounded-full text-yellow-400 border-yellow-400 bg-opacity-20 border">
                                        Pendente
                                      </span>
                                    )}
                                  </div>
                                  <p className="text-gray-400 text-sm truncate">
                                    {devolucao.cliente_nome || 'Sem Cliente'}
                                  </p>
                                  {devolucao.venda_origem_numero && (
                                    <p className="text-gray-500 text-xs">
                                      Pedido: #{devolucao.venda_origem_numero}
                                    </p>
                                  )}
                                </div>

                                {/* Coluna Central - Detalhes da Devolução */}
                                <div className="flex-[2] min-w-0">
                                  <div className="space-y-1">
                                    {/* Data da devolução */}
                                    <p className="text-gray-400 text-xs">
                                      {new Date(devolucao.created_at).toLocaleDateString('pt-BR', {
                                        day: '2-digit',
                                        month: '2-digit',
                                        year: 'numeric',
                                        hour: '2-digit',
                                        minute: '2-digit'
                                      })}
                                    </p>

                                    {/* Forma de reembolso */}
                                    <p className="text-gray-500 text-xs capitalize">
                                      {devolucao.forma_reembolso?.replace('_', ' ')}
                                    </p>

                                    {/* Motivo se houver */}
                                    {devolucao.motivo_geral && (
                                      <p className="text-gray-500 text-xs truncate" title={devolucao.motivo_geral}>
                                        {devolucao.motivo_geral}
                                      </p>
                                    )}
                                  </div>
                                </div>

                                {/* Coluna Direita - Valor e Ações */}
                                <div className="flex-shrink-0 text-right">
                                  <div className="flex items-center gap-1 mb-1">
                                    <DollarSign size={12} className="text-green-400" />
                                    <span className="text-white font-medium text-sm">
                                      {new Intl.NumberFormat('pt-BR', {
                                        style: 'currency',
                                        currency: 'BRL'
                                      }).format(devolucao.valor_total)}
                                    </span>
                                  </div>
                                  {/* Indicador visual de que pode clicar para aplicar desconto */}
                                  {carrinho.length > 0 && !devolucao.jaNoCarrinho && (
                                    <div className="flex items-center gap-1 mt-1">
                                      <Percent size={12} className="text-orange-400" />
                                      <span className="text-xs text-orange-400">Clique para aplicar desconto</span>
                                    </div>
                                  )}
                                  {devolucao.jaNoCarrinho && (
                                    <div className="flex items-center gap-1 mt-1">
                                      <CheckCircle size={12} className="text-green-400" />
                                      <span className="text-xs text-green-400">Já aplicada no carrinho</span>
                                    </div>
                                  )}
                                </div>
                              </div>
                            </motion.div>
                          ))}
                      </div>
                    )}
                  </>
                )}
              </div>

              {/* Footer */}
              <div className="p-6 border-t border-gray-700/50">
                <div className="flex items-center justify-between">
                  <p className="text-gray-400 text-sm">
                    {devolucoesPendentes.length} devolução(ões) pendente(s)
                  </p>
                  <button
                    onClick={() => setShowDevolucoesModal(false)}
                    className="px-6 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
                  >
                    Fechar
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Confirmação para Aplicar Devolução como Desconto */}
      <AnimatePresence>
        {showConfirmarDevolucaoModal && devolucaoSelecionada && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-[9999] p-4"
            onClick={() => setShowConfirmarDevolucaoModal(false)}
            onAnimationStart={() => console.log('🎬 Modal de confirmação está sendo renderizado!')}
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              className="bg-gray-900 rounded-lg border border-gray-700 w-full max-w-md"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-6 p-6 border-b border-gray-700">
                <h3 className="text-xl font-bold text-white flex items-center gap-2">
                  <Percent size={24} className="text-orange-400" />
                  Aplicar Devolução como Desconto
                </h3>
                <button
                  onClick={() => setShowConfirmarDevolucaoModal(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="px-6 pb-6">
                {/* Informações da Devolução */}
                <div className="bg-gray-800/50 rounded-lg p-4 mb-4">
                  <h4 className="text-white font-medium mb-3">Detalhes da Devolução</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-400">Número:</span>
                      <span className="text-white">#{devolucaoSelecionada.numero}</span>
                    </div>
                    {devolucaoSelecionada.codigo_troca && (
                      <div className="flex justify-between">
                        <span className="text-gray-400">Código:</span>
                        <span className="text-blue-400 font-mono">{devolucaoSelecionada.codigo_troca}</span>
                      </div>
                    )}
                    <div className="flex justify-between">
                      <span className="text-gray-400">Cliente:</span>
                      <span className="text-white">{devolucaoSelecionada.cliente_nome || 'Sem Cliente'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Valor:</span>
                      <span className="text-green-400 font-medium">
                        {formatCurrency(devolucaoSelecionada.valor_total)}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Resumo da Aplicação */}
                <div className="bg-orange-500/10 border border-orange-500/30 rounded-lg p-4 mb-4">
                  <h4 className="text-orange-400 font-medium mb-3">Resumo da Aplicação</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-400">Total atual da venda:</span>
                      <span className="text-white">
                        {formatCurrency(carrinho.reduce((total, item) => total + item.subtotal, 0))}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-orange-400">Desconto a aplicar:</span>
                      <span className="text-orange-400">
                        -{formatCurrency(devolucaoSelecionada.valor_total)}
                      </span>
                    </div>
                    <div className="border-t border-orange-500/30 pt-2 mt-2">
                      <div className="flex justify-between">
                        <span className="text-white font-medium">Total com desconto:</span>
                        <span className="text-green-400 font-bold">
                          {formatCurrency(
                            carrinho.reduce((total, item) => total + item.subtotal, 0) - devolucaoSelecionada.valor_total
                          )}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Aviso */}
                <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-3 mb-4">
                  <div className="flex items-start gap-2">
                    <AlertTriangle size={16} className="text-yellow-400 mt-0.5 flex-shrink-0" />
                    <div className="text-yellow-400 text-xs">
                      <p className="font-medium mb-1">Atenção:</p>
                      <p>O valor da devolução será aplicado como desconto no total desta venda. Esta ação substituirá qualquer desconto no total já aplicado.</p>
                    </div>
                  </div>
                </div>

                {/* Botões */}
                <div className="flex gap-3">
                  <button
                    onClick={() => setShowConfirmarDevolucaoModal(false)}
                    className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded-lg transition-colors"
                  >
                    Cancelar
                  </button>
                  <button
                    onClick={() => aplicarDevolucaoComoDesconto(devolucaoSelecionada)}
                    className="flex-1 bg-orange-500 hover:bg-orange-600 text-white py-2 px-4 rounded-lg transition-colors"
                  >
                    Aplicar Desconto
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Valor Negativo */}
      <AnimatePresence>
        {showValorNegativoModal && valorNegativoInfo && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/70 backdrop-blur-sm z-[9999] flex items-center justify-center p-4"
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              className="bg-gray-900 rounded-xl border border-red-500/30 p-6 max-w-md w-full"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 bg-red-500/20 rounded-lg">
                  <AlertTriangle className="w-6 h-6 text-red-400" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">
                    Carrinho Ficaria Negativo
                  </h3>
                  <p className="text-sm text-gray-400">
                    Não é possível remover este item
                  </p>
                </div>
              </div>

              {/* Conteúdo */}
              <div className="space-y-4 mb-6">
                <div className="bg-gray-800/50 rounded-lg p-4 border border-gray-700">
                  <p className="text-gray-300 mb-3">
                    Ao remover <span className="font-medium text-white">"{valorNegativoInfo.itemRemovido}"</span>,
                    o carrinho ficaria com valor negativo devido às devoluções aplicadas.
                  </p>

                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-400">Valor das devoluções:</span>
                      <span className="text-red-400 font-medium">
                        -{new Intl.NumberFormat('pt-BR', {
                          style: 'currency',
                          currency: 'BRL'
                        }).format(valorNegativoInfo.valorDevolucoes)}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Valor dos itens restantes:</span>
                      <span className="text-green-400 font-medium">
                        {new Intl.NumberFormat('pt-BR', {
                          style: 'currency',
                          currency: 'BRL'
                        }).format(valorNegativoInfo.valorItensPositivos)}
                      </span>
                    </div>
                    <div className="border-t border-gray-600 pt-2 flex justify-between">
                      <span className="text-gray-300 font-medium">Total resultante:</span>
                      <span className="text-red-400 font-bold">
                        {new Intl.NumberFormat('pt-BR', {
                          style: 'currency',
                          currency: 'BRL'
                        }).format(valorNegativoInfo.totalResultante)}
                      </span>
                    </div>
                  </div>
                </div>

                <div className="bg-blue-900/20 border border-blue-500/30 rounded-lg p-4">
                  <h4 className="text-blue-400 font-medium mb-2">💡 Para remover este item:</h4>
                  <ul className="text-sm text-gray-300 space-y-1">
                    <li>• Remova primeiro as devoluções aplicadas, ou</li>
                    <li>• Adicione mais itens para manter o valor positivo</li>
                  </ul>
                </div>
              </div>

              {/* Botão */}
              <div className="flex justify-center">
                <button
                  onClick={() => {
                    setShowValorNegativoModal(false);
                    setValorNegativoInfo(null);
                  }}
                  className="px-8 py-3 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors font-medium"
                >
                  Entendi
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal de Confirmação para Remover Trocas */}
      <AnimatePresence>
        {showRemoverTrocasModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/70 backdrop-blur-sm z-[9999] flex items-center justify-center p-4"
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              className="bg-gray-900 rounded-xl border border-red-500/30 p-6 max-w-md w-full"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 bg-red-500/20 rounded-lg">
                  <AlertTriangle className="w-6 h-6 text-red-400" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">
                    Remover Todas as Trocas
                  </h3>
                  <p className="text-sm text-gray-400">
                    Esta ação não pode ser desfeita
                  </p>
                </div>
              </div>

              {/* Conteúdo */}
              <div className="space-y-4 mb-6">
                <p className="text-gray-300">
                  Tem certeza que deseja remover todas as trocas aplicadas no carrinho?
                </p>

                <div className="bg-gray-800/50 rounded-lg p-4 border border-gray-700">
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-400">Trocas no carrinho:</span>
                      <span className="text-white font-medium">
                        {carrinho.filter(item => item.isDevolucao).length}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Valor total das trocas:</span>
                      <span className="text-red-400 font-medium">
                        -{new Intl.NumberFormat('pt-BR', {
                          style: 'currency',
                          currency: 'BRL'
                        }).format(carrinho.filter(item => item.isDevolucao).reduce((total, item) => total + Math.abs(item.subtotal), 0))}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Botões */}
              <div className="flex gap-3">
                <button
                  onClick={() => setShowRemoverTrocasModal(false)}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors font-medium"
                >
                  Cancelar
                </button>
                <button
                  onClick={removerTodasTrocas}
                  className="flex-1 bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg transition-colors font-medium"
                >
                  Remover Trocas
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* ✅ MODAL DE ABERTURA DE CAIXA */}
      {showAberturaCaixaModal && (
        <div
          style={{
            position: 'fixed',
            top: '0px',
            left: '0px',
            width: '100vw',
            height: '100vh',
            backgroundColor: 'rgba(0, 0, 0, 0.8)',
            zIndex: 999999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '20px'
          }}
        >
          <div
            style={{
              backgroundColor: '#1f2937',
              borderRadius: '12px',
              border: '2px solid #10b981',
              padding: '24px',
              maxWidth: '400px',
              width: '100%',
              color: 'white'
            }}
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header */}
            <div style={{ marginBottom: '24px', textAlign: 'center' }}>
              <h3 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '8px' }}>
                💰 Abertura de Caixa
              </h3>
              <p style={{ fontSize: '14px', color: '#9ca3af' }}>
                Registre a abertura do caixa para iniciar as operações
              </p>
            </div>

            {/* Informações do usuário */}
            <div style={{
              backgroundColor: '#374151',
              borderRadius: '8px',
              padding: '16px',
              marginBottom: '20px',
              border: '1px solid #4b5563'
            }}>
              <div style={{ marginBottom: '12px' }}>
                <span style={{ fontSize: '14px', color: '#9ca3af' }}>👤 Operador: </span>
                <span style={{ fontWeight: 'bold' }}>
                  {userData?.nome || 'Usuário'}
                </span>
              </div>
              <div>
                <span style={{ fontSize: '14px', color: '#9ca3af' }}>🕒 Data/Hora: </span>
                <span style={{ fontWeight: 'bold' }}>
                  {formatDateTime(currentDateTime)}
                </span>
              </div>
            </div>

            {/* Campo de valor */}
            <div style={{ marginBottom: '24px' }}>
              <label style={{
                display: 'block',
                fontSize: '14px',
                color: '#9ca3af',
                marginBottom: '8px',
                fontWeight: 'bold'
              }}>
                Valor de Abertura
              </label>
              <div style={{ position: 'relative' }}>
                <span style={{
                  position: 'absolute',
                  left: '12px',
                  top: '50%',
                  transform: 'translateY(-50%)',
                  color: '#9ca3af',
                  fontWeight: 'bold'
                }}>
                  R$
                </span>
                <input
                  type="text"
                  value={valorAberturaCaixa}
                  onChange={(e) => setValorAberturaCaixa(formatarValorMonetario(e.target.value))}
                  placeholder="0,00"
                  style={{
                    width: '100%',
                    backgroundColor: '#374151',
                    border: '1px solid #4b5563',
                    borderRadius: '8px',
                    paddingLeft: '40px',
                    paddingRight: '16px',
                    paddingTop: '12px',
                    paddingBottom: '12px',
                    color: 'white',
                    fontSize: '18px',
                    fontWeight: 'bold',
                    outline: 'none'
                  }}
                  autoFocus
                />
              </div>
              <p style={{ fontSize: '12px', color: '#6b7280', marginTop: '4px' }}>
                Informe o valor inicial em dinheiro no caixa (opcional)
              </p>
            </div>

            {/* Botões */}
            <div style={{ display: 'flex', gap: '12px' }}>
              <button
                onClick={() => {
                  console.log('🚫 Botão Cancelar clicado');
                  setShowAberturaCaixaModal(false);
                  setValorAberturaCaixa('');
                }}
                style={{
                  flex: 1,
                  backgroundColor: '#4b5563',
                  color: 'white',
                  padding: '12px 16px',
                  borderRadius: '8px',
                  border: 'none',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                  fontSize: '16px'
                }}
              >
                Cancelar
              </button>
              <button
                onClick={() => {
                  console.log('✅ Botão Abrir Caixa clicado');
                  abrirCaixa();
                }}
                style={{
                  flex: 1,
                  backgroundColor: '#10b981',
                  color: 'white',
                  padding: '12px 16px',
                  borderRadius: '8px',
                  border: 'none',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                  fontSize: '16px'
                }}
              >
                Abrir Caixa
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ✅ MODAL DE CONTROLE DE CAIXA - MOVIDO PARA FORA DA ESTRUTURA CONDICIONAL */}

      {/* TESTE: Elemento simples para verificar renderização */}
      {showCaixaModal && (
        <div
          style={{
            position: 'fixed',
            top: '100px',
            right: '100px',
            background: 'orange',
            color: 'white',
            padding: '20px',
            zIndex: 999999,
            fontSize: '20px',
            fontWeight: 'bold',
            borderRadius: '8px'
          }}
        >
          MODAL CAIXA ATIVO!
        </div>
      )}

      {showCaixaModal && (
        <div
          style={{
            position: 'fixed',
            top: '0px',
            left: '0px',
            width: '100vw',
            height: '100vh',
            backgroundColor: 'rgba(0, 0, 0, 0.9)',
            zIndex: 999999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '20px'
          }}
        >
          <div
            style={{
              backgroundColor: '#1f2937',
              borderRadius: '12px',
              border: '2px solid #10b981',
              padding: '24px',
              maxWidth: '600px',
              width: '100%',
              color: 'white',
              maxHeight: '90vh',
              overflowY: 'auto'
            }}
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header */}
            <div style={{ marginBottom: '24px', textAlign: 'center' }}>
              <h3 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '8px' }}>
                💰 Controle de Caixa
              </h3>
              <p style={{ fontSize: '14px', color: '#9ca3af' }}>
                Gerencie o status e valores do caixa
              </p>
            </div>

            {/* Informações do caixa */}
            {dadosCaixa && (
              <div style={{
                backgroundColor: '#374151',
                borderRadius: '8px',
                padding: '16px',
                marginBottom: '20px',
                border: '1px solid #4b5563'
              }}>
                <h4 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '12px', color: '#10b981' }}>
                  📊 Status da Abertura
                </h4>
                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px' }}>
                  <div>
                    <span style={{ fontSize: '14px', color: '#9ca3af' }}>👤 Operador: </span>
                    <span style={{ fontWeight: 'bold' }}>
                      {dadosCaixa.usuario_nome || 'N/A'}
                    </span>
                  </div>
                  <div>
                    <span style={{ fontSize: '14px', color: '#9ca3af' }}>🕒 Abertura: </span>
                    <span style={{ fontWeight: 'bold' }}>
                      {formatDateTime(dadosCaixa.data_abertura)}
                    </span>
                  </div>
                  <div>
                    <span style={{ fontSize: '14px', color: '#9ca3af' }}>💵 Valor Inicial: </span>
                    <span style={{ fontWeight: 'bold', color: '#10b981' }}>
                      R$ {formatarValorMonetario(dadosCaixa.valor_abertura?.toString() || '0')}
                    </span>
                  </div>
                  <div>
                    <span style={{ fontSize: '14px', color: '#9ca3af' }}>📈 Status: </span>
                    <span style={{ fontWeight: 'bold', color: '#10b981' }}>
                      ABERTO
                    </span>
                  </div>
                </div>
              </div>
            )}

            {/* Formas de pagamento */}
            <div style={{ marginBottom: '24px' }}>
              <h4 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '16px', color: '#10b981' }}>
                💳 Formas de Pagamento
              </h4>

              {formasPagamentoCaixa.length > 0 ? (
                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px' }}>
                  {formasPagamentoCaixa.map((forma) => (
                    <div
                      key={forma.forma_pagamento_opcao_id}
                      style={{
                        backgroundColor: '#374151',
                        borderRadius: '8px',
                        padding: '12px',
                        border: '1px solid #4b5563'
                      }}
                    >
                      <div style={{ marginBottom: '8px' }}>
                        <span style={{ fontSize: '14px', fontWeight: 'bold', color: '#e5e7eb' }}>
                          {forma.forma_pagamento_opcoes?.nome || 'N/A'}
                        </span>
                      </div>

                      <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                          <span style={{ fontSize: '12px', color: '#9ca3af' }}>Valor Atual:</span>
                          <span style={{ fontSize: '12px', fontWeight: 'bold', color: '#10b981' }}>
                            R$ 0,00
                          </span>
                        </div>

                        <div style={{ marginTop: '8px' }}>
                          <label style={{ fontSize: '12px', color: '#9ca3af', marginBottom: '4px', display: 'block' }}>
                            Informar Valor:
                          </label>
                          <input
                            type="text"
                            value={valoresCaixa[forma.forma_pagamento_opcao_id] || '0,00'}
                            onChange={(e) => {
                              const novoValor = formatarValorMonetario(e.target.value);
                              setValoresCaixa(prev => ({
                                ...prev,
                                [forma.forma_pagamento_opcao_id]: novoValor
                              }));
                            }}
                            placeholder="0,00"
                            style={{
                              width: '100%',
                              backgroundColor: '#1f2937',
                              border: '1px solid #4b5563',
                              borderRadius: '4px',
                              padding: '6px 8px',
                              color: 'white',
                              fontSize: '12px',
                              outline: 'none'
                            }}
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div style={{
                  textAlign: 'center',
                  padding: '20px',
                  color: '#9ca3af',
                  backgroundColor: '#374151',
                  borderRadius: '8px'
                }}>
                  Nenhuma forma de pagamento configurada
                </div>
              )}
            </div>

            {/* Botões */}
            <div style={{ display: 'flex', gap: '12px' }}>
              <button
                onClick={() => {
                  setShowCaixaModal(false);
                  setDadosCaixa(null);
                  setFormasPagamentoCaixa([]);
                  setValoresCaixa({});
                }}
                style={{
                  flex: 1,
                  backgroundColor: '#4b5563',
                  color: 'white',
                  padding: '12px 16px',
                  borderRadius: '8px',
                  border: 'none',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                  fontSize: '16px'
                }}
              >
                Cancelar
              </button>
              <button
                onClick={() => {
                  // TODO: Implementar fechamento de caixa
                  toast.info('Funcionalidade de fechamento será implementada em breve');
                }}
                style={{
                  flex: 1,
                  backgroundColor: '#dc2626',
                  color: 'white',
                  padding: '12px 16px',
                  borderRadius: '8px',
                  border: 'none',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                  fontSize: '16px'
                }}
              >
                Fechar Caixa
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ✅ NOVO: Modal de confirmação para liberar comanda */}
      <AnimatePresence>
        {showLiberarComandaModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"
            onClick={() => setShowLiberarComandaModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-gray-900 rounded-xl border border-orange-500/30 p-6 w-full max-w-md mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <div className="flex items-center gap-3 mb-6">
                <div className="p-3 bg-orange-500/20 rounded-lg">
                  <Unlock className="w-8 h-8 text-orange-400" />
                </div>
                <div>
                  <h3 className="text-xl font-semibold text-white">Liberar Comanda</h3>
                  <p className="text-sm text-gray-400">Esta ação irá liberar a comanda para uso</p>
                </div>
              </div>

              {/* Informações da venda */}
              {vendaParaLiberarComanda && (
                <div className="bg-gray-800/50 rounded-lg p-4 mb-6">
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-gray-400">Venda:</span>
                      <span className="text-white font-medium">{vendaParaLiberarComanda.numero_venda}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Comanda:</span>
                      <span className="text-orange-400 font-medium">#{vendaParaLiberarComanda.comanda_numero}</span>
                    </div>
                    {vendaParaLiberarComanda.nome_cliente && (
                      <div className="flex justify-between">
                        <span className="text-gray-400">Cliente:</span>
                        <span className="text-white">{vendaParaLiberarComanda.nome_cliente}</span>
                      </div>
                    )}
                    <div className="flex justify-between">
                      <span className="text-gray-400">Total:</span>
                      <span className="text-green-400 font-medium">{formatCurrency(vendaParaLiberarComanda.valor_total || 0)}</span>
                    </div>
                  </div>
                </div>
              )}

              {/* Aviso */}
              <div className="bg-orange-500/10 border border-orange-500/30 rounded-lg p-4 mb-6">
                <div className="flex items-start gap-3">
                  <AlertTriangle className="w-5 h-5 text-orange-400 flex-shrink-0 mt-0.5" />
                  <div>
                    <p className="text-orange-400 font-medium text-sm mb-1">Atenção!</p>
                    <p className="text-gray-300 text-sm">
                      Ao liberar a comanda, ela ficará disponível para ser usada em outras vendas.
                      A venda atual permanecerá salva, mas sem comanda vinculada.
                    </p>
                  </div>
                </div>
              </div>

              {/* Botões */}
              <div className="flex gap-3">
                <button
                  onClick={() => {
                    setShowLiberarComandaModal(false);
                    setVendaParaLiberarComanda(null);
                  }}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-colors font-medium"
                  disabled={loadingLiberarComanda}
                >
                  Cancelar
                </button>
                <button
                  onClick={liberarComanda}
                  className="flex-1 bg-orange-600 hover:bg-orange-700 text-white py-3 px-4 rounded-lg transition-colors font-medium disabled:opacity-50"
                  disabled={loadingLiberarComanda}
                >
                  {loadingLiberarComanda ? 'Liberando...' : 'Liberar Comanda'}
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default PDVPage;
