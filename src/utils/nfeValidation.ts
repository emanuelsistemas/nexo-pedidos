/**
 * Utilit√°rios de valida√ß√£o para campos NFe
 * Previne problemas de valida√ß√£o da SEFAZ na origem
 */

export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  cleanValue?: string;
}

/**
 * Caracteres especiais n√£o permitidos pela SEFAZ
 */
const CARACTERES_NAO_PERMITIDOS = [
  // Caracteres de controle
  '\n', '\r', '\t', '\v', '\f',
  // Caracteres especiais problem√°ticos
  '<', '>', '&', '"', "'",
  // Caracteres Unicode problem√°ticos
  '\u0000', '\u0001', '\u0002', '\u0003', '\u0004', '\u0005', '\u0006', '\u0007',
  '\u0008', '\u000B', '\u000C', '\u000E', '\u000F', '\u0010', '\u0011', '\u0012',
  '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', '\u0018', '\u0019', '\u001A',
  '\u001B', '\u001C', '\u001D', '\u001E', '\u001F', '\u007F'
];

/**
 * Caracteres permitidos para diferentes tipos de campos
 */
const CARACTERES_PERMITIDOS = {
  // Nome de produto, descri√ß√£o, endere√ßo
  TEXTO_GERAL: /^[a-zA-Z0-9\s√Ä-√ø\u00C0-\u017F.,;:()\-\/\+\*=@#$%&!?¬∞¬∫¬™]+$/,
  
  // Informa√ß√µes adicionais (mais restritivo)
  INFO_ADICIONAL: /^[a-zA-Z0-9\s√Ä-√ø\u00C0-\u017F.,;:()\-\/\+\*=@#$%&!?¬∞¬∫¬™]+$/,
  
  // Justificativa de cancelamento/CCe (mais restritivo ainda)
  JUSTIFICATIVA: /^[a-zA-Z0-9\s√Ä-√ø\u00C0-\u017F.,;:()\-\/\+\*=@#$%&!?¬∞¬∫¬™]+$/,
  
  // Endere√ßo (sem alguns caracteres especiais)
  ENDERECO: /^[a-zA-Z0-9\s√Ä-√ø\u00C0-\u017F.,;:()\-\/\+]+$/
};

/**
 * Valida um campo de texto para NFe
 */
export const validarCampoNFe = (
  valor: string,
  tipo: keyof typeof CARACTERES_PERMITIDOS = 'TEXTO_GERAL',
  maxLength?: number
): ValidationResult => {
  const errors: string[] = [];
  
  if (!valor || valor.trim() === '') {
    return { isValid: true, errors: [], cleanValue: '' };
  }

  // 1. Verificar espa√ßos no in√≠cio/fim
  if (valor !== valor.trim()) {
    errors.push('‚ùå N√£o s√£o permitidos espa√ßos no in√≠cio ou fim do texto');
  }

  // 2. Verificar espa√ßos duplicados
  if (/\s{2,}/.test(valor)) {
    errors.push('‚ùå N√£o s√£o permitidos espa√ßos duplicados (use apenas 1 espa√ßo entre palavras)');
  }

  // 3. Verificar quebras de linha
  if (/[\n\r]/.test(valor)) {
    errors.push('‚ùå N√£o s√£o permitidas quebras de linha');
  }

  // 4. Verificar caracteres especiais n√£o permitidos
  const caracteresProblematicos = CARACTERES_NAO_PERMITIDOS.filter(char => valor.includes(char));
  if (caracteresProblematicos.length > 0) {
    errors.push(`‚ùå Caracteres n√£o permitidos encontrados: ${caracteresProblematicos.map(c => `"${c}"`).join(', ')}`);
  }

  // 5. Verificar padr√£o de caracteres permitidos
  const regex = CARACTERES_PERMITIDOS[tipo];
  if (!regex.test(valor.trim())) {
    errors.push('‚ùå Cont√©m caracteres especiais n√£o permitidos pela SEFAZ');
  }

  // 6. Verificar tamanho m√°ximo
  if (maxLength && valor.trim().length > maxLength) {
    errors.push(`‚ùå Texto muito longo (m√°ximo ${maxLength} caracteres, atual: ${valor.trim().length})`);
  }

  // 7. Verificar se cont√©m apenas espa√ßos
  if (valor.trim().length === 0 && valor.length > 0) {
    errors.push('‚ùå Campo n√£o pode conter apenas espa√ßos');
  }

  const isValid = errors.length === 0;
  const cleanValue = isValid ? valor.trim() : undefined;

  return { isValid, errors, cleanValue };
};

/**
 * Valida especificamente nome de produto
 */
export const validarNomeProduto = (nome: string): ValidationResult => {
  return validarCampoNFe(nome, 'TEXTO_GERAL', 120);
};

/**
 * Valida descri√ß√£o de produto
 */
export const validarDescricaoProduto = (descricao: string): ValidationResult => {
  return validarCampoNFe(descricao, 'TEXTO_GERAL', 500);
};

/**
 * Valida informa√ß√µes adicionais da NFe
 */
export const validarInformacoesAdicionais = (info: string): ValidationResult => {
  return validarCampoNFe(info, 'INFO_ADICIONAL', 2000);
};

/**
 * Valida justificativa de cancelamento
 */
export const validarJustificativaCancelamento = (justificativa: string): ValidationResult => {
  const result = validarCampoNFe(justificativa, 'JUSTIFICATIVA', 255);
  
  // Valida√ß√£o adicional: m√≠nimo 15 caracteres para cancelamento
  if (result.isValid && justificativa.trim().length < 15) {
    result.errors.push('‚ùå Justificativa deve ter pelo menos 15 caracteres');
    result.isValid = false;
  }

  return result;
};

/**
 * Valida texto de carta de corre√ß√£o
 */
export const validarTextoCCe = (texto: string): ValidationResult => {
  const result = validarCampoNFe(texto, 'JUSTIFICATIVA', 1000);
  
  // Valida√ß√£o adicional: m√≠nimo 15 caracteres para CCe
  if (result.isValid && texto.trim().length < 15) {
    result.errors.push('‚ùå Corre√ß√£o deve ter pelo menos 15 caracteres');
    result.isValid = false;
  }

  return result;
};

/**
 * Valida campos de endere√ßo
 */
export const validarEndereco = (endereco: string, campo: string): ValidationResult => {
  const result = validarCampoNFe(endereco, 'ENDERECO', 60);

  if (!result.isValid) {
    result.errors = result.errors.map(error => error.replace('‚ùå', `‚ùå ${campo}:`));
  }

  return result;
};

/**
 * Valida nome de cliente (pessoa f√≠sica ou jur√≠dica)
 */
export const validarNomeCliente = (nome: string): ValidationResult => {
  return validarCampoNFe(nome, 'TEXTO_GERAL', 60);
};

/**
 * Valida raz√£o social de cliente
 */
export const validarRazaoSocial = (razaoSocial: string): ValidationResult => {
  return validarCampoNFe(razaoSocial, 'TEXTO_GERAL', 60);
};

/**
 * Valida nome fantasia de cliente
 */
export const validarNomeFantasia = (nomeFantasia: string): ValidationResult => {
  return validarCampoNFe(nomeFantasia, 'TEXTO_GERAL', 60);
};

/**
 * Valida observa√ß√£o NFe do cliente (vai para informa√ß√µes adicionais da NFe)
 */
export const validarObservacaoNFe = (observacao: string): ValidationResult => {
  return validarCampoNFe(observacao, 'INFO_ADICIONAL', 2000);
};

/**
 * Valida bairro do cliente
 */
export const validarBairro = (bairro: string): ValidationResult => {
  return validarCampoNFe(bairro, 'ENDERECO', 60);
};

/**
 * Valida cidade do cliente
 */
export const validarCidade = (cidade: string): ValidationResult => {
  return validarCampoNFe(cidade, 'ENDERECO', 60);
};

/**
 * Valida complemento do endere√ßo
 */
export const validarComplemento = (complemento: string): ValidationResult => {
  return validarCampoNFe(complemento, 'ENDERECO', 60);
};

/**
 * Valida raz√£o social da empresa (emitente da NFe)
 */
export const validarRazaoSocialEmpresa = (razaoSocial: string): ValidationResult => {
  return validarCampoNFe(razaoSocial, 'TEXTO_GERAL', 60);
};

/**
 * Valida nome fantasia da empresa (emitente da NFe)
 */
export const validarNomeFantasiaEmpresa = (nomeFantasia: string): ValidationResult => {
  return validarCampoNFe(nomeFantasia, 'TEXTO_GERAL', 60);
};

/**
 * Valida nome do propriet√°rio da empresa
 */
export const validarNomeProprietario = (nome: string): ValidationResult => {
  return validarCampoNFe(nome, 'TEXTO_GERAL', 60);
};

/**
 * Limpa automaticamente um texto para NFe (uso com cuidado)
 */
export const limparTextoNFe = (texto: string): string => {
  if (!texto) return '';
  
  return texto
    .trim() // Remove espa√ßos in√≠cio/fim
    .replace(/\s+/g, ' ') // Remove espa√ßos duplicados
    .replace(/[\n\r\t]/g, ' ') // Remove quebras de linha
    .replace(/[<>&"']/g, '') // Remove caracteres XML problem√°ticos
    .substring(0, 120); // Limita tamanho
};

/**
 * Gera mensagem de erro amig√°vel para o usu√°rio
 */
export const gerarMensagemErro = (campo: string, errors: string[]): string => {
  const titulo = `üö´ ERRO NO CAMPO "${campo.toUpperCase()}"`;
  const explicacao = '\n\nüìã A SEFAZ n√£o aceita:';
  const listaErros = errors.map(error => `\n‚Ä¢ ${error}`).join('');
  const instrucao = '\n\n‚úÖ Por favor, corrija o texto e tente novamente.';
  
  return titulo + explicacao + listaErros + instrucao;
};

/**
 * Hook para valida√ß√£o em tempo real
 */
export const useNFeValidation = () => {
  const validarEMostrarErro = (
    valor: string,
    validador: (valor: string) => ValidationResult,
    campo: string,
    showMessage: (type: 'success' | 'error' | 'warning', message: string) => void
  ): boolean => {
    const resultado = validador(valor);
    
    if (!resultado.isValid) {
      const mensagem = gerarMensagemErro(campo, resultado.errors);
      showMessage('error', mensagem);
      return false;
    }
    
    return true;
  };

  return { validarEMostrarErro };
};

/**
 * Constantes para tamanhos m√°ximos de campos NFe
 */
export const TAMANHOS_MAXIMOS_NFE = {
  NOME_PRODUTO: 120,
  DESCRICAO_PRODUTO: 500,
  INFORMACOES_ADICIONAIS: 2000,
  JUSTIFICATIVA_CANCELAMENTO: 255,
  TEXTO_CCE: 1000,
  ENDERECO: 60,
  BAIRRO: 60,
  CIDADE: 60,
  COMPLEMENTO: 60
} as const;
